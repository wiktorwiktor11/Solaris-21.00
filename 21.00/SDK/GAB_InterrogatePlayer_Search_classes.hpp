#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GAB_InterrogatePlayer_Search

#include "Basic.hpp"

#include "GameplayTags_0_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GAB_InterrogatePlayer_Search.GAB_InterrogatePlayer_Search_C
// 0x0118 (0x0C58 - 0x0B40)
class UGAB_InterrogatePlayer_Search_C final : public UFortGameplayAbility_CarryPlayer
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0B40(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0B48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerControllerAthena*            PlayerController;                                  // 0x0B50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        InterrogatedPlayer;                                // 0x0B58(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Anim_Search;                                       // 0x0B60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   InterrogateHolster;                                // 0x0B68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LootTierGroupName;                                 // 0x0B6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortWorldItemDefinition*               ItemDefinition;                                    // 0x0B70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumberToSpawn;                                     // 0x0B78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B7C[0x4];                                      // 0x0B7C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LootSpawnOffset;                                   // 0x0B80(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         MaxDropsInstance;                                  // 0x0B98(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         NumDropsInstance;                                  // 0x0BC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC4[0x4];                                      // 0x0BC4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         KeycardDropBias;                                   // 0x0BC8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UFortWorldItemDefinition*>       KeycardItemDefinitions;                            // 0x0BF0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           T_Keycard_Yacht;                                   // 0x0C00(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           T_Keycard_OilRig;                                  // 0x0C04(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           T_Keycard_SharkIsland;                             // 0x0C08(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           T_Keycard_HQ;                                      // 0x0C0C(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           T_Keycard_MountainBase;                            // 0x0C10(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C14[0x4];                                      // 0x0C14(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Timer_Interrogation;                               // 0x0C18(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  T_ReticleHUD;                                      // 0x0C20(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           T_NPC;                                             // 0x0C40(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C44[0x4];                                      // 0x0C44(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 GE_Cooldown;                                       // 0x0C48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_PickedUp;                                       // 0x0C50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Added_9291D75D4A0949E1C5B7E49C1FD11F8B();
	void ApplyGameplayEffectToNPC(class UClass* GameplayEffect);
	void Cancelled_6BBDC9B445D4280492A25E8E5EA7A53D(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Completed_6BBDC9B445D4280492A25E8E5EA7A53D(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void DropKeycard();
	void DropLoot();
	void EndAbilityCleanup();
	void ExecuteUbergraph_GAB_InterrogatePlayer_Search(int32 EntryPoint);
	void GetKeycardToDrop(bool* HasKeycard, class UFortWorldItemDefinition** Output);
	void InitAbility();
	void K2_ActivateAbility();
	void K2_OnEndAbility(bool bWasCancelled);
	void OnDied_Event_0(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void OnDied_Event_1(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void OnPress_2000C5AE43E9D757FF188B85CF911E39(float TimeWaited);
	void ToggleReticleVisibility(bool Hide);
	void Triggered_6BBDC9B445D4280492A25E8E5EA7A53D(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GAB_InterrogatePlayer_Search_C">();
	}
	static class UGAB_InterrogatePlayer_Search_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGAB_InterrogatePlayer_Search_C>();
	}
};
static_assert(alignof(UGAB_InterrogatePlayer_Search_C) == 0x000008, "Wrong alignment on UGAB_InterrogatePlayer_Search_C");
static_assert(sizeof(UGAB_InterrogatePlayer_Search_C) == 0x000C58, "Wrong size on UGAB_InterrogatePlayer_Search_C");
static_assert(offsetof(UGAB_InterrogatePlayer_Search_C, UberGraphFrame) == 0x000B40, "Member 'UGAB_InterrogatePlayer_Search_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGAB_InterrogatePlayer_Search_C, PlayerPawn) == 0x000B48, "Member 'UGAB_InterrogatePlayer_Search_C::PlayerPawn' has a wrong offset!");
static_assert(offsetof(UGAB_InterrogatePlayer_Search_C, PlayerController) == 0x000B50, "Member 'UGAB_InterrogatePlayer_Search_C::PlayerController' has a wrong offset!");
static_assert(offsetof(UGAB_InterrogatePlayer_Search_C, InterrogatedPlayer) == 0x000B58, "Member 'UGAB_InterrogatePlayer_Search_C::InterrogatedPlayer' has a wrong offset!");
static_assert(offsetof(UGAB_InterrogatePlayer_Search_C, Anim_Search) == 0x000B60, "Member 'UGAB_InterrogatePlayer_Search_C::Anim_Search' has a wrong offset!");
static_assert(offsetof(UGAB_InterrogatePlayer_Search_C, InterrogateHolster) == 0x000B68, "Member 'UGAB_InterrogatePlayer_Search_C::InterrogateHolster' has a wrong offset!");
static_assert(offsetof(UGAB_InterrogatePlayer_Search_C, LootTierGroupName) == 0x000B6C, "Member 'UGAB_InterrogatePlayer_Search_C::LootTierGroupName' has a wrong offset!");
static_assert(offsetof(UGAB_InterrogatePlayer_Search_C, ItemDefinition) == 0x000B70, "Member 'UGAB_InterrogatePlayer_Search_C::ItemDefinition' has a wrong offset!");
static_assert(offsetof(UGAB_InterrogatePlayer_Search_C, NumberToSpawn) == 0x000B78, "Member 'UGAB_InterrogatePlayer_Search_C::NumberToSpawn' has a wrong offset!");
static_assert(offsetof(UGAB_InterrogatePlayer_Search_C, LootSpawnOffset) == 0x000B80, "Member 'UGAB_InterrogatePlayer_Search_C::LootSpawnOffset' has a wrong offset!");
static_assert(offsetof(UGAB_InterrogatePlayer_Search_C, MaxDropsInstance) == 0x000B98, "Member 'UGAB_InterrogatePlayer_Search_C::MaxDropsInstance' has a wrong offset!");
static_assert(offsetof(UGAB_InterrogatePlayer_Search_C, NumDropsInstance) == 0x000BC0, "Member 'UGAB_InterrogatePlayer_Search_C::NumDropsInstance' has a wrong offset!");
static_assert(offsetof(UGAB_InterrogatePlayer_Search_C, KeycardDropBias) == 0x000BC8, "Member 'UGAB_InterrogatePlayer_Search_C::KeycardDropBias' has a wrong offset!");
static_assert(offsetof(UGAB_InterrogatePlayer_Search_C, KeycardItemDefinitions) == 0x000BF0, "Member 'UGAB_InterrogatePlayer_Search_C::KeycardItemDefinitions' has a wrong offset!");
static_assert(offsetof(UGAB_InterrogatePlayer_Search_C, T_Keycard_Yacht) == 0x000C00, "Member 'UGAB_InterrogatePlayer_Search_C::T_Keycard_Yacht' has a wrong offset!");
static_assert(offsetof(UGAB_InterrogatePlayer_Search_C, T_Keycard_OilRig) == 0x000C04, "Member 'UGAB_InterrogatePlayer_Search_C::T_Keycard_OilRig' has a wrong offset!");
static_assert(offsetof(UGAB_InterrogatePlayer_Search_C, T_Keycard_SharkIsland) == 0x000C08, "Member 'UGAB_InterrogatePlayer_Search_C::T_Keycard_SharkIsland' has a wrong offset!");
static_assert(offsetof(UGAB_InterrogatePlayer_Search_C, T_Keycard_HQ) == 0x000C0C, "Member 'UGAB_InterrogatePlayer_Search_C::T_Keycard_HQ' has a wrong offset!");
static_assert(offsetof(UGAB_InterrogatePlayer_Search_C, T_Keycard_MountainBase) == 0x000C10, "Member 'UGAB_InterrogatePlayer_Search_C::T_Keycard_MountainBase' has a wrong offset!");
static_assert(offsetof(UGAB_InterrogatePlayer_Search_C, Timer_Interrogation) == 0x000C18, "Member 'UGAB_InterrogatePlayer_Search_C::Timer_Interrogation' has a wrong offset!");
static_assert(offsetof(UGAB_InterrogatePlayer_Search_C, T_ReticleHUD) == 0x000C20, "Member 'UGAB_InterrogatePlayer_Search_C::T_ReticleHUD' has a wrong offset!");
static_assert(offsetof(UGAB_InterrogatePlayer_Search_C, T_NPC) == 0x000C40, "Member 'UGAB_InterrogatePlayer_Search_C::T_NPC' has a wrong offset!");
static_assert(offsetof(UGAB_InterrogatePlayer_Search_C, GE_Cooldown) == 0x000C48, "Member 'UGAB_InterrogatePlayer_Search_C::GE_Cooldown' has a wrong offset!");
static_assert(offsetof(UGAB_InterrogatePlayer_Search_C, GE_PickedUp) == 0x000C50, "Member 'UGAB_InterrogatePlayer_Search_C::GE_PickedUp' has a wrong offset!");

}

