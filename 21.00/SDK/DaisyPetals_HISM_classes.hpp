#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DaisyPetals_HISM

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass DaisyPetals_HISM.DaisyPetals_HISM_C
// 0x0070 (0x0880 - 0x0810)
class UDaisyPetals_HISM_C final : public UHierarchicalInstancedStaticMeshComponent
{
public:
	uint8                                         Pad_808[0x8];                                      // 0x0808(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PetalCount;                                        // 0x0810(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PetalOffsetFromCenter;                             // 0x0814(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               PetalRotationOffset;                               // 0x0818(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseRandomRotation;                                 // 0x0830(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_831[0x7];                                      // 0x0831(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               PetalRotationOffset_RandomMax;                     // 0x0838(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseRandomOffsetFromCenter;                         // 0x0850(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_851[0x3];                                      // 0x0851(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PetalOffsetFromCenter_RandomMax;                   // 0x0854(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RandomSeed;                                        // 0x0858(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InheritRandomSeedFromParentActor;                  // 0x085C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_85D[0x3];                                      // 0x085D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PetalGlobalScale;                                  // 0x0860(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseRandomScale;                                    // 0x0864(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_865[0x3];                                      // 0x0865(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PetalRandomScaleRange;                             // 0x0868(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	struct FVector ValidateScale(int32 InstanceIndex, int32 Seed);
	struct FRotator ValidateRotation(const struct FRotator& InRot, int32 InstanceIndex, int32 Seed);
	void ValidateOffsetFromCenter(int32 InstanceIndex, int32 Seed, float* Offset);
	void PopulatePetals();
	int32 convertIndexToSeedOffset(int32 inInt);
	void AddPetals(int32 Count);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"DaisyPetals_HISM_C">();
	}
	static class UDaisyPetals_HISM_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDaisyPetals_HISM_C>();
	}
};
static_assert(alignof(UDaisyPetals_HISM_C) == 0x000010, "Wrong alignment on UDaisyPetals_HISM_C");
static_assert(sizeof(UDaisyPetals_HISM_C) == 0x000880, "Wrong size on UDaisyPetals_HISM_C");
static_assert(offsetof(UDaisyPetals_HISM_C, PetalCount) == 0x000810, "Member 'UDaisyPetals_HISM_C::PetalCount' has a wrong offset!");
static_assert(offsetof(UDaisyPetals_HISM_C, PetalOffsetFromCenter) == 0x000814, "Member 'UDaisyPetals_HISM_C::PetalOffsetFromCenter' has a wrong offset!");
static_assert(offsetof(UDaisyPetals_HISM_C, PetalRotationOffset) == 0x000818, "Member 'UDaisyPetals_HISM_C::PetalRotationOffset' has a wrong offset!");
static_assert(offsetof(UDaisyPetals_HISM_C, UseRandomRotation) == 0x000830, "Member 'UDaisyPetals_HISM_C::UseRandomRotation' has a wrong offset!");
static_assert(offsetof(UDaisyPetals_HISM_C, PetalRotationOffset_RandomMax) == 0x000838, "Member 'UDaisyPetals_HISM_C::PetalRotationOffset_RandomMax' has a wrong offset!");
static_assert(offsetof(UDaisyPetals_HISM_C, UseRandomOffsetFromCenter) == 0x000850, "Member 'UDaisyPetals_HISM_C::UseRandomOffsetFromCenter' has a wrong offset!");
static_assert(offsetof(UDaisyPetals_HISM_C, PetalOffsetFromCenter_RandomMax) == 0x000854, "Member 'UDaisyPetals_HISM_C::PetalOffsetFromCenter_RandomMax' has a wrong offset!");
static_assert(offsetof(UDaisyPetals_HISM_C, RandomSeed) == 0x000858, "Member 'UDaisyPetals_HISM_C::RandomSeed' has a wrong offset!");
static_assert(offsetof(UDaisyPetals_HISM_C, InheritRandomSeedFromParentActor) == 0x00085C, "Member 'UDaisyPetals_HISM_C::InheritRandomSeedFromParentActor' has a wrong offset!");
static_assert(offsetof(UDaisyPetals_HISM_C, PetalGlobalScale) == 0x000860, "Member 'UDaisyPetals_HISM_C::PetalGlobalScale' has a wrong offset!");
static_assert(offsetof(UDaisyPetals_HISM_C, UseRandomScale) == 0x000864, "Member 'UDaisyPetals_HISM_C::UseRandomScale' has a wrong offset!");
static_assert(offsetof(UDaisyPetals_HISM_C, PetalRandomScaleRange) == 0x000868, "Member 'UDaisyPetals_HISM_C::PetalRandomScaleRange' has a wrong offset!");

}

