#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CustomizableObject

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum CustomizableObject.ECustomizableObjectRelevancy
// NumValues: 0x0003
enum class ECustomizableObjectRelevancy : uint8
{
	All                                      = 0,
	ClientOnly                               = 1,
	ECustomizableObjectRelevancy_MAX         = 2,
};

// Enum CustomizableObject.ECustomizableObjectCompilationState
// NumValues: 0x0005
enum class ECustomizableObjectCompilationState : uint8
{
	None                                     = 0,
	InProgress                               = 1,
	Completed                                = 2,
	Failed                                   = 3,
	ECustomizableObjectCompilationState_MAX  = 4,
};

// Enum CustomizableObject.EMutableParameterType
// NumValues: 0x0008
enum class EMutableParameterType : uint8
{
	None                                     = 0,
	Bool                                     = 1,
	Int                                      = 2,
	Float                                    = 3,
	Color                                    = 4,
	Projector                                = 5,
	Texture                                  = 6,
	EMutableParameterType_MAX                = 7,
};

// Enum CustomizableObject.ECustomizableObjectGroupType
// NumValues: 0x0005
enum class ECustomizableObjectGroupType : uint8
{
	COGT_TOGGLE                              = 0,
	COGT_ALL                                 = 1,
	COGT_ONE                                 = 2,
	COGT_ONE_OR_NONE                         = 3,
	COGT_MAX                                 = 4,
};

// Enum CustomizableObject.EMutableCompileMeshType
// NumValues: 0x0006
enum class EMutableCompileMeshType : uint8
{
	Full                                     = 0,
	Local                                    = 1,
	LocalAndChildren                         = 2,
	AddWorkingSetNoChildren                  = 3,
	AddWorkingSetAndChildren                 = 4,
	EMutableCompileMeshType_MAX              = 5,
};

// Enum CustomizableObject.ECustomizableObjectProjectorType
// NumValues: 0x0004
enum class ECustomizableObjectProjectorType : uint8
{
	Planar                                   = 0,
	Cylindrical                              = 1,
	Wrapping                                 = 2,
	ECustomizableObjectProjectorType_MAX     = 3,
};

// ScriptStruct CustomizableObject.GeneratedMesh
// 0x0010 (0x0010 - 0x0000)
struct FGeneratedMesh final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            Mesh;                                              // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeneratedMesh) == 0x000008, "Wrong alignment on FGeneratedMesh");
static_assert(sizeof(FGeneratedMesh) == 0x000010, "Wrong size on FGeneratedMesh");
static_assert(offsetof(FGeneratedMesh, ID) == 0x000000, "Member 'FGeneratedMesh::ID' has a wrong offset!");
static_assert(offsetof(FGeneratedMesh, Mesh) == 0x000008, "Member 'FGeneratedMesh::Mesh' has a wrong offset!");

// ScriptStruct CustomizableObject.GeneratedTexture
// 0x0020 (0x0020 - 0x0000)
struct FGeneratedTexture final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Texture;                                           // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeneratedTexture) == 0x000008, "Wrong alignment on FGeneratedTexture");
static_assert(sizeof(FGeneratedTexture) == 0x000020, "Wrong size on FGeneratedTexture");
static_assert(offsetof(FGeneratedTexture, ID) == 0x000000, "Member 'FGeneratedTexture::ID' has a wrong offset!");
static_assert(offsetof(FGeneratedTexture, Name) == 0x000008, "Member 'FGeneratedTexture::Name' has a wrong offset!");
static_assert(offsetof(FGeneratedTexture, Texture) == 0x000018, "Member 'FGeneratedTexture::Texture' has a wrong offset!");

// ScriptStruct CustomizableObject.GeneratedMaterial
// 0x0010 (0x0010 - 0x0000)
struct FGeneratedMaterial final
{
public:
	TArray<struct FGeneratedTexture>              Textures;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeneratedMaterial) == 0x000008, "Wrong alignment on FGeneratedMaterial");
static_assert(sizeof(FGeneratedMaterial) == 0x000010, "Wrong size on FGeneratedMaterial");
static_assert(offsetof(FGeneratedMaterial, Textures) == 0x000000, "Member 'FGeneratedMaterial::Textures' has a wrong offset!");

// ScriptStruct CustomizableObject.ComponentSkeletons
// 0x0020 (0x0020 - 0x0000)
struct FComponentSkeletons final
{
public:
	TArray<int32>                                 SkeletonIndices;                                   // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class USkeleton*>                      Skeletons;                                         // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComponentSkeletons) == 0x000008, "Wrong alignment on FComponentSkeletons");
static_assert(sizeof(FComponentSkeletons) == 0x000020, "Wrong size on FComponentSkeletons");
static_assert(offsetof(FComponentSkeletons, SkeletonIndices) == 0x000000, "Member 'FComponentSkeletons::SkeletonIndices' has a wrong offset!");
static_assert(offsetof(FComponentSkeletons, Skeletons) == 0x000010, "Member 'FComponentSkeletons::Skeletons' has a wrong offset!");

// ScriptStruct CustomizableObject.ParameterDecorations
// 0x0010 (0x0010 - 0x0000)
struct FParameterDecorations final
{
public:
	TArray<class UTexture2D*>                     Images;                                            // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FParameterDecorations) == 0x000008, "Wrong alignment on FParameterDecorations");
static_assert(sizeof(FParameterDecorations) == 0x000010, "Wrong size on FParameterDecorations");
static_assert(offsetof(FParameterDecorations, Images) == 0x000000, "Member 'FParameterDecorations::Images' has a wrong offset!");

// ScriptStruct CustomizableObject.ComponentAnimBPs
// 0x0050 (0x0050 - 0x0000)
struct FComponentAnimBPs final
{
public:
	TMap<int32, TSoftClassPtr<class UClass>>      AnimSlotToBP;                                      // 0x0000(0x0050)(Edit, EditFixedSize, Transient, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComponentAnimBPs) == 0x000008, "Wrong alignment on FComponentAnimBPs");
static_assert(sizeof(FComponentAnimBPs) == 0x000050, "Wrong size on FComponentAnimBPs");
static_assert(offsetof(FComponentAnimBPs, AnimSlotToBP) == 0x000000, "Member 'FComponentAnimBPs::AnimSlotToBP' has a wrong offset!");

// ScriptStruct CustomizableObject.FParameterOptionsTags
// 0x0010 (0x0010 - 0x0000)
struct FFParameterOptionsTags final
{
public:
	TArray<class FString>                         Tags;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFParameterOptionsTags) == 0x000008, "Wrong alignment on FFParameterOptionsTags");
static_assert(sizeof(FFParameterOptionsTags) == 0x000010, "Wrong size on FFParameterOptionsTags");
static_assert(offsetof(FFParameterOptionsTags, Tags) == 0x000000, "Member 'FFParameterOptionsTags::Tags' has a wrong offset!");

// ScriptStruct CustomizableObject.ParameterTags
// 0x0060 (0x0060 - 0x0000)
struct FParameterTags final
{
public:
	TArray<class FString>                         Tags;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FFParameterOptionsTags> ParameterOptions;                                  // 0x0010(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FParameterTags) == 0x000008, "Wrong alignment on FParameterTags");
static_assert(sizeof(FParameterTags) == 0x000060, "Wrong size on FParameterTags");
static_assert(offsetof(FParameterTags, Tags) == 0x000000, "Member 'FParameterTags::Tags' has a wrong offset!");
static_assert(offsetof(FParameterTags, ParameterOptions) == 0x000010, "Member 'FParameterTags::ParameterOptions' has a wrong offset!");

// ScriptStruct CustomizableObject.CustomizableObjectBoolParameterValue
// 0x0028 (0x0028 - 0x0000)
struct FCustomizableObjectBoolParameterValue final
{
public:
	class FString                                 ParameterName;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ParameterValue;                                    // 0x0010(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UID;                                               // 0x0018(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizableObjectBoolParameterValue) == 0x000008, "Wrong alignment on FCustomizableObjectBoolParameterValue");
static_assert(sizeof(FCustomizableObjectBoolParameterValue) == 0x000028, "Wrong size on FCustomizableObjectBoolParameterValue");
static_assert(offsetof(FCustomizableObjectBoolParameterValue, ParameterName) == 0x000000, "Member 'FCustomizableObjectBoolParameterValue::ParameterName' has a wrong offset!");
static_assert(offsetof(FCustomizableObjectBoolParameterValue, ParameterValue) == 0x000010, "Member 'FCustomizableObjectBoolParameterValue::ParameterValue' has a wrong offset!");
static_assert(offsetof(FCustomizableObjectBoolParameterValue, UID) == 0x000018, "Member 'FCustomizableObjectBoolParameterValue::UID' has a wrong offset!");

// ScriptStruct CustomizableObject.CustomizableObjectIntParameterValue
// 0x0040 (0x0040 - 0x0000)
struct FCustomizableObjectIntParameterValue final
{
public:
	class FString                                 ParameterName;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ParameterValueName;                                // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UID;                                               // 0x0020(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ParameterRangeValueNames;                          // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizableObjectIntParameterValue) == 0x000008, "Wrong alignment on FCustomizableObjectIntParameterValue");
static_assert(sizeof(FCustomizableObjectIntParameterValue) == 0x000040, "Wrong size on FCustomizableObjectIntParameterValue");
static_assert(offsetof(FCustomizableObjectIntParameterValue, ParameterName) == 0x000000, "Member 'FCustomizableObjectIntParameterValue::ParameterName' has a wrong offset!");
static_assert(offsetof(FCustomizableObjectIntParameterValue, ParameterValueName) == 0x000010, "Member 'FCustomizableObjectIntParameterValue::ParameterValueName' has a wrong offset!");
static_assert(offsetof(FCustomizableObjectIntParameterValue, UID) == 0x000020, "Member 'FCustomizableObjectIntParameterValue::UID' has a wrong offset!");
static_assert(offsetof(FCustomizableObjectIntParameterValue, ParameterRangeValueNames) == 0x000030, "Member 'FCustomizableObjectIntParameterValue::ParameterRangeValueNames' has a wrong offset!");

// ScriptStruct CustomizableObject.CustomizableObjectFloatParameterValue
// 0x0038 (0x0038 - 0x0000)
struct FCustomizableObjectFloatParameterValue final
{
public:
	class FString                                 ParameterName;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParameterValue;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UID;                                               // 0x0018(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 ParameterRangeValues;                              // 0x0028(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizableObjectFloatParameterValue) == 0x000008, "Wrong alignment on FCustomizableObjectFloatParameterValue");
static_assert(sizeof(FCustomizableObjectFloatParameterValue) == 0x000038, "Wrong size on FCustomizableObjectFloatParameterValue");
static_assert(offsetof(FCustomizableObjectFloatParameterValue, ParameterName) == 0x000000, "Member 'FCustomizableObjectFloatParameterValue::ParameterName' has a wrong offset!");
static_assert(offsetof(FCustomizableObjectFloatParameterValue, ParameterValue) == 0x000010, "Member 'FCustomizableObjectFloatParameterValue::ParameterValue' has a wrong offset!");
static_assert(offsetof(FCustomizableObjectFloatParameterValue, UID) == 0x000018, "Member 'FCustomizableObjectFloatParameterValue::UID' has a wrong offset!");
static_assert(offsetof(FCustomizableObjectFloatParameterValue, ParameterRangeValues) == 0x000028, "Member 'FCustomizableObjectFloatParameterValue::ParameterRangeValues' has a wrong offset!");

// ScriptStruct CustomizableObject.CustomizableObjectTextureParameterValue
// 0x0028 (0x0028 - 0x0000)
struct FCustomizableObjectTextureParameterValue final
{
public:
	class FString                                 ParameterName;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        ParameterValue;                                    // 0x0010(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UID;                                               // 0x0018(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizableObjectTextureParameterValue) == 0x000008, "Wrong alignment on FCustomizableObjectTextureParameterValue");
static_assert(sizeof(FCustomizableObjectTextureParameterValue) == 0x000028, "Wrong size on FCustomizableObjectTextureParameterValue");
static_assert(offsetof(FCustomizableObjectTextureParameterValue, ParameterName) == 0x000000, "Member 'FCustomizableObjectTextureParameterValue::ParameterName' has a wrong offset!");
static_assert(offsetof(FCustomizableObjectTextureParameterValue, ParameterValue) == 0x000010, "Member 'FCustomizableObjectTextureParameterValue::ParameterValue' has a wrong offset!");
static_assert(offsetof(FCustomizableObjectTextureParameterValue, UID) == 0x000018, "Member 'FCustomizableObjectTextureParameterValue::UID' has a wrong offset!");

// ScriptStruct CustomizableObject.CustomizableObjectVectorParameterValue
// 0x0030 (0x0030 - 0x0000)
struct FCustomizableObjectVectorParameterValue final
{
public:
	class FString                                 ParameterName;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ParameterValue;                                    // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UID;                                               // 0x0020(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizableObjectVectorParameterValue) == 0x000008, "Wrong alignment on FCustomizableObjectVectorParameterValue");
static_assert(sizeof(FCustomizableObjectVectorParameterValue) == 0x000030, "Wrong size on FCustomizableObjectVectorParameterValue");
static_assert(offsetof(FCustomizableObjectVectorParameterValue, ParameterName) == 0x000000, "Member 'FCustomizableObjectVectorParameterValue::ParameterName' has a wrong offset!");
static_assert(offsetof(FCustomizableObjectVectorParameterValue, ParameterValue) == 0x000010, "Member 'FCustomizableObjectVectorParameterValue::ParameterValue' has a wrong offset!");
static_assert(offsetof(FCustomizableObjectVectorParameterValue, UID) == 0x000020, "Member 'FCustomizableObjectVectorParameterValue::UID' has a wrong offset!");

// ScriptStruct CustomizableObject.CustomizableObjectProjector
// 0x0038 (0x0038 - 0x0000)
struct FCustomizableObjectProjector final
{
public:
	struct FVector3f                              Position;                                          // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector3f                              Direction;                                         // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector3f                              Up;                                                // 0x0018(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector3f                              Scale;                                             // 0x0024(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECustomizableObjectProjectorType              ProjectionType;                                    // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Angle;                                             // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizableObjectProjector) == 0x000004, "Wrong alignment on FCustomizableObjectProjector");
static_assert(sizeof(FCustomizableObjectProjector) == 0x000038, "Wrong size on FCustomizableObjectProjector");
static_assert(offsetof(FCustomizableObjectProjector, Position) == 0x000000, "Member 'FCustomizableObjectProjector::Position' has a wrong offset!");
static_assert(offsetof(FCustomizableObjectProjector, Direction) == 0x00000C, "Member 'FCustomizableObjectProjector::Direction' has a wrong offset!");
static_assert(offsetof(FCustomizableObjectProjector, Up) == 0x000018, "Member 'FCustomizableObjectProjector::Up' has a wrong offset!");
static_assert(offsetof(FCustomizableObjectProjector, Scale) == 0x000024, "Member 'FCustomizableObjectProjector::Scale' has a wrong offset!");
static_assert(offsetof(FCustomizableObjectProjector, ProjectionType) == 0x000030, "Member 'FCustomizableObjectProjector::ProjectionType' has a wrong offset!");
static_assert(offsetof(FCustomizableObjectProjector, Angle) == 0x000034, "Member 'FCustomizableObjectProjector::Angle' has a wrong offset!");

// ScriptStruct CustomizableObject.CustomizableObjectProjectorParameterValue
// 0x0068 (0x0068 - 0x0000)
struct FCustomizableObjectProjectorParameterValue final
{
public:
	class FString                                 ParameterName;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCustomizableObjectProjector           Value;                                             // 0x0010(0x0038)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 UID;                                               // 0x0048(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCustomizableObjectProjector>   RangeValues;                                       // 0x0058(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizableObjectProjectorParameterValue) == 0x000008, "Wrong alignment on FCustomizableObjectProjectorParameterValue");
static_assert(sizeof(FCustomizableObjectProjectorParameterValue) == 0x000068, "Wrong size on FCustomizableObjectProjectorParameterValue");
static_assert(offsetof(FCustomizableObjectProjectorParameterValue, ParameterName) == 0x000000, "Member 'FCustomizableObjectProjectorParameterValue::ParameterName' has a wrong offset!");
static_assert(offsetof(FCustomizableObjectProjectorParameterValue, Value) == 0x000010, "Member 'FCustomizableObjectProjectorParameterValue::Value' has a wrong offset!");
static_assert(offsetof(FCustomizableObjectProjectorParameterValue, UID) == 0x000048, "Member 'FCustomizableObjectProjectorParameterValue::UID' has a wrong offset!");
static_assert(offsetof(FCustomizableObjectProjectorParameterValue, RangeValues) == 0x000058, "Member 'FCustomizableObjectProjectorParameterValue::RangeValues' has a wrong offset!");

// ScriptStruct CustomizableObject.ProfileParameterDat
// 0x0070 (0x0070 - 0x0000)
struct FProfileParameterDat final
{
public:
	class FString                                 ProfileName;                                       // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCustomizableObjectBoolParameterValue> BoolParameters;                                    // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCustomizableObjectIntParameterValue> IntParameters;                                     // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCustomizableObjectFloatParameterValue> FloatParameters;                                   // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCustomizableObjectTextureParameterValue> TextureParameters;                                 // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCustomizableObjectVectorParameterValue> VectorParameters;                                  // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCustomizableObjectProjectorParameterValue> ProjectorParameters;                               // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProfileParameterDat) == 0x000008, "Wrong alignment on FProfileParameterDat");
static_assert(sizeof(FProfileParameterDat) == 0x000070, "Wrong size on FProfileParameterDat");
static_assert(offsetof(FProfileParameterDat, ProfileName) == 0x000000, "Member 'FProfileParameterDat::ProfileName' has a wrong offset!");
static_assert(offsetof(FProfileParameterDat, BoolParameters) == 0x000010, "Member 'FProfileParameterDat::BoolParameters' has a wrong offset!");
static_assert(offsetof(FProfileParameterDat, IntParameters) == 0x000020, "Member 'FProfileParameterDat::IntParameters' has a wrong offset!");
static_assert(offsetof(FProfileParameterDat, FloatParameters) == 0x000030, "Member 'FProfileParameterDat::FloatParameters' has a wrong offset!");
static_assert(offsetof(FProfileParameterDat, TextureParameters) == 0x000040, "Member 'FProfileParameterDat::TextureParameters' has a wrong offset!");
static_assert(offsetof(FProfileParameterDat, VectorParameters) == 0x000050, "Member 'FProfileParameterDat::VectorParameters' has a wrong offset!");
static_assert(offsetof(FProfileParameterDat, ProjectorParameters) == 0x000060, "Member 'FProfileParameterDat::ProjectorParameters' has a wrong offset!");

// ScriptStruct CustomizableObject.CompilationOptions
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FCompilationOptions final
{
public:
	bool                                          bTextureCompression;                               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OptimizationLevel;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseParallelCompilation;                           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseDiskCompilation;                               // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x16];                                       // 0x000A(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCompilationOptions) == 0x000008, "Wrong alignment on FCompilationOptions");
static_assert(sizeof(FCompilationOptions) == 0x000020, "Wrong size on FCompilationOptions");
static_assert(offsetof(FCompilationOptions, bTextureCompression) == 0x000000, "Member 'FCompilationOptions::bTextureCompression' has a wrong offset!");
static_assert(offsetof(FCompilationOptions, OptimizationLevel) == 0x000004, "Member 'FCompilationOptions::OptimizationLevel' has a wrong offset!");
static_assert(offsetof(FCompilationOptions, bUseParallelCompilation) == 0x000008, "Member 'FCompilationOptions::bUseParallelCompilation' has a wrong offset!");
static_assert(offsetof(FCompilationOptions, bUseDiskCompilation) == 0x000009, "Member 'FCompilationOptions::bUseDiskCompilation' has a wrong offset!");

// ScriptStruct CustomizableObject.MutableModelImageProperties
// 0x0020 (0x0020 - 0x0000)
struct FMutableModelImageProperties final
{
public:
	class FString                                 TextureParameterName;                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureFilter                                Filter;                                            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         SRGB : 1;                                          // 0x0014(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         FlipGreenChannel : 1;                              // 0x0014(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LODBias;                                           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureGroup                                 LODGroup;                                          // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureAddress                               AddressX;                                          // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureAddress                               AddressY;                                          // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMutableModelImageProperties) == 0x000008, "Wrong alignment on FMutableModelImageProperties");
static_assert(sizeof(FMutableModelImageProperties) == 0x000020, "Wrong size on FMutableModelImageProperties");
static_assert(offsetof(FMutableModelImageProperties, TextureParameterName) == 0x000000, "Member 'FMutableModelImageProperties::TextureParameterName' has a wrong offset!");
static_assert(offsetof(FMutableModelImageProperties, Filter) == 0x000010, "Member 'FMutableModelImageProperties::Filter' has a wrong offset!");
static_assert(offsetof(FMutableModelImageProperties, LODBias) == 0x000018, "Member 'FMutableModelImageProperties::LODBias' has a wrong offset!");
static_assert(offsetof(FMutableModelImageProperties, LODGroup) == 0x00001C, "Member 'FMutableModelImageProperties::LODGroup' has a wrong offset!");
static_assert(offsetof(FMutableModelImageProperties, AddressX) == 0x00001D, "Member 'FMutableModelImageProperties::AddressX' has a wrong offset!");
static_assert(offsetof(FMutableModelImageProperties, AddressY) == 0x00001E, "Member 'FMutableModelImageProperties::AddressY' has a wrong offset!");

// ScriptStruct CustomizableObject.MutableModelParameterValue
// 0x0018 (0x0018 - 0x0000)
struct FMutableModelParameterValue final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMutableModelParameterValue) == 0x000008, "Wrong alignment on FMutableModelParameterValue");
static_assert(sizeof(FMutableModelParameterValue) == 0x000018, "Wrong size on FMutableModelParameterValue");
static_assert(offsetof(FMutableModelParameterValue, Name) == 0x000000, "Member 'FMutableModelParameterValue::Name' has a wrong offset!");
static_assert(offsetof(FMutableModelParameterValue, Value) == 0x000010, "Member 'FMutableModelParameterValue::Value' has a wrong offset!");

// ScriptStruct CustomizableObject.MutableModelParameterProperties
// 0x0028 (0x0028 - 0x0000)
struct FMutableModelParameterProperties final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMutableParameterType                         Type;                                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ImageDescriptionCount;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMutableModelParameterValue>    PossibleValues;                                    // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMutableModelParameterProperties) == 0x000008, "Wrong alignment on FMutableModelParameterProperties");
static_assert(sizeof(FMutableModelParameterProperties) == 0x000028, "Wrong size on FMutableModelParameterProperties");
static_assert(offsetof(FMutableModelParameterProperties, Name) == 0x000000, "Member 'FMutableModelParameterProperties::Name' has a wrong offset!");
static_assert(offsetof(FMutableModelParameterProperties, Type) == 0x000010, "Member 'FMutableModelParameterProperties::Type' has a wrong offset!");
static_assert(offsetof(FMutableModelParameterProperties, ImageDescriptionCount) == 0x000014, "Member 'FMutableModelParameterProperties::ImageDescriptionCount' has a wrong offset!");
static_assert(offsetof(FMutableModelParameterProperties, PossibleValues) == 0x000018, "Member 'FMutableModelParameterProperties::PossibleValues' has a wrong offset!");

// ScriptStruct CustomizableObject.MaskOutTexture
// 0x0018 (0x0018 - 0x0000)
struct FMaskOutTexture final
{
public:
	int32                                         SizeX;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SizeY;                                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<uint32>                                Data;                                              // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMaskOutTexture) == 0x000008, "Wrong alignment on FMaskOutTexture");
static_assert(sizeof(FMaskOutTexture) == 0x000018, "Wrong size on FMaskOutTexture");
static_assert(offsetof(FMaskOutTexture, SizeX) == 0x000000, "Member 'FMaskOutTexture::SizeX' has a wrong offset!");
static_assert(offsetof(FMaskOutTexture, SizeY) == 0x000004, "Member 'FMaskOutTexture::SizeY' has a wrong offset!");
static_assert(offsetof(FMaskOutTexture, Data) == 0x000008, "Member 'FMaskOutTexture::Data' has a wrong offset!");

// ScriptStruct CustomizableObject.MorphTargetInfo
// 0x0008 (0x0008 - 0x0000)
struct FMorphTargetInfo final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LodNum;                                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMorphTargetInfo) == 0x000004, "Wrong alignment on FMorphTargetInfo");
static_assert(sizeof(FMorphTargetInfo) == 0x000008, "Wrong size on FMorphTargetInfo");
static_assert(offsetof(FMorphTargetInfo, Name) == 0x000000, "Member 'FMorphTargetInfo::Name' has a wrong offset!");
static_assert(offsetof(FMorphTargetInfo, LodNum) == 0x000004, "Member 'FMorphTargetInfo::LodNum' has a wrong offset!");

// ScriptStruct CustomizableObject.MorphTargetVertexData
// 0x0020 (0x0020 - 0x0000)
struct FMorphTargetVertexData final
{
public:
	struct FVector3f                              PositionDelta;                                     // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector3f                              TangentZDelta;                                     // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MorphIndex;                                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMorphTargetVertexData) == 0x000004, "Wrong alignment on FMorphTargetVertexData");
static_assert(sizeof(FMorphTargetVertexData) == 0x000020, "Wrong size on FMorphTargetVertexData");
static_assert(offsetof(FMorphTargetVertexData, PositionDelta) == 0x000000, "Member 'FMorphTargetVertexData::PositionDelta' has a wrong offset!");
static_assert(offsetof(FMorphTargetVertexData, TangentZDelta) == 0x00000C, "Member 'FMorphTargetVertexData::TangentZDelta' has a wrong offset!");
static_assert(offsetof(FMorphTargetVertexData, MorphIndex) == 0x000018, "Member 'FMorphTargetVertexData::MorphIndex' has a wrong offset!");

// ScriptStruct CustomizableObject.CustomizableObjectMeshToMeshVertData
// 0x0040 (0x0040 - 0x0000)
struct FCustomizableObjectMeshToMeshVertData final
{
public:
	float                                         PositionBaryCoordsAndDist[0x4];                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalBaryCoordsAndDist[0x4];                      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TangentBaryCoordsAndDist[0x4];                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SourceMeshVertIndices[0x4];                        // 0x0030(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         SourceAssetIndex;                                  // 0x003C(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         SourceAssetLodIndex;                               // 0x003E(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizableObjectMeshToMeshVertData) == 0x000004, "Wrong alignment on FCustomizableObjectMeshToMeshVertData");
static_assert(sizeof(FCustomizableObjectMeshToMeshVertData) == 0x000040, "Wrong size on FCustomizableObjectMeshToMeshVertData");
static_assert(offsetof(FCustomizableObjectMeshToMeshVertData, PositionBaryCoordsAndDist) == 0x000000, "Member 'FCustomizableObjectMeshToMeshVertData::PositionBaryCoordsAndDist' has a wrong offset!");
static_assert(offsetof(FCustomizableObjectMeshToMeshVertData, NormalBaryCoordsAndDist) == 0x000010, "Member 'FCustomizableObjectMeshToMeshVertData::NormalBaryCoordsAndDist' has a wrong offset!");
static_assert(offsetof(FCustomizableObjectMeshToMeshVertData, TangentBaryCoordsAndDist) == 0x000020, "Member 'FCustomizableObjectMeshToMeshVertData::TangentBaryCoordsAndDist' has a wrong offset!");
static_assert(offsetof(FCustomizableObjectMeshToMeshVertData, SourceMeshVertIndices) == 0x000030, "Member 'FCustomizableObjectMeshToMeshVertData::SourceMeshVertIndices' has a wrong offset!");
static_assert(offsetof(FCustomizableObjectMeshToMeshVertData, Weight) == 0x000038, "Member 'FCustomizableObjectMeshToMeshVertData::Weight' has a wrong offset!");
static_assert(offsetof(FCustomizableObjectMeshToMeshVertData, SourceAssetIndex) == 0x00003C, "Member 'FCustomizableObjectMeshToMeshVertData::SourceAssetIndex' has a wrong offset!");
static_assert(offsetof(FCustomizableObjectMeshToMeshVertData, SourceAssetLodIndex) == 0x00003E, "Member 'FCustomizableObjectMeshToMeshVertData::SourceAssetLodIndex' has a wrong offset!");

// ScriptStruct CustomizableObject.MutableStreamableBlock
// 0x0010 (0x0010 - 0x0000)
struct FMutableStreamableBlock final
{
public:
	uint64                                        Offset;                                            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        Size;                                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMutableStreamableBlock) == 0x000008, "Wrong alignment on FMutableStreamableBlock");
static_assert(sizeof(FMutableStreamableBlock) == 0x000010, "Wrong size on FMutableStreamableBlock");
static_assert(offsetof(FMutableStreamableBlock, Offset) == 0x000000, "Member 'FMutableStreamableBlock::Offset' has a wrong offset!");
static_assert(offsetof(FMutableStreamableBlock, Size) == 0x000008, "Member 'FMutableStreamableBlock::Size' has a wrong offset!");

// ScriptStruct CustomizableObject.CustomizableObjectIdPair
// 0x0020 (0x0020 - 0x0000)
struct FCustomizableObjectIdPair final
{
public:
	class FString                                 CustomizableObjectGroupName;                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomizableObjectName;                            // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizableObjectIdPair) == 0x000008, "Wrong alignment on FCustomizableObjectIdPair");
static_assert(sizeof(FCustomizableObjectIdPair) == 0x000020, "Wrong size on FCustomizableObjectIdPair");
static_assert(offsetof(FCustomizableObjectIdPair, CustomizableObjectGroupName) == 0x000000, "Member 'FCustomizableObjectIdPair::CustomizableObjectGroupName' has a wrong offset!");
static_assert(offsetof(FCustomizableObjectIdPair, CustomizableObjectName) == 0x000010, "Member 'FCustomizableObjectIdPair::CustomizableObjectName' has a wrong offset!");

// ScriptStruct CustomizableObject.CustomizableObjectIdentifier
// 0x0030 (0x0030 - 0x0000)
struct FCustomizableObjectIdentifier final
{
public:
	class FString                                 CustomizableObjectGroupName;                       // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 CustomizableObjectName;                            // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 Guid;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizableObjectIdentifier) == 0x000008, "Wrong alignment on FCustomizableObjectIdentifier");
static_assert(sizeof(FCustomizableObjectIdentifier) == 0x000030, "Wrong size on FCustomizableObjectIdentifier");
static_assert(offsetof(FCustomizableObjectIdentifier, CustomizableObjectGroupName) == 0x000000, "Member 'FCustomizableObjectIdentifier::CustomizableObjectGroupName' has a wrong offset!");
static_assert(offsetof(FCustomizableObjectIdentifier, CustomizableObjectName) == 0x000010, "Member 'FCustomizableObjectIdentifier::CustomizableObjectName' has a wrong offset!");
static_assert(offsetof(FCustomizableObjectIdentifier, Guid) == 0x000020, "Member 'FCustomizableObjectIdentifier::Guid' has a wrong offset!");

// ScriptStruct CustomizableObject.CustomizedMaterialTexture2D
// 0x0010 (0x0010 - 0x0000)
struct FCustomizedMaterialTexture2D final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Texture;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizedMaterialTexture2D) == 0x000008, "Wrong alignment on FCustomizedMaterialTexture2D");
static_assert(sizeof(FCustomizedMaterialTexture2D) == 0x000010, "Wrong size on FCustomizedMaterialTexture2D");
static_assert(offsetof(FCustomizedMaterialTexture2D, Name) == 0x000000, "Member 'FCustomizedMaterialTexture2D::Name' has a wrong offset!");
static_assert(offsetof(FCustomizedMaterialTexture2D, Texture) == 0x000008, "Member 'FCustomizedMaterialTexture2D::Texture' has a wrong offset!");

// ScriptStruct CustomizableObject.PendingReleaseSkeletalMeshInfo
// 0x0010 (0x0010 - 0x0000)
struct FPendingReleaseSkeletalMeshInfo final
{
public:
	class USkeletalMesh*                          SkeletalMesh;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Timestamp;                                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPendingReleaseSkeletalMeshInfo) == 0x000008, "Wrong alignment on FPendingReleaseSkeletalMeshInfo");
static_assert(sizeof(FPendingReleaseSkeletalMeshInfo) == 0x000010, "Wrong size on FPendingReleaseSkeletalMeshInfo");
static_assert(offsetof(FPendingReleaseSkeletalMeshInfo, SkeletalMesh) == 0x000000, "Member 'FPendingReleaseSkeletalMeshInfo::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(FPendingReleaseSkeletalMeshInfo, Timestamp) == 0x000008, "Member 'FPendingReleaseSkeletalMeshInfo::Timestamp' has a wrong offset!");

// ScriptStruct CustomizableObject.MutableParamUIMetadata
// 0x00F8 (0x00F8 - 0x0000)
struct FMutableParamUIMetadata final
{
public:
	class FString                                 ObjectFriendlyName;                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UISectionName;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UIOrder;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              UIThumbnail;                                       // 0x0028(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            ExtraInformation;                                  // 0x0050(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, TSoftObjectPtr<class UObject>> ExtraAssets;                                       // 0x00A0(0x0050)(Edit, BlueprintVisible, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                         MinimumValue;                                      // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumValue;                                      // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMutableParamUIMetadata) == 0x000008, "Wrong alignment on FMutableParamUIMetadata");
static_assert(sizeof(FMutableParamUIMetadata) == 0x0000F8, "Wrong size on FMutableParamUIMetadata");
static_assert(offsetof(FMutableParamUIMetadata, ObjectFriendlyName) == 0x000000, "Member 'FMutableParamUIMetadata::ObjectFriendlyName' has a wrong offset!");
static_assert(offsetof(FMutableParamUIMetadata, UISectionName) == 0x000010, "Member 'FMutableParamUIMetadata::UISectionName' has a wrong offset!");
static_assert(offsetof(FMutableParamUIMetadata, UIOrder) == 0x000020, "Member 'FMutableParamUIMetadata::UIOrder' has a wrong offset!");
static_assert(offsetof(FMutableParamUIMetadata, UIThumbnail) == 0x000028, "Member 'FMutableParamUIMetadata::UIThumbnail' has a wrong offset!");
static_assert(offsetof(FMutableParamUIMetadata, ExtraInformation) == 0x000050, "Member 'FMutableParamUIMetadata::ExtraInformation' has a wrong offset!");
static_assert(offsetof(FMutableParamUIMetadata, ExtraAssets) == 0x0000A0, "Member 'FMutableParamUIMetadata::ExtraAssets' has a wrong offset!");
static_assert(offsetof(FMutableParamUIMetadata, MinimumValue) == 0x0000F0, "Member 'FMutableParamUIMetadata::MinimumValue' has a wrong offset!");
static_assert(offsetof(FMutableParamUIMetadata, MaximumValue) == 0x0000F4, "Member 'FMutableParamUIMetadata::MaximumValue' has a wrong offset!");

// ScriptStruct CustomizableObject.IntegerParameterUIData
// 0x0108 (0x0108 - 0x0000)
struct FIntegerParameterUIData final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMutableParamUIMetadata                ParamUIMetadata;                                   // 0x0010(0x00F8)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIntegerParameterUIData) == 0x000008, "Wrong alignment on FIntegerParameterUIData");
static_assert(sizeof(FIntegerParameterUIData) == 0x000108, "Wrong size on FIntegerParameterUIData");
static_assert(offsetof(FIntegerParameterUIData, Name) == 0x000000, "Member 'FIntegerParameterUIData::Name' has a wrong offset!");
static_assert(offsetof(FIntegerParameterUIData, ParamUIMetadata) == 0x000010, "Member 'FIntegerParameterUIData::ParamUIMetadata' has a wrong offset!");

// ScriptStruct CustomizableObject.ParameterUIData
// 0x0178 (0x0178 - 0x0000)
struct FParameterUIData final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMutableParamUIMetadata                ParamUIMetadata;                                   // 0x0010(0x00F8)(BlueprintVisible, NativeAccessSpecifierPublic)
	EMutableParameterType                         Type;                                              // 0x0108(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FIntegerParameterUIData>        ArrayIntegerParameterOption;                       // 0x0110(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	ECustomizableObjectGroupType                  IntegerParameterGroupType;                         // 0x0120(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDontCompressRuntimeTextures;                      // 0x0121(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_122[0x6];                                      // 0x0122(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            ForcedParameterValues;                             // 0x0128(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FParameterUIData) == 0x000008, "Wrong alignment on FParameterUIData");
static_assert(sizeof(FParameterUIData) == 0x000178, "Wrong size on FParameterUIData");
static_assert(offsetof(FParameterUIData, Name) == 0x000000, "Member 'FParameterUIData::Name' has a wrong offset!");
static_assert(offsetof(FParameterUIData, ParamUIMetadata) == 0x000010, "Member 'FParameterUIData::ParamUIMetadata' has a wrong offset!");
static_assert(offsetof(FParameterUIData, Type) == 0x000108, "Member 'FParameterUIData::Type' has a wrong offset!");
static_assert(offsetof(FParameterUIData, ArrayIntegerParameterOption) == 0x000110, "Member 'FParameterUIData::ArrayIntegerParameterOption' has a wrong offset!");
static_assert(offsetof(FParameterUIData, IntegerParameterGroupType) == 0x000120, "Member 'FParameterUIData::IntegerParameterGroupType' has a wrong offset!");
static_assert(offsetof(FParameterUIData, bDontCompressRuntimeTextures) == 0x000121, "Member 'FParameterUIData::bDontCompressRuntimeTextures' has a wrong offset!");
static_assert(offsetof(FParameterUIData, ForcedParameterValues) == 0x000128, "Member 'FParameterUIData::ForcedParameterValues' has a wrong offset!");

}

