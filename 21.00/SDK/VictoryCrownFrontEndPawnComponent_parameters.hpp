#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VictoryCrownFrontEndPawnComponent

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function VictoryCrownFrontEndPawnComponent.VictoryCrownFrontEndPawnComponent_C.ExecuteUbergraph_VictoryCrownFrontEndPawnComponent
// 0x0068 (0x0068 - 0x0000)
struct VictoryCrownFrontEndPawnComponent_C_ExecuteUbergraph_VictoryCrownFrontEndPawnComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_StatName;                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_StatValue;                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName StatName, int32 StatValue)> K2Node_CreateDelegate_OutputDelegate;              // 0x000C(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable;                                // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortTeamMemberPedestal*                K2Node_DynamicCast_AsFort_Team_Member_Pedestal;    // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerPawn_Athena_C*                   K2Node_DynamicCast_AsPlayer_Pawn_Athena;           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAsyncAction_CosmeticAdaptiveStatWatcher* CallFunc_WatchCosmeticStat_ReturnValue;            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VictoryCrownFrontEndPawnComponent_C_ExecuteUbergraph_VictoryCrownFrontEndPawnComponent) == 0x000008, "Wrong alignment on VictoryCrownFrontEndPawnComponent_C_ExecuteUbergraph_VictoryCrownFrontEndPawnComponent");
static_assert(sizeof(VictoryCrownFrontEndPawnComponent_C_ExecuteUbergraph_VictoryCrownFrontEndPawnComponent) == 0x000068, "Wrong size on VictoryCrownFrontEndPawnComponent_C_ExecuteUbergraph_VictoryCrownFrontEndPawnComponent");
static_assert(offsetof(VictoryCrownFrontEndPawnComponent_C_ExecuteUbergraph_VictoryCrownFrontEndPawnComponent, EntryPoint) == 0x000000, "Member 'VictoryCrownFrontEndPawnComponent_C_ExecuteUbergraph_VictoryCrownFrontEndPawnComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(VictoryCrownFrontEndPawnComponent_C_ExecuteUbergraph_VictoryCrownFrontEndPawnComponent, K2Node_CustomEvent_StatName) == 0x000004, "Member 'VictoryCrownFrontEndPawnComponent_C_ExecuteUbergraph_VictoryCrownFrontEndPawnComponent::K2Node_CustomEvent_StatName' has a wrong offset!");
static_assert(offsetof(VictoryCrownFrontEndPawnComponent_C_ExecuteUbergraph_VictoryCrownFrontEndPawnComponent, K2Node_CustomEvent_StatValue) == 0x000008, "Member 'VictoryCrownFrontEndPawnComponent_C_ExecuteUbergraph_VictoryCrownFrontEndPawnComponent::K2Node_CustomEvent_StatValue' has a wrong offset!");
static_assert(offsetof(VictoryCrownFrontEndPawnComponent_C_ExecuteUbergraph_VictoryCrownFrontEndPawnComponent, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'VictoryCrownFrontEndPawnComponent_C_ExecuteUbergraph_VictoryCrownFrontEndPawnComponent::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(VictoryCrownFrontEndPawnComponent_C_ExecuteUbergraph_VictoryCrownFrontEndPawnComponent, Temp_int_Variable) == 0x000018, "Member 'VictoryCrownFrontEndPawnComponent_C_ExecuteUbergraph_VictoryCrownFrontEndPawnComponent::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(VictoryCrownFrontEndPawnComponent_C_ExecuteUbergraph_VictoryCrownFrontEndPawnComponent, Temp_name_Variable) == 0x00001C, "Member 'VictoryCrownFrontEndPawnComponent_C_ExecuteUbergraph_VictoryCrownFrontEndPawnComponent::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(VictoryCrownFrontEndPawnComponent_C_ExecuteUbergraph_VictoryCrownFrontEndPawnComponent, CallFunc_Greater_IntInt_ReturnValue) == 0x000020, "Member 'VictoryCrownFrontEndPawnComponent_C_ExecuteUbergraph_VictoryCrownFrontEndPawnComponent::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(VictoryCrownFrontEndPawnComponent_C_ExecuteUbergraph_VictoryCrownFrontEndPawnComponent, CallFunc_GetOwner_ReturnValue) == 0x000028, "Member 'VictoryCrownFrontEndPawnComponent_C_ExecuteUbergraph_VictoryCrownFrontEndPawnComponent::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(VictoryCrownFrontEndPawnComponent_C_ExecuteUbergraph_VictoryCrownFrontEndPawnComponent, CallFunc_GetOwner_ReturnValue_1) == 0x000030, "Member 'VictoryCrownFrontEndPawnComponent_C_ExecuteUbergraph_VictoryCrownFrontEndPawnComponent::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VictoryCrownFrontEndPawnComponent_C_ExecuteUbergraph_VictoryCrownFrontEndPawnComponent, K2Node_DynamicCast_AsFort_Team_Member_Pedestal) == 0x000038, "Member 'VictoryCrownFrontEndPawnComponent_C_ExecuteUbergraph_VictoryCrownFrontEndPawnComponent::K2Node_DynamicCast_AsFort_Team_Member_Pedestal' has a wrong offset!");
static_assert(offsetof(VictoryCrownFrontEndPawnComponent_C_ExecuteUbergraph_VictoryCrownFrontEndPawnComponent, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'VictoryCrownFrontEndPawnComponent_C_ExecuteUbergraph_VictoryCrownFrontEndPawnComponent::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(VictoryCrownFrontEndPawnComponent_C_ExecuteUbergraph_VictoryCrownFrontEndPawnComponent, K2Node_DynamicCast_AsPlayer_Pawn_Athena) == 0x000048, "Member 'VictoryCrownFrontEndPawnComponent_C_ExecuteUbergraph_VictoryCrownFrontEndPawnComponent::K2Node_DynamicCast_AsPlayer_Pawn_Athena' has a wrong offset!");
static_assert(offsetof(VictoryCrownFrontEndPawnComponent_C_ExecuteUbergraph_VictoryCrownFrontEndPawnComponent, K2Node_DynamicCast_bSuccess_1) == 0x000050, "Member 'VictoryCrownFrontEndPawnComponent_C_ExecuteUbergraph_VictoryCrownFrontEndPawnComponent::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(VictoryCrownFrontEndPawnComponent_C_ExecuteUbergraph_VictoryCrownFrontEndPawnComponent, CallFunc_WatchCosmeticStat_ReturnValue) == 0x000058, "Member 'VictoryCrownFrontEndPawnComponent_C_ExecuteUbergraph_VictoryCrownFrontEndPawnComponent::CallFunc_WatchCosmeticStat_ReturnValue' has a wrong offset!");
static_assert(offsetof(VictoryCrownFrontEndPawnComponent_C_ExecuteUbergraph_VictoryCrownFrontEndPawnComponent, CallFunc_IsValid_ReturnValue) == 0x000060, "Member 'VictoryCrownFrontEndPawnComponent_C_ExecuteUbergraph_VictoryCrownFrontEndPawnComponent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(VictoryCrownFrontEndPawnComponent_C_ExecuteUbergraph_VictoryCrownFrontEndPawnComponent, K2Node_Event_EndPlayReason) == 0x000061, "Member 'VictoryCrownFrontEndPawnComponent_C_ExecuteUbergraph_VictoryCrownFrontEndPawnComponent::K2Node_Event_EndPlayReason' has a wrong offset!");

// Function VictoryCrownFrontEndPawnComponent.VictoryCrownFrontEndPawnComponent_C.OnStatChanged_80A6FD2F402F11C0D0A207ACE25F03A6
// 0x0008 (0x0008 - 0x0000)
struct VictoryCrownFrontEndPawnComponent_C_OnStatChanged_80A6FD2F402F11C0D0A207ACE25F03A6 final
{
public:
	class FName                                   StatName;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StatValue;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VictoryCrownFrontEndPawnComponent_C_OnStatChanged_80A6FD2F402F11C0D0A207ACE25F03A6) == 0x000004, "Wrong alignment on VictoryCrownFrontEndPawnComponent_C_OnStatChanged_80A6FD2F402F11C0D0A207ACE25F03A6");
static_assert(sizeof(VictoryCrownFrontEndPawnComponent_C_OnStatChanged_80A6FD2F402F11C0D0A207ACE25F03A6) == 0x000008, "Wrong size on VictoryCrownFrontEndPawnComponent_C_OnStatChanged_80A6FD2F402F11C0D0A207ACE25F03A6");
static_assert(offsetof(VictoryCrownFrontEndPawnComponent_C_OnStatChanged_80A6FD2F402F11C0D0A207ACE25F03A6, StatName) == 0x000000, "Member 'VictoryCrownFrontEndPawnComponent_C_OnStatChanged_80A6FD2F402F11C0D0A207ACE25F03A6::StatName' has a wrong offset!");
static_assert(offsetof(VictoryCrownFrontEndPawnComponent_C_OnStatChanged_80A6FD2F402F11C0D0A207ACE25F03A6, StatValue) == 0x000004, "Member 'VictoryCrownFrontEndPawnComponent_C_OnStatChanged_80A6FD2F402F11C0D0A207ACE25F03A6::StatValue' has a wrong offset!");

// Function VictoryCrownFrontEndPawnComponent.VictoryCrownFrontEndPawnComponent_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct VictoryCrownFrontEndPawnComponent_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VictoryCrownFrontEndPawnComponent_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on VictoryCrownFrontEndPawnComponent_C_ReceiveEndPlay");
static_assert(sizeof(VictoryCrownFrontEndPawnComponent_C_ReceiveEndPlay) == 0x000001, "Wrong size on VictoryCrownFrontEndPawnComponent_C_ReceiveEndPlay");
static_assert(offsetof(VictoryCrownFrontEndPawnComponent_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'VictoryCrownFrontEndPawnComponent_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function VictoryCrownFrontEndPawnComponent.VictoryCrownFrontEndPawnComponent_C.UpdateForGCNL
// 0x00D8 (0x00D8 - 0x0000)
struct VictoryCrownFrontEndPawnComponent_C_UpdateForGCNL final
{
public:
	bool                                          ShouldApplyFX;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 CallFunc_MakeGameplayCueParameters_ReturnValue;    // 0x0008(0x00D0)(ContainsInstancedReference)
};
static_assert(alignof(VictoryCrownFrontEndPawnComponent_C_UpdateForGCNL) == 0x000008, "Wrong alignment on VictoryCrownFrontEndPawnComponent_C_UpdateForGCNL");
static_assert(sizeof(VictoryCrownFrontEndPawnComponent_C_UpdateForGCNL) == 0x0000D8, "Wrong size on VictoryCrownFrontEndPawnComponent_C_UpdateForGCNL");
static_assert(offsetof(VictoryCrownFrontEndPawnComponent_C_UpdateForGCNL, ShouldApplyFX) == 0x000000, "Member 'VictoryCrownFrontEndPawnComponent_C_UpdateForGCNL::ShouldApplyFX' has a wrong offset!");
static_assert(offsetof(VictoryCrownFrontEndPawnComponent_C_UpdateForGCNL, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'VictoryCrownFrontEndPawnComponent_C_UpdateForGCNL::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(VictoryCrownFrontEndPawnComponent_C_UpdateForGCNL, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'VictoryCrownFrontEndPawnComponent_C_UpdateForGCNL::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(VictoryCrownFrontEndPawnComponent_C_UpdateForGCNL, CallFunc_BooleanAND_ReturnValue_1) == 0x000003, "Member 'VictoryCrownFrontEndPawnComponent_C_UpdateForGCNL::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VictoryCrownFrontEndPawnComponent_C_UpdateForGCNL, CallFunc_Not_PreBool_ReturnValue_1) == 0x000004, "Member 'VictoryCrownFrontEndPawnComponent_C_UpdateForGCNL::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VictoryCrownFrontEndPawnComponent_C_UpdateForGCNL, CallFunc_BooleanAND_ReturnValue_2) == 0x000005, "Member 'VictoryCrownFrontEndPawnComponent_C_UpdateForGCNL::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(VictoryCrownFrontEndPawnComponent_C_UpdateForGCNL, CallFunc_MakeGameplayCueParameters_ReturnValue) == 0x000008, "Member 'VictoryCrownFrontEndPawnComponent_C_UpdateForGCNL::CallFunc_MakeGameplayCueParameters_ReturnValue' has a wrong offset!");

}

