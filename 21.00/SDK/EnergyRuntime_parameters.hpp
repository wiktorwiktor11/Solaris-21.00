#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EnergyRuntime

#include "Basic.hpp"

#include "GameplayTags_0_structs.hpp"


namespace SDK::Params
{

// Function EnergyRuntime.FortComponent_Energy.AddEnergy
// 0x0018 (0x0018 - 0x0000)
struct FortComponent_Energy_AddEnergy final
{
public:
	float                                         OutAmountOfEnergyAdded;                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmountOfEnergyToAdd;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OptionalEnergySource;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBroadcastEnergyPercentChanged;                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortComponent_Energy_AddEnergy) == 0x000008, "Wrong alignment on FortComponent_Energy_AddEnergy");
static_assert(sizeof(FortComponent_Energy_AddEnergy) == 0x000018, "Wrong size on FortComponent_Energy_AddEnergy");
static_assert(offsetof(FortComponent_Energy_AddEnergy, OutAmountOfEnergyAdded) == 0x000000, "Member 'FortComponent_Energy_AddEnergy::OutAmountOfEnergyAdded' has a wrong offset!");
static_assert(offsetof(FortComponent_Energy_AddEnergy, AmountOfEnergyToAdd) == 0x000004, "Member 'FortComponent_Energy_AddEnergy::AmountOfEnergyToAdd' has a wrong offset!");
static_assert(offsetof(FortComponent_Energy_AddEnergy, OptionalEnergySource) == 0x000008, "Member 'FortComponent_Energy_AddEnergy::OptionalEnergySource' has a wrong offset!");
static_assert(offsetof(FortComponent_Energy_AddEnergy, bBroadcastEnergyPercentChanged) == 0x000010, "Member 'FortComponent_Energy_AddEnergy::bBroadcastEnergyPercentChanged' has a wrong offset!");
static_assert(offsetof(FortComponent_Energy_AddEnergy, ReturnValue) == 0x000011, "Member 'FortComponent_Energy_AddEnergy::ReturnValue' has a wrong offset!");

// Function EnergyRuntime.FortComponent_Energy.HandleControllerChanged
// 0x0018 (0x0018 - 0x0000)
struct FortComponent_Energy_HandleControllerChanged final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            OldController;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            NewController;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortComponent_Energy_HandleControllerChanged) == 0x000008, "Wrong alignment on FortComponent_Energy_HandleControllerChanged");
static_assert(sizeof(FortComponent_Energy_HandleControllerChanged) == 0x000018, "Wrong size on FortComponent_Energy_HandleControllerChanged");
static_assert(offsetof(FortComponent_Energy_HandleControllerChanged, Pawn) == 0x000000, "Member 'FortComponent_Energy_HandleControllerChanged::Pawn' has a wrong offset!");
static_assert(offsetof(FortComponent_Energy_HandleControllerChanged, OldController) == 0x000008, "Member 'FortComponent_Energy_HandleControllerChanged::OldController' has a wrong offset!");
static_assert(offsetof(FortComponent_Energy_HandleControllerChanged, NewController) == 0x000010, "Member 'FortComponent_Energy_HandleControllerChanged::NewController' has a wrong offset!");

// Function EnergyRuntime.FortComponent_Energy.SetAllEnergyUsageFree
// 0x0002 (0x0002 - 0x0000)
struct FortComponent_Energy_SetAllEnergyUsageFree final
{
public:
	bool                                          bShouldEnergyUsageBeFree;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortComponent_Energy_SetAllEnergyUsageFree) == 0x000001, "Wrong alignment on FortComponent_Energy_SetAllEnergyUsageFree");
static_assert(sizeof(FortComponent_Energy_SetAllEnergyUsageFree) == 0x000002, "Wrong size on FortComponent_Energy_SetAllEnergyUsageFree");
static_assert(offsetof(FortComponent_Energy_SetAllEnergyUsageFree, bShouldEnergyUsageBeFree) == 0x000000, "Member 'FortComponent_Energy_SetAllEnergyUsageFree::bShouldEnergyUsageBeFree' has a wrong offset!");
static_assert(offsetof(FortComponent_Energy_SetAllEnergyUsageFree, ReturnValue) == 0x000001, "Member 'FortComponent_Energy_SetAllEnergyUsageFree::ReturnValue' has a wrong offset!");

// Function EnergyRuntime.FortComponent_Energy.StartAddingEnergy
// 0x0018 (0x0018 - 0x0000)
struct FortComponent_Energy_StartAddingEnergy final
{
public:
	float                                         EnergyToAddPerSecond;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EnergySourceIdentifier;                            // 0x0004(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OptionalEnergySource;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortComponent_Energy_StartAddingEnergy) == 0x000008, "Wrong alignment on FortComponent_Energy_StartAddingEnergy");
static_assert(sizeof(FortComponent_Energy_StartAddingEnergy) == 0x000018, "Wrong size on FortComponent_Energy_StartAddingEnergy");
static_assert(offsetof(FortComponent_Energy_StartAddingEnergy, EnergyToAddPerSecond) == 0x000000, "Member 'FortComponent_Energy_StartAddingEnergy::EnergyToAddPerSecond' has a wrong offset!");
static_assert(offsetof(FortComponent_Energy_StartAddingEnergy, EnergySourceIdentifier) == 0x000004, "Member 'FortComponent_Energy_StartAddingEnergy::EnergySourceIdentifier' has a wrong offset!");
static_assert(offsetof(FortComponent_Energy_StartAddingEnergy, OptionalEnergySource) == 0x000008, "Member 'FortComponent_Energy_StartAddingEnergy::OptionalEnergySource' has a wrong offset!");
static_assert(offsetof(FortComponent_Energy_StartAddingEnergy, ReturnValue) == 0x000010, "Member 'FortComponent_Energy_StartAddingEnergy::ReturnValue' has a wrong offset!");

// Function EnergyRuntime.FortComponent_Energy.StartUsingEnergy
// 0x0020 (0x0020 - 0x0000)
struct FortComponent_Energy_StartUsingEnergy final
{
public:
	float                                         EnergyToUseToStart;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnergyToUsePerSecond;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EnergyUseIdentifier;                               // 0x0008(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                OptionalEnergyUser;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortComponent_Energy_StartUsingEnergy) == 0x000008, "Wrong alignment on FortComponent_Energy_StartUsingEnergy");
static_assert(sizeof(FortComponent_Energy_StartUsingEnergy) == 0x000020, "Wrong size on FortComponent_Energy_StartUsingEnergy");
static_assert(offsetof(FortComponent_Energy_StartUsingEnergy, EnergyToUseToStart) == 0x000000, "Member 'FortComponent_Energy_StartUsingEnergy::EnergyToUseToStart' has a wrong offset!");
static_assert(offsetof(FortComponent_Energy_StartUsingEnergy, EnergyToUsePerSecond) == 0x000004, "Member 'FortComponent_Energy_StartUsingEnergy::EnergyToUsePerSecond' has a wrong offset!");
static_assert(offsetof(FortComponent_Energy_StartUsingEnergy, EnergyUseIdentifier) == 0x000008, "Member 'FortComponent_Energy_StartUsingEnergy::EnergyUseIdentifier' has a wrong offset!");
static_assert(offsetof(FortComponent_Energy_StartUsingEnergy, OptionalEnergyUser) == 0x000010, "Member 'FortComponent_Energy_StartUsingEnergy::OptionalEnergyUser' has a wrong offset!");
static_assert(offsetof(FortComponent_Energy_StartUsingEnergy, ReturnValue) == 0x000018, "Member 'FortComponent_Energy_StartUsingEnergy::ReturnValue' has a wrong offset!");

// Function EnergyRuntime.FortComponent_Energy.StopAddingEnergy
// 0x0018 (0x0018 - 0x0000)
struct FortComponent_Energy_StopAddingEnergy final
{
public:
	struct FGameplayTag                           EnergyUseIdentifier;                               // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                OptionalEnergySource;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortComponent_Energy_StopAddingEnergy) == 0x000008, "Wrong alignment on FortComponent_Energy_StopAddingEnergy");
static_assert(sizeof(FortComponent_Energy_StopAddingEnergy) == 0x000018, "Wrong size on FortComponent_Energy_StopAddingEnergy");
static_assert(offsetof(FortComponent_Energy_StopAddingEnergy, EnergyUseIdentifier) == 0x000000, "Member 'FortComponent_Energy_StopAddingEnergy::EnergyUseIdentifier' has a wrong offset!");
static_assert(offsetof(FortComponent_Energy_StopAddingEnergy, OptionalEnergySource) == 0x000008, "Member 'FortComponent_Energy_StopAddingEnergy::OptionalEnergySource' has a wrong offset!");
static_assert(offsetof(FortComponent_Energy_StopAddingEnergy, ReturnValue) == 0x000010, "Member 'FortComponent_Energy_StopAddingEnergy::ReturnValue' has a wrong offset!");

// Function EnergyRuntime.FortComponent_Energy.StopUsingEnergy
// 0x0018 (0x0018 - 0x0000)
struct FortComponent_Energy_StopUsingEnergy final
{
public:
	struct FGameplayTag                           EnergyUseIdentifier;                               // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                OptionalEnergyUser;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortComponent_Energy_StopUsingEnergy) == 0x000008, "Wrong alignment on FortComponent_Energy_StopUsingEnergy");
static_assert(sizeof(FortComponent_Energy_StopUsingEnergy) == 0x000018, "Wrong size on FortComponent_Energy_StopUsingEnergy");
static_assert(offsetof(FortComponent_Energy_StopUsingEnergy, EnergyUseIdentifier) == 0x000000, "Member 'FortComponent_Energy_StopUsingEnergy::EnergyUseIdentifier' has a wrong offset!");
static_assert(offsetof(FortComponent_Energy_StopUsingEnergy, OptionalEnergyUser) == 0x000008, "Member 'FortComponent_Energy_StopUsingEnergy::OptionalEnergyUser' has a wrong offset!");
static_assert(offsetof(FortComponent_Energy_StopUsingEnergy, ReturnValue) == 0x000010, "Member 'FortComponent_Energy_StopUsingEnergy::ReturnValue' has a wrong offset!");

// Function EnergyRuntime.FortComponent_Energy.UseEnergy
// 0x0020 (0x0020 - 0x0000)
struct FortComponent_Energy_UseEnergy final
{
public:
	float                                         OutAmountOfEnergyUsed;                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmountOfEnergyToUse;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseEnergyEvenOnFailure;                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                OptionalEnergyUser;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBroadcastEnergyPercentChanged;                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortComponent_Energy_UseEnergy) == 0x000008, "Wrong alignment on FortComponent_Energy_UseEnergy");
static_assert(sizeof(FortComponent_Energy_UseEnergy) == 0x000020, "Wrong size on FortComponent_Energy_UseEnergy");
static_assert(offsetof(FortComponent_Energy_UseEnergy, OutAmountOfEnergyUsed) == 0x000000, "Member 'FortComponent_Energy_UseEnergy::OutAmountOfEnergyUsed' has a wrong offset!");
static_assert(offsetof(FortComponent_Energy_UseEnergy, AmountOfEnergyToUse) == 0x000004, "Member 'FortComponent_Energy_UseEnergy::AmountOfEnergyToUse' has a wrong offset!");
static_assert(offsetof(FortComponent_Energy_UseEnergy, bUseEnergyEvenOnFailure) == 0x000008, "Member 'FortComponent_Energy_UseEnergy::bUseEnergyEvenOnFailure' has a wrong offset!");
static_assert(offsetof(FortComponent_Energy_UseEnergy, OptionalEnergyUser) == 0x000010, "Member 'FortComponent_Energy_UseEnergy::OptionalEnergyUser' has a wrong offset!");
static_assert(offsetof(FortComponent_Energy_UseEnergy, bBroadcastEnergyPercentChanged) == 0x000018, "Member 'FortComponent_Energy_UseEnergy::bBroadcastEnergyPercentChanged' has a wrong offset!");
static_assert(offsetof(FortComponent_Energy_UseEnergy, ReturnValue) == 0x000019, "Member 'FortComponent_Energy_UseEnergy::ReturnValue' has a wrong offset!");

// Function EnergyRuntime.FortComponent_Energy.GetCurrentEnergyPercentage
// 0x0004 (0x0004 - 0x0000)
struct FortComponent_Energy_GetCurrentEnergyPercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortComponent_Energy_GetCurrentEnergyPercentage) == 0x000004, "Wrong alignment on FortComponent_Energy_GetCurrentEnergyPercentage");
static_assert(sizeof(FortComponent_Energy_GetCurrentEnergyPercentage) == 0x000004, "Wrong size on FortComponent_Energy_GetCurrentEnergyPercentage");
static_assert(offsetof(FortComponent_Energy_GetCurrentEnergyPercentage, ReturnValue) == 0x000000, "Member 'FortComponent_Energy_GetCurrentEnergyPercentage::ReturnValue' has a wrong offset!");

// Function EnergyRuntime.FortComponent_Energy.HasSufficientEnergy
// 0x0008 (0x0008 - 0x0000)
struct FortComponent_Energy_HasSufficientEnergy final
{
public:
	float                                         EnergyAmountToTest;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortComponent_Energy_HasSufficientEnergy) == 0x000004, "Wrong alignment on FortComponent_Energy_HasSufficientEnergy");
static_assert(sizeof(FortComponent_Energy_HasSufficientEnergy) == 0x000008, "Wrong size on FortComponent_Energy_HasSufficientEnergy");
static_assert(offsetof(FortComponent_Energy_HasSufficientEnergy, EnergyAmountToTest) == 0x000000, "Member 'FortComponent_Energy_HasSufficientEnergy::EnergyAmountToTest' has a wrong offset!");
static_assert(offsetof(FortComponent_Energy_HasSufficientEnergy, ReturnValue) == 0x000004, "Member 'FortComponent_Energy_HasSufficientEnergy::ReturnValue' has a wrong offset!");

}

