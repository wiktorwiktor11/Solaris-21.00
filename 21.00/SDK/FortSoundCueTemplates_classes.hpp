#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FortSoundCueTemplates

#include "Basic.hpp"

#include "SoundCueTemplates_classes.hpp"
#include "DeveloperSettings_classes.hpp"
#include "FortSoundCueTemplates_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class FortSoundCueTemplates.FortSoundCueTemplateBase
// 0x0000 (0x0538 - 0x0538)
class UFortSoundCueTemplateBase : public USoundCueTemplate
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSoundCueTemplateBase">();
	}
	static class UFortSoundCueTemplateBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSoundCueTemplateBase>();
	}
};
static_assert(alignof(UFortSoundCueTemplateBase) == 0x000008, "Wrong alignment on UFortSoundCueTemplateBase");
static_assert(sizeof(UFortSoundCueTemplateBase) == 0x000538, "Wrong size on UFortSoundCueTemplateBase");

// Class FortSoundCueTemplates.EmoteBase
// 0x0000 (0x0538 - 0x0538)
class UEmoteBase : public UFortSoundCueTemplateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EmoteBase">();
	}
	static class UEmoteBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEmoteBase>();
	}
};
static_assert(alignof(UEmoteBase) == 0x000008, "Wrong alignment on UEmoteBase");
static_assert(sizeof(UEmoteBase) == 0x000538, "Wrong size on UEmoteBase");

// Class FortSoundCueTemplates.EmoteFoley
// 0x0000 (0x0538 - 0x0538)
class UEmoteFoley final : public UEmoteBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EmoteFoley">();
	}
	static class UEmoteFoley* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEmoteFoley>();
	}
};
static_assert(alignof(UEmoteFoley) == 0x000008, "Wrong alignment on UEmoteFoley");
static_assert(sizeof(UEmoteFoley) == 0x000538, "Wrong size on UEmoteFoley");

// Class FortSoundCueTemplates.EmoteMusic
// 0x0000 (0x0538 - 0x0538)
class UEmoteMusic final : public UEmoteBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EmoteMusic">();
	}
	static class UEmoteMusic* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEmoteMusic>();
	}
};
static_assert(alignof(UEmoteMusic) == 0x000008, "Wrong alignment on UEmoteMusic");
static_assert(sizeof(UEmoteMusic) == 0x000538, "Wrong size on UEmoteMusic");

// Class FortSoundCueTemplates.EmoteMusic3P
// 0x0000 (0x0538 - 0x0538)
class UEmoteMusic3P final : public UEmoteBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EmoteMusic3P">();
	}
	static class UEmoteMusic3P* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEmoteMusic3P>();
	}
};
static_assert(alignof(UEmoteMusic3P) == 0x000008, "Wrong alignment on UEmoteMusic3P");
static_assert(sizeof(UEmoteMusic3P) == 0x000538, "Wrong size on UEmoteMusic3P");

// Class FortSoundCueTemplates.PlayerFoleyBase
// 0x0000 (0x0538 - 0x0538)
class UPlayerFoleyBase : public UFortSoundCueTemplateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayerFoleyBase">();
	}
	static class UPlayerFoleyBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerFoleyBase>();
	}
};
static_assert(alignof(UPlayerFoleyBase) == 0x000008, "Wrong alignment on UPlayerFoleyBase");
static_assert(sizeof(UPlayerFoleyBase) == 0x000538, "Wrong size on UPlayerFoleyBase");

// Class FortSoundCueTemplates.PlayerFoley
// 0x0000 (0x0538 - 0x0538)
class UPlayerFoley : public UPlayerFoleyBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayerFoley">();
	}
	static class UPlayerFoley* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerFoley>();
	}
};
static_assert(alignof(UPlayerFoley) == 0x000008, "Wrong alignment on UPlayerFoley");
static_assert(sizeof(UPlayerFoley) == 0x000538, "Wrong size on UPlayerFoley");

// Class FortSoundCueTemplates.FootstepFoley
// 0x0000 (0x0538 - 0x0538)
class UFootstepFoley final : public UPlayerFoley
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FootstepFoley">();
	}
	static class UFootstepFoley* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFootstepFoley>();
	}
};
static_assert(alignof(UFootstepFoley) == 0x000008, "Wrong alignment on UFootstepFoley");
static_assert(sizeof(UFootstepFoley) == 0x000538, "Wrong size on UFootstepFoley");

// Class FortSoundCueTemplates.FortSoundCueTemplateDefaults
// 0x00B8 (0x00E8 - 0x0030)
class UFortSoundCueTemplateDefaults : public UDataAsset
{
public:
	TSoftObjectPtr<class USoundClass>             SoundClass;                                        // 0x0030(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundAttenuation>       Attenuation;                                       // 0x0058(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundConcurrency>       Concurrency;                                       // 0x0080(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x00A8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x00AC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortSubmixPair>                SubmixSends;                                       // 0x00B0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundWave>              LicensedTrackAlternative;                          // 0x00C0(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSoundCueTemplateDefaults">();
	}
	static class UFortSoundCueTemplateDefaults* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSoundCueTemplateDefaults>();
	}
};
static_assert(alignof(UFortSoundCueTemplateDefaults) == 0x000008, "Wrong alignment on UFortSoundCueTemplateDefaults");
static_assert(sizeof(UFortSoundCueTemplateDefaults) == 0x0000E8, "Wrong size on UFortSoundCueTemplateDefaults");
static_assert(offsetof(UFortSoundCueTemplateDefaults, SoundClass) == 0x000030, "Member 'UFortSoundCueTemplateDefaults::SoundClass' has a wrong offset!");
static_assert(offsetof(UFortSoundCueTemplateDefaults, Attenuation) == 0x000058, "Member 'UFortSoundCueTemplateDefaults::Attenuation' has a wrong offset!");
static_assert(offsetof(UFortSoundCueTemplateDefaults, Concurrency) == 0x000080, "Member 'UFortSoundCueTemplateDefaults::Concurrency' has a wrong offset!");
static_assert(offsetof(UFortSoundCueTemplateDefaults, VolumeMultiplier) == 0x0000A8, "Member 'UFortSoundCueTemplateDefaults::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(UFortSoundCueTemplateDefaults, PitchMultiplier) == 0x0000AC, "Member 'UFortSoundCueTemplateDefaults::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(UFortSoundCueTemplateDefaults, SubmixSends) == 0x0000B0, "Member 'UFortSoundCueTemplateDefaults::SubmixSends' has a wrong offset!");
static_assert(offsetof(UFortSoundCueTemplateDefaults, LicensedTrackAlternative) == 0x0000C0, "Member 'UFortSoundCueTemplateDefaults::LicensedTrackAlternative' has a wrong offset!");

// Class FortSoundCueTemplates.FortSoundCueTemplateDefaultSettings
// 0x0050 (0x0080 - 0x0030)
class UFortSoundCueTemplateDefaultSettings final : public UDataAsset
{
public:
	TMap<TSubclassOf<class UFortSoundCueTemplateBase>, TSoftObjectPtr<class UFortSoundCueTemplateDefaults>> TemplateDefaults;                                  // 0x0030(0x0050)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	class UFortSoundCueTemplateDefaults* LoadSettingsForTemplateType(TSubclassOf<class UFortSoundCueTemplateBase> TemplateType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSoundCueTemplateDefaultSettings">();
	}
	static class UFortSoundCueTemplateDefaultSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSoundCueTemplateDefaultSettings>();
	}
};
static_assert(alignof(UFortSoundCueTemplateDefaultSettings) == 0x000008, "Wrong alignment on UFortSoundCueTemplateDefaultSettings");
static_assert(sizeof(UFortSoundCueTemplateDefaultSettings) == 0x000080, "Wrong size on UFortSoundCueTemplateDefaultSettings");
static_assert(offsetof(UFortSoundCueTemplateDefaultSettings, TemplateDefaults) == 0x000030, "Member 'UFortSoundCueTemplateDefaultSettings::TemplateDefaults' has a wrong offset!");

// Class FortSoundCueTemplates.FortSoundCueTemplateSettings
// 0x0028 (0x0058 - 0x0030)
class UFortSoundCueTemplateSettings final : public UDeveloperSettings
{
public:
	TSoftObjectPtr<class UFortSoundCueTemplateDefaultSettings> DefaultTemplateSettings;                           // 0x0030(0x0028)(Edit, Config, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	class UFortSoundCueTemplateDefaults* GetDefaultSettingsForTemplateType(TSubclassOf<class UFortSoundCueTemplateBase> TemplateType) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSoundCueTemplateSettings">();
	}
	static class UFortSoundCueTemplateSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSoundCueTemplateSettings>();
	}
};
static_assert(alignof(UFortSoundCueTemplateSettings) == 0x000008, "Wrong alignment on UFortSoundCueTemplateSettings");
static_assert(sizeof(UFortSoundCueTemplateSettings) == 0x000058, "Wrong size on UFortSoundCueTemplateSettings");
static_assert(offsetof(UFortSoundCueTemplateSettings, DefaultTemplateSettings) == 0x000030, "Member 'UFortSoundCueTemplateSettings::DefaultTemplateSettings' has a wrong offset!");

// Class FortSoundCueTemplates.FortSoundCueTemplateSimple
// 0x0000 (0x0538 - 0x0538)
class UFortSoundCueTemplateSimple : public UFortSoundCueTemplateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSoundCueTemplateSimple">();
	}
	static class UFortSoundCueTemplateSimple* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSoundCueTemplateSimple>();
	}
};
static_assert(alignof(UFortSoundCueTemplateSimple) == 0x000008, "Wrong alignment on UFortSoundCueTemplateSimple");
static_assert(sizeof(UFortSoundCueTemplateSimple) == 0x000538, "Wrong size on UFortSoundCueTemplateSimple");

// Class FortSoundCueTemplates.GliderOpen
// 0x0000 (0x0538 - 0x0538)
class UGliderOpen final : public UFortSoundCueTemplateSimple
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GliderOpen">();
	}
	static class UGliderOpen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGliderOpen>();
	}
};
static_assert(alignof(UGliderOpen) == 0x000008, "Wrong alignment on UGliderOpen");
static_assert(sizeof(UGliderOpen) == 0x000538, "Wrong size on UGliderOpen");

// Class FortSoundCueTemplates.GliderClose
// 0x0000 (0x0538 - 0x0538)
class UGliderClose final : public UFortSoundCueTemplateSimple
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GliderClose">();
	}
	static class UGliderClose* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGliderClose>();
	}
};
static_assert(alignof(UGliderClose) == 0x000008, "Wrong alignment on UGliderClose");
static_assert(sizeof(UGliderClose) == 0x000538, "Wrong size on UGliderClose");

// Class FortSoundCueTemplates.GliderThrustLoop
// 0x0000 (0x0538 - 0x0538)
class UGliderThrustLoop final : public UFortSoundCueTemplateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GliderThrustLoop">();
	}
	static class UGliderThrustLoop* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGliderThrustLoop>();
	}
};
static_assert(alignof(UGliderThrustLoop) == 0x000008, "Wrong alignment on UGliderThrustLoop");
static_assert(sizeof(UGliderThrustLoop) == 0x000538, "Wrong size on UGliderThrustLoop");

// Class FortSoundCueTemplates.GliderThrustStart
// 0x0000 (0x0538 - 0x0538)
class UGliderThrustStart final : public UFortSoundCueTemplateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GliderThrustStart">();
	}
	static class UGliderThrustStart* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGliderThrustStart>();
	}
};
static_assert(alignof(UGliderThrustStart) == 0x000008, "Wrong alignment on UGliderThrustStart");
static_assert(sizeof(UGliderThrustStart) == 0x000538, "Wrong size on UGliderThrustStart");

// Class FortSoundCueTemplates.MusicPack
// 0x0000 (0x0538 - 0x0538)
class UMusicPack final : public UFortSoundCueTemplateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MusicPack">();
	}
	static class UMusicPack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMusicPack>();
	}
};
static_assert(alignof(UMusicPack) == 0x000008, "Wrong alignment on UMusicPack");
static_assert(sizeof(UMusicPack) == 0x000538, "Wrong size on UMusicPack");

// Class FortSoundCueTemplates.PhysicsStateLoop
// 0x0000 (0x0538 - 0x0538)
class UPhysicsStateLoop final : public UFortSoundCueTemplateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PhysicsStateLoop">();
	}
	static class UPhysicsStateLoop* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhysicsStateLoop>();
	}
};
static_assert(alignof(UPhysicsStateLoop) == 0x000008, "Wrong alignment on UPhysicsStateLoop");
static_assert(sizeof(UPhysicsStateLoop) == 0x000538, "Wrong size on UPhysicsStateLoop");

// Class FortSoundCueTemplates.PhysicsImpact
// 0x0000 (0x0538 - 0x0538)
class UPhysicsImpact final : public UFortSoundCueTemplateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PhysicsImpact">();
	}
	static class UPhysicsImpact* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhysicsImpact>();
	}
};
static_assert(alignof(UPhysicsImpact) == 0x000008, "Wrong alignment on UPhysicsImpact");
static_assert(sizeof(UPhysicsImpact) == 0x000538, "Wrong size on UPhysicsImpact");

// Class FortSoundCueTemplates.PickaxeSCTDefaults
// 0x0010 (0x00F8 - 0x00E8)
class UPickaxeSCTDefaults final : public UFortSoundCueTemplateDefaults
{
public:
	TArray<TSoftObjectPtr<class USoundWave>>      DistantVariations;                                 // 0x00E8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PickaxeSCTDefaults">();
	}
	static class UPickaxeSCTDefaults* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPickaxeSCTDefaults>();
	}
};
static_assert(alignof(UPickaxeSCTDefaults) == 0x000008, "Wrong alignment on UPickaxeSCTDefaults");
static_assert(sizeof(UPickaxeSCTDefaults) == 0x0000F8, "Wrong size on UPickaxeSCTDefaults");
static_assert(offsetof(UPickaxeSCTDefaults, DistantVariations) == 0x0000E8, "Member 'UPickaxeSCTDefaults::DistantVariations' has a wrong offset!");

// Class FortSoundCueTemplates.PickaxeBase
// 0x0000 (0x0538 - 0x0538)
class UPickaxeBase : public UFortSoundCueTemplateBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PickaxeBase">();
	}
	static class UPickaxeBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPickaxeBase>();
	}
};
static_assert(alignof(UPickaxeBase) == 0x000008, "Wrong alignment on UPickaxeBase");
static_assert(sizeof(UPickaxeBase) == 0x000538, "Wrong size on UPickaxeBase");

// Class FortSoundCueTemplates.PickaxeImpactEnemy
// 0x0000 (0x0538 - 0x0538)
class UPickaxeImpactEnemy final : public UFortSoundCueTemplateSimple
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PickaxeImpactEnemy">();
	}
	static class UPickaxeImpactEnemy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPickaxeImpactEnemy>();
	}
};
static_assert(alignof(UPickaxeImpactEnemy) == 0x000008, "Wrong alignment on UPickaxeImpactEnemy");
static_assert(sizeof(UPickaxeImpactEnemy) == 0x000538, "Wrong size on UPickaxeImpactEnemy");

// Class FortSoundCueTemplates.PickaxeReady
// 0x0000 (0x0538 - 0x0538)
class UPickaxeReady final : public UPickaxeBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PickaxeReady">();
	}
	static class UPickaxeReady* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPickaxeReady>();
	}
};
static_assert(alignof(UPickaxeReady) == 0x000008, "Wrong alignment on UPickaxeReady");
static_assert(sizeof(UPickaxeReady) == 0x000538, "Wrong size on UPickaxeReady");

// Class FortSoundCueTemplates.PickaxeSwing
// 0x0000 (0x0538 - 0x0538)
class UPickaxeSwing final : public UPickaxeBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PickaxeSwing">();
	}
	static class UPickaxeSwing* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPickaxeSwing>();
	}
};
static_assert(alignof(UPickaxeSwing) == 0x000008, "Wrong alignment on UPickaxeSwing");
static_assert(sizeof(UPickaxeSwing) == 0x000538, "Wrong size on UPickaxeSwing");

// Class FortSoundCueTemplates.PlayerFoleyDefaults
// 0x0128 (0x0210 - 0x00E8)
class UPlayerFoleyDefaults final : public UFortSoundCueTemplateDefaults
{
public:
	TSoftObjectPtr<class USoundClass>             LocalPlayerSoundClass;                             // 0x00E8(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundClass>             TeammateSoundClass;                                // 0x0110(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundClass>             HostileSoundClass;                                 // 0x0138(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundAttenuation>       LocalPlayerAttenuation;                            // 0x0160(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundAttenuation>       AboveAttenuation;                                  // 0x0188(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundAttenuation>       BelowAttenuation;                                  // 0x01B0(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundAttenuation>       ParallelAttenuation;                               // 0x01D8(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDistanceDatum>                 ElevationCrossfadeDistances;                       // 0x0200(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayerFoleyDefaults">();
	}
	static class UPlayerFoleyDefaults* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerFoleyDefaults>();
	}
};
static_assert(alignof(UPlayerFoleyDefaults) == 0x000008, "Wrong alignment on UPlayerFoleyDefaults");
static_assert(sizeof(UPlayerFoleyDefaults) == 0x000210, "Wrong size on UPlayerFoleyDefaults");
static_assert(offsetof(UPlayerFoleyDefaults, LocalPlayerSoundClass) == 0x0000E8, "Member 'UPlayerFoleyDefaults::LocalPlayerSoundClass' has a wrong offset!");
static_assert(offsetof(UPlayerFoleyDefaults, TeammateSoundClass) == 0x000110, "Member 'UPlayerFoleyDefaults::TeammateSoundClass' has a wrong offset!");
static_assert(offsetof(UPlayerFoleyDefaults, HostileSoundClass) == 0x000138, "Member 'UPlayerFoleyDefaults::HostileSoundClass' has a wrong offset!");
static_assert(offsetof(UPlayerFoleyDefaults, LocalPlayerAttenuation) == 0x000160, "Member 'UPlayerFoleyDefaults::LocalPlayerAttenuation' has a wrong offset!");
static_assert(offsetof(UPlayerFoleyDefaults, AboveAttenuation) == 0x000188, "Member 'UPlayerFoleyDefaults::AboveAttenuation' has a wrong offset!");
static_assert(offsetof(UPlayerFoleyDefaults, BelowAttenuation) == 0x0001B0, "Member 'UPlayerFoleyDefaults::BelowAttenuation' has a wrong offset!");
static_assert(offsetof(UPlayerFoleyDefaults, ParallelAttenuation) == 0x0001D8, "Member 'UPlayerFoleyDefaults::ParallelAttenuation' has a wrong offset!");
static_assert(offsetof(UPlayerFoleyDefaults, ElevationCrossfadeDistances) == 0x000200, "Member 'UPlayerFoleyDefaults::ElevationCrossfadeDistances' has a wrong offset!");

// Class FortSoundCueTemplates.WeaponLowAmmo
// 0x0000 (0x0538 - 0x0538)
class UWeaponLowAmmo final : public UFortSoundCueTemplateSimple
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WeaponLowAmmo">();
	}
	static class UWeaponLowAmmo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWeaponLowAmmo>();
	}
};
static_assert(alignof(UWeaponLowAmmo) == 0x000008, "Wrong alignment on UWeaponLowAmmo");
static_assert(sizeof(UWeaponLowAmmo) == 0x000538, "Wrong size on UWeaponLowAmmo");

// Class FortSoundCueTemplates.WeaponOutOfAmmo
// 0x0000 (0x0538 - 0x0538)
class UWeaponOutOfAmmo final : public UFortSoundCueTemplateSimple
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WeaponOutOfAmmo">();
	}
	static class UWeaponOutOfAmmo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWeaponOutOfAmmo>();
	}
};
static_assert(alignof(UWeaponOutOfAmmo) == 0x000008, "Wrong alignment on UWeaponOutOfAmmo");
static_assert(sizeof(UWeaponOutOfAmmo) == 0x000538, "Wrong size on UWeaponOutOfAmmo");

// Class FortSoundCueTemplates.WeaponReloadStart
// 0x0000 (0x0538 - 0x0538)
class UWeaponReloadStart final : public UFortSoundCueTemplateSimple
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WeaponReloadStart">();
	}
	static class UWeaponReloadStart* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWeaponReloadStart>();
	}
};
static_assert(alignof(UWeaponReloadStart) == 0x000008, "Wrong alignment on UWeaponReloadStart");
static_assert(sizeof(UWeaponReloadStart) == 0x000538, "Wrong size on UWeaponReloadStart");

// Class FortSoundCueTemplates.WeaponReloadInsert
// 0x0000 (0x0538 - 0x0538)
class UWeaponReloadInsert final : public UFortSoundCueTemplateSimple
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WeaponReloadInsert">();
	}
	static class UWeaponReloadInsert* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWeaponReloadInsert>();
	}
};
static_assert(alignof(UWeaponReloadInsert) == 0x000008, "Wrong alignment on UWeaponReloadInsert");
static_assert(sizeof(UWeaponReloadInsert) == 0x000538, "Wrong size on UWeaponReloadInsert");

// Class FortSoundCueTemplates.WeaponReloadEnd
// 0x0000 (0x0538 - 0x0538)
class UWeaponReloadEnd final : public UFortSoundCueTemplateSimple
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WeaponReloadEnd">();
	}
	static class UWeaponReloadEnd* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWeaponReloadEnd>();
	}
};
static_assert(alignof(UWeaponReloadEnd) == 0x000008, "Wrong alignment on UWeaponReloadEnd");
static_assert(sizeof(UWeaponReloadEnd) == 0x000538, "Wrong size on UWeaponReloadEnd");

// Class FortSoundCueTemplates.WeaponTargetingStart
// 0x0000 (0x0538 - 0x0538)
class UWeaponTargetingStart final : public UFortSoundCueTemplateSimple
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WeaponTargetingStart">();
	}
	static class UWeaponTargetingStart* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWeaponTargetingStart>();
	}
};
static_assert(alignof(UWeaponTargetingStart) == 0x000008, "Wrong alignment on UWeaponTargetingStart");
static_assert(sizeof(UWeaponTargetingStart) == 0x000538, "Wrong size on UWeaponTargetingStart");

// Class FortSoundCueTemplates.WeaponTargetingEnd
// 0x0000 (0x0538 - 0x0538)
class UWeaponTargetingEnd final : public UFortSoundCueTemplateSimple
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WeaponTargetingEnd">();
	}
	static class UWeaponTargetingEnd* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWeaponTargetingEnd>();
	}
};
static_assert(alignof(UWeaponTargetingEnd) == 0x000008, "Wrong alignment on UWeaponTargetingEnd");
static_assert(sizeof(UWeaponTargetingEnd) == 0x000538, "Wrong size on UWeaponTargetingEnd");

}

