#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DaisyPetals_HISM

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function DaisyPetals_HISM.DaisyPetals_HISM_C.ValidateScale
// 0x0178 (0x0178 - 0x0000)
struct DaisyPetals_HISM_C_ValidateScale final
{
public:
	int32                                         InstanceIndex;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Seed;                                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                l_scale;                                           // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          l_seed;                                            // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor)
	struct FRotator                               l_inRot;                                           // 0x0040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               l_finalRotOffset;                                  // 0x0058(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_convertIndexToSeedOffset_ReturnValue;     // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          CallFunc_MakeRandomStream_ReturnValue;             // 0x0078(0x0008)(ZeroConstructor, NoDestructor)
	struct FVector                                CallFunc_Conv_FloatToVector_ReturnValue;           // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_FloatToVector_ReturnValue_1;         // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_VectorVector_ReturnValue;        // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_FloatToVector_ReturnValue_2;         // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_FloatToVector_ReturnValue_3;         // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0118(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_ReturnValue; // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_ReturnValue_1; // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_ReturnValue_2; // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0158(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DaisyPetals_HISM_C_ValidateScale) == 0x000008, "Wrong alignment on DaisyPetals_HISM_C_ValidateScale");
static_assert(sizeof(DaisyPetals_HISM_C_ValidateScale) == 0x000178, "Wrong size on DaisyPetals_HISM_C_ValidateScale");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateScale, InstanceIndex) == 0x000000, "Member 'DaisyPetals_HISM_C_ValidateScale::InstanceIndex' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateScale, Seed) == 0x000004, "Member 'DaisyPetals_HISM_C_ValidateScale::Seed' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateScale, ReturnValue) == 0x000008, "Member 'DaisyPetals_HISM_C_ValidateScale::ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateScale, l_scale) == 0x000020, "Member 'DaisyPetals_HISM_C_ValidateScale::l_scale' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateScale, l_seed) == 0x000038, "Member 'DaisyPetals_HISM_C_ValidateScale::l_seed' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateScale, l_inRot) == 0x000040, "Member 'DaisyPetals_HISM_C_ValidateScale::l_inRot' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateScale, l_finalRotOffset) == 0x000058, "Member 'DaisyPetals_HISM_C_ValidateScale::l_finalRotOffset' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateScale, CallFunc_convertIndexToSeedOffset_ReturnValue) == 0x000070, "Member 'DaisyPetals_HISM_C_ValidateScale::CallFunc_convertIndexToSeedOffset_ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateScale, CallFunc_Add_IntInt_ReturnValue) == 0x000074, "Member 'DaisyPetals_HISM_C_ValidateScale::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateScale, CallFunc_MakeRandomStream_ReturnValue) == 0x000078, "Member 'DaisyPetals_HISM_C_ValidateScale::CallFunc_MakeRandomStream_ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateScale, CallFunc_Conv_FloatToVector_ReturnValue) == 0x000080, "Member 'DaisyPetals_HISM_C_ValidateScale::CallFunc_Conv_FloatToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateScale, CallFunc_Conv_FloatToVector_ReturnValue_1) == 0x000098, "Member 'DaisyPetals_HISM_C_ValidateScale::CallFunc_Conv_FloatToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateScale, CallFunc_NotEqual_VectorVector_ReturnValue) == 0x0000B0, "Member 'DaisyPetals_HISM_C_ValidateScale::CallFunc_NotEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateScale, CallFunc_Conv_FloatToVector_ReturnValue_2) == 0x0000B8, "Member 'DaisyPetals_HISM_C_ValidateScale::CallFunc_Conv_FloatToVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateScale, CallFunc_Multiply_VectorVector_ReturnValue) == 0x0000D0, "Member 'DaisyPetals_HISM_C_ValidateScale::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateScale, CallFunc_Conv_FloatToVector_ReturnValue_3) == 0x0000E8, "Member 'DaisyPetals_HISM_C_ValidateScale::CallFunc_Conv_FloatToVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateScale, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000100, "Member 'DaisyPetals_HISM_C_ValidateScale::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateScale, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000118, "Member 'DaisyPetals_HISM_C_ValidateScale::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateScale, CallFunc_BreakVector_X) == 0x000130, "Member 'DaisyPetals_HISM_C_ValidateScale::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateScale, CallFunc_BreakVector_Y) == 0x000134, "Member 'DaisyPetals_HISM_C_ValidateScale::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateScale, CallFunc_BreakVector_Z) == 0x000138, "Member 'DaisyPetals_HISM_C_ValidateScale::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateScale, CallFunc_BreakVector_X_1) == 0x00013C, "Member 'DaisyPetals_HISM_C_ValidateScale::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateScale, CallFunc_BreakVector_Y_1) == 0x000140, "Member 'DaisyPetals_HISM_C_ValidateScale::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateScale, CallFunc_BreakVector_Z_1) == 0x000144, "Member 'DaisyPetals_HISM_C_ValidateScale::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateScale, CallFunc_RandomFloatInRangeFromStream_ReturnValue) == 0x000148, "Member 'DaisyPetals_HISM_C_ValidateScale::CallFunc_RandomFloatInRangeFromStream_ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateScale, CallFunc_RandomFloatInRangeFromStream_ReturnValue_1) == 0x00014C, "Member 'DaisyPetals_HISM_C_ValidateScale::CallFunc_RandomFloatInRangeFromStream_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateScale, CallFunc_RandomFloatInRangeFromStream_ReturnValue_2) == 0x000150, "Member 'DaisyPetals_HISM_C_ValidateScale::CallFunc_RandomFloatInRangeFromStream_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateScale, CallFunc_MakeVector_ReturnValue) == 0x000158, "Member 'DaisyPetals_HISM_C_ValidateScale::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateScale, CallFunc_BooleanAND_ReturnValue) == 0x000170, "Member 'DaisyPetals_HISM_C_ValidateScale::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function DaisyPetals_HISM.DaisyPetals_HISM_C.ValidateRotation
// 0x00F8 (0x00F8 - 0x0000)
struct DaisyPetals_HISM_C_ValidateRotation final
{
public:
	struct FRotator                               InRot;                                             // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         InstanceIndex;                                     // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Seed;                                              // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	struct FRandomStream                          l_seed;                                            // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor)
	struct FRotator                               l_inRot;                                           // 0x0040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               l_finalRotOffset;                                  // 0x0058(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_convertIndexToSeedOffset_ReturnValue;     // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          CallFunc_MakeRandomStream_ReturnValue;             // 0x0078(0x0008)(ZeroConstructor, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_ReturnValue; // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_2;                      // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_2;                     // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_2;                       // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_ReturnValue_1; // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_ReturnValue_2; // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_3;                      // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_3;                     // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_3;                       // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DaisyPetals_HISM_C_ValidateRotation) == 0x000008, "Wrong alignment on DaisyPetals_HISM_C_ValidateRotation");
static_assert(sizeof(DaisyPetals_HISM_C_ValidateRotation) == 0x0000F8, "Wrong size on DaisyPetals_HISM_C_ValidateRotation");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateRotation, InRot) == 0x000000, "Member 'DaisyPetals_HISM_C_ValidateRotation::InRot' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateRotation, InstanceIndex) == 0x000018, "Member 'DaisyPetals_HISM_C_ValidateRotation::InstanceIndex' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateRotation, Seed) == 0x00001C, "Member 'DaisyPetals_HISM_C_ValidateRotation::Seed' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateRotation, ReturnValue) == 0x000020, "Member 'DaisyPetals_HISM_C_ValidateRotation::ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateRotation, l_seed) == 0x000038, "Member 'DaisyPetals_HISM_C_ValidateRotation::l_seed' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateRotation, l_inRot) == 0x000040, "Member 'DaisyPetals_HISM_C_ValidateRotation::l_inRot' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateRotation, l_finalRotOffset) == 0x000058, "Member 'DaisyPetals_HISM_C_ValidateRotation::l_finalRotOffset' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateRotation, CallFunc_convertIndexToSeedOffset_ReturnValue) == 0x000070, "Member 'DaisyPetals_HISM_C_ValidateRotation::CallFunc_convertIndexToSeedOffset_ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateRotation, CallFunc_Add_IntInt_ReturnValue) == 0x000074, "Member 'DaisyPetals_HISM_C_ValidateRotation::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateRotation, CallFunc_MakeRandomStream_ReturnValue) == 0x000078, "Member 'DaisyPetals_HISM_C_ValidateRotation::CallFunc_MakeRandomStream_ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateRotation, CallFunc_BreakRotator_Roll) == 0x000080, "Member 'DaisyPetals_HISM_C_ValidateRotation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateRotation, CallFunc_BreakRotator_Pitch) == 0x000084, "Member 'DaisyPetals_HISM_C_ValidateRotation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateRotation, CallFunc_BreakRotator_Yaw) == 0x000088, "Member 'DaisyPetals_HISM_C_ValidateRotation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateRotation, CallFunc_BreakRotator_Roll_1) == 0x00008C, "Member 'DaisyPetals_HISM_C_ValidateRotation::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateRotation, CallFunc_BreakRotator_Pitch_1) == 0x000090, "Member 'DaisyPetals_HISM_C_ValidateRotation::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateRotation, CallFunc_BreakRotator_Yaw_1) == 0x000094, "Member 'DaisyPetals_HISM_C_ValidateRotation::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateRotation, CallFunc_RandomFloatInRangeFromStream_ReturnValue) == 0x000098, "Member 'DaisyPetals_HISM_C_ValidateRotation::CallFunc_RandomFloatInRangeFromStream_ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateRotation, CallFunc_BreakRotator_Roll_2) == 0x00009C, "Member 'DaisyPetals_HISM_C_ValidateRotation::CallFunc_BreakRotator_Roll_2' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateRotation, CallFunc_BreakRotator_Pitch_2) == 0x0000A0, "Member 'DaisyPetals_HISM_C_ValidateRotation::CallFunc_BreakRotator_Pitch_2' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateRotation, CallFunc_BreakRotator_Yaw_2) == 0x0000A4, "Member 'DaisyPetals_HISM_C_ValidateRotation::CallFunc_BreakRotator_Yaw_2' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateRotation, CallFunc_RandomFloatInRangeFromStream_ReturnValue_1) == 0x0000A8, "Member 'DaisyPetals_HISM_C_ValidateRotation::CallFunc_RandomFloatInRangeFromStream_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateRotation, CallFunc_RandomFloatInRangeFromStream_ReturnValue_2) == 0x0000AC, "Member 'DaisyPetals_HISM_C_ValidateRotation::CallFunc_RandomFloatInRangeFromStream_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateRotation, CallFunc_MakeRotator_ReturnValue) == 0x0000B0, "Member 'DaisyPetals_HISM_C_ValidateRotation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateRotation, CallFunc_BreakRotator_Roll_3) == 0x0000C8, "Member 'DaisyPetals_HISM_C_ValidateRotation::CallFunc_BreakRotator_Roll_3' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateRotation, CallFunc_BreakRotator_Pitch_3) == 0x0000CC, "Member 'DaisyPetals_HISM_C_ValidateRotation::CallFunc_BreakRotator_Pitch_3' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateRotation, CallFunc_BreakRotator_Yaw_3) == 0x0000D0, "Member 'DaisyPetals_HISM_C_ValidateRotation::CallFunc_BreakRotator_Yaw_3' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateRotation, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000D4, "Member 'DaisyPetals_HISM_C_ValidateRotation::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateRotation, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000D8, "Member 'DaisyPetals_HISM_C_ValidateRotation::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateRotation, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0000DC, "Member 'DaisyPetals_HISM_C_ValidateRotation::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateRotation, CallFunc_MakeRotator_ReturnValue_1) == 0x0000E0, "Member 'DaisyPetals_HISM_C_ValidateRotation::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");

// Function DaisyPetals_HISM.DaisyPetals_HISM_C.ValidateOffsetFromCenter
// 0x0028 (0x0028 - 0x0000)
struct DaisyPetals_HISM_C_ValidateOffsetFromCenter final
{
public:
	int32                                         InstanceIndex;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Seed;                                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Offset;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          l_seed;                                            // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor)
	int32                                         CallFunc_convertIndexToSeedOffset_ReturnValue;     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          CallFunc_MakeRandomStream_ReturnValue;             // 0x001C(0x0008)(ZeroConstructor, NoDestructor)
	float                                         CallFunc_RandomFloatInRangeFromStream_ReturnValue; // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DaisyPetals_HISM_C_ValidateOffsetFromCenter) == 0x000004, "Wrong alignment on DaisyPetals_HISM_C_ValidateOffsetFromCenter");
static_assert(sizeof(DaisyPetals_HISM_C_ValidateOffsetFromCenter) == 0x000028, "Wrong size on DaisyPetals_HISM_C_ValidateOffsetFromCenter");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateOffsetFromCenter, InstanceIndex) == 0x000000, "Member 'DaisyPetals_HISM_C_ValidateOffsetFromCenter::InstanceIndex' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateOffsetFromCenter, Seed) == 0x000004, "Member 'DaisyPetals_HISM_C_ValidateOffsetFromCenter::Seed' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateOffsetFromCenter, Offset) == 0x000008, "Member 'DaisyPetals_HISM_C_ValidateOffsetFromCenter::Offset' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateOffsetFromCenter, l_seed) == 0x00000C, "Member 'DaisyPetals_HISM_C_ValidateOffsetFromCenter::l_seed' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateOffsetFromCenter, CallFunc_convertIndexToSeedOffset_ReturnValue) == 0x000014, "Member 'DaisyPetals_HISM_C_ValidateOffsetFromCenter::CallFunc_convertIndexToSeedOffset_ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateOffsetFromCenter, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'DaisyPetals_HISM_C_ValidateOffsetFromCenter::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateOffsetFromCenter, CallFunc_MakeRandomStream_ReturnValue) == 0x00001C, "Member 'DaisyPetals_HISM_C_ValidateOffsetFromCenter::CallFunc_MakeRandomStream_ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_ValidateOffsetFromCenter, CallFunc_RandomFloatInRangeFromStream_ReturnValue) == 0x000024, "Member 'DaisyPetals_HISM_C_ValidateOffsetFromCenter::CallFunc_RandomFloatInRangeFromStream_ReturnValue' has a wrong offset!");

// Function DaisyPetals_HISM.DaisyPetals_HISM_C.convertIndexToSeedOffset
// 0x001C (0x001C - 0x0000)
struct DaisyPetals_HISM_C_convertIndexToSeedOffset final
{
public:
	int32                                         inInt;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sqrt_ReturnValue;                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Fraction_ReturnValue;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DaisyPetals_HISM_C_convertIndexToSeedOffset) == 0x000004, "Wrong alignment on DaisyPetals_HISM_C_convertIndexToSeedOffset");
static_assert(sizeof(DaisyPetals_HISM_C_convertIndexToSeedOffset) == 0x00001C, "Wrong size on DaisyPetals_HISM_C_convertIndexToSeedOffset");
static_assert(offsetof(DaisyPetals_HISM_C_convertIndexToSeedOffset, inInt) == 0x000000, "Member 'DaisyPetals_HISM_C_convertIndexToSeedOffset::inInt' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_convertIndexToSeedOffset, ReturnValue) == 0x000004, "Member 'DaisyPetals_HISM_C_convertIndexToSeedOffset::ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_convertIndexToSeedOffset, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000008, "Member 'DaisyPetals_HISM_C_convertIndexToSeedOffset::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_convertIndexToSeedOffset, CallFunc_Sqrt_ReturnValue) == 0x00000C, "Member 'DaisyPetals_HISM_C_convertIndexToSeedOffset::CallFunc_Sqrt_ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_convertIndexToSeedOffset, CallFunc_Fraction_ReturnValue) == 0x000010, "Member 'DaisyPetals_HISM_C_convertIndexToSeedOffset::CallFunc_Fraction_ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_convertIndexToSeedOffset, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000014, "Member 'DaisyPetals_HISM_C_convertIndexToSeedOffset::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_convertIndexToSeedOffset, CallFunc_Round_ReturnValue) == 0x000018, "Member 'DaisyPetals_HISM_C_convertIndexToSeedOffset::CallFunc_Round_ReturnValue' has a wrong offset!");

// Function DaisyPetals_HISM.DaisyPetals_HISM_C.AddPetals
// 0x01B0 (0x01B0 - 0x0000)
struct DaisyPetals_HISM_C_AddPetals final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                l_scale;                                           // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         l_seed;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         l_offsetFromCenter;                                // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         l_curIndex;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               l_directionRot;                                    // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         l_rotPerIndex;                                     // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         l_count;                                           // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               l_rot;                                             // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FTransform>                     l_transforms;                                      // 0x0068(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Variable;                                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ValidateScale_ReturnValue;                // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ValidateOffsetFromCenter_offset;          // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_FloatToVector_ReturnValue;           // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0120(0x0060)(IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_AddInstances_ReturnValue;                 // 0x0188(0x0010)(ReferenceParm)
	struct FRotator                               CallFunc_ValidateRotation_ReturnValue;             // 0x0198(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DaisyPetals_HISM_C_AddPetals) == 0x000010, "Wrong alignment on DaisyPetals_HISM_C_AddPetals");
static_assert(sizeof(DaisyPetals_HISM_C_AddPetals) == 0x0001B0, "Wrong size on DaisyPetals_HISM_C_AddPetals");
static_assert(offsetof(DaisyPetals_HISM_C_AddPetals, Count) == 0x000000, "Member 'DaisyPetals_HISM_C_AddPetals::Count' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_AddPetals, l_scale) == 0x000008, "Member 'DaisyPetals_HISM_C_AddPetals::l_scale' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_AddPetals, l_seed) == 0x000020, "Member 'DaisyPetals_HISM_C_AddPetals::l_seed' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_AddPetals, l_offsetFromCenter) == 0x000024, "Member 'DaisyPetals_HISM_C_AddPetals::l_offsetFromCenter' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_AddPetals, l_curIndex) == 0x000028, "Member 'DaisyPetals_HISM_C_AddPetals::l_curIndex' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_AddPetals, l_directionRot) == 0x000030, "Member 'DaisyPetals_HISM_C_AddPetals::l_directionRot' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_AddPetals, l_rotPerIndex) == 0x000048, "Member 'DaisyPetals_HISM_C_AddPetals::l_rotPerIndex' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_AddPetals, l_count) == 0x00004C, "Member 'DaisyPetals_HISM_C_AddPetals::l_count' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_AddPetals, l_rot) == 0x000050, "Member 'DaisyPetals_HISM_C_AddPetals::l_rot' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_AddPetals, l_transforms) == 0x000068, "Member 'DaisyPetals_HISM_C_AddPetals::l_transforms' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_AddPetals, Temp_int_Variable) == 0x000078, "Member 'DaisyPetals_HISM_C_AddPetals::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_AddPetals, CallFunc_Add_IntInt_ReturnValue) == 0x00007C, "Member 'DaisyPetals_HISM_C_AddPetals::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_AddPetals, CallFunc_ValidateScale_ReturnValue) == 0x000080, "Member 'DaisyPetals_HISM_C_AddPetals::CallFunc_ValidateScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_AddPetals, CallFunc_ValidateOffsetFromCenter_offset) == 0x000098, "Member 'DaisyPetals_HISM_C_AddPetals::CallFunc_ValidateOffsetFromCenter_offset' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_AddPetals, CallFunc_Conv_FloatToVector_ReturnValue) == 0x0000A0, "Member 'DaisyPetals_HISM_C_AddPetals::CallFunc_Conv_FloatToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_AddPetals, CallFunc_Conv_IntToFloat_ReturnValue) == 0x0000B8, "Member 'DaisyPetals_HISM_C_AddPetals::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_AddPetals, CallFunc_Subtract_IntInt_ReturnValue) == 0x0000BC, "Member 'DaisyPetals_HISM_C_AddPetals::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_AddPetals, CallFunc_GetRightVector_ReturnValue) == 0x0000C0, "Member 'DaisyPetals_HISM_C_AddPetals::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_AddPetals, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000D8, "Member 'DaisyPetals_HISM_C_AddPetals::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_AddPetals, CallFunc_Multiply_VectorVector_ReturnValue) == 0x0000E0, "Member 'DaisyPetals_HISM_C_AddPetals::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_AddPetals, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000F8, "Member 'DaisyPetals_HISM_C_AddPetals::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_AddPetals, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x0000FC, "Member 'DaisyPetals_HISM_C_AddPetals::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_AddPetals, CallFunc_MakeRotator_ReturnValue) == 0x000100, "Member 'DaisyPetals_HISM_C_AddPetals::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_AddPetals, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000118, "Member 'DaisyPetals_HISM_C_AddPetals::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_AddPetals, CallFunc_MakeTransform_ReturnValue) == 0x000120, "Member 'DaisyPetals_HISM_C_AddPetals::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_AddPetals, CallFunc_Array_Add_ReturnValue) == 0x000180, "Member 'DaisyPetals_HISM_C_AddPetals::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_AddPetals, CallFunc_AddInstances_ReturnValue) == 0x000188, "Member 'DaisyPetals_HISM_C_AddPetals::CallFunc_AddInstances_ReturnValue' has a wrong offset!");
static_assert(offsetof(DaisyPetals_HISM_C_AddPetals, CallFunc_ValidateRotation_ReturnValue) == 0x000198, "Member 'DaisyPetals_HISM_C_AddPetals::CallFunc_ValidateRotation_ReturnValue' has a wrong offset!");

}

