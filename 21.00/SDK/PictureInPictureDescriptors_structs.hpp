#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PictureInPictureDescriptors

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// Enum PictureInPictureDescriptors.PictureInPictureAction
// NumValues: 0x000D
enum class EPictureInPictureAction : uint8
{
	NEXT                                     = 0,
	PREVIOUS                                 = 1,
	PLAY                                     = 2,
	PAUSE                                    = 3,
	PLAYPAUSE                                = 4,
	LIKE                                     = 5,
	REPORT                                   = 6,
	EXIT                                     = 7,
	UNLIKE                                   = 8,
	TOGGLELIKE                               = 9,
	TOGGLEFULLSCREEN                         = 10,
	Count                                    = 11,
	PictureInPictureAction_MAX               = 12,
};

// Enum PictureInPictureDescriptors.PictureInPictureSourceType
// NumValues: 0x0005
enum class EPictureInPictureSourceType : uint8
{
	NONE                                     = 0,
	URL                                      = 1,
	BLURL                                    = 2,
	EXTERNAL_ASSETS                          = 3,
	PictureInPictureSourceType_MAX           = 4,
};

// ScriptStruct PictureInPictureDescriptors.PiPPartnerSource
// 0x0128 (0x0128 - 0x0000)
struct FPiPPartnerSource final
{
public:
	uint8                                         Pad_0[0x48];                                       // 0x0000(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	EPictureInPictureSourceType                   SourceType;                                        // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              StartTime;                                         // 0x0060(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndTime;                                           // 0x0068(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortMediaEventsStreamAssets           AssetConfig;                                       // 0x0070(0x0060)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 EventIconUrl;                                      // 0x00D0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEpicCMSImage*                          CMSImage;                                          // 0x00E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPictureInPictureSourceActionData*      ActionData;                                        // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         PlatformBlacklist;                                 // 0x00F0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         GameplayTagBlacklist;                              // 0x0100(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         GameplayTagWhitelist;                              // 0x0110(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bManual;                                           // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPiPPartnerSource) == 0x000008, "Wrong alignment on FPiPPartnerSource");
static_assert(sizeof(FPiPPartnerSource) == 0x000128, "Wrong size on FPiPPartnerSource");
static_assert(offsetof(FPiPPartnerSource, SourceType) == 0x000048, "Member 'FPiPPartnerSource::SourceType' has a wrong offset!");
static_assert(offsetof(FPiPPartnerSource, Name) == 0x000050, "Member 'FPiPPartnerSource::Name' has a wrong offset!");
static_assert(offsetof(FPiPPartnerSource, StartTime) == 0x000060, "Member 'FPiPPartnerSource::StartTime' has a wrong offset!");
static_assert(offsetof(FPiPPartnerSource, EndTime) == 0x000068, "Member 'FPiPPartnerSource::EndTime' has a wrong offset!");
static_assert(offsetof(FPiPPartnerSource, AssetConfig) == 0x000070, "Member 'FPiPPartnerSource::AssetConfig' has a wrong offset!");
static_assert(offsetof(FPiPPartnerSource, EventIconUrl) == 0x0000D0, "Member 'FPiPPartnerSource::EventIconUrl' has a wrong offset!");
static_assert(offsetof(FPiPPartnerSource, CMSImage) == 0x0000E0, "Member 'FPiPPartnerSource::CMSImage' has a wrong offset!");
static_assert(offsetof(FPiPPartnerSource, ActionData) == 0x0000E8, "Member 'FPiPPartnerSource::ActionData' has a wrong offset!");
static_assert(offsetof(FPiPPartnerSource, PlatformBlacklist) == 0x0000F0, "Member 'FPiPPartnerSource::PlatformBlacklist' has a wrong offset!");
static_assert(offsetof(FPiPPartnerSource, GameplayTagBlacklist) == 0x000100, "Member 'FPiPPartnerSource::GameplayTagBlacklist' has a wrong offset!");
static_assert(offsetof(FPiPPartnerSource, GameplayTagWhitelist) == 0x000110, "Member 'FPiPPartnerSource::GameplayTagWhitelist' has a wrong offset!");
static_assert(offsetof(FPiPPartnerSource, bManual) == 0x000120, "Member 'FPiPPartnerSource::bManual' has a wrong offset!");

// ScriptStruct PictureInPictureDescriptors.PictureInPictureAnalyticsPayload
// 0x0098 (0x0098 - 0x0000)
struct FPictureInPictureAnalyticsPayload final
{
public:
	TMap<EPictureInPictureAction, int32>          PartnerActionTally;                                // 0x0000(0x0050)(Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x48];                                      // 0x0050(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPictureInPictureAnalyticsPayload) == 0x000008, "Wrong alignment on FPictureInPictureAnalyticsPayload");
static_assert(sizeof(FPictureInPictureAnalyticsPayload) == 0x000098, "Wrong size on FPictureInPictureAnalyticsPayload");
static_assert(offsetof(FPictureInPictureAnalyticsPayload, PartnerActionTally) == 0x000000, "Member 'FPictureInPictureAnalyticsPayload::PartnerActionTally' has a wrong offset!");

// ScriptStruct PictureInPictureDescriptors.PIPVideoPlayerAssetConfig
// 0x0088 (0x0088 - 0x0000)
struct FPIPVideoPlayerAssetConfig final
{
public:
	class UMediaTexture*                          VideoTexture;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMediaPlayer*                           VideoPlayer;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     VideoMaterial;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ThumbnailMaterial;                                 // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LoadingScreenSize;                                 // 0x0020(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LoadingScreenPosition;                             // 0x0030(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortStreamMediaSource*                 MediaSource;                                       // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMediaSoundComponent*                   SoundComponent;                                    // 0x0048(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundClass*                            SoundClass;                                        // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundMix*                              ActiveSoundMix;                                    // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmixBase*                       DefaultSubmix;                                     // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmixBase*                       LicensedSubmix;                                    // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortMediaSubtitlesPlayer*              SubtitlePlayer;                                    // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULocalizedOverlays*                     SubtitleOverlays;                                  // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USubtitleDisplayOptions*                SubtitleDisplayOptions;                            // 0x0080(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPIPVideoPlayerAssetConfig) == 0x000008, "Wrong alignment on FPIPVideoPlayerAssetConfig");
static_assert(sizeof(FPIPVideoPlayerAssetConfig) == 0x000088, "Wrong size on FPIPVideoPlayerAssetConfig");
static_assert(offsetof(FPIPVideoPlayerAssetConfig, VideoTexture) == 0x000000, "Member 'FPIPVideoPlayerAssetConfig::VideoTexture' has a wrong offset!");
static_assert(offsetof(FPIPVideoPlayerAssetConfig, VideoPlayer) == 0x000008, "Member 'FPIPVideoPlayerAssetConfig::VideoPlayer' has a wrong offset!");
static_assert(offsetof(FPIPVideoPlayerAssetConfig, VideoMaterial) == 0x000010, "Member 'FPIPVideoPlayerAssetConfig::VideoMaterial' has a wrong offset!");
static_assert(offsetof(FPIPVideoPlayerAssetConfig, ThumbnailMaterial) == 0x000018, "Member 'FPIPVideoPlayerAssetConfig::ThumbnailMaterial' has a wrong offset!");
static_assert(offsetof(FPIPVideoPlayerAssetConfig, LoadingScreenSize) == 0x000020, "Member 'FPIPVideoPlayerAssetConfig::LoadingScreenSize' has a wrong offset!");
static_assert(offsetof(FPIPVideoPlayerAssetConfig, LoadingScreenPosition) == 0x000030, "Member 'FPIPVideoPlayerAssetConfig::LoadingScreenPosition' has a wrong offset!");
static_assert(offsetof(FPIPVideoPlayerAssetConfig, MediaSource) == 0x000040, "Member 'FPIPVideoPlayerAssetConfig::MediaSource' has a wrong offset!");
static_assert(offsetof(FPIPVideoPlayerAssetConfig, SoundComponent) == 0x000048, "Member 'FPIPVideoPlayerAssetConfig::SoundComponent' has a wrong offset!");
static_assert(offsetof(FPIPVideoPlayerAssetConfig, SoundClass) == 0x000050, "Member 'FPIPVideoPlayerAssetConfig::SoundClass' has a wrong offset!");
static_assert(offsetof(FPIPVideoPlayerAssetConfig, ActiveSoundMix) == 0x000058, "Member 'FPIPVideoPlayerAssetConfig::ActiveSoundMix' has a wrong offset!");
static_assert(offsetof(FPIPVideoPlayerAssetConfig, DefaultSubmix) == 0x000060, "Member 'FPIPVideoPlayerAssetConfig::DefaultSubmix' has a wrong offset!");
static_assert(offsetof(FPIPVideoPlayerAssetConfig, LicensedSubmix) == 0x000068, "Member 'FPIPVideoPlayerAssetConfig::LicensedSubmix' has a wrong offset!");
static_assert(offsetof(FPIPVideoPlayerAssetConfig, SubtitlePlayer) == 0x000070, "Member 'FPIPVideoPlayerAssetConfig::SubtitlePlayer' has a wrong offset!");
static_assert(offsetof(FPIPVideoPlayerAssetConfig, SubtitleOverlays) == 0x000078, "Member 'FPIPVideoPlayerAssetConfig::SubtitleOverlays' has a wrong offset!");
static_assert(offsetof(FPIPVideoPlayerAssetConfig, SubtitleDisplayOptions) == 0x000080, "Member 'FPIPVideoPlayerAssetConfig::SubtitleDisplayOptions' has a wrong offset!");

// ScriptStruct PictureInPictureDescriptors.PIPVideoPlayerConfig
// 0x0048 (0x0048 - 0x0000)
struct FPIPVideoPlayerConfig final
{
public:
	class FString                                 mimetype;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BlurlVUID;                                         // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoopEnabled;                                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoPlay;                                         // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 VideoURL;                                          // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShareBlocked;                                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              EventStartTime;                                    // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPIPVideoPlayerConfig) == 0x000008, "Wrong alignment on FPIPVideoPlayerConfig");
static_assert(sizeof(FPIPVideoPlayerConfig) == 0x000048, "Wrong size on FPIPVideoPlayerConfig");
static_assert(offsetof(FPIPVideoPlayerConfig, mimetype) == 0x000000, "Member 'FPIPVideoPlayerConfig::mimetype' has a wrong offset!");
static_assert(offsetof(FPIPVideoPlayerConfig, BlurlVUID) == 0x000010, "Member 'FPIPVideoPlayerConfig::BlurlVUID' has a wrong offset!");
static_assert(offsetof(FPIPVideoPlayerConfig, bLoopEnabled) == 0x000020, "Member 'FPIPVideoPlayerConfig::bLoopEnabled' has a wrong offset!");
static_assert(offsetof(FPIPVideoPlayerConfig, bAutoPlay) == 0x000021, "Member 'FPIPVideoPlayerConfig::bAutoPlay' has a wrong offset!");
static_assert(offsetof(FPIPVideoPlayerConfig, VideoURL) == 0x000028, "Member 'FPIPVideoPlayerConfig::VideoURL' has a wrong offset!");
static_assert(offsetof(FPIPVideoPlayerConfig, bShareBlocked) == 0x000038, "Member 'FPIPVideoPlayerConfig::bShareBlocked' has a wrong offset!");
static_assert(offsetof(FPIPVideoPlayerConfig, EventStartTime) == 0x000040, "Member 'FPIPVideoPlayerConfig::EventStartTime' has a wrong offset!");

// ScriptStruct PictureInPictureDescriptors.PictureInPictureActionConfig
// 0x00F0 (0x00F0 - 0x0000)
struct FPictureInPictureActionConfig final
{
public:
	EPictureInPictureAction                       ActionType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            ActionBrush;                                       // 0x0010(0x00C0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ActionText;                                        // 0x00D0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPictureInPictureActionConfig) == 0x000010, "Wrong alignment on FPictureInPictureActionConfig");
static_assert(sizeof(FPictureInPictureActionConfig) == 0x0000F0, "Wrong size on FPictureInPictureActionConfig");
static_assert(offsetof(FPictureInPictureActionConfig, ActionType) == 0x000000, "Member 'FPictureInPictureActionConfig::ActionType' has a wrong offset!");
static_assert(offsetof(FPictureInPictureActionConfig, ActionBrush) == 0x000010, "Member 'FPictureInPictureActionConfig::ActionBrush' has a wrong offset!");
static_assert(offsetof(FPictureInPictureActionConfig, ActionText) == 0x0000D0, "Member 'FPictureInPictureActionConfig::ActionText' has a wrong offset!");

}

