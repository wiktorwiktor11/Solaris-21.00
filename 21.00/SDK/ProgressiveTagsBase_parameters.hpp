#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ProgressiveTagsBase

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ProgressiveTagsBase.ProgressiveTagsBase_C.ExecuteUbergraph_ProgressiveTagsBase
// 0x0008 (0x0008 - 0x0000)
struct ProgressiveTagsBase_C_ExecuteUbergraph_ProgressiveTagsBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressiveTagsBase_C_ExecuteUbergraph_ProgressiveTagsBase) == 0x000004, "Wrong alignment on ProgressiveTagsBase_C_ExecuteUbergraph_ProgressiveTagsBase");
static_assert(sizeof(ProgressiveTagsBase_C_ExecuteUbergraph_ProgressiveTagsBase) == 0x000008, "Wrong size on ProgressiveTagsBase_C_ExecuteUbergraph_ProgressiveTagsBase");
static_assert(offsetof(ProgressiveTagsBase_C_ExecuteUbergraph_ProgressiveTagsBase, EntryPoint) == 0x000000, "Member 'ProgressiveTagsBase_C_ExecuteUbergraph_ProgressiveTagsBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(ProgressiveTagsBase_C_ExecuteUbergraph_ProgressiveTagsBase, K2Node_Event_IsDesignTime) == 0x000004, "Member 'ProgressiveTagsBase_C_ExecuteUbergraph_ProgressiveTagsBase::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function ProgressiveTagsBase.ProgressiveTagsBase_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct ProgressiveTagsBase_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressiveTagsBase_C_PreConstruct) == 0x000001, "Wrong alignment on ProgressiveTagsBase_C_PreConstruct");
static_assert(sizeof(ProgressiveTagsBase_C_PreConstruct) == 0x000001, "Wrong size on ProgressiveTagsBase_C_PreConstruct");
static_assert(offsetof(ProgressiveTagsBase_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'ProgressiveTagsBase_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function ProgressiveTagsBase.ProgressiveTagsBase_C.UpdateColor
// 0x0024 (0x0024 - 0x0000)
struct ProgressiveTagsBase_C_UpdateColor final
{
public:
	struct FLinearColor                           Background_Color_0;                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            Text_Color_0;                                      // 0x0010(0x0014)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(ProgressiveTagsBase_C_UpdateColor) == 0x000004, "Wrong alignment on ProgressiveTagsBase_C_UpdateColor");
static_assert(sizeof(ProgressiveTagsBase_C_UpdateColor) == 0x000024, "Wrong size on ProgressiveTagsBase_C_UpdateColor");
static_assert(offsetof(ProgressiveTagsBase_C_UpdateColor, Background_Color_0) == 0x000000, "Member 'ProgressiveTagsBase_C_UpdateColor::Background_Color_0' has a wrong offset!");
static_assert(offsetof(ProgressiveTagsBase_C_UpdateColor, Text_Color_0) == 0x000010, "Member 'ProgressiveTagsBase_C_UpdateColor::Text_Color_0' has a wrong offset!");

// Function ProgressiveTagsBase.ProgressiveTagsBase_C.UpdateImage
// 0x0028 (0x0028 - 0x0000)
struct ProgressiveTagsBase_C_UpdateImage final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            TintColor;                                         // 0x0008(0x0014)(BlueprintVisible, BlueprintReadOnly, Parm)
	float                                         Angle;                                             // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressiveTagsBase_C_UpdateImage) == 0x000008, "Wrong alignment on ProgressiveTagsBase_C_UpdateImage");
static_assert(sizeof(ProgressiveTagsBase_C_UpdateImage) == 0x000028, "Wrong size on ProgressiveTagsBase_C_UpdateImage");
static_assert(offsetof(ProgressiveTagsBase_C_UpdateImage, Texture) == 0x000000, "Member 'ProgressiveTagsBase_C_UpdateImage::Texture' has a wrong offset!");
static_assert(offsetof(ProgressiveTagsBase_C_UpdateImage, TintColor) == 0x000008, "Member 'ProgressiveTagsBase_C_UpdateImage::TintColor' has a wrong offset!");
static_assert(offsetof(ProgressiveTagsBase_C_UpdateImage, Angle) == 0x00001C, "Member 'ProgressiveTagsBase_C_UpdateImage::Angle' has a wrong offset!");
static_assert(offsetof(ProgressiveTagsBase_C_UpdateImage, Temp_bool_Variable) == 0x000020, "Member 'ProgressiveTagsBase_C_UpdateImage::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ProgressiveTagsBase_C_UpdateImage, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'ProgressiveTagsBase_C_UpdateImage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressiveTagsBase_C_UpdateImage, Temp_byte_Variable) == 0x000022, "Member 'ProgressiveTagsBase_C_UpdateImage::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ProgressiveTagsBase_C_UpdateImage, Temp_byte_Variable_1) == 0x000023, "Member 'ProgressiveTagsBase_C_UpdateImage::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ProgressiveTagsBase_C_UpdateImage, K2Node_Select_Default) == 0x000024, "Member 'ProgressiveTagsBase_C_UpdateImage::K2Node_Select_Default' has a wrong offset!");

// Function ProgressiveTagsBase.ProgressiveTagsBase_C.UpdateText
// 0x0020 (0x0020 - 0x0000)
struct ProgressiveTagsBase_C_UpdateText final
{
public:
	class FText                                   Text_0;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ProgressiveTagsBase_C_UpdateText) == 0x000008, "Wrong alignment on ProgressiveTagsBase_C_UpdateText");
static_assert(sizeof(ProgressiveTagsBase_C_UpdateText) == 0x000020, "Wrong size on ProgressiveTagsBase_C_UpdateText");
static_assert(offsetof(ProgressiveTagsBase_C_UpdateText, Text_0) == 0x000000, "Member 'ProgressiveTagsBase_C_UpdateText::Text_0' has a wrong offset!");
static_assert(offsetof(ProgressiveTagsBase_C_UpdateText, Temp_bool_Variable) == 0x000018, "Member 'ProgressiveTagsBase_C_UpdateText::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ProgressiveTagsBase_C_UpdateText, CallFunc_TextIsEmpty_ReturnValue) == 0x000019, "Member 'ProgressiveTagsBase_C_UpdateText::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(ProgressiveTagsBase_C_UpdateText, Temp_byte_Variable) == 0x00001A, "Member 'ProgressiveTagsBase_C_UpdateText::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ProgressiveTagsBase_C_UpdateText, Temp_byte_Variable_1) == 0x00001B, "Member 'ProgressiveTagsBase_C_UpdateText::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ProgressiveTagsBase_C_UpdateText, K2Node_Select_Default) == 0x00001C, "Member 'ProgressiveTagsBase_C_UpdateText::K2Node_Select_Default' has a wrong offset!");

}

