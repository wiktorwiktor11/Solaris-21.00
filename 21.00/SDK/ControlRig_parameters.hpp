#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ControlRig

#include "Basic.hpp"

#include "ControlRig_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AnimationCore_structs.hpp"


namespace SDK::Params
{

// Function ControlRig.ControlRigShapeActor.OnEnabledChanged
// 0x0001 (0x0001 - 0x0000)
struct ControlRigShapeActor_OnEnabledChanged final
{
public:
	bool                                          bIsEnabled;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigShapeActor_OnEnabledChanged) == 0x000001, "Wrong alignment on ControlRigShapeActor_OnEnabledChanged");
static_assert(sizeof(ControlRigShapeActor_OnEnabledChanged) == 0x000001, "Wrong size on ControlRigShapeActor_OnEnabledChanged");
static_assert(offsetof(ControlRigShapeActor_OnEnabledChanged, bIsEnabled) == 0x000000, "Member 'ControlRigShapeActor_OnEnabledChanged::bIsEnabled' has a wrong offset!");

// Function ControlRig.ControlRigShapeActor.OnHoveredChanged
// 0x0001 (0x0001 - 0x0000)
struct ControlRigShapeActor_OnHoveredChanged final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigShapeActor_OnHoveredChanged) == 0x000001, "Wrong alignment on ControlRigShapeActor_OnHoveredChanged");
static_assert(sizeof(ControlRigShapeActor_OnHoveredChanged) == 0x000001, "Wrong size on ControlRigShapeActor_OnHoveredChanged");
static_assert(offsetof(ControlRigShapeActor_OnHoveredChanged, bIsSelected) == 0x000000, "Member 'ControlRigShapeActor_OnHoveredChanged::bIsSelected' has a wrong offset!");

// Function ControlRig.ControlRigShapeActor.OnManipulatingChanged
// 0x0001 (0x0001 - 0x0000)
struct ControlRigShapeActor_OnManipulatingChanged final
{
public:
	bool                                          bIsManipulating;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigShapeActor_OnManipulatingChanged) == 0x000001, "Wrong alignment on ControlRigShapeActor_OnManipulatingChanged");
static_assert(sizeof(ControlRigShapeActor_OnManipulatingChanged) == 0x000001, "Wrong size on ControlRigShapeActor_OnManipulatingChanged");
static_assert(offsetof(ControlRigShapeActor_OnManipulatingChanged, bIsManipulating) == 0x000000, "Member 'ControlRigShapeActor_OnManipulatingChanged::bIsManipulating' has a wrong offset!");

// Function ControlRig.ControlRigShapeActor.OnSelectionChanged
// 0x0001 (0x0001 - 0x0000)
struct ControlRigShapeActor_OnSelectionChanged final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigShapeActor_OnSelectionChanged) == 0x000001, "Wrong alignment on ControlRigShapeActor_OnSelectionChanged");
static_assert(sizeof(ControlRigShapeActor_OnSelectionChanged) == 0x000001, "Wrong size on ControlRigShapeActor_OnSelectionChanged");
static_assert(offsetof(ControlRigShapeActor_OnSelectionChanged, bIsSelected) == 0x000000, "Member 'ControlRigShapeActor_OnSelectionChanged::bIsSelected' has a wrong offset!");

// Function ControlRig.ControlRigShapeActor.OnTransformChanged
// 0x0060 (0x0060 - 0x0000)
struct ControlRigShapeActor_OnTransformChanged final
{
public:
	struct FTransform                             NewTransform;                                      // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigShapeActor_OnTransformChanged) == 0x000010, "Wrong alignment on ControlRigShapeActor_OnTransformChanged");
static_assert(sizeof(ControlRigShapeActor_OnTransformChanged) == 0x000060, "Wrong size on ControlRigShapeActor_OnTransformChanged");
static_assert(offsetof(ControlRigShapeActor_OnTransformChanged, NewTransform) == 0x000000, "Member 'ControlRigShapeActor_OnTransformChanged::NewTransform' has a wrong offset!");

// Function ControlRig.ControlRigShapeActor.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct ControlRigShapeActor_SetEnabled final
{
public:
	bool                                          bInEnabled;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigShapeActor_SetEnabled) == 0x000001, "Wrong alignment on ControlRigShapeActor_SetEnabled");
static_assert(sizeof(ControlRigShapeActor_SetEnabled) == 0x000001, "Wrong size on ControlRigShapeActor_SetEnabled");
static_assert(offsetof(ControlRigShapeActor_SetEnabled, bInEnabled) == 0x000000, "Member 'ControlRigShapeActor_SetEnabled::bInEnabled' has a wrong offset!");

// Function ControlRig.ControlRigShapeActor.SetGlobalTransform
// 0x0060 (0x0060 - 0x0000)
struct ControlRigShapeActor_SetGlobalTransform final
{
public:
	struct FTransform                             InTransform;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigShapeActor_SetGlobalTransform) == 0x000010, "Wrong alignment on ControlRigShapeActor_SetGlobalTransform");
static_assert(sizeof(ControlRigShapeActor_SetGlobalTransform) == 0x000060, "Wrong size on ControlRigShapeActor_SetGlobalTransform");
static_assert(offsetof(ControlRigShapeActor_SetGlobalTransform, InTransform) == 0x000000, "Member 'ControlRigShapeActor_SetGlobalTransform::InTransform' has a wrong offset!");

// Function ControlRig.ControlRigShapeActor.SetHovered
// 0x0001 (0x0001 - 0x0000)
struct ControlRigShapeActor_SetHovered final
{
public:
	bool                                          bInHovered;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigShapeActor_SetHovered) == 0x000001, "Wrong alignment on ControlRigShapeActor_SetHovered");
static_assert(sizeof(ControlRigShapeActor_SetHovered) == 0x000001, "Wrong size on ControlRigShapeActor_SetHovered");
static_assert(offsetof(ControlRigShapeActor_SetHovered, bInHovered) == 0x000000, "Member 'ControlRigShapeActor_SetHovered::bInHovered' has a wrong offset!");

// Function ControlRig.ControlRigShapeActor.SetSelectable
// 0x0001 (0x0001 - 0x0000)
struct ControlRigShapeActor_SetSelectable final
{
public:
	bool                                          bInSelectable;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigShapeActor_SetSelectable) == 0x000001, "Wrong alignment on ControlRigShapeActor_SetSelectable");
static_assert(sizeof(ControlRigShapeActor_SetSelectable) == 0x000001, "Wrong size on ControlRigShapeActor_SetSelectable");
static_assert(offsetof(ControlRigShapeActor_SetSelectable, bInSelectable) == 0x000000, "Member 'ControlRigShapeActor_SetSelectable::bInSelectable' has a wrong offset!");

// Function ControlRig.ControlRigShapeActor.SetSelected
// 0x0001 (0x0001 - 0x0000)
struct ControlRigShapeActor_SetSelected final
{
public:
	bool                                          bInSelected;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigShapeActor_SetSelected) == 0x000001, "Wrong alignment on ControlRigShapeActor_SetSelected");
static_assert(sizeof(ControlRigShapeActor_SetSelected) == 0x000001, "Wrong size on ControlRigShapeActor_SetSelected");
static_assert(offsetof(ControlRigShapeActor_SetSelected, bInSelected) == 0x000000, "Member 'ControlRigShapeActor_SetSelected::bInSelected' has a wrong offset!");

// Function ControlRig.ControlRigShapeActor.GetGlobalTransform
// 0x0060 (0x0060 - 0x0000)
struct ControlRigShapeActor_GetGlobalTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigShapeActor_GetGlobalTransform) == 0x000010, "Wrong alignment on ControlRigShapeActor_GetGlobalTransform");
static_assert(sizeof(ControlRigShapeActor_GetGlobalTransform) == 0x000060, "Wrong size on ControlRigShapeActor_GetGlobalTransform");
static_assert(offsetof(ControlRigShapeActor_GetGlobalTransform, ReturnValue) == 0x000000, "Member 'ControlRigShapeActor_GetGlobalTransform::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigShapeActor.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct ControlRigShapeActor_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigShapeActor_IsEnabled) == 0x000001, "Wrong alignment on ControlRigShapeActor_IsEnabled");
static_assert(sizeof(ControlRigShapeActor_IsEnabled) == 0x000001, "Wrong size on ControlRigShapeActor_IsEnabled");
static_assert(offsetof(ControlRigShapeActor_IsEnabled, ReturnValue) == 0x000000, "Member 'ControlRigShapeActor_IsEnabled::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigShapeActor.IsHovered
// 0x0001 (0x0001 - 0x0000)
struct ControlRigShapeActor_IsHovered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigShapeActor_IsHovered) == 0x000001, "Wrong alignment on ControlRigShapeActor_IsHovered");
static_assert(sizeof(ControlRigShapeActor_IsHovered) == 0x000001, "Wrong size on ControlRigShapeActor_IsHovered");
static_assert(offsetof(ControlRigShapeActor_IsHovered, ReturnValue) == 0x000000, "Member 'ControlRigShapeActor_IsHovered::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigShapeActor.IsSelectedInEditor
// 0x0001 (0x0001 - 0x0000)
struct ControlRigShapeActor_IsSelectedInEditor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigShapeActor_IsSelectedInEditor) == 0x000001, "Wrong alignment on ControlRigShapeActor_IsSelectedInEditor");
static_assert(sizeof(ControlRigShapeActor_IsSelectedInEditor) == 0x000001, "Wrong size on ControlRigShapeActor_IsSelectedInEditor");
static_assert(offsetof(ControlRigShapeActor_IsSelectedInEditor, ReturnValue) == 0x000000, "Member 'ControlRigShapeActor_IsSelectedInEditor::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRig.FindControlRigs
// 0x0020 (0x0020 - 0x0000)
struct ControlRig_FindControlRigs final
{
public:
	class UObject*                                Outer_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UControlRig>                OptionalClass;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UControlRig*>                    ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRig_FindControlRigs) == 0x000008, "Wrong alignment on ControlRig_FindControlRigs");
static_assert(sizeof(ControlRig_FindControlRigs) == 0x000020, "Wrong size on ControlRig_FindControlRigs");
static_assert(offsetof(ControlRig_FindControlRigs, Outer_0) == 0x000000, "Member 'ControlRig_FindControlRigs::Outer_0' has a wrong offset!");
static_assert(offsetof(ControlRig_FindControlRigs, OptionalClass) == 0x000008, "Member 'ControlRig_FindControlRigs::OptionalClass' has a wrong offset!");
static_assert(offsetof(ControlRig_FindControlRigs, ReturnValue) == 0x000010, "Member 'ControlRig_FindControlRigs::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRig.ClearControlSelection
// 0x0001 (0x0001 - 0x0000)
struct ControlRig_ClearControlSelection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRig_ClearControlSelection) == 0x000001, "Wrong alignment on ControlRig_ClearControlSelection");
static_assert(sizeof(ControlRig_ClearControlSelection) == 0x000001, "Wrong size on ControlRig_ClearControlSelection");
static_assert(offsetof(ControlRig_ClearControlSelection, ReturnValue) == 0x000000, "Member 'ControlRig_ClearControlSelection::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRig.Execute
// 0x0008 (0x0008 - 0x0000)
struct ControlRig_Execute final
{
public:
	EControlRigState                              State;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InEventName;                                       // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRig_Execute) == 0x000004, "Wrong alignment on ControlRig_Execute");
static_assert(sizeof(ControlRig_Execute) == 0x000008, "Wrong size on ControlRig_Execute");
static_assert(offsetof(ControlRig_Execute, State) == 0x000000, "Member 'ControlRig_Execute::State' has a wrong offset!");
static_assert(offsetof(ControlRig_Execute, InEventName) == 0x000004, "Member 'ControlRig_Execute::InEventName' has a wrong offset!");

// Function ControlRig.ControlRig.GetHierarchy
// 0x0008 (0x0008 - 0x0000)
struct ControlRig_GetHierarchy final
{
public:
	class URigHierarchy*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRig_GetHierarchy) == 0x000008, "Wrong alignment on ControlRig_GetHierarchy");
static_assert(sizeof(ControlRig_GetHierarchy) == 0x000008, "Wrong size on ControlRig_GetHierarchy");
static_assert(offsetof(ControlRig_GetHierarchy, ReturnValue) == 0x000000, "Member 'ControlRig_GetHierarchy::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRig.GetVM
// 0x0008 (0x0008 - 0x0000)
struct ControlRig_GetVM final
{
public:
	class URigVM*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRig_GetVM) == 0x000008, "Wrong alignment on ControlRig_GetVM");
static_assert(sizeof(ControlRig_GetVM) == 0x000008, "Wrong size on ControlRig_GetVM");
static_assert(offsetof(ControlRig_GetVM, ReturnValue) == 0x000000, "Member 'ControlRig_GetVM::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRig.SelectControl
// 0x0008 (0x0008 - 0x0000)
struct ControlRig_SelectControl final
{
public:
	class FName                                   InControlName;                                     // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelect;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControlRig_SelectControl) == 0x000004, "Wrong alignment on ControlRig_SelectControl");
static_assert(sizeof(ControlRig_SelectControl) == 0x000008, "Wrong size on ControlRig_SelectControl");
static_assert(offsetof(ControlRig_SelectControl, InControlName) == 0x000000, "Member 'ControlRig_SelectControl::InControlName' has a wrong offset!");
static_assert(offsetof(ControlRig_SelectControl, bSelect) == 0x000004, "Member 'ControlRig_SelectControl::bSelect' has a wrong offset!");

// Function ControlRig.ControlRig.SetAbsoluteAndDeltaTime
// 0x0008 (0x0008 - 0x0000)
struct ControlRig_SetAbsoluteAndDeltaTime final
{
public:
	float                                         InAbsoluteTime;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDeltaTime;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRig_SetAbsoluteAndDeltaTime) == 0x000004, "Wrong alignment on ControlRig_SetAbsoluteAndDeltaTime");
static_assert(sizeof(ControlRig_SetAbsoluteAndDeltaTime) == 0x000008, "Wrong size on ControlRig_SetAbsoluteAndDeltaTime");
static_assert(offsetof(ControlRig_SetAbsoluteAndDeltaTime, InAbsoluteTime) == 0x000000, "Member 'ControlRig_SetAbsoluteAndDeltaTime::InAbsoluteTime' has a wrong offset!");
static_assert(offsetof(ControlRig_SetAbsoluteAndDeltaTime, InDeltaTime) == 0x000004, "Member 'ControlRig_SetAbsoluteAndDeltaTime::InDeltaTime' has a wrong offset!");

// Function ControlRig.ControlRig.SetAbsoluteTime
// 0x0008 (0x0008 - 0x0000)
struct ControlRig_SetAbsoluteTime final
{
public:
	float                                         InAbsoluteTime;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InSetDeltaTimeZero;                                // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControlRig_SetAbsoluteTime) == 0x000004, "Wrong alignment on ControlRig_SetAbsoluteTime");
static_assert(sizeof(ControlRig_SetAbsoluteTime) == 0x000008, "Wrong size on ControlRig_SetAbsoluteTime");
static_assert(offsetof(ControlRig_SetAbsoluteTime, InAbsoluteTime) == 0x000000, "Member 'ControlRig_SetAbsoluteTime::InAbsoluteTime' has a wrong offset!");
static_assert(offsetof(ControlRig_SetAbsoluteTime, InSetDeltaTimeZero) == 0x000004, "Member 'ControlRig_SetAbsoluteTime::InSetDeltaTimeZero' has a wrong offset!");

// Function ControlRig.ControlRig.SetDeltaTime
// 0x0004 (0x0004 - 0x0000)
struct ControlRig_SetDeltaTime final
{
public:
	float                                         InDeltaTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRig_SetDeltaTime) == 0x000004, "Wrong alignment on ControlRig_SetDeltaTime");
static_assert(sizeof(ControlRig_SetDeltaTime) == 0x000004, "Wrong size on ControlRig_SetDeltaTime");
static_assert(offsetof(ControlRig_SetDeltaTime, InDeltaTime) == 0x000000, "Member 'ControlRig_SetDeltaTime::InDeltaTime' has a wrong offset!");

// Function ControlRig.ControlRig.SetFramesPerSecond
// 0x0004 (0x0004 - 0x0000)
struct ControlRig_SetFramesPerSecond final
{
public:
	float                                         InFramesPerSecond;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRig_SetFramesPerSecond) == 0x000004, "Wrong alignment on ControlRig_SetFramesPerSecond");
static_assert(sizeof(ControlRig_SetFramesPerSecond) == 0x000004, "Wrong size on ControlRig_SetFramesPerSecond");
static_assert(offsetof(ControlRig_SetFramesPerSecond, InFramesPerSecond) == 0x000000, "Member 'ControlRig_SetFramesPerSecond::InFramesPerSecond' has a wrong offset!");

// Function ControlRig.ControlRig.SetInteractionRig
// 0x0008 (0x0008 - 0x0000)
struct ControlRig_SetInteractionRig final
{
public:
	class UControlRig*                            InInteractionRig;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRig_SetInteractionRig) == 0x000008, "Wrong alignment on ControlRig_SetInteractionRig");
static_assert(sizeof(ControlRig_SetInteractionRig) == 0x000008, "Wrong size on ControlRig_SetInteractionRig");
static_assert(offsetof(ControlRig_SetInteractionRig, InInteractionRig) == 0x000000, "Member 'ControlRig_SetInteractionRig::InInteractionRig' has a wrong offset!");

// Function ControlRig.ControlRig.SetInteractionRigClass
// 0x0008 (0x0008 - 0x0000)
struct ControlRig_SetInteractionRigClass final
{
public:
	TSubclassOf<class UControlRig>                InInteractionRigClass;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRig_SetInteractionRigClass) == 0x000008, "Wrong alignment on ControlRig_SetInteractionRigClass");
static_assert(sizeof(ControlRig_SetInteractionRigClass) == 0x000008, "Wrong size on ControlRig_SetInteractionRigClass");
static_assert(offsetof(ControlRig_SetInteractionRigClass, InInteractionRigClass) == 0x000000, "Member 'ControlRig_SetInteractionRigClass::InInteractionRigClass' has a wrong offset!");

// Function ControlRig.ControlRig.SetVariableFromString
// 0x0020 (0x0020 - 0x0000)
struct ControlRig_SetVariableFromString final
{
public:
	class FName                                   InVariableName;                                    // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InValue;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControlRig_SetVariableFromString) == 0x000008, "Wrong alignment on ControlRig_SetVariableFromString");
static_assert(sizeof(ControlRig_SetVariableFromString) == 0x000020, "Wrong size on ControlRig_SetVariableFromString");
static_assert(offsetof(ControlRig_SetVariableFromString, InVariableName) == 0x000000, "Member 'ControlRig_SetVariableFromString::InVariableName' has a wrong offset!");
static_assert(offsetof(ControlRig_SetVariableFromString, InValue) == 0x000008, "Member 'ControlRig_SetVariableFromString::InValue' has a wrong offset!");
static_assert(offsetof(ControlRig_SetVariableFromString, ReturnValue) == 0x000018, "Member 'ControlRig_SetVariableFromString::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRig.CanExecute
// 0x0001 (0x0001 - 0x0000)
struct ControlRig_CanExecute final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRig_CanExecute) == 0x000001, "Wrong alignment on ControlRig_CanExecute");
static_assert(sizeof(ControlRig_CanExecute) == 0x000001, "Wrong size on ControlRig_CanExecute");
static_assert(offsetof(ControlRig_CanExecute, ReturnValue) == 0x000000, "Member 'ControlRig_CanExecute::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRig.CurrentControlSelection
// 0x0010 (0x0010 - 0x0000)
struct ControlRig_CurrentControlSelection final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRig_CurrentControlSelection) == 0x000008, "Wrong alignment on ControlRig_CurrentControlSelection");
static_assert(sizeof(ControlRig_CurrentControlSelection) == 0x000010, "Wrong size on ControlRig_CurrentControlSelection");
static_assert(offsetof(ControlRig_CurrentControlSelection, ReturnValue) == 0x000000, "Member 'ControlRig_CurrentControlSelection::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRig.GetAbsoluteTime
// 0x0004 (0x0004 - 0x0000)
struct ControlRig_GetAbsoluteTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRig_GetAbsoluteTime) == 0x000004, "Wrong alignment on ControlRig_GetAbsoluteTime");
static_assert(sizeof(ControlRig_GetAbsoluteTime) == 0x000004, "Wrong size on ControlRig_GetAbsoluteTime");
static_assert(offsetof(ControlRig_GetAbsoluteTime, ReturnValue) == 0x000000, "Member 'ControlRig_GetAbsoluteTime::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRig.GetCurrentFramesPerSecond
// 0x0004 (0x0004 - 0x0000)
struct ControlRig_GetCurrentFramesPerSecond final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRig_GetCurrentFramesPerSecond) == 0x000004, "Wrong alignment on ControlRig_GetCurrentFramesPerSecond");
static_assert(sizeof(ControlRig_GetCurrentFramesPerSecond) == 0x000004, "Wrong size on ControlRig_GetCurrentFramesPerSecond");
static_assert(offsetof(ControlRig_GetCurrentFramesPerSecond, ReturnValue) == 0x000000, "Member 'ControlRig_GetCurrentFramesPerSecond::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRig.GetInteractionRig
// 0x0008 (0x0008 - 0x0000)
struct ControlRig_GetInteractionRig final
{
public:
	class UControlRig*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRig_GetInteractionRig) == 0x000008, "Wrong alignment on ControlRig_GetInteractionRig");
static_assert(sizeof(ControlRig_GetInteractionRig) == 0x000008, "Wrong size on ControlRig_GetInteractionRig");
static_assert(offsetof(ControlRig_GetInteractionRig, ReturnValue) == 0x000000, "Member 'ControlRig_GetInteractionRig::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRig.GetInteractionRigClass
// 0x0008 (0x0008 - 0x0000)
struct ControlRig_GetInteractionRigClass final
{
public:
	TSubclassOf<class UControlRig>                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRig_GetInteractionRigClass) == 0x000008, "Wrong alignment on ControlRig_GetInteractionRigClass");
static_assert(sizeof(ControlRig_GetInteractionRigClass) == 0x000008, "Wrong size on ControlRig_GetInteractionRigClass");
static_assert(offsetof(ControlRig_GetInteractionRigClass, ReturnValue) == 0x000000, "Member 'ControlRig_GetInteractionRigClass::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRig.GetScriptAccessibleVariables
// 0x0010 (0x0010 - 0x0000)
struct ControlRig_GetScriptAccessibleVariables final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRig_GetScriptAccessibleVariables) == 0x000008, "Wrong alignment on ControlRig_GetScriptAccessibleVariables");
static_assert(sizeof(ControlRig_GetScriptAccessibleVariables) == 0x000010, "Wrong size on ControlRig_GetScriptAccessibleVariables");
static_assert(offsetof(ControlRig_GetScriptAccessibleVariables, ReturnValue) == 0x000000, "Member 'ControlRig_GetScriptAccessibleVariables::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRig.GetSupportedEvents
// 0x0010 (0x0010 - 0x0000)
struct ControlRig_GetSupportedEvents final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRig_GetSupportedEvents) == 0x000008, "Wrong alignment on ControlRig_GetSupportedEvents");
static_assert(sizeof(ControlRig_GetSupportedEvents) == 0x000010, "Wrong size on ControlRig_GetSupportedEvents");
static_assert(offsetof(ControlRig_GetSupportedEvents, ReturnValue) == 0x000000, "Member 'ControlRig_GetSupportedEvents::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRig.GetVariableAsString
// 0x0018 (0x0018 - 0x0000)
struct ControlRig_GetVariableAsString final
{
public:
	class FName                                   InVariableName;                                    // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRig_GetVariableAsString) == 0x000008, "Wrong alignment on ControlRig_GetVariableAsString");
static_assert(sizeof(ControlRig_GetVariableAsString) == 0x000018, "Wrong size on ControlRig_GetVariableAsString");
static_assert(offsetof(ControlRig_GetVariableAsString, InVariableName) == 0x000000, "Member 'ControlRig_GetVariableAsString::InVariableName' has a wrong offset!");
static_assert(offsetof(ControlRig_GetVariableAsString, ReturnValue) == 0x000008, "Member 'ControlRig_GetVariableAsString::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRig.GetVariableType
// 0x0008 (0x0008 - 0x0000)
struct ControlRig_GetVariableType final
{
public:
	class FName                                   InVariableName;                                    // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRig_GetVariableType) == 0x000004, "Wrong alignment on ControlRig_GetVariableType");
static_assert(sizeof(ControlRig_GetVariableType) == 0x000008, "Wrong size on ControlRig_GetVariableType");
static_assert(offsetof(ControlRig_GetVariableType, InVariableName) == 0x000000, "Member 'ControlRig_GetVariableType::InVariableName' has a wrong offset!");
static_assert(offsetof(ControlRig_GetVariableType, ReturnValue) == 0x000004, "Member 'ControlRig_GetVariableType::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRig.IsControlSelected
// 0x0008 (0x0008 - 0x0000)
struct ControlRig_IsControlSelected final
{
public:
	class FName                                   InControlName;                                     // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControlRig_IsControlSelected) == 0x000004, "Wrong alignment on ControlRig_IsControlSelected");
static_assert(sizeof(ControlRig_IsControlSelected) == 0x000008, "Wrong size on ControlRig_IsControlSelected");
static_assert(offsetof(ControlRig_IsControlSelected, InControlName) == 0x000000, "Member 'ControlRig_IsControlSelected::InControlName' has a wrong offset!");
static_assert(offsetof(ControlRig_IsControlSelected, ReturnValue) == 0x000004, "Member 'ControlRig_IsControlSelected::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRig.SupportsEvent
// 0x0008 (0x0008 - 0x0000)
struct ControlRig_SupportsEvent final
{
public:
	class FName                                   InEventName;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControlRig_SupportsEvent) == 0x000004, "Wrong alignment on ControlRig_SupportsEvent");
static_assert(sizeof(ControlRig_SupportsEvent) == 0x000008, "Wrong size on ControlRig_SupportsEvent");
static_assert(offsetof(ControlRig_SupportsEvent, InEventName) == 0x000000, "Member 'ControlRig_SupportsEvent::InEventName' has a wrong offset!");
static_assert(offsetof(ControlRig_SupportsEvent, ReturnValue) == 0x000004, "Member 'ControlRig_SupportsEvent::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigComponent.AddMappedCompleteSkeletalMesh
// 0x0008 (0x0008 - 0x0000)
struct ControlRigComponent_AddMappedCompleteSkeletalMesh final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_AddMappedCompleteSkeletalMesh) == 0x000008, "Wrong alignment on ControlRigComponent_AddMappedCompleteSkeletalMesh");
static_assert(sizeof(ControlRigComponent_AddMappedCompleteSkeletalMesh) == 0x000008, "Wrong size on ControlRigComponent_AddMappedCompleteSkeletalMesh");
static_assert(offsetof(ControlRigComponent_AddMappedCompleteSkeletalMesh, SkeletalMeshComponent) == 0x000000, "Member 'ControlRigComponent_AddMappedCompleteSkeletalMesh::SkeletalMeshComponent' has a wrong offset!");

// Function ControlRig.ControlRigComponent.AddMappedComponents
// 0x0010 (0x0010 - 0x0000)
struct ControlRigComponent_AddMappedComponents final
{
public:
	TArray<struct FControlRigComponentMappedComponent> Components;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_AddMappedComponents) == 0x000008, "Wrong alignment on ControlRigComponent_AddMappedComponents");
static_assert(sizeof(ControlRigComponent_AddMappedComponents) == 0x000010, "Wrong size on ControlRigComponent_AddMappedComponents");
static_assert(offsetof(ControlRigComponent_AddMappedComponents, Components) == 0x000000, "Member 'ControlRigComponent_AddMappedComponents::Components' has a wrong offset!");

// Function ControlRig.ControlRigComponent.AddMappedElements
// 0x0010 (0x0010 - 0x0000)
struct ControlRigComponent_AddMappedElements final
{
public:
	TArray<struct FControlRigComponentMappedElement> NewMappedElements;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_AddMappedElements) == 0x000008, "Wrong alignment on ControlRigComponent_AddMappedElements");
static_assert(sizeof(ControlRigComponent_AddMappedElements) == 0x000010, "Wrong size on ControlRigComponent_AddMappedElements");
static_assert(offsetof(ControlRigComponent_AddMappedElements, NewMappedElements) == 0x000000, "Member 'ControlRigComponent_AddMappedElements::NewMappedElements' has a wrong offset!");

// Function ControlRig.ControlRigComponent.AddMappedSkeletalMesh
// 0x0028 (0x0028 - 0x0000)
struct ControlRigComponent_AddMappedSkeletalMesh final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FControlRigComponentMappedBone> Bones;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FControlRigComponentMappedCurve> Curves;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_AddMappedSkeletalMesh) == 0x000008, "Wrong alignment on ControlRigComponent_AddMappedSkeletalMesh");
static_assert(sizeof(ControlRigComponent_AddMappedSkeletalMesh) == 0x000028, "Wrong size on ControlRigComponent_AddMappedSkeletalMesh");
static_assert(offsetof(ControlRigComponent_AddMappedSkeletalMesh, SkeletalMeshComponent) == 0x000000, "Member 'ControlRigComponent_AddMappedSkeletalMesh::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_AddMappedSkeletalMesh, Bones) == 0x000008, "Member 'ControlRigComponent_AddMappedSkeletalMesh::Bones' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_AddMappedSkeletalMesh, Curves) == 0x000018, "Member 'ControlRigComponent_AddMappedSkeletalMesh::Curves' has a wrong offset!");

// Function ControlRig.ControlRigComponent.CanExecute
// 0x0001 (0x0001 - 0x0000)
struct ControlRigComponent_CanExecute final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_CanExecute) == 0x000001, "Wrong alignment on ControlRigComponent_CanExecute");
static_assert(sizeof(ControlRigComponent_CanExecute) == 0x000001, "Wrong size on ControlRigComponent_CanExecute");
static_assert(offsetof(ControlRigComponent_CanExecute, ReturnValue) == 0x000000, "Member 'ControlRigComponent_CanExecute::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigComponent.DoesElementExist
// 0x0008 (0x0008 - 0x0000)
struct ControlRigComponent_DoesElementExist final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigElementType                               ElementType;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControlRigComponent_DoesElementExist) == 0x000004, "Wrong alignment on ControlRigComponent_DoesElementExist");
static_assert(sizeof(ControlRigComponent_DoesElementExist) == 0x000008, "Wrong size on ControlRigComponent_DoesElementExist");
static_assert(offsetof(ControlRigComponent_DoesElementExist, Name_0) == 0x000000, "Member 'ControlRigComponent_DoesElementExist::Name_0' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_DoesElementExist, ElementType) == 0x000004, "Member 'ControlRigComponent_DoesElementExist::ElementType' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_DoesElementExist, ReturnValue) == 0x000005, "Member 'ControlRigComponent_DoesElementExist::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigComponent.GetBoneTransform
// 0x0070 (0x0070 - 0x0000)
struct ControlRigComponent_GetBoneTransform final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControlRigComponentSpace                     Space;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0xB];                                        // 0x0005(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_GetBoneTransform) == 0x000010, "Wrong alignment on ControlRigComponent_GetBoneTransform");
static_assert(sizeof(ControlRigComponent_GetBoneTransform) == 0x000070, "Wrong size on ControlRigComponent_GetBoneTransform");
static_assert(offsetof(ControlRigComponent_GetBoneTransform, BoneName) == 0x000000, "Member 'ControlRigComponent_GetBoneTransform::BoneName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetBoneTransform, Space) == 0x000004, "Member 'ControlRigComponent_GetBoneTransform::Space' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetBoneTransform, ReturnValue) == 0x000010, "Member 'ControlRigComponent_GetBoneTransform::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigComponent.GetControlBool
// 0x0008 (0x0008 - 0x0000)
struct ControlRigComponent_GetControlBool final
{
public:
	class FName                                   ControlName;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControlRigComponent_GetControlBool) == 0x000004, "Wrong alignment on ControlRigComponent_GetControlBool");
static_assert(sizeof(ControlRigComponent_GetControlBool) == 0x000008, "Wrong size on ControlRigComponent_GetControlBool");
static_assert(offsetof(ControlRigComponent_GetControlBool, ControlName) == 0x000000, "Member 'ControlRigComponent_GetControlBool::ControlName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetControlBool, ReturnValue) == 0x000004, "Member 'ControlRigComponent_GetControlBool::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigComponent.GetControlFloat
// 0x0008 (0x0008 - 0x0000)
struct ControlRigComponent_GetControlFloat final
{
public:
	class FName                                   ControlName;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_GetControlFloat) == 0x000004, "Wrong alignment on ControlRigComponent_GetControlFloat");
static_assert(sizeof(ControlRigComponent_GetControlFloat) == 0x000008, "Wrong size on ControlRigComponent_GetControlFloat");
static_assert(offsetof(ControlRigComponent_GetControlFloat, ControlName) == 0x000000, "Member 'ControlRigComponent_GetControlFloat::ControlName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetControlFloat, ReturnValue) == 0x000004, "Member 'ControlRigComponent_GetControlFloat::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigComponent.GetControlInt
// 0x0008 (0x0008 - 0x0000)
struct ControlRigComponent_GetControlInt final
{
public:
	class FName                                   ControlName;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_GetControlInt) == 0x000004, "Wrong alignment on ControlRigComponent_GetControlInt");
static_assert(sizeof(ControlRigComponent_GetControlInt) == 0x000008, "Wrong size on ControlRigComponent_GetControlInt");
static_assert(offsetof(ControlRigComponent_GetControlInt, ControlName) == 0x000000, "Member 'ControlRigComponent_GetControlInt::ControlName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetControlInt, ReturnValue) == 0x000004, "Member 'ControlRigComponent_GetControlInt::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigComponent.GetControlOffset
// 0x0070 (0x0070 - 0x0000)
struct ControlRigComponent_GetControlOffset final
{
public:
	class FName                                   ControlName;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControlRigComponentSpace                     Space;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0xB];                                        // 0x0005(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_GetControlOffset) == 0x000010, "Wrong alignment on ControlRigComponent_GetControlOffset");
static_assert(sizeof(ControlRigComponent_GetControlOffset) == 0x000070, "Wrong size on ControlRigComponent_GetControlOffset");
static_assert(offsetof(ControlRigComponent_GetControlOffset, ControlName) == 0x000000, "Member 'ControlRigComponent_GetControlOffset::ControlName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetControlOffset, Space) == 0x000004, "Member 'ControlRigComponent_GetControlOffset::Space' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetControlOffset, ReturnValue) == 0x000010, "Member 'ControlRigComponent_GetControlOffset::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigComponent.GetControlPosition
// 0x0020 (0x0020 - 0x0000)
struct ControlRigComponent_GetControlPosition final
{
public:
	class FName                                   ControlName;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControlRigComponentSpace                     Space;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_GetControlPosition) == 0x000008, "Wrong alignment on ControlRigComponent_GetControlPosition");
static_assert(sizeof(ControlRigComponent_GetControlPosition) == 0x000020, "Wrong size on ControlRigComponent_GetControlPosition");
static_assert(offsetof(ControlRigComponent_GetControlPosition, ControlName) == 0x000000, "Member 'ControlRigComponent_GetControlPosition::ControlName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetControlPosition, Space) == 0x000004, "Member 'ControlRigComponent_GetControlPosition::Space' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetControlPosition, ReturnValue) == 0x000008, "Member 'ControlRigComponent_GetControlPosition::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigComponent.GetControlRig
// 0x0008 (0x0008 - 0x0000)
struct ControlRigComponent_GetControlRig final
{
public:
	class UControlRig*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_GetControlRig) == 0x000008, "Wrong alignment on ControlRigComponent_GetControlRig");
static_assert(sizeof(ControlRigComponent_GetControlRig) == 0x000008, "Wrong size on ControlRigComponent_GetControlRig");
static_assert(offsetof(ControlRigComponent_GetControlRig, ReturnValue) == 0x000000, "Member 'ControlRigComponent_GetControlRig::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigComponent.GetControlRotator
// 0x0020 (0x0020 - 0x0000)
struct ControlRigComponent_GetControlRotator final
{
public:
	class FName                                   ControlName;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControlRigComponentSpace                     Space;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_GetControlRotator) == 0x000008, "Wrong alignment on ControlRigComponent_GetControlRotator");
static_assert(sizeof(ControlRigComponent_GetControlRotator) == 0x000020, "Wrong size on ControlRigComponent_GetControlRotator");
static_assert(offsetof(ControlRigComponent_GetControlRotator, ControlName) == 0x000000, "Member 'ControlRigComponent_GetControlRotator::ControlName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetControlRotator, Space) == 0x000004, "Member 'ControlRigComponent_GetControlRotator::Space' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetControlRotator, ReturnValue) == 0x000008, "Member 'ControlRigComponent_GetControlRotator::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigComponent.GetControlScale
// 0x0020 (0x0020 - 0x0000)
struct ControlRigComponent_GetControlScale final
{
public:
	class FName                                   ControlName;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControlRigComponentSpace                     Space;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_GetControlScale) == 0x000008, "Wrong alignment on ControlRigComponent_GetControlScale");
static_assert(sizeof(ControlRigComponent_GetControlScale) == 0x000020, "Wrong size on ControlRigComponent_GetControlScale");
static_assert(offsetof(ControlRigComponent_GetControlScale, ControlName) == 0x000000, "Member 'ControlRigComponent_GetControlScale::ControlName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetControlScale, Space) == 0x000004, "Member 'ControlRigComponent_GetControlScale::Space' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetControlScale, ReturnValue) == 0x000008, "Member 'ControlRigComponent_GetControlScale::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigComponent.GetControlTransform
// 0x0070 (0x0070 - 0x0000)
struct ControlRigComponent_GetControlTransform final
{
public:
	class FName                                   ControlName;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControlRigComponentSpace                     Space;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0xB];                                        // 0x0005(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_GetControlTransform) == 0x000010, "Wrong alignment on ControlRigComponent_GetControlTransform");
static_assert(sizeof(ControlRigComponent_GetControlTransform) == 0x000070, "Wrong size on ControlRigComponent_GetControlTransform");
static_assert(offsetof(ControlRigComponent_GetControlTransform, ControlName) == 0x000000, "Member 'ControlRigComponent_GetControlTransform::ControlName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetControlTransform, Space) == 0x000004, "Member 'ControlRigComponent_GetControlTransform::Space' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetControlTransform, ReturnValue) == 0x000010, "Member 'ControlRigComponent_GetControlTransform::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigComponent.GetControlVector2D
// 0x0018 (0x0018 - 0x0000)
struct ControlRigComponent_GetControlVector2D final
{
public:
	class FName                                   ControlName;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_GetControlVector2D) == 0x000008, "Wrong alignment on ControlRigComponent_GetControlVector2D");
static_assert(sizeof(ControlRigComponent_GetControlVector2D) == 0x000018, "Wrong size on ControlRigComponent_GetControlVector2D");
static_assert(offsetof(ControlRigComponent_GetControlVector2D, ControlName) == 0x000000, "Member 'ControlRigComponent_GetControlVector2D::ControlName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetControlVector2D, ReturnValue) == 0x000008, "Member 'ControlRigComponent_GetControlVector2D::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigComponent.GetElementNames
// 0x0018 (0x0018 - 0x0000)
struct ControlRigComponent_GetElementNames final
{
public:
	ERigElementType                               ElementType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_GetElementNames) == 0x000008, "Wrong alignment on ControlRigComponent_GetElementNames");
static_assert(sizeof(ControlRigComponent_GetElementNames) == 0x000018, "Wrong size on ControlRigComponent_GetElementNames");
static_assert(offsetof(ControlRigComponent_GetElementNames, ElementType) == 0x000000, "Member 'ControlRigComponent_GetElementNames::ElementType' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetElementNames, ReturnValue) == 0x000008, "Member 'ControlRigComponent_GetElementNames::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigComponent.GetInitialBoneTransform
// 0x0070 (0x0070 - 0x0000)
struct ControlRigComponent_GetInitialBoneTransform final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControlRigComponentSpace                     Space;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0xB];                                        // 0x0005(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_GetInitialBoneTransform) == 0x000010, "Wrong alignment on ControlRigComponent_GetInitialBoneTransform");
static_assert(sizeof(ControlRigComponent_GetInitialBoneTransform) == 0x000070, "Wrong size on ControlRigComponent_GetInitialBoneTransform");
static_assert(offsetof(ControlRigComponent_GetInitialBoneTransform, BoneName) == 0x000000, "Member 'ControlRigComponent_GetInitialBoneTransform::BoneName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetInitialBoneTransform, Space) == 0x000004, "Member 'ControlRigComponent_GetInitialBoneTransform::Space' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetInitialBoneTransform, ReturnValue) == 0x000010, "Member 'ControlRigComponent_GetInitialBoneTransform::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigComponent.GetInitialSpaceTransform
// 0x0070 (0x0070 - 0x0000)
struct ControlRigComponent_GetInitialSpaceTransform final
{
public:
	class FName                                   SpaceName;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControlRigComponentSpace                     Space;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0xB];                                        // 0x0005(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_GetInitialSpaceTransform) == 0x000010, "Wrong alignment on ControlRigComponent_GetInitialSpaceTransform");
static_assert(sizeof(ControlRigComponent_GetInitialSpaceTransform) == 0x000070, "Wrong size on ControlRigComponent_GetInitialSpaceTransform");
static_assert(offsetof(ControlRigComponent_GetInitialSpaceTransform, SpaceName) == 0x000000, "Member 'ControlRigComponent_GetInitialSpaceTransform::SpaceName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetInitialSpaceTransform, Space) == 0x000004, "Member 'ControlRigComponent_GetInitialSpaceTransform::Space' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetInitialSpaceTransform, ReturnValue) == 0x000010, "Member 'ControlRigComponent_GetInitialSpaceTransform::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigComponent.GetSpaceTransform
// 0x0070 (0x0070 - 0x0000)
struct ControlRigComponent_GetSpaceTransform final
{
public:
	class FName                                   SpaceName;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControlRigComponentSpace                     Space;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0xB];                                        // 0x0005(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_GetSpaceTransform) == 0x000010, "Wrong alignment on ControlRigComponent_GetSpaceTransform");
static_assert(sizeof(ControlRigComponent_GetSpaceTransform) == 0x000070, "Wrong size on ControlRigComponent_GetSpaceTransform");
static_assert(offsetof(ControlRigComponent_GetSpaceTransform, SpaceName) == 0x000000, "Member 'ControlRigComponent_GetSpaceTransform::SpaceName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetSpaceTransform, Space) == 0x000004, "Member 'ControlRigComponent_GetSpaceTransform::Space' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_GetSpaceTransform, ReturnValue) == 0x000010, "Member 'ControlRigComponent_GetSpaceTransform::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigComponent.OnPostForwardsSolve
// 0x0008 (0x0008 - 0x0000)
struct ControlRigComponent_OnPostForwardsSolve final
{
public:
	class UControlRigComponent*                   Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_OnPostForwardsSolve) == 0x000008, "Wrong alignment on ControlRigComponent_OnPostForwardsSolve");
static_assert(sizeof(ControlRigComponent_OnPostForwardsSolve) == 0x000008, "Wrong size on ControlRigComponent_OnPostForwardsSolve");
static_assert(offsetof(ControlRigComponent_OnPostForwardsSolve, Component) == 0x000000, "Member 'ControlRigComponent_OnPostForwardsSolve::Component' has a wrong offset!");

// Function ControlRig.ControlRigComponent.OnPostInitialize
// 0x0008 (0x0008 - 0x0000)
struct ControlRigComponent_OnPostInitialize final
{
public:
	class UControlRigComponent*                   Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_OnPostInitialize) == 0x000008, "Wrong alignment on ControlRigComponent_OnPostInitialize");
static_assert(sizeof(ControlRigComponent_OnPostInitialize) == 0x000008, "Wrong size on ControlRigComponent_OnPostInitialize");
static_assert(offsetof(ControlRigComponent_OnPostInitialize, Component) == 0x000000, "Member 'ControlRigComponent_OnPostInitialize::Component' has a wrong offset!");

// Function ControlRig.ControlRigComponent.OnPostSetup
// 0x0008 (0x0008 - 0x0000)
struct ControlRigComponent_OnPostSetup final
{
public:
	class UControlRigComponent*                   Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_OnPostSetup) == 0x000008, "Wrong alignment on ControlRigComponent_OnPostSetup");
static_assert(sizeof(ControlRigComponent_OnPostSetup) == 0x000008, "Wrong size on ControlRigComponent_OnPostSetup");
static_assert(offsetof(ControlRigComponent_OnPostSetup, Component) == 0x000000, "Member 'ControlRigComponent_OnPostSetup::Component' has a wrong offset!");

// Function ControlRig.ControlRigComponent.OnPreForwardsSolve
// 0x0008 (0x0008 - 0x0000)
struct ControlRigComponent_OnPreForwardsSolve final
{
public:
	class UControlRigComponent*                   Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_OnPreForwardsSolve) == 0x000008, "Wrong alignment on ControlRigComponent_OnPreForwardsSolve");
static_assert(sizeof(ControlRigComponent_OnPreForwardsSolve) == 0x000008, "Wrong size on ControlRigComponent_OnPreForwardsSolve");
static_assert(offsetof(ControlRigComponent_OnPreForwardsSolve, Component) == 0x000000, "Member 'ControlRigComponent_OnPreForwardsSolve::Component' has a wrong offset!");

// Function ControlRig.ControlRigComponent.OnPreInitialize
// 0x0008 (0x0008 - 0x0000)
struct ControlRigComponent_OnPreInitialize final
{
public:
	class UControlRigComponent*                   Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_OnPreInitialize) == 0x000008, "Wrong alignment on ControlRigComponent_OnPreInitialize");
static_assert(sizeof(ControlRigComponent_OnPreInitialize) == 0x000008, "Wrong size on ControlRigComponent_OnPreInitialize");
static_assert(offsetof(ControlRigComponent_OnPreInitialize, Component) == 0x000000, "Member 'ControlRigComponent_OnPreInitialize::Component' has a wrong offset!");

// Function ControlRig.ControlRigComponent.OnPreSetup
// 0x0008 (0x0008 - 0x0000)
struct ControlRigComponent_OnPreSetup final
{
public:
	class UControlRigComponent*                   Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_OnPreSetup) == 0x000008, "Wrong alignment on ControlRigComponent_OnPreSetup");
static_assert(sizeof(ControlRigComponent_OnPreSetup) == 0x000008, "Wrong size on ControlRigComponent_OnPreSetup");
static_assert(offsetof(ControlRigComponent_OnPreSetup, Component) == 0x000000, "Member 'ControlRigComponent_OnPreSetup::Component' has a wrong offset!");

// Function ControlRig.ControlRigComponent.SetBoneInitialTransformsFromSkeletalMesh
// 0x0008 (0x0008 - 0x0000)
struct ControlRigComponent_SetBoneInitialTransformsFromSkeletalMesh final
{
public:
	class USkeletalMesh*                          InSkeletalMesh;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_SetBoneInitialTransformsFromSkeletalMesh) == 0x000008, "Wrong alignment on ControlRigComponent_SetBoneInitialTransformsFromSkeletalMesh");
static_assert(sizeof(ControlRigComponent_SetBoneInitialTransformsFromSkeletalMesh) == 0x000008, "Wrong size on ControlRigComponent_SetBoneInitialTransformsFromSkeletalMesh");
static_assert(offsetof(ControlRigComponent_SetBoneInitialTransformsFromSkeletalMesh, InSkeletalMesh) == 0x000000, "Member 'ControlRigComponent_SetBoneInitialTransformsFromSkeletalMesh::InSkeletalMesh' has a wrong offset!");

// Function ControlRig.ControlRigComponent.SetBoneTransform
// 0x0080 (0x0080 - 0x0000)
struct ControlRigComponent_SetBoneTransform final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EControlRigComponentSpace                     Space;                                             // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Weight;                                            // 0x0074(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x0078(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControlRigComponent_SetBoneTransform) == 0x000010, "Wrong alignment on ControlRigComponent_SetBoneTransform");
static_assert(sizeof(ControlRigComponent_SetBoneTransform) == 0x000080, "Wrong size on ControlRigComponent_SetBoneTransform");
static_assert(offsetof(ControlRigComponent_SetBoneTransform, BoneName) == 0x000000, "Member 'ControlRigComponent_SetBoneTransform::BoneName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetBoneTransform, Transform) == 0x000010, "Member 'ControlRigComponent_SetBoneTransform::Transform' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetBoneTransform, Space) == 0x000070, "Member 'ControlRigComponent_SetBoneTransform::Space' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetBoneTransform, Weight) == 0x000074, "Member 'ControlRigComponent_SetBoneTransform::Weight' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetBoneTransform, bPropagateToChildren) == 0x000078, "Member 'ControlRigComponent_SetBoneTransform::bPropagateToChildren' has a wrong offset!");

// Function ControlRig.ControlRigComponent.SetControlBool
// 0x0008 (0x0008 - 0x0000)
struct ControlRigComponent_SetControlBool final
{
public:
	class FName                                   ControlName;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControlRigComponent_SetControlBool) == 0x000004, "Wrong alignment on ControlRigComponent_SetControlBool");
static_assert(sizeof(ControlRigComponent_SetControlBool) == 0x000008, "Wrong size on ControlRigComponent_SetControlBool");
static_assert(offsetof(ControlRigComponent_SetControlBool, ControlName) == 0x000000, "Member 'ControlRigComponent_SetControlBool::ControlName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetControlBool, Value) == 0x000004, "Member 'ControlRigComponent_SetControlBool::Value' has a wrong offset!");

// Function ControlRig.ControlRigComponent.SetControlFloat
// 0x0008 (0x0008 - 0x0000)
struct ControlRigComponent_SetControlFloat final
{
public:
	class FName                                   ControlName;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_SetControlFloat) == 0x000004, "Wrong alignment on ControlRigComponent_SetControlFloat");
static_assert(sizeof(ControlRigComponent_SetControlFloat) == 0x000008, "Wrong size on ControlRigComponent_SetControlFloat");
static_assert(offsetof(ControlRigComponent_SetControlFloat, ControlName) == 0x000000, "Member 'ControlRigComponent_SetControlFloat::ControlName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetControlFloat, Value) == 0x000004, "Member 'ControlRigComponent_SetControlFloat::Value' has a wrong offset!");

// Function ControlRig.ControlRigComponent.SetControlInt
// 0x0008 (0x0008 - 0x0000)
struct ControlRigComponent_SetControlInt final
{
public:
	class FName                                   ControlName;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_SetControlInt) == 0x000004, "Wrong alignment on ControlRigComponent_SetControlInt");
static_assert(sizeof(ControlRigComponent_SetControlInt) == 0x000008, "Wrong size on ControlRigComponent_SetControlInt");
static_assert(offsetof(ControlRigComponent_SetControlInt, ControlName) == 0x000000, "Member 'ControlRigComponent_SetControlInt::ControlName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetControlInt, Value) == 0x000004, "Member 'ControlRigComponent_SetControlInt::Value' has a wrong offset!");

// Function ControlRig.ControlRigComponent.SetControlOffset
// 0x0080 (0x0080 - 0x0000)
struct ControlRigComponent_SetControlOffset final
{
public:
	class FName                                   ControlName;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OffsetTransform;                                   // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EControlRigComponentSpace                     Space;                                             // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0xF];                                       // 0x0071(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControlRigComponent_SetControlOffset) == 0x000010, "Wrong alignment on ControlRigComponent_SetControlOffset");
static_assert(sizeof(ControlRigComponent_SetControlOffset) == 0x000080, "Wrong size on ControlRigComponent_SetControlOffset");
static_assert(offsetof(ControlRigComponent_SetControlOffset, ControlName) == 0x000000, "Member 'ControlRigComponent_SetControlOffset::ControlName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetControlOffset, OffsetTransform) == 0x000010, "Member 'ControlRigComponent_SetControlOffset::OffsetTransform' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetControlOffset, Space) == 0x000070, "Member 'ControlRigComponent_SetControlOffset::Space' has a wrong offset!");

// Function ControlRig.ControlRigComponent.SetControlPosition
// 0x0028 (0x0028 - 0x0000)
struct ControlRigComponent_SetControlPosition final
{
public:
	class FName                                   ControlName;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Value;                                             // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControlRigComponentSpace                     Space;                                             // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControlRigComponent_SetControlPosition) == 0x000008, "Wrong alignment on ControlRigComponent_SetControlPosition");
static_assert(sizeof(ControlRigComponent_SetControlPosition) == 0x000028, "Wrong size on ControlRigComponent_SetControlPosition");
static_assert(offsetof(ControlRigComponent_SetControlPosition, ControlName) == 0x000000, "Member 'ControlRigComponent_SetControlPosition::ControlName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetControlPosition, Value) == 0x000008, "Member 'ControlRigComponent_SetControlPosition::Value' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetControlPosition, Space) == 0x000020, "Member 'ControlRigComponent_SetControlPosition::Space' has a wrong offset!");

// Function ControlRig.ControlRigComponent.SetControlRotator
// 0x0028 (0x0028 - 0x0000)
struct ControlRigComponent_SetControlRotator final
{
public:
	class FName                                   ControlName;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Value;                                             // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EControlRigComponentSpace                     Space;                                             // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControlRigComponent_SetControlRotator) == 0x000008, "Wrong alignment on ControlRigComponent_SetControlRotator");
static_assert(sizeof(ControlRigComponent_SetControlRotator) == 0x000028, "Wrong size on ControlRigComponent_SetControlRotator");
static_assert(offsetof(ControlRigComponent_SetControlRotator, ControlName) == 0x000000, "Member 'ControlRigComponent_SetControlRotator::ControlName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetControlRotator, Value) == 0x000008, "Member 'ControlRigComponent_SetControlRotator::Value' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetControlRotator, Space) == 0x000020, "Member 'ControlRigComponent_SetControlRotator::Space' has a wrong offset!");

// Function ControlRig.ControlRigComponent.SetControlScale
// 0x0028 (0x0028 - 0x0000)
struct ControlRigComponent_SetControlScale final
{
public:
	class FName                                   ControlName;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Value;                                             // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControlRigComponentSpace                     Space;                                             // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControlRigComponent_SetControlScale) == 0x000008, "Wrong alignment on ControlRigComponent_SetControlScale");
static_assert(sizeof(ControlRigComponent_SetControlScale) == 0x000028, "Wrong size on ControlRigComponent_SetControlScale");
static_assert(offsetof(ControlRigComponent_SetControlScale, ControlName) == 0x000000, "Member 'ControlRigComponent_SetControlScale::ControlName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetControlScale, Value) == 0x000008, "Member 'ControlRigComponent_SetControlScale::Value' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetControlScale, Space) == 0x000020, "Member 'ControlRigComponent_SetControlScale::Space' has a wrong offset!");

// Function ControlRig.ControlRigComponent.SetControlTransform
// 0x0080 (0x0080 - 0x0000)
struct ControlRigComponent_SetControlTransform final
{
public:
	class FName                                   ControlName;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Value;                                             // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EControlRigComponentSpace                     Space;                                             // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0xF];                                       // 0x0071(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControlRigComponent_SetControlTransform) == 0x000010, "Wrong alignment on ControlRigComponent_SetControlTransform");
static_assert(sizeof(ControlRigComponent_SetControlTransform) == 0x000080, "Wrong size on ControlRigComponent_SetControlTransform");
static_assert(offsetof(ControlRigComponent_SetControlTransform, ControlName) == 0x000000, "Member 'ControlRigComponent_SetControlTransform::ControlName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetControlTransform, Value) == 0x000010, "Member 'ControlRigComponent_SetControlTransform::Value' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetControlTransform, Space) == 0x000070, "Member 'ControlRigComponent_SetControlTransform::Space' has a wrong offset!");

// Function ControlRig.ControlRigComponent.SetControlVector2D
// 0x0018 (0x0018 - 0x0000)
struct ControlRigComponent_SetControlVector2D final
{
public:
	class FName                                   ControlName;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Value;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_SetControlVector2D) == 0x000008, "Wrong alignment on ControlRigComponent_SetControlVector2D");
static_assert(sizeof(ControlRigComponent_SetControlVector2D) == 0x000018, "Wrong size on ControlRigComponent_SetControlVector2D");
static_assert(offsetof(ControlRigComponent_SetControlVector2D, ControlName) == 0x000000, "Member 'ControlRigComponent_SetControlVector2D::ControlName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetControlVector2D, Value) == 0x000008, "Member 'ControlRigComponent_SetControlVector2D::Value' has a wrong offset!");

// Function ControlRig.ControlRigComponent.SetInitialBoneTransform
// 0x0080 (0x0080 - 0x0000)
struct ControlRigComponent_SetInitialBoneTransform final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InitialTransform;                                  // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EControlRigComponentSpace                     Space;                                             // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x0071(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0xE];                                       // 0x0072(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControlRigComponent_SetInitialBoneTransform) == 0x000010, "Wrong alignment on ControlRigComponent_SetInitialBoneTransform");
static_assert(sizeof(ControlRigComponent_SetInitialBoneTransform) == 0x000080, "Wrong size on ControlRigComponent_SetInitialBoneTransform");
static_assert(offsetof(ControlRigComponent_SetInitialBoneTransform, BoneName) == 0x000000, "Member 'ControlRigComponent_SetInitialBoneTransform::BoneName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetInitialBoneTransform, InitialTransform) == 0x000010, "Member 'ControlRigComponent_SetInitialBoneTransform::InitialTransform' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetInitialBoneTransform, Space) == 0x000070, "Member 'ControlRigComponent_SetInitialBoneTransform::Space' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetInitialBoneTransform, bPropagateToChildren) == 0x000071, "Member 'ControlRigComponent_SetInitialBoneTransform::bPropagateToChildren' has a wrong offset!");

// Function ControlRig.ControlRigComponent.SetInitialSpaceTransform
// 0x0080 (0x0080 - 0x0000)
struct ControlRigComponent_SetInitialSpaceTransform final
{
public:
	class FName                                   SpaceName;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InitialTransform;                                  // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EControlRigComponentSpace                     Space;                                             // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0xF];                                       // 0x0071(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControlRigComponent_SetInitialSpaceTransform) == 0x000010, "Wrong alignment on ControlRigComponent_SetInitialSpaceTransform");
static_assert(sizeof(ControlRigComponent_SetInitialSpaceTransform) == 0x000080, "Wrong size on ControlRigComponent_SetInitialSpaceTransform");
static_assert(offsetof(ControlRigComponent_SetInitialSpaceTransform, SpaceName) == 0x000000, "Member 'ControlRigComponent_SetInitialSpaceTransform::SpaceName' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetInitialSpaceTransform, InitialTransform) == 0x000010, "Member 'ControlRigComponent_SetInitialSpaceTransform::InitialTransform' has a wrong offset!");
static_assert(offsetof(ControlRigComponent_SetInitialSpaceTransform, Space) == 0x000070, "Member 'ControlRigComponent_SetInitialSpaceTransform::Space' has a wrong offset!");

// Function ControlRig.ControlRigComponent.SetMappedElements
// 0x0010 (0x0010 - 0x0000)
struct ControlRigComponent_SetMappedElements final
{
public:
	TArray<struct FControlRigComponentMappedElement> NewMappedElements;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_SetMappedElements) == 0x000008, "Wrong alignment on ControlRigComponent_SetMappedElements");
static_assert(sizeof(ControlRigComponent_SetMappedElements) == 0x000010, "Wrong size on ControlRigComponent_SetMappedElements");
static_assert(offsetof(ControlRigComponent_SetMappedElements, NewMappedElements) == 0x000000, "Member 'ControlRigComponent_SetMappedElements::NewMappedElements' has a wrong offset!");

// Function ControlRig.ControlRigComponent.Update
// 0x0004 (0x0004 - 0x0000)
struct ControlRigComponent_Update final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_Update) == 0x000004, "Wrong alignment on ControlRigComponent_Update");
static_assert(sizeof(ControlRigComponent_Update) == 0x000004, "Wrong size on ControlRigComponent_Update");
static_assert(offsetof(ControlRigComponent_Update, DeltaTime) == 0x000000, "Member 'ControlRigComponent_Update::DeltaTime' has a wrong offset!");

// Function ControlRig.ControlRigComponent.GetAbsoluteTime
// 0x0004 (0x0004 - 0x0000)
struct ControlRigComponent_GetAbsoluteTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_GetAbsoluteTime) == 0x000004, "Wrong alignment on ControlRigComponent_GetAbsoluteTime");
static_assert(sizeof(ControlRigComponent_GetAbsoluteTime) == 0x000004, "Wrong size on ControlRigComponent_GetAbsoluteTime");
static_assert(offsetof(ControlRigComponent_GetAbsoluteTime, ReturnValue) == 0x000000, "Member 'ControlRigComponent_GetAbsoluteTime::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigPoseAsset.GetCurrentPose
// 0x0068 (0x0068 - 0x0000)
struct ControlRigPoseAsset_GetCurrentPose final
{
public:
	class UControlRig*                            InControlRig;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FControlRigControlPose                 OutPose;                                           // 0x0008(0x0060)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigPoseAsset_GetCurrentPose) == 0x000008, "Wrong alignment on ControlRigPoseAsset_GetCurrentPose");
static_assert(sizeof(ControlRigPoseAsset_GetCurrentPose) == 0x000068, "Wrong size on ControlRigPoseAsset_GetCurrentPose");
static_assert(offsetof(ControlRigPoseAsset_GetCurrentPose, InControlRig) == 0x000000, "Member 'ControlRigPoseAsset_GetCurrentPose::InControlRig' has a wrong offset!");
static_assert(offsetof(ControlRigPoseAsset_GetCurrentPose, OutPose) == 0x000008, "Member 'ControlRigPoseAsset_GetCurrentPose::OutPose' has a wrong offset!");

// Function ControlRig.ControlRigPoseAsset.PastePose
// 0x0010 (0x0010 - 0x0000)
struct ControlRigPoseAsset_PastePose final
{
public:
	class UControlRig*                            InControlRig;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoKey;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoMirror;                                         // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControlRigPoseAsset_PastePose) == 0x000008, "Wrong alignment on ControlRigPoseAsset_PastePose");
static_assert(sizeof(ControlRigPoseAsset_PastePose) == 0x000010, "Wrong size on ControlRigPoseAsset_PastePose");
static_assert(offsetof(ControlRigPoseAsset_PastePose, InControlRig) == 0x000000, "Member 'ControlRigPoseAsset_PastePose::InControlRig' has a wrong offset!");
static_assert(offsetof(ControlRigPoseAsset_PastePose, bDoKey) == 0x000008, "Member 'ControlRigPoseAsset_PastePose::bDoKey' has a wrong offset!");
static_assert(offsetof(ControlRigPoseAsset_PastePose, bDoMirror) == 0x000009, "Member 'ControlRigPoseAsset_PastePose::bDoMirror' has a wrong offset!");

// Function ControlRig.ControlRigPoseAsset.ReplaceControlName
// 0x0008 (0x0008 - 0x0000)
struct ControlRigPoseAsset_ReplaceControlName final
{
public:
	class FName                                   CurrentName;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NewName;                                           // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigPoseAsset_ReplaceControlName) == 0x000004, "Wrong alignment on ControlRigPoseAsset_ReplaceControlName");
static_assert(sizeof(ControlRigPoseAsset_ReplaceControlName) == 0x000008, "Wrong size on ControlRigPoseAsset_ReplaceControlName");
static_assert(offsetof(ControlRigPoseAsset_ReplaceControlName, CurrentName) == 0x000000, "Member 'ControlRigPoseAsset_ReplaceControlName::CurrentName' has a wrong offset!");
static_assert(offsetof(ControlRigPoseAsset_ReplaceControlName, NewName) == 0x000004, "Member 'ControlRigPoseAsset_ReplaceControlName::NewName' has a wrong offset!");

// Function ControlRig.ControlRigPoseAsset.SavePose
// 0x0010 (0x0010 - 0x0000)
struct ControlRigPoseAsset_SavePose final
{
public:
	class UControlRig*                            InControlRig;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAll;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControlRigPoseAsset_SavePose) == 0x000008, "Wrong alignment on ControlRigPoseAsset_SavePose");
static_assert(sizeof(ControlRigPoseAsset_SavePose) == 0x000010, "Wrong size on ControlRigPoseAsset_SavePose");
static_assert(offsetof(ControlRigPoseAsset_SavePose, InControlRig) == 0x000000, "Member 'ControlRigPoseAsset_SavePose::InControlRig' has a wrong offset!");
static_assert(offsetof(ControlRigPoseAsset_SavePose, bUseAll) == 0x000008, "Member 'ControlRigPoseAsset_SavePose::bUseAll' has a wrong offset!");

// Function ControlRig.ControlRigPoseAsset.SelectControls
// 0x0010 (0x0010 - 0x0000)
struct ControlRigPoseAsset_SelectControls final
{
public:
	class UControlRig*                            InControlRig;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoMirror;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControlRigPoseAsset_SelectControls) == 0x000008, "Wrong alignment on ControlRigPoseAsset_SelectControls");
static_assert(sizeof(ControlRigPoseAsset_SelectControls) == 0x000010, "Wrong size on ControlRigPoseAsset_SelectControls");
static_assert(offsetof(ControlRigPoseAsset_SelectControls, InControlRig) == 0x000000, "Member 'ControlRigPoseAsset_SelectControls::InControlRig' has a wrong offset!");
static_assert(offsetof(ControlRigPoseAsset_SelectControls, bDoMirror) == 0x000008, "Member 'ControlRigPoseAsset_SelectControls::bDoMirror' has a wrong offset!");

// Function ControlRig.ControlRigPoseAsset.DoesMirrorMatch
// 0x0010 (0x0010 - 0x0000)
struct ControlRigPoseAsset_DoesMirrorMatch final
{
public:
	class UControlRig*                            ControlRig;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ControlName;                                       // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControlRigPoseAsset_DoesMirrorMatch) == 0x000008, "Wrong alignment on ControlRigPoseAsset_DoesMirrorMatch");
static_assert(sizeof(ControlRigPoseAsset_DoesMirrorMatch) == 0x000010, "Wrong size on ControlRigPoseAsset_DoesMirrorMatch");
static_assert(offsetof(ControlRigPoseAsset_DoesMirrorMatch, ControlRig) == 0x000000, "Member 'ControlRigPoseAsset_DoesMirrorMatch::ControlRig' has a wrong offset!");
static_assert(offsetof(ControlRigPoseAsset_DoesMirrorMatch, ControlName) == 0x000008, "Member 'ControlRigPoseAsset_DoesMirrorMatch::ControlName' has a wrong offset!");
static_assert(offsetof(ControlRigPoseAsset_DoesMirrorMatch, ReturnValue) == 0x00000C, "Member 'ControlRigPoseAsset_DoesMirrorMatch::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigPoseAsset.GetControlNames
// 0x0010 (0x0010 - 0x0000)
struct ControlRigPoseAsset_GetControlNames final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigPoseAsset_GetControlNames) == 0x000008, "Wrong alignment on ControlRigPoseAsset_GetControlNames");
static_assert(sizeof(ControlRigPoseAsset_GetControlNames) == 0x000010, "Wrong size on ControlRigPoseAsset_GetControlNames");
static_assert(offsetof(ControlRigPoseAsset_GetControlNames, ReturnValue) == 0x000000, "Member 'ControlRigPoseAsset_GetControlNames::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetEulerTransformFromControlValue
// 0x0140 (0x0140 - 0x0000)
struct RigHierarchy_GetEulerTransformFromControlValue final
{
public:
	struct FRigControlValue                       InValue;                                           // 0x0000(0x00F0)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FEulerTransform                        ReturnValue;                                       // 0x00F0(0x0048)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_138[0x8];                                      // 0x0138(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchy_GetEulerTransformFromControlValue) == 0x000010, "Wrong alignment on RigHierarchy_GetEulerTransformFromControlValue");
static_assert(sizeof(RigHierarchy_GetEulerTransformFromControlValue) == 0x000140, "Wrong size on RigHierarchy_GetEulerTransformFromControlValue");
static_assert(offsetof(RigHierarchy_GetEulerTransformFromControlValue, InValue) == 0x000000, "Member 'RigHierarchy_GetEulerTransformFromControlValue::InValue' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetEulerTransformFromControlValue, ReturnValue) == 0x0000F0, "Member 'RigHierarchy_GetEulerTransformFromControlValue::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetFloatFromControlValue
// 0x0100 (0x0100 - 0x0000)
struct RigHierarchy_GetFloatFromControlValue final
{
public:
	struct FRigControlValue                       InValue;                                           // 0x0000(0x00F0)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x00F0(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0xC];                                       // 0x00F4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchy_GetFloatFromControlValue) == 0x000010, "Wrong alignment on RigHierarchy_GetFloatFromControlValue");
static_assert(sizeof(RigHierarchy_GetFloatFromControlValue) == 0x000100, "Wrong size on RigHierarchy_GetFloatFromControlValue");
static_assert(offsetof(RigHierarchy_GetFloatFromControlValue, InValue) == 0x000000, "Member 'RigHierarchy_GetFloatFromControlValue::InValue' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetFloatFromControlValue, ReturnValue) == 0x0000F0, "Member 'RigHierarchy_GetFloatFromControlValue::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetIntFromControlValue
// 0x0100 (0x0100 - 0x0000)
struct RigHierarchy_GetIntFromControlValue final
{
public:
	struct FRigControlValue                       InValue;                                           // 0x0000(0x00F0)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x00F0(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0xC];                                       // 0x00F4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchy_GetIntFromControlValue) == 0x000010, "Wrong alignment on RigHierarchy_GetIntFromControlValue");
static_assert(sizeof(RigHierarchy_GetIntFromControlValue) == 0x000100, "Wrong size on RigHierarchy_GetIntFromControlValue");
static_assert(offsetof(RigHierarchy_GetIntFromControlValue, InValue) == 0x000000, "Member 'RigHierarchy_GetIntFromControlValue::InValue' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetIntFromControlValue, ReturnValue) == 0x0000F0, "Member 'RigHierarchy_GetIntFromControlValue::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetRotatorFromControlValue
// 0x0110 (0x0110 - 0x0000)
struct RigHierarchy_GetRotatorFromControlValue final
{
public:
	struct FRigControlValue                       InValue;                                           // 0x0000(0x00F0)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x00F0(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_108[0x8];                                      // 0x0108(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchy_GetRotatorFromControlValue) == 0x000010, "Wrong alignment on RigHierarchy_GetRotatorFromControlValue");
static_assert(sizeof(RigHierarchy_GetRotatorFromControlValue) == 0x000110, "Wrong size on RigHierarchy_GetRotatorFromControlValue");
static_assert(offsetof(RigHierarchy_GetRotatorFromControlValue, InValue) == 0x000000, "Member 'RigHierarchy_GetRotatorFromControlValue::InValue' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetRotatorFromControlValue, ReturnValue) == 0x0000F0, "Member 'RigHierarchy_GetRotatorFromControlValue::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetTransformFromControlValue
// 0x0150 (0x0150 - 0x0000)
struct RigHierarchy_GetTransformFromControlValue final
{
public:
	struct FRigControlValue                       InValue;                                           // 0x0000(0x00F0)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x00F0(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_GetTransformFromControlValue) == 0x000010, "Wrong alignment on RigHierarchy_GetTransformFromControlValue");
static_assert(sizeof(RigHierarchy_GetTransformFromControlValue) == 0x000150, "Wrong size on RigHierarchy_GetTransformFromControlValue");
static_assert(offsetof(RigHierarchy_GetTransformFromControlValue, InValue) == 0x000000, "Member 'RigHierarchy_GetTransformFromControlValue::InValue' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetTransformFromControlValue, ReturnValue) == 0x0000F0, "Member 'RigHierarchy_GetTransformFromControlValue::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetTransformNoScaleFromControlValue
// 0x0130 (0x0130 - 0x0000)
struct RigHierarchy_GetTransformNoScaleFromControlValue final
{
public:
	struct FRigControlValue                       InValue;                                           // 0x0000(0x00F0)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransformNoScale                      ReturnValue;                                       // 0x00F0(0x0040)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_GetTransformNoScaleFromControlValue) == 0x000010, "Wrong alignment on RigHierarchy_GetTransformNoScaleFromControlValue");
static_assert(sizeof(RigHierarchy_GetTransformNoScaleFromControlValue) == 0x000130, "Wrong size on RigHierarchy_GetTransformNoScaleFromControlValue");
static_assert(offsetof(RigHierarchy_GetTransformNoScaleFromControlValue, InValue) == 0x000000, "Member 'RigHierarchy_GetTransformNoScaleFromControlValue::InValue' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetTransformNoScaleFromControlValue, ReturnValue) == 0x0000F0, "Member 'RigHierarchy_GetTransformNoScaleFromControlValue::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetVector2DFromControlValue
// 0x0100 (0x0100 - 0x0000)
struct RigHierarchy_GetVector2DFromControlValue final
{
public:
	struct FRigControlValue                       InValue;                                           // 0x0000(0x00F0)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x00F0(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_GetVector2DFromControlValue) == 0x000010, "Wrong alignment on RigHierarchy_GetVector2DFromControlValue");
static_assert(sizeof(RigHierarchy_GetVector2DFromControlValue) == 0x000100, "Wrong size on RigHierarchy_GetVector2DFromControlValue");
static_assert(offsetof(RigHierarchy_GetVector2DFromControlValue, InValue) == 0x000000, "Member 'RigHierarchy_GetVector2DFromControlValue::InValue' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetVector2DFromControlValue, ReturnValue) == 0x0000F0, "Member 'RigHierarchy_GetVector2DFromControlValue::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetVectorFromControlValue
// 0x0110 (0x0110 - 0x0000)
struct RigHierarchy_GetVectorFromControlValue final
{
public:
	struct FRigControlValue                       InValue;                                           // 0x0000(0x00F0)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x00F0(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_108[0x8];                                      // 0x0108(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchy_GetVectorFromControlValue) == 0x000010, "Wrong alignment on RigHierarchy_GetVectorFromControlValue");
static_assert(sizeof(RigHierarchy_GetVectorFromControlValue) == 0x000110, "Wrong size on RigHierarchy_GetVectorFromControlValue");
static_assert(offsetof(RigHierarchy_GetVectorFromControlValue, InValue) == 0x000000, "Member 'RigHierarchy_GetVectorFromControlValue::InValue' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetVectorFromControlValue, ReturnValue) == 0x0000F0, "Member 'RigHierarchy_GetVectorFromControlValue::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.MakeControlValueFromBool
// 0x0100 (0x0100 - 0x0000)
struct RigHierarchy_MakeControlValueFromBool final
{
public:
	bool                                          InValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigControlValue                       ReturnValue;                                       // 0x0010(0x00F0)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_MakeControlValueFromBool) == 0x000010, "Wrong alignment on RigHierarchy_MakeControlValueFromBool");
static_assert(sizeof(RigHierarchy_MakeControlValueFromBool) == 0x000100, "Wrong size on RigHierarchy_MakeControlValueFromBool");
static_assert(offsetof(RigHierarchy_MakeControlValueFromBool, InValue) == 0x000000, "Member 'RigHierarchy_MakeControlValueFromBool::InValue' has a wrong offset!");
static_assert(offsetof(RigHierarchy_MakeControlValueFromBool, ReturnValue) == 0x000010, "Member 'RigHierarchy_MakeControlValueFromBool::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.MakeControlValueFromEulerTransform
// 0x0140 (0x0140 - 0x0000)
struct RigHierarchy_MakeControlValueFromEulerTransform final
{
public:
	struct FEulerTransform                        InValue;                                           // 0x0000(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigControlValue                       ReturnValue;                                       // 0x0050(0x00F0)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_MakeControlValueFromEulerTransform) == 0x000010, "Wrong alignment on RigHierarchy_MakeControlValueFromEulerTransform");
static_assert(sizeof(RigHierarchy_MakeControlValueFromEulerTransform) == 0x000140, "Wrong size on RigHierarchy_MakeControlValueFromEulerTransform");
static_assert(offsetof(RigHierarchy_MakeControlValueFromEulerTransform, InValue) == 0x000000, "Member 'RigHierarchy_MakeControlValueFromEulerTransform::InValue' has a wrong offset!");
static_assert(offsetof(RigHierarchy_MakeControlValueFromEulerTransform, ReturnValue) == 0x000050, "Member 'RigHierarchy_MakeControlValueFromEulerTransform::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.MakeControlValueFromFloat
// 0x0100 (0x0100 - 0x0000)
struct RigHierarchy_MakeControlValueFromFloat final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigControlValue                       ReturnValue;                                       // 0x0010(0x00F0)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_MakeControlValueFromFloat) == 0x000010, "Wrong alignment on RigHierarchy_MakeControlValueFromFloat");
static_assert(sizeof(RigHierarchy_MakeControlValueFromFloat) == 0x000100, "Wrong size on RigHierarchy_MakeControlValueFromFloat");
static_assert(offsetof(RigHierarchy_MakeControlValueFromFloat, InValue) == 0x000000, "Member 'RigHierarchy_MakeControlValueFromFloat::InValue' has a wrong offset!");
static_assert(offsetof(RigHierarchy_MakeControlValueFromFloat, ReturnValue) == 0x000010, "Member 'RigHierarchy_MakeControlValueFromFloat::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.MakeControlValueFromInt
// 0x0100 (0x0100 - 0x0000)
struct RigHierarchy_MakeControlValueFromInt final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigControlValue                       ReturnValue;                                       // 0x0010(0x00F0)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_MakeControlValueFromInt) == 0x000010, "Wrong alignment on RigHierarchy_MakeControlValueFromInt");
static_assert(sizeof(RigHierarchy_MakeControlValueFromInt) == 0x000100, "Wrong size on RigHierarchy_MakeControlValueFromInt");
static_assert(offsetof(RigHierarchy_MakeControlValueFromInt, InValue) == 0x000000, "Member 'RigHierarchy_MakeControlValueFromInt::InValue' has a wrong offset!");
static_assert(offsetof(RigHierarchy_MakeControlValueFromInt, ReturnValue) == 0x000010, "Member 'RigHierarchy_MakeControlValueFromInt::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.MakeControlValueFromRotator
// 0x0110 (0x0110 - 0x0000)
struct RigHierarchy_MakeControlValueFromRotator final
{
public:
	struct FRotator                               InValue;                                           // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigControlValue                       ReturnValue;                                       // 0x0020(0x00F0)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_MakeControlValueFromRotator) == 0x000010, "Wrong alignment on RigHierarchy_MakeControlValueFromRotator");
static_assert(sizeof(RigHierarchy_MakeControlValueFromRotator) == 0x000110, "Wrong size on RigHierarchy_MakeControlValueFromRotator");
static_assert(offsetof(RigHierarchy_MakeControlValueFromRotator, InValue) == 0x000000, "Member 'RigHierarchy_MakeControlValueFromRotator::InValue' has a wrong offset!");
static_assert(offsetof(RigHierarchy_MakeControlValueFromRotator, ReturnValue) == 0x000020, "Member 'RigHierarchy_MakeControlValueFromRotator::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.MakeControlValueFromTransform
// 0x0150 (0x0150 - 0x0000)
struct RigHierarchy_MakeControlValueFromTransform final
{
public:
	struct FTransform                             InValue;                                           // 0x0000(0x0060)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigControlValue                       ReturnValue;                                       // 0x0060(0x00F0)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_MakeControlValueFromTransform) == 0x000010, "Wrong alignment on RigHierarchy_MakeControlValueFromTransform");
static_assert(sizeof(RigHierarchy_MakeControlValueFromTransform) == 0x000150, "Wrong size on RigHierarchy_MakeControlValueFromTransform");
static_assert(offsetof(RigHierarchy_MakeControlValueFromTransform, InValue) == 0x000000, "Member 'RigHierarchy_MakeControlValueFromTransform::InValue' has a wrong offset!");
static_assert(offsetof(RigHierarchy_MakeControlValueFromTransform, ReturnValue) == 0x000060, "Member 'RigHierarchy_MakeControlValueFromTransform::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.MakeControlValueFromTransformNoScale
// 0x0130 (0x0130 - 0x0000)
struct RigHierarchy_MakeControlValueFromTransformNoScale final
{
public:
	struct FTransformNoScale                      InValue;                                           // 0x0000(0x0040)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FRigControlValue                       ReturnValue;                                       // 0x0040(0x00F0)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_MakeControlValueFromTransformNoScale) == 0x000010, "Wrong alignment on RigHierarchy_MakeControlValueFromTransformNoScale");
static_assert(sizeof(RigHierarchy_MakeControlValueFromTransformNoScale) == 0x000130, "Wrong size on RigHierarchy_MakeControlValueFromTransformNoScale");
static_assert(offsetof(RigHierarchy_MakeControlValueFromTransformNoScale, InValue) == 0x000000, "Member 'RigHierarchy_MakeControlValueFromTransformNoScale::InValue' has a wrong offset!");
static_assert(offsetof(RigHierarchy_MakeControlValueFromTransformNoScale, ReturnValue) == 0x000040, "Member 'RigHierarchy_MakeControlValueFromTransformNoScale::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.MakeControlValueFromVector
// 0x0110 (0x0110 - 0x0000)
struct RigHierarchy_MakeControlValueFromVector final
{
public:
	struct FVector                                InValue;                                           // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigControlValue                       ReturnValue;                                       // 0x0020(0x00F0)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_MakeControlValueFromVector) == 0x000010, "Wrong alignment on RigHierarchy_MakeControlValueFromVector");
static_assert(sizeof(RigHierarchy_MakeControlValueFromVector) == 0x000110, "Wrong size on RigHierarchy_MakeControlValueFromVector");
static_assert(offsetof(RigHierarchy_MakeControlValueFromVector, InValue) == 0x000000, "Member 'RigHierarchy_MakeControlValueFromVector::InValue' has a wrong offset!");
static_assert(offsetof(RigHierarchy_MakeControlValueFromVector, ReturnValue) == 0x000020, "Member 'RigHierarchy_MakeControlValueFromVector::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.MakeControlValueFromVector2D
// 0x0100 (0x0100 - 0x0000)
struct RigHierarchy_MakeControlValueFromVector2D final
{
public:
	struct FVector2D                              InValue;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigControlValue                       ReturnValue;                                       // 0x0010(0x00F0)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_MakeControlValueFromVector2D) == 0x000010, "Wrong alignment on RigHierarchy_MakeControlValueFromVector2D");
static_assert(sizeof(RigHierarchy_MakeControlValueFromVector2D) == 0x000100, "Wrong size on RigHierarchy_MakeControlValueFromVector2D");
static_assert(offsetof(RigHierarchy_MakeControlValueFromVector2D, InValue) == 0x000000, "Member 'RigHierarchy_MakeControlValueFromVector2D::InValue' has a wrong offset!");
static_assert(offsetof(RigHierarchy_MakeControlValueFromVector2D, ReturnValue) == 0x000010, "Member 'RigHierarchy_MakeControlValueFromVector2D::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.CopyHierarchy
// 0x0008 (0x0008 - 0x0000)
struct RigHierarchy_CopyHierarchy final
{
public:
	class URigHierarchy*                          InHierarchy;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_CopyHierarchy) == 0x000008, "Wrong alignment on RigHierarchy_CopyHierarchy");
static_assert(sizeof(RigHierarchy_CopyHierarchy) == 0x000008, "Wrong size on RigHierarchy_CopyHierarchy");
static_assert(offsetof(RigHierarchy_CopyHierarchy, InHierarchy) == 0x000000, "Member 'RigHierarchy_CopyHierarchy::InHierarchy' has a wrong offset!");

// Function ControlRig.RigHierarchy.CopyPose
// 0x0010 (0x0010 - 0x0000)
struct RigHierarchy_CopyPose final
{
public:
	class URigHierarchy*                          InHierarchy;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCurrent;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchy_CopyPose) == 0x000008, "Wrong alignment on RigHierarchy_CopyPose");
static_assert(sizeof(RigHierarchy_CopyPose) == 0x000010, "Wrong size on RigHierarchy_CopyPose");
static_assert(offsetof(RigHierarchy_CopyPose, InHierarchy) == 0x000000, "Member 'RigHierarchy_CopyPose::InHierarchy' has a wrong offset!");
static_assert(offsetof(RigHierarchy_CopyPose, bCurrent) == 0x000008, "Member 'RigHierarchy_CopyPose::bCurrent' has a wrong offset!");
static_assert(offsetof(RigHierarchy_CopyPose, bInitial) == 0x000009, "Member 'RigHierarchy_CopyPose::bInitial' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetController
// 0x0010 (0x0010 - 0x0000)
struct RigHierarchy_GetController final
{
public:
	bool                                          bCreateIfNeeded;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URigHierarchyController*                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_GetController) == 0x000008, "Wrong alignment on RigHierarchy_GetController");
static_assert(sizeof(RigHierarchy_GetController) == 0x000010, "Wrong size on RigHierarchy_GetController");
static_assert(offsetof(RigHierarchy_GetController, bCreateIfNeeded) == 0x000000, "Member 'RigHierarchy_GetController::bCreateIfNeeded' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetController, ReturnValue) == 0x000008, "Member 'RigHierarchy_GetController::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.ResetPoseToInitial
// 0x0001 (0x0001 - 0x0000)
struct RigHierarchy_ResetPoseToInitial final
{
public:
	ERigElementType                               InTypeFilter;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_ResetPoseToInitial) == 0x000001, "Wrong alignment on RigHierarchy_ResetPoseToInitial");
static_assert(sizeof(RigHierarchy_ResetPoseToInitial) == 0x000001, "Wrong size on RigHierarchy_ResetPoseToInitial");
static_assert(offsetof(RigHierarchy_ResetPoseToInitial, InTypeFilter) == 0x000000, "Member 'RigHierarchy_ResetPoseToInitial::InTypeFilter' has a wrong offset!");

// Function ControlRig.RigHierarchy.SendAutoKeyEvent
// 0x0010 (0x0010 - 0x0000)
struct RigHierarchy_SendAutoKeyEvent final
{
public:
	struct FRigElementKey                         InElement;                                         // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InOffsetInSeconds;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAsynchronous;                                     // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchy_SendAutoKeyEvent) == 0x000004, "Wrong alignment on RigHierarchy_SendAutoKeyEvent");
static_assert(sizeof(RigHierarchy_SendAutoKeyEvent) == 0x000010, "Wrong size on RigHierarchy_SendAutoKeyEvent");
static_assert(offsetof(RigHierarchy_SendAutoKeyEvent, InElement) == 0x000000, "Member 'RigHierarchy_SendAutoKeyEvent::InElement' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SendAutoKeyEvent, InOffsetInSeconds) == 0x000008, "Member 'RigHierarchy_SendAutoKeyEvent::InOffsetInSeconds' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SendAutoKeyEvent, bAsynchronous) == 0x00000C, "Member 'RigHierarchy_SendAutoKeyEvent::bAsynchronous' has a wrong offset!");

// Function ControlRig.RigHierarchy.SetControlOffsetTransform
// 0x0080 (0x0080 - 0x0000)
struct RigHierarchy_SetControlOffsetTransform final
{
public:
	struct FRigElementKey                         InKey;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InTransform;                                       // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectChildren;                                   // 0x0071(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetupUndo;                                        // 0x0072(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrintPythonCommands;                              // 0x0073(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0xC];                                       // 0x0074(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchy_SetControlOffsetTransform) == 0x000010, "Wrong alignment on RigHierarchy_SetControlOffsetTransform");
static_assert(sizeof(RigHierarchy_SetControlOffsetTransform) == 0x000080, "Wrong size on RigHierarchy_SetControlOffsetTransform");
static_assert(offsetof(RigHierarchy_SetControlOffsetTransform, InKey) == 0x000000, "Member 'RigHierarchy_SetControlOffsetTransform::InKey' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetControlOffsetTransform, InTransform) == 0x000010, "Member 'RigHierarchy_SetControlOffsetTransform::InTransform' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetControlOffsetTransform, bInitial) == 0x000070, "Member 'RigHierarchy_SetControlOffsetTransform::bInitial' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetControlOffsetTransform, bAffectChildren) == 0x000071, "Member 'RigHierarchy_SetControlOffsetTransform::bAffectChildren' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetControlOffsetTransform, bSetupUndo) == 0x000072, "Member 'RigHierarchy_SetControlOffsetTransform::bSetupUndo' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetControlOffsetTransform, bPrintPythonCommands) == 0x000073, "Member 'RigHierarchy_SetControlOffsetTransform::bPrintPythonCommands' has a wrong offset!");

// Function ControlRig.RigHierarchy.SetControlOffsetTransformByIndex
// 0x0080 (0x0080 - 0x0000)
struct RigHierarchy_SetControlOffsetTransformByIndex final
{
public:
	int32                                         InElementIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InTransform;                                       // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectChildren;                                   // 0x0071(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetupUndo;                                        // 0x0072(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrintPythonCommands;                              // 0x0073(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0xC];                                       // 0x0074(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchy_SetControlOffsetTransformByIndex) == 0x000010, "Wrong alignment on RigHierarchy_SetControlOffsetTransformByIndex");
static_assert(sizeof(RigHierarchy_SetControlOffsetTransformByIndex) == 0x000080, "Wrong size on RigHierarchy_SetControlOffsetTransformByIndex");
static_assert(offsetof(RigHierarchy_SetControlOffsetTransformByIndex, InElementIndex) == 0x000000, "Member 'RigHierarchy_SetControlOffsetTransformByIndex::InElementIndex' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetControlOffsetTransformByIndex, InTransform) == 0x000010, "Member 'RigHierarchy_SetControlOffsetTransformByIndex::InTransform' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetControlOffsetTransformByIndex, bInitial) == 0x000070, "Member 'RigHierarchy_SetControlOffsetTransformByIndex::bInitial' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetControlOffsetTransformByIndex, bAffectChildren) == 0x000071, "Member 'RigHierarchy_SetControlOffsetTransformByIndex::bAffectChildren' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetControlOffsetTransformByIndex, bSetupUndo) == 0x000072, "Member 'RigHierarchy_SetControlOffsetTransformByIndex::bSetupUndo' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetControlOffsetTransformByIndex, bPrintPythonCommands) == 0x000073, "Member 'RigHierarchy_SetControlOffsetTransformByIndex::bPrintPythonCommands' has a wrong offset!");

// Function ControlRig.RigHierarchy.SetControlSettings
// 0x0260 (0x0260 - 0x0000)
struct RigHierarchy_SetControlSettings final
{
public:
	struct FRigElementKey                         InKey;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigControlSettings                    InSettings;                                        // 0x0010(0x0240)(Parm, NativeAccessSpecifierPublic)
	bool                                          bSetupUndo;                                        // 0x0250(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0251(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrintPythonCommands;                              // 0x0252(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_253[0xD];                                      // 0x0253(0x000D)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchy_SetControlSettings) == 0x000010, "Wrong alignment on RigHierarchy_SetControlSettings");
static_assert(sizeof(RigHierarchy_SetControlSettings) == 0x000260, "Wrong size on RigHierarchy_SetControlSettings");
static_assert(offsetof(RigHierarchy_SetControlSettings, InKey) == 0x000000, "Member 'RigHierarchy_SetControlSettings::InKey' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetControlSettings, InSettings) == 0x000010, "Member 'RigHierarchy_SetControlSettings::InSettings' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetControlSettings, bSetupUndo) == 0x000250, "Member 'RigHierarchy_SetControlSettings::bSetupUndo' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetControlSettings, bForce) == 0x000251, "Member 'RigHierarchy_SetControlSettings::bForce' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetControlSettings, bPrintPythonCommands) == 0x000252, "Member 'RigHierarchy_SetControlSettings::bPrintPythonCommands' has a wrong offset!");

// Function ControlRig.RigHierarchy.SetControlSettingsByIndex
// 0x0260 (0x0260 - 0x0000)
struct RigHierarchy_SetControlSettingsByIndex final
{
public:
	int32                                         InElementIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigControlSettings                    InSettings;                                        // 0x0010(0x0240)(Parm, NativeAccessSpecifierPublic)
	bool                                          bSetupUndo;                                        // 0x0250(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0251(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrintPythonCommands;                              // 0x0252(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_253[0xD];                                      // 0x0253(0x000D)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchy_SetControlSettingsByIndex) == 0x000010, "Wrong alignment on RigHierarchy_SetControlSettingsByIndex");
static_assert(sizeof(RigHierarchy_SetControlSettingsByIndex) == 0x000260, "Wrong size on RigHierarchy_SetControlSettingsByIndex");
static_assert(offsetof(RigHierarchy_SetControlSettingsByIndex, InElementIndex) == 0x000000, "Member 'RigHierarchy_SetControlSettingsByIndex::InElementIndex' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetControlSettingsByIndex, InSettings) == 0x000010, "Member 'RigHierarchy_SetControlSettingsByIndex::InSettings' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetControlSettingsByIndex, bSetupUndo) == 0x000250, "Member 'RigHierarchy_SetControlSettingsByIndex::bSetupUndo' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetControlSettingsByIndex, bForce) == 0x000251, "Member 'RigHierarchy_SetControlSettingsByIndex::bForce' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetControlSettingsByIndex, bPrintPythonCommands) == 0x000252, "Member 'RigHierarchy_SetControlSettingsByIndex::bPrintPythonCommands' has a wrong offset!");

// Function ControlRig.RigHierarchy.SetControlShapeTransform
// 0x0080 (0x0080 - 0x0000)
struct RigHierarchy_SetControlShapeTransform final
{
public:
	struct FRigElementKey                         InKey;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InTransform;                                       // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetupUndo;                                        // 0x0071(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0xE];                                       // 0x0072(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchy_SetControlShapeTransform) == 0x000010, "Wrong alignment on RigHierarchy_SetControlShapeTransform");
static_assert(sizeof(RigHierarchy_SetControlShapeTransform) == 0x000080, "Wrong size on RigHierarchy_SetControlShapeTransform");
static_assert(offsetof(RigHierarchy_SetControlShapeTransform, InKey) == 0x000000, "Member 'RigHierarchy_SetControlShapeTransform::InKey' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetControlShapeTransform, InTransform) == 0x000010, "Member 'RigHierarchy_SetControlShapeTransform::InTransform' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetControlShapeTransform, bInitial) == 0x000070, "Member 'RigHierarchy_SetControlShapeTransform::bInitial' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetControlShapeTransform, bSetupUndo) == 0x000071, "Member 'RigHierarchy_SetControlShapeTransform::bSetupUndo' has a wrong offset!");

// Function ControlRig.RigHierarchy.SetControlShapeTransformByIndex
// 0x0080 (0x0080 - 0x0000)
struct RigHierarchy_SetControlShapeTransformByIndex final
{
public:
	int32                                         InElementIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InTransform;                                       // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetupUndo;                                        // 0x0071(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0xE];                                       // 0x0072(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchy_SetControlShapeTransformByIndex) == 0x000010, "Wrong alignment on RigHierarchy_SetControlShapeTransformByIndex");
static_assert(sizeof(RigHierarchy_SetControlShapeTransformByIndex) == 0x000080, "Wrong size on RigHierarchy_SetControlShapeTransformByIndex");
static_assert(offsetof(RigHierarchy_SetControlShapeTransformByIndex, InElementIndex) == 0x000000, "Member 'RigHierarchy_SetControlShapeTransformByIndex::InElementIndex' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetControlShapeTransformByIndex, InTransform) == 0x000010, "Member 'RigHierarchy_SetControlShapeTransformByIndex::InTransform' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetControlShapeTransformByIndex, bInitial) == 0x000070, "Member 'RigHierarchy_SetControlShapeTransformByIndex::bInitial' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetControlShapeTransformByIndex, bSetupUndo) == 0x000071, "Member 'RigHierarchy_SetControlShapeTransformByIndex::bSetupUndo' has a wrong offset!");

// Function ControlRig.RigHierarchy.SetControlValue
// 0x0110 (0x0110 - 0x0000)
struct RigHierarchy_SetControlValue final
{
public:
	struct FRigElementKey                         InKey;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigControlValue                       InValue;                                           // 0x0010(0x00F0)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ERigControlValueType                          InValueType;                                       // 0x0100(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetupUndo;                                        // 0x0101(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrintPythonCommands;                              // 0x0102(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_103[0xD];                                      // 0x0103(0x000D)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchy_SetControlValue) == 0x000010, "Wrong alignment on RigHierarchy_SetControlValue");
static_assert(sizeof(RigHierarchy_SetControlValue) == 0x000110, "Wrong size on RigHierarchy_SetControlValue");
static_assert(offsetof(RigHierarchy_SetControlValue, InKey) == 0x000000, "Member 'RigHierarchy_SetControlValue::InKey' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetControlValue, InValue) == 0x000010, "Member 'RigHierarchy_SetControlValue::InValue' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetControlValue, InValueType) == 0x000100, "Member 'RigHierarchy_SetControlValue::InValueType' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetControlValue, bSetupUndo) == 0x000101, "Member 'RigHierarchy_SetControlValue::bSetupUndo' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetControlValue, bPrintPythonCommands) == 0x000102, "Member 'RigHierarchy_SetControlValue::bPrintPythonCommands' has a wrong offset!");

// Function ControlRig.RigHierarchy.SetControlValueByIndex
// 0x0110 (0x0110 - 0x0000)
struct RigHierarchy_SetControlValueByIndex final
{
public:
	int32                                         InElementIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigControlValue                       InValue;                                           // 0x0010(0x00F0)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ERigControlValueType                          InValueType;                                       // 0x0100(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetupUndo;                                        // 0x0101(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrintPythonCommands;                              // 0x0102(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_103[0xD];                                      // 0x0103(0x000D)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchy_SetControlValueByIndex) == 0x000010, "Wrong alignment on RigHierarchy_SetControlValueByIndex");
static_assert(sizeof(RigHierarchy_SetControlValueByIndex) == 0x000110, "Wrong size on RigHierarchy_SetControlValueByIndex");
static_assert(offsetof(RigHierarchy_SetControlValueByIndex, InElementIndex) == 0x000000, "Member 'RigHierarchy_SetControlValueByIndex::InElementIndex' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetControlValueByIndex, InValue) == 0x000010, "Member 'RigHierarchy_SetControlValueByIndex::InValue' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetControlValueByIndex, InValueType) == 0x000100, "Member 'RigHierarchy_SetControlValueByIndex::InValueType' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetControlValueByIndex, bSetupUndo) == 0x000101, "Member 'RigHierarchy_SetControlValueByIndex::bSetupUndo' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetControlValueByIndex, bPrintPythonCommands) == 0x000102, "Member 'RigHierarchy_SetControlValueByIndex::bPrintPythonCommands' has a wrong offset!");

// Function ControlRig.RigHierarchy.SetControlVisibility
// 0x000C (0x000C - 0x0000)
struct RigHierarchy_SetControlVisibility final
{
public:
	struct FRigElementKey                         InKey;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibility;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchy_SetControlVisibility) == 0x000004, "Wrong alignment on RigHierarchy_SetControlVisibility");
static_assert(sizeof(RigHierarchy_SetControlVisibility) == 0x00000C, "Wrong size on RigHierarchy_SetControlVisibility");
static_assert(offsetof(RigHierarchy_SetControlVisibility, InKey) == 0x000000, "Member 'RigHierarchy_SetControlVisibility::InKey' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetControlVisibility, bVisibility) == 0x000008, "Member 'RigHierarchy_SetControlVisibility::bVisibility' has a wrong offset!");

// Function ControlRig.RigHierarchy.SetControlVisibilityByIndex
// 0x0008 (0x0008 - 0x0000)
struct RigHierarchy_SetControlVisibilityByIndex final
{
public:
	int32                                         InElementIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibility;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchy_SetControlVisibilityByIndex) == 0x000004, "Wrong alignment on RigHierarchy_SetControlVisibilityByIndex");
static_assert(sizeof(RigHierarchy_SetControlVisibilityByIndex) == 0x000008, "Wrong size on RigHierarchy_SetControlVisibilityByIndex");
static_assert(offsetof(RigHierarchy_SetControlVisibilityByIndex, InElementIndex) == 0x000000, "Member 'RigHierarchy_SetControlVisibilityByIndex::InElementIndex' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetControlVisibilityByIndex, bVisibility) == 0x000004, "Member 'RigHierarchy_SetControlVisibilityByIndex::bVisibility' has a wrong offset!");

// Function ControlRig.RigHierarchy.SetCurveValue
// 0x0010 (0x0010 - 0x0000)
struct RigHierarchy_SetCurveValue final
{
public:
	struct FRigElementKey                         InKey;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetupUndo;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchy_SetCurveValue) == 0x000004, "Wrong alignment on RigHierarchy_SetCurveValue");
static_assert(sizeof(RigHierarchy_SetCurveValue) == 0x000010, "Wrong size on RigHierarchy_SetCurveValue");
static_assert(offsetof(RigHierarchy_SetCurveValue, InKey) == 0x000000, "Member 'RigHierarchy_SetCurveValue::InKey' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetCurveValue, InValue) == 0x000008, "Member 'RigHierarchy_SetCurveValue::InValue' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetCurveValue, bSetupUndo) == 0x00000C, "Member 'RigHierarchy_SetCurveValue::bSetupUndo' has a wrong offset!");

// Function ControlRig.RigHierarchy.SetCurveValueByIndex
// 0x000C (0x000C - 0x0000)
struct RigHierarchy_SetCurveValueByIndex final
{
public:
	int32                                         InElementIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InValue;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetupUndo;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchy_SetCurveValueByIndex) == 0x000004, "Wrong alignment on RigHierarchy_SetCurveValueByIndex");
static_assert(sizeof(RigHierarchy_SetCurveValueByIndex) == 0x00000C, "Wrong size on RigHierarchy_SetCurveValueByIndex");
static_assert(offsetof(RigHierarchy_SetCurveValueByIndex, InElementIndex) == 0x000000, "Member 'RigHierarchy_SetCurveValueByIndex::InElementIndex' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetCurveValueByIndex, InValue) == 0x000004, "Member 'RigHierarchy_SetCurveValueByIndex::InValue' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetCurveValueByIndex, bSetupUndo) == 0x000008, "Member 'RigHierarchy_SetCurveValueByIndex::bSetupUndo' has a wrong offset!");

// Function ControlRig.RigHierarchy.SetGlobalTransform
// 0x0080 (0x0080 - 0x0000)
struct RigHierarchy_SetGlobalTransform final
{
public:
	struct FRigElementKey                         InKey;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InTransform;                                       // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectChildren;                                   // 0x0071(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetupUndo;                                        // 0x0072(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_73[0xD];                                       // 0x0073(0x000D)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchy_SetGlobalTransform) == 0x000010, "Wrong alignment on RigHierarchy_SetGlobalTransform");
static_assert(sizeof(RigHierarchy_SetGlobalTransform) == 0x000080, "Wrong size on RigHierarchy_SetGlobalTransform");
static_assert(offsetof(RigHierarchy_SetGlobalTransform, InKey) == 0x000000, "Member 'RigHierarchy_SetGlobalTransform::InKey' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetGlobalTransform, InTransform) == 0x000010, "Member 'RigHierarchy_SetGlobalTransform::InTransform' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetGlobalTransform, bInitial) == 0x000070, "Member 'RigHierarchy_SetGlobalTransform::bInitial' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetGlobalTransform, bAffectChildren) == 0x000071, "Member 'RigHierarchy_SetGlobalTransform::bAffectChildren' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetGlobalTransform, bSetupUndo) == 0x000072, "Member 'RigHierarchy_SetGlobalTransform::bSetupUndo' has a wrong offset!");

// Function ControlRig.RigHierarchy.SetGlobalTransformByIndex
// 0x0080 (0x0080 - 0x0000)
struct RigHierarchy_SetGlobalTransformByIndex final
{
public:
	int32                                         InElementIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InTransform;                                       // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectChildren;                                   // 0x0071(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetupUndo;                                        // 0x0072(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_73[0xD];                                       // 0x0073(0x000D)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchy_SetGlobalTransformByIndex) == 0x000010, "Wrong alignment on RigHierarchy_SetGlobalTransformByIndex");
static_assert(sizeof(RigHierarchy_SetGlobalTransformByIndex) == 0x000080, "Wrong size on RigHierarchy_SetGlobalTransformByIndex");
static_assert(offsetof(RigHierarchy_SetGlobalTransformByIndex, InElementIndex) == 0x000000, "Member 'RigHierarchy_SetGlobalTransformByIndex::InElementIndex' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetGlobalTransformByIndex, InTransform) == 0x000010, "Member 'RigHierarchy_SetGlobalTransformByIndex::InTransform' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetGlobalTransformByIndex, bInitial) == 0x000070, "Member 'RigHierarchy_SetGlobalTransformByIndex::bInitial' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetGlobalTransformByIndex, bAffectChildren) == 0x000071, "Member 'RigHierarchy_SetGlobalTransformByIndex::bAffectChildren' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetGlobalTransformByIndex, bSetupUndo) == 0x000072, "Member 'RigHierarchy_SetGlobalTransformByIndex::bSetupUndo' has a wrong offset!");

// Function ControlRig.RigHierarchy.SetLocalTransform
// 0x0080 (0x0080 - 0x0000)
struct RigHierarchy_SetLocalTransform final
{
public:
	struct FRigElementKey                         InKey;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InTransform;                                       // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectChildren;                                   // 0x0071(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetupUndo;                                        // 0x0072(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrintPythonCommands;                              // 0x0073(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0xC];                                       // 0x0074(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchy_SetLocalTransform) == 0x000010, "Wrong alignment on RigHierarchy_SetLocalTransform");
static_assert(sizeof(RigHierarchy_SetLocalTransform) == 0x000080, "Wrong size on RigHierarchy_SetLocalTransform");
static_assert(offsetof(RigHierarchy_SetLocalTransform, InKey) == 0x000000, "Member 'RigHierarchy_SetLocalTransform::InKey' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetLocalTransform, InTransform) == 0x000010, "Member 'RigHierarchy_SetLocalTransform::InTransform' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetLocalTransform, bInitial) == 0x000070, "Member 'RigHierarchy_SetLocalTransform::bInitial' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetLocalTransform, bAffectChildren) == 0x000071, "Member 'RigHierarchy_SetLocalTransform::bAffectChildren' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetLocalTransform, bSetupUndo) == 0x000072, "Member 'RigHierarchy_SetLocalTransform::bSetupUndo' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetLocalTransform, bPrintPythonCommands) == 0x000073, "Member 'RigHierarchy_SetLocalTransform::bPrintPythonCommands' has a wrong offset!");

// Function ControlRig.RigHierarchy.SetLocalTransformByIndex
// 0x0080 (0x0080 - 0x0000)
struct RigHierarchy_SetLocalTransformByIndex final
{
public:
	int32                                         InElementIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InTransform;                                       // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectChildren;                                   // 0x0071(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetupUndo;                                        // 0x0072(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrintPythonCommands;                              // 0x0073(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0xC];                                       // 0x0074(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchy_SetLocalTransformByIndex) == 0x000010, "Wrong alignment on RigHierarchy_SetLocalTransformByIndex");
static_assert(sizeof(RigHierarchy_SetLocalTransformByIndex) == 0x000080, "Wrong size on RigHierarchy_SetLocalTransformByIndex");
static_assert(offsetof(RigHierarchy_SetLocalTransformByIndex, InElementIndex) == 0x000000, "Member 'RigHierarchy_SetLocalTransformByIndex::InElementIndex' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetLocalTransformByIndex, InTransform) == 0x000010, "Member 'RigHierarchy_SetLocalTransformByIndex::InTransform' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetLocalTransformByIndex, bInitial) == 0x000070, "Member 'RigHierarchy_SetLocalTransformByIndex::bInitial' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetLocalTransformByIndex, bAffectChildren) == 0x000071, "Member 'RigHierarchy_SetLocalTransformByIndex::bAffectChildren' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetLocalTransformByIndex, bSetupUndo) == 0x000072, "Member 'RigHierarchy_SetLocalTransformByIndex::bSetupUndo' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetLocalTransformByIndex, bPrintPythonCommands) == 0x000073, "Member 'RigHierarchy_SetLocalTransformByIndex::bPrintPythonCommands' has a wrong offset!");

// Function ControlRig.RigHierarchy.SetParentWeight
// 0x0020 (0x0020 - 0x0000)
struct RigHierarchy_SetParentWeight final
{
public:
	struct FRigElementKey                         InChild;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         InParent;                                          // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementWeight                      InWeight;                                          // 0x0010(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectChildren;                                   // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001E(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchy_SetParentWeight) == 0x000004, "Wrong alignment on RigHierarchy_SetParentWeight");
static_assert(sizeof(RigHierarchy_SetParentWeight) == 0x000020, "Wrong size on RigHierarchy_SetParentWeight");
static_assert(offsetof(RigHierarchy_SetParentWeight, InChild) == 0x000000, "Member 'RigHierarchy_SetParentWeight::InChild' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetParentWeight, InParent) == 0x000008, "Member 'RigHierarchy_SetParentWeight::InParent' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetParentWeight, InWeight) == 0x000010, "Member 'RigHierarchy_SetParentWeight::InWeight' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetParentWeight, bInitial) == 0x00001C, "Member 'RigHierarchy_SetParentWeight::bInitial' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetParentWeight, bAffectChildren) == 0x00001D, "Member 'RigHierarchy_SetParentWeight::bAffectChildren' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetParentWeight, ReturnValue) == 0x00001E, "Member 'RigHierarchy_SetParentWeight::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.SetParentWeightArray
// 0x0020 (0x0020 - 0x0000)
struct RigHierarchy_SetParentWeightArray final
{
public:
	struct FRigElementKey                         InChild;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRigElementWeight>              InWeights;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectChildren;                                   // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchy_SetParentWeightArray) == 0x000008, "Wrong alignment on RigHierarchy_SetParentWeightArray");
static_assert(sizeof(RigHierarchy_SetParentWeightArray) == 0x000020, "Wrong size on RigHierarchy_SetParentWeightArray");
static_assert(offsetof(RigHierarchy_SetParentWeightArray, InChild) == 0x000000, "Member 'RigHierarchy_SetParentWeightArray::InChild' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetParentWeightArray, InWeights) == 0x000008, "Member 'RigHierarchy_SetParentWeightArray::InWeights' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetParentWeightArray, bInitial) == 0x000018, "Member 'RigHierarchy_SetParentWeightArray::bInitial' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetParentWeightArray, bAffectChildren) == 0x000019, "Member 'RigHierarchy_SetParentWeightArray::bAffectChildren' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SetParentWeightArray, ReturnValue) == 0x00001A, "Member 'RigHierarchy_SetParentWeightArray::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.SetPose_ForBlueprint
// 0x0070 (0x0070 - 0x0000)
struct RigHierarchy_SetPose_ForBlueprint final
{
public:
	struct FRigPose                               InPose;                                            // 0x0000(0x0070)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_SetPose_ForBlueprint) == 0x000008, "Wrong alignment on RigHierarchy_SetPose_ForBlueprint");
static_assert(sizeof(RigHierarchy_SetPose_ForBlueprint) == 0x000070, "Wrong size on RigHierarchy_SetPose_ForBlueprint");
static_assert(offsetof(RigHierarchy_SetPose_ForBlueprint, InPose) == 0x000000, "Member 'RigHierarchy_SetPose_ForBlueprint::InPose' has a wrong offset!");

// Function ControlRig.RigHierarchy.SwitchToDefaultParent
// 0x000C (0x000C - 0x0000)
struct RigHierarchy_SwitchToDefaultParent final
{
public:
	struct FRigElementKey                         InChild;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectChildren;                                   // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchy_SwitchToDefaultParent) == 0x000004, "Wrong alignment on RigHierarchy_SwitchToDefaultParent");
static_assert(sizeof(RigHierarchy_SwitchToDefaultParent) == 0x00000C, "Wrong size on RigHierarchy_SwitchToDefaultParent");
static_assert(offsetof(RigHierarchy_SwitchToDefaultParent, InChild) == 0x000000, "Member 'RigHierarchy_SwitchToDefaultParent::InChild' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SwitchToDefaultParent, bInitial) == 0x000008, "Member 'RigHierarchy_SwitchToDefaultParent::bInitial' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SwitchToDefaultParent, bAffectChildren) == 0x000009, "Member 'RigHierarchy_SwitchToDefaultParent::bAffectChildren' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SwitchToDefaultParent, ReturnValue) == 0x00000A, "Member 'RigHierarchy_SwitchToDefaultParent::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.SwitchToParent
// 0x0014 (0x0014 - 0x0000)
struct RigHierarchy_SwitchToParent final
{
public:
	struct FRigElementKey                         InChild;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         InParent;                                          // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectChildren;                                   // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0012(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchy_SwitchToParent) == 0x000004, "Wrong alignment on RigHierarchy_SwitchToParent");
static_assert(sizeof(RigHierarchy_SwitchToParent) == 0x000014, "Wrong size on RigHierarchy_SwitchToParent");
static_assert(offsetof(RigHierarchy_SwitchToParent, InChild) == 0x000000, "Member 'RigHierarchy_SwitchToParent::InChild' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SwitchToParent, InParent) == 0x000008, "Member 'RigHierarchy_SwitchToParent::InParent' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SwitchToParent, bInitial) == 0x000010, "Member 'RigHierarchy_SwitchToParent::bInitial' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SwitchToParent, bAffectChildren) == 0x000011, "Member 'RigHierarchy_SwitchToParent::bAffectChildren' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SwitchToParent, ReturnValue) == 0x000012, "Member 'RigHierarchy_SwitchToParent::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.SwitchToWorldSpace
// 0x000C (0x000C - 0x0000)
struct RigHierarchy_SwitchToWorldSpace final
{
public:
	struct FRigElementKey                         InChild;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectChildren;                                   // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchy_SwitchToWorldSpace) == 0x000004, "Wrong alignment on RigHierarchy_SwitchToWorldSpace");
static_assert(sizeof(RigHierarchy_SwitchToWorldSpace) == 0x00000C, "Wrong size on RigHierarchy_SwitchToWorldSpace");
static_assert(offsetof(RigHierarchy_SwitchToWorldSpace, InChild) == 0x000000, "Member 'RigHierarchy_SwitchToWorldSpace::InChild' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SwitchToWorldSpace, bInitial) == 0x000008, "Member 'RigHierarchy_SwitchToWorldSpace::bInitial' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SwitchToWorldSpace, bAffectChildren) == 0x000009, "Member 'RigHierarchy_SwitchToWorldSpace::bAffectChildren' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SwitchToWorldSpace, ReturnValue) == 0x00000A, "Member 'RigHierarchy_SwitchToWorldSpace::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.Contains_ForBlueprint
// 0x000C (0x000C - 0x0000)
struct RigHierarchy_Contains_ForBlueprint final
{
public:
	struct FRigElementKey                         InKey;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchy_Contains_ForBlueprint) == 0x000004, "Wrong alignment on RigHierarchy_Contains_ForBlueprint");
static_assert(sizeof(RigHierarchy_Contains_ForBlueprint) == 0x00000C, "Wrong size on RigHierarchy_Contains_ForBlueprint");
static_assert(offsetof(RigHierarchy_Contains_ForBlueprint, InKey) == 0x000000, "Member 'RigHierarchy_Contains_ForBlueprint::InKey' has a wrong offset!");
static_assert(offsetof(RigHierarchy_Contains_ForBlueprint, ReturnValue) == 0x000008, "Member 'RigHierarchy_Contains_ForBlueprint::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.FindBone_ForBlueprintOnly
// 0x0270 (0x0270 - 0x0000)
struct RigHierarchy_FindBone_ForBlueprintOnly final
{
public:
	struct FRigElementKey                         InKey;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigBoneElement                        ReturnValue;                                       // 0x0010(0x0260)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_FindBone_ForBlueprintOnly) == 0x000010, "Wrong alignment on RigHierarchy_FindBone_ForBlueprintOnly");
static_assert(sizeof(RigHierarchy_FindBone_ForBlueprintOnly) == 0x000270, "Wrong size on RigHierarchy_FindBone_ForBlueprintOnly");
static_assert(offsetof(RigHierarchy_FindBone_ForBlueprintOnly, InKey) == 0x000000, "Member 'RigHierarchy_FindBone_ForBlueprintOnly::InKey' has a wrong offset!");
static_assert(offsetof(RigHierarchy_FindBone_ForBlueprintOnly, ReturnValue) == 0x000010, "Member 'RigHierarchy_FindBone_ForBlueprintOnly::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.FindControl_ForBlueprintOnly
// 0x0AE0 (0x0AE0 - 0x0000)
struct RigHierarchy_FindControl_ForBlueprintOnly final
{
public:
	struct FRigElementKey                         InKey;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigControlElement                     ReturnValue;                                       // 0x0010(0x0AD0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_FindControl_ForBlueprintOnly) == 0x000010, "Wrong alignment on RigHierarchy_FindControl_ForBlueprintOnly");
static_assert(sizeof(RigHierarchy_FindControl_ForBlueprintOnly) == 0x000AE0, "Wrong size on RigHierarchy_FindControl_ForBlueprintOnly");
static_assert(offsetof(RigHierarchy_FindControl_ForBlueprintOnly, InKey) == 0x000000, "Member 'RigHierarchy_FindControl_ForBlueprintOnly::InKey' has a wrong offset!");
static_assert(offsetof(RigHierarchy_FindControl_ForBlueprintOnly, ReturnValue) == 0x000010, "Member 'RigHierarchy_FindControl_ForBlueprintOnly::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.FindNull_ForBlueprintOnly
// 0x0520 (0x0520 - 0x0000)
struct RigHierarchy_FindNull_ForBlueprintOnly final
{
public:
	struct FRigElementKey                         InKey;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigNullElement                        ReturnValue;                                       // 0x0010(0x0510)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_FindNull_ForBlueprintOnly) == 0x000010, "Wrong alignment on RigHierarchy_FindNull_ForBlueprintOnly");
static_assert(sizeof(RigHierarchy_FindNull_ForBlueprintOnly) == 0x000520, "Wrong size on RigHierarchy_FindNull_ForBlueprintOnly");
static_assert(offsetof(RigHierarchy_FindNull_ForBlueprintOnly, InKey) == 0x000000, "Member 'RigHierarchy_FindNull_ForBlueprintOnly::InKey' has a wrong offset!");
static_assert(offsetof(RigHierarchy_FindNull_ForBlueprintOnly, ReturnValue) == 0x000010, "Member 'RigHierarchy_FindNull_ForBlueprintOnly::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetAllKeys_ForBlueprint
// 0x0018 (0x0018 - 0x0000)
struct RigHierarchy_GetAllKeys_ForBlueprint final
{
public:
	bool                                          bTraverse;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_GetAllKeys_ForBlueprint) == 0x000008, "Wrong alignment on RigHierarchy_GetAllKeys_ForBlueprint");
static_assert(sizeof(RigHierarchy_GetAllKeys_ForBlueprint) == 0x000018, "Wrong size on RigHierarchy_GetAllKeys_ForBlueprint");
static_assert(offsetof(RigHierarchy_GetAllKeys_ForBlueprint, bTraverse) == 0x000000, "Member 'RigHierarchy_GetAllKeys_ForBlueprint::bTraverse' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetAllKeys_ForBlueprint, ReturnValue) == 0x000008, "Member 'RigHierarchy_GetAllKeys_ForBlueprint::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetBoneKeys
// 0x0018 (0x0018 - 0x0000)
struct RigHierarchy_GetBoneKeys final
{
public:
	bool                                          bTraverse;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_GetBoneKeys) == 0x000008, "Wrong alignment on RigHierarchy_GetBoneKeys");
static_assert(sizeof(RigHierarchy_GetBoneKeys) == 0x000018, "Wrong size on RigHierarchy_GetBoneKeys");
static_assert(offsetof(RigHierarchy_GetBoneKeys, bTraverse) == 0x000000, "Member 'RigHierarchy_GetBoneKeys::bTraverse' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetBoneKeys, ReturnValue) == 0x000008, "Member 'RigHierarchy_GetBoneKeys::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetChildren
// 0x0020 (0x0020 - 0x0000)
struct RigHierarchy_GetChildren final
{
public:
	struct FRigElementKey                         InKey;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecursive;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_GetChildren) == 0x000008, "Wrong alignment on RigHierarchy_GetChildren");
static_assert(sizeof(RigHierarchy_GetChildren) == 0x000020, "Wrong size on RigHierarchy_GetChildren");
static_assert(offsetof(RigHierarchy_GetChildren, InKey) == 0x000000, "Member 'RigHierarchy_GetChildren::InKey' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetChildren, bRecursive) == 0x000008, "Member 'RigHierarchy_GetChildren::bRecursive' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetChildren, ReturnValue) == 0x000010, "Member 'RigHierarchy_GetChildren::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetControlKeys
// 0x0018 (0x0018 - 0x0000)
struct RigHierarchy_GetControlKeys final
{
public:
	bool                                          bTraverse;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_GetControlKeys) == 0x000008, "Wrong alignment on RigHierarchy_GetControlKeys");
static_assert(sizeof(RigHierarchy_GetControlKeys) == 0x000018, "Wrong size on RigHierarchy_GetControlKeys");
static_assert(offsetof(RigHierarchy_GetControlKeys, bTraverse) == 0x000000, "Member 'RigHierarchy_GetControlKeys::bTraverse' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetControlKeys, ReturnValue) == 0x000008, "Member 'RigHierarchy_GetControlKeys::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetControlValue
// 0x0100 (0x0100 - 0x0000)
struct RigHierarchy_GetControlValue final
{
public:
	struct FRigElementKey                         InKey;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigControlValueType                          InValueType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigControlValue                       ReturnValue;                                       // 0x0010(0x00F0)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_GetControlValue) == 0x000010, "Wrong alignment on RigHierarchy_GetControlValue");
static_assert(sizeof(RigHierarchy_GetControlValue) == 0x000100, "Wrong size on RigHierarchy_GetControlValue");
static_assert(offsetof(RigHierarchy_GetControlValue, InKey) == 0x000000, "Member 'RigHierarchy_GetControlValue::InKey' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetControlValue, InValueType) == 0x000008, "Member 'RigHierarchy_GetControlValue::InValueType' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetControlValue, ReturnValue) == 0x000010, "Member 'RigHierarchy_GetControlValue::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetControlValueByIndex
// 0x0100 (0x0100 - 0x0000)
struct RigHierarchy_GetControlValueByIndex final
{
public:
	int32                                         InElementIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigControlValueType                          InValueType;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0xB];                                        // 0x0005(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigControlValue                       ReturnValue;                                       // 0x0010(0x00F0)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_GetControlValueByIndex) == 0x000010, "Wrong alignment on RigHierarchy_GetControlValueByIndex");
static_assert(sizeof(RigHierarchy_GetControlValueByIndex) == 0x000100, "Wrong size on RigHierarchy_GetControlValueByIndex");
static_assert(offsetof(RigHierarchy_GetControlValueByIndex, InElementIndex) == 0x000000, "Member 'RigHierarchy_GetControlValueByIndex::InElementIndex' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetControlValueByIndex, InValueType) == 0x000004, "Member 'RigHierarchy_GetControlValueByIndex::InValueType' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetControlValueByIndex, ReturnValue) == 0x000010, "Member 'RigHierarchy_GetControlValueByIndex::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetCurveKeys
// 0x0010 (0x0010 - 0x0000)
struct RigHierarchy_GetCurveKeys final
{
public:
	TArray<struct FRigElementKey>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_GetCurveKeys) == 0x000008, "Wrong alignment on RigHierarchy_GetCurveKeys");
static_assert(sizeof(RigHierarchy_GetCurveKeys) == 0x000010, "Wrong size on RigHierarchy_GetCurveKeys");
static_assert(offsetof(RigHierarchy_GetCurveKeys, ReturnValue) == 0x000000, "Member 'RigHierarchy_GetCurveKeys::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetCurveValue
// 0x000C (0x000C - 0x0000)
struct RigHierarchy_GetCurveValue final
{
public:
	struct FRigElementKey                         InKey;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_GetCurveValue) == 0x000004, "Wrong alignment on RigHierarchy_GetCurveValue");
static_assert(sizeof(RigHierarchy_GetCurveValue) == 0x00000C, "Wrong size on RigHierarchy_GetCurveValue");
static_assert(offsetof(RigHierarchy_GetCurveValue, InKey) == 0x000000, "Member 'RigHierarchy_GetCurveValue::InKey' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetCurveValue, ReturnValue) == 0x000008, "Member 'RigHierarchy_GetCurveValue::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetCurveValueByIndex
// 0x0008 (0x0008 - 0x0000)
struct RigHierarchy_GetCurveValueByIndex final
{
public:
	int32                                         InElementIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_GetCurveValueByIndex) == 0x000004, "Wrong alignment on RigHierarchy_GetCurveValueByIndex");
static_assert(sizeof(RigHierarchy_GetCurveValueByIndex) == 0x000008, "Wrong size on RigHierarchy_GetCurveValueByIndex");
static_assert(offsetof(RigHierarchy_GetCurveValueByIndex, InElementIndex) == 0x000000, "Member 'RigHierarchy_GetCurveValueByIndex::InElementIndex' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetCurveValueByIndex, ReturnValue) == 0x000004, "Member 'RigHierarchy_GetCurveValueByIndex::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetFirstParent
// 0x0010 (0x0010 - 0x0000)
struct RigHierarchy_GetFirstParent final
{
public:
	struct FRigElementKey                         InKey;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_GetFirstParent) == 0x000004, "Wrong alignment on RigHierarchy_GetFirstParent");
static_assert(sizeof(RigHierarchy_GetFirstParent) == 0x000010, "Wrong size on RigHierarchy_GetFirstParent");
static_assert(offsetof(RigHierarchy_GetFirstParent, InKey) == 0x000000, "Member 'RigHierarchy_GetFirstParent::InKey' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetFirstParent, ReturnValue) == 0x000008, "Member 'RigHierarchy_GetFirstParent::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetGlobalControlOffsetTransform
// 0x0070 (0x0070 - 0x0000)
struct RigHierarchy_GetGlobalControlOffsetTransform final
{
public:
	struct FRigElementKey                         InKey;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_GetGlobalControlOffsetTransform) == 0x000010, "Wrong alignment on RigHierarchy_GetGlobalControlOffsetTransform");
static_assert(sizeof(RigHierarchy_GetGlobalControlOffsetTransform) == 0x000070, "Wrong size on RigHierarchy_GetGlobalControlOffsetTransform");
static_assert(offsetof(RigHierarchy_GetGlobalControlOffsetTransform, InKey) == 0x000000, "Member 'RigHierarchy_GetGlobalControlOffsetTransform::InKey' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetGlobalControlOffsetTransform, bInitial) == 0x000008, "Member 'RigHierarchy_GetGlobalControlOffsetTransform::bInitial' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetGlobalControlOffsetTransform, ReturnValue) == 0x000010, "Member 'RigHierarchy_GetGlobalControlOffsetTransform::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetGlobalControlOffsetTransformByIndex
// 0x0070 (0x0070 - 0x0000)
struct RigHierarchy_GetGlobalControlOffsetTransformByIndex final
{
public:
	int32                                         InElementIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0xB];                                        // 0x0005(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_GetGlobalControlOffsetTransformByIndex) == 0x000010, "Wrong alignment on RigHierarchy_GetGlobalControlOffsetTransformByIndex");
static_assert(sizeof(RigHierarchy_GetGlobalControlOffsetTransformByIndex) == 0x000070, "Wrong size on RigHierarchy_GetGlobalControlOffsetTransformByIndex");
static_assert(offsetof(RigHierarchy_GetGlobalControlOffsetTransformByIndex, InElementIndex) == 0x000000, "Member 'RigHierarchy_GetGlobalControlOffsetTransformByIndex::InElementIndex' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetGlobalControlOffsetTransformByIndex, bInitial) == 0x000004, "Member 'RigHierarchy_GetGlobalControlOffsetTransformByIndex::bInitial' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetGlobalControlOffsetTransformByIndex, ReturnValue) == 0x000010, "Member 'RigHierarchy_GetGlobalControlOffsetTransformByIndex::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetGlobalControlShapeTransform
// 0x0070 (0x0070 - 0x0000)
struct RigHierarchy_GetGlobalControlShapeTransform final
{
public:
	struct FRigElementKey                         InKey;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_GetGlobalControlShapeTransform) == 0x000010, "Wrong alignment on RigHierarchy_GetGlobalControlShapeTransform");
static_assert(sizeof(RigHierarchy_GetGlobalControlShapeTransform) == 0x000070, "Wrong size on RigHierarchy_GetGlobalControlShapeTransform");
static_assert(offsetof(RigHierarchy_GetGlobalControlShapeTransform, InKey) == 0x000000, "Member 'RigHierarchy_GetGlobalControlShapeTransform::InKey' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetGlobalControlShapeTransform, bInitial) == 0x000008, "Member 'RigHierarchy_GetGlobalControlShapeTransform::bInitial' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetGlobalControlShapeTransform, ReturnValue) == 0x000010, "Member 'RigHierarchy_GetGlobalControlShapeTransform::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetGlobalControlShapeTransformByIndex
// 0x0070 (0x0070 - 0x0000)
struct RigHierarchy_GetGlobalControlShapeTransformByIndex final
{
public:
	int32                                         InElementIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0xB];                                        // 0x0005(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_GetGlobalControlShapeTransformByIndex) == 0x000010, "Wrong alignment on RigHierarchy_GetGlobalControlShapeTransformByIndex");
static_assert(sizeof(RigHierarchy_GetGlobalControlShapeTransformByIndex) == 0x000070, "Wrong size on RigHierarchy_GetGlobalControlShapeTransformByIndex");
static_assert(offsetof(RigHierarchy_GetGlobalControlShapeTransformByIndex, InElementIndex) == 0x000000, "Member 'RigHierarchy_GetGlobalControlShapeTransformByIndex::InElementIndex' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetGlobalControlShapeTransformByIndex, bInitial) == 0x000004, "Member 'RigHierarchy_GetGlobalControlShapeTransformByIndex::bInitial' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetGlobalControlShapeTransformByIndex, ReturnValue) == 0x000010, "Member 'RigHierarchy_GetGlobalControlShapeTransformByIndex::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetGlobalTransform
// 0x0070 (0x0070 - 0x0000)
struct RigHierarchy_GetGlobalTransform final
{
public:
	struct FRigElementKey                         InKey;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_GetGlobalTransform) == 0x000010, "Wrong alignment on RigHierarchy_GetGlobalTransform");
static_assert(sizeof(RigHierarchy_GetGlobalTransform) == 0x000070, "Wrong size on RigHierarchy_GetGlobalTransform");
static_assert(offsetof(RigHierarchy_GetGlobalTransform, InKey) == 0x000000, "Member 'RigHierarchy_GetGlobalTransform::InKey' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetGlobalTransform, bInitial) == 0x000008, "Member 'RigHierarchy_GetGlobalTransform::bInitial' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetGlobalTransform, ReturnValue) == 0x000010, "Member 'RigHierarchy_GetGlobalTransform::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetGlobalTransformByIndex
// 0x0070 (0x0070 - 0x0000)
struct RigHierarchy_GetGlobalTransformByIndex final
{
public:
	int32                                         InElementIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0xB];                                        // 0x0005(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_GetGlobalTransformByIndex) == 0x000010, "Wrong alignment on RigHierarchy_GetGlobalTransformByIndex");
static_assert(sizeof(RigHierarchy_GetGlobalTransformByIndex) == 0x000070, "Wrong size on RigHierarchy_GetGlobalTransformByIndex");
static_assert(offsetof(RigHierarchy_GetGlobalTransformByIndex, InElementIndex) == 0x000000, "Member 'RigHierarchy_GetGlobalTransformByIndex::InElementIndex' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetGlobalTransformByIndex, bInitial) == 0x000004, "Member 'RigHierarchy_GetGlobalTransformByIndex::bInitial' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetGlobalTransformByIndex, ReturnValue) == 0x000010, "Member 'RigHierarchy_GetGlobalTransformByIndex::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetIndex_ForBlueprint
// 0x000C (0x000C - 0x0000)
struct RigHierarchy_GetIndex_ForBlueprint final
{
public:
	struct FRigElementKey                         InKey;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_GetIndex_ForBlueprint) == 0x000004, "Wrong alignment on RigHierarchy_GetIndex_ForBlueprint");
static_assert(sizeof(RigHierarchy_GetIndex_ForBlueprint) == 0x00000C, "Wrong size on RigHierarchy_GetIndex_ForBlueprint");
static_assert(offsetof(RigHierarchy_GetIndex_ForBlueprint, InKey) == 0x000000, "Member 'RigHierarchy_GetIndex_ForBlueprint::InKey' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetIndex_ForBlueprint, ReturnValue) == 0x000008, "Member 'RigHierarchy_GetIndex_ForBlueprint::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetKey
// 0x000C (0x000C - 0x0000)
struct RigHierarchy_GetKey final
{
public:
	int32                                         InElementIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_GetKey) == 0x000004, "Wrong alignment on RigHierarchy_GetKey");
static_assert(sizeof(RigHierarchy_GetKey) == 0x00000C, "Wrong size on RigHierarchy_GetKey");
static_assert(offsetof(RigHierarchy_GetKey, InElementIndex) == 0x000000, "Member 'RigHierarchy_GetKey::InElementIndex' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetKey, ReturnValue) == 0x000004, "Member 'RigHierarchy_GetKey::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetLocalTransform
// 0x0070 (0x0070 - 0x0000)
struct RigHierarchy_GetLocalTransform final
{
public:
	struct FRigElementKey                         InKey;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_GetLocalTransform) == 0x000010, "Wrong alignment on RigHierarchy_GetLocalTransform");
static_assert(sizeof(RigHierarchy_GetLocalTransform) == 0x000070, "Wrong size on RigHierarchy_GetLocalTransform");
static_assert(offsetof(RigHierarchy_GetLocalTransform, InKey) == 0x000000, "Member 'RigHierarchy_GetLocalTransform::InKey' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetLocalTransform, bInitial) == 0x000008, "Member 'RigHierarchy_GetLocalTransform::bInitial' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetLocalTransform, ReturnValue) == 0x000010, "Member 'RigHierarchy_GetLocalTransform::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetLocalTransformByIndex
// 0x0070 (0x0070 - 0x0000)
struct RigHierarchy_GetLocalTransformByIndex final
{
public:
	int32                                         InElementIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0xB];                                        // 0x0005(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_GetLocalTransformByIndex) == 0x000010, "Wrong alignment on RigHierarchy_GetLocalTransformByIndex");
static_assert(sizeof(RigHierarchy_GetLocalTransformByIndex) == 0x000070, "Wrong size on RigHierarchy_GetLocalTransformByIndex");
static_assert(offsetof(RigHierarchy_GetLocalTransformByIndex, InElementIndex) == 0x000000, "Member 'RigHierarchy_GetLocalTransformByIndex::InElementIndex' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetLocalTransformByIndex, bInitial) == 0x000004, "Member 'RigHierarchy_GetLocalTransformByIndex::bInitial' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetLocalTransformByIndex, ReturnValue) == 0x000010, "Member 'RigHierarchy_GetLocalTransformByIndex::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetNullKeys
// 0x0018 (0x0018 - 0x0000)
struct RigHierarchy_GetNullKeys final
{
public:
	bool                                          bTraverse;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_GetNullKeys) == 0x000008, "Wrong alignment on RigHierarchy_GetNullKeys");
static_assert(sizeof(RigHierarchy_GetNullKeys) == 0x000018, "Wrong size on RigHierarchy_GetNullKeys");
static_assert(offsetof(RigHierarchy_GetNullKeys, bTraverse) == 0x000000, "Member 'RigHierarchy_GetNullKeys::bTraverse' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetNullKeys, ReturnValue) == 0x000008, "Member 'RigHierarchy_GetNullKeys::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetNumberOfParents
// 0x000C (0x000C - 0x0000)
struct RigHierarchy_GetNumberOfParents final
{
public:
	struct FRigElementKey                         InKey;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_GetNumberOfParents) == 0x000004, "Wrong alignment on RigHierarchy_GetNumberOfParents");
static_assert(sizeof(RigHierarchy_GetNumberOfParents) == 0x00000C, "Wrong size on RigHierarchy_GetNumberOfParents");
static_assert(offsetof(RigHierarchy_GetNumberOfParents, InKey) == 0x000000, "Member 'RigHierarchy_GetNumberOfParents::InKey' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetNumberOfParents, ReturnValue) == 0x000008, "Member 'RigHierarchy_GetNumberOfParents::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetParents
// 0x0020 (0x0020 - 0x0000)
struct RigHierarchy_GetParents final
{
public:
	struct FRigElementKey                         InKey;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecursive;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_GetParents) == 0x000008, "Wrong alignment on RigHierarchy_GetParents");
static_assert(sizeof(RigHierarchy_GetParents) == 0x000020, "Wrong size on RigHierarchy_GetParents");
static_assert(offsetof(RigHierarchy_GetParents, InKey) == 0x000000, "Member 'RigHierarchy_GetParents::InKey' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetParents, bRecursive) == 0x000008, "Member 'RigHierarchy_GetParents::bRecursive' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetParents, ReturnValue) == 0x000010, "Member 'RigHierarchy_GetParents::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetParentTransform
// 0x0070 (0x0070 - 0x0000)
struct RigHierarchy_GetParentTransform final
{
public:
	struct FRigElementKey                         InKey;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_GetParentTransform) == 0x000010, "Wrong alignment on RigHierarchy_GetParentTransform");
static_assert(sizeof(RigHierarchy_GetParentTransform) == 0x000070, "Wrong size on RigHierarchy_GetParentTransform");
static_assert(offsetof(RigHierarchy_GetParentTransform, InKey) == 0x000000, "Member 'RigHierarchy_GetParentTransform::InKey' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetParentTransform, bInitial) == 0x000008, "Member 'RigHierarchy_GetParentTransform::bInitial' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetParentTransform, ReturnValue) == 0x000010, "Member 'RigHierarchy_GetParentTransform::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetParentTransformByIndex
// 0x0070 (0x0070 - 0x0000)
struct RigHierarchy_GetParentTransformByIndex final
{
public:
	int32                                         InElementIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0xB];                                        // 0x0005(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_GetParentTransformByIndex) == 0x000010, "Wrong alignment on RigHierarchy_GetParentTransformByIndex");
static_assert(sizeof(RigHierarchy_GetParentTransformByIndex) == 0x000070, "Wrong size on RigHierarchy_GetParentTransformByIndex");
static_assert(offsetof(RigHierarchy_GetParentTransformByIndex, InElementIndex) == 0x000000, "Member 'RigHierarchy_GetParentTransformByIndex::InElementIndex' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetParentTransformByIndex, bInitial) == 0x000004, "Member 'RigHierarchy_GetParentTransformByIndex::bInitial' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetParentTransformByIndex, ReturnValue) == 0x000010, "Member 'RigHierarchy_GetParentTransformByIndex::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetParentWeight
// 0x0020 (0x0020 - 0x0000)
struct RigHierarchy_GetParentWeight final
{
public:
	struct FRigElementKey                         InChild;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         InParent;                                          // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementWeight                      ReturnValue;                                       // 0x0014(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_GetParentWeight) == 0x000004, "Wrong alignment on RigHierarchy_GetParentWeight");
static_assert(sizeof(RigHierarchy_GetParentWeight) == 0x000020, "Wrong size on RigHierarchy_GetParentWeight");
static_assert(offsetof(RigHierarchy_GetParentWeight, InChild) == 0x000000, "Member 'RigHierarchy_GetParentWeight::InChild' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetParentWeight, InParent) == 0x000008, "Member 'RigHierarchy_GetParentWeight::InParent' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetParentWeight, bInitial) == 0x000010, "Member 'RigHierarchy_GetParentWeight::bInitial' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetParentWeight, ReturnValue) == 0x000014, "Member 'RigHierarchy_GetParentWeight::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetParentWeightArray
// 0x0020 (0x0020 - 0x0000)
struct RigHierarchy_GetParentWeightArray final
{
public:
	struct FRigElementKey                         InChild;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementWeight>              ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_GetParentWeightArray) == 0x000008, "Wrong alignment on RigHierarchy_GetParentWeightArray");
static_assert(sizeof(RigHierarchy_GetParentWeightArray) == 0x000020, "Wrong size on RigHierarchy_GetParentWeightArray");
static_assert(offsetof(RigHierarchy_GetParentWeightArray, InChild) == 0x000000, "Member 'RigHierarchy_GetParentWeightArray::InChild' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetParentWeightArray, bInitial) == 0x000008, "Member 'RigHierarchy_GetParentWeightArray::bInitial' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetParentWeightArray, ReturnValue) == 0x000010, "Member 'RigHierarchy_GetParentWeightArray::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetPose
// 0x0078 (0x0078 - 0x0000)
struct RigHierarchy_GetPose final
{
public:
	bool                                          bInitial;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigPose                               ReturnValue;                                       // 0x0008(0x0070)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_GetPose) == 0x000008, "Wrong alignment on RigHierarchy_GetPose");
static_assert(sizeof(RigHierarchy_GetPose) == 0x000078, "Wrong size on RigHierarchy_GetPose");
static_assert(offsetof(RigHierarchy_GetPose, bInitial) == 0x000000, "Member 'RigHierarchy_GetPose::bInitial' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetPose, ReturnValue) == 0x000008, "Member 'RigHierarchy_GetPose::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetPreviousName
// 0x000C (0x000C - 0x0000)
struct RigHierarchy_GetPreviousName final
{
public:
	struct FRigElementKey                         InKey;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_GetPreviousName) == 0x000004, "Wrong alignment on RigHierarchy_GetPreviousName");
static_assert(sizeof(RigHierarchy_GetPreviousName) == 0x00000C, "Wrong size on RigHierarchy_GetPreviousName");
static_assert(offsetof(RigHierarchy_GetPreviousName, InKey) == 0x000000, "Member 'RigHierarchy_GetPreviousName::InKey' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetPreviousName, ReturnValue) == 0x000008, "Member 'RigHierarchy_GetPreviousName::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetPreviousParent
// 0x0010 (0x0010 - 0x0000)
struct RigHierarchy_GetPreviousParent final
{
public:
	struct FRigElementKey                         InKey;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_GetPreviousParent) == 0x000004, "Wrong alignment on RigHierarchy_GetPreviousParent");
static_assert(sizeof(RigHierarchy_GetPreviousParent) == 0x000010, "Wrong size on RigHierarchy_GetPreviousParent");
static_assert(offsetof(RigHierarchy_GetPreviousParent, InKey) == 0x000000, "Member 'RigHierarchy_GetPreviousParent::InKey' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetPreviousParent, ReturnValue) == 0x000008, "Member 'RigHierarchy_GetPreviousParent::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetReferenceKeys
// 0x0018 (0x0018 - 0x0000)
struct RigHierarchy_GetReferenceKeys final
{
public:
	bool                                          bTraverse;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_GetReferenceKeys) == 0x000008, "Wrong alignment on RigHierarchy_GetReferenceKeys");
static_assert(sizeof(RigHierarchy_GetReferenceKeys) == 0x000018, "Wrong size on RigHierarchy_GetReferenceKeys");
static_assert(offsetof(RigHierarchy_GetReferenceKeys, bTraverse) == 0x000000, "Member 'RigHierarchy_GetReferenceKeys::bTraverse' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetReferenceKeys, ReturnValue) == 0x000008, "Member 'RigHierarchy_GetReferenceKeys::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetRigidBodyKeys
// 0x0018 (0x0018 - 0x0000)
struct RigHierarchy_GetRigidBodyKeys final
{
public:
	bool                                          bTraverse;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_GetRigidBodyKeys) == 0x000008, "Wrong alignment on RigHierarchy_GetRigidBodyKeys");
static_assert(sizeof(RigHierarchy_GetRigidBodyKeys) == 0x000018, "Wrong size on RigHierarchy_GetRigidBodyKeys");
static_assert(offsetof(RigHierarchy_GetRigidBodyKeys, bTraverse) == 0x000000, "Member 'RigHierarchy_GetRigidBodyKeys::bTraverse' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetRigidBodyKeys, ReturnValue) == 0x000008, "Member 'RigHierarchy_GetRigidBodyKeys::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.GetSelectedKeys
// 0x0018 (0x0018 - 0x0000)
struct RigHierarchy_GetSelectedKeys final
{
public:
	ERigElementType                               InTypeFilter;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_GetSelectedKeys) == 0x000008, "Wrong alignment on RigHierarchy_GetSelectedKeys");
static_assert(sizeof(RigHierarchy_GetSelectedKeys) == 0x000018, "Wrong size on RigHierarchy_GetSelectedKeys");
static_assert(offsetof(RigHierarchy_GetSelectedKeys, InTypeFilter) == 0x000000, "Member 'RigHierarchy_GetSelectedKeys::InTypeFilter' has a wrong offset!");
static_assert(offsetof(RigHierarchy_GetSelectedKeys, ReturnValue) == 0x000008, "Member 'RigHierarchy_GetSelectedKeys::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.IsControllerAvailable
// 0x0001 (0x0001 - 0x0000)
struct RigHierarchy_IsControllerAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_IsControllerAvailable) == 0x000001, "Wrong alignment on RigHierarchy_IsControllerAvailable");
static_assert(sizeof(RigHierarchy_IsControllerAvailable) == 0x000001, "Wrong size on RigHierarchy_IsControllerAvailable");
static_assert(offsetof(RigHierarchy_IsControllerAvailable, ReturnValue) == 0x000000, "Member 'RigHierarchy_IsControllerAvailable::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.IsParentedTo
// 0x0014 (0x0014 - 0x0000)
struct RigHierarchy_IsParentedTo final
{
public:
	struct FRigElementKey                         InChild;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         InParent;                                          // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchy_IsParentedTo) == 0x000004, "Wrong alignment on RigHierarchy_IsParentedTo");
static_assert(sizeof(RigHierarchy_IsParentedTo) == 0x000014, "Wrong size on RigHierarchy_IsParentedTo");
static_assert(offsetof(RigHierarchy_IsParentedTo, InChild) == 0x000000, "Member 'RigHierarchy_IsParentedTo::InChild' has a wrong offset!");
static_assert(offsetof(RigHierarchy_IsParentedTo, InParent) == 0x000008, "Member 'RigHierarchy_IsParentedTo::InParent' has a wrong offset!");
static_assert(offsetof(RigHierarchy_IsParentedTo, ReturnValue) == 0x000010, "Member 'RigHierarchy_IsParentedTo::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.IsSelected
// 0x000C (0x000C - 0x0000)
struct RigHierarchy_IsSelected final
{
public:
	struct FRigElementKey                         InKey;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchy_IsSelected) == 0x000004, "Wrong alignment on RigHierarchy_IsSelected");
static_assert(sizeof(RigHierarchy_IsSelected) == 0x00000C, "Wrong size on RigHierarchy_IsSelected");
static_assert(offsetof(RigHierarchy_IsSelected, InKey) == 0x000000, "Member 'RigHierarchy_IsSelected::InKey' has a wrong offset!");
static_assert(offsetof(RigHierarchy_IsSelected, ReturnValue) == 0x000008, "Member 'RigHierarchy_IsSelected::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.IsSelectedByIndex
// 0x0008 (0x0008 - 0x0000)
struct RigHierarchy_IsSelectedByIndex final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchy_IsSelectedByIndex) == 0x000004, "Wrong alignment on RigHierarchy_IsSelectedByIndex");
static_assert(sizeof(RigHierarchy_IsSelectedByIndex) == 0x000008, "Wrong size on RigHierarchy_IsSelectedByIndex");
static_assert(offsetof(RigHierarchy_IsSelectedByIndex, InIndex) == 0x000000, "Member 'RigHierarchy_IsSelectedByIndex::InIndex' has a wrong offset!");
static_assert(offsetof(RigHierarchy_IsSelectedByIndex, ReturnValue) == 0x000004, "Member 'RigHierarchy_IsSelectedByIndex::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.IsValidIndex
// 0x0008 (0x0008 - 0x0000)
struct RigHierarchy_IsValidIndex final
{
public:
	int32                                         InElementIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchy_IsValidIndex) == 0x000004, "Wrong alignment on RigHierarchy_IsValidIndex");
static_assert(sizeof(RigHierarchy_IsValidIndex) == 0x000008, "Wrong size on RigHierarchy_IsValidIndex");
static_assert(offsetof(RigHierarchy_IsValidIndex, InElementIndex) == 0x000000, "Member 'RigHierarchy_IsValidIndex::InElementIndex' has a wrong offset!");
static_assert(offsetof(RigHierarchy_IsValidIndex, ReturnValue) == 0x000004, "Member 'RigHierarchy_IsValidIndex::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.Num
// 0x0004 (0x0004 - 0x0000)
struct RigHierarchy_Num final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_Num) == 0x000004, "Wrong alignment on RigHierarchy_Num");
static_assert(sizeof(RigHierarchy_Num) == 0x000004, "Wrong size on RigHierarchy_Num");
static_assert(offsetof(RigHierarchy_Num, ReturnValue) == 0x000000, "Member 'RigHierarchy_Num::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchy.SortKeys
// 0x0020 (0x0020 - 0x0000)
struct RigHierarchy_SortKeys final
{
public:
	TArray<struct FRigElementKey>                 InKeys;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FRigElementKey>                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchy_SortKeys) == 0x000008, "Wrong alignment on RigHierarchy_SortKeys");
static_assert(sizeof(RigHierarchy_SortKeys) == 0x000020, "Wrong size on RigHierarchy_SortKeys");
static_assert(offsetof(RigHierarchy_SortKeys, InKeys) == 0x000000, "Member 'RigHierarchy_SortKeys::InKeys' has a wrong offset!");
static_assert(offsetof(RigHierarchy_SortKeys, ReturnValue) == 0x000010, "Member 'RigHierarchy_SortKeys::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchyController.AddBone
// 0x0080 (0x0080 - 0x0000)
struct RigHierarchyController_AddBone final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         InParent;                                          // 0x0004(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InTransform;                                       // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bTransformInGlobal;                                // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERigBoneType                                  InBoneType;                                        // 0x0071(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetupUndo;                                        // 0x0072(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrintPythonCommand;                               // 0x0073(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         ReturnValue;                                       // 0x0074(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchyController_AddBone) == 0x000010, "Wrong alignment on RigHierarchyController_AddBone");
static_assert(sizeof(RigHierarchyController_AddBone) == 0x000080, "Wrong size on RigHierarchyController_AddBone");
static_assert(offsetof(RigHierarchyController_AddBone, InName) == 0x000000, "Member 'RigHierarchyController_AddBone::InName' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_AddBone, InParent) == 0x000004, "Member 'RigHierarchyController_AddBone::InParent' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_AddBone, InTransform) == 0x000010, "Member 'RigHierarchyController_AddBone::InTransform' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_AddBone, bTransformInGlobal) == 0x000070, "Member 'RigHierarchyController_AddBone::bTransformInGlobal' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_AddBone, InBoneType) == 0x000071, "Member 'RigHierarchyController_AddBone::InBoneType' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_AddBone, bSetupUndo) == 0x000072, "Member 'RigHierarchyController_AddBone::bSetupUndo' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_AddBone, bPrintPythonCommand) == 0x000073, "Member 'RigHierarchyController_AddBone::bPrintPythonCommand' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_AddBone, ReturnValue) == 0x000074, "Member 'RigHierarchyController_AddBone::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchyController.AddControl_ForBlueprint
// 0x0350 (0x0350 - 0x0000)
struct RigHierarchyController_AddControl_ForBlueprint final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         InParent;                                          // 0x0004(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigControlSettings                    InSettings;                                        // 0x0010(0x0240)(Parm, NativeAccessSpecifierPublic)
	struct FRigControlValue                       InValue;                                           // 0x0250(0x00F0)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bSetupUndo;                                        // 0x0340(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_341[0x3];                                      // 0x0341(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKey                         ReturnValue;                                       // 0x0344(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34C[0x4];                                      // 0x034C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchyController_AddControl_ForBlueprint) == 0x000010, "Wrong alignment on RigHierarchyController_AddControl_ForBlueprint");
static_assert(sizeof(RigHierarchyController_AddControl_ForBlueprint) == 0x000350, "Wrong size on RigHierarchyController_AddControl_ForBlueprint");
static_assert(offsetof(RigHierarchyController_AddControl_ForBlueprint, InName) == 0x000000, "Member 'RigHierarchyController_AddControl_ForBlueprint::InName' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_AddControl_ForBlueprint, InParent) == 0x000004, "Member 'RigHierarchyController_AddControl_ForBlueprint::InParent' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_AddControl_ForBlueprint, InSettings) == 0x000010, "Member 'RigHierarchyController_AddControl_ForBlueprint::InSettings' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_AddControl_ForBlueprint, InValue) == 0x000250, "Member 'RigHierarchyController_AddControl_ForBlueprint::InValue' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_AddControl_ForBlueprint, bSetupUndo) == 0x000340, "Member 'RigHierarchyController_AddControl_ForBlueprint::bSetupUndo' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_AddControl_ForBlueprint, ReturnValue) == 0x000344, "Member 'RigHierarchyController_AddControl_ForBlueprint::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchyController.AddCurve
// 0x0014 (0x0014 - 0x0000)
struct RigHierarchyController_AddCurve final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InValue;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetupUndo;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrintPythonCommand;                               // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKey                         ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchyController_AddCurve) == 0x000004, "Wrong alignment on RigHierarchyController_AddCurve");
static_assert(sizeof(RigHierarchyController_AddCurve) == 0x000014, "Wrong size on RigHierarchyController_AddCurve");
static_assert(offsetof(RigHierarchyController_AddCurve, InName) == 0x000000, "Member 'RigHierarchyController_AddCurve::InName' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_AddCurve, InValue) == 0x000004, "Member 'RigHierarchyController_AddCurve::InValue' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_AddCurve, bSetupUndo) == 0x000008, "Member 'RigHierarchyController_AddCurve::bSetupUndo' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_AddCurve, bPrintPythonCommand) == 0x000009, "Member 'RigHierarchyController_AddCurve::bPrintPythonCommand' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_AddCurve, ReturnValue) == 0x00000C, "Member 'RigHierarchyController_AddCurve::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchyController.AddNull
// 0x0080 (0x0080 - 0x0000)
struct RigHierarchyController_AddNull final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         InParent;                                          // 0x0004(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InTransform;                                       // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bTransformInGlobal;                                // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetupUndo;                                        // 0x0071(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrintPythonCommand;                               // 0x0072(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_73[0x1];                                       // 0x0073(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKey                         ReturnValue;                                       // 0x0074(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchyController_AddNull) == 0x000010, "Wrong alignment on RigHierarchyController_AddNull");
static_assert(sizeof(RigHierarchyController_AddNull) == 0x000080, "Wrong size on RigHierarchyController_AddNull");
static_assert(offsetof(RigHierarchyController_AddNull, InName) == 0x000000, "Member 'RigHierarchyController_AddNull::InName' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_AddNull, InParent) == 0x000004, "Member 'RigHierarchyController_AddNull::InParent' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_AddNull, InTransform) == 0x000010, "Member 'RigHierarchyController_AddNull::InTransform' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_AddNull, bTransformInGlobal) == 0x000070, "Member 'RigHierarchyController_AddNull::bTransformInGlobal' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_AddNull, bSetupUndo) == 0x000071, "Member 'RigHierarchyController_AddNull::bSetupUndo' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_AddNull, bPrintPythonCommand) == 0x000072, "Member 'RigHierarchyController_AddNull::bPrintPythonCommand' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_AddNull, ReturnValue) == 0x000074, "Member 'RigHierarchyController_AddNull::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchyController.AddParent
// 0x0018 (0x0018 - 0x0000)
struct RigHierarchyController_AddParent final
{
public:
	struct FRigElementKey                         InChild;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         InParent;                                          // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InWeight;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMaintainGlobalTransform;                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetupUndo;                                        // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0016(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchyController_AddParent) == 0x000004, "Wrong alignment on RigHierarchyController_AddParent");
static_assert(sizeof(RigHierarchyController_AddParent) == 0x000018, "Wrong size on RigHierarchyController_AddParent");
static_assert(offsetof(RigHierarchyController_AddParent, InChild) == 0x000000, "Member 'RigHierarchyController_AddParent::InChild' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_AddParent, InParent) == 0x000008, "Member 'RigHierarchyController_AddParent::InParent' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_AddParent, InWeight) == 0x000010, "Member 'RigHierarchyController_AddParent::InWeight' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_AddParent, bMaintainGlobalTransform) == 0x000014, "Member 'RigHierarchyController_AddParent::bMaintainGlobalTransform' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_AddParent, bSetupUndo) == 0x000015, "Member 'RigHierarchyController_AddParent::bSetupUndo' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_AddParent, ReturnValue) == 0x000016, "Member 'RigHierarchyController_AddParent::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchyController.AddRigidBody
// 0x0080 (0x0080 - 0x0000)
struct RigHierarchyController_AddRigidBody final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         InParent;                                          // 0x0004(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigRigidBodySettings                  InSettings;                                        // 0x000C(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             InLocalTransform;                                  // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bSetupUndo;                                        // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrintPythonCommand;                               // 0x0071(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKey                         ReturnValue;                                       // 0x0074(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchyController_AddRigidBody) == 0x000010, "Wrong alignment on RigHierarchyController_AddRigidBody");
static_assert(sizeof(RigHierarchyController_AddRigidBody) == 0x000080, "Wrong size on RigHierarchyController_AddRigidBody");
static_assert(offsetof(RigHierarchyController_AddRigidBody, InName) == 0x000000, "Member 'RigHierarchyController_AddRigidBody::InName' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_AddRigidBody, InParent) == 0x000004, "Member 'RigHierarchyController_AddRigidBody::InParent' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_AddRigidBody, InSettings) == 0x00000C, "Member 'RigHierarchyController_AddRigidBody::InSettings' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_AddRigidBody, InLocalTransform) == 0x000010, "Member 'RigHierarchyController_AddRigidBody::InLocalTransform' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_AddRigidBody, bSetupUndo) == 0x000070, "Member 'RigHierarchyController_AddRigidBody::bSetupUndo' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_AddRigidBody, bPrintPythonCommand) == 0x000071, "Member 'RigHierarchyController_AddRigidBody::bPrintPythonCommand' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_AddRigidBody, ReturnValue) == 0x000074, "Member 'RigHierarchyController_AddRigidBody::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchyController.ClearSelection
// 0x0001 (0x0001 - 0x0000)
struct RigHierarchyController_ClearSelection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchyController_ClearSelection) == 0x000001, "Wrong alignment on RigHierarchyController_ClearSelection");
static_assert(sizeof(RigHierarchyController_ClearSelection) == 0x000001, "Wrong size on RigHierarchyController_ClearSelection");
static_assert(offsetof(RigHierarchyController_ClearSelection, ReturnValue) == 0x000000, "Member 'RigHierarchyController_ClearSelection::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchyController.DeselectElement
// 0x000C (0x000C - 0x0000)
struct RigHierarchyController_DeselectElement final
{
public:
	struct FRigElementKey                         InKey;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchyController_DeselectElement) == 0x000004, "Wrong alignment on RigHierarchyController_DeselectElement");
static_assert(sizeof(RigHierarchyController_DeselectElement) == 0x00000C, "Wrong size on RigHierarchyController_DeselectElement");
static_assert(offsetof(RigHierarchyController_DeselectElement, InKey) == 0x000000, "Member 'RigHierarchyController_DeselectElement::InKey' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_DeselectElement, ReturnValue) == 0x000008, "Member 'RigHierarchyController_DeselectElement::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchyController.DuplicateElements
// 0x0028 (0x0028 - 0x0000)
struct RigHierarchyController_DuplicateElements final
{
public:
	TArray<struct FRigElementKey>                 InKeys;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bSelectNewElements;                                // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetupUndo;                                        // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrintPythonCommands;                              // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchyController_DuplicateElements) == 0x000008, "Wrong alignment on RigHierarchyController_DuplicateElements");
static_assert(sizeof(RigHierarchyController_DuplicateElements) == 0x000028, "Wrong size on RigHierarchyController_DuplicateElements");
static_assert(offsetof(RigHierarchyController_DuplicateElements, InKeys) == 0x000000, "Member 'RigHierarchyController_DuplicateElements::InKeys' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_DuplicateElements, bSelectNewElements) == 0x000010, "Member 'RigHierarchyController_DuplicateElements::bSelectNewElements' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_DuplicateElements, bSetupUndo) == 0x000011, "Member 'RigHierarchyController_DuplicateElements::bSetupUndo' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_DuplicateElements, bPrintPythonCommands) == 0x000012, "Member 'RigHierarchyController_DuplicateElements::bPrintPythonCommands' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_DuplicateElements, ReturnValue) == 0x000018, "Member 'RigHierarchyController_DuplicateElements::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchyController.ImportBones
// 0x0028 (0x0028 - 0x0000)
struct RigHierarchyController_ImportBones final
{
public:
	class USkeleton*                              InSkeleton;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InNameSpace;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReplaceExistingBones;                             // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveObsoleteBones;                              // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelectBones;                                      // 0x000E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetupUndo;                                        // 0x000F(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrintPythonCommand;                               // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchyController_ImportBones) == 0x000008, "Wrong alignment on RigHierarchyController_ImportBones");
static_assert(sizeof(RigHierarchyController_ImportBones) == 0x000028, "Wrong size on RigHierarchyController_ImportBones");
static_assert(offsetof(RigHierarchyController_ImportBones, InSkeleton) == 0x000000, "Member 'RigHierarchyController_ImportBones::InSkeleton' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_ImportBones, InNameSpace) == 0x000008, "Member 'RigHierarchyController_ImportBones::InNameSpace' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_ImportBones, bReplaceExistingBones) == 0x00000C, "Member 'RigHierarchyController_ImportBones::bReplaceExistingBones' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_ImportBones, bRemoveObsoleteBones) == 0x00000D, "Member 'RigHierarchyController_ImportBones::bRemoveObsoleteBones' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_ImportBones, bSelectBones) == 0x00000E, "Member 'RigHierarchyController_ImportBones::bSelectBones' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_ImportBones, bSetupUndo) == 0x00000F, "Member 'RigHierarchyController_ImportBones::bSetupUndo' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_ImportBones, bPrintPythonCommand) == 0x000010, "Member 'RigHierarchyController_ImportBones::bPrintPythonCommand' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_ImportBones, ReturnValue) == 0x000018, "Member 'RigHierarchyController_ImportBones::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchyController.ImportCurves
// 0x0020 (0x0020 - 0x0000)
struct RigHierarchyController_ImportCurves final
{
public:
	class USkeleton*                              InSkeleton;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InNameSpace;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelectCurves;                                     // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetupUndo;                                        // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrintPythonCommand;                               // 0x000E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchyController_ImportCurves) == 0x000008, "Wrong alignment on RigHierarchyController_ImportCurves");
static_assert(sizeof(RigHierarchyController_ImportCurves) == 0x000020, "Wrong size on RigHierarchyController_ImportCurves");
static_assert(offsetof(RigHierarchyController_ImportCurves, InSkeleton) == 0x000000, "Member 'RigHierarchyController_ImportCurves::InSkeleton' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_ImportCurves, InNameSpace) == 0x000008, "Member 'RigHierarchyController_ImportCurves::InNameSpace' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_ImportCurves, bSelectCurves) == 0x00000C, "Member 'RigHierarchyController_ImportCurves::bSelectCurves' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_ImportCurves, bSetupUndo) == 0x00000D, "Member 'RigHierarchyController_ImportCurves::bSetupUndo' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_ImportCurves, bPrintPythonCommand) == 0x00000E, "Member 'RigHierarchyController_ImportCurves::bPrintPythonCommand' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_ImportCurves, ReturnValue) == 0x000010, "Member 'RigHierarchyController_ImportCurves::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchyController.ImportFromText
// 0x0028 (0x0028 - 0x0000)
struct RigHierarchyController_ImportFromText final
{
public:
	class FString                                 InContent;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReplaceExistingElements;                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelectNewElements;                                // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetupUndo;                                        // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrintPythonCommands;                              // 0x0013(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchyController_ImportFromText) == 0x000008, "Wrong alignment on RigHierarchyController_ImportFromText");
static_assert(sizeof(RigHierarchyController_ImportFromText) == 0x000028, "Wrong size on RigHierarchyController_ImportFromText");
static_assert(offsetof(RigHierarchyController_ImportFromText, InContent) == 0x000000, "Member 'RigHierarchyController_ImportFromText::InContent' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_ImportFromText, bReplaceExistingElements) == 0x000010, "Member 'RigHierarchyController_ImportFromText::bReplaceExistingElements' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_ImportFromText, bSelectNewElements) == 0x000011, "Member 'RigHierarchyController_ImportFromText::bSelectNewElements' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_ImportFromText, bSetupUndo) == 0x000012, "Member 'RigHierarchyController_ImportFromText::bSetupUndo' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_ImportFromText, bPrintPythonCommands) == 0x000013, "Member 'RigHierarchyController_ImportFromText::bPrintPythonCommands' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_ImportFromText, ReturnValue) == 0x000018, "Member 'RigHierarchyController_ImportFromText::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchyController.MirrorElements
// 0x0050 (0x0050 - 0x0000)
struct RigHierarchyController_MirrorElements final
{
public:
	TArray<struct FRigElementKey>                 InKeys;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRigMirrorSettings                     InSettings;                                        // 0x0010(0x0028)(Parm, NativeAccessSpecifierPublic)
	bool                                          bSelectNewElements;                                // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetupUndo;                                        // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrintPythonCommands;                              // 0x003A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 ReturnValue;                                       // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchyController_MirrorElements) == 0x000008, "Wrong alignment on RigHierarchyController_MirrorElements");
static_assert(sizeof(RigHierarchyController_MirrorElements) == 0x000050, "Wrong size on RigHierarchyController_MirrorElements");
static_assert(offsetof(RigHierarchyController_MirrorElements, InKeys) == 0x000000, "Member 'RigHierarchyController_MirrorElements::InKeys' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_MirrorElements, InSettings) == 0x000010, "Member 'RigHierarchyController_MirrorElements::InSettings' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_MirrorElements, bSelectNewElements) == 0x000038, "Member 'RigHierarchyController_MirrorElements::bSelectNewElements' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_MirrorElements, bSetupUndo) == 0x000039, "Member 'RigHierarchyController_MirrorElements::bSetupUndo' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_MirrorElements, bPrintPythonCommands) == 0x00003A, "Member 'RigHierarchyController_MirrorElements::bPrintPythonCommands' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_MirrorElements, ReturnValue) == 0x000040, "Member 'RigHierarchyController_MirrorElements::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchyController.RemoveAllParents
// 0x000C (0x000C - 0x0000)
struct RigHierarchyController_RemoveAllParents final
{
public:
	struct FRigElementKey                         InChild;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMaintainGlobalTransform;                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetupUndo;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrintPythonCommand;                               // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000B(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchyController_RemoveAllParents) == 0x000004, "Wrong alignment on RigHierarchyController_RemoveAllParents");
static_assert(sizeof(RigHierarchyController_RemoveAllParents) == 0x00000C, "Wrong size on RigHierarchyController_RemoveAllParents");
static_assert(offsetof(RigHierarchyController_RemoveAllParents, InChild) == 0x000000, "Member 'RigHierarchyController_RemoveAllParents::InChild' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_RemoveAllParents, bMaintainGlobalTransform) == 0x000008, "Member 'RigHierarchyController_RemoveAllParents::bMaintainGlobalTransform' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_RemoveAllParents, bSetupUndo) == 0x000009, "Member 'RigHierarchyController_RemoveAllParents::bSetupUndo' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_RemoveAllParents, bPrintPythonCommand) == 0x00000A, "Member 'RigHierarchyController_RemoveAllParents::bPrintPythonCommand' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_RemoveAllParents, ReturnValue) == 0x00000B, "Member 'RigHierarchyController_RemoveAllParents::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchyController.RemoveElement
// 0x000C (0x000C - 0x0000)
struct RigHierarchyController_RemoveElement final
{
public:
	struct FRigElementKey                         InElement;                                         // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetupUndo;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrintPythonCommand;                               // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchyController_RemoveElement) == 0x000004, "Wrong alignment on RigHierarchyController_RemoveElement");
static_assert(sizeof(RigHierarchyController_RemoveElement) == 0x00000C, "Wrong size on RigHierarchyController_RemoveElement");
static_assert(offsetof(RigHierarchyController_RemoveElement, InElement) == 0x000000, "Member 'RigHierarchyController_RemoveElement::InElement' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_RemoveElement, bSetupUndo) == 0x000008, "Member 'RigHierarchyController_RemoveElement::bSetupUndo' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_RemoveElement, bPrintPythonCommand) == 0x000009, "Member 'RigHierarchyController_RemoveElement::bPrintPythonCommand' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_RemoveElement, ReturnValue) == 0x00000A, "Member 'RigHierarchyController_RemoveElement::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchyController.RemoveParent
// 0x0014 (0x0014 - 0x0000)
struct RigHierarchyController_RemoveParent final
{
public:
	struct FRigElementKey                         InChild;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         InParent;                                          // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMaintainGlobalTransform;                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetupUndo;                                        // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrintPythonCommand;                               // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0013(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchyController_RemoveParent) == 0x000004, "Wrong alignment on RigHierarchyController_RemoveParent");
static_assert(sizeof(RigHierarchyController_RemoveParent) == 0x000014, "Wrong size on RigHierarchyController_RemoveParent");
static_assert(offsetof(RigHierarchyController_RemoveParent, InChild) == 0x000000, "Member 'RigHierarchyController_RemoveParent::InChild' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_RemoveParent, InParent) == 0x000008, "Member 'RigHierarchyController_RemoveParent::InParent' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_RemoveParent, bMaintainGlobalTransform) == 0x000010, "Member 'RigHierarchyController_RemoveParent::bMaintainGlobalTransform' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_RemoveParent, bSetupUndo) == 0x000011, "Member 'RigHierarchyController_RemoveParent::bSetupUndo' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_RemoveParent, bPrintPythonCommand) == 0x000012, "Member 'RigHierarchyController_RemoveParent::bPrintPythonCommand' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_RemoveParent, ReturnValue) == 0x000013, "Member 'RigHierarchyController_RemoveParent::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchyController.RenameElement
// 0x0018 (0x0018 - 0x0000)
struct RigHierarchyController_RenameElement final
{
public:
	struct FRigElementKey                         InElement;                                         // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetupUndo;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrintPythonCommand;                               // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKey                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchyController_RenameElement) == 0x000004, "Wrong alignment on RigHierarchyController_RenameElement");
static_assert(sizeof(RigHierarchyController_RenameElement) == 0x000018, "Wrong size on RigHierarchyController_RenameElement");
static_assert(offsetof(RigHierarchyController_RenameElement, InElement) == 0x000000, "Member 'RigHierarchyController_RenameElement::InElement' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_RenameElement, InName) == 0x000008, "Member 'RigHierarchyController_RenameElement::InName' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_RenameElement, bSetupUndo) == 0x00000C, "Member 'RigHierarchyController_RenameElement::bSetupUndo' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_RenameElement, bPrintPythonCommand) == 0x00000D, "Member 'RigHierarchyController_RenameElement::bPrintPythonCommand' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_RenameElement, ReturnValue) == 0x000010, "Member 'RigHierarchyController_RenameElement::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchyController.SelectElement
// 0x000C (0x000C - 0x0000)
struct RigHierarchyController_SelectElement final
{
public:
	struct FRigElementKey                         InKey;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelect;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearSelection;                                   // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchyController_SelectElement) == 0x000004, "Wrong alignment on RigHierarchyController_SelectElement");
static_assert(sizeof(RigHierarchyController_SelectElement) == 0x00000C, "Wrong size on RigHierarchyController_SelectElement");
static_assert(offsetof(RigHierarchyController_SelectElement, InKey) == 0x000000, "Member 'RigHierarchyController_SelectElement::InKey' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_SelectElement, bSelect) == 0x000008, "Member 'RigHierarchyController_SelectElement::bSelect' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_SelectElement, bClearSelection) == 0x000009, "Member 'RigHierarchyController_SelectElement::bClearSelection' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_SelectElement, ReturnValue) == 0x00000A, "Member 'RigHierarchyController_SelectElement::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchyController.SetHierarchy
// 0x0008 (0x0008 - 0x0000)
struct RigHierarchyController_SetHierarchy final
{
public:
	class URigHierarchy*                          InHierarchy;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchyController_SetHierarchy) == 0x000008, "Wrong alignment on RigHierarchyController_SetHierarchy");
static_assert(sizeof(RigHierarchyController_SetHierarchy) == 0x000008, "Wrong size on RigHierarchyController_SetHierarchy");
static_assert(offsetof(RigHierarchyController_SetHierarchy, InHierarchy) == 0x000000, "Member 'RigHierarchyController_SetHierarchy::InHierarchy' has a wrong offset!");

// Function ControlRig.RigHierarchyController.SetParent
// 0x0014 (0x0014 - 0x0000)
struct RigHierarchyController_SetParent final
{
public:
	struct FRigElementKey                         InChild;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         InParent;                                          // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMaintainGlobalTransform;                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetupUndo;                                        // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrintPythonCommand;                               // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0013(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchyController_SetParent) == 0x000004, "Wrong alignment on RigHierarchyController_SetParent");
static_assert(sizeof(RigHierarchyController_SetParent) == 0x000014, "Wrong size on RigHierarchyController_SetParent");
static_assert(offsetof(RigHierarchyController_SetParent, InChild) == 0x000000, "Member 'RigHierarchyController_SetParent::InChild' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_SetParent, InParent) == 0x000008, "Member 'RigHierarchyController_SetParent::InParent' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_SetParent, bMaintainGlobalTransform) == 0x000010, "Member 'RigHierarchyController_SetParent::bMaintainGlobalTransform' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_SetParent, bSetupUndo) == 0x000011, "Member 'RigHierarchyController_SetParent::bSetupUndo' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_SetParent, bPrintPythonCommand) == 0x000012, "Member 'RigHierarchyController_SetParent::bPrintPythonCommand' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_SetParent, ReturnValue) == 0x000013, "Member 'RigHierarchyController_SetParent::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchyController.SetSelection
// 0x0018 (0x0018 - 0x0000)
struct RigHierarchyController_SetSelection final
{
public:
	TArray<struct FRigElementKey>                 InKeys;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bPrintPythonCommand;                               // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchyController_SetSelection) == 0x000008, "Wrong alignment on RigHierarchyController_SetSelection");
static_assert(sizeof(RigHierarchyController_SetSelection) == 0x000018, "Wrong size on RigHierarchyController_SetSelection");
static_assert(offsetof(RigHierarchyController_SetSelection, InKeys) == 0x000000, "Member 'RigHierarchyController_SetSelection::InKeys' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_SetSelection, bPrintPythonCommand) == 0x000010, "Member 'RigHierarchyController_SetSelection::bPrintPythonCommand' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_SetSelection, ReturnValue) == 0x000011, "Member 'RigHierarchyController_SetSelection::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchyController.ExportSelectionToText
// 0x0010 (0x0010 - 0x0000)
struct RigHierarchyController_ExportSelectionToText final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchyController_ExportSelectionToText) == 0x000008, "Wrong alignment on RigHierarchyController_ExportSelectionToText");
static_assert(sizeof(RigHierarchyController_ExportSelectionToText) == 0x000010, "Wrong size on RigHierarchyController_ExportSelectionToText");
static_assert(offsetof(RigHierarchyController_ExportSelectionToText, ReturnValue) == 0x000000, "Member 'RigHierarchyController_ExportSelectionToText::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchyController.ExportToText
// 0x0020 (0x0020 - 0x0000)
struct RigHierarchyController_ExportToText final
{
public:
	TArray<struct FRigElementKey>                 InKeys;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchyController_ExportToText) == 0x000008, "Wrong alignment on RigHierarchyController_ExportToText");
static_assert(sizeof(RigHierarchyController_ExportToText) == 0x000020, "Wrong size on RigHierarchyController_ExportToText");
static_assert(offsetof(RigHierarchyController_ExportToText, InKeys) == 0x000000, "Member 'RigHierarchyController_ExportToText::InKeys' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_ExportToText, ReturnValue) == 0x000010, "Member 'RigHierarchyController_ExportToText::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchyController.GetControlSettings
// 0x0250 (0x0250 - 0x0000)
struct RigHierarchyController_GetControlSettings final
{
public:
	struct FRigElementKey                         InKey;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigControlSettings                    ReturnValue;                                       // 0x0010(0x0240)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchyController_GetControlSettings) == 0x000010, "Wrong alignment on RigHierarchyController_GetControlSettings");
static_assert(sizeof(RigHierarchyController_GetControlSettings) == 0x000250, "Wrong size on RigHierarchyController_GetControlSettings");
static_assert(offsetof(RigHierarchyController_GetControlSettings, InKey) == 0x000000, "Member 'RigHierarchyController_GetControlSettings::InKey' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_GetControlSettings, ReturnValue) == 0x000010, "Member 'RigHierarchyController_GetControlSettings::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchyController.GetHierarchy
// 0x0008 (0x0008 - 0x0000)
struct RigHierarchyController_GetHierarchy final
{
public:
	class URigHierarchy*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RigHierarchyController_GetHierarchy) == 0x000008, "Wrong alignment on RigHierarchyController_GetHierarchy");
static_assert(sizeof(RigHierarchyController_GetHierarchy) == 0x000008, "Wrong size on RigHierarchyController_GetHierarchy");
static_assert(offsetof(RigHierarchyController_GetHierarchy, ReturnValue) == 0x000000, "Member 'RigHierarchyController_GetHierarchy::ReturnValue' has a wrong offset!");

// Function ControlRig.RigHierarchyController.SetControlSettings
// 0x0260 (0x0260 - 0x0000)
struct RigHierarchyController_SetControlSettings final
{
public:
	struct FRigElementKey                         InKey;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigControlSettings                    InSettings;                                        // 0x0010(0x0240)(Parm, NativeAccessSpecifierPublic)
	bool                                          bSetupUndo;                                        // 0x0250(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0251(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_252[0xE];                                      // 0x0252(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RigHierarchyController_SetControlSettings) == 0x000010, "Wrong alignment on RigHierarchyController_SetControlSettings");
static_assert(sizeof(RigHierarchyController_SetControlSettings) == 0x000260, "Wrong size on RigHierarchyController_SetControlSettings");
static_assert(offsetof(RigHierarchyController_SetControlSettings, InKey) == 0x000000, "Member 'RigHierarchyController_SetControlSettings::InKey' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_SetControlSettings, InSettings) == 0x000010, "Member 'RigHierarchyController_SetControlSettings::InSettings' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_SetControlSettings, bSetupUndo) == 0x000250, "Member 'RigHierarchyController_SetControlSettings::bSetupUndo' has a wrong offset!");
static_assert(offsetof(RigHierarchyController_SetControlSettings, ReturnValue) == 0x000251, "Member 'RigHierarchyController_SetControlSettings::ReturnValue' has a wrong offset!");

}

