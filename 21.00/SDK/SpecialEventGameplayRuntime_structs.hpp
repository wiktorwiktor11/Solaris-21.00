#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SpecialEventGameplayRuntime

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_0_structs.hpp"
#include "NetCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK
{

// Enum SpecialEventGameplayRuntime.EDestroyActorsAndComponentsMutator_ComponentNameComparisonType
// NumValues: 0x0007
enum class EDestroyActorsAndComponentsMutator_ComponentNameComparisonType : uint8
{
	NameEquals                               = 0,
	NameStartsWith                           = 1,
	NameContains                             = 2,
	AdditionalStatNameEquals                 = 3,
	AdditionalStatNameStartsWith             = 4,
	AdditionalStatNameContains               = 5,
	EDestroyActorsAndComponentsMutator_MAX   = 6,
};

// Enum SpecialEventGameplayRuntime.EFakeKillRelevancyPlayerKillStep
// NumValues: 0x0004
enum class EFakeKillRelevancyPlayerKillStep : uint8
{
	Initiated                                = 0,
	BlueprintNotified                        = 1,
	VisualsPerformed                         = 2,
	EFakeKillRelevancyPlayerKillStep_MAX     = 3,
};

// Enum SpecialEventGameplayRuntime.ESpecialEventTODMModifyType
// NumValues: 0x0006
enum class ESpecialEventTODMModifyType : uint8
{
	Keep                                     = 0,
	Hide                                     = 1,
	Show                                     = 2,
	Spawn                                    = 3,
	Persistent                               = 4,
	ESpecialEventTODMModifyType_MAX          = 5,
};

// Enum SpecialEventGameplayRuntime.EMutatorMovementMode
// NumValues: 0x0006
enum class EMutatorMovementMode : uint8
{
	None                                     = 0,
	BuffetBubbles                            = 21,
	BuffetBubblesIntro                       = 22,
	BuffetFlying                             = 23,
	BuffetFlyingRicochet                     = 24,
	EMutatorMovementMode_MAX                 = 25,
};

// Enum SpecialEventGameplayRuntime.EFortCustomTickComponentCondition
// NumValues: 0x0005
enum class EFortCustomTickComponentCondition : uint8
{
	WasRecentlyRendered                      = 0,
	CameraDistance                           = 1,
	LocalPlayerDistance                      = 2,
	Count                                    = 3,
	EFortCustomTickComponentCondition_MAX    = 4,
};

// Enum SpecialEventGameplayRuntime.ESpecialEventPhaseState
// NumValues: 0x0005
enum class ESpecialEventPhaseState : uint8
{
	Unregistered                             = 0,
	Inactive                                 = 1,
	Active                                   = 2,
	Deactivated                              = 3,
	ESpecialEventPhaseState_MAX              = 4,
};

// Enum SpecialEventGameplayRuntime.ESpecialEventPhaseComponentNetModeType
// NumValues: 0x0004
enum class ESpecialEventPhaseComponentNetModeType : uint8
{
	ClientControlled                         = 0,
	Client                                   = 1,
	DedicatedServer                          = 2,
	ESpecialEventPhaseComponentNetModeType_MAX = 3,
};

// ScriptStruct SpecialEventGameplayRuntime.DestroyActorsAndComponentsMutator_ComponentDefinition
// 0x0018 (0x0018 - 0x0000)
struct FDestroyActorsAndComponentsMutator_ComponentDefinition final
{
public:
	class FString                                 ComponentName;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDestroyActorsAndComponentsMutator_ComponentNameComparisonType NameComparisonType;                                // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDestroyOnServer;                                  // 0x0011(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDestroyOnClient;                                  // 0x0012(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPromoteChildrenOfDestroyedComponents;             // 0x0013(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDestroyActorsAndComponentsMutator_ComponentDefinition) == 0x000008, "Wrong alignment on FDestroyActorsAndComponentsMutator_ComponentDefinition");
static_assert(sizeof(FDestroyActorsAndComponentsMutator_ComponentDefinition) == 0x000018, "Wrong size on FDestroyActorsAndComponentsMutator_ComponentDefinition");
static_assert(offsetof(FDestroyActorsAndComponentsMutator_ComponentDefinition, ComponentName) == 0x000000, "Member 'FDestroyActorsAndComponentsMutator_ComponentDefinition::ComponentName' has a wrong offset!");
static_assert(offsetof(FDestroyActorsAndComponentsMutator_ComponentDefinition, NameComparisonType) == 0x000010, "Member 'FDestroyActorsAndComponentsMutator_ComponentDefinition::NameComparisonType' has a wrong offset!");
static_assert(offsetof(FDestroyActorsAndComponentsMutator_ComponentDefinition, bDestroyOnServer) == 0x000011, "Member 'FDestroyActorsAndComponentsMutator_ComponentDefinition::bDestroyOnServer' has a wrong offset!");
static_assert(offsetof(FDestroyActorsAndComponentsMutator_ComponentDefinition, bDestroyOnClient) == 0x000012, "Member 'FDestroyActorsAndComponentsMutator_ComponentDefinition::bDestroyOnClient' has a wrong offset!");
static_assert(offsetof(FDestroyActorsAndComponentsMutator_ComponentDefinition, bPromoteChildrenOfDestroyedComponents) == 0x000013, "Member 'FDestroyActorsAndComponentsMutator_ComponentDefinition::bPromoteChildrenOfDestroyedComponents' has a wrong offset!");

// ScriptStruct SpecialEventGameplayRuntime.BuffetBubblesDebugData
// 0x00F0 (0x00F0 - 0x0000)
struct alignas(0x10) FBuffetBubblesDebugData final
{
public:
	uint8                                         Pad_0[0xF0];                                       // 0x0000(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuffetBubblesDebugData) == 0x000010, "Wrong alignment on FBuffetBubblesDebugData");
static_assert(sizeof(FBuffetBubblesDebugData) == 0x0000F0, "Wrong size on FBuffetBubblesDebugData");

// ScriptStruct SpecialEventGameplayRuntime.SpecialClientEvent
// 0x0018 (0x0018 - 0x0000)
struct FSpecialClientEvent final
{
public:
	class AFortPlayerControllerAthena*            PlayerController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeSeconds;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EventTag;                                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpecialClientEvent) == 0x000008, "Wrong alignment on FSpecialClientEvent");
static_assert(sizeof(FSpecialClientEvent) == 0x000018, "Wrong size on FSpecialClientEvent");
static_assert(offsetof(FSpecialClientEvent, PlayerController) == 0x000000, "Member 'FSpecialClientEvent::PlayerController' has a wrong offset!");
static_assert(offsetof(FSpecialClientEvent, TimeSeconds) == 0x000008, "Member 'FSpecialClientEvent::TimeSeconds' has a wrong offset!");
static_assert(offsetof(FSpecialClientEvent, EventTag) == 0x00000C, "Member 'FSpecialClientEvent::EventTag' has a wrong offset!");
static_assert(offsetof(FSpecialClientEvent, Count) == 0x000010, "Member 'FSpecialClientEvent::Count' has a wrong offset!");

// ScriptStruct SpecialEventGameplayRuntime.FakeKillRelevancyPhaseData
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FFakeKillRelevancyPhaseData final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Reason;                                            // 0x0010(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumWavesExpected;                                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaveNum;                                           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelevancyDelay;                                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFakeKillRelevancyPhaseData) == 0x000008, "Wrong alignment on FFakeKillRelevancyPhaseData");
static_assert(sizeof(FFakeKillRelevancyPhaseData) == 0x000030, "Wrong size on FFakeKillRelevancyPhaseData");
static_assert(offsetof(FFakeKillRelevancyPhaseData, Reason) == 0x000010, "Member 'FFakeKillRelevancyPhaseData::Reason' has a wrong offset!");
static_assert(offsetof(FFakeKillRelevancyPhaseData, NumWavesExpected) == 0x000014, "Member 'FFakeKillRelevancyPhaseData::NumWavesExpected' has a wrong offset!");
static_assert(offsetof(FFakeKillRelevancyPhaseData, WaveNum) == 0x000018, "Member 'FFakeKillRelevancyPhaseData::WaveNum' has a wrong offset!");
static_assert(offsetof(FFakeKillRelevancyPhaseData, RelevancyDelay) == 0x00001C, "Member 'FFakeKillRelevancyPhaseData::RelevancyDelay' has a wrong offset!");

// ScriptStruct SpecialEventGameplayRuntime.SpecialEventStatDefinition
// 0x0010 (0x0010 - 0x0000)
struct FSpecialEventStatDefinition final
{
public:
	struct FGameplayTag                           LookupTag;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultValue;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpecialEventStatDefinition) == 0x000004, "Wrong alignment on FSpecialEventStatDefinition");
static_assert(sizeof(FSpecialEventStatDefinition) == 0x000010, "Wrong size on FSpecialEventStatDefinition");
static_assert(offsetof(FSpecialEventStatDefinition, LookupTag) == 0x000000, "Member 'FSpecialEventStatDefinition::LookupTag' has a wrong offset!");
static_assert(offsetof(FSpecialEventStatDefinition, Min) == 0x000004, "Member 'FSpecialEventStatDefinition::Min' has a wrong offset!");
static_assert(offsetof(FSpecialEventStatDefinition, Max) == 0x000008, "Member 'FSpecialEventStatDefinition::Max' has a wrong offset!");
static_assert(offsetof(FSpecialEventStatDefinition, DefaultValue) == 0x00000C, "Member 'FSpecialEventStatDefinition::DefaultValue' has a wrong offset!");

// ScriptStruct SpecialEventGameplayRuntime.SpecialEventStatArrayEntry
// 0x0034 (0x0040 - 0x000C)
struct FSpecialEventStatArrayEntry final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USpecialEventStatComponent*             StatComponent;                                     // 0x0010(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                 Owner;                                             // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         StatDefinitionIndex;                               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSpecialEventStatDefinition            StatDefinitionCopy;                                // 0x0024(0x0010)(BlueprintVisible, BlueprintReadOnly, RepSkip, NoDestructor, NativeAccessSpecifierPrivate)
	float                                         Value;                                             // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpecialEventStatArrayEntry) == 0x000008, "Wrong alignment on FSpecialEventStatArrayEntry");
static_assert(sizeof(FSpecialEventStatArrayEntry) == 0x000040, "Wrong size on FSpecialEventStatArrayEntry");
static_assert(offsetof(FSpecialEventStatArrayEntry, StatComponent) == 0x000010, "Member 'FSpecialEventStatArrayEntry::StatComponent' has a wrong offset!");
static_assert(offsetof(FSpecialEventStatArrayEntry, Owner) == 0x000018, "Member 'FSpecialEventStatArrayEntry::Owner' has a wrong offset!");
static_assert(offsetof(FSpecialEventStatArrayEntry, StatDefinitionIndex) == 0x000020, "Member 'FSpecialEventStatArrayEntry::StatDefinitionIndex' has a wrong offset!");
static_assert(offsetof(FSpecialEventStatArrayEntry, StatDefinitionCopy) == 0x000024, "Member 'FSpecialEventStatArrayEntry::StatDefinitionCopy' has a wrong offset!");
static_assert(offsetof(FSpecialEventStatArrayEntry, Value) == 0x000034, "Member 'FSpecialEventStatArrayEntry::Value' has a wrong offset!");

// ScriptStruct SpecialEventGameplayRuntime.FakeKillRelevancyVictim
// 0x0020 (0x0020 - 0x0000)
struct FFakeKillRelevancyVictim final
{
public:
	class AFortPlayerStateAthena*                 PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DeathLocation;                                     // 0x0008(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFakeKillRelevancyVictim) == 0x000008, "Wrong alignment on FFakeKillRelevancyVictim");
static_assert(sizeof(FFakeKillRelevancyVictim) == 0x000020, "Wrong size on FFakeKillRelevancyVictim");
static_assert(offsetof(FFakeKillRelevancyVictim, PlayerState) == 0x000000, "Member 'FFakeKillRelevancyVictim::PlayerState' has a wrong offset!");
static_assert(offsetof(FFakeKillRelevancyVictim, DeathLocation) == 0x000008, "Member 'FFakeKillRelevancyVictim::DeathLocation' has a wrong offset!");

// ScriptStruct SpecialEventGameplayRuntime.FakeKillRelevancyPlayerDataEntry
// 0x002C (0x0038 - 0x000C)
struct FFakeKillRelevancyPlayerDataEntry final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFakeKillRelevancyVictim>       Victims;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Reason;                                            // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PhaseNum;                                          // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaveNum;                                           // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelevancyDelay;                                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelevancyChangeServerWorldTime;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFakeKillRelevancyPlayerDataEntry) == 0x000008, "Wrong alignment on FFakeKillRelevancyPlayerDataEntry");
static_assert(sizeof(FFakeKillRelevancyPlayerDataEntry) == 0x000038, "Wrong size on FFakeKillRelevancyPlayerDataEntry");
static_assert(offsetof(FFakeKillRelevancyPlayerDataEntry, Victims) == 0x000010, "Member 'FFakeKillRelevancyPlayerDataEntry::Victims' has a wrong offset!");
static_assert(offsetof(FFakeKillRelevancyPlayerDataEntry, Reason) == 0x000020, "Member 'FFakeKillRelevancyPlayerDataEntry::Reason' has a wrong offset!");
static_assert(offsetof(FFakeKillRelevancyPlayerDataEntry, PhaseNum) == 0x000024, "Member 'FFakeKillRelevancyPlayerDataEntry::PhaseNum' has a wrong offset!");
static_assert(offsetof(FFakeKillRelevancyPlayerDataEntry, WaveNum) == 0x000028, "Member 'FFakeKillRelevancyPlayerDataEntry::WaveNum' has a wrong offset!");
static_assert(offsetof(FFakeKillRelevancyPlayerDataEntry, RelevancyDelay) == 0x00002C, "Member 'FFakeKillRelevancyPlayerDataEntry::RelevancyDelay' has a wrong offset!");
static_assert(offsetof(FFakeKillRelevancyPlayerDataEntry, RelevancyChangeServerWorldTime) == 0x000030, "Member 'FFakeKillRelevancyPlayerDataEntry::RelevancyChangeServerWorldTime' has a wrong offset!");

// ScriptStruct SpecialEventGameplayRuntime.FakeKillRelevancyPlayerDataArray
// 0x0018 (0x0120 - 0x0108)
struct FFakeKillRelevancyPlayerDataArray final : public FFastArraySerializer
{
public:
	TArray<struct FFakeKillRelevancyPlayerDataEntry> Entries;                                           // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UFortControllerComponent_FakeKillRelevancy* ControllerComponent;                               // 0x0118(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFakeKillRelevancyPlayerDataArray) == 0x000008, "Wrong alignment on FFakeKillRelevancyPlayerDataArray");
static_assert(sizeof(FFakeKillRelevancyPlayerDataArray) == 0x000120, "Wrong size on FFakeKillRelevancyPlayerDataArray");
static_assert(offsetof(FFakeKillRelevancyPlayerDataArray, Entries) == 0x000108, "Member 'FFakeKillRelevancyPlayerDataArray::Entries' has a wrong offset!");
static_assert(offsetof(FFakeKillRelevancyPlayerDataArray, ControllerComponent) == 0x000118, "Member 'FFakeKillRelevancyPlayerDataArray::ControllerComponent' has a wrong offset!");

// ScriptStruct SpecialEventGameplayRuntime.DestroyActorsAndComponentsMutator_ActorDefinition
// 0x0078 (0x0078 - 0x0000)
struct FDestroyActorsAndComponentsMutator_ActorDefinition final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Edit, DisableEditOnInstance, RepSkip, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   SoftActorClass;                                    // 0x0020(0x0028)(Edit, DisableEditOnInstance, RepSkip, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartEnabled;                                     // 0x0048(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDestroyActorOnServer;                             // 0x0049(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDestroyActorOnClient;                             // 0x004A(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNetForceOnActorDestroy;                           // 0x004B(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldModifyLevelOnActorDestroy;                  // 0x004C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDestroyActorsAndComponentsMutator_ComponentDefinition> ComponentDefinitions;                              // 0x0050(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, RepSkip, NativeAccessSpecifierPublic)
	bool                                          bCurrentlyEnabled;                                 // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPermanentlyDisabled;                              // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToProcess;                                   // 0x0068(0x0010)(ZeroConstructor, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDestroyActorsAndComponentsMutator_ActorDefinition) == 0x000008, "Wrong alignment on FDestroyActorsAndComponentsMutator_ActorDefinition");
static_assert(sizeof(FDestroyActorsAndComponentsMutator_ActorDefinition) == 0x000078, "Wrong size on FDestroyActorsAndComponentsMutator_ActorDefinition");
static_assert(offsetof(FDestroyActorsAndComponentsMutator_ActorDefinition, Tags) == 0x000000, "Member 'FDestroyActorsAndComponentsMutator_ActorDefinition::Tags' has a wrong offset!");
static_assert(offsetof(FDestroyActorsAndComponentsMutator_ActorDefinition, SoftActorClass) == 0x000020, "Member 'FDestroyActorsAndComponentsMutator_ActorDefinition::SoftActorClass' has a wrong offset!");
static_assert(offsetof(FDestroyActorsAndComponentsMutator_ActorDefinition, bStartEnabled) == 0x000048, "Member 'FDestroyActorsAndComponentsMutator_ActorDefinition::bStartEnabled' has a wrong offset!");
static_assert(offsetof(FDestroyActorsAndComponentsMutator_ActorDefinition, bDestroyActorOnServer) == 0x000049, "Member 'FDestroyActorsAndComponentsMutator_ActorDefinition::bDestroyActorOnServer' has a wrong offset!");
static_assert(offsetof(FDestroyActorsAndComponentsMutator_ActorDefinition, bDestroyActorOnClient) == 0x00004A, "Member 'FDestroyActorsAndComponentsMutator_ActorDefinition::bDestroyActorOnClient' has a wrong offset!");
static_assert(offsetof(FDestroyActorsAndComponentsMutator_ActorDefinition, bNetForceOnActorDestroy) == 0x00004B, "Member 'FDestroyActorsAndComponentsMutator_ActorDefinition::bNetForceOnActorDestroy' has a wrong offset!");
static_assert(offsetof(FDestroyActorsAndComponentsMutator_ActorDefinition, bShouldModifyLevelOnActorDestroy) == 0x00004C, "Member 'FDestroyActorsAndComponentsMutator_ActorDefinition::bShouldModifyLevelOnActorDestroy' has a wrong offset!");
static_assert(offsetof(FDestroyActorsAndComponentsMutator_ActorDefinition, ComponentDefinitions) == 0x000050, "Member 'FDestroyActorsAndComponentsMutator_ActorDefinition::ComponentDefinitions' has a wrong offset!");
static_assert(offsetof(FDestroyActorsAndComponentsMutator_ActorDefinition, bCurrentlyEnabled) == 0x000060, "Member 'FDestroyActorsAndComponentsMutator_ActorDefinition::bCurrentlyEnabled' has a wrong offset!");
static_assert(offsetof(FDestroyActorsAndComponentsMutator_ActorDefinition, bPermanentlyDisabled) == 0x000061, "Member 'FDestroyActorsAndComponentsMutator_ActorDefinition::bPermanentlyDisabled' has a wrong offset!");
static_assert(offsetof(FDestroyActorsAndComponentsMutator_ActorDefinition, ActorsToProcess) == 0x000068, "Member 'FDestroyActorsAndComponentsMutator_ActorDefinition::ActorsToProcess' has a wrong offset!");

// ScriptStruct SpecialEventGameplayRuntime.FakeKillRelevancyBucket
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FFakeKillRelevancyBucket final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFakeKillRelevancyBucket) == 0x000008, "Wrong alignment on FFakeKillRelevancyBucket");
static_assert(sizeof(FFakeKillRelevancyBucket) == 0x000010, "Wrong size on FFakeKillRelevancyBucket");

// ScriptStruct SpecialEventGameplayRuntime.FakeKillRelevancySupergroup
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FFakeKillRelevancySupergroup final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFakeKillRelevancySupergroup) == 0x000008, "Wrong alignment on FFakeKillRelevancySupergroup");
static_assert(sizeof(FFakeKillRelevancySupergroup) == 0x000020, "Wrong size on FFakeKillRelevancySupergroup");

// ScriptStruct SpecialEventGameplayRuntime.FakeKillRelevancyTestParameters
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FFakeKillRelevancyTestParameters final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFakeKillRelevancyTestParameters) == 0x000008, "Wrong alignment on FFakeKillRelevancyTestParameters");
static_assert(sizeof(FFakeKillRelevancyTestParameters) == 0x000038, "Wrong size on FFakeKillRelevancyTestParameters");

// ScriptStruct SpecialEventGameplayRuntime.SpecialEventMapData
// 0x0020 (0x0020 - 0x0000)
struct FSpecialEventMapData final
{
public:
	struct FGameplayTag                           MapTag;                                            // 0x0000(0x0004)(Edit, DisableEditOnInstance, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           MapNames;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, RepSkip, NativeAccessSpecifierPublic)
	bool                                          bReplicatedHasBeenUnloaded;                        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasBeenUnloaded;                                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpecialEventMapData) == 0x000008, "Wrong alignment on FSpecialEventMapData");
static_assert(sizeof(FSpecialEventMapData) == 0x000020, "Wrong size on FSpecialEventMapData");
static_assert(offsetof(FSpecialEventMapData, MapTag) == 0x000000, "Member 'FSpecialEventMapData::MapTag' has a wrong offset!");
static_assert(offsetof(FSpecialEventMapData, MapNames) == 0x000008, "Member 'FSpecialEventMapData::MapNames' has a wrong offset!");
static_assert(offsetof(FSpecialEventMapData, bReplicatedHasBeenUnloaded) == 0x000018, "Member 'FSpecialEventMapData::bReplicatedHasBeenUnloaded' has a wrong offset!");
static_assert(offsetof(FSpecialEventMapData, bHasBeenUnloaded) == 0x000019, "Member 'FSpecialEventMapData::bHasBeenUnloaded' has a wrong offset!");

// ScriptStruct SpecialEventGameplayRuntime.FortDelayRTMMData
// 0x0010 (0x0010 - 0x0000)
struct FFortDelayRTMMData final
{
public:
	bool                                          bDelayRTTM;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinRTTMDelay;                                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRTTMDelay;                                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timestamp;                                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortDelayRTMMData) == 0x000004, "Wrong alignment on FFortDelayRTMMData");
static_assert(sizeof(FFortDelayRTMMData) == 0x000010, "Wrong size on FFortDelayRTMMData");
static_assert(offsetof(FFortDelayRTMMData, bDelayRTTM) == 0x000000, "Member 'FFortDelayRTMMData::bDelayRTTM' has a wrong offset!");
static_assert(offsetof(FFortDelayRTMMData, MinRTTMDelay) == 0x000004, "Member 'FFortDelayRTMMData::MinRTTMDelay' has a wrong offset!");
static_assert(offsetof(FFortDelayRTMMData, MaxRTTMDelay) == 0x000008, "Member 'FFortDelayRTMMData::MaxRTTMDelay' has a wrong offset!");
static_assert(offsetof(FFortDelayRTMMData, Timestamp) == 0x00000C, "Member 'FFortDelayRTMMData::Timestamp' has a wrong offset!");

// ScriptStruct SpecialEventGameplayRuntime.FortSpecialEventGEData
// 0x0010 (0x0010 - 0x0000)
struct FFortSpecialEventGEData final
{
public:
	TSubclassOf<class UGameplayEffect>            GameplayEffect;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortSpecialEventGEData) == 0x000008, "Wrong alignment on FFortSpecialEventGEData");
static_assert(sizeof(FFortSpecialEventGEData) == 0x000010, "Wrong size on FFortSpecialEventGEData");
static_assert(offsetof(FFortSpecialEventGEData, GameplayEffect) == 0x000000, "Member 'FFortSpecialEventGEData::GameplayEffect' has a wrong offset!");
static_assert(offsetof(FFortSpecialEventGEData, Level) == 0x000008, "Member 'FFortSpecialEventGEData::Level' has a wrong offset!");

// ScriptStruct SpecialEventGameplayRuntime.FortSpecialEventOverrideParts
// 0x0020 (0x0020 - 0x0000)
struct FFortSpecialEventOverrideParts final
{
public:
	TArray<class UCustomCharacterPart*>           OverrideParts;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FFortSpecialEventGEData                GameplayEffectToApplyOnSwap;                       // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSpecialEventOverrideParts) == 0x000008, "Wrong alignment on FFortSpecialEventOverrideParts");
static_assert(sizeof(FFortSpecialEventOverrideParts) == 0x000020, "Wrong size on FFortSpecialEventOverrideParts");
static_assert(offsetof(FFortSpecialEventOverrideParts, OverrideParts) == 0x000000, "Member 'FFortSpecialEventOverrideParts::OverrideParts' has a wrong offset!");
static_assert(offsetof(FFortSpecialEventOverrideParts, GameplayEffectToApplyOnSwap) == 0x000010, "Member 'FFortSpecialEventOverrideParts::GameplayEffectToApplyOnSwap' has a wrong offset!");

// ScriptStruct SpecialEventGameplayRuntime.SpecialEventTODMSubphaseData
// 0x0018 (0x0018 - 0x0000)
struct FSpecialEventTODMSubphaseData final
{
public:
	float                                         PhaseTime;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpecialEventTODMModifyType                   ModifyType;                                        // 0x0004(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AFortTimeOfDayManager>      SpawnClass;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeOfDay;                                         // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedFactor;                                       // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpecialEventTODMSubphaseData) == 0x000008, "Wrong alignment on FSpecialEventTODMSubphaseData");
static_assert(sizeof(FSpecialEventTODMSubphaseData) == 0x000018, "Wrong size on FSpecialEventTODMSubphaseData");
static_assert(offsetof(FSpecialEventTODMSubphaseData, PhaseTime) == 0x000000, "Member 'FSpecialEventTODMSubphaseData::PhaseTime' has a wrong offset!");
static_assert(offsetof(FSpecialEventTODMSubphaseData, ModifyType) == 0x000004, "Member 'FSpecialEventTODMSubphaseData::ModifyType' has a wrong offset!");
static_assert(offsetof(FSpecialEventTODMSubphaseData, SpawnClass) == 0x000008, "Member 'FSpecialEventTODMSubphaseData::SpawnClass' has a wrong offset!");
static_assert(offsetof(FSpecialEventTODMSubphaseData, TimeOfDay) == 0x000010, "Member 'FSpecialEventTODMSubphaseData::TimeOfDay' has a wrong offset!");
static_assert(offsetof(FSpecialEventTODMSubphaseData, SpeedFactor) == 0x000014, "Member 'FSpecialEventTODMSubphaseData::SpeedFactor' has a wrong offset!");

// ScriptStruct SpecialEventGameplayRuntime.SpecialEventTODMPhaseData
// 0x0020 (0x0020 - 0x0000)
struct FSpecialEventTODMPhaseData final
{
public:
	struct FGameplayTag                           PhaseTag;                                          // 0x0000(0x0004)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSpecialEventTODMSubphaseData>  SubphaseDataArray;                                 // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpecialEventTODMPhaseData) == 0x000008, "Wrong alignment on FSpecialEventTODMPhaseData");
static_assert(sizeof(FSpecialEventTODMPhaseData) == 0x000020, "Wrong size on FSpecialEventTODMPhaseData");
static_assert(offsetof(FSpecialEventTODMPhaseData, PhaseTag) == 0x000000, "Member 'FSpecialEventTODMPhaseData::PhaseTag' has a wrong offset!");
static_assert(offsetof(FSpecialEventTODMPhaseData, SubphaseDataArray) == 0x000008, "Member 'FSpecialEventTODMPhaseData::SubphaseDataArray' has a wrong offset!");

// ScriptStruct SpecialEventGameplayRuntime.BuffetBubblesReplicatedData
// 0x0080 (0x0080 - 0x0000)
struct FBuffetBubblesReplicatedData final
{
public:
	struct FTransform                             RelativeTransform;                                 // 0x0000(0x0060)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                RelativeVelocity;                                  // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuffetBubblesReplicatedData) == 0x000010, "Wrong alignment on FBuffetBubblesReplicatedData");
static_assert(sizeof(FBuffetBubblesReplicatedData) == 0x000080, "Wrong size on FBuffetBubblesReplicatedData");
static_assert(offsetof(FBuffetBubblesReplicatedData, RelativeTransform) == 0x000000, "Member 'FBuffetBubblesReplicatedData::RelativeTransform' has a wrong offset!");
static_assert(offsetof(FBuffetBubblesReplicatedData, RelativeVelocity) == 0x000060, "Member 'FBuffetBubblesReplicatedData::RelativeVelocity' has a wrong offset!");

// ScriptStruct SpecialEventGameplayRuntime.BuffetFlyingRicochetReplicatedData
// 0x0020 (0x0020 - 0x0000)
struct FBuffetFlyingRicochetReplicatedData final
{
public:
	float                                         StartTime;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Velocity;                                          // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuffetFlyingRicochetReplicatedData) == 0x000008, "Wrong alignment on FBuffetFlyingRicochetReplicatedData");
static_assert(sizeof(FBuffetFlyingRicochetReplicatedData) == 0x000020, "Wrong size on FBuffetFlyingRicochetReplicatedData");
static_assert(offsetof(FBuffetFlyingRicochetReplicatedData, StartTime) == 0x000000, "Member 'FBuffetFlyingRicochetReplicatedData::StartTime' has a wrong offset!");
static_assert(offsetof(FBuffetFlyingRicochetReplicatedData, Velocity) == 0x000008, "Member 'FBuffetFlyingRicochetReplicatedData::Velocity' has a wrong offset!");

// ScriptStruct SpecialEventGameplayRuntime.CustomTickComonentQualitySettings
// 0x0014 (0x0014 - 0x0000)
struct FCustomTickComonentQualitySettings final
{
public:
	int32                                         NumFramesToSkipBetweenEvaluations;                 // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinFramesToSkipBetweenCustomTicks;                 // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxFramesToSkipBetweenCustomTicks;                 // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InnerDistance;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterDistance;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomTickComonentQualitySettings) == 0x000004, "Wrong alignment on FCustomTickComonentQualitySettings");
static_assert(sizeof(FCustomTickComonentQualitySettings) == 0x000014, "Wrong size on FCustomTickComonentQualitySettings");
static_assert(offsetof(FCustomTickComonentQualitySettings, NumFramesToSkipBetweenEvaluations) == 0x000000, "Member 'FCustomTickComonentQualitySettings::NumFramesToSkipBetweenEvaluations' has a wrong offset!");
static_assert(offsetof(FCustomTickComonentQualitySettings, MinFramesToSkipBetweenCustomTicks) == 0x000004, "Member 'FCustomTickComonentQualitySettings::MinFramesToSkipBetweenCustomTicks' has a wrong offset!");
static_assert(offsetof(FCustomTickComonentQualitySettings, MaxFramesToSkipBetweenCustomTicks) == 0x000008, "Member 'FCustomTickComonentQualitySettings::MaxFramesToSkipBetweenCustomTicks' has a wrong offset!");
static_assert(offsetof(FCustomTickComonentQualitySettings, InnerDistance) == 0x00000C, "Member 'FCustomTickComonentQualitySettings::InnerDistance' has a wrong offset!");
static_assert(offsetof(FCustomTickComonentQualitySettings, OuterDistance) == 0x000010, "Member 'FCustomTickComonentQualitySettings::OuterDistance' has a wrong offset!");

// ScriptStruct SpecialEventGameplayRuntime.SpecialEventAudioHapticsAction
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FSpecialEventAudioHapticsAction final
{
public:
	float                                         LoudnessFloor;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoudnessCeiling;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HapticsIntensity;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChannelIndex;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAffectsLeftLarge : 1;                             // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectsLeftSmall : 1;                             // 0x0010(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectsRightLarge : 1;                            // 0x0010(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectsRightSmall : 1;                            // 0x0010(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_11[0xF];                                       // 0x0011(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpecialEventAudioHapticsAction) == 0x000008, "Wrong alignment on FSpecialEventAudioHapticsAction");
static_assert(sizeof(FSpecialEventAudioHapticsAction) == 0x000020, "Wrong size on FSpecialEventAudioHapticsAction");
static_assert(offsetof(FSpecialEventAudioHapticsAction, LoudnessFloor) == 0x000000, "Member 'FSpecialEventAudioHapticsAction::LoudnessFloor' has a wrong offset!");
static_assert(offsetof(FSpecialEventAudioHapticsAction, LoudnessCeiling) == 0x000004, "Member 'FSpecialEventAudioHapticsAction::LoudnessCeiling' has a wrong offset!");
static_assert(offsetof(FSpecialEventAudioHapticsAction, HapticsIntensity) == 0x000008, "Member 'FSpecialEventAudioHapticsAction::HapticsIntensity' has a wrong offset!");
static_assert(offsetof(FSpecialEventAudioHapticsAction, ChannelIndex) == 0x00000C, "Member 'FSpecialEventAudioHapticsAction::ChannelIndex' has a wrong offset!");

// ScriptStruct SpecialEventGameplayRuntime.SpecialEventMathEaseData
// 0x000C (0x000C - 0x0000)
struct FSpecialEventMathEaseData final
{
public:
	EEasingFunc                                   EasingFunc;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Steps;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpecialEventMathEaseData) == 0x000004, "Wrong alignment on FSpecialEventMathEaseData");
static_assert(sizeof(FSpecialEventMathEaseData) == 0x00000C, "Wrong size on FSpecialEventMathEaseData");
static_assert(offsetof(FSpecialEventMathEaseData, EasingFunc) == 0x000000, "Member 'FSpecialEventMathEaseData::EasingFunc' has a wrong offset!");
static_assert(offsetof(FSpecialEventMathEaseData, BlendExp) == 0x000004, "Member 'FSpecialEventMathEaseData::BlendExp' has a wrong offset!");
static_assert(offsetof(FSpecialEventMathEaseData, Steps) == 0x000008, "Member 'FSpecialEventMathEaseData::Steps' has a wrong offset!");

// ScriptStruct SpecialEventGameplayRuntime.SpecialEventCursorMode
// 0x0298 (0x0298 - 0x0000)
struct FSpecialEventCursorMode final
{
public:
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSpecialEventMathEaseData              GamepadMoveEaseData;                               // 0x0008(0x000C)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         GamepadMoveSpeed;                                  // 0x0018(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSpecialEventMathEaseData              TouchMoveEaseData;                                 // 0x0040(0x000C)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         TouchMoveSpeed;                                    // 0x0050(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         TouchDeadzoneTreshold;                             // 0x0078(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TouchAttenuator;                                   // 0x007C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MinCursorPercentForAdditiveRotationPitch;          // 0x0080(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MinCursorPercentForAdditiveRotationYaw;            // 0x00A8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MaxAdditiveRotationPitch;                          // 0x00D0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MaxAdditiveRotationYaw;                            // 0x00F8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         AdditiveRotationInterpSpeed;                       // 0x0120(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         ZoomInInterpSpeed;                                 // 0x0148(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         ZoomOutInterpSpeed;                                // 0x0170(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         ZoomAdditiveFOV;                                   // 0x0198(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         GamepadZoomMoveSpeed;                              // 0x01C0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         TouchZoomMoveSpeed;                                // 0x01E8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	ECollisionChannel                             TraceChannel;                                      // 0x0210(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_211[0x7];                                      // 0x0211(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         SweepRadius;                                       // 0x0218(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         TraceDistance;                                     // 0x0240(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         bTraceComplex;                                     // 0x0268(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_290[0x8];                                      // 0x0290(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpecialEventCursorMode) == 0x000008, "Wrong alignment on FSpecialEventCursorMode");
static_assert(sizeof(FSpecialEventCursorMode) == 0x000298, "Wrong size on FSpecialEventCursorMode");
static_assert(offsetof(FSpecialEventCursorMode, WidgetClass) == 0x000000, "Member 'FSpecialEventCursorMode::WidgetClass' has a wrong offset!");
static_assert(offsetof(FSpecialEventCursorMode, GamepadMoveEaseData) == 0x000008, "Member 'FSpecialEventCursorMode::GamepadMoveEaseData' has a wrong offset!");
static_assert(offsetof(FSpecialEventCursorMode, GamepadMoveSpeed) == 0x000018, "Member 'FSpecialEventCursorMode::GamepadMoveSpeed' has a wrong offset!");
static_assert(offsetof(FSpecialEventCursorMode, TouchMoveEaseData) == 0x000040, "Member 'FSpecialEventCursorMode::TouchMoveEaseData' has a wrong offset!");
static_assert(offsetof(FSpecialEventCursorMode, TouchMoveSpeed) == 0x000050, "Member 'FSpecialEventCursorMode::TouchMoveSpeed' has a wrong offset!");
static_assert(offsetof(FSpecialEventCursorMode, TouchDeadzoneTreshold) == 0x000078, "Member 'FSpecialEventCursorMode::TouchDeadzoneTreshold' has a wrong offset!");
static_assert(offsetof(FSpecialEventCursorMode, TouchAttenuator) == 0x00007C, "Member 'FSpecialEventCursorMode::TouchAttenuator' has a wrong offset!");
static_assert(offsetof(FSpecialEventCursorMode, MinCursorPercentForAdditiveRotationPitch) == 0x000080, "Member 'FSpecialEventCursorMode::MinCursorPercentForAdditiveRotationPitch' has a wrong offset!");
static_assert(offsetof(FSpecialEventCursorMode, MinCursorPercentForAdditiveRotationYaw) == 0x0000A8, "Member 'FSpecialEventCursorMode::MinCursorPercentForAdditiveRotationYaw' has a wrong offset!");
static_assert(offsetof(FSpecialEventCursorMode, MaxAdditiveRotationPitch) == 0x0000D0, "Member 'FSpecialEventCursorMode::MaxAdditiveRotationPitch' has a wrong offset!");
static_assert(offsetof(FSpecialEventCursorMode, MaxAdditiveRotationYaw) == 0x0000F8, "Member 'FSpecialEventCursorMode::MaxAdditiveRotationYaw' has a wrong offset!");
static_assert(offsetof(FSpecialEventCursorMode, AdditiveRotationInterpSpeed) == 0x000120, "Member 'FSpecialEventCursorMode::AdditiveRotationInterpSpeed' has a wrong offset!");
static_assert(offsetof(FSpecialEventCursorMode, ZoomInInterpSpeed) == 0x000148, "Member 'FSpecialEventCursorMode::ZoomInInterpSpeed' has a wrong offset!");
static_assert(offsetof(FSpecialEventCursorMode, ZoomOutInterpSpeed) == 0x000170, "Member 'FSpecialEventCursorMode::ZoomOutInterpSpeed' has a wrong offset!");
static_assert(offsetof(FSpecialEventCursorMode, ZoomAdditiveFOV) == 0x000198, "Member 'FSpecialEventCursorMode::ZoomAdditiveFOV' has a wrong offset!");
static_assert(offsetof(FSpecialEventCursorMode, GamepadZoomMoveSpeed) == 0x0001C0, "Member 'FSpecialEventCursorMode::GamepadZoomMoveSpeed' has a wrong offset!");
static_assert(offsetof(FSpecialEventCursorMode, TouchZoomMoveSpeed) == 0x0001E8, "Member 'FSpecialEventCursorMode::TouchZoomMoveSpeed' has a wrong offset!");
static_assert(offsetof(FSpecialEventCursorMode, TraceChannel) == 0x000210, "Member 'FSpecialEventCursorMode::TraceChannel' has a wrong offset!");
static_assert(offsetof(FSpecialEventCursorMode, SweepRadius) == 0x000218, "Member 'FSpecialEventCursorMode::SweepRadius' has a wrong offset!");
static_assert(offsetof(FSpecialEventCursorMode, TraceDistance) == 0x000240, "Member 'FSpecialEventCursorMode::TraceDistance' has a wrong offset!");
static_assert(offsetof(FSpecialEventCursorMode, bTraceComplex) == 0x000268, "Member 'FSpecialEventCursorMode::bTraceComplex' has a wrong offset!");

// ScriptStruct SpecialEventGameplayRuntime.SpecialEventCursorStackEntry
// 0x000C (0x000C - 0x0000)
struct FSpecialEventCursorStackEntry final
{
public:
	struct FGameplayTag                           CursorModeTag;                                     // 0x0000(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UObject>                 InstigatingObject;                                 // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpecialEventCursorStackEntry) == 0x000004, "Wrong alignment on FSpecialEventCursorStackEntry");
static_assert(sizeof(FSpecialEventCursorStackEntry) == 0x00000C, "Wrong size on FSpecialEventCursorStackEntry");
static_assert(offsetof(FSpecialEventCursorStackEntry, CursorModeTag) == 0x000000, "Member 'FSpecialEventCursorStackEntry::CursorModeTag' has a wrong offset!");
static_assert(offsetof(FSpecialEventCursorStackEntry, InstigatingObject) == 0x000004, "Member 'FSpecialEventCursorStackEntry::InstigatingObject' has a wrong offset!");

// ScriptStruct SpecialEventGameplayRuntime.SpecialEventPhaseComponentNetModeInfo
// 0x0010 (0x0010 - 0x0000)
struct FSpecialEventPhaseComponentNetModeInfo final
{
public:
	ESpecialEventPhaseComponentNetModeType        NetModeType;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UActorComponent>            ComponentClass;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpecialEventPhaseComponentNetModeInfo) == 0x000008, "Wrong alignment on FSpecialEventPhaseComponentNetModeInfo");
static_assert(sizeof(FSpecialEventPhaseComponentNetModeInfo) == 0x000010, "Wrong size on FSpecialEventPhaseComponentNetModeInfo");
static_assert(offsetof(FSpecialEventPhaseComponentNetModeInfo, NetModeType) == 0x000000, "Member 'FSpecialEventPhaseComponentNetModeInfo::NetModeType' has a wrong offset!");
static_assert(offsetof(FSpecialEventPhaseComponentNetModeInfo, ComponentClass) == 0x000008, "Member 'FSpecialEventPhaseComponentNetModeInfo::ComponentClass' has a wrong offset!");

// ScriptStruct SpecialEventGameplayRuntime.PhaseLevelEntry
// 0x00B8 (0x00B8 - 0x0000)
struct FPhaseLevelEntry final
{
public:
	TSoftObjectPtr<class UWorld>                  LevelToLoad;                                       // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LevelName;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoadLevelOnScriptStart;                           // 0x0038(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLevelStartsVisible;                               // 0x0039(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnloadLevelOnPhaseEnd;                            // 0x003A(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludeFromServerPreload;                         // 0x003B(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMakeVisibleOnPhaseStart;                          // 0x003C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  MakeVisibleAtPhaseTags;                            // 0x0040(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  UnloadLevelAtPhaseTags;                            // 0x0060(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0080(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0098(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class ULevelStreamingDynamic*                 LevelInstance;                                     // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhaseLevelEntry) == 0x000008, "Wrong alignment on FPhaseLevelEntry");
static_assert(sizeof(FPhaseLevelEntry) == 0x0000B8, "Wrong size on FPhaseLevelEntry");
static_assert(offsetof(FPhaseLevelEntry, LevelToLoad) == 0x000000, "Member 'FPhaseLevelEntry::LevelToLoad' has a wrong offset!");
static_assert(offsetof(FPhaseLevelEntry, LevelName) == 0x000028, "Member 'FPhaseLevelEntry::LevelName' has a wrong offset!");
static_assert(offsetof(FPhaseLevelEntry, bLoadLevelOnScriptStart) == 0x000038, "Member 'FPhaseLevelEntry::bLoadLevelOnScriptStart' has a wrong offset!");
static_assert(offsetof(FPhaseLevelEntry, bLevelStartsVisible) == 0x000039, "Member 'FPhaseLevelEntry::bLevelStartsVisible' has a wrong offset!");
static_assert(offsetof(FPhaseLevelEntry, bUnloadLevelOnPhaseEnd) == 0x00003A, "Member 'FPhaseLevelEntry::bUnloadLevelOnPhaseEnd' has a wrong offset!");
static_assert(offsetof(FPhaseLevelEntry, bExcludeFromServerPreload) == 0x00003B, "Member 'FPhaseLevelEntry::bExcludeFromServerPreload' has a wrong offset!");
static_assert(offsetof(FPhaseLevelEntry, bMakeVisibleOnPhaseStart) == 0x00003C, "Member 'FPhaseLevelEntry::bMakeVisibleOnPhaseStart' has a wrong offset!");
static_assert(offsetof(FPhaseLevelEntry, MakeVisibleAtPhaseTags) == 0x000040, "Member 'FPhaseLevelEntry::MakeVisibleAtPhaseTags' has a wrong offset!");
static_assert(offsetof(FPhaseLevelEntry, UnloadLevelAtPhaseTags) == 0x000060, "Member 'FPhaseLevelEntry::UnloadLevelAtPhaseTags' has a wrong offset!");
static_assert(offsetof(FPhaseLevelEntry, Location) == 0x000080, "Member 'FPhaseLevelEntry::Location' has a wrong offset!");
static_assert(offsetof(FPhaseLevelEntry, Rotation) == 0x000098, "Member 'FPhaseLevelEntry::Rotation' has a wrong offset!");
static_assert(offsetof(FPhaseLevelEntry, LevelInstance) == 0x0000B0, "Member 'FPhaseLevelEntry::LevelInstance' has a wrong offset!");

// ScriptStruct SpecialEventGameplayRuntime.PhaseInfo
// 0x0058 (0x0058 - 0x0000)
struct FPhaseInfo final
{
public:
	TSubclassOf<class ASpecialEventPhase>         PhaseActorClass;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PhaseTag;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SequenceTime;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetRelevancyMode;                                 // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpecialRelevancyMode                         RelevancyMode;                                     // 0x0011(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumOfSquadsInRelevancyGroup;                       // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequireLevelsFromPhaseTags;                        // 0x0018(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bStartNextPhaseOnPhaseFinished;                    // 0x0038(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGarbageCollectAtPhaseStartOnServer;               // 0x0039(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGarbageCollectAtPhaseStartOnClient;               // 0x003A(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPhaseLevelEntry>               Levels;                                            // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class ASpecialEventPhase*                     PhaseActor;                                        // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhaseInfo) == 0x000008, "Wrong alignment on FPhaseInfo");
static_assert(sizeof(FPhaseInfo) == 0x000058, "Wrong size on FPhaseInfo");
static_assert(offsetof(FPhaseInfo, PhaseActorClass) == 0x000000, "Member 'FPhaseInfo::PhaseActorClass' has a wrong offset!");
static_assert(offsetof(FPhaseInfo, PhaseTag) == 0x000008, "Member 'FPhaseInfo::PhaseTag' has a wrong offset!");
static_assert(offsetof(FPhaseInfo, SequenceTime) == 0x00000C, "Member 'FPhaseInfo::SequenceTime' has a wrong offset!");
static_assert(offsetof(FPhaseInfo, bSetRelevancyMode) == 0x000010, "Member 'FPhaseInfo::bSetRelevancyMode' has a wrong offset!");
static_assert(offsetof(FPhaseInfo, RelevancyMode) == 0x000011, "Member 'FPhaseInfo::RelevancyMode' has a wrong offset!");
static_assert(offsetof(FPhaseInfo, NumOfSquadsInRelevancyGroup) == 0x000014, "Member 'FPhaseInfo::NumOfSquadsInRelevancyGroup' has a wrong offset!");
static_assert(offsetof(FPhaseInfo, RequireLevelsFromPhaseTags) == 0x000018, "Member 'FPhaseInfo::RequireLevelsFromPhaseTags' has a wrong offset!");
static_assert(offsetof(FPhaseInfo, bStartNextPhaseOnPhaseFinished) == 0x000038, "Member 'FPhaseInfo::bStartNextPhaseOnPhaseFinished' has a wrong offset!");
static_assert(offsetof(FPhaseInfo, bGarbageCollectAtPhaseStartOnServer) == 0x000039, "Member 'FPhaseInfo::bGarbageCollectAtPhaseStartOnServer' has a wrong offset!");
static_assert(offsetof(FPhaseInfo, bGarbageCollectAtPhaseStartOnClient) == 0x00003A, "Member 'FPhaseInfo::bGarbageCollectAtPhaseStartOnClient' has a wrong offset!");
static_assert(offsetof(FPhaseInfo, Levels) == 0x000040, "Member 'FPhaseInfo::Levels' has a wrong offset!");
static_assert(offsetof(FPhaseInfo, PhaseActor) == 0x000050, "Member 'FPhaseInfo::PhaseActor' has a wrong offset!");

// ScriptStruct SpecialEventGameplayRuntime.SpecialEventStatArray
// 0x0018 (0x0120 - 0x0108)
struct FSpecialEventStatArray final : public FFastArraySerializer
{
public:
	TArray<struct FSpecialEventStatArrayEntry>    Stats;                                             // 0x0108(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class USpecialEventStatComponent*             StatComponent;                                     // 0x0118(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FSpecialEventStatArray) == 0x000008, "Wrong alignment on FSpecialEventStatArray");
static_assert(sizeof(FSpecialEventStatArray) == 0x000120, "Wrong size on FSpecialEventStatArray");
static_assert(offsetof(FSpecialEventStatArray, Stats) == 0x000108, "Member 'FSpecialEventStatArray::Stats' has a wrong offset!");
static_assert(offsetof(FSpecialEventStatArray, StatComponent) == 0x000118, "Member 'FSpecialEventStatArray::StatComponent' has a wrong offset!");

}

