#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AthenaEquippedItemReticleWidget

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteUI_structs.hpp"
#include "FortniteUI_classes.hpp"
#include "UMG_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass AthenaEquippedItemReticleWidget.AthenaEquippedItemReticleWidget_C
// 0x0088 (0x0468 - 0x03E0)
class UAthenaEquippedItemReticleWidget_C final : public UAthenaEquippedItemBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       FadeOut;                                           // 0x03E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Reload;                                            // 0x03F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UCommonBorder*                          CommonBorder_AmmoCounter;                          // 0x03F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_AmmoMeter;                                   // 0x0400(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FLinearColor                           OutOfAmmoColor;                                    // 0x0408(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxAmmo;                                           // 0x0418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41C[0x4];                                      // 0x041C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               AmmoCounterMID;                                    // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReloadAnimationLength;                             // 0x0428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LowAmmoPercentage;                                 // 0x042C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Icons_Size;                                        // 0x0430(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           FadeOutHandle;                                     // 0x0440(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         TimeToOutro;                                       // 0x0448(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentAmmoPercent;                                // 0x044C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHoldingSecondaryFire;                            // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_451[0x7];                                      // 0x0451(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortWeapon*                            EquippedWeapon;                                    // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanOverheat;                                       // 0x0460(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BP_HandleAmmoCountChanged(int32 MagazineAmmoCount, int32 SurplusAmmoCount, int32 TotalRemaining);
	void BP_HandleHasBulletsPerClipChanged(bool bHasBulletsPerClip);
	void BP_HandleSecondaryFirePressed();
	void BP_HandleSecondaryFireReleased();
	void BP_HandleWeaponEquipped(class AFortWeapon* NewWeapon, class AFortWeapon* PrevWeapon);
	void BP_HandleWeaponModeChanged(EEquippedWeaponDisplay Mode);
	void BP_HandleWeaponOverheatValueChanged(float CurrentValue, float MaxValue, EFortWeaponOverheatState State, bool bIsInCooldown);
	void BP_HandleWeaponReloadCancelled(class AFortWeapon* Weapon);
	void BP_HandleWeaponReloadStarted(float ReloadTime, EFortWeaponReloadType ReloadType);
	void BP_HandleWeaponTargetingChanged(bool bIsTargeting);
	void Construct();
	void Event_Outro();
	void EventFadeOut();
	void EventHideReloadParams();
	void EventReloadFinished();
	void ExecuteUbergraph_AthenaEquippedItemReticleWidget(int32 EntryPoint);
	void HideReloadParams();
	void OnHUDVisibilityRefreshed();
	void OnInitialized();
	void UpdateAmmoCount(int32 MagazineAmmoCount, int32 SurplusAmmoCount, int32 TotalRemaining);
	void UpdateForWeapon(class AFortWeapon* NewWeapon);
	void UpdateGaugeValue(class AFortWeapon* Weapon);
	void UpdateOverheatValue(float Current, float Max, EFortWeaponOverheatState State, bool IsInCooldown);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AthenaEquippedItemReticleWidget_C">();
	}
	static class UAthenaEquippedItemReticleWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaEquippedItemReticleWidget_C>();
	}
};
static_assert(alignof(UAthenaEquippedItemReticleWidget_C) == 0x000008, "Wrong alignment on UAthenaEquippedItemReticleWidget_C");
static_assert(sizeof(UAthenaEquippedItemReticleWidget_C) == 0x000468, "Wrong size on UAthenaEquippedItemReticleWidget_C");
static_assert(offsetof(UAthenaEquippedItemReticleWidget_C, UberGraphFrame) == 0x0003E0, "Member 'UAthenaEquippedItemReticleWidget_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAthenaEquippedItemReticleWidget_C, FadeOut) == 0x0003E8, "Member 'UAthenaEquippedItemReticleWidget_C::FadeOut' has a wrong offset!");
static_assert(offsetof(UAthenaEquippedItemReticleWidget_C, Reload) == 0x0003F0, "Member 'UAthenaEquippedItemReticleWidget_C::Reload' has a wrong offset!");
static_assert(offsetof(UAthenaEquippedItemReticleWidget_C, CommonBorder_AmmoCounter) == 0x0003F8, "Member 'UAthenaEquippedItemReticleWidget_C::CommonBorder_AmmoCounter' has a wrong offset!");
static_assert(offsetof(UAthenaEquippedItemReticleWidget_C, Image_AmmoMeter) == 0x000400, "Member 'UAthenaEquippedItemReticleWidget_C::Image_AmmoMeter' has a wrong offset!");
static_assert(offsetof(UAthenaEquippedItemReticleWidget_C, OutOfAmmoColor) == 0x000408, "Member 'UAthenaEquippedItemReticleWidget_C::OutOfAmmoColor' has a wrong offset!");
static_assert(offsetof(UAthenaEquippedItemReticleWidget_C, MaxAmmo) == 0x000418, "Member 'UAthenaEquippedItemReticleWidget_C::MaxAmmo' has a wrong offset!");
static_assert(offsetof(UAthenaEquippedItemReticleWidget_C, AmmoCounterMID) == 0x000420, "Member 'UAthenaEquippedItemReticleWidget_C::AmmoCounterMID' has a wrong offset!");
static_assert(offsetof(UAthenaEquippedItemReticleWidget_C, ReloadAnimationLength) == 0x000428, "Member 'UAthenaEquippedItemReticleWidget_C::ReloadAnimationLength' has a wrong offset!");
static_assert(offsetof(UAthenaEquippedItemReticleWidget_C, LowAmmoPercentage) == 0x00042C, "Member 'UAthenaEquippedItemReticleWidget_C::LowAmmoPercentage' has a wrong offset!");
static_assert(offsetof(UAthenaEquippedItemReticleWidget_C, Icons_Size) == 0x000430, "Member 'UAthenaEquippedItemReticleWidget_C::Icons_Size' has a wrong offset!");
static_assert(offsetof(UAthenaEquippedItemReticleWidget_C, FadeOutHandle) == 0x000440, "Member 'UAthenaEquippedItemReticleWidget_C::FadeOutHandle' has a wrong offset!");
static_assert(offsetof(UAthenaEquippedItemReticleWidget_C, TimeToOutro) == 0x000448, "Member 'UAthenaEquippedItemReticleWidget_C::TimeToOutro' has a wrong offset!");
static_assert(offsetof(UAthenaEquippedItemReticleWidget_C, CurrentAmmoPercent) == 0x00044C, "Member 'UAthenaEquippedItemReticleWidget_C::CurrentAmmoPercent' has a wrong offset!");
static_assert(offsetof(UAthenaEquippedItemReticleWidget_C, IsHoldingSecondaryFire) == 0x000450, "Member 'UAthenaEquippedItemReticleWidget_C::IsHoldingSecondaryFire' has a wrong offset!");
static_assert(offsetof(UAthenaEquippedItemReticleWidget_C, EquippedWeapon) == 0x000458, "Member 'UAthenaEquippedItemReticleWidget_C::EquippedWeapon' has a wrong offset!");
static_assert(offsetof(UAthenaEquippedItemReticleWidget_C, CanOverheat) == 0x000460, "Member 'UAthenaEquippedItemReticleWidget_C::CanOverheat' has a wrong offset!");

}

