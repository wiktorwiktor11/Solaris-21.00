#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KoalaUI

#include "Basic.hpp"

#include "FortniteUI_structs.hpp"
#include "FortniteUI_classes.hpp"
#include "CommonUI_classes.hpp"
#include "Engine_structs.hpp"
#include "KoalaUI_structs.hpp"


namespace SDK
{

// Class KoalaUI.FortGameSettingRegistryExtension_Koala
// 0x0030 (0x0058 - 0x0028)
class UFortGameSettingRegistryExtension_Koala final : public UFortGameSettingRegistryExtension
{
public:
	struct FFortSettingNameExtensions             SettingExtensions;                                 // 0x0028(0x0018)(Edit, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x18];                                      // 0x0040(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGameSettingRegistryExtension_Koala">();
	}
	static class UFortGameSettingRegistryExtension_Koala* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGameSettingRegistryExtension_Koala>();
	}
};
static_assert(alignof(UFortGameSettingRegistryExtension_Koala) == 0x000008, "Wrong alignment on UFortGameSettingRegistryExtension_Koala");
static_assert(sizeof(UFortGameSettingRegistryExtension_Koala) == 0x000058, "Wrong size on UFortGameSettingRegistryExtension_Koala");
static_assert(offsetof(UFortGameSettingRegistryExtension_Koala, SettingExtensions) == 0x000028, "Member 'UFortGameSettingRegistryExtension_Koala::SettingExtensions' has a wrong offset!");

// Class KoalaUI.FortSidebarPanelKoala
// 0x0030 (0x0428 - 0x03F8)
class UFortSidebarPanelKoala final : public UCommonActivatableWidget
{
public:
	uint8                                         Pad_3F8[0x10];                                     // 0x03F8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonBase*                      Button_KoalaDummy;                                 // 0x0408(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortLazyImage*                         QrCodeImage;                                       // 0x0410(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 QRCodeURL;                                         // 0x0418(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnConnectionChanged(bool bConnected);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSidebarPanelKoala">();
	}
	static class UFortSidebarPanelKoala* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSidebarPanelKoala>();
	}
};
static_assert(alignof(UFortSidebarPanelKoala) == 0x000008, "Wrong alignment on UFortSidebarPanelKoala");
static_assert(sizeof(UFortSidebarPanelKoala) == 0x000428, "Wrong size on UFortSidebarPanelKoala");
static_assert(offsetof(UFortSidebarPanelKoala, Button_KoalaDummy) == 0x000408, "Member 'UFortSidebarPanelKoala::Button_KoalaDummy' has a wrong offset!");
static_assert(offsetof(UFortSidebarPanelKoala, QrCodeImage) == 0x000410, "Member 'UFortSidebarPanelKoala::QrCodeImage' has a wrong offset!");
static_assert(offsetof(UFortSidebarPanelKoala, QRCodeURL) == 0x000418, "Member 'UFortSidebarPanelKoala::QRCodeURL' has a wrong offset!");

// Class KoalaUI.KoalaHUDWidget
// 0x00C8 (0x04C0 - 0x03F8)
class UKoalaHUDWidget : public UCommonActivatableWidget
{
public:
	float                                         ClipDebounceTime;                                  // 0x03F8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PlayerKilledPlayerReminderTime;                    // 0x03FC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MatchEndedReminderTime;                            // 0x0400(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ClipReminderCooldownTime;                          // 0x0404(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundSubmix*                           ClipAudioSubmix;                                   // 0x0408(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonActionWidget*                    ClipActionWidget;                                  // 0x0410(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDataTableRowHandle                    ClipObjectInputAction;                             // 0x0418(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_428[0x8];                                      // 0x0428(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FKoalaClipInfo>            ClipTracker;                                       // 0x0430(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_480[0x8];                                      // 0x0480(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LastClipID;                                        // 0x0488(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_48C[0x1C];                                     // 0x048C(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	EKoalaMockClipMode                            MockClipMode;                                      // 0x04A8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4A9[0x3];                                      // 0x04A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MockClipUploadShortTime;                           // 0x04AC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MockClipUploadLongTime;                            // 0x04B0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MockClipCreateShortTime;                           // 0x04B4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MockClipCreateLongTime;                            // 0x04B8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4BC[0x4];                                      // 0x04BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 GetTrackedClipCount();
	void OnAvailabilityChanged(EKoalaAvailability Availability);
	void OnClipStatusChanged(int32 InClipID, EKoalaClipStatus InClipStatus, float InUploadProgress);
	void OnConnectionChanged(EKoalaConnectionStatus InStatus);
	void OnCreateClipComplete(bool bSuccess);
	void OnInputComplete();
	void OnInputProgress(float Progress);
	void OnRecordingStatusChanged(EKoalaRecording InRecordingStatus);
	void OnReminderEnded();
	void OnReminderTimerStarted(float Time);
	void OnTouchAreaMouseDown();
	void RegisterClipButtonInput();
	void UnregisterClipButtonInput();

	int32 GetUploadingClipCount() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KoalaHUDWidget">();
	}
	static class UKoalaHUDWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKoalaHUDWidget>();
	}
};
static_assert(alignof(UKoalaHUDWidget) == 0x000008, "Wrong alignment on UKoalaHUDWidget");
static_assert(sizeof(UKoalaHUDWidget) == 0x0004C0, "Wrong size on UKoalaHUDWidget");
static_assert(offsetof(UKoalaHUDWidget, ClipDebounceTime) == 0x0003F8, "Member 'UKoalaHUDWidget::ClipDebounceTime' has a wrong offset!");
static_assert(offsetof(UKoalaHUDWidget, PlayerKilledPlayerReminderTime) == 0x0003FC, "Member 'UKoalaHUDWidget::PlayerKilledPlayerReminderTime' has a wrong offset!");
static_assert(offsetof(UKoalaHUDWidget, MatchEndedReminderTime) == 0x000400, "Member 'UKoalaHUDWidget::MatchEndedReminderTime' has a wrong offset!");
static_assert(offsetof(UKoalaHUDWidget, ClipReminderCooldownTime) == 0x000404, "Member 'UKoalaHUDWidget::ClipReminderCooldownTime' has a wrong offset!");
static_assert(offsetof(UKoalaHUDWidget, ClipAudioSubmix) == 0x000408, "Member 'UKoalaHUDWidget::ClipAudioSubmix' has a wrong offset!");
static_assert(offsetof(UKoalaHUDWidget, ClipActionWidget) == 0x000410, "Member 'UKoalaHUDWidget::ClipActionWidget' has a wrong offset!");
static_assert(offsetof(UKoalaHUDWidget, ClipObjectInputAction) == 0x000418, "Member 'UKoalaHUDWidget::ClipObjectInputAction' has a wrong offset!");
static_assert(offsetof(UKoalaHUDWidget, ClipTracker) == 0x000430, "Member 'UKoalaHUDWidget::ClipTracker' has a wrong offset!");
static_assert(offsetof(UKoalaHUDWidget, LastClipID) == 0x000488, "Member 'UKoalaHUDWidget::LastClipID' has a wrong offset!");
static_assert(offsetof(UKoalaHUDWidget, MockClipMode) == 0x0004A8, "Member 'UKoalaHUDWidget::MockClipMode' has a wrong offset!");
static_assert(offsetof(UKoalaHUDWidget, MockClipUploadShortTime) == 0x0004AC, "Member 'UKoalaHUDWidget::MockClipUploadShortTime' has a wrong offset!");
static_assert(offsetof(UKoalaHUDWidget, MockClipUploadLongTime) == 0x0004B0, "Member 'UKoalaHUDWidget::MockClipUploadLongTime' has a wrong offset!");
static_assert(offsetof(UKoalaHUDWidget, MockClipCreateShortTime) == 0x0004B4, "Member 'UKoalaHUDWidget::MockClipCreateShortTime' has a wrong offset!");
static_assert(offsetof(UKoalaHUDWidget, MockClipCreateLongTime) == 0x0004B8, "Member 'UKoalaHUDWidget::MockClipCreateLongTime' has a wrong offset!");

// Class KoalaUI.KoalaMainMenuButton
// 0x0000 (0x1150 - 0x1150)
class UKoalaMainMenuButton final : public UFortMainMenuButtonExtension
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KoalaMainMenuButton">();
	}
	static class UKoalaMainMenuButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKoalaMainMenuButton>();
	}
};
static_assert(alignof(UKoalaMainMenuButton) == 0x000010, "Wrong alignment on UKoalaMainMenuButton");
static_assert(sizeof(UKoalaMainMenuButton) == 0x001150, "Wrong size on UKoalaMainMenuButton");

// Class KoalaUI.KoalaSettingDetailExtension
// 0x0000 (0x02C0 - 0x02C0)
class UKoalaSettingDetailExtension final : public UFortSettingDetailExtension
{
public:
	void OnAvailabilityChanged(bool bAvailable);
	void OnConnectionChanged(bool bConnected);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KoalaSettingDetailExtension">();
	}
	static class UKoalaSettingDetailExtension* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKoalaSettingDetailExtension>();
	}
};
static_assert(alignof(UKoalaSettingDetailExtension) == 0x000008, "Wrong alignment on UKoalaSettingDetailExtension");
static_assert(sizeof(UKoalaSettingDetailExtension) == 0x0002C0, "Wrong size on UKoalaSettingDetailExtension");

}

