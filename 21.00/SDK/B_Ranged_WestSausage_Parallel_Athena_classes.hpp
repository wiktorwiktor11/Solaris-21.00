#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Ranged_WestSausage_Parallel_Athena

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_Ranged_WestSausage_Parallel_Athena.B_Ranged_WestSausage_Parallel_Athena_C
// 0x0710 (0x1C58 - 0x1548)
class AB_Ranged_WestSausage_Parallel_Athena_C : public AFortWeaponRangedDualSwing
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x1548(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWestSausageSwingingComponent_C*        WestSausageSwingingComponent;                      // 0x1550(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              Unequipped;                                        // 0x1558(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(bool IsLockedOn, const struct FVector& Position, bool AbleToUse, bool ShowChargeUpCircle, float ChargeTime, bool IsTargetAtAimLocation, bool IsSwingAttached, bool IsFiringBlocked)> ReticleUpdate;                                     // 0x1568(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class APlayerPawn_Athena_C*                   Player;                                            // 0x1578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCameraModifier_WestSausage_C*          CameraModifier;                                    // 0x1580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FreeFalling;                                       // 0x1588(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1589[0x3];                                     // 0x1589(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Swinging_DetachCue;                                // 0x158C(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceToGroundOnAttach;                          // 0x1590(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1594[0x4];                                     // 0x1594(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           SlowerUpdateTimer;                                 // 0x1598(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         SlowUpdateDeltaTime;                               // 0x15A0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UFortMovementComp_Character*            Fort_Movement_Comp_Character;                      // 0x15C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             LastCollision;                                     // 0x15D0(0x00E0)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          Equipped;                                          // 0x16B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Grounded;                                          // 0x16B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GoingFast;                                         // 0x16B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HoldingFire;                                       // 0x16B3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastEquippedTime;                                  // 0x16B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastHitTime;                                       // 0x16B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16BC[0x4];                                     // 0x16BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortControllerComponent_Swinging*      SwingingController;                                // 0x16C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          JustLaunched;                                      // 0x16C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C9[0x7];                                     // 0x16C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         SpeedLinesSpeedThreshold;                          // 0x16D0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         GroundDistanceInfluenceOnInitialJump;              // 0x16F8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         OnHit_MinDotWithUpToStopSwinging;                  // 0x1720(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         DelayBetweenRepeatHitEvents;                       // 0x1748(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         TimeBeenSlow;                                      // 0x1770(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartedSwingingTime;                               // 0x1774(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(float Cooldown_Duration, float NormalCooldownDuration)> ReticleCooldown;                                   // 0x1778(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FScalableFloat                         Cooldown_NormalDuration;                           // 0x1788(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Cooldown_MinimumDuration;                          // 0x17B0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Cooldown_TimeForNormalDuration;                    // 0x17D8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SwingingTimeForTip;                                // 0x1800(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          DontShowHoldTip;                                   // 0x1828(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1829[0x7];                                     // 0x1829(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Cooldown_GotShotDuration;                          // 0x1830(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         InitialJump_RopeLengthForMax;                      // 0x1858(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         InitialJump_MaxHeight;                             // 0x1880(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         InitialJump_MinHeightForFirstJump;                 // 0x18A8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         OnHit_MinVelocityToNotDetachAfterHit;              // 0x18D0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         DetachmentDotsAtLowSpeeds;                         // 0x18F8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         MinSpeedToNotDetachAtBadAngle;                     // 0x1920(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SlowUpdateTicksNeededForDetachment;                // 0x1948(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         MaxWebLengthBeforeForcedDetach;                    // 0x1970(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         CanAttachToMovingObjects;                          // 0x1998(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AActor*                                 ActorAttachedTo;                                   // 0x19C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ActorAttachedTo_OriginalPosition;                  // 0x19C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         DistanceToDetach;                                  // 0x19E0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         TimeNotGivingInput;                                // 0x1A08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OnHit_WasSwinging;                                 // 0x1A0C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A0D[0x3];                                     // 0x1A0D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             TargetingHitResult;                                // 0x1A10(0x00E0)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          IsGrappleGloves;                                   // 0x1AF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1AF1[0x3];                                     // 0x1AF1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           GC_WebWasShot;                                     // 0x1AF4(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   RopeTimestampMaterialParamName;                    // 0x1AF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   RopeFadeMaterialParamName;                         // 0x1AFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   RopeAnchorOffsetMaterialParamName;                 // 0x1B00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxAnchorDistanceFromAttachPoint;                  // 0x1B04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         CanAttachToAnyMovingObjects;                       // 0x1B08(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           Pickup_Impact_FX;                                  // 0x1B30(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B34[0x4];                                     // 0x1B34(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            GE_InMovementMode;                                 // 0x1B38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class ABGA_WestSausage_AttachmentPoint_C*     AttachPointBGA;                                    // 0x1B40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OriginalActorLocation;                             // 0x1B48(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsAttached;                                       // 0x1B60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B61[0x7];                                     // 0x1B61(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UAnimInstance>              SwingingAnimLayerClass;                            // 0x1B68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         LastAttachedTime;                                  // 0x1B70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastDetachedTime;                                  // 0x1B74(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ActorToRide;                                       // 0x1B78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PendingRide;                                       // 0x1B80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasDetachedSinceFireWasPressed;                    // 0x1B81(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TargetingSomething;                                // 0x1B82(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B83[0x1];                                     // 0x1B83(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           FireCue;                                           // 0x1B84(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 AttachPointClass;                                  // 0x1B88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             DetachSound;                                       // 0x1B90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             PickupSound;                                       // 0x1B98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             HitObjectSound;                                    // 0x1BA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             RopeBreakSound;                                    // 0x1BA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         ShowChargeUpCircle;                                // 0x1BB0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         PlayGameplayCueOnFire;                             // 0x1BD8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void()>              ReticleBlockFiring;                                // 0x1C00(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bIsPullingActor;                                   // 0x1C10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C11[0x7];                                     // 0x1C11(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             FireSound;                                         // 0x1C18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             WeaponDepletedDiscardSound;                        // 0x1C20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bJustFired;                                        // 0x1C28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C29[0x7];                                     // 0x1C29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  BlockingTags;                                      // 0x1C30(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bPlayDetachAudio;                                  // 0x1C50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         SwingingCustomMoveModeIndex;                       // 0x1C51(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         SwingingGroundedCustomMoveModeIndex;               // 0x1C52(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Added_3C0F91AD49CBFE1EDEA8C789181CF71C();
	void Added_859E488E42BA5FA1ABBB659534E2C1B3();
	void Added_B345AE024926D8E99FC1F9AED51F639A();
	void AllowStopSwinging(bool* OutputPin);
	void ApplyCooldown(bool Force);
	void attach(class ABGA_WestSausage_AttachmentPoint_C* Attach_Point_BGA);
	void CalculateChargeTime(float* Time);
	void CalculateCooldownTime(float* Output);
	struct FVector CalculateDetachmentForce(const struct FVector& VectorToAttachPoint, bool Launch_, const struct FVector& LaunchVector_);
	void CallReticleCooldown(float Cooldown_Duration);
	void CheckIfShouldLaunch(bool* ShouldLaunch, struct FVector* LaunchVector);
	void Client_ShowTip(const struct FGameplayTag& TipTag);
	void ClientOnDestroyedOnDepleted();
	void Collision_FX_Reset();
	void CustomFire(const struct FHitResult& TargetingHitResult_0);
	void Damaged_Multicast(const struct FVector& HitLocation);
	void Detach(bool DetachFromHip, bool DontApplyForce, bool ForceRun);
	void Detach_Client(bool DetachFromHip, bool DontApplyForce, bool ForceRun);
	void Detach_Internal(bool DetachFromHip, bool DontApplyForce, bool ForceRun);
	void DonePullingPickup();
	void End_Animation();
	void ExecuteUbergraph_B_Ranged_WestSausage_Parallel_Athena(int32 EntryPoint);
	void ExitSwinging(bool SkipRemovingSwingingGE);
	void Fall();
	void Fall_Client();
	void FillAudioComponentParams(class UAudioComponent* Audio_Component);
	void Fired(EDualWeaponHand Hand, bool bPersistantFire);
	void FirePressed();
	void FireReleased();
	void ForceExitSwinging();
	void GiveFallDamageImmunity();
	void HandleMovementModeChanged(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode);
	void InitialJumpMultiplier(float* OutputPin);
	void IsFiringBlocked(bool* BlockedByTag, bool* BlockedByNoAmmo);
	void IsSwingAttached(bool* IsSwingAttached_0);
	void IsSwinging(bool* IsSwinging_0);
	void JustTouchedGround();
	void K2_OnUnEquip();
	void Multicast_PlayPickupEffects(const struct FVector& Location, class AActor* PickUpActor);
	void On_Player_DBNO();
	void OnAttach();
	void OnCooldownApplied();
	void OnDetach();
	void OnPlayerEnteredVehicle();
	void OnPlayerEnteredWater(class AFortPlayerPawn* FortPlayerPawn);
	void OnPlayerHitWallWhileSwinging();
	void OnPlayerHitWhileSwinging(const struct FHitResult& Hit);
	void OnPlayerSkydiving();
	void OnPlayerStartedZiplining();
	void OnPlayerStartSkidding();
	void OnPlayerTouchedGroundAfterSwingEnded();
	void OnPlayWeaponFireFX(bool bPersistentFire, bool bSecondaryFire);
	void OnRideAnimal(class URiderComponent* Rider, class URidableComponent* Ridable);
	void OnRopeAttached();
	void OnRopeStartFadeOut();
	void OnRopeUpdated(const struct FVector& RopeDirection, const float RopeLength);
	void OnWeaponAttached();
	void PlayDetachSound_Multicast();
	void PlayerDamaged(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void QuestAttachedToTree(class AActor* HitActor);
	void ReceiveBeginPlay();
	void ReplicatedFireSound();
	void RequestDetachFromClient(bool DetachFromHip, bool DontApplyForce, bool ForceRun);
	void ResetMeshTransform();
	void Server_ClientRequestedDetach(bool DetachFromHip, bool DontApplyForce, bool ForceRun);
	void SetJustFired();
	void ShouldDisableFiring(bool* Result);
	void SlowerUpdate();
	void SpawnAttachment();
	void StartSlowerUpdateTimer();
	void StopSkidding();
	void TryToFire();
	void UpdateAnimationStateServer(bool ShouldBeInLayer);
	void UpdateAnimLayer(bool ShouldBeInLayer);
	void UpdatePendingRide();
	void UpdateReticleFromNative(bool HitSomething, bool BlockedUse, bool IsTargetAtAimLocation, const struct FVector& TargetPosition);

	TArray<EFortTeamAffiliation> GetAffiliationsToShowFor() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_Ranged_WestSausage_Parallel_Athena_C">();
	}
	static class AB_Ranged_WestSausage_Parallel_Athena_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_Ranged_WestSausage_Parallel_Athena_C>();
	}
};
static_assert(alignof(AB_Ranged_WestSausage_Parallel_Athena_C) == 0x000008, "Wrong alignment on AB_Ranged_WestSausage_Parallel_Athena_C");
static_assert(sizeof(AB_Ranged_WestSausage_Parallel_Athena_C) == 0x001C58, "Wrong size on AB_Ranged_WestSausage_Parallel_Athena_C");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, UberGraphFrame) == 0x001548, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, WestSausageSwingingComponent) == 0x001550, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::WestSausageSwingingComponent' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, Unequipped) == 0x001558, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::Unequipped' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, ReticleUpdate) == 0x001568, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::ReticleUpdate' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, Player) == 0x001578, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::Player' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, CameraModifier) == 0x001580, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::CameraModifier' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, FreeFalling) == 0x001588, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::FreeFalling' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, Swinging_DetachCue) == 0x00158C, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::Swinging_DetachCue' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, DistanceToGroundOnAttach) == 0x001590, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::DistanceToGroundOnAttach' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, SlowerUpdateTimer) == 0x001598, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::SlowerUpdateTimer' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, SlowUpdateDeltaTime) == 0x0015A0, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::SlowUpdateDeltaTime' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, Fort_Movement_Comp_Character) == 0x0015C8, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::Fort_Movement_Comp_Character' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, LastCollision) == 0x0015D0, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::LastCollision' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, Equipped) == 0x0016B0, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::Equipped' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, Grounded) == 0x0016B1, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::Grounded' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, GoingFast) == 0x0016B2, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::GoingFast' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, HoldingFire) == 0x0016B3, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::HoldingFire' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, LastEquippedTime) == 0x0016B4, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::LastEquippedTime' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, LastHitTime) == 0x0016B8, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::LastHitTime' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, SwingingController) == 0x0016C0, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::SwingingController' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, JustLaunched) == 0x0016C8, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::JustLaunched' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, SpeedLinesSpeedThreshold) == 0x0016D0, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::SpeedLinesSpeedThreshold' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, GroundDistanceInfluenceOnInitialJump) == 0x0016F8, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::GroundDistanceInfluenceOnInitialJump' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, OnHit_MinDotWithUpToStopSwinging) == 0x001720, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::OnHit_MinDotWithUpToStopSwinging' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, DelayBetweenRepeatHitEvents) == 0x001748, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::DelayBetweenRepeatHitEvents' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, TimeBeenSlow) == 0x001770, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::TimeBeenSlow' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, StartedSwingingTime) == 0x001774, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::StartedSwingingTime' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, ReticleCooldown) == 0x001778, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::ReticleCooldown' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, Cooldown_NormalDuration) == 0x001788, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::Cooldown_NormalDuration' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, Cooldown_MinimumDuration) == 0x0017B0, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::Cooldown_MinimumDuration' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, Cooldown_TimeForNormalDuration) == 0x0017D8, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::Cooldown_TimeForNormalDuration' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, SwingingTimeForTip) == 0x001800, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::SwingingTimeForTip' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, DontShowHoldTip) == 0x001828, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::DontShowHoldTip' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, Cooldown_GotShotDuration) == 0x001830, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::Cooldown_GotShotDuration' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, InitialJump_RopeLengthForMax) == 0x001858, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::InitialJump_RopeLengthForMax' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, InitialJump_MaxHeight) == 0x001880, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::InitialJump_MaxHeight' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, InitialJump_MinHeightForFirstJump) == 0x0018A8, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::InitialJump_MinHeightForFirstJump' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, OnHit_MinVelocityToNotDetachAfterHit) == 0x0018D0, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::OnHit_MinVelocityToNotDetachAfterHit' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, DetachmentDotsAtLowSpeeds) == 0x0018F8, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::DetachmentDotsAtLowSpeeds' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, MinSpeedToNotDetachAtBadAngle) == 0x001920, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::MinSpeedToNotDetachAtBadAngle' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, SlowUpdateTicksNeededForDetachment) == 0x001948, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::SlowUpdateTicksNeededForDetachment' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, MaxWebLengthBeforeForcedDetach) == 0x001970, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::MaxWebLengthBeforeForcedDetach' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, CanAttachToMovingObjects) == 0x001998, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::CanAttachToMovingObjects' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, ActorAttachedTo) == 0x0019C0, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::ActorAttachedTo' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, ActorAttachedTo_OriginalPosition) == 0x0019C8, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::ActorAttachedTo_OriginalPosition' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, DistanceToDetach) == 0x0019E0, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::DistanceToDetach' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, TimeNotGivingInput) == 0x001A08, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::TimeNotGivingInput' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, OnHit_WasSwinging) == 0x001A0C, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::OnHit_WasSwinging' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, TargetingHitResult) == 0x001A10, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::TargetingHitResult' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, IsGrappleGloves) == 0x001AF0, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::IsGrappleGloves' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, GC_WebWasShot) == 0x001AF4, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::GC_WebWasShot' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, RopeTimestampMaterialParamName) == 0x001AF8, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::RopeTimestampMaterialParamName' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, RopeFadeMaterialParamName) == 0x001AFC, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::RopeFadeMaterialParamName' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, RopeAnchorOffsetMaterialParamName) == 0x001B00, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::RopeAnchorOffsetMaterialParamName' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, MaxAnchorDistanceFromAttachPoint) == 0x001B04, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::MaxAnchorDistanceFromAttachPoint' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, CanAttachToAnyMovingObjects) == 0x001B08, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::CanAttachToAnyMovingObjects' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, Pickup_Impact_FX) == 0x001B30, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::Pickup_Impact_FX' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, GE_InMovementMode) == 0x001B38, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::GE_InMovementMode' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, AttachPointBGA) == 0x001B40, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::AttachPointBGA' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, OriginalActorLocation) == 0x001B48, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::OriginalActorLocation' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, bIsAttached) == 0x001B60, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::bIsAttached' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, SwingingAnimLayerClass) == 0x001B68, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::SwingingAnimLayerClass' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, LastAttachedTime) == 0x001B70, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::LastAttachedTime' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, LastDetachedTime) == 0x001B74, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::LastDetachedTime' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, ActorToRide) == 0x001B78, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::ActorToRide' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, PendingRide) == 0x001B80, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::PendingRide' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, HasDetachedSinceFireWasPressed) == 0x001B81, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::HasDetachedSinceFireWasPressed' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, TargetingSomething) == 0x001B82, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::TargetingSomething' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, FireCue) == 0x001B84, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::FireCue' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, AttachPointClass) == 0x001B88, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::AttachPointClass' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, DetachSound) == 0x001B90, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::DetachSound' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, PickupSound) == 0x001B98, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::PickupSound' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, HitObjectSound) == 0x001BA0, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::HitObjectSound' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, RopeBreakSound) == 0x001BA8, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::RopeBreakSound' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, ShowChargeUpCircle) == 0x001BB0, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::ShowChargeUpCircle' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, PlayGameplayCueOnFire) == 0x001BD8, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::PlayGameplayCueOnFire' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, ReticleBlockFiring) == 0x001C00, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::ReticleBlockFiring' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, bIsPullingActor) == 0x001C10, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::bIsPullingActor' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, FireSound) == 0x001C18, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::FireSound' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, WeaponDepletedDiscardSound) == 0x001C20, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::WeaponDepletedDiscardSound' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, bJustFired) == 0x001C28, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::bJustFired' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, BlockingTags) == 0x001C30, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::BlockingTags' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, bPlayDetachAudio) == 0x001C50, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::bPlayDetachAudio' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, SwingingCustomMoveModeIndex) == 0x001C51, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::SwingingCustomMoveModeIndex' has a wrong offset!");
static_assert(offsetof(AB_Ranged_WestSausage_Parallel_Athena_C, SwingingGroundedCustomMoveModeIndex) == 0x001C52, "Member 'AB_Ranged_WestSausage_Parallel_Athena_C::SwingingGroundedCustomMoveModeIndex' has a wrong offset!");

}

