#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BattlePassBase

#include "Basic.hpp"

#include "BattlePassBase_classes.hpp"
#include "BattlePassBase_parameters.hpp"


namespace SDK
{

// Function BattlePassBase.BattlePassLandingPageButton.OnDisplayDetailsUpdated
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FBattlePassLandingPageButtonDisplayDetailsNewDisplayDetails                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBattlePassLandingPageButton::OnDisplayDetailsUpdated(const struct FBattlePassLandingPageButtonDisplayDetails& NewDisplayDetails)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattlePassLandingPageButton", "OnDisplayDetailsUpdated");

	Params::BattlePassLandingPageButton_OnDisplayDetailsUpdated Parms{};

	Parms.NewDisplayDetails = std::move(NewDisplayDetails);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassBase.BattlePassLandingPageButton.OnSubscriptionOwnershipUpdated
// (RequiredAPI, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bOwnsSubsciption                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattlePassLandingPageButton::OnSubscriptionOwnershipUpdated(const bool bOwnsSubsciption)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattlePassLandingPageButton", "OnSubscriptionOwnershipUpdated");

	Params::BattlePassLandingPageButton_OnSubscriptionOwnershipUpdated Parms{};

	Parms.bOwnsSubsciption = bOwnsSubsciption;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassBase.BattlePassLandingPageButton.OnSubscriptionTextureLoaded
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UTexture2D*                       Texture                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattlePassLandingPageButton::OnSubscriptionTextureLoaded(class UTexture2D* Texture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattlePassLandingPageButton", "OnSubscriptionTextureLoaded");

	Params::BattlePassLandingPageButton_OnSubscriptionTextureLoaded Parms{};

	Parms.Texture = Texture;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassBase.BattlePassLandingPageButton.GetBattlePassDisplayDetails
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FBattlePassLandingPageButtonDisplayDetailsReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FBattlePassLandingPageButtonDisplayDetails UBattlePassLandingPageButton::GetBattlePassDisplayDetails() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattlePassLandingPageButton", "GetBattlePassDisplayDetails");

	Params::BattlePassLandingPageButton_GetBattlePassDisplayDetails Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BattlePassBase.FortBattlePassContext.CanPurchaseBattlePassLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortBattlePassContext::CanPurchaseBattlePassLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassContext", "CanPurchaseBattlePassLevel");

	Params::FortBattlePassContext_CanPurchaseBattlePassLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BattlePassBase.FortBattlePassContext.GetCurrentChapterAsText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bFullText                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UFortBattlePassContext::GetCurrentChapterAsText(const bool bFullText) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassContext", "GetCurrentChapterAsText");

	Params::FortBattlePassContext_GetCurrentChapterAsText Parms{};

	Parms.bFullText = bFullText;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BattlePassBase.FortBattlePassContext.GetCurrentSeasonNumberAsText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bFullText                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UFortBattlePassContext::GetCurrentSeasonNumberAsText(const bool bFullText) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassContext", "GetCurrentSeasonNumberAsText");

	Params::FortBattlePassContext_GetCurrentSeasonNumberAsText Parms{};

	Parms.bFullText = bFullText;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BattlePassBase.FortBattlePassContext.GetDefaultDisclaimerText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UFortBattlePassContext::GetDefaultDisclaimerText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassContext", "GetDefaultDisclaimerText");

	Params::FortBattlePassContext_GetDefaultDisclaimerText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BattlePassBase.FortBattlePassContext.GetLevelPurchaseDisclaimerText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UFortBattlePassContext::GetLevelPurchaseDisclaimerText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassContext", "GetLevelPurchaseDisclaimerText");

	Params::FortBattlePassContext_GetLevelPurchaseDisclaimerText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BattlePassBase.FortBattlePassContext.GetSeasonalCurrencies
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FSeasonCurrencyMcpData>   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FSeasonCurrencyMcpData> UFortBattlePassContext::GetSeasonalCurrencies() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassContext", "GetSeasonalCurrencies");

	Params::FortBattlePassContext_GetSeasonalCurrencies Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BattlePassBase.BattlePassSubPageInterface.OnEnterSubPage
// (Event, Public, BlueprintEvent)

void IBattlePassSubPageInterface::OnEnterSubPage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattlePassSubPageInterface", "OnEnterSubPage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattlePassBase.FortBattlePassBulkBuyPageBase.HandleUserScrolled
// (Final, Native, Protected)
// Parameters:
// float                                   ScrollAmount                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortBattlePassBulkBuyPageBase::HandleUserScrolled(float ScrollAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassBulkBuyPageBase", "HandleUserScrolled");

	Params::FortBattlePassBulkBuyPageBase_HandleUserScrolled Parms{};

	Parms.ScrollAmount = ScrollAmount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BattlePassBase.FortBattlePassBulkBuyPageBase.OnCostChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   Cost                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortBattlePassBulkBuyPageBase::OnCostChanged(const int32 Cost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassBulkBuyPageBase", "OnCostChanged");

	Params::FortBattlePassBulkBuyPageBase_OnCostChanged Parms{};

	Parms.Cost = Cost;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassBase.FortBattlePassBulkBuyPageBase.OnPageRangeChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   FromPage                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ToPage                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortBattlePassBulkBuyPageBase::OnPageRangeChanged(const int32 FromPage, const int32 ToPage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassBulkBuyPageBase", "OnPageRangeChanged");

	Params::FortBattlePassBulkBuyPageBase_OnPageRangeChanged Parms{};

	Parms.FromPage = FromPage;
	Parms.ToPage = ToPage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassBase.FortBattlePassBulkBuyPageBase.OnRewardCountChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   Count                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortBattlePassBulkBuyPageBase::OnRewardCountChanged(const int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassBulkBuyPageBase", "OnRewardCountChanged");

	Params::FortBattlePassBulkBuyPageBase_OnRewardCountChanged Parms{};

	Parms.Count = Count;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassBase.FortBattlePassCheckBoxButton.OnStateChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewIsChecked                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortBattlePassCheckBoxButton::OnStateChanged(const bool bNewIsChecked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassCheckBoxButton", "OnStateChanged");

	Params::FortBattlePassCheckBoxButton_OnStateChanged Parms{};

	Parms.bNewIsChecked = bNewIsChecked;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassBase.FortBattlePassResourcesWidgetBase.OnShowMoreInfo
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bShouldShowMoreInfo                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortBattlePassResourcesWidgetBase::OnShowMoreInfo(bool bShouldShowMoreInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassResourcesWidgetBase", "OnShowMoreInfo");

	Params::FortBattlePassResourcesWidgetBase_OnShowMoreInfo Parms{};

	Parms.bShouldShowMoreInfo = bShouldShowMoreInfo;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassBase.FortBattlePassResourcesWidgetBase.ShowResourcesInfoModal
// (Final, Native, Protected, BlueprintCallable)

void UFortBattlePassResourcesWidgetBase::ShowResourcesInfoModal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassResourcesWidgetBase", "ShowResourcesInfoModal");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BattlePassBase.FortBattlePassCustomSkinCategoryTile.FocusTile
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortBattlePassCustomSkinCategoryTile::FocusTile(const int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassCustomSkinCategoryTile", "FocusTile");

	Params::FortBattlePassCustomSkinCategoryTile_FocusTile Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BattlePassBase.FortBattlePassCustomSkinCategoryTile.OnLockedProgressUpdated
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   CurrentlyOwnedBeforeCategory                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TotalRewardsBeforeCategory                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LockedProgress                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortBattlePassCustomSkinCategoryTile::OnLockedProgressUpdated(const int32 CurrentlyOwnedBeforeCategory, const int32 TotalRewardsBeforeCategory, const float LockedProgress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassCustomSkinCategoryTile", "OnLockedProgressUpdated");

	Params::FortBattlePassCustomSkinCategoryTile_OnLockedProgressUpdated Parms{};

	Parms.CurrentlyOwnedBeforeCategory = CurrentlyOwnedBeforeCategory;
	Parms.TotalRewardsBeforeCategory = TotalRewardsBeforeCategory;
	Parms.LockedProgress = LockedProgress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassBase.FortBattlePassCustomSkinCategoryTile.OnLockedStateChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bCategoryLocked                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortBattlePassCustomSkinCategoryTile::OnLockedStateChanged(const bool bCategoryLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassCustomSkinCategoryTile", "OnLockedStateChanged");

	Params::FortBattlePassCustomSkinCategoryTile_OnLockedStateChanged Parms{};

	Parms.bCategoryLocked = bCategoryLocked;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassBase.FortBattlePassCustomSkinCategoryTile.OnOwnedTilesUpdated
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   CurrentlyOwnedRewards                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TotalRewards                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CategoryProgress                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortBattlePassCustomSkinCategoryTile::OnOwnedTilesUpdated(const int32 CurrentlyOwnedRewards, const int32 TotalRewards, const float CategoryProgress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassCustomSkinCategoryTile", "OnOwnedTilesUpdated");

	Params::FortBattlePassCustomSkinCategoryTile_OnOwnedTilesUpdated Parms{};

	Parms.CurrentlyOwnedRewards = CurrentlyOwnedRewards;
	Parms.TotalRewards = TotalRewards;
	Parms.CategoryProgress = CategoryProgress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassBase.FortBattlePassCustomSkinCategoryTile.SetPreviewedTile
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortBattlePassCustomSkinCategoryTile::SetPreviewedTile(const int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassCustomSkinCategoryTile", "SetPreviewedTile");

	Params::FortBattlePassCustomSkinCategoryTile_SetPreviewedTile Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BattlePassBase.FortBattlePassPurchaseResourcesWidget.HandlePurchaseComplete
// (Final, Native, Private, HasOutParams)
// Parameters:
// bool                                    bSuccess                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FPurchasedItemInfo>       PurchasedItems                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           OfferId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortBattlePassPurchaseResourcesWidget::HandlePurchaseComplete(bool bSuccess, const TArray<struct FPurchasedItemInfo>& PurchasedItems, const class FString& OfferId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassPurchaseResourcesWidget", "HandlePurchaseComplete");

	Params::FortBattlePassPurchaseResourcesWidget_HandlePurchaseComplete Parms{};

	Parms.bSuccess = bSuccess;
	Parms.PurchasedItems = std::move(PurchasedItems);
	Parms.OfferId = std::move(OfferId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BattlePassBase.FortBattlePassPurchaseResourcesWidget.HandlePurchaseMultiComplete
// (Final, Native, Private, HasOutParams)
// Parameters:
// bool                                    bSuccess                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FPurchasedItemInfo>       PurchasedItems                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FString>                   OfferIdList                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UFortBattlePassPurchaseResourcesWidget::HandlePurchaseMultiComplete(bool bSuccess, const TArray<struct FPurchasedItemInfo>& PurchasedItems, const TArray<class FString>& OfferIdList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassPurchaseResourcesWidget", "HandlePurchaseMultiComplete");

	Params::FortBattlePassPurchaseResourcesWidget_HandlePurchaseMultiComplete Parms{};

	Parms.bSuccess = bSuccess;
	Parms.PurchasedItems = std::move(PurchasedItems);
	Parms.OfferIdList = std::move(OfferIdList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BattlePassBase.FortBattlePassPurchaseResourcesWidget.IsReloadMtxEnabled
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortBattlePassPurchaseResourcesWidget::IsReloadMtxEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassPurchaseResourcesWidget", "IsReloadMtxEnabled");

	Params::FortBattlePassPurchaseResourcesWidget_IsReloadMtxEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BattlePassBase.FortBattlePassPurchaseResourcesWidget.OnAmountChangeButtonClicked
// (Event, Protected, BlueprintEvent)

void UFortBattlePassPurchaseResourcesWidget::OnAmountChangeButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassPurchaseResourcesWidget", "OnAmountChangeButtonClicked");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattlePassBase.FortBattlePassPurchaseResourcesWidget.OnOfferUnavailable
// (Event, Protected, BlueprintEvent)

void UFortBattlePassPurchaseResourcesWidget::OnOfferUnavailable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassPurchaseResourcesWidget", "OnOfferUnavailable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattlePassBase.FortBattlePassPurchaseResourcesWidget.OnPurchaseAmountChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   NewAmount                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LevelsLeft                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortBattlePassPurchaseResourcesWidget::OnPurchaseAmountChanged(const int32 NewAmount, const int32 LevelsLeft)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassPurchaseResourcesWidget", "OnPurchaseAmountChanged");

	Params::FortBattlePassPurchaseResourcesWidget_OnPurchaseAmountChanged Parms{};

	Parms.NewAmount = NewAmount;
	Parms.LevelsLeft = LevelsLeft;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassBase.FortBattlePassPurchaseResourcesWidget.OnTotalPriceChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   NewPrice                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortBattlePassPurchaseResourcesWidget::OnTotalPriceChanged(const int32 NewPrice)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassPurchaseResourcesWidget", "OnTotalPriceChanged");

	Params::FortBattlePassPurchaseResourcesWidget_OnTotalPriceChanged Parms{};

	Parms.NewPrice = NewPrice;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassBase.FortBattlePassRewardGrid.OnPageSelected
// (Event, Public, BlueprintEvent)

void UFortBattlePassRewardGrid::OnPageSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassRewardGrid", "OnPageSelected");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattlePassBase.FortBattlePassRewardGrid.OnPageUnselected
// (Event, Public, BlueprintEvent)

void UFortBattlePassRewardGrid::OnPageUnselected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassRewardGrid", "OnPageUnselected");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattlePassBase.FortBattlePassRewardGridHeader.OnBattlePassLevelSet
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   BattlePassLevel                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortBattlePassRewardGridHeader::OnBattlePassLevelSet(const int32 BattlePassLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassRewardGridHeader", "OnBattlePassLevelSet");

	Params::FortBattlePassRewardGridHeader_OnBattlePassLevelSet Parms{};

	Parms.BattlePassLevel = BattlePassLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassBase.FortBattlePassRewardGridHeader.OnPageLocked
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   RequiredLevel                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RequiredRewards                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortBattlePassRewardGridHeader::OnPageLocked(const int32 RequiredLevel, const int32 RequiredRewards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassRewardGridHeader", "OnPageLocked");

	Params::FortBattlePassRewardGridHeader_OnPageLocked Parms{};

	Parms.RequiredLevel = RequiredLevel;
	Parms.RequiredRewards = RequiredRewards;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassBase.FortBattlePassRewardGridHeader.OnPageNumberSet
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   InPageNumber                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortBattlePassRewardGridHeader::OnPageNumberSet(const int32 InPageNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassRewardGridHeader", "OnPageNumberSet");

	Params::FortBattlePassRewardGridHeader_OnPageNumberSet Parms{};

	Parms.InPageNumber = InPageNumber;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassBase.FortBattlePassRewardGridHeader.OnPageUnlocked
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   PurchasedRewards                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TotalRewards                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortBattlePassRewardGridHeader::OnPageUnlocked(const int32 PurchasedRewards, const int32 TotalRewards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassRewardGridHeader", "OnPageUnlocked");

	Params::FortBattlePassRewardGridHeader_OnPageUnlocked Parms{};

	Parms.PurchasedRewards = PurchasedRewards;
	Parms.TotalRewards = TotalRewards;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassBase.FortBattlePassRewardGridHeader.OnSetPageCustomName
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             CustomName                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortBattlePassRewardGridHeader::OnSetPageCustomName(const class FText& CustomName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassRewardGridHeader", "OnSetPageCustomName");

	Params::FortBattlePassRewardGridHeader_OnSetPageCustomName Parms{};

	Parms.CustomName = std::move(CustomName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassBase.FortBattlePassRewardGridHeader.OnSetPageType
// (Event, Public, BlueprintEvent)
// Parameters:
// ERewardPageType                         PageType                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortBattlePassRewardGridHeader::OnSetPageType(const ERewardPageType PageType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassRewardGridHeader", "OnSetPageType");

	Params::FortBattlePassRewardGridHeader_OnSetPageType Parms{};

	Parms.PageType = PageType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassBase.FortBattlePassRewardGridHeader.GetPageNumber
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UFortBattlePassRewardGridHeader::GetPageNumber() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassRewardGridHeader", "GetPageNumber");

	Params::FortBattlePassRewardGridHeader_GetPageNumber Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BattlePassBase.FortBattlePassTileBase.OnPeeked
// (Event, Public, BlueprintEvent)

void UFortBattlePassTileBase::OnPeeked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassTileBase", "OnPeeked");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattlePassBase.FortBattlePassTileBase.OnRevealed
// (Event, Public, BlueprintEvent)

void UFortBattlePassTileBase::OnRevealed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassTileBase", "OnRevealed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattlePassBase.FortBattlePassTileBase.OnSetRequiresBattlePass
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bRequiresBP                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortBattlePassTileBase::OnSetRequiresBattlePass(const bool bRequiresBP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassTileBase", "OnSetRequiresBattlePass");

	Params::FortBattlePassTileBase_OnSetRequiresBattlePass Parms{};

	Parms.bRequiresBP = bRequiresBP;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassBase.FortBattlePassTileBase.OnSizeChanged
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector2D                        NewSize                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortBattlePassTileBase::OnSizeChanged(const struct FVector2D& NewSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassTileBase", "OnSizeChanged");

	Params::FortBattlePassTileBase_OnSizeChanged Parms{};

	Parms.NewSize = std::move(NewSize);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassBase.FortBattlePassTileBase.OnStateChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// EBattlePassTileAvailabilityStates       NewState                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortBattlePassTileBase::OnStateChanged(const EBattlePassTileAvailabilityStates NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassTileBase", "OnStateChanged");

	Params::FortBattlePassTileBase_OnStateChanged Parms{};

	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassBase.FortBattlePassTileBase.SetSize
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// EPageItemTileSize                       TileSize                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        CellSpacing                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortBattlePassTileBase::SetSize(const EPageItemTileSize TileSize, const struct FVector2D& CellSpacing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassTileBase", "SetSize");

	Params::FortBattlePassTileBase_SetSize Parms{};

	Parms.TileSize = TileSize;
	Parms.CellSpacing = std::move(CellSpacing);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BattlePassBase.FortBattlePassTileBase.SetState
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EBattlePassTileAvailabilityStates       NewState                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortBattlePassTileBase::SetState(const EBattlePassTileAvailabilityStates NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassTileBase", "SetState");

	Params::FortBattlePassTileBase_SetState Parms{};

	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BattlePassBase.FortBattlePassTileBase.GetState
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const EBattlePassTileAvailabilityStates ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const EBattlePassTileAvailabilityStates UFortBattlePassTileBase::GetState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassTileBase", "GetState");

	Params::FortBattlePassTileBase_GetState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BattlePassBase.FortBattlePassTileBase.IsAvailable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortBattlePassTileBase::IsAvailable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassTileBase", "IsAvailable");

	Params::FortBattlePassTileBase_IsAvailable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BattlePassBase.FortBattlePassTileBase.IsLocked
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortBattlePassTileBase::IsLocked() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassTileBase", "IsLocked");

	Params::FortBattlePassTileBase_IsLocked Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BattlePassBase.FortBattlePassTileBase.IsOwned
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortBattlePassTileBase::IsOwned() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassTileBase", "IsOwned");

	Params::FortBattlePassTileBase_IsOwned Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BattlePassBase.FortBattlePassTile.OnAffordabilityChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bHasEnougCurrency                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortBattlePassTile::OnAffordabilityChanged(const bool bHasEnougCurrency)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassTile", "OnAffordabilityChanged");

	Params::FortBattlePassTile_OnAffordabilityChanged Parms{};

	Parms.bHasEnougCurrency = bHasEnougCurrency;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassBase.FortBattlePassTile.OnHighlighted
// (Event, Protected, BlueprintEvent)

void UFortBattlePassTile::OnHighlighted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassTile", "OnHighlighted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattlePassBase.FortBattlePassTile.OnLockedProgressUpdated
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   Progress                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CurrentlyOwnedRewards                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NeededRewards                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortBattlePassTile::OnLockedProgressUpdated(const float Progress, const int32 CurrentlyOwnedRewards, const int32 NeededRewards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassTile", "OnLockedProgressUpdated");

	Params::FortBattlePassTile_OnLockedProgressUpdated Parms{};

	Parms.Progress = Progress;
	Parms.CurrentlyOwnedRewards = CurrentlyOwnedRewards;
	Parms.NeededRewards = NeededRewards;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassBase.FortBattlePassTile.OnLockedStateUpdated
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    OwnsBattlePass                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ParentUnlocked                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    HasRemainingPrerequisites                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsDelayed                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortBattlePassTile::OnLockedStateUpdated(const bool OwnsBattlePass, const bool ParentUnlocked, const bool HasRemainingPrerequisites, const bool bIsDelayed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassTile", "OnLockedStateUpdated");

	Params::FortBattlePassTile_OnLockedStateUpdated Parms{};

	Parms.OwnsBattlePass = OwnsBattlePass;
	Parms.ParentUnlocked = ParentUnlocked;
	Parms.HasRemainingPrerequisites = HasRemainingPrerequisites;
	Parms.bIsDelayed = bIsDelayed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassBase.FortBattlePassTile.OnPreviewed
// (Event, Public, BlueprintEvent)

void UFortBattlePassTile::OnPreviewed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassTile", "OnPreviewed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattlePassBase.FortBattlePassTile.OnSetCurrencyAndPrice
// (Event, Protected, BlueprintEvent)
// Parameters:
// EBattlePassCurrencyType                 Currency                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Price                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortBattlePassTile::OnSetCurrencyAndPrice(const EBattlePassCurrencyType Currency, const int32 Price)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassTile", "OnSetCurrencyAndPrice");

	Params::FortBattlePassTile_OnSetCurrencyAndPrice Parms{};

	Parms.Currency = Currency;
	Parms.Price = Price;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassBase.FortBattlePassTile.OnSetTrack
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bIsFreeTrack                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOwnsBattlePass                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortBattlePassTile::OnSetTrack(const bool bIsFreeTrack, const bool bOwnsBattlePass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassTile", "OnSetTrack");

	Params::FortBattlePassTile_OnSetTrack Parms{};

	Parms.bIsFreeTrack = bIsFreeTrack;
	Parms.bOwnsBattlePass = bOwnsBattlePass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassBase.FortBattlePassTile.OnTilePreviewCycled
// (Event, Protected, BlueprintEvent)

void UFortBattlePassTile::OnTilePreviewCycled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassTile", "OnTilePreviewCycled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattlePassBase.FortBattlePassTile.OnUnhighlighted
// (Event, Protected, BlueprintEvent)

void UFortBattlePassTile::OnUnhighlighted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassTile", "OnUnhighlighted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattlePassBase.FortBattlePassTile.OnUnpreviewed
// (Event, Public, BlueprintEvent)

void UFortBattlePassTile::OnUnpreviewed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassTile", "OnUnpreviewed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattlePassBase.FortBattlePassTile.HasPrerequisites
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortBattlePassTile::HasPrerequisites() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassTile", "HasPrerequisites");

	Params::FortBattlePassTile_HasPrerequisites Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BattlePassBase.FortBattlePassTile.IsAffordable
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortBattlePassTile::IsAffordable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassTile", "IsAffordable");

	Params::FortBattlePassTile_IsAffordable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BattlePassBase.FortBattlePassTutorialTooltip.HideTooltip
// (Event, Protected, BlueprintEvent)

void UFortBattlePassTutorialTooltip::HideTooltip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassTutorialTooltip", "HideTooltip");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattlePassBase.FortBattlePassTutorialTooltip.SetText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FText                             Text                                                   (Parm, NativeAccessSpecifierPublic)

void UFortBattlePassTutorialTooltip::SetText(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassTutorialTooltip", "SetText");

	Params::FortBattlePassTutorialTooltip_SetText Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BattlePassBase.FortBattlePassTutorialTooltip.SetTooltipEnabled
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortBattlePassTutorialTooltip::SetTooltipEnabled(const bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassTutorialTooltip", "SetTooltipEnabled");

	Params::FortBattlePassTutorialTooltip_SetTooltipEnabled Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BattlePassBase.FortBattlePassTutorialTooltip.ShowTooltip
// (Event, Protected, BlueprintEvent)

void UFortBattlePassTutorialTooltip::ShowTooltip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassTutorialTooltip", "ShowTooltip");

	UObject::ProcessEvent(Func, nullptr);
}

}

