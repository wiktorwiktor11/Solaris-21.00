#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SidebarVoiceChannelHeaderButton

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteUI_classes.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass SidebarVoiceChannelHeaderButton.SidebarVoiceChannelHeaderButton_C
// 0x0100 (0x1180 - 0x1080)
class USidebarVoiceChannelHeaderButton_C final : public UFortVoiceChannelHeaderButton
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x1080(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       NewAnimation;                                      // 0x1088(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       OnExpansion;                                       // 0x1090(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       JoinSlideOut;                                      // 0x1098(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       ScaleUp;                                           // 0x10A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UFortMobileImage*                       ExpandDirectionTick;                               // 0x10A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HBox_Join;                                         // 0x10B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_VoiceChatWarning;                            // 0x10B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonRichTextBlock*                   JoinText;                                          // 0x10C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UFortMobileImage*                       NotTransmitting;                                   // 0x10C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonRichTextBlock*                   OffText;                                           // 0x10D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        OnOffSwitcher;                                     // 0x10D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonRichTextBlock*                   OnText;                                            // 0x10E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_1;                                         // 0x10E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        SimultaneousChannelSwitcher;                       // 0x10F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        Switch_Transmitting;                               // 0x10F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonActivatableWidgetSwitcher*       Switcher_ChannelInfo;                              // 0x1100(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonActivatableWidgetSwitcher*       Switcher_ChannelTitle;                             // 0x1108(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UFortMobileImage*                       Transmitting;                                      // 0x1110(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FLinearColor                           VoiceStatusActiveColor;                            // 0x1118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           VoiceStatusInactiveColor;                          // 0x1128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           VoiceStatusWarningColor;                           // 0x1138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            OnOffTextColor;                                    // 0x1148(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateColor                            OnOffTextColor_Hover;                              // 0x115C(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsRestricted;                                      // 0x1170(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHoveredColor;                                    // 0x1171(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BP_OnDisabled();
	void BP_OnEnabled();
	void BP_OnHovered();
	void BP_OnItemExpansionChanged(bool bIsExpanded);
	void BP_OnUnhovered();
	void Construct();
	void ExecuteUbergraph_SidebarVoiceChannelHeaderButton(int32 EntryPoint);
	void OnListItemObjectSet_1(class UObject* ListItemObject);
	void OnUpdateVisuals(bool bIsActiveAndListening, bool bIsActiveOrAvailable, bool bIsAvailableAndNotActive, bool bIsListening, bool bShowingRestriction);
	void PreConstruct(bool IsDesignTime);
	void SetActiveAndListeningVisuals(bool IsActiveAndListening, bool IsRestricted_0);
	void SetIsActiveOrAvailableVisuals(bool IsActiveOrAvailable);
	void SetIsAvaliableAndNotActiveVisuals(bool IsAvaliableAndNotActive);
	void SetIsListeningVisuals(bool IsListening);
	void SetRestrictedVisuals(bool IsRestricted_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SidebarVoiceChannelHeaderButton_C">();
	}
	static class USidebarVoiceChannelHeaderButton_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USidebarVoiceChannelHeaderButton_C>();
	}
};
static_assert(alignof(USidebarVoiceChannelHeaderButton_C) == 0x000010, "Wrong alignment on USidebarVoiceChannelHeaderButton_C");
static_assert(sizeof(USidebarVoiceChannelHeaderButton_C) == 0x001180, "Wrong size on USidebarVoiceChannelHeaderButton_C");
static_assert(offsetof(USidebarVoiceChannelHeaderButton_C, UberGraphFrame) == 0x001080, "Member 'USidebarVoiceChannelHeaderButton_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(USidebarVoiceChannelHeaderButton_C, NewAnimation) == 0x001088, "Member 'USidebarVoiceChannelHeaderButton_C::NewAnimation' has a wrong offset!");
static_assert(offsetof(USidebarVoiceChannelHeaderButton_C, OnExpansion) == 0x001090, "Member 'USidebarVoiceChannelHeaderButton_C::OnExpansion' has a wrong offset!");
static_assert(offsetof(USidebarVoiceChannelHeaderButton_C, JoinSlideOut) == 0x001098, "Member 'USidebarVoiceChannelHeaderButton_C::JoinSlideOut' has a wrong offset!");
static_assert(offsetof(USidebarVoiceChannelHeaderButton_C, ScaleUp) == 0x0010A0, "Member 'USidebarVoiceChannelHeaderButton_C::ScaleUp' has a wrong offset!");
static_assert(offsetof(USidebarVoiceChannelHeaderButton_C, ExpandDirectionTick) == 0x0010A8, "Member 'USidebarVoiceChannelHeaderButton_C::ExpandDirectionTick' has a wrong offset!");
static_assert(offsetof(USidebarVoiceChannelHeaderButton_C, HBox_Join) == 0x0010B0, "Member 'USidebarVoiceChannelHeaderButton_C::HBox_Join' has a wrong offset!");
static_assert(offsetof(USidebarVoiceChannelHeaderButton_C, Image_VoiceChatWarning) == 0x0010B8, "Member 'USidebarVoiceChannelHeaderButton_C::Image_VoiceChatWarning' has a wrong offset!");
static_assert(offsetof(USidebarVoiceChannelHeaderButton_C, JoinText) == 0x0010C0, "Member 'USidebarVoiceChannelHeaderButton_C::JoinText' has a wrong offset!");
static_assert(offsetof(USidebarVoiceChannelHeaderButton_C, NotTransmitting) == 0x0010C8, "Member 'USidebarVoiceChannelHeaderButton_C::NotTransmitting' has a wrong offset!");
static_assert(offsetof(USidebarVoiceChannelHeaderButton_C, OffText) == 0x0010D0, "Member 'USidebarVoiceChannelHeaderButton_C::OffText' has a wrong offset!");
static_assert(offsetof(USidebarVoiceChannelHeaderButton_C, OnOffSwitcher) == 0x0010D8, "Member 'USidebarVoiceChannelHeaderButton_C::OnOffSwitcher' has a wrong offset!");
static_assert(offsetof(USidebarVoiceChannelHeaderButton_C, OnText) == 0x0010E0, "Member 'USidebarVoiceChannelHeaderButton_C::OnText' has a wrong offset!");
static_assert(offsetof(USidebarVoiceChannelHeaderButton_C, Overlay_1) == 0x0010E8, "Member 'USidebarVoiceChannelHeaderButton_C::Overlay_1' has a wrong offset!");
static_assert(offsetof(USidebarVoiceChannelHeaderButton_C, SimultaneousChannelSwitcher) == 0x0010F0, "Member 'USidebarVoiceChannelHeaderButton_C::SimultaneousChannelSwitcher' has a wrong offset!");
static_assert(offsetof(USidebarVoiceChannelHeaderButton_C, Switch_Transmitting) == 0x0010F8, "Member 'USidebarVoiceChannelHeaderButton_C::Switch_Transmitting' has a wrong offset!");
static_assert(offsetof(USidebarVoiceChannelHeaderButton_C, Switcher_ChannelInfo) == 0x001100, "Member 'USidebarVoiceChannelHeaderButton_C::Switcher_ChannelInfo' has a wrong offset!");
static_assert(offsetof(USidebarVoiceChannelHeaderButton_C, Switcher_ChannelTitle) == 0x001108, "Member 'USidebarVoiceChannelHeaderButton_C::Switcher_ChannelTitle' has a wrong offset!");
static_assert(offsetof(USidebarVoiceChannelHeaderButton_C, Transmitting) == 0x001110, "Member 'USidebarVoiceChannelHeaderButton_C::Transmitting' has a wrong offset!");
static_assert(offsetof(USidebarVoiceChannelHeaderButton_C, VoiceStatusActiveColor) == 0x001118, "Member 'USidebarVoiceChannelHeaderButton_C::VoiceStatusActiveColor' has a wrong offset!");
static_assert(offsetof(USidebarVoiceChannelHeaderButton_C, VoiceStatusInactiveColor) == 0x001128, "Member 'USidebarVoiceChannelHeaderButton_C::VoiceStatusInactiveColor' has a wrong offset!");
static_assert(offsetof(USidebarVoiceChannelHeaderButton_C, VoiceStatusWarningColor) == 0x001138, "Member 'USidebarVoiceChannelHeaderButton_C::VoiceStatusWarningColor' has a wrong offset!");
static_assert(offsetof(USidebarVoiceChannelHeaderButton_C, OnOffTextColor) == 0x001148, "Member 'USidebarVoiceChannelHeaderButton_C::OnOffTextColor' has a wrong offset!");
static_assert(offsetof(USidebarVoiceChannelHeaderButton_C, OnOffTextColor_Hover) == 0x00115C, "Member 'USidebarVoiceChannelHeaderButton_C::OnOffTextColor_Hover' has a wrong offset!");
static_assert(offsetof(USidebarVoiceChannelHeaderButton_C, IsRestricted) == 0x001170, "Member 'USidebarVoiceChannelHeaderButton_C::IsRestricted' has a wrong offset!");
static_assert(offsetof(USidebarVoiceChannelHeaderButton_C, IsHoveredColor) == 0x001171, "Member 'USidebarVoiceChannelHeaderButton_C::IsHoveredColor' has a wrong offset!");

}

