#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Snow_PostProcessing_Volume

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Snow_PostProcessing_Volume.BP_Snow_PostProcessing_Volume_C
// 0x0038 (0x02A8 - 0x0270)
class ABP_Snow_PostProcessing_Volume_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0270(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPostProcessComponent*                  PostProcess;                                       // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Debug_Snow_Coverage_;                              // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Snow_PostProccesing_Min_Raduis;                    // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Snow_PostProccesing_Max_Raduis;                    // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hide_Debug_Sphere;                                 // 0x0294(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_295[0x3];                                      // 0x0295(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Offset_Start_Point;                                // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         float_value;                                       // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Blend_Radius;                                      // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Update;                                            // 0x02A4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Snow_PostProcessing_Volume(int32 EntryPoint);
	void OnRep_Update();
	void ReceiveBeginPlay();
	void SetSnowCoveragePP();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Snow_PostProcessing_Volume_C">();
	}
	static class ABP_Snow_PostProcessing_Volume_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Snow_PostProcessing_Volume_C>();
	}
};
static_assert(alignof(ABP_Snow_PostProcessing_Volume_C) == 0x000008, "Wrong alignment on ABP_Snow_PostProcessing_Volume_C");
static_assert(sizeof(ABP_Snow_PostProcessing_Volume_C) == 0x0002A8, "Wrong size on ABP_Snow_PostProcessing_Volume_C");
static_assert(offsetof(ABP_Snow_PostProcessing_Volume_C, UberGraphFrame) == 0x000270, "Member 'ABP_Snow_PostProcessing_Volume_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Snow_PostProcessing_Volume_C, PostProcess) == 0x000278, "Member 'ABP_Snow_PostProcessing_Volume_C::PostProcess' has a wrong offset!");
static_assert(offsetof(ABP_Snow_PostProcessing_Volume_C, Sphere) == 0x000280, "Member 'ABP_Snow_PostProcessing_Volume_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_Snow_PostProcessing_Volume_C, Debug_Snow_Coverage_) == 0x000288, "Member 'ABP_Snow_PostProcessing_Volume_C::Debug_Snow_Coverage_' has a wrong offset!");
static_assert(offsetof(ABP_Snow_PostProcessing_Volume_C, Snow_PostProccesing_Min_Raduis) == 0x00028C, "Member 'ABP_Snow_PostProcessing_Volume_C::Snow_PostProccesing_Min_Raduis' has a wrong offset!");
static_assert(offsetof(ABP_Snow_PostProcessing_Volume_C, Snow_PostProccesing_Max_Raduis) == 0x000290, "Member 'ABP_Snow_PostProcessing_Volume_C::Snow_PostProccesing_Max_Raduis' has a wrong offset!");
static_assert(offsetof(ABP_Snow_PostProcessing_Volume_C, Hide_Debug_Sphere) == 0x000294, "Member 'ABP_Snow_PostProcessing_Volume_C::Hide_Debug_Sphere' has a wrong offset!");
static_assert(offsetof(ABP_Snow_PostProcessing_Volume_C, Offset_Start_Point) == 0x000298, "Member 'ABP_Snow_PostProcessing_Volume_C::Offset_Start_Point' has a wrong offset!");
static_assert(offsetof(ABP_Snow_PostProcessing_Volume_C, float_value) == 0x00029C, "Member 'ABP_Snow_PostProcessing_Volume_C::float_value' has a wrong offset!");
static_assert(offsetof(ABP_Snow_PostProcessing_Volume_C, Blend_Radius) == 0x0002A0, "Member 'ABP_Snow_PostProcessing_Volume_C::Blend_Radius' has a wrong offset!");
static_assert(offsetof(ABP_Snow_PostProcessing_Volume_C, Update) == 0x0002A4, "Member 'ABP_Snow_PostProcessing_Volume_C::Update' has a wrong offset!");

}

