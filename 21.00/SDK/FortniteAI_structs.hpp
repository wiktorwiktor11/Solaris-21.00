#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FortniteAI

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_0_structs.hpp"
#include "AIModule_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "SmartObjectsModule_structs.hpp"
#include "FortniteVersion_structs.hpp"
#include "SlateCore_structs.hpp"
#include "NetCore_structs.hpp"


namespace SDK
{

// Enum FortniteAI.EAlertLevel
// NumValues: 0x0006
enum class EAlertLevel : uint8
{
	Unaware                                  = 0,
	Alerted                                  = 1,
	LKP                                      = 2,
	Threatened                               = 3,
	Count                                    = 4,
	EAlertLevel_MAX                          = 5,
};

// Enum FortniteAI.ENavigationObstacleOverride
// NumValues: 0x0005
enum class ENavigationObstacleOverride : uint8
{
	UseMeshSettings                          = 0,
	ForceEnabled                             = 1,
	ForceDisabled                            = 2,
	ExportAsPrimitive                        = 3,
	ENavigationObstacleOverride_MAX          = 4,
};

// Enum FortniteAI.EAIHotSpotSlotFilter
// NumValues: 0x0004
enum class EAIHotSpotSlotFilter : uint8
{
	All                                      = 0,
	AvailableOnly                            = 1,
	UnavailableOnly                          = 2,
	EAIHotSpotSlotFilter_MAX                 = 3,
};

// Enum FortniteAI.EAIHotSpotAssignmentFilter
// NumValues: 0x0004
enum class EAIHotSpotAssignmentFilter : uint8
{
	All                                      = 0,
	WithSlots                                = 1,
	WaitingList                              = 2,
	EAIHotSpotAssignmentFilter_MAX           = 3,
};

// Enum FortniteAI.EAIHotSpotSlot
// NumValues: 0x0006
enum class EAIHotSpotSlot : uint8
{
	Free                                     = 0,
	Claimed                                  = 1,
	Occupied                                 = 2,
	Blocked                                  = 3,
	Disabled                                 = 4,
	EAIHotSpotSlot_MAX                       = 5,
};

// Enum FortniteAI.EBoundingBoxSlotDirectionCalculation
// NumValues: 0x0005
enum class EBoundingBoxSlotDirectionCalculation : uint8
{
	Auto                                     = 0,
	FaceWall                                 = 1,
	FaceAwayFromWall                         = 2,
	FaceCenter                               = 3,
	EBoundingBoxSlotDirectionCalculation_MAX = 4,
};

// Enum FortniteAI.EInBoundsState
// NumValues: 0x0004
enum class EInBoundsState : uint8
{
	NoBounds                                 = 0,
	NotInBounds                              = 1,
	InBounds                                 = 2,
	EInBoundsState_MAX                       = 3,
};

// Enum FortniteAI.EAthenaAITelemetryEventType
// NumValues: 0x0003
enum class EAthenaAITelemetryEventType : uint8
{
	Spawn                                    = 0,
	Despawn                                  = 1,
	EAthenaAITelemetryEventType_MAX          = 2,
};

// Enum FortniteAI.EAICustomTargetRequestType
// NumValues: 0x0004
enum class EAICustomTargetRequestType : uint8
{
	Movement                                 = 1,
	MeleeAttack                              = 2,
	RangedAttack                             = 4,
	EAICustomTargetRequestType_MAX           = 5,
};

// Enum FortniteAI.EFortEncounterUtilityDesire
// NumValues: 0x0006
enum class EFortEncounterUtilityDesire : uint8
{
	Low                                      = 0,
	Medium                                   = 1,
	High                                     = 2,
	VeryHigh                                 = 3,
	Max_None                                 = 4,
	EFortEncounterUtilityDesire_MAX          = 5,
};

// Enum FortniteAI.EDespawnAIType
// NumValues: 0x0003
enum class EDespawnAIType : uint8
{
	Relevancy                                = 0,
	Distance                                 = 1,
	EDespawnAIType_MAX                       = 2,
};

// Enum FortniteAI.EFortAIDirectorEventContribution
// NumValues: 0x0003
enum class EFortAIDirectorEventContribution : uint8
{
	Increment                                = 0,
	Set                                      = 1,
	EFortAIDirectorEventContribution_MAX     = 2,
};

// Enum FortniteAI.EFortAIDirectorFactorContribution
// NumValues: 0x0003
enum class EFortAIDirectorFactorContribution : uint8
{
	Direct                                   = 0,
	Inverse                                  = 1,
	EFortAIDirectorFactorContribution_MAX    = 2,
};

// Enum FortniteAI.EFortEncounterPacingState
// NumValues: 0x0006
enum class EFortEncounterPacingState : uint8
{
	Ramp                                     = 0,
	Peak                                     = 1,
	Fade                                     = 2,
	Rest                                     = 3,
	Max_None                                 = 4,
	EFortEncounterPacingState_MAX            = 5,
};

// Enum FortniteAI.EFortEncounterState
// NumValues: 0x0008
enum class EFortEncounterState : uint8
{
	Uninitialized                            = 0,
	InitializingProperties                   = 1,
	InitializingRiftManager                  = 2,
	AwaitingActivation                       = 3,
	Active                                   = 4,
	ReplacingRifts                           = 5,
	Max_None                                 = 6,
	EFortEncounterState_MAX                  = 7,
};

// Enum FortniteAI.EFortAIWaveProgressSection
// NumValues: 0x0004
enum class EFortAIWaveProgressSection : uint8
{
	SectionOne                               = 0,
	SectionTwo                               = 1,
	Max_None                                 = 2,
	EFortAIWaveProgressSection_MAX           = 3,
};

// Enum FortniteAI.EFortEncounterSequenceResult
// NumValues: 0x0004
enum class EFortEncounterSequenceResult : uint8
{
	Success                                  = 0,
	FailedEncounterInProgress                = 1,
	Failed                                   = 2,
	EFortEncounterSequenceResult_MAX         = 3,
};

// Enum FortniteAI.EAssignmentCreationResult
// NumValues: 0x0004
enum class EAssignmentCreationResult : uint8
{
	AssignmentNotFoundOrCreated              = 0,
	AssignmentCreated                        = 1,
	AssignmentFound                          = 2,
	EAssignmentCreationResult_MAX            = 3,
};

// Enum FortniteAI.ETagGoalScoringCategory
// NumValues: 0x0004
enum class ETagGoalScoringCategory : uint8
{
	Ignore                                   = 0,
	HighInterest                             = 1,
	NumCategories                            = 2,
	ETagGoalScoringCategory_MAX              = 3,
};

// Enum FortniteAI.ECorePerceptionTypes
// NumValues: 0x0007
enum class ECorePerceptionTypes : uint8
{
	Sight                                    = 0,
	Hearing                                  = 1,
	Damage                                   = 2,
	Touch                                    = 3,
	Team                                     = 4,
	Prediction                               = 5,
	MAX                                      = 6,
};

// Enum FortniteAI.EFortAILODLevel
// NumValues: 0x000A
enum class EFortAILODLevel : uint8
{
	Invalid                                  = 0,
	MIN                                      = 0,
	Dormant                                  = 1,
	BelowLower                               = 2,
	Lower                                    = 3,
	AboveLower                               = 4,
	BelowNormal                              = 5,
	Normal                                   = 6,
	AboveNormal                              = 7,
	MAX                                      = 8,
};

// Enum FortniteAI.EAssignmentType
// NumValues: 0x0006
enum class EAssignmentType : uint8
{
	Invalid                                  = 0,
	Encounter                                = 1,
	World                                    = 2,
	Enemy                                    = 3,
	NumAssignmentTypes                       = 4,
	EAssignmentType_MAX                      = 5,
};

// Enum FortniteAI.EBuildingWallArea
// NumValues: 0x0004
enum class EBuildingWallArea : uint8
{
	Regular                                  = 0,
	Flat                                     = 1,
	Special                                  = 2,
	EBuildingWallArea_MAX                    = 3,
};

// Enum FortniteAI.EBuildingStairsRailing
// NumValues: 0x0004
enum class EBuildingStairsRailing : uint8
{
	None                                     = 0,
	Partial                                  = 1,
	Full                                     = 2,
	EBuildingStairsRailing_MAX               = 3,
};

// Enum FortniteAI.EBuildingFloorRailing
// NumValues: 0x0003
enum class EBuildingFloorRailing : uint8
{
	None                                     = 0,
	Balcony                                  = 1,
	EBuildingFloorRailing_MAX                = 2,
};

// Enum FortniteAI.EFortHotSpotSlot
// NumValues: 0x0005
enum class EFortHotSpotSlot : uint8
{
	Melee                                    = 0,
	MeleeHuge                                = 1,
	Ranged                                   = 2,
	None                                     = 3,
	EFortHotSpotSlot_MAX                     = 4,
};

// Enum FortniteAI.EFortHotSpotDirection
// NumValues: 0x0008
enum class EFortHotSpotDirection : uint8
{
	PositiveX                                = 0,
	NegativeX                                = 1,
	PositiveY                                = 2,
	NegativeY                                = 3,
	PositiveZ                                = 4,
	NegativeZ                                = 5,
	Any                                      = 6,
	EFortHotSpotDirection_MAX                = 7,
};

// Enum FortniteAI.EFortHotSpotPreview
// NumValues: 0x0004
enum class EFortHotSpotPreview : uint8
{
	None                                     = 0,
	Smashing                                 = 1,
	Shooting                                 = 2,
	EFortHotSpotPreview_MAX                  = 3,
};

// Enum FortniteAI.EHotspotTypeConfigMode
// NumValues: 0x0004
enum class EHotspotTypeConfigMode : uint8
{
	AlwaysAdd                                = 0,
	WhenNotDefined                           = 1,
	WhenNotValid                             = 2,
	EHotspotTypeConfigMode_MAX               = 3,
};

// Enum FortniteAI.EFortPartialPathUsage
// NumValues: 0x0004
enum class EFortPartialPathUsage : uint8
{
	Always                                   = 0,
	OnlyGoalsOnDestructible                  = 1,
	Never                                    = 2,
	EFortPartialPathUsage_MAX                = 3,
};

// Enum FortniteAI.ETargetDistanceComparisonType
// NumValues: 0x0004
enum class ETargetDistanceComparisonType : uint8
{
	TwoDimensions                            = 0,
	ThreeDimensions                          = 1,
	CollisionHalfHeightMultiplier            = 2,
	ETargetDistanceComparisonType_MAX        = 3,
};

// Enum FortniteAI.EAIScalableFloatScalingType
// NumValues: 0x0003
enum class EAIScalableFloatScalingType : uint32
{
	Disabled                                 = 0,
	ReceivedDamageByTarget                   = 1,
	EAIScalableFloatScalingType_MAX          = 2,
};

// Enum FortniteAI.EAIBotBuildingTemplate
// NumValues: 0x0006
enum class EAIBotBuildingTemplate : uint8
{
	SingleWall                               = 0,
	SingleRamp                               = 1,
	SingleRoof                               = 2,
	SingleBrace                              = 3,
	SingleWallWindow                         = 4,
	MAX                                      = 5,
};

// Enum FortniteAI.EObstacleType
// NumValues: 0x0006
enum class EObstacleType : uint8
{
	IncomingSmashable                        = 0,
	BlockingSmashable                        = 1,
	BlockingDetectedTrap                     = 2,
	Unknown                                  = 3,
	Count                                    = 3,
	EObstacleType_MAX                        = 4,
};

// Enum FortniteAI.EHarvestResult
// NumValues: 0x0005
enum class EHarvestResult : uint8
{
	None                                     = 0,
	InProgress                               = 1,
	Success                                  = 2,
	Fail                                     = 3,
	EHarvestResult_MAX                       = 4,
};

// Enum FortniteAI.EReachLocationValidationMode
// NumValues: 0x0005
enum class EReachLocationValidationMode : uint8
{
	None                                     = 0,
	Storm                                    = 1,
	Leash                                    = 2,
	SoftLeash                                = 3,
	EReachLocationValidationMode_MAX         = 4,
};

// Enum FortniteAI.EBotNamingMode
// NumValues: 0x0007
enum class EBotNamingMode : uint8
{
	RealName                                 = 0,
	SkinName                                 = 1,
	Anonymous                                = 2,
	Custom                                   = 3,
	CharacterDataDisplayName                 = 4,
	CustomIncremental                        = 5,
	EBotNamingMode_MAX                       = 6,
};

// Enum FortniteAI.EBotControllerClamberStatus
// NumValues: 0x0005
enum class EBotControllerClamberStatus : uint8
{
	Invalid                                  = 0,
	MoveStarted                              = 1,
	MoveDone                                 = 2,
	MoveFailed                               = 3,
	EBotControllerClamberStatus_MAX          = 4,
};

// Enum FortniteAI.EDefensivePlayerStyleSource
// NumValues: 0x0003
enum class EDefensivePlayerStyleSource : uint8
{
	Unknown                                  = 0,
	Escape                                   = 1,
	MAX                                      = 2,
};

// Enum FortniteAI.BotDataOverrideCosmeticMode
// NumValues: 0x0003
enum class EBotDataOverrideCosmeticMode : uint8
{
	SpecificLoadout                          = 0,
	CosmeticLibrary                          = 1,
	BotDataOverrideCosmeticMode_MAX          = 2,
};

// Enum FortniteAI.EFortAthenaAICanMoveState
// NumValues: 0x0007
enum class EFortAthenaAICanMoveState : uint8
{
	None                                     = 0,
	Failed_AgentOffNavmesh                   = 1,
	Failed_GoalOffNavmesh                    = 2,
	Failed_Falling                           = 3,
	Success                                  = 4,
	Success_Partial                          = 5,
	EFortAthenaAICanMoveState_MAX            = 6,
};

// Enum FortniteAI.EEvasiveManeuverType
// NumValues: 0x0006
enum class EEvasiveManeuverType : uint8
{
	Crouch                                   = 0,
	Dodge                                    = 1,
	Jump                                     = 2,
	JetpackStrafe                            = 3,
	None                                     = 4,
	EEvasiveManeuverType_MAX                 = 5,
};

// Enum FortniteAI.EFreeFallingMode
// NumValues: 0x0005
enum class EFreeFallingMode : uint8
{
	Idle                                     = 0,
	Random                                   = 1,
	TowardNearestAlly                        = 2,
	PatrolPath                               = 3,
	EFreeFallingMode_MAX                     = 4,
};

// Enum FortniteAI.EFocusingBehavior
// NumValues: 0x000A
enum class EFocusingBehavior : uint8
{
	FocusCurrentTarget                       = 0,
	IgnoreThreatAfterTimer                   = 1,
	IgnoreThreatAlways                       = 2,
	LookAtInvestigate                        = 3,
	LookAtAmbush                             = 4,
	LookAtHeardSound                         = 5,
	LookAtScanAround                         = 6,
	LookAtScanAroundOnly                     = 7,
	Invalid                                  = 8,
	EFocusingBehavior_MAX                    = 9,
};

// Enum FortniteAI.EAILootBlackListReason
// NumValues: 0x000D
enum class EAILootBlackListReason : uint8
{
	Invalid                                  = 0,
	ExecutionError                           = 1,
	CannotReachLootLocation                  = 2,
	OutsideSafeZoneRadius                    = 3,
	NoInventorySpace                         = 4,
	LootStateUnavailable                     = 5,
	PathNotFound                             = 6,
	GoalOffNavmesh                           = 7,
	AgentBlocked                             = 8,
	IsolatedIsland                           = 9,
	UnsupportedItem                          = 10,
	Count                                    = 11,
	EAILootBlackListReason_MAX               = 12,
};

// Enum FortniteAI.EBotMovementState
// NumValues: 0x000D
enum class EBotMovementState : uint8
{
	None                                     = 0,
	InProgress                               = 1,
	Failed_NoPathFound                       = 2,
	Failed_Aborted                           = 3,
	Failed_AgentOffNavmesh                   = 4,
	Failed_GoalOffNavmesh                    = 5,
	Failed_Blocked                           = 6,
	Failed_OffPath                           = 7,
	Failed_Falling                           = 8,
	Success                                  = 9,
	Success_Partial                          = 10,
	Success_AlreadyAtGoal                    = 11,
	EBotMovementState_MAX                    = 12,
};

// Enum FortniteAI.EBotUnstuckSteeringReason
// NumValues: 0x0004
enum class EBotUnstuckSteeringReason : uint8
{
	Unknown                                  = 0,
	OffNavMesh                               = 1,
	IsolatedIsland                           = 2,
	EBotUnstuckSteeringReason_MAX            = 3,
};

// Enum FortniteAI.EPathTestQueryType
// NumValues: 0x0004
enum class EPathTestQueryType : uint8
{
	NavmeshRaycast2D                         = 0,
	HierarchicalQuery                        = 1,
	RegularPathFinding                       = 2,
	EPathTestQueryType_MAX                   = 3,
};

// Enum FortniteAI.EExecutionStatus
// NumValues: 0x0006
enum class EExecutionStatus : uint8
{
	ExecutionError                           = 0,
	ExecutionDenied                          = 1,
	ExecutionSuccess                         = 2,
	ExecutionPending                         = 3,
	ExecutionAllowed                         = 4,
	EExecutionStatus_MAX                     = 5,
};

// Enum FortniteAI.ELootElementType
// NumValues: 0x0005
enum class ELootElementType : uint8
{
	Pickup                                   = 0,
	Chest                                    = 1,
	SupplyDrop                               = 2,
	Invalid                                  = 255,
	//ELootElementType_MAX                     = 256,
};

// Enum FortniteAI.EFortAthenaAISpawnerDataComponentTriBool
// NumValues: 0x0004
enum class EFortAthenaAISpawnerDataComponentTriBool : uint8
{
	Yes                                      = 0,
	No                                       = 1,
	DoNotModify                              = 2,
	EFortAthenaAISpawnerDataComponentTriBool_MAX = 3,
};

// Enum FortniteAI.EBehaviorTreeBranches
// NumValues: 0x0014
enum class EBehaviorTreeBranches : uint8
{
	CanUseDiving                             = 0,
	CanUseGliding                            = 1,
	CanReactToProjectile                     = 2,
	CanReactToTraps                          = 3,
	CanAvoidDangerArea                       = 4,
	CanBeConverted                           = 5,
	CanPropagateAwareness                    = 6,
	CanUseThreatenedBehaviors                = 7,
	CanUseLastKnownPositionBehavior          = 8,
	CanUseAlertedBehavior                    = 9,
	CanUseSmartObjects                       = 10,
	CanReviveDBNOTeammates                   = 11,
	CanPlayEmote                             = 12,
	CanConverse                              = 13,
	CanPatrolOnPath                          = 14,
	CanPatrolAround                          = 15,
	CanTeleportWhenStuck                     = 16,
	CanEmoteWhenStuck                        = 17,
	Count                                    = 18,
	EBehaviorTreeBranches_MAX                = 19,
};

// Enum FortniteAI.EBehaviorTreeBranchesBitmask
// NumValues: 0x0014
enum class EBehaviorTreeBranchesBitmask : uint8
{
	CanUseDiving                             = 0,
	CanUseGliding                            = 1,
	CanReactToProjectile                     = 2,
	CanReactToTraps                          = 3,
	CanAvoidDangerArea                       = 4,
	CanBeConverted                           = 5,
	CanPropagateAwareness                    = 6,
	CanUseThreatenedBehaviors                = 7,
	CanUseLastKnownPositionBehavior          = 8,
	CanUseAlertedBehavior                    = 9,
	CanUseSmartObjects                       = 10,
	CanReviveDBNOTeammates                   = 11,
	CanPlayEmote                             = 12,
	CanConverse                              = 13,
	CanPatrolOnPath                          = 14,
	CanPatrolAround                          = 15,
	CanTeleportWhenStuck                     = 16,
	CanEmoteWhenStuck                        = 17,
	Count                                    = 18,
	EBehaviorTreeBranchesBitmask_MAX         = 19,
};

// Enum FortniteAI.ETeleportReason
// NumValues: 0x0006
enum class ETeleportReason : uint8
{
	AgentNotOnNavmesh                        = 0,
	AgentDestinationNotOnNavMesh             = 1,
	AgentStuckInRepetitivePartialPaths       = 2,
	AgentBlocked                             = 3,
	Unknown                                  = 4,
	ETeleportReason_MAX                      = 5,
};

// Enum FortniteAI.EActionState
// NumValues: 0x0008
enum class EActionState : uint8
{
	TryingToEquip                            = 0,
	EquippingItem                            = 1,
	UsingItem                                = 2,
	WaitingItemTermination                   = 3,
	WaitBeforeEquippingNextItem              = 4,
	ActionEndedWithNoError                   = 5,
	ActionEndedWithError                     = 6,
	EActionState_MAX                         = 7,
};

// Enum FortniteAI.SwitchSeatType
// NumValues: 0x0005
enum class ESwitchSeatType : uint8
{
	ToDriver                                 = 0,
	ToPassenger                              = 1,
	ToGunner                                 = 2,
	ToSpotter                                = 3,
	SwitchSeatType_MAX                       = 4,
};

// Enum FortniteAI.EEncampmentRole
// NumValues: 0x0004
enum class EEncampmentRole : uint8
{
	Guard                                    = 0,
	Build                                    = 1,
	Count                                    = 2,
	EEncampmentRole_MAX                      = 3,
};

// Enum FortniteAI.EPatrollingMode
// NumValues: 0x0003
enum class EPatrollingMode : uint8
{
	BackAndForth                             = 0,
	Loop                                     = 1,
	EPatrollingMode_MAX                      = 2,
};

// Enum FortniteAI.SeatStatusType
// NumValues: 0x0005
enum class ESeatStatusType : uint8
{
	Driver                                   = 0,
	Passenger                                = 1,
	Gunner                                   = 2,
	Spotter                                  = 3,
	SeatStatusType_MAX                       = 4,
};

// Enum FortniteAI.EFortCreativePatrolPathGroup
// NumValues: 0x001C
enum class EFortCreativePatrolPathGroup : uint8
{
	Group_A                                  = 0,
	Group_B                                  = 1,
	Group_C                                  = 2,
	Group_D                                  = 3,
	Group_E                                  = 4,
	Group_F                                  = 5,
	Group_G                                  = 6,
	Group_H                                  = 7,
	Group_I                                  = 8,
	Group_J                                  = 9,
	Group_K                                  = 10,
	Group_L                                  = 11,
	Group_M                                  = 12,
	Group_N                                  = 13,
	Group_O                                  = 14,
	Group_P                                  = 15,
	Group_Q                                  = 16,
	Group_R                                  = 17,
	Group_S                                  = 18,
	Group_T                                  = 19,
	Group_U                                  = 20,
	Group_V                                  = 21,
	Group_W                                  = 22,
	Group_X                                  = 23,
	Group_Y                                  = 24,
	Group_Z                                  = 25,
	Group_None                               = 26,
	Group_MAX                                = 27,
};

// Enum FortniteAI.ERatingsEnforcementType
// NumValues: 0x0005
enum class ERatingsEnforcementType : uint8
{
	Default                                  = 0,
	IgnoreMaximums                           = 1,
	IgnoreParty                              = 2,
	IgnorePartyMaximum                       = 3,
	ERatingsEnforcementType_MAX              = 4,
};

// Enum FortniteAI.EClampType
// NumValues: 0x0003
enum class EClampType : uint8
{
	Minimum                                  = 0,
	Maximum                                  = 1,
	EClampType_MAX                           = 2,
};

// Enum FortniteAI.EFortIntensityCurveSequenceType
// NumValues: 0x0005
enum class EFortIntensityCurveSequenceType : uint8
{
	Sequence                                 = 0,
	Loop                                     = 1,
	Random                                   = 2,
	Max_None                                 = 3,
	EFortIntensityCurveSequenceType_MAX      = 4,
};

// Enum FortniteAI.EFortAreaFlag
// NumValues: 0x0006
enum class EFortAreaFlag : uint8
{
	Default                                  = 0,
	Obstacle                                 = 1,
	Smashable                                = 2,
	Unwalkable                               = 3,
	Interactable                             = 4,
	EFortAreaFlag_MAX                        = 5,
};

// Enum FortniteAI.EFortNavLinkPattern
// NumValues: 0x0005
enum class EFortNavLinkPattern : uint8
{
	Floor                                    = 0,
	Stairs                                   = 1,
	Roof                                     = 2,
	Manual                                   = 3,
	EFortNavLinkPattern_MAX                  = 4,
};

// Enum FortniteAI.EFortNamedNavmesh
// NumValues: 0x0003
enum class EFortNamedNavmesh : uint8
{
	Husk                                     = 0,
	Smasher                                  = 1,
	MAX                                      = 2,
};

// Enum FortniteAI.EPathObstacleAction
// NumValues: 0x0005
enum class EPathObstacleAction : uint8
{
	Melee                                    = 0,
	Ignore                                   = 1,
	AbortMoveAsFailed                        = 2,
	FinishMoveAsSucceeded                    = 3,
	EPathObstacleAction_MAX                  = 4,
};

// Enum FortniteAI.EPathUndermineEvent
// NumValues: 0x0004
enum class EPathUndermineEvent : uint8
{
	Predicted                                = 0,
	Started                                  = 1,
	Finished                                 = 2,
	EPathUndermineEvent_MAX                  = 3,
};

// Enum FortniteAI.EWardAffectType
// NumValues: 0x0004
enum class EWardAffectType : uint8
{
	AffectsBothStartAndEndPoints             = 0,
	AffectsOnlyStartPoints                   = 1,
	AffectsOnlyEndPoints                     = 2,
	EWardAffectType_MAX                      = 3,
};

// Enum FortniteAI.EDBNOPlayStyle
// NumValues: 0x0006
enum class EDBNOPlayStyle : uint8
{
	Thirsty                                  = 0,
	Default                                  = 1,
	Passive                                  = 2,
	ThristyButPassiveOnPlayers               = 3,
	DefaultButPassiveOnPlayers               = 4,
	EDBNOPlayStyle_MAX                       = 5,
};

// Enum FortniteAI.EStimType
// NumValues: 0x000A
enum class EStimType : uint8
{
	Seeing                                   = 0,
	Seen                                     = 1,
	MightHaveSeen                            = 2,
	Hurt                                     = 3,
	Heard                                    = 4,
	Obstacle                                 = 5,
	Enemy                                    = 6,
	Unknown                                  = 7,
	Count                                    = 7,
	EStimType_MAX                            = 8,
};

// Enum FortniteAI.EPerceptionState
// NumValues: 0x000A
enum class EPerceptionState : uint8
{
	Threat_Seeing                            = 0,
	Threat_LKP                               = 1,
	Threat_Alerted                           = 2,
	ObstacleIncoming                         = 3,
	ObstacleBlockedBy                        = 4,
	ObstacleDetectedTrap                     = 5,
	Unknown                                  = 6,
	Count                                    = 6,
	Threat_Count                             = 3,
	EPerceptionState_MAX                     = 7,
};

// Enum FortniteAI.ETrackingOffsetModifierCurve
// NumValues: 0x0004
enum class ETrackingOffsetModifierCurve : uint8
{
	Default                                  = 0,
	CombatStart                              = 1,
	TargetLowHealth                          = 2,
	MAX                                      = 3,
};

// Enum FortniteAI.EPerceptionSoundType
// NumValues: 0x0008
enum class EPerceptionSoundType : uint8
{
	Default                                  = 0,
	Explosion                                = 1,
	ProjectileFlyBy                          = 2,
	ProjectileImpact                         = 3,
	WeaponFiring                             = 4,
	Building                                 = 5,
	MeleeImpact                              = 6,
	MAX                                      = 7,
};

// Enum FortniteAI.ELookAtType
// NumValues: 0x0005
enum class ELookAtType : uint8
{
	ScanAround                               = 0,
	Investigate                              = 1,
	HeardSound                               = 2,
	Ambush                                   = 3,
	MAX                                      = 4,
};

// Enum FortniteAI.ELeashReturnLocationMode
// NumValues: 0x0003
enum class ELeashReturnLocationMode : uint8
{
	Closest                                  = 0,
	Random                                   = 1,
	ELeashReturnLocationMode_MAX             = 2,
};

// Enum FortniteAI.EOrientedConstructionBuildingType
// NumValues: 0x0010
enum class EOrientedConstructionBuildingType : uint8
{
	WallX                                    = 0,
	WallY                                    = 1,
	Floor                                    = 2,
	StairsUpX                                = 3,
	StairsUpY                                = 4,
	StairsDownX                              = 5,
	StairsDownY                              = 6,
	Roof                                     = 7,
	BraceLeftX                               = 8,
	BraceRightX                              = 9,
	BraceLeftY                               = 10,
	BraceRightY                              = 11,
	WallWindowX                              = 12,
	WallWindowY                              = 13,
	Count                                    = 14,
	EOrientedConstructionBuildingType_MAX    = 15,
};

// Enum FortniteAI.EConstructionBuildingType
// NumValues: 0x0008
enum class EConstructionBuildingType : uint8
{
	Wall                                     = 0,
	Floor                                    = 1,
	Stairs                                   = 2,
	Roof                                     = 3,
	Brace                                    = 4,
	WallWindow                               = 5,
	Count                                    = 6,
	EConstructionBuildingType_MAX            = 7,
};

// Enum FortniteAI.EFortPointsFromNavGraphGoalPathDistanceFilterOperator
// NumValues: 0x0003
enum class EFortPointsFromNavGraphGoalPathDistanceFilterOperator : uint8
{
	AllGoalsInRange                          = 0,
	AnyGoalInRange                           = 1,
	EFortPointsFromNavGraphGoalPathDistanceFilterOperator_MAX = 2,
};

// Enum FortniteAI.EFortTestGoalActorDot
// NumValues: 0x0003
enum class EFortTestGoalActorDot : uint8
{
	Dot3D                                    = 0,
	Dot2D                                    = 1,
	EFortTestGoalActorDot_MAX                = 2,
};

// Enum FortniteAI.EDistanceMode
// NumValues: 0x0004
enum class EDistanceMode : uint8
{
	DistItemToContext                        = 0,
	DistItemGoalActorToContext               = 1,
	DistItemToItemGoalActor                  = 2,
	EDistanceMode_MAX                        = 3,
};

// Enum FortniteAI.ECountAIAssignedToType
// NumValues: 0x0004
enum class ECountAIAssignedToType : uint8
{
	Goal                                     = 0,
	Actor                                    = 1,
	Assignment                               = 2,
	ECountAIAssignedToType_MAX               = 3,
};

// Enum FortniteAI.ETwoPointSolverRotationA
// NumValues: 0x0006
enum class ETwoPointSolverRotationA : uint8
{
	PointAToQuerier                          = 0,
	QuerierToPointA                          = 1,
	PointAToQuerierWithRandomOffset          = 2,
	QuerierToPointAWithRandomOffset          = 3,
	Custom                                   = 4,
	ETwoPointSolverRotationA_MAX             = 5,
};

// Enum FortniteAI.EFortThreatDeactivationType
// NumValues: 0x0003
enum class EFortThreatDeactivationType : uint8
{
	Off                                      = 0,
	Dormant                                  = 1,
	EFortThreatDeactivationType_MAX          = 2,
};

// ScriptStruct FortniteAI.AIHotSpotSlotConfig
// 0x0038 (0x0038 - 0x0000)
struct FAIHotSpotSlotConfig final
{
public:
	struct FVector                                Offset;                                            // 0x0000(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0018(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortHotSpotSlot                              SlotType;                                          // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIHotSpotSlotConfig) == 0x000008, "Wrong alignment on FAIHotSpotSlotConfig");
static_assert(sizeof(FAIHotSpotSlotConfig) == 0x000038, "Wrong size on FAIHotSpotSlotConfig");
static_assert(offsetof(FAIHotSpotSlotConfig, Offset) == 0x000000, "Member 'FAIHotSpotSlotConfig::Offset' has a wrong offset!");
static_assert(offsetof(FAIHotSpotSlotConfig, Direction) == 0x000018, "Member 'FAIHotSpotSlotConfig::Direction' has a wrong offset!");
static_assert(offsetof(FAIHotSpotSlotConfig, SlotType) == 0x000030, "Member 'FAIHotSpotSlotConfig::SlotType' has a wrong offset!");

// ScriptStruct FortniteAI.FortAIEncounterRequirements
// 0x0050 (0x0050 - 0x0000)
struct FFortAIEncounterRequirements final
{
public:
	EFortMissionType                              AssociatedMissionType;                             // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0008(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortAIEncounterRequirements) == 0x000008, "Wrong alignment on FFortAIEncounterRequirements");
static_assert(sizeof(FFortAIEncounterRequirements) == 0x000050, "Wrong size on FFortAIEncounterRequirements");
static_assert(offsetof(FFortAIEncounterRequirements, AssociatedMissionType) == 0x000000, "Member 'FFortAIEncounterRequirements::AssociatedMissionType' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterRequirements, TagQuery) == 0x000008, "Member 'FFortAIEncounterRequirements::TagQuery' has a wrong offset!");

// ScriptStruct FortniteAI.AimingCircleSettings
// 0x01B8 (0x01B8 - 0x0000)
struct FAimingCircleSettings final
{
public:
	struct FScalableFloat                         UseAimingCircle;                                   // 0x0000(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         CircleCenterOffsetZ;                               // 0x0028(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MinCircleOpeningAngleVertical;                     // 0x0050(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MaxCircleOpeningAngleVertical;                     // 0x0078(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MinCircleOpeningAngleHorizontal;                   // 0x00A0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MaxCircleOpeningAngleHorizontal;                   // 0x00C8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MinCursorRotationSpeed;                            // 0x00F0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MaxCursorRotationSpeed;                            // 0x0118(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MinCursorUpdateInterval;                           // 0x0140(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MaxCursorUpdateInterval;                           // 0x0168(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         ShrinkTimeBetweenHits;                             // 0x0190(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FAimingCircleSettings) == 0x000008, "Wrong alignment on FAimingCircleSettings");
static_assert(sizeof(FAimingCircleSettings) == 0x0001B8, "Wrong size on FAimingCircleSettings");
static_assert(offsetof(FAimingCircleSettings, UseAimingCircle) == 0x000000, "Member 'FAimingCircleSettings::UseAimingCircle' has a wrong offset!");
static_assert(offsetof(FAimingCircleSettings, CircleCenterOffsetZ) == 0x000028, "Member 'FAimingCircleSettings::CircleCenterOffsetZ' has a wrong offset!");
static_assert(offsetof(FAimingCircleSettings, MinCircleOpeningAngleVertical) == 0x000050, "Member 'FAimingCircleSettings::MinCircleOpeningAngleVertical' has a wrong offset!");
static_assert(offsetof(FAimingCircleSettings, MaxCircleOpeningAngleVertical) == 0x000078, "Member 'FAimingCircleSettings::MaxCircleOpeningAngleVertical' has a wrong offset!");
static_assert(offsetof(FAimingCircleSettings, MinCircleOpeningAngleHorizontal) == 0x0000A0, "Member 'FAimingCircleSettings::MinCircleOpeningAngleHorizontal' has a wrong offset!");
static_assert(offsetof(FAimingCircleSettings, MaxCircleOpeningAngleHorizontal) == 0x0000C8, "Member 'FAimingCircleSettings::MaxCircleOpeningAngleHorizontal' has a wrong offset!");
static_assert(offsetof(FAimingCircleSettings, MinCursorRotationSpeed) == 0x0000F0, "Member 'FAimingCircleSettings::MinCursorRotationSpeed' has a wrong offset!");
static_assert(offsetof(FAimingCircleSettings, MaxCursorRotationSpeed) == 0x000118, "Member 'FAimingCircleSettings::MaxCursorRotationSpeed' has a wrong offset!");
static_assert(offsetof(FAimingCircleSettings, MinCursorUpdateInterval) == 0x000140, "Member 'FAimingCircleSettings::MinCursorUpdateInterval' has a wrong offset!");
static_assert(offsetof(FAimingCircleSettings, MaxCursorUpdateInterval) == 0x000168, "Member 'FAimingCircleSettings::MaxCursorUpdateInterval' has a wrong offset!");
static_assert(offsetof(FAimingCircleSettings, ShrinkTimeBetweenHits) == 0x000190, "Member 'FAimingCircleSettings::ShrinkTimeBetweenHits' has a wrong offset!");

// ScriptStruct FortniteAI.WeaponAccuracy
// 0x0508 (0x0508 - 0x0000)
struct FWeaponAccuracy final
{
public:
	struct FScalableFloat                         MaxTrackingOffsetError;                            // 0x0000(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         TargetingMaxTrackingOffsetError;                   // 0x0028(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MaxTrackingDistanceFarError;                       // 0x0050(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         TargetingMaxTrackingDistanceFarError;              // 0x0078(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MaxTrackingDistanceNearError;                      // 0x00A0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         TargetingMaxTrackingDistanceNearError;             // 0x00C8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         TrackingDistanceNearErrorProbability;              // 0x00F0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         TargetingActivationProbability;                    // 0x0118(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         FiringRestrictedToTargetingActive;                 // 0x0140(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MinimumDistanceForAiming;                          // 0x0168(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MinimumDistanceForPawnAiming;                      // 0x0190(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         IdealAttackRange;                                  // 0x01B8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         TargetingIdealAttackRange;                         // 0x01E0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MaxAttackRangeFactor;                              // 0x0208(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         ShouldAimAtTargetsFeet;                            // 0x0230(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         ShouldUseProjectileArcForAiming;                   // 0x0258(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         KeepAimingOnSameSideWhileFiring;                   // 0x0280(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MaxTrackingHeightOffsetError;                      // 0x02A8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MinRotationInterpSpeed;                            // 0x02D0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MaxRotationInterpSpeed;                            // 0x02F8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         ConsiderProjectileTravelTime;                      // 0x0320(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	bool                                          bOverrideAimingCircleSettings;                     // 0x0348(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAimingCircleSettings                  AimingCircleSettingsOverride;                      // 0x0350(0x01B8)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FWeaponAccuracy) == 0x000008, "Wrong alignment on FWeaponAccuracy");
static_assert(sizeof(FWeaponAccuracy) == 0x000508, "Wrong size on FWeaponAccuracy");
static_assert(offsetof(FWeaponAccuracy, MaxTrackingOffsetError) == 0x000000, "Member 'FWeaponAccuracy::MaxTrackingOffsetError' has a wrong offset!");
static_assert(offsetof(FWeaponAccuracy, TargetingMaxTrackingOffsetError) == 0x000028, "Member 'FWeaponAccuracy::TargetingMaxTrackingOffsetError' has a wrong offset!");
static_assert(offsetof(FWeaponAccuracy, MaxTrackingDistanceFarError) == 0x000050, "Member 'FWeaponAccuracy::MaxTrackingDistanceFarError' has a wrong offset!");
static_assert(offsetof(FWeaponAccuracy, TargetingMaxTrackingDistanceFarError) == 0x000078, "Member 'FWeaponAccuracy::TargetingMaxTrackingDistanceFarError' has a wrong offset!");
static_assert(offsetof(FWeaponAccuracy, MaxTrackingDistanceNearError) == 0x0000A0, "Member 'FWeaponAccuracy::MaxTrackingDistanceNearError' has a wrong offset!");
static_assert(offsetof(FWeaponAccuracy, TargetingMaxTrackingDistanceNearError) == 0x0000C8, "Member 'FWeaponAccuracy::TargetingMaxTrackingDistanceNearError' has a wrong offset!");
static_assert(offsetof(FWeaponAccuracy, TrackingDistanceNearErrorProbability) == 0x0000F0, "Member 'FWeaponAccuracy::TrackingDistanceNearErrorProbability' has a wrong offset!");
static_assert(offsetof(FWeaponAccuracy, TargetingActivationProbability) == 0x000118, "Member 'FWeaponAccuracy::TargetingActivationProbability' has a wrong offset!");
static_assert(offsetof(FWeaponAccuracy, FiringRestrictedToTargetingActive) == 0x000140, "Member 'FWeaponAccuracy::FiringRestrictedToTargetingActive' has a wrong offset!");
static_assert(offsetof(FWeaponAccuracy, MinimumDistanceForAiming) == 0x000168, "Member 'FWeaponAccuracy::MinimumDistanceForAiming' has a wrong offset!");
static_assert(offsetof(FWeaponAccuracy, MinimumDistanceForPawnAiming) == 0x000190, "Member 'FWeaponAccuracy::MinimumDistanceForPawnAiming' has a wrong offset!");
static_assert(offsetof(FWeaponAccuracy, IdealAttackRange) == 0x0001B8, "Member 'FWeaponAccuracy::IdealAttackRange' has a wrong offset!");
static_assert(offsetof(FWeaponAccuracy, TargetingIdealAttackRange) == 0x0001E0, "Member 'FWeaponAccuracy::TargetingIdealAttackRange' has a wrong offset!");
static_assert(offsetof(FWeaponAccuracy, MaxAttackRangeFactor) == 0x000208, "Member 'FWeaponAccuracy::MaxAttackRangeFactor' has a wrong offset!");
static_assert(offsetof(FWeaponAccuracy, ShouldAimAtTargetsFeet) == 0x000230, "Member 'FWeaponAccuracy::ShouldAimAtTargetsFeet' has a wrong offset!");
static_assert(offsetof(FWeaponAccuracy, ShouldUseProjectileArcForAiming) == 0x000258, "Member 'FWeaponAccuracy::ShouldUseProjectileArcForAiming' has a wrong offset!");
static_assert(offsetof(FWeaponAccuracy, KeepAimingOnSameSideWhileFiring) == 0x000280, "Member 'FWeaponAccuracy::KeepAimingOnSameSideWhileFiring' has a wrong offset!");
static_assert(offsetof(FWeaponAccuracy, MaxTrackingHeightOffsetError) == 0x0002A8, "Member 'FWeaponAccuracy::MaxTrackingHeightOffsetError' has a wrong offset!");
static_assert(offsetof(FWeaponAccuracy, MinRotationInterpSpeed) == 0x0002D0, "Member 'FWeaponAccuracy::MinRotationInterpSpeed' has a wrong offset!");
static_assert(offsetof(FWeaponAccuracy, MaxRotationInterpSpeed) == 0x0002F8, "Member 'FWeaponAccuracy::MaxRotationInterpSpeed' has a wrong offset!");
static_assert(offsetof(FWeaponAccuracy, ConsiderProjectileTravelTime) == 0x000320, "Member 'FWeaponAccuracy::ConsiderProjectileTravelTime' has a wrong offset!");
static_assert(offsetof(FWeaponAccuracy, bOverrideAimingCircleSettings) == 0x000348, "Member 'FWeaponAccuracy::bOverrideAimingCircleSettings' has a wrong offset!");
static_assert(offsetof(FWeaponAccuracy, AimingCircleSettingsOverride) == 0x000350, "Member 'FWeaponAccuracy::AimingCircleSettingsOverride' has a wrong offset!");

// ScriptStruct FortniteAI.WeaponAccuracyCategorySpecialization
// 0x0528 (0x0528 - 0x0000)
struct FWeaponAccuracyCategorySpecialization final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FWeaponAccuracy                        WeaponAccuracy;                                    // 0x0020(0x0508)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FWeaponAccuracyCategorySpecialization) == 0x000008, "Wrong alignment on FWeaponAccuracyCategorySpecialization");
static_assert(sizeof(FWeaponAccuracyCategorySpecialization) == 0x000528, "Wrong size on FWeaponAccuracyCategorySpecialization");
static_assert(offsetof(FWeaponAccuracyCategorySpecialization, Tags) == 0x000000, "Member 'FWeaponAccuracyCategorySpecialization::Tags' has a wrong offset!");
static_assert(offsetof(FWeaponAccuracyCategorySpecialization, WeaponAccuracy) == 0x000020, "Member 'FWeaponAccuracyCategorySpecialization::WeaponAccuracy' has a wrong offset!");

// ScriptStruct FortniteAI.WeaponAccuracyCategory
// 0x0538 (0x0538 - 0x0000)
struct FWeaponAccuracyCategory final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FWeaponAccuracy                        WeaponAccuracy;                                    // 0x0020(0x0508)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TArray<struct FWeaponAccuracyCategorySpecialization> Specializations;                                   // 0x0528(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FWeaponAccuracyCategory) == 0x000008, "Wrong alignment on FWeaponAccuracyCategory");
static_assert(sizeof(FWeaponAccuracyCategory) == 0x000538, "Wrong size on FWeaponAccuracyCategory");
static_assert(offsetof(FWeaponAccuracyCategory, Tags) == 0x000000, "Member 'FWeaponAccuracyCategory::Tags' has a wrong offset!");
static_assert(offsetof(FWeaponAccuracyCategory, WeaponAccuracy) == 0x000020, "Member 'FWeaponAccuracyCategory::WeaponAccuracy' has a wrong offset!");
static_assert(offsetof(FWeaponAccuracyCategory, Specializations) == 0x000528, "Member 'FWeaponAccuracyCategory::Specializations' has a wrong offset!");

// ScriptStruct FortniteAI.AIHotSpotSlotInfo
// 0x0010 (0x0010 - 0x0000)
struct FAIHotSpotSlotInfo
{
public:
	class AAIHotSpot*                             HotSpot;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIHotSpotSlotInfo) == 0x000008, "Wrong alignment on FAIHotSpotSlotInfo");
static_assert(sizeof(FAIHotSpotSlotInfo) == 0x000010, "Wrong size on FAIHotSpotSlotInfo");
static_assert(offsetof(FAIHotSpotSlotInfo, HotSpot) == 0x000000, "Member 'FAIHotSpotSlotInfo::HotSpot' has a wrong offset!");
static_assert(offsetof(FAIHotSpotSlotInfo, SlotIndex) == 0x000008, "Member 'FAIHotSpotSlotInfo::SlotIndex' has a wrong offset!");

// ScriptStruct FortniteAI.ClientAILODMovementCompOptimizationConfiguration
// 0x01E0 (0x01E0 - 0x0000)
struct FClientAILODMovementCompOptimizationConfiguration final
{
public:
	struct FScalableFloat                         bEnable;                                           // 0x0000(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         bEnableSimulationDataOptimizations;                // 0x0028(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MinDistanceToApplyFrameSkippingWhenVisible;        // 0x0050(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         FrameSkippingOnLOD1;                               // 0x0078(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         bRequireHittingPawnThresholdForLOD1;               // 0x00A0(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         FrameSkippingOnLOD2;                               // 0x00C8(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         bRequireHittingPawnThresholdForLOD2;               // 0x00F0(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         FrameSkippingOnLowestLOD;                          // 0x0118(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         FrameSkippingOnLowestLODWithSmallViewAngleRendered; // 0x0140(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         FrameSkippingOnLowestLODWithSmallViewAngleNotRendered; // 0x0168(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         FrameSkippingInvisible;                            // 0x0190(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         bForceInvisibleValueWhenNotRenderedForThreshold;   // 0x01B8(0x0028)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientAILODMovementCompOptimizationConfiguration) == 0x000008, "Wrong alignment on FClientAILODMovementCompOptimizationConfiguration");
static_assert(sizeof(FClientAILODMovementCompOptimizationConfiguration) == 0x0001E0, "Wrong size on FClientAILODMovementCompOptimizationConfiguration");
static_assert(offsetof(FClientAILODMovementCompOptimizationConfiguration, bEnable) == 0x000000, "Member 'FClientAILODMovementCompOptimizationConfiguration::bEnable' has a wrong offset!");
static_assert(offsetof(FClientAILODMovementCompOptimizationConfiguration, bEnableSimulationDataOptimizations) == 0x000028, "Member 'FClientAILODMovementCompOptimizationConfiguration::bEnableSimulationDataOptimizations' has a wrong offset!");
static_assert(offsetof(FClientAILODMovementCompOptimizationConfiguration, MinDistanceToApplyFrameSkippingWhenVisible) == 0x000050, "Member 'FClientAILODMovementCompOptimizationConfiguration::MinDistanceToApplyFrameSkippingWhenVisible' has a wrong offset!");
static_assert(offsetof(FClientAILODMovementCompOptimizationConfiguration, FrameSkippingOnLOD1) == 0x000078, "Member 'FClientAILODMovementCompOptimizationConfiguration::FrameSkippingOnLOD1' has a wrong offset!");
static_assert(offsetof(FClientAILODMovementCompOptimizationConfiguration, bRequireHittingPawnThresholdForLOD1) == 0x0000A0, "Member 'FClientAILODMovementCompOptimizationConfiguration::bRequireHittingPawnThresholdForLOD1' has a wrong offset!");
static_assert(offsetof(FClientAILODMovementCompOptimizationConfiguration, FrameSkippingOnLOD2) == 0x0000C8, "Member 'FClientAILODMovementCompOptimizationConfiguration::FrameSkippingOnLOD2' has a wrong offset!");
static_assert(offsetof(FClientAILODMovementCompOptimizationConfiguration, bRequireHittingPawnThresholdForLOD2) == 0x0000F0, "Member 'FClientAILODMovementCompOptimizationConfiguration::bRequireHittingPawnThresholdForLOD2' has a wrong offset!");
static_assert(offsetof(FClientAILODMovementCompOptimizationConfiguration, FrameSkippingOnLowestLOD) == 0x000118, "Member 'FClientAILODMovementCompOptimizationConfiguration::FrameSkippingOnLowestLOD' has a wrong offset!");
static_assert(offsetof(FClientAILODMovementCompOptimizationConfiguration, FrameSkippingOnLowestLODWithSmallViewAngleRendered) == 0x000140, "Member 'FClientAILODMovementCompOptimizationConfiguration::FrameSkippingOnLowestLODWithSmallViewAngleRendered' has a wrong offset!");
static_assert(offsetof(FClientAILODMovementCompOptimizationConfiguration, FrameSkippingOnLowestLODWithSmallViewAngleNotRendered) == 0x000168, "Member 'FClientAILODMovementCompOptimizationConfiguration::FrameSkippingOnLowestLODWithSmallViewAngleNotRendered' has a wrong offset!");
static_assert(offsetof(FClientAILODMovementCompOptimizationConfiguration, FrameSkippingInvisible) == 0x000190, "Member 'FClientAILODMovementCompOptimizationConfiguration::FrameSkippingInvisible' has a wrong offset!");
static_assert(offsetof(FClientAILODMovementCompOptimizationConfiguration, bForceInvisibleValueWhenNotRenderedForThreshold) == 0x0001B8, "Member 'FClientAILODMovementCompOptimizationConfiguration::bForceInvisibleValueWhenNotRenderedForThreshold' has a wrong offset!");

// ScriptStruct FortniteAI.ClientAILODSettings
// 0x02F0 (0x02F0 - 0x0000)
struct FClientAILODSettings final
{
public:
	struct FScalableFloat                         ScoreMultiplier;                                   // 0x0000(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         PreloadingPriorityOverride;                        // 0x0028(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         bSupportCharacterMovementOptimization;             // 0x0050(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FClientAILODMovementCompOptimizationConfiguration MovementCompOptimizationConfiguration;             // 0x0078(0x01E0)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         bAIPawnOnlyTickMeshWhenRendered;                   // 0x0258(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         bAIPawnApplyEffectOptimizations;                   // 0x0280(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A8[0x48];                                     // 0x02A8(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientAILODSettings) == 0x000008, "Wrong alignment on FClientAILODSettings");
static_assert(sizeof(FClientAILODSettings) == 0x0002F0, "Wrong size on FClientAILODSettings");
static_assert(offsetof(FClientAILODSettings, ScoreMultiplier) == 0x000000, "Member 'FClientAILODSettings::ScoreMultiplier' has a wrong offset!");
static_assert(offsetof(FClientAILODSettings, PreloadingPriorityOverride) == 0x000028, "Member 'FClientAILODSettings::PreloadingPriorityOverride' has a wrong offset!");
static_assert(offsetof(FClientAILODSettings, bSupportCharacterMovementOptimization) == 0x000050, "Member 'FClientAILODSettings::bSupportCharacterMovementOptimization' has a wrong offset!");
static_assert(offsetof(FClientAILODSettings, MovementCompOptimizationConfiguration) == 0x000078, "Member 'FClientAILODSettings::MovementCompOptimizationConfiguration' has a wrong offset!");
static_assert(offsetof(FClientAILODSettings, bAIPawnOnlyTickMeshWhenRendered) == 0x000258, "Member 'FClientAILODSettings::bAIPawnOnlyTickMeshWhenRendered' has a wrong offset!");
static_assert(offsetof(FClientAILODSettings, bAIPawnApplyEffectOptimizations) == 0x000280, "Member 'FClientAILODSettings::bAIPawnApplyEffectOptimizations' has a wrong offset!");

// ScriptStruct FortniteAI.FortAIDirectorFactorContribution
// 0x000C (0x000C - 0x0000)
struct FFortAIDirectorFactorContribution final
{
public:
	EFortAIDirectorEvent                          AIDirectorEvent;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxContribution;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAIDirectorFactorContribution             ContributionType;                                  // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAIDirectorFactorContribution) == 0x000004, "Wrong alignment on FFortAIDirectorFactorContribution");
static_assert(sizeof(FFortAIDirectorFactorContribution) == 0x00000C, "Wrong size on FFortAIDirectorFactorContribution");
static_assert(offsetof(FFortAIDirectorFactorContribution, AIDirectorEvent) == 0x000000, "Member 'FFortAIDirectorFactorContribution::AIDirectorEvent' has a wrong offset!");
static_assert(offsetof(FFortAIDirectorFactorContribution, MaxContribution) == 0x000004, "Member 'FFortAIDirectorFactorContribution::MaxContribution' has a wrong offset!");
static_assert(offsetof(FFortAIDirectorFactorContribution, ContributionType) == 0x000008, "Member 'FFortAIDirectorFactorContribution::ContributionType' has a wrong offset!");

// ScriptStruct FortniteAI.DroppingAgentData
// 0x0018 (0x0018 - 0x0000)
struct FDroppingAgentData final
{
public:
	class AAthenaAIController*                    AIController;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABuildingActor*                         MovementBase;                                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDroppingAgentData) == 0x000008, "Wrong alignment on FDroppingAgentData");
static_assert(sizeof(FDroppingAgentData) == 0x000018, "Wrong size on FDroppingAgentData");
static_assert(offsetof(FDroppingAgentData, AIController) == 0x000000, "Member 'FDroppingAgentData::AIController' has a wrong offset!");
static_assert(offsetof(FDroppingAgentData, MovementBase) == 0x000008, "Member 'FDroppingAgentData::MovementBase' has a wrong offset!");

// ScriptStruct FortniteAI.FortAthenaAIBotRunTimeCustomizationData
// 0x000C (0x000C - 0x0000)
struct FFortAthenaAIBotRunTimeCustomizationData final
{
public:
	struct FGameplayTag                           PredefinedCosmeticSetTag;                          // 0x0000(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CullDistanceSquared;                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckForOverlaps;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasCustomSquadId;                                 // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CustomSquadId;                                     // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAthenaAIBotRunTimeCustomizationData) == 0x000004, "Wrong alignment on FFortAthenaAIBotRunTimeCustomizationData");
static_assert(sizeof(FFortAthenaAIBotRunTimeCustomizationData) == 0x00000C, "Wrong size on FFortAthenaAIBotRunTimeCustomizationData");
static_assert(offsetof(FFortAthenaAIBotRunTimeCustomizationData, PredefinedCosmeticSetTag) == 0x000000, "Member 'FFortAthenaAIBotRunTimeCustomizationData::PredefinedCosmeticSetTag' has a wrong offset!");
static_assert(offsetof(FFortAthenaAIBotRunTimeCustomizationData, CullDistanceSquared) == 0x000004, "Member 'FFortAthenaAIBotRunTimeCustomizationData::CullDistanceSquared' has a wrong offset!");
static_assert(offsetof(FFortAthenaAIBotRunTimeCustomizationData, bCheckForOverlaps) == 0x000008, "Member 'FFortAthenaAIBotRunTimeCustomizationData::bCheckForOverlaps' has a wrong offset!");
static_assert(offsetof(FFortAthenaAIBotRunTimeCustomizationData, bHasCustomSquadId) == 0x000009, "Member 'FFortAthenaAIBotRunTimeCustomizationData::bHasCustomSquadId' has a wrong offset!");
static_assert(offsetof(FFortAthenaAIBotRunTimeCustomizationData, CustomSquadId) == 0x00000A, "Member 'FFortAthenaAIBotRunTimeCustomizationData::CustomSquadId' has a wrong offset!");

// ScriptStruct FortniteAI.AIPopulationCountSnapshot
// 0x0014 (0x0014 - 0x0000)
struct FAIPopulationCountSnapshot final
{
public:
	int32                                         NumTotalSpawnedBots;                               // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumAliveBots;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumAlivePlayerBots;                                // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumAliveNPCBots;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumAliveAIPawns;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAIPopulationCountSnapshot) == 0x000004, "Wrong alignment on FAIPopulationCountSnapshot");
static_assert(sizeof(FAIPopulationCountSnapshot) == 0x000014, "Wrong size on FAIPopulationCountSnapshot");
static_assert(offsetof(FAIPopulationCountSnapshot, NumTotalSpawnedBots) == 0x000000, "Member 'FAIPopulationCountSnapshot::NumTotalSpawnedBots' has a wrong offset!");
static_assert(offsetof(FAIPopulationCountSnapshot, NumAliveBots) == 0x000004, "Member 'FAIPopulationCountSnapshot::NumAliveBots' has a wrong offset!");
static_assert(offsetof(FAIPopulationCountSnapshot, NumAlivePlayerBots) == 0x000008, "Member 'FAIPopulationCountSnapshot::NumAlivePlayerBots' has a wrong offset!");
static_assert(offsetof(FAIPopulationCountSnapshot, NumAliveNPCBots) == 0x00000C, "Member 'FAIPopulationCountSnapshot::NumAliveNPCBots' has a wrong offset!");
static_assert(offsetof(FAIPopulationCountSnapshot, NumAliveAIPawns) == 0x000010, "Member 'FAIPopulationCountSnapshot::NumAliveAIPawns' has a wrong offset!");

// ScriptStruct FortniteAI.AthenaAIServiceGroupInfo
// 0x0020 (0x0020 - 0x0000)
struct FAthenaAIServiceGroupInfo final
{
public:
	int32                                         GroupId;                                           // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortPawnComponent_AIGroup*             GroupLeader;                                       // 0x0008(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UFortPawnComponent_AIGroup*>     GroupMembers;                                      // 0x0010(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FAthenaAIServiceGroupInfo) == 0x000008, "Wrong alignment on FAthenaAIServiceGroupInfo");
static_assert(sizeof(FAthenaAIServiceGroupInfo) == 0x000020, "Wrong size on FAthenaAIServiceGroupInfo");
static_assert(offsetof(FAthenaAIServiceGroupInfo, GroupId) == 0x000000, "Member 'FAthenaAIServiceGroupInfo::GroupId' has a wrong offset!");
static_assert(offsetof(FAthenaAIServiceGroupInfo, GroupLeader) == 0x000008, "Member 'FAthenaAIServiceGroupInfo::GroupLeader' has a wrong offset!");
static_assert(offsetof(FAthenaAIServiceGroupInfo, GroupMembers) == 0x000010, "Member 'FAthenaAIServiceGroupInfo::GroupMembers' has a wrong offset!");

// ScriptStruct FortniteAI.FortSpawnPointsPercentageCurve
// 0x0010 (0x0018 - 0x0008)
struct FFortSpawnPointsPercentageCurve final : public FTableRowBase
{
public:
	class UCurveTable*                            SpawnPointsPercentageCurveTable;                   // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   SpawnPointsPercentageCurveTableRow;                // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxRampTime;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortSpawnPointsPercentageCurve) == 0x000008, "Wrong alignment on FFortSpawnPointsPercentageCurve");
static_assert(sizeof(FFortSpawnPointsPercentageCurve) == 0x000018, "Wrong size on FFortSpawnPointsPercentageCurve");
static_assert(offsetof(FFortSpawnPointsPercentageCurve, SpawnPointsPercentageCurveTable) == 0x000008, "Member 'FFortSpawnPointsPercentageCurve::SpawnPointsPercentageCurveTable' has a wrong offset!");
static_assert(offsetof(FFortSpawnPointsPercentageCurve, SpawnPointsPercentageCurveTableRow) == 0x000010, "Member 'FFortSpawnPointsPercentageCurve::SpawnPointsPercentageCurveTableRow' has a wrong offset!");
static_assert(offsetof(FFortSpawnPointsPercentageCurve, MaxRampTime) == 0x000014, "Member 'FFortSpawnPointsPercentageCurve::MaxRampTime' has a wrong offset!");

// ScriptStruct FortniteAI.CachedSupplyDrop
// 0x0028 (0x0028 - 0x0000)
struct FCachedSupplyDrop final
{
public:
	class AFortAthenaSupplyDrop*                  supplydrop;                                        // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInOctree;                                         // 0x0008(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LastLocation;                                      // 0x0010(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCachedSupplyDrop) == 0x000008, "Wrong alignment on FCachedSupplyDrop");
static_assert(sizeof(FCachedSupplyDrop) == 0x000028, "Wrong size on FCachedSupplyDrop");
static_assert(offsetof(FCachedSupplyDrop, supplydrop) == 0x000000, "Member 'FCachedSupplyDrop::supplydrop' has a wrong offset!");
static_assert(offsetof(FCachedSupplyDrop, bInOctree) == 0x000008, "Member 'FCachedSupplyDrop::bInOctree' has a wrong offset!");
static_assert(offsetof(FCachedSupplyDrop, LastLocation) == 0x000010, "Member 'FCachedSupplyDrop::LastLocation' has a wrong offset!");

// ScriptStruct FortniteAI.MovingLootInfo
// 0x0018 (0x0018 - 0x0000)
struct FMovingLootInfo final
{
public:
	struct FVector                                LastLocationInOctree;                              // 0x0000(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovingLootInfo) == 0x000008, "Wrong alignment on FMovingLootInfo");
static_assert(sizeof(FMovingLootInfo) == 0x000018, "Wrong size on FMovingLootInfo");
static_assert(offsetof(FMovingLootInfo, LastLocationInOctree) == 0x000000, "Member 'FMovingLootInfo::LastLocationInOctree' has a wrong offset!");

// ScriptStruct FortniteAI.BattleBusPOI
// 0x0090 (0x0090 - 0x0000)
struct FBattleBusPOI final
{
public:
	struct FScalableFloat                         IsEnabled;                                         // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      POIFilterQuery;                                    // 0x0028(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class AFortPoiVolume*>                 ValidPOIVolumeList;                                // 0x0070(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0x10];                                      // 0x0080(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBattleBusPOI) == 0x000008, "Wrong alignment on FBattleBusPOI");
static_assert(sizeof(FBattleBusPOI) == 0x000090, "Wrong size on FBattleBusPOI");
static_assert(offsetof(FBattleBusPOI, IsEnabled) == 0x000000, "Member 'FBattleBusPOI::IsEnabled' has a wrong offset!");
static_assert(offsetof(FBattleBusPOI, POIFilterQuery) == 0x000028, "Member 'FBattleBusPOI::POIFilterQuery' has a wrong offset!");
static_assert(offsetof(FBattleBusPOI, ValidPOIVolumeList) == 0x000070, "Member 'FBattleBusPOI::ValidPOIVolumeList' has a wrong offset!");

// ScriptStruct FortniteAI.FortAIDirectorPerLODConfig
// 0x0030 (0x0030 - 0x0000)
struct FFortAIDirectorPerLODConfig final
{
public:
	struct FScalableFloat                         MaxNPCCosts;                                       // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EFortAILODLevel                               FortAILODLevel;                                    // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAIDirectorPerLODConfig) == 0x000008, "Wrong alignment on FFortAIDirectorPerLODConfig");
static_assert(sizeof(FFortAIDirectorPerLODConfig) == 0x000030, "Wrong size on FFortAIDirectorPerLODConfig");
static_assert(offsetof(FFortAIDirectorPerLODConfig, MaxNPCCosts) == 0x000000, "Member 'FFortAIDirectorPerLODConfig::MaxNPCCosts' has a wrong offset!");
static_assert(offsetof(FFortAIDirectorPerLODConfig, FortAILODLevel) == 0x000028, "Member 'FFortAIDirectorPerLODConfig::FortAILODLevel' has a wrong offset!");

// ScriptStruct FortniteAI.NavigationPOI
// 0x0080 (0x0080 - 0x0000)
struct FNavigationPOI final
{
public:
	struct FScalableFloat                         IsEnabled;                                         // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      POIFilterQuery;                                    // 0x0028(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class AFortPoiVolume*>                 ValidPOIVolumeList;                                // 0x0070(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNavigationPOI) == 0x000008, "Wrong alignment on FNavigationPOI");
static_assert(sizeof(FNavigationPOI) == 0x000080, "Wrong size on FNavigationPOI");
static_assert(offsetof(FNavigationPOI, IsEnabled) == 0x000000, "Member 'FNavigationPOI::IsEnabled' has a wrong offset!");
static_assert(offsetof(FNavigationPOI, POIFilterQuery) == 0x000028, "Member 'FNavigationPOI::POIFilterQuery' has a wrong offset!");
static_assert(offsetof(FNavigationPOI, ValidPOIVolumeList) == 0x000070, "Member 'FNavigationPOI::ValidPOIVolumeList' has a wrong offset!");

// ScriptStruct FortniteAI.MMRSpawningBracketBaseDataTableRow
// 0x0008 (0x0010 - 0x0008)
struct FMMRSpawningBracketBaseDataTableRow : public FTableRowBase
{
public:
	int32                                         MMRBracketLow;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MMRBracketHigh;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMMRSpawningBracketBaseDataTableRow) == 0x000008, "Wrong alignment on FMMRSpawningBracketBaseDataTableRow");
static_assert(sizeof(FMMRSpawningBracketBaseDataTableRow) == 0x000010, "Wrong size on FMMRSpawningBracketBaseDataTableRow");
static_assert(offsetof(FMMRSpawningBracketBaseDataTableRow, MMRBracketLow) == 0x000008, "Member 'FMMRSpawningBracketBaseDataTableRow::MMRBracketLow' has a wrong offset!");
static_assert(offsetof(FMMRSpawningBracketBaseDataTableRow, MMRBracketHigh) == 0x00000C, "Member 'FMMRSpawningBracketBaseDataTableRow::MMRBracketHigh' has a wrong offset!");

// ScriptStruct FortniteAI.CachedPOIVolumeLocations
// 0x0020 (0x0020 - 0x0000)
struct FCachedPOIVolumeLocations final
{
public:
	class AFortPoiVolume*                         POIVolume;                                         // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x18];                                       // 0x0008(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCachedPOIVolumeLocations) == 0x000008, "Wrong alignment on FCachedPOIVolumeLocations");
static_assert(sizeof(FCachedPOIVolumeLocations) == 0x000020, "Wrong size on FCachedPOIVolumeLocations");
static_assert(offsetof(FCachedPOIVolumeLocations, POIVolume) == 0x000000, "Member 'FCachedPOIVolumeLocations::POIVolume' has a wrong offset!");

// ScriptStruct FortniteAI.FortServerBotInfo
// 0x0018 (0x0018 - 0x0000)
struct FFortServerBotInfo final
{
public:
	class AFortAthenaAIBotController*             BotController;                                     // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AFortPoiVolume*                         SelectedPoiVolume;                                 // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortServerBotInfo) == 0x000008, "Wrong alignment on FFortServerBotInfo");
static_assert(sizeof(FFortServerBotInfo) == 0x000018, "Wrong size on FFortServerBotInfo");
static_assert(offsetof(FFortServerBotInfo, BotController) == 0x000000, "Member 'FFortServerBotInfo::BotController' has a wrong offset!");
static_assert(offsetof(FFortServerBotInfo, SelectedPoiVolume) == 0x000008, "Member 'FFortServerBotInfo::SelectedPoiVolume' has a wrong offset!");

// ScriptStruct FortniteAI.FortBotHealingItems
// 0x0048 (0x0048 - 0x0000)
struct FFortBotHealingItems final
{
public:
	struct FScalableFloat                         UseItemResourceThreshold;                          // 0x0000(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  ItemTags;                                          // 0x0028(0x0020)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortBotHealingItems) == 0x000008, "Wrong alignment on FFortBotHealingItems");
static_assert(sizeof(FFortBotHealingItems) == 0x000048, "Wrong size on FFortBotHealingItems");
static_assert(offsetof(FFortBotHealingItems, UseItemResourceThreshold) == 0x000000, "Member 'FFortBotHealingItems::UseItemResourceThreshold' has a wrong offset!");
static_assert(offsetof(FFortBotHealingItems, ItemTags) == 0x000028, "Member 'FFortBotHealingItems::ItemTags' has a wrong offset!");

// ScriptStruct FortniteAI.FortBotHealingItemsList
// 0x0010 (0x0010 - 0x0000)
struct FFortBotHealingItemsList final
{
public:
	TArray<struct FFortBotHealingItems>           HealthItems;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortBotHealingItemsList) == 0x000008, "Wrong alignment on FFortBotHealingItemsList");
static_assert(sizeof(FFortBotHealingItemsList) == 0x000010, "Wrong size on FFortBotHealingItemsList");
static_assert(offsetof(FFortBotHealingItemsList, HealthItems) == 0x000000, "Member 'FFortBotHealingItemsList::HealthItems' has a wrong offset!");

// ScriptStruct FortniteAI.FortBotBackfillSpawnRequest
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FFortBotBackfillSpawnRequest final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortBotBackfillSpawnRequest) == 0x000008, "Wrong alignment on FFortBotBackfillSpawnRequest");
static_assert(sizeof(FFortBotBackfillSpawnRequest) == 0x000018, "Wrong size on FFortBotBackfillSpawnRequest");

// ScriptStruct FortniteAI.MMRSpawningInfo
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FMMRSpawningInfo final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMMRSpawningInfo) == 0x000008, "Wrong alignment on FMMRSpawningInfo");
static_assert(sizeof(FMMRSpawningInfo) == 0x000028, "Wrong size on FMMRSpawningInfo");

// ScriptStruct FortniteAI.DigestedEvasiveManeuverSkillSettings
// 0x0058 (0x0058 - 0x0000)
struct FDigestedEvasiveManeuverSkillSettings final
{
public:
	float                                         JumpDelay;                                         // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         JumpRandomDeviationDelay;                          // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CrouchDelay;                                       // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CrouchRandomDeviationDelay;                        // 0x000C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DodgeDelay;                                        // 0x0010(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DodgeRandomDeviationDelay;                         // 0x0014(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CrouchOverlayWeight;                               // 0x0018(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         JumpOverlayWeight;                                 // 0x001C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         NoOverlayWeight;                                   // 0x0020(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DodgeWeight;                                       // 0x0024(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DodgeJumpWeight;                                   // 0x0028(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DodgeDistanceMax;                                  // 0x002C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DodgeDistanceMin;                                  // 0x0030(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CrouchTimeMax;                                     // 0x0034(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CrouchTimeMin;                                     // 0x0038(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DebugName;                                         // 0x0040(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDigestedEvasiveManeuverSkillSettings) == 0x000008, "Wrong alignment on FDigestedEvasiveManeuverSkillSettings");
static_assert(sizeof(FDigestedEvasiveManeuverSkillSettings) == 0x000058, "Wrong size on FDigestedEvasiveManeuverSkillSettings");
static_assert(offsetof(FDigestedEvasiveManeuverSkillSettings, JumpDelay) == 0x000000, "Member 'FDigestedEvasiveManeuverSkillSettings::JumpDelay' has a wrong offset!");
static_assert(offsetof(FDigestedEvasiveManeuverSkillSettings, JumpRandomDeviationDelay) == 0x000004, "Member 'FDigestedEvasiveManeuverSkillSettings::JumpRandomDeviationDelay' has a wrong offset!");
static_assert(offsetof(FDigestedEvasiveManeuverSkillSettings, CrouchDelay) == 0x000008, "Member 'FDigestedEvasiveManeuverSkillSettings::CrouchDelay' has a wrong offset!");
static_assert(offsetof(FDigestedEvasiveManeuverSkillSettings, CrouchRandomDeviationDelay) == 0x00000C, "Member 'FDigestedEvasiveManeuverSkillSettings::CrouchRandomDeviationDelay' has a wrong offset!");
static_assert(offsetof(FDigestedEvasiveManeuverSkillSettings, DodgeDelay) == 0x000010, "Member 'FDigestedEvasiveManeuverSkillSettings::DodgeDelay' has a wrong offset!");
static_assert(offsetof(FDigestedEvasiveManeuverSkillSettings, DodgeRandomDeviationDelay) == 0x000014, "Member 'FDigestedEvasiveManeuverSkillSettings::DodgeRandomDeviationDelay' has a wrong offset!");
static_assert(offsetof(FDigestedEvasiveManeuverSkillSettings, CrouchOverlayWeight) == 0x000018, "Member 'FDigestedEvasiveManeuverSkillSettings::CrouchOverlayWeight' has a wrong offset!");
static_assert(offsetof(FDigestedEvasiveManeuverSkillSettings, JumpOverlayWeight) == 0x00001C, "Member 'FDigestedEvasiveManeuverSkillSettings::JumpOverlayWeight' has a wrong offset!");
static_assert(offsetof(FDigestedEvasiveManeuverSkillSettings, NoOverlayWeight) == 0x000020, "Member 'FDigestedEvasiveManeuverSkillSettings::NoOverlayWeight' has a wrong offset!");
static_assert(offsetof(FDigestedEvasiveManeuverSkillSettings, DodgeWeight) == 0x000024, "Member 'FDigestedEvasiveManeuverSkillSettings::DodgeWeight' has a wrong offset!");
static_assert(offsetof(FDigestedEvasiveManeuverSkillSettings, DodgeJumpWeight) == 0x000028, "Member 'FDigestedEvasiveManeuverSkillSettings::DodgeJumpWeight' has a wrong offset!");
static_assert(offsetof(FDigestedEvasiveManeuverSkillSettings, DodgeDistanceMax) == 0x00002C, "Member 'FDigestedEvasiveManeuverSkillSettings::DodgeDistanceMax' has a wrong offset!");
static_assert(offsetof(FDigestedEvasiveManeuverSkillSettings, DodgeDistanceMin) == 0x000030, "Member 'FDigestedEvasiveManeuverSkillSettings::DodgeDistanceMin' has a wrong offset!");
static_assert(offsetof(FDigestedEvasiveManeuverSkillSettings, CrouchTimeMax) == 0x000034, "Member 'FDigestedEvasiveManeuverSkillSettings::CrouchTimeMax' has a wrong offset!");
static_assert(offsetof(FDigestedEvasiveManeuverSkillSettings, CrouchTimeMin) == 0x000038, "Member 'FDigestedEvasiveManeuverSkillSettings::CrouchTimeMin' has a wrong offset!");
static_assert(offsetof(FDigestedEvasiveManeuverSkillSettings, DebugName) == 0x000040, "Member 'FDigestedEvasiveManeuverSkillSettings::DebugName' has a wrong offset!");

// ScriptStruct FortniteAI.MMRSpawningBaseRuntimeInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FMMRSpawningBaseRuntimeInfo
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMMRSpawningBaseRuntimeInfo) == 0x000008, "Wrong alignment on FMMRSpawningBaseRuntimeInfo");
static_assert(sizeof(FMMRSpawningBaseRuntimeInfo) == 0x000010, "Wrong size on FMMRSpawningBaseRuntimeInfo");

// ScriptStruct FortniteAI.MMRSpawningPlayerBotsRuntimeInfo
// 0x0028 (0x0038 - 0x0010)
struct FMMRSpawningPlayerBotsRuntimeInfo final : public FMMRSpawningBaseRuntimeInfo
{
public:
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMMRSpawningInfo>               SpawningInfos;                                     // 0x0020(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMMRSpawningPlayerBotsRuntimeInfo) == 0x000008, "Wrong alignment on FMMRSpawningPlayerBotsRuntimeInfo");
static_assert(sizeof(FMMRSpawningPlayerBotsRuntimeInfo) == 0x000038, "Wrong size on FMMRSpawningPlayerBotsRuntimeInfo");
static_assert(offsetof(FMMRSpawningPlayerBotsRuntimeInfo, SpawningInfos) == 0x000020, "Member 'FMMRSpawningPlayerBotsRuntimeInfo::SpawningInfos' has a wrong offset!");

// ScriptStruct FortniteAI.FortBotInventoryInfo
// 0x0018 (0x0018 - 0x0000)
struct FFortBotInventoryInfo final
{
public:
	class UFortItemDefinition*                    ItemDefinition;                                    // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortWorldItem*                         FortItem;                                          // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortBotInventoryInfo) == 0x000008, "Wrong alignment on FFortBotInventoryInfo");
static_assert(sizeof(FFortBotInventoryInfo) == 0x000018, "Wrong size on FFortBotInventoryInfo");
static_assert(offsetof(FFortBotInventoryInfo, ItemDefinition) == 0x000000, "Member 'FFortBotInventoryInfo::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FFortBotInventoryInfo, FortItem) == 0x000008, "Member 'FFortBotInventoryInfo::FortItem' has a wrong offset!");

// ScriptStruct FortniteAI.UpdateBotSkillInfo
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FUpdateBotSkillInfo final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUpdateBotSkillInfo) == 0x000004, "Wrong alignment on FUpdateBotSkillInfo");
static_assert(sizeof(FUpdateBotSkillInfo) == 0x00000C, "Wrong size on FUpdateBotSkillInfo");

// ScriptStruct FortniteAI.FortBotDisablePOIRequest
// 0x0010 (0x0010 - 0x0000)
struct FFortBotDisablePOIRequest final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UAthenaAIServicePlayerBots*             CachedAIServicePlayerBots;                         // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortBotDisablePOIRequest) == 0x000008, "Wrong alignment on FFortBotDisablePOIRequest");
static_assert(sizeof(FFortBotDisablePOIRequest) == 0x000010, "Wrong size on FFortBotDisablePOIRequest");
static_assert(offsetof(FFortBotDisablePOIRequest, CachedAIServicePlayerBots) == 0x000008, "Member 'FFortBotDisablePOIRequest::CachedAIServicePlayerBots' has a wrong offset!");

// ScriptStruct FortniteAI.BoxNavInvoker
// 0x0020 (0x0020 - 0x0000)
struct FBoxNavInvoker final
{
public:
	class AAthenaNavInvokerBox*                   Invoker;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x18];                                       // 0x0008(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBoxNavInvoker) == 0x000008, "Wrong alignment on FBoxNavInvoker");
static_assert(sizeof(FBoxNavInvoker) == 0x000020, "Wrong size on FBoxNavInvoker");
static_assert(offsetof(FBoxNavInvoker, Invoker) == 0x000000, "Member 'FBoxNavInvoker::Invoker' has a wrong offset!");

// ScriptStruct FortniteAI.NavDataSetVariantSettings
// 0x0030 (0x0030 - 0x0000)
struct FNavDataSetVariantSettings final
{
public:
	TSoftObjectPtr<class UWorld>                  Level;                                             // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        OceanFloodLevel;                                   // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNavDataSetVariantSettings) == 0x000008, "Wrong alignment on FNavDataSetVariantSettings");
static_assert(sizeof(FNavDataSetVariantSettings) == 0x000030, "Wrong size on FNavDataSetVariantSettings");
static_assert(offsetof(FNavDataSetVariantSettings, Level) == 0x000000, "Member 'FNavDataSetVariantSettings::Level' has a wrong offset!");
static_assert(offsetof(FNavDataSetVariantSettings, OceanFloodLevel) == 0x000028, "Member 'FNavDataSetVariantSettings::OceanFloodLevel' has a wrong offset!");

// ScriptStruct FortniteAI.DigestedBotKnockbackSettings
// 0x0050 (0x0050 - 0x0000)
struct FDigestedBotKnockbackSettings final
{
public:
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0000(0x0048)(Transient, NativeAccessSpecifierPrivate)
	bool                                          bShouldAllowCharacterToBeLaunched;                 // 0x0048(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bShouldStopActiveMovement;                         // 0x0049(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IgnoreMoveInputDuration;                           // 0x004C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FDigestedBotKnockbackSettings) == 0x000008, "Wrong alignment on FDigestedBotKnockbackSettings");
static_assert(sizeof(FDigestedBotKnockbackSettings) == 0x000050, "Wrong size on FDigestedBotKnockbackSettings");
static_assert(offsetof(FDigestedBotKnockbackSettings, TagQuery) == 0x000000, "Member 'FDigestedBotKnockbackSettings::TagQuery' has a wrong offset!");
static_assert(offsetof(FDigestedBotKnockbackSettings, bShouldAllowCharacterToBeLaunched) == 0x000048, "Member 'FDigestedBotKnockbackSettings::bShouldAllowCharacterToBeLaunched' has a wrong offset!");
static_assert(offsetof(FDigestedBotKnockbackSettings, bShouldStopActiveMovement) == 0x000049, "Member 'FDigestedBotKnockbackSettings::bShouldStopActiveMovement' has a wrong offset!");
static_assert(offsetof(FDigestedBotKnockbackSettings, IgnoreMoveInputDuration) == 0x00004C, "Member 'FDigestedBotKnockbackSettings::IgnoreMoveInputDuration' has a wrong offset!");

// ScriptStruct FortniteAI.OverriddenSupportedAgentsByReleaseVersion
// 0x000C (0x000C - 0x0000)
struct FOverriddenSupportedAgentsByReleaseVersion final
{
public:
	struct FFortReleaseVersion                    StartVersion;                                      // 0x0000(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortReleaseVersion                    EndVersion;                                        // 0x0004(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FNavAgentSelector                      OverriddenSupportedAgentsMask;                     // 0x0008(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOverriddenSupportedAgentsByReleaseVersion) == 0x000004, "Wrong alignment on FOverriddenSupportedAgentsByReleaseVersion");
static_assert(sizeof(FOverriddenSupportedAgentsByReleaseVersion) == 0x00000C, "Wrong size on FOverriddenSupportedAgentsByReleaseVersion");
static_assert(offsetof(FOverriddenSupportedAgentsByReleaseVersion, StartVersion) == 0x000000, "Member 'FOverriddenSupportedAgentsByReleaseVersion::StartVersion' has a wrong offset!");
static_assert(offsetof(FOverriddenSupportedAgentsByReleaseVersion, EndVersion) == 0x000004, "Member 'FOverriddenSupportedAgentsByReleaseVersion::EndVersion' has a wrong offset!");
static_assert(offsetof(FOverriddenSupportedAgentsByReleaseVersion, OverriddenSupportedAgentsMask) == 0x000008, "Member 'FOverriddenSupportedAgentsByReleaseVersion::OverriddenSupportedAgentsMask' has a wrong offset!");

// ScriptStruct FortniteAI.TrapPerceptionSettings
// 0x0014 (0x0014 - 0x0000)
struct alignas(0x04) FTrapPerceptionSettings final
{
public:
	uint8                                         Pad_0[0x14];                                       // 0x0000(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTrapPerceptionSettings) == 0x000004, "Wrong alignment on FTrapPerceptionSettings");
static_assert(sizeof(FTrapPerceptionSettings) == 0x000014, "Wrong size on FTrapPerceptionSettings");

// ScriptStruct FortniteAI.FortBotHealingItemsSpec
// 0x0058 (0x0058 - 0x0000)
struct FFortBotHealingItemsSpec final
{
public:
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0000(0x0048)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FFortBotHealingItemsList               HealthItemsList;                                   // 0x0048(0x0010)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortBotHealingItemsSpec) == 0x000008, "Wrong alignment on FFortBotHealingItemsSpec");
static_assert(sizeof(FFortBotHealingItemsSpec) == 0x000058, "Wrong size on FFortBotHealingItemsSpec");
static_assert(offsetof(FFortBotHealingItemsSpec, TagQuery) == 0x000000, "Member 'FFortBotHealingItemsSpec::TagQuery' has a wrong offset!");
static_assert(offsetof(FFortBotHealingItemsSpec, HealthItemsList) == 0x000048, "Member 'FFortBotHealingItemsSpec::HealthItemsList' has a wrong offset!");

// ScriptStruct FortniteAI.TrapDetectionState
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FTrapDetectionState final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTrapDetectionState) == 0x000004, "Wrong alignment on FTrapDetectionState");
static_assert(sizeof(FTrapDetectionState) == 0x000008, "Wrong size on FTrapDetectionState");

// ScriptStruct FortniteAI.BuildingActorHotSpotDirection
// 0x0028 (0x0028 - 0x0000)
struct FBuildingActorHotSpotDirection final
{
public:
	class UAIHotSpotConfig*                       HotSpotConfig;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0008(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bMirrorX : 1;                                      // 0x0020(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMirrorY : 1;                                      // 0x0020(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EFortHotSpotDirection                         Direction;                                         // 0x0024(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHotspotTypeConfigMode                        TypeConfigUsage;                                   // 0x0025(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingActorHotSpotDirection) == 0x000008, "Wrong alignment on FBuildingActorHotSpotDirection");
static_assert(sizeof(FBuildingActorHotSpotDirection) == 0x000028, "Wrong size on FBuildingActorHotSpotDirection");
static_assert(offsetof(FBuildingActorHotSpotDirection, HotSpotConfig) == 0x000000, "Member 'FBuildingActorHotSpotDirection::HotSpotConfig' has a wrong offset!");
static_assert(offsetof(FBuildingActorHotSpotDirection, Offset) == 0x000008, "Member 'FBuildingActorHotSpotDirection::Offset' has a wrong offset!");
static_assert(offsetof(FBuildingActorHotSpotDirection, Direction) == 0x000024, "Member 'FBuildingActorHotSpotDirection::Direction' has a wrong offset!");
static_assert(offsetof(FBuildingActorHotSpotDirection, TypeConfigUsage) == 0x000025, "Member 'FBuildingActorHotSpotDirection::TypeConfigUsage' has a wrong offset!");

// ScriptStruct FortniteAI.DigestedEvasiveManeuverSkillSettingsSpecialization
// 0x00C0 (0x00C0 - 0x0000)
struct FDigestedEvasiveManeuverSkillSettingsSpecialization final
{
public:
	float                                         OddsToBeUsed;                                      // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxDuration;                                       // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxDurationRandomDeviation;                        // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Cooldown;                                          // 0x000C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CooldownRandomDeviation;                           // 0x0010(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DistanceMinSquared;                                // 0x0014(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DistanceMaxSquared;                                // 0x0018(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      WeaponTagQuery;                                    // 0x0020(0x0048)(Transient, NativeAccessSpecifierPrivate)
	struct FDigestedEvasiveManeuverSkillSettings  EvasiveManeuverSkillSettings;                      // 0x0068(0x0058)(Transient, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FDigestedEvasiveManeuverSkillSettingsSpecialization) == 0x000008, "Wrong alignment on FDigestedEvasiveManeuverSkillSettingsSpecialization");
static_assert(sizeof(FDigestedEvasiveManeuverSkillSettingsSpecialization) == 0x0000C0, "Wrong size on FDigestedEvasiveManeuverSkillSettingsSpecialization");
static_assert(offsetof(FDigestedEvasiveManeuverSkillSettingsSpecialization, OddsToBeUsed) == 0x000000, "Member 'FDigestedEvasiveManeuverSkillSettingsSpecialization::OddsToBeUsed' has a wrong offset!");
static_assert(offsetof(FDigestedEvasiveManeuverSkillSettingsSpecialization, MaxDuration) == 0x000004, "Member 'FDigestedEvasiveManeuverSkillSettingsSpecialization::MaxDuration' has a wrong offset!");
static_assert(offsetof(FDigestedEvasiveManeuverSkillSettingsSpecialization, MaxDurationRandomDeviation) == 0x000008, "Member 'FDigestedEvasiveManeuverSkillSettingsSpecialization::MaxDurationRandomDeviation' has a wrong offset!");
static_assert(offsetof(FDigestedEvasiveManeuverSkillSettingsSpecialization, Cooldown) == 0x00000C, "Member 'FDigestedEvasiveManeuverSkillSettingsSpecialization::Cooldown' has a wrong offset!");
static_assert(offsetof(FDigestedEvasiveManeuverSkillSettingsSpecialization, CooldownRandomDeviation) == 0x000010, "Member 'FDigestedEvasiveManeuverSkillSettingsSpecialization::CooldownRandomDeviation' has a wrong offset!");
static_assert(offsetof(FDigestedEvasiveManeuverSkillSettingsSpecialization, DistanceMinSquared) == 0x000014, "Member 'FDigestedEvasiveManeuverSkillSettingsSpecialization::DistanceMinSquared' has a wrong offset!");
static_assert(offsetof(FDigestedEvasiveManeuverSkillSettingsSpecialization, DistanceMaxSquared) == 0x000018, "Member 'FDigestedEvasiveManeuverSkillSettingsSpecialization::DistanceMaxSquared' has a wrong offset!");
static_assert(offsetof(FDigestedEvasiveManeuverSkillSettingsSpecialization, WeaponTagQuery) == 0x000020, "Member 'FDigestedEvasiveManeuverSkillSettingsSpecialization::WeaponTagQuery' has a wrong offset!");
static_assert(offsetof(FDigestedEvasiveManeuverSkillSettingsSpecialization, EvasiveManeuverSkillSettings) == 0x000068, "Member 'FDigestedEvasiveManeuverSkillSettingsSpecialization::EvasiveManeuverSkillSettings' has a wrong offset!");

// ScriptStruct FortniteAI.ClimbLinkData
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FClimbLinkData final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        UniqueLinkId;                                      // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClimbLinkData) == 0x000008, "Wrong alignment on FClimbLinkData");
static_assert(sizeof(FClimbLinkData) == 0x000040, "Wrong size on FClimbLinkData");
static_assert(offsetof(FClimbLinkData, UniqueLinkId) == 0x000038, "Member 'FClimbLinkData::UniqueLinkId' has a wrong offset!");

// ScriptStruct FortniteAI.FortAIEncounterSpawnGroupCap
// 0x0020 (0x0020 - 0x0000)
struct FFortAIEncounterSpawnGroupCap final
{
public:
	struct FCurveTableRowHandle                   MinSpawnGroupNumberCap;                            // 0x0000(0x0010)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   MaxSpawnGroupNumberCap;                            // 0x0010(0x0010)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIEncounterSpawnGroupCap) == 0x000008, "Wrong alignment on FFortAIEncounterSpawnGroupCap");
static_assert(sizeof(FFortAIEncounterSpawnGroupCap) == 0x000020, "Wrong size on FFortAIEncounterSpawnGroupCap");
static_assert(offsetof(FFortAIEncounterSpawnGroupCap, MinSpawnGroupNumberCap) == 0x000000, "Member 'FFortAIEncounterSpawnGroupCap::MinSpawnGroupNumberCap' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCap, MaxSpawnGroupNumberCap) == 0x000010, "Member 'FFortAIEncounterSpawnGroupCap::MaxSpawnGroupNumberCap' has a wrong offset!");

// ScriptStruct FortniteAI.PendingRequestManager
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FPendingRequestManager final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPendingRequestManager) == 0x000008, "Wrong alignment on FPendingRequestManager");
static_assert(sizeof(FPendingRequestManager) == 0x000030, "Wrong size on FPendingRequestManager");

// ScriptStruct FortniteAI.WeaponAmmoCheat
// 0x0058 (0x0058 - 0x0000)
struct FWeaponAmmoCheat final
{
public:
	struct FGameplayTag                           WeaponTag;                                         // 0x0000(0x0004)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         HasInfiniteAmmo;                                   // 0x0008(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         CheckLoadedAmmoForInfiniteAmmo;                    // 0x0030(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FWeaponAmmoCheat) == 0x000008, "Wrong alignment on FWeaponAmmoCheat");
static_assert(sizeof(FWeaponAmmoCheat) == 0x000058, "Wrong size on FWeaponAmmoCheat");
static_assert(offsetof(FWeaponAmmoCheat, WeaponTag) == 0x000000, "Member 'FWeaponAmmoCheat::WeaponTag' has a wrong offset!");
static_assert(offsetof(FWeaponAmmoCheat, HasInfiniteAmmo) == 0x000008, "Member 'FWeaponAmmoCheat::HasInfiniteAmmo' has a wrong offset!");
static_assert(offsetof(FWeaponAmmoCheat, CheckLoadedAmmoForInfiniteAmmo) == 0x000030, "Member 'FWeaponAmmoCheat::CheckLoadedAmmoForInfiniteAmmo' has a wrong offset!");

// ScriptStruct FortniteAI.GoalSelectionQueryInfo
// 0x0028 (0x0028 - 0x0000)
struct FGoalSelectionQueryInfo final
{
public:
	class UEnvQuery*                              GoalSelectionQuery;                                // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiredGameplayTags;                              // 0x0008(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGoalSelectionQueryInfo) == 0x000008, "Wrong alignment on FGoalSelectionQueryInfo");
static_assert(sizeof(FGoalSelectionQueryInfo) == 0x000028, "Wrong size on FGoalSelectionQueryInfo");
static_assert(offsetof(FGoalSelectionQueryInfo, GoalSelectionQuery) == 0x000000, "Member 'FGoalSelectionQueryInfo::GoalSelectionQuery' has a wrong offset!");
static_assert(offsetof(FGoalSelectionQueryInfo, RequiredGameplayTags) == 0x000008, "Member 'FGoalSelectionQueryInfo::RequiredGameplayTags' has a wrong offset!");

// ScriptStruct FortniteAI.UtilityContribution
// 0x0008 (0x0008 - 0x0000)
struct FUtilityContribution final
{
public:
	float                                         MaxContribution;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCombatFactors                            ContributingFactor;                                // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAIDirectorFactor                         ContributingAIDirectorFactor;                      // 0x0005(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFactorContributionType                   ContributionType;                                  // 0x0006(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUtilityContribution) == 0x000004, "Wrong alignment on FUtilityContribution");
static_assert(sizeof(FUtilityContribution) == 0x000008, "Wrong size on FUtilityContribution");
static_assert(offsetof(FUtilityContribution, MaxContribution) == 0x000000, "Member 'FUtilityContribution::MaxContribution' has a wrong offset!");
static_assert(offsetof(FUtilityContribution, ContributingFactor) == 0x000004, "Member 'FUtilityContribution::ContributingFactor' has a wrong offset!");
static_assert(offsetof(FUtilityContribution, ContributingAIDirectorFactor) == 0x000005, "Member 'FUtilityContribution::ContributingAIDirectorFactor' has a wrong offset!");
static_assert(offsetof(FUtilityContribution, ContributionType) == 0x000006, "Member 'FUtilityContribution::ContributionType' has a wrong offset!");

// ScriptStruct FortniteAI.WeightedAIPerk
// 0x0030 (0x0030 - 0x0000)
struct FWeightedAIPerk final
{
public:
	TSubclassOf<class UFortAIPerkBase>            PerkClass;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         RandomWeight;                                      // 0x0008(0x0028)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeightedAIPerk) == 0x000008, "Wrong alignment on FWeightedAIPerk");
static_assert(sizeof(FWeightedAIPerk) == 0x000030, "Wrong size on FWeightedAIPerk");
static_assert(offsetof(FWeightedAIPerk, PerkClass) == 0x000000, "Member 'FWeightedAIPerk::PerkClass' has a wrong offset!");
static_assert(offsetof(FWeightedAIPerk, RandomWeight) == 0x000008, "Member 'FWeightedAIPerk::RandomWeight' has a wrong offset!");

// ScriptStruct FortniteAI.DigestedPerceptionStateSettings
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FDigestedPerceptionStateSettings final
{
public:
	float                                         ForgetTime;                                        // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ForgetTimeDeviation;                               // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ForgetDistance;                                    // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ForgetDistanceDeviation;                           // 0x000C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10[0x28];                                      // 0x0010(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDigestedPerceptionStateSettings) == 0x000008, "Wrong alignment on FDigestedPerceptionStateSettings");
static_assert(sizeof(FDigestedPerceptionStateSettings) == 0x000038, "Wrong size on FDigestedPerceptionStateSettings");
static_assert(offsetof(FDigestedPerceptionStateSettings, ForgetTime) == 0x000000, "Member 'FDigestedPerceptionStateSettings::ForgetTime' has a wrong offset!");
static_assert(offsetof(FDigestedPerceptionStateSettings, ForgetTimeDeviation) == 0x000004, "Member 'FDigestedPerceptionStateSettings::ForgetTimeDeviation' has a wrong offset!");
static_assert(offsetof(FDigestedPerceptionStateSettings, ForgetDistance) == 0x000008, "Member 'FDigestedPerceptionStateSettings::ForgetDistance' has a wrong offset!");
static_assert(offsetof(FDigestedPerceptionStateSettings, ForgetDistanceDeviation) == 0x00000C, "Member 'FDigestedPerceptionStateSettings::ForgetDistanceDeviation' has a wrong offset!");

// ScriptStruct FortniteAI.FortAthenaAIBotDigestedTargetHeuristicSettings
// 0x0188 (0x0188 - 0x0000)
struct FFortAthenaAIBotDigestedTargetHeuristicSettings final
{
public:
	struct FDigestedPerceptionStateSettings       PerceptionStateSettings[0x6];                      // 0x0000(0x0038)(Transient, Protected, NativeAccessSpecifierProtected)
	float                                         ThreatDamageWeight;                                // 0x0150(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ThreatDamageWeightMultiplier;                      // 0x0154(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FScalableFloat                         ThreatTimeSinceLastDamageMultiplier;               // 0x0158(0x0028)(Transient, Protected, NativeAccessSpecifierProtected)
	float                                         ThreatLoFWeight;                                   // 0x0180(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DBNOWeightModifier;                                // 0x0184(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortAthenaAIBotDigestedTargetHeuristicSettings) == 0x000008, "Wrong alignment on FFortAthenaAIBotDigestedTargetHeuristicSettings");
static_assert(sizeof(FFortAthenaAIBotDigestedTargetHeuristicSettings) == 0x000188, "Wrong size on FFortAthenaAIBotDigestedTargetHeuristicSettings");
static_assert(offsetof(FFortAthenaAIBotDigestedTargetHeuristicSettings, PerceptionStateSettings) == 0x000000, "Member 'FFortAthenaAIBotDigestedTargetHeuristicSettings::PerceptionStateSettings' has a wrong offset!");
static_assert(offsetof(FFortAthenaAIBotDigestedTargetHeuristicSettings, ThreatDamageWeight) == 0x000150, "Member 'FFortAthenaAIBotDigestedTargetHeuristicSettings::ThreatDamageWeight' has a wrong offset!");
static_assert(offsetof(FFortAthenaAIBotDigestedTargetHeuristicSettings, ThreatDamageWeightMultiplier) == 0x000154, "Member 'FFortAthenaAIBotDigestedTargetHeuristicSettings::ThreatDamageWeightMultiplier' has a wrong offset!");
static_assert(offsetof(FFortAthenaAIBotDigestedTargetHeuristicSettings, ThreatTimeSinceLastDamageMultiplier) == 0x000158, "Member 'FFortAthenaAIBotDigestedTargetHeuristicSettings::ThreatTimeSinceLastDamageMultiplier' has a wrong offset!");
static_assert(offsetof(FFortAthenaAIBotDigestedTargetHeuristicSettings, ThreatLoFWeight) == 0x000180, "Member 'FFortAthenaAIBotDigestedTargetHeuristicSettings::ThreatLoFWeight' has a wrong offset!");
static_assert(offsetof(FFortAthenaAIBotDigestedTargetHeuristicSettings, DBNOWeightModifier) == 0x000184, "Member 'FFortAthenaAIBotDigestedTargetHeuristicSettings::DBNOWeightModifier' has a wrong offset!");

// ScriptStruct FortniteAI.PerkAvailabilityContainer
// 0x0018 (0x0018 - 0x0000)
struct FPerkAvailabilityContainer final
{
public:
	TArray<struct FWeightedAIPerk>                AvailablePerks;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         DesiredPerkCount;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPerkAvailabilityContainer) == 0x000008, "Wrong alignment on FPerkAvailabilityContainer");
static_assert(sizeof(FPerkAvailabilityContainer) == 0x000018, "Wrong size on FPerkAvailabilityContainer");
static_assert(offsetof(FPerkAvailabilityContainer, AvailablePerks) == 0x000000, "Member 'FPerkAvailabilityContainer::AvailablePerks' has a wrong offset!");
static_assert(offsetof(FPerkAvailabilityContainer, DesiredPerkCount) == 0x000010, "Member 'FPerkAvailabilityContainer::DesiredPerkCount' has a wrong offset!");

// ScriptStruct FortniteAI.AICustomTargetConfiguration
// 0x0020 (0x0020 - 0x0000)
struct FAICustomTargetConfiguration final
{
public:
	struct FVector                                Offset;                                            // 0x0000(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ValidRequestTypes;                                 // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAICustomTargetConfiguration) == 0x000008, "Wrong alignment on FAICustomTargetConfiguration");
static_assert(sizeof(FAICustomTargetConfiguration) == 0x000020, "Wrong size on FAICustomTargetConfiguration");
static_assert(offsetof(FAICustomTargetConfiguration, Offset) == 0x000000, "Member 'FAICustomTargetConfiguration::Offset' has a wrong offset!");
static_assert(offsetof(FAICustomTargetConfiguration, ValidRequestTypes) == 0x000018, "Member 'FAICustomTargetConfiguration::ValidRequestTypes' has a wrong offset!");

// ScriptStruct FortniteAI.FortAthenaAIBotNameRegionData
// 0x0038 (0x0038 - 0x0000)
struct FFortAthenaAIBotNameRegionData final
{
public:
	class FString                                 RegionId;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              NameDataTable;                                     // 0x0010(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortAthenaAIBotNameRegionData) == 0x000008, "Wrong alignment on FFortAthenaAIBotNameRegionData");
static_assert(sizeof(FFortAthenaAIBotNameRegionData) == 0x000038, "Wrong size on FFortAthenaAIBotNameRegionData");
static_assert(offsetof(FFortAthenaAIBotNameRegionData, RegionId) == 0x000000, "Member 'FFortAthenaAIBotNameRegionData::RegionId' has a wrong offset!");
static_assert(offsetof(FFortAthenaAIBotNameRegionData, NameDataTable) == 0x000010, "Member 'FFortAthenaAIBotNameRegionData::NameDataTable' has a wrong offset!");

// ScriptStruct FortniteAI.PendingSpawnInfo
// 0x0148 (0x0148 - 0x0000)
struct FPendingSpawnInfo final
{
public:
	TSubclassOf<class AFortAIPawn>                PawnClassToSpawn;                                  // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SpawnPoint;                                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnRotation;                                     // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 SpawnSource;                                       // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawnedFromExternalSpawner;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortressAIType                               AIType;                                            // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  TargetPlayer;                                      // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAIEncounterInfo*                   EncounterInfo;                                     // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DifficultyLevel;                                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAISpawnGroup*                      SpawnGroup;                                        // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  SpawnGroupGuid;                                    // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnemyIndexInSpawnGroup;                            // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToSpawn;                                       // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  PendingSpawnInfoGuid;                              // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCollision;                                  // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKillBuildingActorsAtSpawnLocation;                // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A[0x2];                                       // 0x009A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EncounterAILifespan;                               // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoreMultiplier;                                   // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugSpawnedAI;                                   // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortAbilitySet*>                AbilitySetsToGrantOnSpawn;                         // 0x00A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UFortGameplayModifierItemDefinition*> ModifiersToApplyOnSpawn;                           // 0x00B8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TStructCycleFixup<struct FFortAISpawnGroupUpgradeUIData, 0x0070, 0x08> UpgradeUIData;                                     // 0x00C8(0x0070)(NativeAccessSpecifierPublic)
	TStructCycleFixup<struct FFortAIPawnLootDropData, 0x0010, 0x04> LootDropData;                                      // 0x0138(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPendingSpawnInfo) == 0x000008, "Wrong alignment on FPendingSpawnInfo");
static_assert(sizeof(FPendingSpawnInfo) == 0x000148, "Wrong size on FPendingSpawnInfo");
static_assert(offsetof(FPendingSpawnInfo, PawnClassToSpawn) == 0x000000, "Member 'FPendingSpawnInfo::PawnClassToSpawn' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, SpawnPoint) == 0x000008, "Member 'FPendingSpawnInfo::SpawnPoint' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, SpawnLocation) == 0x000010, "Member 'FPendingSpawnInfo::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, SpawnRotation) == 0x000028, "Member 'FPendingSpawnInfo::SpawnRotation' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, SpawnSource) == 0x000040, "Member 'FPendingSpawnInfo::SpawnSource' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, bSpawnedFromExternalSpawner) == 0x000048, "Member 'FPendingSpawnInfo::bSpawnedFromExternalSpawner' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, AIType) == 0x000049, "Member 'FPendingSpawnInfo::AIType' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, TargetPlayer) == 0x000050, "Member 'FPendingSpawnInfo::TargetPlayer' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, EncounterInfo) == 0x000058, "Member 'FPendingSpawnInfo::EncounterInfo' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, DifficultyLevel) == 0x000060, "Member 'FPendingSpawnInfo::DifficultyLevel' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, SpawnGroup) == 0x000068, "Member 'FPendingSpawnInfo::SpawnGroup' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, SpawnGroupGuid) == 0x000070, "Member 'FPendingSpawnInfo::SpawnGroupGuid' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, EnemyIndexInSpawnGroup) == 0x000080, "Member 'FPendingSpawnInfo::EnemyIndexInSpawnGroup' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, TimeToSpawn) == 0x000084, "Member 'FPendingSpawnInfo::TimeToSpawn' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, PendingSpawnInfoGuid) == 0x000088, "Member 'FPendingSpawnInfo::PendingSpawnInfoGuid' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, bIgnoreCollision) == 0x000098, "Member 'FPendingSpawnInfo::bIgnoreCollision' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, bKillBuildingActorsAtSpawnLocation) == 0x000099, "Member 'FPendingSpawnInfo::bKillBuildingActorsAtSpawnLocation' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, EncounterAILifespan) == 0x00009C, "Member 'FPendingSpawnInfo::EncounterAILifespan' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, ScoreMultiplier) == 0x0000A0, "Member 'FPendingSpawnInfo::ScoreMultiplier' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, bDebugSpawnedAI) == 0x0000A4, "Member 'FPendingSpawnInfo::bDebugSpawnedAI' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, AbilitySetsToGrantOnSpawn) == 0x0000A8, "Member 'FPendingSpawnInfo::AbilitySetsToGrantOnSpawn' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, ModifiersToApplyOnSpawn) == 0x0000B8, "Member 'FPendingSpawnInfo::ModifiersToApplyOnSpawn' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, UpgradeUIData) == 0x0000C8, "Member 'FPendingSpawnInfo::UpgradeUIData' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, LootDropData) == 0x000138, "Member 'FPendingSpawnInfo::LootDropData' has a wrong offset!");

// ScriptStruct FortniteAI.FortPlayerPerformanceEstimateSettings
// 0x0040 (0x0040 - 0x0000)
struct FFortPlayerPerformanceEstimateSettings final
{
public:
	struct FCurveTableRowHandle                   PlayerPerformanceEstimateTransformMin;             // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   PlayerPerformanceEstimateTransformOrigin;          // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   PlayerPerformanceEstimateTransformMax;             // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EncounterPlayerPerformanceWeight;                  // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviousWavePlayerPerformanceWeight;               // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CampaignPlayerPerformanceWeight;                   // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPlayerPerformanceEstimateSettings) == 0x000008, "Wrong alignment on FFortPlayerPerformanceEstimateSettings");
static_assert(sizeof(FFortPlayerPerformanceEstimateSettings) == 0x000040, "Wrong size on FFortPlayerPerformanceEstimateSettings");
static_assert(offsetof(FFortPlayerPerformanceEstimateSettings, PlayerPerformanceEstimateTransformMin) == 0x000000, "Member 'FFortPlayerPerformanceEstimateSettings::PlayerPerformanceEstimateTransformMin' has a wrong offset!");
static_assert(offsetof(FFortPlayerPerformanceEstimateSettings, PlayerPerformanceEstimateTransformOrigin) == 0x000010, "Member 'FFortPlayerPerformanceEstimateSettings::PlayerPerformanceEstimateTransformOrigin' has a wrong offset!");
static_assert(offsetof(FFortPlayerPerformanceEstimateSettings, PlayerPerformanceEstimateTransformMax) == 0x000020, "Member 'FFortPlayerPerformanceEstimateSettings::PlayerPerformanceEstimateTransformMax' has a wrong offset!");
static_assert(offsetof(FFortPlayerPerformanceEstimateSettings, EncounterPlayerPerformanceWeight) == 0x000030, "Member 'FFortPlayerPerformanceEstimateSettings::EncounterPlayerPerformanceWeight' has a wrong offset!");
static_assert(offsetof(FFortPlayerPerformanceEstimateSettings, PreviousWavePlayerPerformanceWeight) == 0x000034, "Member 'FFortPlayerPerformanceEstimateSettings::PreviousWavePlayerPerformanceWeight' has a wrong offset!");
static_assert(offsetof(FFortPlayerPerformanceEstimateSettings, CampaignPlayerPerformanceWeight) == 0x000038, "Member 'FFortPlayerPerformanceEstimateSettings::CampaignPlayerPerformanceWeight' has a wrong offset!");

// ScriptStruct FortniteAI.IntensityContribution
// 0x0048 (0x0048 - 0x0000)
struct FIntensityContribution final
{
public:
	EFortCombatFactors                            CombatFactor;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAIDirectorFactor                         ContributingAIDirectorFactor;                      // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxContribution;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bModifyContributionByCompletionPercentage;         // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCurveTableRowHandle                   CompletionPercentageInitialMultiplier;             // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   CompletionPercentageToStartReducingMultiplier;     // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   CompletionPercentageToStopReducingMultiplier;      // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bModifyByNumberOfCriticalEncounterGoals;           // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FIntensityContribution) == 0x000008, "Wrong alignment on FIntensityContribution");
static_assert(sizeof(FIntensityContribution) == 0x000048, "Wrong size on FIntensityContribution");
static_assert(offsetof(FIntensityContribution, CombatFactor) == 0x000000, "Member 'FIntensityContribution::CombatFactor' has a wrong offset!");
static_assert(offsetof(FIntensityContribution, ContributingAIDirectorFactor) == 0x000001, "Member 'FIntensityContribution::ContributingAIDirectorFactor' has a wrong offset!");
static_assert(offsetof(FIntensityContribution, MaxContribution) == 0x000004, "Member 'FIntensityContribution::MaxContribution' has a wrong offset!");
static_assert(offsetof(FIntensityContribution, bModifyContributionByCompletionPercentage) == 0x000008, "Member 'FIntensityContribution::bModifyContributionByCompletionPercentage' has a wrong offset!");
static_assert(offsetof(FIntensityContribution, CompletionPercentageInitialMultiplier) == 0x000010, "Member 'FIntensityContribution::CompletionPercentageInitialMultiplier' has a wrong offset!");
static_assert(offsetof(FIntensityContribution, CompletionPercentageToStartReducingMultiplier) == 0x000020, "Member 'FIntensityContribution::CompletionPercentageToStartReducingMultiplier' has a wrong offset!");
static_assert(offsetof(FIntensityContribution, CompletionPercentageToStopReducingMultiplier) == 0x000030, "Member 'FIntensityContribution::CompletionPercentageToStopReducingMultiplier' has a wrong offset!");
static_assert(offsetof(FIntensityContribution, bModifyByNumberOfCriticalEncounterGoals) == 0x000040, "Member 'FIntensityContribution::bModifyByNumberOfCriticalEncounterGoals' has a wrong offset!");

// ScriptStruct FortniteAI.BotEquipWeaponInfo
// 0x0098 (0x0098 - 0x0000)
struct FBotEquipWeaponInfo final
{
public:
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0000(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         DistanceEffectivenessWithThreat;                   // 0x0048(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         DistanceEffectivenessNoThreat;                     // 0x0070(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FBotEquipWeaponInfo) == 0x000008, "Wrong alignment on FBotEquipWeaponInfo");
static_assert(sizeof(FBotEquipWeaponInfo) == 0x000098, "Wrong size on FBotEquipWeaponInfo");
static_assert(offsetof(FBotEquipWeaponInfo, TagQuery) == 0x000000, "Member 'FBotEquipWeaponInfo::TagQuery' has a wrong offset!");
static_assert(offsetof(FBotEquipWeaponInfo, DistanceEffectivenessWithThreat) == 0x000048, "Member 'FBotEquipWeaponInfo::DistanceEffectivenessWithThreat' has a wrong offset!");
static_assert(offsetof(FBotEquipWeaponInfo, DistanceEffectivenessNoThreat) == 0x000070, "Member 'FBotEquipWeaponInfo::DistanceEffectivenessNoThreat' has a wrong offset!");

// ScriptStruct FortniteAI.IntensityData
// 0x0030 (0x0030 - 0x0000)
struct FIntensityData final
{
public:
	TArray<struct FIntensityContribution>         ContributingFactors;                               // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ContributionsTotal;                                // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBuildingEditModeMetadata*>      ExceptionEditModes;                                // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ExceptionEditModeWeight;                           // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FIntensityData) == 0x000008, "Wrong alignment on FIntensityData");
static_assert(sizeof(FIntensityData) == 0x000030, "Wrong size on FIntensityData");
static_assert(offsetof(FIntensityData, ContributingFactors) == 0x000000, "Member 'FIntensityData::ContributingFactors' has a wrong offset!");
static_assert(offsetof(FIntensityData, ContributionsTotal) == 0x000010, "Member 'FIntensityData::ContributionsTotal' has a wrong offset!");
static_assert(offsetof(FIntensityData, ExceptionEditModes) == 0x000018, "Member 'FIntensityData::ExceptionEditModes' has a wrong offset!");
static_assert(offsetof(FIntensityData, ExceptionEditModeWeight) == 0x000028, "Member 'FIntensityData::ExceptionEditModeWeight' has a wrong offset!");

// ScriptStruct FortniteAI.UtilityTypeFloatPair
// 0x0008 (0x0008 - 0x0000)
struct FUtilityTypeFloatPair final
{
public:
	EFortAIUtility                                Utility;                                           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUtilityTypeFloatPair) == 0x000004, "Wrong alignment on FUtilityTypeFloatPair");
static_assert(sizeof(FUtilityTypeFloatPair) == 0x000008, "Wrong size on FUtilityTypeFloatPair");
static_assert(offsetof(FUtilityTypeFloatPair, Utility) == 0x000000, "Member 'FUtilityTypeFloatPair::Utility' has a wrong offset!");
static_assert(offsetof(FUtilityTypeFloatPair, Value) == 0x000004, "Member 'FUtilityTypeFloatPair::Value' has a wrong offset!");

// ScriptStruct FortniteAI.UtilityData
// 0x0040 (0x0040 - 0x0000)
struct FUtilityData final
{
public:
	TArray<struct FUtilityContribution>           ContributingFactors;                               // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ContributionsTotal;                                // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyRecentSelectionPenalty;                      // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RecentlySelectedPenaltyPercentage;                 // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PenaltyFallOffRate;                                // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DebugGraphName;                                    // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DebugGraphColor;                                   // 0x0030(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUtilityData) == 0x000008, "Wrong alignment on FUtilityData");
static_assert(sizeof(FUtilityData) == 0x000040, "Wrong size on FUtilityData");
static_assert(offsetof(FUtilityData, ContributingFactors) == 0x000000, "Member 'FUtilityData::ContributingFactors' has a wrong offset!");
static_assert(offsetof(FUtilityData, ContributionsTotal) == 0x000010, "Member 'FUtilityData::ContributionsTotal' has a wrong offset!");
static_assert(offsetof(FUtilityData, bApplyRecentSelectionPenalty) == 0x000014, "Member 'FUtilityData::bApplyRecentSelectionPenalty' has a wrong offset!");
static_assert(offsetof(FUtilityData, RecentlySelectedPenaltyPercentage) == 0x000018, "Member 'FUtilityData::RecentlySelectedPenaltyPercentage' has a wrong offset!");
static_assert(offsetof(FUtilityData, PenaltyFallOffRate) == 0x00001C, "Member 'FUtilityData::PenaltyFallOffRate' has a wrong offset!");
static_assert(offsetof(FUtilityData, DebugGraphName) == 0x000020, "Member 'FUtilityData::DebugGraphName' has a wrong offset!");
static_assert(offsetof(FUtilityData, DebugGraphColor) == 0x000030, "Member 'FUtilityData::DebugGraphColor' has a wrong offset!");

// ScriptStruct FortniteAI.FortAIEncounterPIDControllerSettings
// 0x0030 (0x0030 - 0x0000)
struct FFortAIEncounterPIDControllerSettings final
{
public:
	struct FCurveTableRowHandle                   ProportionalGain;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   IntegralGain;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   DerivativeGain;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIEncounterPIDControllerSettings) == 0x000008, "Wrong alignment on FFortAIEncounterPIDControllerSettings");
static_assert(sizeof(FFortAIEncounterPIDControllerSettings) == 0x000030, "Wrong size on FFortAIEncounterPIDControllerSettings");
static_assert(offsetof(FFortAIEncounterPIDControllerSettings, ProportionalGain) == 0x000000, "Member 'FFortAIEncounterPIDControllerSettings::ProportionalGain' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterPIDControllerSettings, IntegralGain) == 0x000010, "Member 'FFortAIEncounterPIDControllerSettings::IntegralGain' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterPIDControllerSettings, DerivativeGain) == 0x000020, "Member 'FFortAIEncounterPIDControllerSettings::DerivativeGain' has a wrong offset!");

// ScriptStruct FortniteAI.FortAIEncounterPIDController
// 0x0068 (0x0068 - 0x0000)
struct alignas(0x08) FFortAIEncounterPIDController final
{
public:
	float                                         ProportionalGain;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntegralGain;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DerivativeGain;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x5C];                                       // 0x000C(0x005C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAIEncounterPIDController) == 0x000008, "Wrong alignment on FFortAIEncounterPIDController");
static_assert(sizeof(FFortAIEncounterPIDController) == 0x000068, "Wrong size on FFortAIEncounterPIDController");
static_assert(offsetof(FFortAIEncounterPIDController, ProportionalGain) == 0x000000, "Member 'FFortAIEncounterPIDController::ProportionalGain' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterPIDController, IntegralGain) == 0x000004, "Member 'FFortAIEncounterPIDController::IntegralGain' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterPIDController, DerivativeGain) == 0x000008, "Member 'FFortAIEncounterPIDController::DerivativeGain' has a wrong offset!");

// ScriptStruct FortniteAI.FortEncounterPawnNumberCaps
// 0x0018 (0x0018 - 0x0000)
struct FFortEncounterPawnNumberCaps final
{
public:
	bool                                          bApplyPawnNumberCaps;                              // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCurveTableRowHandle>           PawnCapsPerPlayerCount;                            // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEncounterPawnNumberCaps) == 0x000008, "Wrong alignment on FFortEncounterPawnNumberCaps");
static_assert(sizeof(FFortEncounterPawnNumberCaps) == 0x000018, "Wrong size on FFortEncounterPawnNumberCaps");
static_assert(offsetof(FFortEncounterPawnNumberCaps, bApplyPawnNumberCaps) == 0x000000, "Member 'FFortEncounterPawnNumberCaps::bApplyPawnNumberCaps' has a wrong offset!");
static_assert(offsetof(FFortEncounterPawnNumberCaps, PawnCapsPerPlayerCount) == 0x000008, "Member 'FFortEncounterPawnNumberCaps::PawnCapsPerPlayerCount' has a wrong offset!");

// ScriptStruct FortniteAI.FortAIEncounterSpawnGroupCapsCategory
// 0x0140 (0x0140 - 0x0000)
struct FFortAIEncounterSpawnGroupCapsCategory final
{
public:
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0000(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bApplyGroupPopulationCurveToCategoryMax;           // 0x0048(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCurveTableRowHandle                   InitialSpawnGroupAvailabilityDelaySeconds;         // 0x0050(0x0010)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   SpawnGroupAvailabilityDelaySeconds;                // 0x0060(0x0010)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      UnlockingTagQuery;                                 // 0x0070(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortAIEncounterSpawnGroupCap>  SpawnGroupCapsPerPlayerCount;                      // 0x00B8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         InitialSpawnGroupAvailabilityTime;                 // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NumActiveCategorySpawnGroups;                      // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 SpawnGroupAvailabilityTimes;                       // 0x00D0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NumSpawnGroupAvailable;                            // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CategorySource;                                    // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0[0x50];                                      // 0x00F0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAIEncounterSpawnGroupCapsCategory) == 0x000008, "Wrong alignment on FFortAIEncounterSpawnGroupCapsCategory");
static_assert(sizeof(FFortAIEncounterSpawnGroupCapsCategory) == 0x000140, "Wrong size on FFortAIEncounterSpawnGroupCapsCategory");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsCategory, TagQuery) == 0x000000, "Member 'FFortAIEncounterSpawnGroupCapsCategory::TagQuery' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsCategory, bApplyGroupPopulationCurveToCategoryMax) == 0x000048, "Member 'FFortAIEncounterSpawnGroupCapsCategory::bApplyGroupPopulationCurveToCategoryMax' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsCategory, InitialSpawnGroupAvailabilityDelaySeconds) == 0x000050, "Member 'FFortAIEncounterSpawnGroupCapsCategory::InitialSpawnGroupAvailabilityDelaySeconds' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsCategory, SpawnGroupAvailabilityDelaySeconds) == 0x000060, "Member 'FFortAIEncounterSpawnGroupCapsCategory::SpawnGroupAvailabilityDelaySeconds' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsCategory, UnlockingTagQuery) == 0x000070, "Member 'FFortAIEncounterSpawnGroupCapsCategory::UnlockingTagQuery' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsCategory, SpawnGroupCapsPerPlayerCount) == 0x0000B8, "Member 'FFortAIEncounterSpawnGroupCapsCategory::SpawnGroupCapsPerPlayerCount' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsCategory, InitialSpawnGroupAvailabilityTime) == 0x0000C8, "Member 'FFortAIEncounterSpawnGroupCapsCategory::InitialSpawnGroupAvailabilityTime' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsCategory, NumActiveCategorySpawnGroups) == 0x0000CC, "Member 'FFortAIEncounterSpawnGroupCapsCategory::NumActiveCategorySpawnGroups' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsCategory, SpawnGroupAvailabilityTimes) == 0x0000D0, "Member 'FFortAIEncounterSpawnGroupCapsCategory::SpawnGroupAvailabilityTimes' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsCategory, NumSpawnGroupAvailable) == 0x0000E0, "Member 'FFortAIEncounterSpawnGroupCapsCategory::NumSpawnGroupAvailable' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsCategory, CategorySource) == 0x0000E8, "Member 'FFortAIEncounterSpawnGroupCapsCategory::CategorySource' has a wrong offset!");

// ScriptStruct FortniteAI.FortAIEncounterSpawnGroupCapsProfile
// 0x0030 (0x0030 - 0x0000)
struct FFortAIEncounterSpawnGroupCapsProfile final
{
public:
	struct FGameplayTagContainer                  EncounterTypeTags;                                 // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortAIEncounterSpawnGroupCapsCategory> PopulationCategories;                              // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIEncounterSpawnGroupCapsProfile) == 0x000008, "Wrong alignment on FFortAIEncounterSpawnGroupCapsProfile");
static_assert(sizeof(FFortAIEncounterSpawnGroupCapsProfile) == 0x000030, "Wrong size on FFortAIEncounterSpawnGroupCapsProfile");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsProfile, EncounterTypeTags) == 0x000000, "Member 'FFortAIEncounterSpawnGroupCapsProfile::EncounterTypeTags' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsProfile, PopulationCategories) == 0x000020, "Member 'FFortAIEncounterSpawnGroupCapsProfile::PopulationCategories' has a wrong offset!");

// ScriptStruct FortniteAI.FortAIEncounterSpawnPointsProfile
// 0x0040 (0x0040 - 0x0000)
struct FFortAIEncounterSpawnPointsProfile final
{
public:
	struct FGameplayTagContainer                  EncounterTypeTags;                                 // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FCurveTableRowHandle>           MaxSpawnPointsPerPlayerCount;                      // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FCurveTableRowHandle>           MinSpawnPointsPerPlayerCount;                      // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIEncounterSpawnPointsProfile) == 0x000008, "Wrong alignment on FFortAIEncounterSpawnPointsProfile");
static_assert(sizeof(FFortAIEncounterSpawnPointsProfile) == 0x000040, "Wrong size on FFortAIEncounterSpawnPointsProfile");
static_assert(offsetof(FFortAIEncounterSpawnPointsProfile, EncounterTypeTags) == 0x000000, "Member 'FFortAIEncounterSpawnPointsProfile::EncounterTypeTags' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnPointsProfile, MaxSpawnPointsPerPlayerCount) == 0x000020, "Member 'FFortAIEncounterSpawnPointsProfile::MaxSpawnPointsPerPlayerCount' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnPointsProfile, MinSpawnPointsPerPlayerCount) == 0x000030, "Member 'FFortAIEncounterSpawnPointsProfile::MinSpawnPointsPerPlayerCount' has a wrong offset!");

// ScriptStruct FortniteAI.FortAIPawnUpgradeProbability
// 0x0058 (0x0058 - 0x0000)
struct FFortAIPawnUpgradeProbability final
{
public:
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0000(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   UpgradeProbability;                                // 0x0048(0x0010)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIPawnUpgradeProbability) == 0x000008, "Wrong alignment on FFortAIPawnUpgradeProbability");
static_assert(sizeof(FFortAIPawnUpgradeProbability) == 0x000058, "Wrong size on FFortAIPawnUpgradeProbability");
static_assert(offsetof(FFortAIPawnUpgradeProbability, TagQuery) == 0x000000, "Member 'FFortAIPawnUpgradeProbability::TagQuery' has a wrong offset!");
static_assert(offsetof(FFortAIPawnUpgradeProbability, UpgradeProbability) == 0x000048, "Member 'FFortAIPawnUpgradeProbability::UpgradeProbability' has a wrong offset!");

// ScriptStruct FortniteAI.FortAISpawnGroupUpgradeData
// 0x0060 (0x0060 - 0x0000)
struct FFortAISpawnGroupUpgradeData final
{
public:
	TSubclassOf<class UFortAISpawnGroupUpgrade>   SpawnGroupUpgrade;                                 // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortAISpawnGroupUpgradeProbabilities> UpgradeProbabilities;                              // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortAISpawnGroupCapsCategorySet> SpawnGroupCapsCategories;                          // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagQuery                      EncounterTagRequirementsQuery;                     // 0x0018(0x0048)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortAISpawnGroupUpgradeData) == 0x000008, "Wrong alignment on FFortAISpawnGroupUpgradeData");
static_assert(sizeof(FFortAISpawnGroupUpgradeData) == 0x000060, "Wrong size on FFortAISpawnGroupUpgradeData");
static_assert(offsetof(FFortAISpawnGroupUpgradeData, SpawnGroupUpgrade) == 0x000000, "Member 'FFortAISpawnGroupUpgradeData::SpawnGroupUpgrade' has a wrong offset!");
static_assert(offsetof(FFortAISpawnGroupUpgradeData, UpgradeProbabilities) == 0x000008, "Member 'FFortAISpawnGroupUpgradeData::UpgradeProbabilities' has a wrong offset!");
static_assert(offsetof(FFortAISpawnGroupUpgradeData, SpawnGroupCapsCategories) == 0x000010, "Member 'FFortAISpawnGroupUpgradeData::SpawnGroupCapsCategories' has a wrong offset!");
static_assert(offsetof(FFortAISpawnGroupUpgradeData, EncounterTagRequirementsQuery) == 0x000018, "Member 'FFortAISpawnGroupUpgradeData::EncounterTagRequirementsQuery' has a wrong offset!");

// ScriptStruct FortniteAI.FortAIEncounterPawnDifficultyLevelModifier
// 0x0058 (0x0058 - 0x0000)
struct FFortAIEncounterPawnDifficultyLevelModifier final
{
public:
	struct FGameplayTagQuery                      EncounterTagRequirementsQuery;                     // 0x0000(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   DifficultyLevelModifierCurve;                      // 0x0048(0x0010)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIEncounterPawnDifficultyLevelModifier) == 0x000008, "Wrong alignment on FFortAIEncounterPawnDifficultyLevelModifier");
static_assert(sizeof(FFortAIEncounterPawnDifficultyLevelModifier) == 0x000058, "Wrong size on FFortAIEncounterPawnDifficultyLevelModifier");
static_assert(offsetof(FFortAIEncounterPawnDifficultyLevelModifier, EncounterTagRequirementsQuery) == 0x000000, "Member 'FFortAIEncounterPawnDifficultyLevelModifier::EncounterTagRequirementsQuery' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterPawnDifficultyLevelModifier, DifficultyLevelModifierCurve) == 0x000048, "Member 'FFortAIEncounterPawnDifficultyLevelModifier::DifficultyLevelModifierCurve' has a wrong offset!");

// ScriptStruct FortniteAI.FortPendingStoppedEncounterData
// 0x0010 (0x0010 - 0x0000)
struct FFortPendingStoppedEncounterData final
{
public:
	class UFortAIEncounterInfo*                   Encounter;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortObjectiveStatus                          ObjectiveStatus;                                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceDestroyAI;                                   // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEncounterCompletedSuccessfully;                   // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPendingStoppedEncounterData) == 0x000008, "Wrong alignment on FFortPendingStoppedEncounterData");
static_assert(sizeof(FFortPendingStoppedEncounterData) == 0x000010, "Wrong size on FFortPendingStoppedEncounterData");
static_assert(offsetof(FFortPendingStoppedEncounterData, Encounter) == 0x000000, "Member 'FFortPendingStoppedEncounterData::Encounter' has a wrong offset!");
static_assert(offsetof(FFortPendingStoppedEncounterData, ObjectiveStatus) == 0x000008, "Member 'FFortPendingStoppedEncounterData::ObjectiveStatus' has a wrong offset!");
static_assert(offsetof(FFortPendingStoppedEncounterData, bForceDestroyAI) == 0x000009, "Member 'FFortPendingStoppedEncounterData::bForceDestroyAI' has a wrong offset!");
static_assert(offsetof(FFortPendingStoppedEncounterData, bEncounterCompletedSuccessfully) == 0x00000A, "Member 'FFortPendingStoppedEncounterData::bEncounterCompletedSuccessfully' has a wrong offset!");

// ScriptStruct FortniteAI.FortEncounterGroupLimitData
// 0x000C (0x000C - 0x0000)
struct FFortEncounterGroupLimitData final
{
public:
	int32                                         DesiredPawnNumCap;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemainingDesiredLimit;                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentEncounterLimit;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEncounterGroupLimitData) == 0x000004, "Wrong alignment on FFortEncounterGroupLimitData");
static_assert(sizeof(FFortEncounterGroupLimitData) == 0x00000C, "Wrong size on FFortEncounterGroupLimitData");
static_assert(offsetof(FFortEncounterGroupLimitData, DesiredPawnNumCap) == 0x000000, "Member 'FFortEncounterGroupLimitData::DesiredPawnNumCap' has a wrong offset!");
static_assert(offsetof(FFortEncounterGroupLimitData, RemainingDesiredLimit) == 0x000004, "Member 'FFortEncounterGroupLimitData::RemainingDesiredLimit' has a wrong offset!");
static_assert(offsetof(FFortEncounterGroupLimitData, CurrentEncounterLimit) == 0x000008, "Member 'FFortEncounterGroupLimitData::CurrentEncounterLimit' has a wrong offset!");

// ScriptStruct FortniteAI.FortAIBaseLootDropRow
// 0x0038 (0x0040 - 0x0008)
struct FFortAIBaseLootDropRow final : public FTableRowBase
{
public:
	int32                                         Priority;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ItemDropChance;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WorldItemLootTierGroup;                            // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WorldItemInstancedLootTierGroup;                   // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AccountItemLootTierGroup;                          // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  AITagsContainer;                                   // 0x0020(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIBaseLootDropRow) == 0x000008, "Wrong alignment on FFortAIBaseLootDropRow");
static_assert(sizeof(FFortAIBaseLootDropRow) == 0x000040, "Wrong size on FFortAIBaseLootDropRow");
static_assert(offsetof(FFortAIBaseLootDropRow, Priority) == 0x000008, "Member 'FFortAIBaseLootDropRow::Priority' has a wrong offset!");
static_assert(offsetof(FFortAIBaseLootDropRow, ItemDropChance) == 0x00000C, "Member 'FFortAIBaseLootDropRow::ItemDropChance' has a wrong offset!");
static_assert(offsetof(FFortAIBaseLootDropRow, WorldItemLootTierGroup) == 0x000010, "Member 'FFortAIBaseLootDropRow::WorldItemLootTierGroup' has a wrong offset!");
static_assert(offsetof(FFortAIBaseLootDropRow, WorldItemInstancedLootTierGroup) == 0x000014, "Member 'FFortAIBaseLootDropRow::WorldItemInstancedLootTierGroup' has a wrong offset!");
static_assert(offsetof(FFortAIBaseLootDropRow, AccountItemLootTierGroup) == 0x000018, "Member 'FFortAIBaseLootDropRow::AccountItemLootTierGroup' has a wrong offset!");
static_assert(offsetof(FFortAIBaseLootDropRow, AITagsContainer) == 0x000020, "Member 'FFortAIBaseLootDropRow::AITagsContainer' has a wrong offset!");

// ScriptStruct FortniteAI.FortAILootDropModifierRow
// 0x0030 (0x0038 - 0x0008)
struct FFortAILootDropModifierRow final : public FTableRowBase
{
public:
	int32                                         Priority;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ItemDropChanceMultiplier;                          // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WorldItemLootTierGroup;                            // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  AITagsContainer;                                   // 0x0018(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAILootDropModifierRow) == 0x000008, "Wrong alignment on FFortAILootDropModifierRow");
static_assert(sizeof(FFortAILootDropModifierRow) == 0x000038, "Wrong size on FFortAILootDropModifierRow");
static_assert(offsetof(FFortAILootDropModifierRow, Priority) == 0x000008, "Member 'FFortAILootDropModifierRow::Priority' has a wrong offset!");
static_assert(offsetof(FFortAILootDropModifierRow, ItemDropChanceMultiplier) == 0x00000C, "Member 'FFortAILootDropModifierRow::ItemDropChanceMultiplier' has a wrong offset!");
static_assert(offsetof(FFortAILootDropModifierRow, WorldItemLootTierGroup) == 0x000010, "Member 'FFortAILootDropModifierRow::WorldItemLootTierGroup' has a wrong offset!");
static_assert(offsetof(FFortAILootDropModifierRow, AITagsContainer) == 0x000018, "Member 'FFortAILootDropModifierRow::AITagsContainer' has a wrong offset!");

// ScriptStruct FortniteAI.FortAILootDropModifiers
// 0x0060 (0x0060 - 0x0000)
struct FFortAILootDropModifiers final
{
public:
	struct FFortAIEncounterRequirements           Requirements;                                      // 0x0000(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FDataTableRowHandle>            LootDropModifierRows;                              // 0x0050(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAILootDropModifiers) == 0x000008, "Wrong alignment on FFortAILootDropModifiers");
static_assert(sizeof(FFortAILootDropModifiers) == 0x000060, "Wrong size on FFortAILootDropModifiers");
static_assert(offsetof(FFortAILootDropModifiers, Requirements) == 0x000000, "Member 'FFortAILootDropModifiers::Requirements' has a wrong offset!");
static_assert(offsetof(FFortAILootDropModifiers, LootDropModifierRows) == 0x000050, "Member 'FFortAILootDropModifiers::LootDropModifierRows' has a wrong offset!");

// ScriptStruct FortniteAI.LODAIUpdateInfo
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FLODAIUpdateInfo final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLODAIUpdateInfo) == 0x000008, "Wrong alignment on FLODAIUpdateInfo");
static_assert(sizeof(FLODAIUpdateInfo) == 0x000018, "Wrong size on FLODAIUpdateInfo");

// ScriptStruct FortniteAI.FortAIEncounterQueryData
// 0x0020 (0x0020 - 0x0000)
struct FFortAIEncounterQueryData final
{
public:
	TArray<struct FVector>                        QueryLocations;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         QueryActors;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIEncounterQueryData) == 0x000008, "Wrong alignment on FFortAIEncounterQueryData");
static_assert(sizeof(FFortAIEncounterQueryData) == 0x000020, "Wrong size on FFortAIEncounterQueryData");
static_assert(offsetof(FFortAIEncounterQueryData, QueryLocations) == 0x000000, "Member 'FFortAIEncounterQueryData::QueryLocations' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterQueryData, QueryActors) == 0x000010, "Member 'FFortAIEncounterQueryData::QueryActors' has a wrong offset!");

// ScriptStruct FortniteAI.PlayerLODViewConeConfig
// 0x0080 (0x0080 - 0x0000)
struct FPlayerLODViewConeConfig final
{
public:
	struct FScalableFloat                         ObserverVisionAngleDeg;                            // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         ViewConeMaxRadius;                                 // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         AlwaysVisibleRadius;                               // 0x0050(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EFortAILODLevel                               FortAILODLevel;                                    // 0x0078(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerLODViewConeConfig) == 0x000008, "Wrong alignment on FPlayerLODViewConeConfig");
static_assert(sizeof(FPlayerLODViewConeConfig) == 0x000080, "Wrong size on FPlayerLODViewConeConfig");
static_assert(offsetof(FPlayerLODViewConeConfig, ObserverVisionAngleDeg) == 0x000000, "Member 'FPlayerLODViewConeConfig::ObserverVisionAngleDeg' has a wrong offset!");
static_assert(offsetof(FPlayerLODViewConeConfig, ViewConeMaxRadius) == 0x000028, "Member 'FPlayerLODViewConeConfig::ViewConeMaxRadius' has a wrong offset!");
static_assert(offsetof(FPlayerLODViewConeConfig, AlwaysVisibleRadius) == 0x000050, "Member 'FPlayerLODViewConeConfig::AlwaysVisibleRadius' has a wrong offset!");
static_assert(offsetof(FPlayerLODViewConeConfig, FortAILODLevel) == 0x000078, "Member 'FPlayerLODViewConeConfig::FortAILODLevel' has a wrong offset!");

// ScriptStruct FortniteAI.PlayerLODViewConeHysteresisConfig
// 0x0050 (0x0050 - 0x0000)
struct FPlayerLODViewConeHysteresisConfig final
{
public:
	struct FScalableFloat                         AdditionalObserverVisionAngleDeg;                  // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         AdditionalRadius;                                  // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerLODViewConeHysteresisConfig) == 0x000008, "Wrong alignment on FPlayerLODViewConeHysteresisConfig");
static_assert(sizeof(FPlayerLODViewConeHysteresisConfig) == 0x000050, "Wrong size on FPlayerLODViewConeHysteresisConfig");
static_assert(offsetof(FPlayerLODViewConeHysteresisConfig, AdditionalObserverVisionAngleDeg) == 0x000000, "Member 'FPlayerLODViewConeHysteresisConfig::AdditionalObserverVisionAngleDeg' has a wrong offset!");
static_assert(offsetof(FPlayerLODViewConeHysteresisConfig, AdditionalRadius) == 0x000028, "Member 'FPlayerLODViewConeHysteresisConfig::AdditionalRadius' has a wrong offset!");

// ScriptStruct FortniteAI.AIDirectorEventData
// 0x0030 (0x0030 - 0x0000)
struct FAIDirectorEventData final
{
public:
	EFortAIDirectorEvent                          event;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCurveTableRowHandle                   DataMax;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   CoolDownRate;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAIDirectorEventContribution              ContributionType;                                  // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAIDirectorEventParticipant               OwnerParticipantType;                              // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIDirectorEventData) == 0x000008, "Wrong alignment on FAIDirectorEventData");
static_assert(sizeof(FAIDirectorEventData) == 0x000030, "Wrong size on FAIDirectorEventData");
static_assert(offsetof(FAIDirectorEventData, event) == 0x000000, "Member 'FAIDirectorEventData::event' has a wrong offset!");
static_assert(offsetof(FAIDirectorEventData, DataMax) == 0x000008, "Member 'FAIDirectorEventData::DataMax' has a wrong offset!");
static_assert(offsetof(FAIDirectorEventData, CoolDownRate) == 0x000018, "Member 'FAIDirectorEventData::CoolDownRate' has a wrong offset!");
static_assert(offsetof(FAIDirectorEventData, ContributionType) == 0x000028, "Member 'FAIDirectorEventData::ContributionType' has a wrong offset!");
static_assert(offsetof(FAIDirectorEventData, OwnerParticipantType) == 0x000029, "Member 'FAIDirectorEventData::OwnerParticipantType' has a wrong offset!");

// ScriptStruct FortniteAI.FortAIDirectorFactorData
// 0x0020 (0x0020 - 0x0000)
struct FFortAIDirectorFactorData final
{
public:
	EFortAIDirectorFactor                         AIDirectorFactor;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortAIDirectorFactorContribution> ContributingEvents;                                // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAIDirectorFactorData) == 0x000008, "Wrong alignment on FFortAIDirectorFactorData");
static_assert(sizeof(FFortAIDirectorFactorData) == 0x000020, "Wrong size on FFortAIDirectorFactorData");
static_assert(offsetof(FFortAIDirectorFactorData, AIDirectorFactor) == 0x000000, "Member 'FFortAIDirectorFactorData::AIDirectorFactor' has a wrong offset!");
static_assert(offsetof(FFortAIDirectorFactorData, ContributingEvents) == 0x000008, "Member 'FFortAIDirectorFactorData::ContributingEvents' has a wrong offset!");
static_assert(offsetof(FFortAIDirectorFactorData, MaxValue) == 0x000018, "Member 'FFortAIDirectorFactorData::MaxValue' has a wrong offset!");

// ScriptStruct FortniteAI.SpawnGroupProgression
// 0x0008 (0x0008 - 0x0000)
struct FSpawnGroupProgression final
{
public:
	class UFortAISpawnGroup*                      SpawnGroup;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnGroupProgression) == 0x000008, "Wrong alignment on FSpawnGroupProgression");
static_assert(sizeof(FSpawnGroupProgression) == 0x000008, "Wrong size on FSpawnGroupProgression");
static_assert(offsetof(FSpawnGroupProgression, SpawnGroup) == 0x000000, "Member 'FSpawnGroupProgression::SpawnGroup' has a wrong offset!");

// ScriptStruct FortniteAI.AIEncounterSpawnGroupWeights
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FAIEncounterSpawnGroupWeights final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIEncounterSpawnGroupWeights) == 0x000008, "Wrong alignment on FAIEncounterSpawnGroupWeights");
static_assert(sizeof(FAIEncounterSpawnGroupWeights) == 0x000018, "Wrong size on FAIEncounterSpawnGroupWeights");

// ScriptStruct FortniteAI.FortIntensityCurve
// 0x0030 (0x0038 - 0x0008)
struct FFortIntensityCurve final : public FTableRowBase
{
public:
	class UCurveTable*                            IntensityCurveTable;                               // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   IntensityCurveTableRow;                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LowPlayerPerformancePeakIntensityThreshold;        // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NormalPlayerPerformancePeakIntensityThreshold;     // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HighPlayerPerformancePeakIntensityThreshold;       // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxRampTime;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FadeEndIntensityThreshold;                         // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StartIntensityOffsetFloor;                         // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EndIntensityOffsetFloor;                           // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StartIntensityOffsetCeiling;                       // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EndIntensityOffsetCeiling;                         // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortIntensityCurve) == 0x000008, "Wrong alignment on FFortIntensityCurve");
static_assert(sizeof(FFortIntensityCurve) == 0x000038, "Wrong size on FFortIntensityCurve");
static_assert(offsetof(FFortIntensityCurve, IntensityCurveTable) == 0x000008, "Member 'FFortIntensityCurve::IntensityCurveTable' has a wrong offset!");
static_assert(offsetof(FFortIntensityCurve, IntensityCurveTableRow) == 0x000010, "Member 'FFortIntensityCurve::IntensityCurveTableRow' has a wrong offset!");
static_assert(offsetof(FFortIntensityCurve, LowPlayerPerformancePeakIntensityThreshold) == 0x000014, "Member 'FFortIntensityCurve::LowPlayerPerformancePeakIntensityThreshold' has a wrong offset!");
static_assert(offsetof(FFortIntensityCurve, NormalPlayerPerformancePeakIntensityThreshold) == 0x000018, "Member 'FFortIntensityCurve::NormalPlayerPerformancePeakIntensityThreshold' has a wrong offset!");
static_assert(offsetof(FFortIntensityCurve, HighPlayerPerformancePeakIntensityThreshold) == 0x00001C, "Member 'FFortIntensityCurve::HighPlayerPerformancePeakIntensityThreshold' has a wrong offset!");
static_assert(offsetof(FFortIntensityCurve, MaxRampTime) == 0x000020, "Member 'FFortIntensityCurve::MaxRampTime' has a wrong offset!");
static_assert(offsetof(FFortIntensityCurve, FadeEndIntensityThreshold) == 0x000024, "Member 'FFortIntensityCurve::FadeEndIntensityThreshold' has a wrong offset!");
static_assert(offsetof(FFortIntensityCurve, StartIntensityOffsetFloor) == 0x000028, "Member 'FFortIntensityCurve::StartIntensityOffsetFloor' has a wrong offset!");
static_assert(offsetof(FFortIntensityCurve, EndIntensityOffsetFloor) == 0x00002C, "Member 'FFortIntensityCurve::EndIntensityOffsetFloor' has a wrong offset!");
static_assert(offsetof(FFortIntensityCurve, StartIntensityOffsetCeiling) == 0x000030, "Member 'FFortIntensityCurve::StartIntensityOffsetCeiling' has a wrong offset!");
static_assert(offsetof(FFortIntensityCurve, EndIntensityOffsetCeiling) == 0x000034, "Member 'FFortIntensityCurve::EndIntensityOffsetCeiling' has a wrong offset!");

// ScriptStruct FortniteAI.CurrentIntensityAnalyticsBucket
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FCurrentIntensityAnalyticsBucket final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCurrentIntensityAnalyticsBucket) == 0x000008, "Wrong alignment on FCurrentIntensityAnalyticsBucket");
static_assert(sizeof(FCurrentIntensityAnalyticsBucket) == 0x000038, "Wrong size on FCurrentIntensityAnalyticsBucket");

// ScriptStruct FortniteAI.FortCurveSequenceInstanceInfo
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FFortCurveSequenceInstanceInfo
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortCurveSequenceInstanceInfo) == 0x000004, "Wrong alignment on FFortCurveSequenceInstanceInfo");
static_assert(sizeof(FFortCurveSequenceInstanceInfo) == 0x000004, "Wrong size on FFortCurveSequenceInstanceInfo");

// ScriptStruct FortniteAI.FortSpawnPointsPercentageCurveSequenceInstanceInfo
// 0x000C (0x0010 - 0x0004)
struct FFortSpawnPointsPercentageCurveSequenceInstanceInfo final : public FFortCurveSequenceInstanceInfo
{
public:
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortSpawnPointsPercentageCurveSequence* SpawnPointsPercentageCurveSequence;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortSpawnPointsPercentageCurveSequenceInstanceInfo) == 0x000008, "Wrong alignment on FFortSpawnPointsPercentageCurveSequenceInstanceInfo");
static_assert(sizeof(FFortSpawnPointsPercentageCurveSequenceInstanceInfo) == 0x000010, "Wrong size on FFortSpawnPointsPercentageCurveSequenceInstanceInfo");
static_assert(offsetof(FFortSpawnPointsPercentageCurveSequenceInstanceInfo, SpawnPointsPercentageCurveSequence) == 0x000008, "Member 'FFortSpawnPointsPercentageCurveSequenceInstanceInfo::SpawnPointsPercentageCurveSequence' has a wrong offset!");

// ScriptStruct FortniteAI.FortIntensityCurveSequenceInstanceInfo
// 0x000C (0x0010 - 0x0004)
struct FFortIntensityCurveSequenceInstanceInfo final : public FFortCurveSequenceInstanceInfo
{
public:
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortIntensityCurveSequence*            IntensityCurveSequence;                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortIntensityCurveSequenceInstanceInfo) == 0x000008, "Wrong alignment on FFortIntensityCurveSequenceInstanceInfo");
static_assert(sizeof(FFortIntensityCurveSequenceInstanceInfo) == 0x000010, "Wrong size on FFortIntensityCurveSequenceInstanceInfo");
static_assert(offsetof(FFortIntensityCurveSequenceInstanceInfo, IntensityCurveSequence) == 0x000008, "Member 'FFortIntensityCurveSequenceInstanceInfo::IntensityCurveSequence' has a wrong offset!");

// ScriptStruct FortniteAI.FortAIPawnUpgradeData
// 0x0048 (0x0048 - 0x0000)
struct FFortAIPawnUpgradeData final
{
public:
	struct FCurveTableRowHandle                   SpawnPointsMultiplierCurve;                        // 0x0000(0x0010)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FCurveTableRowHandle                   LifespanMultiplierCurve;                           // 0x0010(0x0010)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FCurveTableRowHandle                   ScoreMultiplierCurve;                              // 0x0020(0x0010)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortGameplayModifierItemDefinition*    ModifierDefinition;                                // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UFortGameplayModifierItemDefinition*> AdditionalModifiers;                               // 0x0038(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortAIPawnUpgradeData) == 0x000008, "Wrong alignment on FFortAIPawnUpgradeData");
static_assert(sizeof(FFortAIPawnUpgradeData) == 0x000048, "Wrong size on FFortAIPawnUpgradeData");
static_assert(offsetof(FFortAIPawnUpgradeData, SpawnPointsMultiplierCurve) == 0x000000, "Member 'FFortAIPawnUpgradeData::SpawnPointsMultiplierCurve' has a wrong offset!");
static_assert(offsetof(FFortAIPawnUpgradeData, LifespanMultiplierCurve) == 0x000010, "Member 'FFortAIPawnUpgradeData::LifespanMultiplierCurve' has a wrong offset!");
static_assert(offsetof(FFortAIPawnUpgradeData, ScoreMultiplierCurve) == 0x000020, "Member 'FFortAIPawnUpgradeData::ScoreMultiplierCurve' has a wrong offset!");
static_assert(offsetof(FFortAIPawnUpgradeData, ModifierDefinition) == 0x000030, "Member 'FFortAIPawnUpgradeData::ModifierDefinition' has a wrong offset!");
static_assert(offsetof(FFortAIPawnUpgradeData, AdditionalModifiers) == 0x000038, "Member 'FFortAIPawnUpgradeData::AdditionalModifiers' has a wrong offset!");

// ScriptStruct FortniteAI.SpawnGroupInstanceInfo
// 0x0108 (0x0108 - 0x0000)
struct FSpawnGroupInstanceInfo final
{
public:
	class UFortAISpawnGroup*                      SpawnGroup;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumActiveAlive;                                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalGroupCost;                                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnPointsUsed;                                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumEngaged;                                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReadyToSpawn;                                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFinishedSpawning;                                 // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  GroupGuid;                                         // 0x001C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnemySpawnDataIndex;                               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeSelected;                                      // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextEnemyToSpawnIndex;                             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  UpgradeTags;                                       // 0x0038(0x0020)(NativeAccessSpecifierPublic)
	TStructCycleFixup<struct FFortAISpawnGroupUpgradeUIData, 0x0070, 0x08> UpgradeUIData;                                     // 0x0058(0x0070)(NativeAccessSpecifierPublic)
	TArray<struct FFortAIPawnUpgradeData>         PawnUpgrades;                                      // 0x00C8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UFortGameplayModifierItemDefinition*> ModifiersForAllPawns;                              // 0x00D8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AFortAIPawn*>                    PawnList;                                          // 0x00E8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AFortAIPawn*>                    LifespanExpiredList;                               // 0x00F8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnGroupInstanceInfo) == 0x000008, "Wrong alignment on FSpawnGroupInstanceInfo");
static_assert(sizeof(FSpawnGroupInstanceInfo) == 0x000108, "Wrong size on FSpawnGroupInstanceInfo");
static_assert(offsetof(FSpawnGroupInstanceInfo, SpawnGroup) == 0x000000, "Member 'FSpawnGroupInstanceInfo::SpawnGroup' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, NumActiveAlive) == 0x000008, "Member 'FSpawnGroupInstanceInfo::NumActiveAlive' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, TotalGroupCost) == 0x00000C, "Member 'FSpawnGroupInstanceInfo::TotalGroupCost' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, SpawnPointsUsed) == 0x000010, "Member 'FSpawnGroupInstanceInfo::SpawnPointsUsed' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, NumEngaged) == 0x000014, "Member 'FSpawnGroupInstanceInfo::NumEngaged' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, bReadyToSpawn) == 0x000018, "Member 'FSpawnGroupInstanceInfo::bReadyToSpawn' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, bFinishedSpawning) == 0x000019, "Member 'FSpawnGroupInstanceInfo::bFinishedSpawning' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, GroupGuid) == 0x00001C, "Member 'FSpawnGroupInstanceInfo::GroupGuid' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, EnemySpawnDataIndex) == 0x00002C, "Member 'FSpawnGroupInstanceInfo::EnemySpawnDataIndex' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, TimeSelected) == 0x000030, "Member 'FSpawnGroupInstanceInfo::TimeSelected' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, NextEnemyToSpawnIndex) == 0x000034, "Member 'FSpawnGroupInstanceInfo::NextEnemyToSpawnIndex' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, UpgradeTags) == 0x000038, "Member 'FSpawnGroupInstanceInfo::UpgradeTags' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, UpgradeUIData) == 0x000058, "Member 'FSpawnGroupInstanceInfo::UpgradeUIData' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, PawnUpgrades) == 0x0000C8, "Member 'FSpawnGroupInstanceInfo::PawnUpgrades' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, ModifiersForAllPawns) == 0x0000D8, "Member 'FSpawnGroupInstanceInfo::ModifiersForAllPawns' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, PawnList) == 0x0000E8, "Member 'FSpawnGroupInstanceInfo::PawnList' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, LifespanExpiredList) == 0x0000F8, "Member 'FSpawnGroupInstanceInfo::LifespanExpiredList' has a wrong offset!");

// ScriptStruct FortniteAI.FortSpawnAIRequest
// 0x0068 (0x0068 - 0x0000)
struct FFortSpawnAIRequest final
{
public:
	struct FGuid                                  SpawnGroupInstanceGuid;                            // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnemyIndex;                                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SpawnLocation;                                     // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnRotation;                                     // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 SpawnPoint;                                        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortAbilitySet*>                AbilitySetsToGrantOnSpawn;                         // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCollisionWhenSpawning;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpawnDelay;                                        // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSpawnAIRequest) == 0x000008, "Wrong alignment on FFortSpawnAIRequest");
static_assert(sizeof(FFortSpawnAIRequest) == 0x000068, "Wrong size on FFortSpawnAIRequest");
static_assert(offsetof(FFortSpawnAIRequest, SpawnGroupInstanceGuid) == 0x000000, "Member 'FFortSpawnAIRequest::SpawnGroupInstanceGuid' has a wrong offset!");
static_assert(offsetof(FFortSpawnAIRequest, EnemyIndex) == 0x000010, "Member 'FFortSpawnAIRequest::EnemyIndex' has a wrong offset!");
static_assert(offsetof(FFortSpawnAIRequest, SpawnLocation) == 0x000018, "Member 'FFortSpawnAIRequest::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FFortSpawnAIRequest, SpawnRotation) == 0x000030, "Member 'FFortSpawnAIRequest::SpawnRotation' has a wrong offset!");
static_assert(offsetof(FFortSpawnAIRequest, SpawnPoint) == 0x000048, "Member 'FFortSpawnAIRequest::SpawnPoint' has a wrong offset!");
static_assert(offsetof(FFortSpawnAIRequest, AbilitySetsToGrantOnSpawn) == 0x000050, "Member 'FFortSpawnAIRequest::AbilitySetsToGrantOnSpawn' has a wrong offset!");
static_assert(offsetof(FFortSpawnAIRequest, bIgnoreCollisionWhenSpawning) == 0x000060, "Member 'FFortSpawnAIRequest::bIgnoreCollisionWhenSpawning' has a wrong offset!");
static_assert(offsetof(FFortSpawnAIRequest, SpawnDelay) == 0x000064, "Member 'FFortSpawnAIRequest::SpawnDelay' has a wrong offset!");

// ScriptStruct FortniteAI.FortAISpawnerData
// 0x0078 (0x0078 - 0x0000)
struct FFortAISpawnerData final
{
public:
	struct FGuid                                  SpawnGroupInstanceGuid;                            // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortSpawnAIRequest                    ReservedSpawnRequest;                              // 0x0010(0x0068)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAISpawnerData) == 0x000008, "Wrong alignment on FFortAISpawnerData");
static_assert(sizeof(FFortAISpawnerData) == 0x000078, "Wrong size on FFortAISpawnerData");
static_assert(offsetof(FFortAISpawnerData, SpawnGroupInstanceGuid) == 0x000000, "Member 'FFortAISpawnerData::SpawnGroupInstanceGuid' has a wrong offset!");
static_assert(offsetof(FFortAISpawnerData, ReservedSpawnRequest) == 0x000010, "Member 'FFortAISpawnerData::ReservedSpawnRequest' has a wrong offset!");

// ScriptStruct FortniteAI.FortEncounterAIDirectorFactor
// 0x000C (0x000C - 0x0000)
struct FFortEncounterAIDirectorFactor final
{
public:
	float                                         CurrentValue;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccumulatedPeriodValue;                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalPeriodTime;                                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEncounterAIDirectorFactor) == 0x000004, "Wrong alignment on FFortEncounterAIDirectorFactor");
static_assert(sizeof(FFortEncounterAIDirectorFactor) == 0x00000C, "Wrong size on FFortEncounterAIDirectorFactor");
static_assert(offsetof(FFortEncounterAIDirectorFactor, CurrentValue) == 0x000000, "Member 'FFortEncounterAIDirectorFactor::CurrentValue' has a wrong offset!");
static_assert(offsetof(FFortEncounterAIDirectorFactor, AccumulatedPeriodValue) == 0x000004, "Member 'FFortEncounterAIDirectorFactor::AccumulatedPeriodValue' has a wrong offset!");
static_assert(offsetof(FFortEncounterAIDirectorFactor, TotalPeriodTime) == 0x000008, "Member 'FFortEncounterAIDirectorFactor::TotalPeriodTime' has a wrong offset!");

// ScriptStruct FortniteAI.EncounterEnvironmentQueryInstance
// 0x0058 (0x0058 - 0x0000)
struct FEncounterEnvironmentQueryInstance final
{
public:
	TStructCycleFixup<struct FEncounterEnvironmentQueryInfo, 0x0028, 0x08> EnvironmentQueryInfo;                              // 0x0000(0x0028)(NativeAccessSpecifierPublic)
	int32                                         QueryID;                                           // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsWaitingForQueryResults;                         // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortEncounterDirection                       ChosenDirection;                                   // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        QueryLocations;                                    // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ABuildingRift*>                  FoundRifts;                                        // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NumTimesUsed;                                      // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEncounterEnvironmentQueryInstance) == 0x000008, "Wrong alignment on FEncounterEnvironmentQueryInstance");
static_assert(sizeof(FEncounterEnvironmentQueryInstance) == 0x000058, "Wrong size on FEncounterEnvironmentQueryInstance");
static_assert(offsetof(FEncounterEnvironmentQueryInstance, EnvironmentQueryInfo) == 0x000000, "Member 'FEncounterEnvironmentQueryInstance::EnvironmentQueryInfo' has a wrong offset!");
static_assert(offsetof(FEncounterEnvironmentQueryInstance, QueryID) == 0x000028, "Member 'FEncounterEnvironmentQueryInstance::QueryID' has a wrong offset!");
static_assert(offsetof(FEncounterEnvironmentQueryInstance, bIsWaitingForQueryResults) == 0x00002C, "Member 'FEncounterEnvironmentQueryInstance::bIsWaitingForQueryResults' has a wrong offset!");
static_assert(offsetof(FEncounterEnvironmentQueryInstance, ChosenDirection) == 0x00002D, "Member 'FEncounterEnvironmentQueryInstance::ChosenDirection' has a wrong offset!");
static_assert(offsetof(FEncounterEnvironmentQueryInstance, QueryLocations) == 0x000030, "Member 'FEncounterEnvironmentQueryInstance::QueryLocations' has a wrong offset!");
static_assert(offsetof(FEncounterEnvironmentQueryInstance, FoundRifts) == 0x000040, "Member 'FEncounterEnvironmentQueryInstance::FoundRifts' has a wrong offset!");
static_assert(offsetof(FEncounterEnvironmentQueryInstance, NumTimesUsed) == 0x000050, "Member 'FEncounterEnvironmentQueryInstance::NumTimesUsed' has a wrong offset!");

// ScriptStruct FortniteAI.FortAIEncounterWaveProgressEstimation
// 0x001C (0x001C - 0x0000)
struct FFortAIEncounterWaveProgressEstimation final
{
public:
	float                                         SectionProgressEstimate;                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SectionStartTime;                                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastWaveProgressUpdateTime;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PeakAndFadeWavePercentage;                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAdjustmentPerSecond;                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAIWaveProgressSection                    CurrentSection;                                    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumberOfWaveSegments;                              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIEncounterWaveProgressEstimation) == 0x000004, "Wrong alignment on FFortAIEncounterWaveProgressEstimation");
static_assert(sizeof(FFortAIEncounterWaveProgressEstimation) == 0x00001C, "Wrong size on FFortAIEncounterWaveProgressEstimation");
static_assert(offsetof(FFortAIEncounterWaveProgressEstimation, SectionProgressEstimate) == 0x000000, "Member 'FFortAIEncounterWaveProgressEstimation::SectionProgressEstimate' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterWaveProgressEstimation, SectionStartTime) == 0x000004, "Member 'FFortAIEncounterWaveProgressEstimation::SectionStartTime' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterWaveProgressEstimation, LastWaveProgressUpdateTime) == 0x000008, "Member 'FFortAIEncounterWaveProgressEstimation::LastWaveProgressUpdateTime' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterWaveProgressEstimation, PeakAndFadeWavePercentage) == 0x00000C, "Member 'FFortAIEncounterWaveProgressEstimation::PeakAndFadeWavePercentage' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterWaveProgressEstimation, MaxAdjustmentPerSecond) == 0x000010, "Member 'FFortAIEncounterWaveProgressEstimation::MaxAdjustmentPerSecond' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterWaveProgressEstimation, CurrentSection) == 0x000014, "Member 'FFortAIEncounterWaveProgressEstimation::CurrentSection' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterWaveProgressEstimation, NumberOfWaveSegments) == 0x000018, "Member 'FFortAIEncounterWaveProgressEstimation::NumberOfWaveSegments' has a wrong offset!");

// ScriptStruct FortniteAI.FortGoalActorEncounterDataManagerPair
// 0x0010 (0x0010 - 0x0000)
struct FFortGoalActorEncounterDataManagerPair final
{
public:
	class AActor*                                 GoalActor;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortAIDirectorDataManager*             EncounterDataManager;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGoalActorEncounterDataManagerPair) == 0x000008, "Wrong alignment on FFortGoalActorEncounterDataManagerPair");
static_assert(sizeof(FFortGoalActorEncounterDataManagerPair) == 0x000010, "Wrong size on FFortGoalActorEncounterDataManagerPair");
static_assert(offsetof(FFortGoalActorEncounterDataManagerPair, GoalActor) == 0x000000, "Member 'FFortGoalActorEncounterDataManagerPair::GoalActor' has a wrong offset!");
static_assert(offsetof(FFortGoalActorEncounterDataManagerPair, EncounterDataManager) == 0x000008, "Member 'FFortGoalActorEncounterDataManagerPair::EncounterDataManager' has a wrong offset!");

// ScriptStruct FortniteAI.FortAIEncounterRift
// 0x0030 (0x0030 - 0x0000)
struct FFortAIEncounterRift final
{
public:
	int32                                         QueryID;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RiftLocation;                                      // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABuildingRift*                          RiftActor;                                         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TStructCycleFixup<struct FFortRiftReservationHandle, 0x0004, 0x04> RiftReservationHandle;                             // 0x0028(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAIEncounterRift) == 0x000008, "Wrong alignment on FFortAIEncounterRift");
static_assert(sizeof(FFortAIEncounterRift) == 0x000030, "Wrong size on FFortAIEncounterRift");
static_assert(offsetof(FFortAIEncounterRift, QueryID) == 0x000000, "Member 'FFortAIEncounterRift::QueryID' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterRift, RiftLocation) == 0x000008, "Member 'FFortAIEncounterRift::RiftLocation' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterRift, RiftActor) == 0x000020, "Member 'FFortAIEncounterRift::RiftActor' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterRift, RiftReservationHandle) == 0x000028, "Member 'FFortAIEncounterRift::RiftReservationHandle' has a wrong offset!");

// ScriptStruct FortniteAI.FortAIEncounterSpawnArea
// 0x0058 (0x0058 - 0x0000)
struct FFortAIEncounterSpawnArea final
{
public:
	TArray<struct FEncounterEnvironmentQueryInstance> QueryInstances;                                    // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortAIEncounterRift>           PendingRifts;                                      // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortAIEncounterRift>           Rifts;                                             // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        UsedRiftLocations;                                 // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UFortPathCostEstimator*>         PathEstimators;                                    // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIsActive;                                         // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsingFallbackQuery;                               // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortEncounterSpawnLocationManagementMode     SpawnLocationManagementMode;                       // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53[0x5];                                       // 0x0053(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAIEncounterSpawnArea) == 0x000008, "Wrong alignment on FFortAIEncounterSpawnArea");
static_assert(sizeof(FFortAIEncounterSpawnArea) == 0x000058, "Wrong size on FFortAIEncounterSpawnArea");
static_assert(offsetof(FFortAIEncounterSpawnArea, QueryInstances) == 0x000000, "Member 'FFortAIEncounterSpawnArea::QueryInstances' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnArea, PendingRifts) == 0x000010, "Member 'FFortAIEncounterSpawnArea::PendingRifts' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnArea, Rifts) == 0x000020, "Member 'FFortAIEncounterSpawnArea::Rifts' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnArea, UsedRiftLocations) == 0x000030, "Member 'FFortAIEncounterSpawnArea::UsedRiftLocations' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnArea, PathEstimators) == 0x000040, "Member 'FFortAIEncounterSpawnArea::PathEstimators' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnArea, bIsActive) == 0x000050, "Member 'FFortAIEncounterSpawnArea::bIsActive' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnArea, bUsingFallbackQuery) == 0x000051, "Member 'FFortAIEncounterSpawnArea::bUsingFallbackQuery' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnArea, SpawnLocationManagementMode) == 0x000052, "Member 'FFortAIEncounterSpawnArea::SpawnLocationManagementMode' has a wrong offset!");

// ScriptStruct FortniteAI.FortAIEncounterRiftManagerInitializationData
// 0x0128 (0x0128 - 0x0000)
struct FFortAIEncounterRiftManagerInitializationData final
{
public:
	class UFortAIEncounterInfo*                   EncounterInfo;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TStructCycleFixup<struct FFortEncounterSettings, 0x00B8, 0x08> EncounterSettings;                                 // 0x0008(0x00B8)(NativeAccessSpecifierPublic)
	TStructCycleFixup<struct FEncounterEnvironmentQueryInfo, 0x0028, 0x08> CurrentEnvironmentQueryInfo;                       // 0x00C0(0x0028)(NativeAccessSpecifierPublic)
	TStructCycleFixup<struct FEncounterEnvironmentQueryInfo, 0x0028, 0x08> FallbackEnvironmentQueryInfo;                      // 0x00E8(0x0028)(NativeAccessSpecifierPublic)
	TSubclassOf<class ABuildingRift>              RiftClassTemplate;                                 // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumRiftsToUse;                                     // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinRiftsToUse;                                     // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpdateIntervalTimeSeconds;                         // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAIEncounterRiftManagerInitializationData) == 0x000008, "Wrong alignment on FFortAIEncounterRiftManagerInitializationData");
static_assert(sizeof(FFortAIEncounterRiftManagerInitializationData) == 0x000128, "Wrong size on FFortAIEncounterRiftManagerInitializationData");
static_assert(offsetof(FFortAIEncounterRiftManagerInitializationData, EncounterInfo) == 0x000000, "Member 'FFortAIEncounterRiftManagerInitializationData::EncounterInfo' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterRiftManagerInitializationData, EncounterSettings) == 0x000008, "Member 'FFortAIEncounterRiftManagerInitializationData::EncounterSettings' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterRiftManagerInitializationData, CurrentEnvironmentQueryInfo) == 0x0000C0, "Member 'FFortAIEncounterRiftManagerInitializationData::CurrentEnvironmentQueryInfo' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterRiftManagerInitializationData, FallbackEnvironmentQueryInfo) == 0x0000E8, "Member 'FFortAIEncounterRiftManagerInitializationData::FallbackEnvironmentQueryInfo' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterRiftManagerInitializationData, RiftClassTemplate) == 0x000110, "Member 'FFortAIEncounterRiftManagerInitializationData::RiftClassTemplate' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterRiftManagerInitializationData, NumRiftsToUse) == 0x000118, "Member 'FFortAIEncounterRiftManagerInitializationData::NumRiftsToUse' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterRiftManagerInitializationData, MinRiftsToUse) == 0x00011C, "Member 'FFortAIEncounterRiftManagerInitializationData::MinRiftsToUse' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterRiftManagerInitializationData, UpdateIntervalTimeSeconds) == 0x000120, "Member 'FFortAIEncounterRiftManagerInitializationData::UpdateIntervalTimeSeconds' has a wrong offset!");

// ScriptStruct FortniteAI.FortAIEncounterQueryDirectionTracker
// 0x0048 (0x0048 - 0x0000)
struct FFortAIEncounterQueryDirectionTracker final
{
public:
	bool                                          bHasTriedPreviousDirections;                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EFortEncounterDirection>               PreviousQueryDirections;                           // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EFortEncounterDirection>               ChosenDirections;                                  // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EFortEncounterDirection>               FailedDirections;                                  // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EFortEncounterDirection>               AvailableDirections;                               // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIEncounterQueryDirectionTracker) == 0x000008, "Wrong alignment on FFortAIEncounterQueryDirectionTracker");
static_assert(sizeof(FFortAIEncounterQueryDirectionTracker) == 0x000048, "Wrong size on FFortAIEncounterQueryDirectionTracker");
static_assert(offsetof(FFortAIEncounterQueryDirectionTracker, bHasTriedPreviousDirections) == 0x000000, "Member 'FFortAIEncounterQueryDirectionTracker::bHasTriedPreviousDirections' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterQueryDirectionTracker, PreviousQueryDirections) == 0x000008, "Member 'FFortAIEncounterQueryDirectionTracker::PreviousQueryDirections' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterQueryDirectionTracker, ChosenDirections) == 0x000018, "Member 'FFortAIEncounterQueryDirectionTracker::ChosenDirections' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterQueryDirectionTracker, FailedDirections) == 0x000028, "Member 'FFortAIEncounterQueryDirectionTracker::FailedDirections' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterQueryDirectionTracker, AvailableDirections) == 0x000038, "Member 'FFortAIEncounterQueryDirectionTracker::AvailableDirections' has a wrong offset!");

// ScriptStruct FortniteAI.FortAIGoalInfo
// 0x0028 (0x0028 - 0x0000)
struct FFortAIGoalInfo
{
public:
	TWeakObjectPtr<class AActor>                  Actor;                                             // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                Location;                                          // 0x0008(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bActorAlwaysPerceived;                             // 0x0020(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAIGoalInfo) == 0x000008, "Wrong alignment on FFortAIGoalInfo");
static_assert(sizeof(FFortAIGoalInfo) == 0x000028, "Wrong size on FFortAIGoalInfo");
static_assert(offsetof(FFortAIGoalInfo, Actor) == 0x000000, "Member 'FFortAIGoalInfo::Actor' has a wrong offset!");
static_assert(offsetof(FFortAIGoalInfo, Location) == 0x000008, "Member 'FFortAIGoalInfo::Location' has a wrong offset!");
static_assert(offsetof(FFortAIGoalInfo, bActorAlwaysPerceived) == 0x000020, "Member 'FFortAIGoalInfo::bActorAlwaysPerceived' has a wrong offset!");

// ScriptStruct FortniteAI.FortAIGoal
// 0x0010 (0x0038 - 0x0028)
struct FFortAIGoal final : public FFortAIGoalInfo
{
public:
	TArray<class UAIGoalComponent*>               GoalComponentsAssignedToGoal;                      // 0x0028(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortAIGoal) == 0x000008, "Wrong alignment on FFortAIGoal");
static_assert(sizeof(FFortAIGoal) == 0x000038, "Wrong size on FFortAIGoal");
static_assert(offsetof(FFortAIGoal, GoalComponentsAssignedToGoal) == 0x000028, "Member 'FFortAIGoal::GoalComponentsAssignedToGoal' has a wrong offset!");

// ScriptStruct FortniteAI.AIDiscouragedGoalTimer
// 0x0038 (0x0038 - 0x0000)
struct FAIDiscouragedGoalTimer final
{
public:
	struct FFortAIGoalInfo                        DiscouragedGoalInfo;                               // 0x0000(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	double                                        ExpirationTime;                                    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        NumberOfTimesMarkedForDiscouragement;              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIDiscouragedGoalTimer) == 0x000008, "Wrong alignment on FAIDiscouragedGoalTimer");
static_assert(sizeof(FAIDiscouragedGoalTimer) == 0x000038, "Wrong size on FAIDiscouragedGoalTimer");
static_assert(offsetof(FAIDiscouragedGoalTimer, DiscouragedGoalInfo) == 0x000000, "Member 'FAIDiscouragedGoalTimer::DiscouragedGoalInfo' has a wrong offset!");
static_assert(offsetof(FAIDiscouragedGoalTimer, ExpirationTime) == 0x000028, "Member 'FAIDiscouragedGoalTimer::ExpirationTime' has a wrong offset!");
static_assert(offsetof(FAIDiscouragedGoalTimer, NumberOfTimesMarkedForDiscouragement) == 0x000030, "Member 'FAIDiscouragedGoalTimer::NumberOfTimesMarkedForDiscouragement' has a wrong offset!");

// ScriptStruct FortniteAI.AIAssignmentInfo
// 0x00A8 (0x00A8 - 0x0000)
struct FAIAssignmentInfo final
{
public:
	TWeakObjectPtr<class UFortAIAssignment>       CurrentAssignment;                                 // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFortAIGoalInfo                        CurrentGoal;                                       // 0x0008(0x0028)(NoDestructor, NativeAccessSpecifierPrivate)
	float                                         TimeCurrentGoalWasChosen;                          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TimeExitedLastAssignmentOfType[0x4];               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UFortAIAssignment>       PreviousAssignment;                                // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortAIGoalInfo                        PreviousGoal;                                      // 0x0050(0x0028)(NoDestructor, NativeAccessSpecifierPrivate)
	bool                                          bWaitingForQueryResponse;                          // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bSuppressGoalUpdates;                              // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bReportEnemyGoalSelection;                         // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7B[0x2D];                                      // 0x007B(0x002D)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIAssignmentInfo) == 0x000008, "Wrong alignment on FAIAssignmentInfo");
static_assert(sizeof(FAIAssignmentInfo) == 0x0000A8, "Wrong size on FAIAssignmentInfo");
static_assert(offsetof(FAIAssignmentInfo, CurrentAssignment) == 0x000000, "Member 'FAIAssignmentInfo::CurrentAssignment' has a wrong offset!");
static_assert(offsetof(FAIAssignmentInfo, CurrentGoal) == 0x000008, "Member 'FAIAssignmentInfo::CurrentGoal' has a wrong offset!");
static_assert(offsetof(FAIAssignmentInfo, TimeCurrentGoalWasChosen) == 0x000030, "Member 'FAIAssignmentInfo::TimeCurrentGoalWasChosen' has a wrong offset!");
static_assert(offsetof(FAIAssignmentInfo, TimeExitedLastAssignmentOfType) == 0x000034, "Member 'FAIAssignmentInfo::TimeExitedLastAssignmentOfType' has a wrong offset!");
static_assert(offsetof(FAIAssignmentInfo, PreviousAssignment) == 0x000044, "Member 'FAIAssignmentInfo::PreviousAssignment' has a wrong offset!");
static_assert(offsetof(FAIAssignmentInfo, PreviousGoal) == 0x000050, "Member 'FAIAssignmentInfo::PreviousGoal' has a wrong offset!");
static_assert(offsetof(FAIAssignmentInfo, bWaitingForQueryResponse) == 0x000078, "Member 'FAIAssignmentInfo::bWaitingForQueryResponse' has a wrong offset!");
static_assert(offsetof(FAIAssignmentInfo, bSuppressGoalUpdates) == 0x000079, "Member 'FAIAssignmentInfo::bSuppressGoalUpdates' has a wrong offset!");
static_assert(offsetof(FAIAssignmentInfo, bReportEnemyGoalSelection) == 0x00007A, "Member 'FAIAssignmentInfo::bReportEnemyGoalSelection' has a wrong offset!");

// ScriptStruct FortniteAI.GoalSelectionCriteria
// 0x0008 (0x0008 - 0x0000)
struct FGoalSelectionCriteria final
{
public:
	class UEnvQuery*                              GoalSelectionQuery;                                // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGoalSelectionCriteria) == 0x000008, "Wrong alignment on FGoalSelectionCriteria");
static_assert(sizeof(FGoalSelectionCriteria) == 0x000008, "Wrong size on FGoalSelectionCriteria");
static_assert(offsetof(FGoalSelectionCriteria, GoalSelectionQuery) == 0x000000, "Member 'FGoalSelectionCriteria::GoalSelectionQuery' has a wrong offset!");

// ScriptStruct FortniteAI.EncounterGoalSelectionTableEntry
// 0x0028 (0x0028 - 0x0000)
struct FEncounterGoalSelectionTableEntry final
{
public:
	struct FGameplayTagContainer                  RequiredGameplayTags;                              // 0x0000(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FGoalSelectionCriteria                 GoalSelectionCriteria;                             // 0x0020(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterGoalSelectionTableEntry) == 0x000008, "Wrong alignment on FEncounterGoalSelectionTableEntry");
static_assert(sizeof(FEncounterGoalSelectionTableEntry) == 0x000028, "Wrong size on FEncounterGoalSelectionTableEntry");
static_assert(offsetof(FEncounterGoalSelectionTableEntry, RequiredGameplayTags) == 0x000000, "Member 'FEncounterGoalSelectionTableEntry::RequiredGameplayTags' has a wrong offset!");
static_assert(offsetof(FEncounterGoalSelectionTableEntry, GoalSelectionCriteria) == 0x000020, "Member 'FEncounterGoalSelectionTableEntry::GoalSelectionCriteria' has a wrong offset!");

// ScriptStruct FortniteAI.PawnGoalSelectionCriteria
// 0x0050 (0x0050 - 0x0000)
struct FPawnGoalSelectionCriteria final
{
public:
	struct FGameplayTagContainer                  IncludeEnemiesWithTags;                            // 0x0000(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ExcludeEnemiesWithTags;                            // 0x0020(0x0020)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FGoalSelectionCriteria>         GoalSelectionCriteria;                             // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPawnGoalSelectionCriteria) == 0x000008, "Wrong alignment on FPawnGoalSelectionCriteria");
static_assert(sizeof(FPawnGoalSelectionCriteria) == 0x000050, "Wrong size on FPawnGoalSelectionCriteria");
static_assert(offsetof(FPawnGoalSelectionCriteria, IncludeEnemiesWithTags) == 0x000000, "Member 'FPawnGoalSelectionCriteria::IncludeEnemiesWithTags' has a wrong offset!");
static_assert(offsetof(FPawnGoalSelectionCriteria, ExcludeEnemiesWithTags) == 0x000020, "Member 'FPawnGoalSelectionCriteria::ExcludeEnemiesWithTags' has a wrong offset!");
static_assert(offsetof(FPawnGoalSelectionCriteria, GoalSelectionCriteria) == 0x000040, "Member 'FPawnGoalSelectionCriteria::GoalSelectionCriteria' has a wrong offset!");

// ScriptStruct FortniteAI.PawnGoalSelectionTableEntry
// 0x0070 (0x0070 - 0x0000)
struct FPawnGoalSelectionTableEntry final
{
public:
	struct FGameplayTagContainer                  RequiredGameplayTags;                              // 0x0000(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FPawnGoalSelectionCriteria             PawnGoalSelectionCriteria;                         // 0x0020(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPawnGoalSelectionTableEntry) == 0x000008, "Wrong alignment on FPawnGoalSelectionTableEntry");
static_assert(sizeof(FPawnGoalSelectionTableEntry) == 0x000070, "Wrong size on FPawnGoalSelectionTableEntry");
static_assert(offsetof(FPawnGoalSelectionTableEntry, RequiredGameplayTags) == 0x000000, "Member 'FPawnGoalSelectionTableEntry::RequiredGameplayTags' has a wrong offset!");
static_assert(offsetof(FPawnGoalSelectionTableEntry, PawnGoalSelectionCriteria) == 0x000020, "Member 'FPawnGoalSelectionTableEntry::PawnGoalSelectionCriteria' has a wrong offset!");

// ScriptStruct FortniteAI.AutoAcquireSlot
// 0x0018 (0x0028 - 0x0010)
struct FAutoAcquireSlot final : public FAIHotSpotSlotInfo
{
public:
	uint8                                         Pad_10[0x18];                                      // 0x0010(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAutoAcquireSlot) == 0x000008, "Wrong alignment on FAutoAcquireSlot");
static_assert(sizeof(FAutoAcquireSlot) == 0x000028, "Wrong size on FAutoAcquireSlot");

// ScriptStruct FortniteAI.AISpawnCountInfo
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FAISpawnCountInfo final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAISpawnCountInfo) == 0x000008, "Wrong alignment on FAISpawnCountInfo");
static_assert(sizeof(FAISpawnCountInfo) == 0x000020, "Wrong size on FAISpawnCountInfo");

// ScriptStruct FortniteAI.FortAIPawnMaterialDefinition
// 0x0030 (0x0030 - 0x0000)
struct FFortAIPawnMaterialDefinition final
{
public:
	TSoftObjectPtr<class UMaterialInterface>      Material;                                          // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequireDynamicInstance;                           // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAIPawnMaterialDefinition) == 0x000008, "Wrong alignment on FFortAIPawnMaterialDefinition");
static_assert(sizeof(FFortAIPawnMaterialDefinition) == 0x000030, "Wrong size on FFortAIPawnMaterialDefinition");
static_assert(offsetof(FFortAIPawnMaterialDefinition, Material) == 0x000000, "Member 'FFortAIPawnMaterialDefinition::Material' has a wrong offset!");
static_assert(offsetof(FFortAIPawnMaterialDefinition, bRequireDynamicInstance) == 0x000028, "Member 'FFortAIPawnMaterialDefinition::bRequireDynamicInstance' has a wrong offset!");

// ScriptStruct FortniteAI.FortAIPawnVariantDefinition
// 0x0068 (0x0068 - 0x0000)
struct FFortAIPawnVariantDefinition final
{
public:
	TSubclassOf<class AFortAIPawn>                PawnClass;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   VariantWeightCurve;                                // 0x0008(0x0010)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentWeight;                                     // 0x0018(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      RequiredTagsQuery;                                 // 0x0020(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIPawnVariantDefinition) == 0x000008, "Wrong alignment on FFortAIPawnVariantDefinition");
static_assert(sizeof(FFortAIPawnVariantDefinition) == 0x000068, "Wrong size on FFortAIPawnVariantDefinition");
static_assert(offsetof(FFortAIPawnVariantDefinition, PawnClass) == 0x000000, "Member 'FFortAIPawnVariantDefinition::PawnClass' has a wrong offset!");
static_assert(offsetof(FFortAIPawnVariantDefinition, VariantWeightCurve) == 0x000008, "Member 'FFortAIPawnVariantDefinition::VariantWeightCurve' has a wrong offset!");
static_assert(offsetof(FFortAIPawnVariantDefinition, CurrentWeight) == 0x000018, "Member 'FFortAIPawnVariantDefinition::CurrentWeight' has a wrong offset!");
static_assert(offsetof(FFortAIPawnVariantDefinition, RequiredTagsQuery) == 0x000020, "Member 'FFortAIPawnVariantDefinition::RequiredTagsQuery' has a wrong offset!");

// ScriptStruct FortniteAI.FortVariantSpawnPoints
// 0x0008 (0x0010 - 0x0008)
struct FFortVariantSpawnPoints final : public FTableRowBase
{
public:
	int32                                         BudgetPoints;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortVariantSpawnPoints) == 0x000008, "Wrong alignment on FFortVariantSpawnPoints");
static_assert(sizeof(FFortVariantSpawnPoints) == 0x000010, "Wrong size on FFortVariantSpawnPoints");
static_assert(offsetof(FFortVariantSpawnPoints, BudgetPoints) == 0x000008, "Member 'FFortVariantSpawnPoints::BudgetPoints' has a wrong offset!");

// ScriptStruct FortniteAI.FortAIRuntimePerkInfo
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FFortAIRuntimePerkInfo
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAIRuntimePerkInfo) == 0x000008, "Wrong alignment on FFortAIRuntimePerkInfo");
static_assert(sizeof(FFortAIRuntimePerkInfo) == 0x000040, "Wrong size on FFortAIRuntimePerkInfo");

// ScriptStruct FortniteAI.SpawnGroupEnemy
// 0x0010 (0x0010 - 0x0000)
struct FSpawnGroupEnemy final
{
public:
	TSubclassOf<class UFortAIPawnVariant>         EnemyVariantClass;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideVariantSpawnPointValue;                   // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpawnValue;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnGroupEnemy) == 0x000008, "Wrong alignment on FSpawnGroupEnemy");
static_assert(sizeof(FSpawnGroupEnemy) == 0x000010, "Wrong size on FSpawnGroupEnemy");
static_assert(offsetof(FSpawnGroupEnemy, EnemyVariantClass) == 0x000000, "Member 'FSpawnGroupEnemy::EnemyVariantClass' has a wrong offset!");
static_assert(offsetof(FSpawnGroupEnemy, bOverrideVariantSpawnPointValue) == 0x000008, "Member 'FSpawnGroupEnemy::bOverrideVariantSpawnPointValue' has a wrong offset!");
static_assert(offsetof(FSpawnGroupEnemy, SpawnValue) == 0x00000C, "Member 'FSpawnGroupEnemy::SpawnValue' has a wrong offset!");

// ScriptStruct FortniteAI.FortSpawnGroupEncounterTypeData
// 0x0040 (0x0040 - 0x0000)
struct FFortSpawnGroupEncounterTypeData final
{
public:
	struct FGameplayTagContainer                  EncounterTypeTags;                                 // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   MaxGroupCategoryPopulationDensityCurve;            // 0x0020(0x0010)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   RespawnDelayCurve;                                 // 0x0030(0x0010)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSpawnGroupEncounterTypeData) == 0x000008, "Wrong alignment on FFortSpawnGroupEncounterTypeData");
static_assert(sizeof(FFortSpawnGroupEncounterTypeData) == 0x000040, "Wrong size on FFortSpawnGroupEncounterTypeData");
static_assert(offsetof(FFortSpawnGroupEncounterTypeData, EncounterTypeTags) == 0x000000, "Member 'FFortSpawnGroupEncounterTypeData::EncounterTypeTags' has a wrong offset!");
static_assert(offsetof(FFortSpawnGroupEncounterTypeData, MaxGroupCategoryPopulationDensityCurve) == 0x000020, "Member 'FFortSpawnGroupEncounterTypeData::MaxGroupCategoryPopulationDensityCurve' has a wrong offset!");
static_assert(offsetof(FFortSpawnGroupEncounterTypeData, RespawnDelayCurve) == 0x000030, "Member 'FFortSpawnGroupEncounterTypeData::RespawnDelayCurve' has a wrong offset!");

// ScriptStruct FortniteAI.FortAIPawnUpgrade
// 0x0058 (0x0058 - 0x0000)
struct FFortAIPawnUpgrade final
{
public:
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0000(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortAIPawnUpgradeData>         PawnUpgradeDataPerPlayerCount;                     // 0x0048(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIPawnUpgrade) == 0x000008, "Wrong alignment on FFortAIPawnUpgrade");
static_assert(sizeof(FFortAIPawnUpgrade) == 0x000058, "Wrong size on FFortAIPawnUpgrade");
static_assert(offsetof(FFortAIPawnUpgrade, TagQuery) == 0x000000, "Member 'FFortAIPawnUpgrade::TagQuery' has a wrong offset!");
static_assert(offsetof(FFortAIPawnUpgrade, PawnUpgradeDataPerPlayerCount) == 0x000048, "Member 'FFortAIPawnUpgrade::PawnUpgradeDataPerPlayerCount' has a wrong offset!");

// ScriptStruct FortniteAI.FortMoveConfig
// 0x0038 (0x0038 - 0x0000)
struct FFortMoveConfig final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 FocusTarget;                                       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AFortPawn>                  PushPawnClassOnBump;                               // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMoveConfig) == 0x000008, "Wrong alignment on FFortMoveConfig");
static_assert(sizeof(FFortMoveConfig) == 0x000038, "Wrong size on FFortMoveConfig");
static_assert(offsetof(FFortMoveConfig, FocusTarget) == 0x000028, "Member 'FFortMoveConfig::FocusTarget' has a wrong offset!");
static_assert(offsetof(FFortMoveConfig, PushPawnClassOnBump) == 0x000030, "Member 'FFortMoveConfig::PushPawnClassOnBump' has a wrong offset!");

// ScriptStruct FortniteAI.FortAIAssignmentIdentifier
// 0x0030 (0x0030 - 0x0000)
struct FFortAIAssignmentIdentifier final
{
public:
	EAssignmentType                               AssignmentType;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  AssignmentGameplayTags;                            // 0x0008(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EFortTeam                                     AssignmentTeam;                                    // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAIAssignmentIdentifier) == 0x000008, "Wrong alignment on FFortAIAssignmentIdentifier");
static_assert(sizeof(FFortAIAssignmentIdentifier) == 0x000030, "Wrong size on FFortAIAssignmentIdentifier");
static_assert(offsetof(FFortAIAssignmentIdentifier, AssignmentType) == 0x000000, "Member 'FFortAIAssignmentIdentifier::AssignmentType' has a wrong offset!");
static_assert(offsetof(FFortAIAssignmentIdentifier, AssignmentGameplayTags) == 0x000008, "Member 'FFortAIAssignmentIdentifier::AssignmentGameplayTags' has a wrong offset!");
static_assert(offsetof(FFortAIAssignmentIdentifier, AssignmentTeam) == 0x000028, "Member 'FFortAIAssignmentIdentifier::AssignmentTeam' has a wrong offset!");

// ScriptStruct FortniteAI.BuildingActorNavArea
// 0x0004 (0x0004 - 0x0000)
struct FBuildingActorNavArea final
{
public:
	int32                                         AreaBits;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildingActorNavArea) == 0x000004, "Wrong alignment on FBuildingActorNavArea");
static_assert(sizeof(FBuildingActorNavArea) == 0x000004, "Wrong size on FBuildingActorNavArea");
static_assert(offsetof(FBuildingActorNavArea, AreaBits) == 0x000000, "Member 'FBuildingActorNavArea::AreaBits' has a wrong offset!");

// ScriptStruct FortniteAI.FortNavLinkPattern
// 0x0008 (0x0008 - 0x0000)
struct FFortNavLinkPattern final
{
public:
	int32                                         PatternBits;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WildcardBits;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortNavLinkPattern) == 0x000004, "Wrong alignment on FFortNavLinkPattern");
static_assert(sizeof(FFortNavLinkPattern) == 0x000008, "Wrong size on FFortNavLinkPattern");
static_assert(offsetof(FFortNavLinkPattern, PatternBits) == 0x000000, "Member 'FFortNavLinkPattern::PatternBits' has a wrong offset!");
static_assert(offsetof(FFortNavLinkPattern, WildcardBits) == 0x000004, "Member 'FFortNavLinkPattern::WildcardBits' has a wrong offset!");

// ScriptStruct FortniteAI.AIHotSpotUseInfo
// 0x0008 (0x0018 - 0x0010)
struct FAIHotSpotUseInfo final : public FAIHotSpotSlotInfo
{
public:
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIHotSpotUseInfo) == 0x000008, "Wrong alignment on FAIHotSpotUseInfo");
static_assert(sizeof(FAIHotSpotUseInfo) == 0x000018, "Wrong size on FAIHotSpotUseInfo");

// ScriptStruct FortniteAI.DistanceToTargetComparison
// 0x0038 (0x0038 - 0x0000)
struct FDistanceToTargetComparison final
{
public:
	bool                                          bUseOverriddenValue;                               // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverriddenValue;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  DistanceDataTags;                                  // 0x0008(0x0020)(Edit, NativeAccessSpecifierPublic)
	bool                                          bUseAddedOffset;                                   // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AddedOffset;                                       // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EArithmeticKeyOperation                       Operator;                                          // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETargetDistanceComparisonType                 ComparisonType;                                    // 0x0031(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDistanceToTargetComparison) == 0x000008, "Wrong alignment on FDistanceToTargetComparison");
static_assert(sizeof(FDistanceToTargetComparison) == 0x000038, "Wrong size on FDistanceToTargetComparison");
static_assert(offsetof(FDistanceToTargetComparison, bUseOverriddenValue) == 0x000000, "Member 'FDistanceToTargetComparison::bUseOverriddenValue' has a wrong offset!");
static_assert(offsetof(FDistanceToTargetComparison, OverriddenValue) == 0x000004, "Member 'FDistanceToTargetComparison::OverriddenValue' has a wrong offset!");
static_assert(offsetof(FDistanceToTargetComparison, DistanceDataTags) == 0x000008, "Member 'FDistanceToTargetComparison::DistanceDataTags' has a wrong offset!");
static_assert(offsetof(FDistanceToTargetComparison, bUseAddedOffset) == 0x000028, "Member 'FDistanceToTargetComparison::bUseAddedOffset' has a wrong offset!");
static_assert(offsetof(FDistanceToTargetComparison, AddedOffset) == 0x00002C, "Member 'FDistanceToTargetComparison::AddedOffset' has a wrong offset!");
static_assert(offsetof(FDistanceToTargetComparison, Operator) == 0x000030, "Member 'FDistanceToTargetComparison::Operator' has a wrong offset!");
static_assert(offsetof(FDistanceToTargetComparison, ComparisonType) == 0x000031, "Member 'FDistanceToTargetComparison::ComparisonType' has a wrong offset!");

// ScriptStruct FortniteAI.AIScalableFloat
// 0x0038 (0x0038 - 0x0000)
struct FAIScalableFloat final
{
public:
	struct FScalableFloat                         ScalableFloat;                                     // 0x0000(0x0028)(Edit, NativeAccessSpecifierPrivate)
	EAIScalableFloatScalingType                   ScalingType;                                       // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C[0xC];                                       // 0x002C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIScalableFloat) == 0x000008, "Wrong alignment on FAIScalableFloat");
static_assert(sizeof(FAIScalableFloat) == 0x000038, "Wrong size on FAIScalableFloat");
static_assert(offsetof(FAIScalableFloat, ScalableFloat) == 0x000000, "Member 'FAIScalableFloat::ScalableFloat' has a wrong offset!");
static_assert(offsetof(FAIScalableFloat, ScalingType) == 0x000028, "Member 'FAIScalableFloat::ScalingType' has a wrong offset!");

// ScriptStruct FortniteAI.DigestedAimingCircleSettings
// 0x002C (0x002C - 0x0000)
struct FDigestedAimingCircleSettings final
{
public:
	bool                                          bUseAimingCircle;                                  // 0x0000(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CircleCenterOffsetZ;                               // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinCircleOpeningAngleVertical;                     // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxCircleOpeningAngleVertical;                     // 0x000C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinCircleOpeningAngleHorizontal;                   // 0x0010(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxCircleOpeningAngleHorizontal;                   // 0x0014(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinCursorRotationSpeed;                            // 0x0018(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxCursorRotationSpeed;                            // 0x001C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinCursorUpdateInterval;                           // 0x0020(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxCursorUpdateInterval;                           // 0x0024(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ShrinkTimeBetweenHits;                             // 0x0028(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FDigestedAimingCircleSettings) == 0x000004, "Wrong alignment on FDigestedAimingCircleSettings");
static_assert(sizeof(FDigestedAimingCircleSettings) == 0x00002C, "Wrong size on FDigestedAimingCircleSettings");
static_assert(offsetof(FDigestedAimingCircleSettings, bUseAimingCircle) == 0x000000, "Member 'FDigestedAimingCircleSettings::bUseAimingCircle' has a wrong offset!");
static_assert(offsetof(FDigestedAimingCircleSettings, CircleCenterOffsetZ) == 0x000004, "Member 'FDigestedAimingCircleSettings::CircleCenterOffsetZ' has a wrong offset!");
static_assert(offsetof(FDigestedAimingCircleSettings, MinCircleOpeningAngleVertical) == 0x000008, "Member 'FDigestedAimingCircleSettings::MinCircleOpeningAngleVertical' has a wrong offset!");
static_assert(offsetof(FDigestedAimingCircleSettings, MaxCircleOpeningAngleVertical) == 0x00000C, "Member 'FDigestedAimingCircleSettings::MaxCircleOpeningAngleVertical' has a wrong offset!");
static_assert(offsetof(FDigestedAimingCircleSettings, MinCircleOpeningAngleHorizontal) == 0x000010, "Member 'FDigestedAimingCircleSettings::MinCircleOpeningAngleHorizontal' has a wrong offset!");
static_assert(offsetof(FDigestedAimingCircleSettings, MaxCircleOpeningAngleHorizontal) == 0x000014, "Member 'FDigestedAimingCircleSettings::MaxCircleOpeningAngleHorizontal' has a wrong offset!");
static_assert(offsetof(FDigestedAimingCircleSettings, MinCursorRotationSpeed) == 0x000018, "Member 'FDigestedAimingCircleSettings::MinCursorRotationSpeed' has a wrong offset!");
static_assert(offsetof(FDigestedAimingCircleSettings, MaxCursorRotationSpeed) == 0x00001C, "Member 'FDigestedAimingCircleSettings::MaxCursorRotationSpeed' has a wrong offset!");
static_assert(offsetof(FDigestedAimingCircleSettings, MinCursorUpdateInterval) == 0x000020, "Member 'FDigestedAimingCircleSettings::MinCursorUpdateInterval' has a wrong offset!");
static_assert(offsetof(FDigestedAimingCircleSettings, MaxCursorUpdateInterval) == 0x000024, "Member 'FDigestedAimingCircleSettings::MaxCursorUpdateInterval' has a wrong offset!");
static_assert(offsetof(FDigestedAimingCircleSettings, ShrinkTimeBetweenHits) == 0x000028, "Member 'FDigestedAimingCircleSettings::ShrinkTimeBetweenHits' has a wrong offset!");

// ScriptStruct FortniteAI.TargetBasedAccuracy
// 0x0118 (0x0118 - 0x0000)
struct FTargetBasedAccuracy final
{
public:
	struct FScalableFloat                         AimTrackingOffsetErrorMultiplier;                  // 0x0000(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         AimTrackingHeightOffsetErrorMultiplier;            // 0x0028(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         AimTrackingDistanceErrorMultiplier;                // 0x0050(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         AimTrackingReactionTimeMultiplier;                 // 0x0078(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         AimTrackingInterpTimeMultiplier;                   // 0x00A0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         AimTrackingInAirVelocityThresholdMultiplier;       // 0x00C8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         AimTrackinginAirHeightDataThresholdMultiplier;     // 0x00F0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FTargetBasedAccuracy) == 0x000008, "Wrong alignment on FTargetBasedAccuracy");
static_assert(sizeof(FTargetBasedAccuracy) == 0x000118, "Wrong size on FTargetBasedAccuracy");
static_assert(offsetof(FTargetBasedAccuracy, AimTrackingOffsetErrorMultiplier) == 0x000000, "Member 'FTargetBasedAccuracy::AimTrackingOffsetErrorMultiplier' has a wrong offset!");
static_assert(offsetof(FTargetBasedAccuracy, AimTrackingHeightOffsetErrorMultiplier) == 0x000028, "Member 'FTargetBasedAccuracy::AimTrackingHeightOffsetErrorMultiplier' has a wrong offset!");
static_assert(offsetof(FTargetBasedAccuracy, AimTrackingDistanceErrorMultiplier) == 0x000050, "Member 'FTargetBasedAccuracy::AimTrackingDistanceErrorMultiplier' has a wrong offset!");
static_assert(offsetof(FTargetBasedAccuracy, AimTrackingReactionTimeMultiplier) == 0x000078, "Member 'FTargetBasedAccuracy::AimTrackingReactionTimeMultiplier' has a wrong offset!");
static_assert(offsetof(FTargetBasedAccuracy, AimTrackingInterpTimeMultiplier) == 0x0000A0, "Member 'FTargetBasedAccuracy::AimTrackingInterpTimeMultiplier' has a wrong offset!");
static_assert(offsetof(FTargetBasedAccuracy, AimTrackingInAirVelocityThresholdMultiplier) == 0x0000C8, "Member 'FTargetBasedAccuracy::AimTrackingInAirVelocityThresholdMultiplier' has a wrong offset!");
static_assert(offsetof(FTargetBasedAccuracy, AimTrackinginAirHeightDataThresholdMultiplier) == 0x0000F0, "Member 'FTargetBasedAccuracy::AimTrackinginAirHeightDataThresholdMultiplier' has a wrong offset!");

// ScriptStruct FortniteAI.DigestedTargetBasedAccuracy
// 0x001C (0x001C - 0x0000)
struct FDigestedTargetBasedAccuracy final
{
public:
	float                                         AimTrackingOffsetErrorMultiplier;                  // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AimTrackingHeightOffsetErrorMultiplier;            // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AimTrackingDistanceErrorMultiplier;                // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AimTrackingReactionTimeMultiplier;                 // 0x000C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AimTrackingInterpTimeMultiplier;                   // 0x0010(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AimTrackingInAirVelocityThresholdMultiplier;       // 0x0014(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AimTrackinginAirHeightDataThresholdMultiplier;     // 0x0018(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FDigestedTargetBasedAccuracy) == 0x000004, "Wrong alignment on FDigestedTargetBasedAccuracy");
static_assert(sizeof(FDigestedTargetBasedAccuracy) == 0x00001C, "Wrong size on FDigestedTargetBasedAccuracy");
static_assert(offsetof(FDigestedTargetBasedAccuracy, AimTrackingOffsetErrorMultiplier) == 0x000000, "Member 'FDigestedTargetBasedAccuracy::AimTrackingOffsetErrorMultiplier' has a wrong offset!");
static_assert(offsetof(FDigestedTargetBasedAccuracy, AimTrackingHeightOffsetErrorMultiplier) == 0x000004, "Member 'FDigestedTargetBasedAccuracy::AimTrackingHeightOffsetErrorMultiplier' has a wrong offset!");
static_assert(offsetof(FDigestedTargetBasedAccuracy, AimTrackingDistanceErrorMultiplier) == 0x000008, "Member 'FDigestedTargetBasedAccuracy::AimTrackingDistanceErrorMultiplier' has a wrong offset!");
static_assert(offsetof(FDigestedTargetBasedAccuracy, AimTrackingReactionTimeMultiplier) == 0x00000C, "Member 'FDigestedTargetBasedAccuracy::AimTrackingReactionTimeMultiplier' has a wrong offset!");
static_assert(offsetof(FDigestedTargetBasedAccuracy, AimTrackingInterpTimeMultiplier) == 0x000010, "Member 'FDigestedTargetBasedAccuracy::AimTrackingInterpTimeMultiplier' has a wrong offset!");
static_assert(offsetof(FDigestedTargetBasedAccuracy, AimTrackingInAirVelocityThresholdMultiplier) == 0x000014, "Member 'FDigestedTargetBasedAccuracy::AimTrackingInAirVelocityThresholdMultiplier' has a wrong offset!");
static_assert(offsetof(FDigestedTargetBasedAccuracy, AimTrackinginAirHeightDataThresholdMultiplier) == 0x000018, "Member 'FDigestedTargetBasedAccuracy::AimTrackinginAirHeightDataThresholdMultiplier' has a wrong offset!");

// ScriptStruct FortniteAI.TargetBasedAccuracyCategory
// 0x0138 (0x0138 - 0x0000)
struct FTargetBasedAccuracyCategory final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FTargetBasedAccuracy                   TargetBasedAccuracy;                               // 0x0020(0x0118)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FTargetBasedAccuracyCategory) == 0x000008, "Wrong alignment on FTargetBasedAccuracyCategory");
static_assert(sizeof(FTargetBasedAccuracyCategory) == 0x000138, "Wrong size on FTargetBasedAccuracyCategory");
static_assert(offsetof(FTargetBasedAccuracyCategory, Tags) == 0x000000, "Member 'FTargetBasedAccuracyCategory::Tags' has a wrong offset!");
static_assert(offsetof(FTargetBasedAccuracyCategory, TargetBasedAccuracy) == 0x000020, "Member 'FTargetBasedAccuracyCategory::TargetBasedAccuracy' has a wrong offset!");

// ScriptStruct FortniteAI.DigestedTargetBasedAccuracyCategory
// 0x0040 (0x0040 - 0x0000)
struct FDigestedTargetBasedAccuracyCategory final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Transient, NativeAccessSpecifierPrivate)
	struct FDigestedTargetBasedAccuracy           TargetBasedAccuracy;                               // 0x0020(0x001C)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDigestedTargetBasedAccuracyCategory) == 0x000008, "Wrong alignment on FDigestedTargetBasedAccuracyCategory");
static_assert(sizeof(FDigestedTargetBasedAccuracyCategory) == 0x000040, "Wrong size on FDigestedTargetBasedAccuracyCategory");
static_assert(offsetof(FDigestedTargetBasedAccuracyCategory, Tags) == 0x000000, "Member 'FDigestedTargetBasedAccuracyCategory::Tags' has a wrong offset!");
static_assert(offsetof(FDigestedTargetBasedAccuracyCategory, TargetBasedAccuracy) == 0x000020, "Member 'FDigestedTargetBasedAccuracyCategory::TargetBasedAccuracy' has a wrong offset!");

// ScriptStruct FortniteAI.DigestedWeaponAccuracy
// 0x01E8 (0x01E8 - 0x0000)
struct FDigestedWeaponAccuracy final
{
public:
	struct FScalableFloat                         TrackingOffsetError;                               // 0x0000(0x0028)(Transient, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         TargetingTrackingOffsetError;                      // 0x0028(0x0028)(Transient, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         TrackingDistanceFarError;                          // 0x0050(0x0028)(Transient, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         TargetingTrackingDistanceFarError;                 // 0x0078(0x0028)(Transient, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         TrackingDistanceNearError;                         // 0x00A0(0x0028)(Transient, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         TargetingTrackingDistanceNearError;                // 0x00C8(0x0028)(Transient, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         TrackingDistanceNearErrorProbability;              // 0x00F0(0x0028)(Transient, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         TargetingActivationProbability;                    // 0x0118(0x0028)(Transient, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         FiringRestrictedToTargetingActive;                 // 0x0140(0x0028)(Transient, NativeAccessSpecifierPrivate)
	float                                         MinimumDistanceForAiming;                          // 0x0168(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MinimumDistanceForPawnAiming;                      // 0x016C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         IdealAttackRange;                                  // 0x0170(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TargetingIdealAttackRange;                         // 0x0174(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxAttackRange;                                    // 0x0178(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ChanceToAimAtTargetsFeet;                          // 0x017C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         ShouldUseProjectileArcForAiming;                   // 0x0180(0x0028)(Transient, NativeAccessSpecifierPrivate)
	bool                                          bKeepAimingOnSameSideWhileFiring;                  // 0x01A8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1A9[0x3];                                      // 0x01A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxTrackingHeightOffsetError;                      // 0x01AC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MinRotationInterpSpeed;                            // 0x01B0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxRotationInterpSpeed;                            // 0x01B4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bOverrideAimingCircleSettings;                     // 0x01B8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bConsiderProjectileTravelTime;                     // 0x01B9(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1BA[0x2];                                      // 0x01BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDigestedAimingCircleSettings          AimingCircleSettingsOverride;                      // 0x01BC(0x002C)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FDigestedWeaponAccuracy) == 0x000008, "Wrong alignment on FDigestedWeaponAccuracy");
static_assert(sizeof(FDigestedWeaponAccuracy) == 0x0001E8, "Wrong size on FDigestedWeaponAccuracy");
static_assert(offsetof(FDigestedWeaponAccuracy, TrackingOffsetError) == 0x000000, "Member 'FDigestedWeaponAccuracy::TrackingOffsetError' has a wrong offset!");
static_assert(offsetof(FDigestedWeaponAccuracy, TargetingTrackingOffsetError) == 0x000028, "Member 'FDigestedWeaponAccuracy::TargetingTrackingOffsetError' has a wrong offset!");
static_assert(offsetof(FDigestedWeaponAccuracy, TrackingDistanceFarError) == 0x000050, "Member 'FDigestedWeaponAccuracy::TrackingDistanceFarError' has a wrong offset!");
static_assert(offsetof(FDigestedWeaponAccuracy, TargetingTrackingDistanceFarError) == 0x000078, "Member 'FDigestedWeaponAccuracy::TargetingTrackingDistanceFarError' has a wrong offset!");
static_assert(offsetof(FDigestedWeaponAccuracy, TrackingDistanceNearError) == 0x0000A0, "Member 'FDigestedWeaponAccuracy::TrackingDistanceNearError' has a wrong offset!");
static_assert(offsetof(FDigestedWeaponAccuracy, TargetingTrackingDistanceNearError) == 0x0000C8, "Member 'FDigestedWeaponAccuracy::TargetingTrackingDistanceNearError' has a wrong offset!");
static_assert(offsetof(FDigestedWeaponAccuracy, TrackingDistanceNearErrorProbability) == 0x0000F0, "Member 'FDigestedWeaponAccuracy::TrackingDistanceNearErrorProbability' has a wrong offset!");
static_assert(offsetof(FDigestedWeaponAccuracy, TargetingActivationProbability) == 0x000118, "Member 'FDigestedWeaponAccuracy::TargetingActivationProbability' has a wrong offset!");
static_assert(offsetof(FDigestedWeaponAccuracy, FiringRestrictedToTargetingActive) == 0x000140, "Member 'FDigestedWeaponAccuracy::FiringRestrictedToTargetingActive' has a wrong offset!");
static_assert(offsetof(FDigestedWeaponAccuracy, MinimumDistanceForAiming) == 0x000168, "Member 'FDigestedWeaponAccuracy::MinimumDistanceForAiming' has a wrong offset!");
static_assert(offsetof(FDigestedWeaponAccuracy, MinimumDistanceForPawnAiming) == 0x00016C, "Member 'FDigestedWeaponAccuracy::MinimumDistanceForPawnAiming' has a wrong offset!");
static_assert(offsetof(FDigestedWeaponAccuracy, IdealAttackRange) == 0x000170, "Member 'FDigestedWeaponAccuracy::IdealAttackRange' has a wrong offset!");
static_assert(offsetof(FDigestedWeaponAccuracy, TargetingIdealAttackRange) == 0x000174, "Member 'FDigestedWeaponAccuracy::TargetingIdealAttackRange' has a wrong offset!");
static_assert(offsetof(FDigestedWeaponAccuracy, MaxAttackRange) == 0x000178, "Member 'FDigestedWeaponAccuracy::MaxAttackRange' has a wrong offset!");
static_assert(offsetof(FDigestedWeaponAccuracy, ChanceToAimAtTargetsFeet) == 0x00017C, "Member 'FDigestedWeaponAccuracy::ChanceToAimAtTargetsFeet' has a wrong offset!");
static_assert(offsetof(FDigestedWeaponAccuracy, ShouldUseProjectileArcForAiming) == 0x000180, "Member 'FDigestedWeaponAccuracy::ShouldUseProjectileArcForAiming' has a wrong offset!");
static_assert(offsetof(FDigestedWeaponAccuracy, bKeepAimingOnSameSideWhileFiring) == 0x0001A8, "Member 'FDigestedWeaponAccuracy::bKeepAimingOnSameSideWhileFiring' has a wrong offset!");
static_assert(offsetof(FDigestedWeaponAccuracy, MaxTrackingHeightOffsetError) == 0x0001AC, "Member 'FDigestedWeaponAccuracy::MaxTrackingHeightOffsetError' has a wrong offset!");
static_assert(offsetof(FDigestedWeaponAccuracy, MinRotationInterpSpeed) == 0x0001B0, "Member 'FDigestedWeaponAccuracy::MinRotationInterpSpeed' has a wrong offset!");
static_assert(offsetof(FDigestedWeaponAccuracy, MaxRotationInterpSpeed) == 0x0001B4, "Member 'FDigestedWeaponAccuracy::MaxRotationInterpSpeed' has a wrong offset!");
static_assert(offsetof(FDigestedWeaponAccuracy, bOverrideAimingCircleSettings) == 0x0001B8, "Member 'FDigestedWeaponAccuracy::bOverrideAimingCircleSettings' has a wrong offset!");
static_assert(offsetof(FDigestedWeaponAccuracy, bConsiderProjectileTravelTime) == 0x0001B9, "Member 'FDigestedWeaponAccuracy::bConsiderProjectileTravelTime' has a wrong offset!");
static_assert(offsetof(FDigestedWeaponAccuracy, AimingCircleSettingsOverride) == 0x0001BC, "Member 'FDigestedWeaponAccuracy::AimingCircleSettingsOverride' has a wrong offset!");

// ScriptStruct FortniteAI.DigestedWeaponAccuracyCategorySpecialization
// 0x0208 (0x0208 - 0x0000)
struct FDigestedWeaponAccuracyCategorySpecialization final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Transient, NativeAccessSpecifierPrivate)
	struct FDigestedWeaponAccuracy                WeaponAccuracy;                                    // 0x0020(0x01E8)(Transient, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FDigestedWeaponAccuracyCategorySpecialization) == 0x000008, "Wrong alignment on FDigestedWeaponAccuracyCategorySpecialization");
static_assert(sizeof(FDigestedWeaponAccuracyCategorySpecialization) == 0x000208, "Wrong size on FDigestedWeaponAccuracyCategorySpecialization");
static_assert(offsetof(FDigestedWeaponAccuracyCategorySpecialization, Tags) == 0x000000, "Member 'FDigestedWeaponAccuracyCategorySpecialization::Tags' has a wrong offset!");
static_assert(offsetof(FDigestedWeaponAccuracyCategorySpecialization, WeaponAccuracy) == 0x000020, "Member 'FDigestedWeaponAccuracyCategorySpecialization::WeaponAccuracy' has a wrong offset!");

// ScriptStruct FortniteAI.DigestedWeaponAccuracyCategory
// 0x0218 (0x0218 - 0x0000)
struct FDigestedWeaponAccuracyCategory final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Transient, NativeAccessSpecifierPrivate)
	struct FDigestedWeaponAccuracy                WeaponAccuracy;                                    // 0x0020(0x01E8)(Transient, NativeAccessSpecifierPrivate)
	TArray<struct FDigestedWeaponAccuracyCategorySpecialization> Specializations;                                   // 0x0208(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FDigestedWeaponAccuracyCategory) == 0x000008, "Wrong alignment on FDigestedWeaponAccuracyCategory");
static_assert(sizeof(FDigestedWeaponAccuracyCategory) == 0x000218, "Wrong size on FDigestedWeaponAccuracyCategory");
static_assert(offsetof(FDigestedWeaponAccuracyCategory, Tags) == 0x000000, "Member 'FDigestedWeaponAccuracyCategory::Tags' has a wrong offset!");
static_assert(offsetof(FDigestedWeaponAccuracyCategory, WeaponAccuracy) == 0x000020, "Member 'FDigestedWeaponAccuracyCategory::WeaponAccuracy' has a wrong offset!");
static_assert(offsetof(FDigestedWeaponAccuracyCategory, Specializations) == 0x000208, "Member 'FDigestedWeaponAccuracyCategory::Specializations' has a wrong offset!");

// ScriptStruct FortniteAI.TrackingOffsetModifiers
// 0x0168 (0x0168 - 0x0000)
struct FTrackingOffsetModifiers final
{
public:
	struct FScalableFloat                         CombatStartDuration;                               // 0x0000(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         TargetLowHealthThreshold;                          // 0x0028(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         Curves[0x3];                                       // 0x0050(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         DistanceCurves[0x3];                               // 0x00C8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         InAirHeightCurve;                                  // 0x0140(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FTrackingOffsetModifiers) == 0x000008, "Wrong alignment on FTrackingOffsetModifiers");
static_assert(sizeof(FTrackingOffsetModifiers) == 0x000168, "Wrong size on FTrackingOffsetModifiers");
static_assert(offsetof(FTrackingOffsetModifiers, CombatStartDuration) == 0x000000, "Member 'FTrackingOffsetModifiers::CombatStartDuration' has a wrong offset!");
static_assert(offsetof(FTrackingOffsetModifiers, TargetLowHealthThreshold) == 0x000028, "Member 'FTrackingOffsetModifiers::TargetLowHealthThreshold' has a wrong offset!");
static_assert(offsetof(FTrackingOffsetModifiers, Curves) == 0x000050, "Member 'FTrackingOffsetModifiers::Curves' has a wrong offset!");
static_assert(offsetof(FTrackingOffsetModifiers, DistanceCurves) == 0x0000C8, "Member 'FTrackingOffsetModifiers::DistanceCurves' has a wrong offset!");
static_assert(offsetof(FTrackingOffsetModifiers, InAirHeightCurve) == 0x000140, "Member 'FTrackingOffsetModifiers::InAirHeightCurve' has a wrong offset!");

// ScriptStruct FortniteAI.TrackingOffsetModifierInfo
// 0x01B8 (0x01B8 - 0x0000)
struct FTrackingOffsetModifierInfo final
{
public:
	struct FScalableFloat                         MinSkill;                                          // 0x0000(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MaxSkill;                                          // 0x0028(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FTrackingOffsetModifiers               Modifiers;                                         // 0x0050(0x0168)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FTrackingOffsetModifierInfo) == 0x000008, "Wrong alignment on FTrackingOffsetModifierInfo");
static_assert(sizeof(FTrackingOffsetModifierInfo) == 0x0001B8, "Wrong size on FTrackingOffsetModifierInfo");
static_assert(offsetof(FTrackingOffsetModifierInfo, MinSkill) == 0x000000, "Member 'FTrackingOffsetModifierInfo::MinSkill' has a wrong offset!");
static_assert(offsetof(FTrackingOffsetModifierInfo, MaxSkill) == 0x000028, "Member 'FTrackingOffsetModifierInfo::MaxSkill' has a wrong offset!");
static_assert(offsetof(FTrackingOffsetModifierInfo, Modifiers) == 0x000050, "Member 'FTrackingOffsetModifierInfo::Modifiers' has a wrong offset!");

// ScriptStruct FortniteAI.DigestedTrackingOffsetModifierCurves
// 0x0028 (0x0028 - 0x0000)
struct FDigestedTrackingOffsetModifierCurves final
{
public:
	int32                                         Values[0xA];                                       // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDigestedTrackingOffsetModifierCurves) == 0x000004, "Wrong alignment on FDigestedTrackingOffsetModifierCurves");
static_assert(sizeof(FDigestedTrackingOffsetModifierCurves) == 0x000028, "Wrong size on FDigestedTrackingOffsetModifierCurves");
static_assert(offsetof(FDigestedTrackingOffsetModifierCurves, Values) == 0x000000, "Member 'FDigestedTrackingOffsetModifierCurves::Values' has a wrong offset!");

// ScriptStruct FortniteAI.DigestedTrackingOffsetModifiers
// 0x0120 (0x0120 - 0x0000)
struct FDigestedTrackingOffsetModifiers final
{
public:
	float                                         CombatStartDuration;                               // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TargetLowHealthThreshold;                          // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDigestedTrackingOffsetModifierCurves  Curves[0x3];                                       // 0x0008(0x0028)(Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDigestedTrackingOffsetModifierCurves  DistanceCurves[0x3];                               // 0x0080(0x0028)(Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDigestedTrackingOffsetModifierCurves  InAirHeightCurve;                                  // 0x00F8(0x0028)(Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FDigestedTrackingOffsetModifiers) == 0x000004, "Wrong alignment on FDigestedTrackingOffsetModifiers");
static_assert(sizeof(FDigestedTrackingOffsetModifiers) == 0x000120, "Wrong size on FDigestedTrackingOffsetModifiers");
static_assert(offsetof(FDigestedTrackingOffsetModifiers, CombatStartDuration) == 0x000000, "Member 'FDigestedTrackingOffsetModifiers::CombatStartDuration' has a wrong offset!");
static_assert(offsetof(FDigestedTrackingOffsetModifiers, TargetLowHealthThreshold) == 0x000004, "Member 'FDigestedTrackingOffsetModifiers::TargetLowHealthThreshold' has a wrong offset!");
static_assert(offsetof(FDigestedTrackingOffsetModifiers, Curves) == 0x000008, "Member 'FDigestedTrackingOffsetModifiers::Curves' has a wrong offset!");
static_assert(offsetof(FDigestedTrackingOffsetModifiers, DistanceCurves) == 0x000080, "Member 'FDigestedTrackingOffsetModifiers::DistanceCurves' has a wrong offset!");
static_assert(offsetof(FDigestedTrackingOffsetModifiers, InAirHeightCurve) == 0x0000F8, "Member 'FDigestedTrackingOffsetModifiers::InAirHeightCurve' has a wrong offset!");

// ScriptStruct FortniteAI.LookAtDigestedSetting
// 0x0010 (0x0010 - 0x0000)
struct FLookAtDigestedSetting final
{
public:
	float                                         LookAtDuration;                                    // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LookAtDurationDeviation;                           // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LookAtDelay;                                       // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LookAtDelayDeviation;                              // 0x000C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FLookAtDigestedSetting) == 0x000004, "Wrong alignment on FLookAtDigestedSetting");
static_assert(sizeof(FLookAtDigestedSetting) == 0x000010, "Wrong size on FLookAtDigestedSetting");
static_assert(offsetof(FLookAtDigestedSetting, LookAtDuration) == 0x000000, "Member 'FLookAtDigestedSetting::LookAtDuration' has a wrong offset!");
static_assert(offsetof(FLookAtDigestedSetting, LookAtDurationDeviation) == 0x000004, "Member 'FLookAtDigestedSetting::LookAtDurationDeviation' has a wrong offset!");
static_assert(offsetof(FLookAtDigestedSetting, LookAtDelay) == 0x000008, "Member 'FLookAtDigestedSetting::LookAtDelay' has a wrong offset!");
static_assert(offsetof(FLookAtDigestedSetting, LookAtDelayDeviation) == 0x00000C, "Member 'FLookAtDigestedSetting::LookAtDelayDeviation' has a wrong offset!");

// ScriptStruct FortniteAI.FocusSetting
// 0x00F0 (0x00F0 - 0x0000)
struct FFocusSetting final
{
public:
	struct FGameplayTagQuery                      WeaponTagQuery;                                    // 0x0000(0x0048)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          bRequireAmmoToMatch;                               // 0x0048(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         IgnoreThreatTimeWhenNotAttacking;                  // 0x0050(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         IgnoreThreatDeviationWhenNotAttacking;             // 0x0078(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         IgnoreThreatDuration;                              // 0x00A0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         IgnoreThreatDurationDeviation;                     // 0x00C8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFocusSetting) == 0x000008, "Wrong alignment on FFocusSetting");
static_assert(sizeof(FFocusSetting) == 0x0000F0, "Wrong size on FFocusSetting");
static_assert(offsetof(FFocusSetting, WeaponTagQuery) == 0x000000, "Member 'FFocusSetting::WeaponTagQuery' has a wrong offset!");
static_assert(offsetof(FFocusSetting, bRequireAmmoToMatch) == 0x000048, "Member 'FFocusSetting::bRequireAmmoToMatch' has a wrong offset!");
static_assert(offsetof(FFocusSetting, IgnoreThreatTimeWhenNotAttacking) == 0x000050, "Member 'FFocusSetting::IgnoreThreatTimeWhenNotAttacking' has a wrong offset!");
static_assert(offsetof(FFocusSetting, IgnoreThreatDeviationWhenNotAttacking) == 0x000078, "Member 'FFocusSetting::IgnoreThreatDeviationWhenNotAttacking' has a wrong offset!");
static_assert(offsetof(FFocusSetting, IgnoreThreatDuration) == 0x0000A0, "Member 'FFocusSetting::IgnoreThreatDuration' has a wrong offset!");
static_assert(offsetof(FFocusSetting, IgnoreThreatDurationDeviation) == 0x0000C8, "Member 'FFocusSetting::IgnoreThreatDurationDeviation' has a wrong offset!");

// ScriptStruct FortniteAI.DigestedFocusSetting
// 0x0060 (0x0060 - 0x0000)
struct FDigestedFocusSetting final
{
public:
	struct FGameplayTagQuery                      WeaponTagQuery;                                    // 0x0000(0x0048)(Transient, Protected, NativeAccessSpecifierProtected)
	bool                                          bRequireAmmoToMatch;                               // 0x0048(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IgnoreThreatTimeWhenNotAttacking;                  // 0x004C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         IgnoreThreatDeviationWhenNotAttacking;             // 0x0050(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         IgnoreThreatDuration;                              // 0x0054(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         IgnoreThreatDurationDeviation;                     // 0x0058(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDigestedFocusSetting) == 0x000008, "Wrong alignment on FDigestedFocusSetting");
static_assert(sizeof(FDigestedFocusSetting) == 0x000060, "Wrong size on FDigestedFocusSetting");
static_assert(offsetof(FDigestedFocusSetting, WeaponTagQuery) == 0x000000, "Member 'FDigestedFocusSetting::WeaponTagQuery' has a wrong offset!");
static_assert(offsetof(FDigestedFocusSetting, bRequireAmmoToMatch) == 0x000048, "Member 'FDigestedFocusSetting::bRequireAmmoToMatch' has a wrong offset!");
static_assert(offsetof(FDigestedFocusSetting, IgnoreThreatTimeWhenNotAttacking) == 0x00004C, "Member 'FDigestedFocusSetting::IgnoreThreatTimeWhenNotAttacking' has a wrong offset!");
static_assert(offsetof(FDigestedFocusSetting, IgnoreThreatDeviationWhenNotAttacking) == 0x000050, "Member 'FDigestedFocusSetting::IgnoreThreatDeviationWhenNotAttacking' has a wrong offset!");
static_assert(offsetof(FDigestedFocusSetting, IgnoreThreatDuration) == 0x000054, "Member 'FDigestedFocusSetting::IgnoreThreatDuration' has a wrong offset!");
static_assert(offsetof(FDigestedFocusSetting, IgnoreThreatDurationDeviation) == 0x000058, "Member 'FDigestedFocusSetting::IgnoreThreatDurationDeviation' has a wrong offset!");

// ScriptStruct FortniteAI.LookAtSetting
// 0x00A0 (0x00A0 - 0x0000)
struct FLookAtSetting final
{
public:
	struct FScalableFloat                         LookAtDuration;                                    // 0x0000(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         LookAtDurationDeviation;                           // 0x0028(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         LookAtDelay;                                       // 0x0050(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         LookAtDelayDeviation;                              // 0x0078(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FLookAtSetting) == 0x000008, "Wrong alignment on FLookAtSetting");
static_assert(sizeof(FLookAtSetting) == 0x0000A0, "Wrong size on FLookAtSetting");
static_assert(offsetof(FLookAtSetting, LookAtDuration) == 0x000000, "Member 'FLookAtSetting::LookAtDuration' has a wrong offset!");
static_assert(offsetof(FLookAtSetting, LookAtDurationDeviation) == 0x000028, "Member 'FLookAtSetting::LookAtDurationDeviation' has a wrong offset!");
static_assert(offsetof(FLookAtSetting, LookAtDelay) == 0x000050, "Member 'FLookAtSetting::LookAtDelay' has a wrong offset!");
static_assert(offsetof(FLookAtSetting, LookAtDelayDeviation) == 0x000078, "Member 'FLookAtSetting::LookAtDelayDeviation' has a wrong offset!");

// ScriptStruct FortniteAI.FortAthenaAIBotBuildingQueue
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FFortAthenaAIBotBuildingQueue final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAthenaAIBotBuildingQueue) == 0x000008, "Wrong alignment on FFortAthenaAIBotBuildingQueue");
static_assert(sizeof(FFortAthenaAIBotBuildingQueue) == 0x000028, "Wrong size on FFortAthenaAIBotBuildingQueue");

// ScriptStruct FortniteAI.FortAthenaAIBotBuildDescriptor
// 0x0010 (0x0010 - 0x0000)
struct FFortAthenaAIBotBuildDescriptor final
{
public:
	struct FIntVector                             Location;                                          // 0x0000(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrientedConstructionBuildingType             BuildingType;                                      // 0x000C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAthenaAIBotBuildDescriptor) == 0x000004, "Wrong alignment on FFortAthenaAIBotBuildDescriptor");
static_assert(sizeof(FFortAthenaAIBotBuildDescriptor) == 0x000010, "Wrong size on FFortAthenaAIBotBuildDescriptor");
static_assert(offsetof(FFortAthenaAIBotBuildDescriptor, Location) == 0x000000, "Member 'FFortAthenaAIBotBuildDescriptor::Location' has a wrong offset!");
static_assert(offsetof(FFortAthenaAIBotBuildDescriptor, BuildingType) == 0x00000C, "Member 'FFortAthenaAIBotBuildDescriptor::BuildingType' has a wrong offset!");

// ScriptStruct FortniteAI.AthenaFortAIBotWeightedBuildingList
// 0x0038 (0x0038 - 0x0000)
struct FAthenaFortAIBotWeightedBuildingList final
{
public:
	struct FScalableFloat                         Weight;                                            // 0x0000(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortAthenaAIBotBuildDescriptor> BuildDescriptors;                                  // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaFortAIBotWeightedBuildingList) == 0x000008, "Wrong alignment on FAthenaFortAIBotWeightedBuildingList");
static_assert(sizeof(FAthenaFortAIBotWeightedBuildingList) == 0x000038, "Wrong size on FAthenaFortAIBotWeightedBuildingList");
static_assert(offsetof(FAthenaFortAIBotWeightedBuildingList, Weight) == 0x000000, "Member 'FAthenaFortAIBotWeightedBuildingList::Weight' has a wrong offset!");
static_assert(offsetof(FAthenaFortAIBotWeightedBuildingList, BuildDescriptors) == 0x000028, "Member 'FAthenaFortAIBotWeightedBuildingList::BuildDescriptors' has a wrong offset!");

// ScriptStruct FortniteAI.AthenaFortAIBotDigestedWeightedBuildingList
// 0x0018 (0x0018 - 0x0000)
struct FAthenaFortAIBotDigestedWeightedBuildingList final
{
public:
	float                                         Weight;                                            // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortAthenaAIBotBuildDescriptor> BuildDescriptors;                                  // 0x0008(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaFortAIBotDigestedWeightedBuildingList) == 0x000008, "Wrong alignment on FAthenaFortAIBotDigestedWeightedBuildingList");
static_assert(sizeof(FAthenaFortAIBotDigestedWeightedBuildingList) == 0x000018, "Wrong size on FAthenaFortAIBotDigestedWeightedBuildingList");
static_assert(offsetof(FAthenaFortAIBotDigestedWeightedBuildingList, Weight) == 0x000000, "Member 'FAthenaFortAIBotDigestedWeightedBuildingList::Weight' has a wrong offset!");
static_assert(offsetof(FAthenaFortAIBotDigestedWeightedBuildingList, BuildDescriptors) == 0x000008, "Member 'FAthenaFortAIBotDigestedWeightedBuildingList::BuildDescriptors' has a wrong offset!");

// ScriptStruct FortniteAI.DebugMinimapData
// 0x01B0 (0x01B0 - 0x0000)
struct FDebugMinimapData final
{
public:
	bool                                          bIsOverridden;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            DebugMinimapIconBrush;                             // 0x0010(0x00C0)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVector2D                              DebugMinimapIconScale;                             // 0x00D0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            DebugCompassIconBrush;                             // 0x00E0(0x00C0)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVector2D                              DebugCompassIconScale;                             // 0x01A0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebugMinimapData) == 0x000010, "Wrong alignment on FDebugMinimapData");
static_assert(sizeof(FDebugMinimapData) == 0x0001B0, "Wrong size on FDebugMinimapData");
static_assert(offsetof(FDebugMinimapData, bIsOverridden) == 0x000000, "Member 'FDebugMinimapData::bIsOverridden' has a wrong offset!");
static_assert(offsetof(FDebugMinimapData, DebugMinimapIconBrush) == 0x000010, "Member 'FDebugMinimapData::DebugMinimapIconBrush' has a wrong offset!");
static_assert(offsetof(FDebugMinimapData, DebugMinimapIconScale) == 0x0000D0, "Member 'FDebugMinimapData::DebugMinimapIconScale' has a wrong offset!");
static_assert(offsetof(FDebugMinimapData, DebugCompassIconBrush) == 0x0000E0, "Member 'FDebugMinimapData::DebugCompassIconBrush' has a wrong offset!");
static_assert(offsetof(FDebugMinimapData, DebugCompassIconScale) == 0x0001A0, "Member 'FDebugMinimapData::DebugCompassIconScale' has a wrong offset!");

// ScriptStruct FortniteAI.MMRSpawningBracketNPCDataTableRow
// 0x0008 (0x0018 - 0x0010)
struct FMMRSpawningBracketNPCDataTableRow final : public FMMRSpawningBracketBaseDataTableRow
{
public:
	float                                         Skill;                                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMMRSpawningBracketNPCDataTableRow) == 0x000008, "Wrong alignment on FMMRSpawningBracketNPCDataTableRow");
static_assert(sizeof(FMMRSpawningBracketNPCDataTableRow) == 0x000018, "Wrong size on FMMRSpawningBracketNPCDataTableRow");
static_assert(offsetof(FMMRSpawningBracketNPCDataTableRow, Skill) == 0x000010, "Member 'FMMRSpawningBracketNPCDataTableRow::Skill' has a wrong offset!");

// ScriptStruct FortniteAI.SmartObjectActivityResult
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FSmartObjectActivityResult final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSmartObjectActivityResult) == 0x000008, "Wrong alignment on FSmartObjectActivityResult");
static_assert(sizeof(FSmartObjectActivityResult) == 0x000010, "Wrong size on FSmartObjectActivityResult");

// ScriptStruct FortniteAI.EvasiveManeuverSkillSettings
// 0x0258 (0x0258 - 0x0000)
struct FEvasiveManeuverSkillSettings final
{
public:
	struct FScalableFloat                         CrouchOverlayWeight;                               // 0x0000(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         JumpOverlayWeight;                                 // 0x0028(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         NoOverlayWeight;                                   // 0x0050(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         DodgeWeight;                                       // 0x0078(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         DodgeJumpWeight;                                   // 0x00A0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         JumpDelay;                                         // 0x00C8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         JumpRandomDeviationDelay;                          // 0x00F0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         CrouchDelay;                                       // 0x0118(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         CrouchRandomDeviationDelay;                        // 0x0140(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         DodgeDelay;                                        // 0x0168(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         DodgeRandomDeviationDelay;                         // 0x0190(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         DodgeDistanceMax;                                  // 0x01B8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         DodgeDistanceMin;                                  // 0x01E0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         CrouchTimeMax;                                     // 0x0208(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         CrouchTimeMin;                                     // 0x0230(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FEvasiveManeuverSkillSettings) == 0x000008, "Wrong alignment on FEvasiveManeuverSkillSettings");
static_assert(sizeof(FEvasiveManeuverSkillSettings) == 0x000258, "Wrong size on FEvasiveManeuverSkillSettings");
static_assert(offsetof(FEvasiveManeuverSkillSettings, CrouchOverlayWeight) == 0x000000, "Member 'FEvasiveManeuverSkillSettings::CrouchOverlayWeight' has a wrong offset!");
static_assert(offsetof(FEvasiveManeuverSkillSettings, JumpOverlayWeight) == 0x000028, "Member 'FEvasiveManeuverSkillSettings::JumpOverlayWeight' has a wrong offset!");
static_assert(offsetof(FEvasiveManeuverSkillSettings, NoOverlayWeight) == 0x000050, "Member 'FEvasiveManeuverSkillSettings::NoOverlayWeight' has a wrong offset!");
static_assert(offsetof(FEvasiveManeuverSkillSettings, DodgeWeight) == 0x000078, "Member 'FEvasiveManeuverSkillSettings::DodgeWeight' has a wrong offset!");
static_assert(offsetof(FEvasiveManeuverSkillSettings, DodgeJumpWeight) == 0x0000A0, "Member 'FEvasiveManeuverSkillSettings::DodgeJumpWeight' has a wrong offset!");
static_assert(offsetof(FEvasiveManeuverSkillSettings, JumpDelay) == 0x0000C8, "Member 'FEvasiveManeuverSkillSettings::JumpDelay' has a wrong offset!");
static_assert(offsetof(FEvasiveManeuverSkillSettings, JumpRandomDeviationDelay) == 0x0000F0, "Member 'FEvasiveManeuverSkillSettings::JumpRandomDeviationDelay' has a wrong offset!");
static_assert(offsetof(FEvasiveManeuverSkillSettings, CrouchDelay) == 0x000118, "Member 'FEvasiveManeuverSkillSettings::CrouchDelay' has a wrong offset!");
static_assert(offsetof(FEvasiveManeuverSkillSettings, CrouchRandomDeviationDelay) == 0x000140, "Member 'FEvasiveManeuverSkillSettings::CrouchRandomDeviationDelay' has a wrong offset!");
static_assert(offsetof(FEvasiveManeuverSkillSettings, DodgeDelay) == 0x000168, "Member 'FEvasiveManeuverSkillSettings::DodgeDelay' has a wrong offset!");
static_assert(offsetof(FEvasiveManeuverSkillSettings, DodgeRandomDeviationDelay) == 0x000190, "Member 'FEvasiveManeuverSkillSettings::DodgeRandomDeviationDelay' has a wrong offset!");
static_assert(offsetof(FEvasiveManeuverSkillSettings, DodgeDistanceMax) == 0x0001B8, "Member 'FEvasiveManeuverSkillSettings::DodgeDistanceMax' has a wrong offset!");
static_assert(offsetof(FEvasiveManeuverSkillSettings, DodgeDistanceMin) == 0x0001E0, "Member 'FEvasiveManeuverSkillSettings::DodgeDistanceMin' has a wrong offset!");
static_assert(offsetof(FEvasiveManeuverSkillSettings, CrouchTimeMax) == 0x000208, "Member 'FEvasiveManeuverSkillSettings::CrouchTimeMax' has a wrong offset!");
static_assert(offsetof(FEvasiveManeuverSkillSettings, CrouchTimeMin) == 0x000230, "Member 'FEvasiveManeuverSkillSettings::CrouchTimeMin' has a wrong offset!");

// ScriptStruct FortniteAI.EvasiveManeuverSkillSettingsSpecialization
// 0x03C8 (0x03C8 - 0x0000)
struct FEvasiveManeuverSkillSettingsSpecialization final
{
public:
	struct FScalableFloat                         OddsToBeUsed;                                      // 0x0000(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MaxDuration;                                       // 0x0028(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MaxDurationRandomDeviation;                        // 0x0050(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         Cooldown;                                          // 0x0078(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         CooldownRandomDeviation;                           // 0x00A0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class FString                                 DebugName;                                         // 0x00C8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         DistanceMin;                                       // 0x00D8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         DistanceMax;                                       // 0x0100(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FGameplayTagQuery                      WeaponTagQuery;                                    // 0x0128(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FEvasiveManeuverSkillSettings          EvasiveManeuverSkillSettings;                      // 0x0170(0x0258)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEvasiveManeuverSkillSettingsSpecialization) == 0x000008, "Wrong alignment on FEvasiveManeuverSkillSettingsSpecialization");
static_assert(sizeof(FEvasiveManeuverSkillSettingsSpecialization) == 0x0003C8, "Wrong size on FEvasiveManeuverSkillSettingsSpecialization");
static_assert(offsetof(FEvasiveManeuverSkillSettingsSpecialization, OddsToBeUsed) == 0x000000, "Member 'FEvasiveManeuverSkillSettingsSpecialization::OddsToBeUsed' has a wrong offset!");
static_assert(offsetof(FEvasiveManeuverSkillSettingsSpecialization, MaxDuration) == 0x000028, "Member 'FEvasiveManeuverSkillSettingsSpecialization::MaxDuration' has a wrong offset!");
static_assert(offsetof(FEvasiveManeuverSkillSettingsSpecialization, MaxDurationRandomDeviation) == 0x000050, "Member 'FEvasiveManeuverSkillSettingsSpecialization::MaxDurationRandomDeviation' has a wrong offset!");
static_assert(offsetof(FEvasiveManeuverSkillSettingsSpecialization, Cooldown) == 0x000078, "Member 'FEvasiveManeuverSkillSettingsSpecialization::Cooldown' has a wrong offset!");
static_assert(offsetof(FEvasiveManeuverSkillSettingsSpecialization, CooldownRandomDeviation) == 0x0000A0, "Member 'FEvasiveManeuverSkillSettingsSpecialization::CooldownRandomDeviation' has a wrong offset!");
static_assert(offsetof(FEvasiveManeuverSkillSettingsSpecialization, DebugName) == 0x0000C8, "Member 'FEvasiveManeuverSkillSettingsSpecialization::DebugName' has a wrong offset!");
static_assert(offsetof(FEvasiveManeuverSkillSettingsSpecialization, DistanceMin) == 0x0000D8, "Member 'FEvasiveManeuverSkillSettingsSpecialization::DistanceMin' has a wrong offset!");
static_assert(offsetof(FEvasiveManeuverSkillSettingsSpecialization, DistanceMax) == 0x000100, "Member 'FEvasiveManeuverSkillSettingsSpecialization::DistanceMax' has a wrong offset!");
static_assert(offsetof(FEvasiveManeuverSkillSettingsSpecialization, WeaponTagQuery) == 0x000128, "Member 'FEvasiveManeuverSkillSettingsSpecialization::WeaponTagQuery' has a wrong offset!");
static_assert(offsetof(FEvasiveManeuverSkillSettingsSpecialization, EvasiveManeuverSkillSettings) == 0x000170, "Member 'FEvasiveManeuverSkillSettingsSpecialization::EvasiveManeuverSkillSettings' has a wrong offset!");

// ScriptStruct FortniteAI.FortBotDigestedHealingItems
// 0x0028 (0x0028 - 0x0000)
struct FFortBotDigestedHealingItems final
{
public:
	float                                         UseItemResourceThreshold;                          // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  ItemTags;                                          // 0x0008(0x0020)(Transient, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortBotDigestedHealingItems) == 0x000008, "Wrong alignment on FFortBotDigestedHealingItems");
static_assert(sizeof(FFortBotDigestedHealingItems) == 0x000028, "Wrong size on FFortBotDigestedHealingItems");
static_assert(offsetof(FFortBotDigestedHealingItems, UseItemResourceThreshold) == 0x000000, "Member 'FFortBotDigestedHealingItems::UseItemResourceThreshold' has a wrong offset!");
static_assert(offsetof(FFortBotDigestedHealingItems, ItemTags) == 0x000008, "Member 'FFortBotDigestedHealingItems::ItemTags' has a wrong offset!");

// ScriptStruct FortniteAI.FortBotDigestedHealingItemsList
// 0x0010 (0x0010 - 0x0000)
struct FFortBotDigestedHealingItemsList final
{
public:
	TArray<struct FFortBotDigestedHealingItems>   HealthItems;                                       // 0x0000(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortBotDigestedHealingItemsList) == 0x000008, "Wrong alignment on FFortBotDigestedHealingItemsList");
static_assert(sizeof(FFortBotDigestedHealingItemsList) == 0x000010, "Wrong size on FFortBotDigestedHealingItemsList");
static_assert(offsetof(FFortBotDigestedHealingItemsList, HealthItems) == 0x000000, "Member 'FFortBotDigestedHealingItemsList::HealthItems' has a wrong offset!");

// ScriptStruct FortniteAI.FortBotDigestedHealingItemsSpec
// 0x0058 (0x0058 - 0x0000)
struct FFortBotDigestedHealingItemsSpec final
{
public:
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0000(0x0048)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FFortBotDigestedHealingItemsList       HealthItemsList;                                   // 0x0048(0x0010)(Transient, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortBotDigestedHealingItemsSpec) == 0x000008, "Wrong alignment on FFortBotDigestedHealingItemsSpec");
static_assert(sizeof(FFortBotDigestedHealingItemsSpec) == 0x000058, "Wrong size on FFortBotDigestedHealingItemsSpec");
static_assert(offsetof(FFortBotDigestedHealingItemsSpec, TagQuery) == 0x000000, "Member 'FFortBotDigestedHealingItemsSpec::TagQuery' has a wrong offset!");
static_assert(offsetof(FFortBotDigestedHealingItemsSpec, HealthItemsList) == 0x000048, "Member 'FFortBotDigestedHealingItemsSpec::HealthItemsList' has a wrong offset!");

// ScriptStruct FortniteAI.DigestedBotEquipWeaponInfo
// 0x0098 (0x0098 - 0x0000)
struct FDigestedBotEquipWeaponInfo final
{
public:
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0000(0x0048)(Transient, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         DistanceEffectivenessWithThreat;                   // 0x0048(0x0028)(Transient, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         DistanceEffectivenessNoThreat;                     // 0x0070(0x0028)(Transient, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FDigestedBotEquipWeaponInfo) == 0x000008, "Wrong alignment on FDigestedBotEquipWeaponInfo");
static_assert(sizeof(FDigestedBotEquipWeaponInfo) == 0x000098, "Wrong size on FDigestedBotEquipWeaponInfo");
static_assert(offsetof(FDigestedBotEquipWeaponInfo, TagQuery) == 0x000000, "Member 'FDigestedBotEquipWeaponInfo::TagQuery' has a wrong offset!");
static_assert(offsetof(FDigestedBotEquipWeaponInfo, DistanceEffectivenessWithThreat) == 0x000048, "Member 'FDigestedBotEquipWeaponInfo::DistanceEffectivenessWithThreat' has a wrong offset!");
static_assert(offsetof(FDigestedBotEquipWeaponInfo, DistanceEffectivenessNoThreat) == 0x000070, "Member 'FDigestedBotEquipWeaponInfo::DistanceEffectivenessNoThreat' has a wrong offset!");

// ScriptStruct FortniteAI.BotKnockbackSettings
// 0x00C0 (0x00C0 - 0x0000)
struct FBotKnockbackSettings final
{
public:
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0000(0x0048)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         ShouldAllowCharacterToBeLaunched;                  // 0x0048(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         ShouldStopActiveMovement;                          // 0x0070(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         IgnoreMoveInputDuration;                           // 0x0098(0x0028)(Edit, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FBotKnockbackSettings) == 0x000008, "Wrong alignment on FBotKnockbackSettings");
static_assert(sizeof(FBotKnockbackSettings) == 0x0000C0, "Wrong size on FBotKnockbackSettings");
static_assert(offsetof(FBotKnockbackSettings, TagQuery) == 0x000000, "Member 'FBotKnockbackSettings::TagQuery' has a wrong offset!");
static_assert(offsetof(FBotKnockbackSettings, ShouldAllowCharacterToBeLaunched) == 0x000048, "Member 'FBotKnockbackSettings::ShouldAllowCharacterToBeLaunched' has a wrong offset!");
static_assert(offsetof(FBotKnockbackSettings, ShouldStopActiveMovement) == 0x000070, "Member 'FBotKnockbackSettings::ShouldStopActiveMovement' has a wrong offset!");
static_assert(offsetof(FBotKnockbackSettings, IgnoreMoveInputDuration) == 0x000098, "Member 'FBotKnockbackSettings::IgnoreMoveInputDuration' has a wrong offset!");

// ScriptStruct FortniteAI.FortAthenaAIBotNameDataTableRow
// 0x0020 (0x0028 - 0x0008)
struct FFortAthenaAIBotNameDataTableRow final : public FTableRowBase
{
public:
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UniqueId;                                          // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAthenaAIBotNameDataTableRow) == 0x000008, "Wrong alignment on FFortAthenaAIBotNameDataTableRow");
static_assert(sizeof(FFortAthenaAIBotNameDataTableRow) == 0x000028, "Wrong size on FFortAthenaAIBotNameDataTableRow");
static_assert(offsetof(FFortAthenaAIBotNameDataTableRow, Name) == 0x000008, "Member 'FFortAthenaAIBotNameDataTableRow::Name' has a wrong offset!");
static_assert(offsetof(FFortAthenaAIBotNameDataTableRow, UniqueId) == 0x000018, "Member 'FFortAthenaAIBotNameDataTableRow::UniqueId' has a wrong offset!");

// ScriptStruct FortniteAI.AlertLevelInfo
// 0x0010 (0x0010 - 0x0000)
struct FAlertLevelInfo final
{
public:
	TArray<class UAISenseConfig*>                 SensesConfig;                                      // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FAlertLevelInfo) == 0x000008, "Wrong alignment on FAlertLevelInfo");
static_assert(sizeof(FAlertLevelInfo) == 0x000010, "Wrong size on FAlertLevelInfo");
static_assert(offsetof(FAlertLevelInfo, SensesConfig) == 0x000000, "Member 'FAlertLevelInfo::SensesConfig' has a wrong offset!");

// ScriptStruct FortniteAI.SoundPerceptionDigestedSetting
// 0x000C (0x000C - 0x0000)
struct FSoundPerceptionDigestedSetting final
{
public:
	float                                         Loudness;                                          // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IgnoreTime;                                        // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideReactionDistanceSq;                        // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSoundPerceptionDigestedSetting) == 0x000004, "Wrong alignment on FSoundPerceptionDigestedSetting");
static_assert(sizeof(FSoundPerceptionDigestedSetting) == 0x00000C, "Wrong size on FSoundPerceptionDigestedSetting");
static_assert(offsetof(FSoundPerceptionDigestedSetting, Loudness) == 0x000000, "Member 'FSoundPerceptionDigestedSetting::Loudness' has a wrong offset!");
static_assert(offsetof(FSoundPerceptionDigestedSetting, IgnoreTime) == 0x000004, "Member 'FSoundPerceptionDigestedSetting::IgnoreTime' has a wrong offset!");
static_assert(offsetof(FSoundPerceptionDigestedSetting, OverrideReactionDistanceSq) == 0x000008, "Member 'FSoundPerceptionDigestedSetting::OverrideReactionDistanceSq' has a wrong offset!");

// ScriptStruct FortniteAI.SightReactionSpecialization
// 0x0070 (0x0070 - 0x0000)
struct FSightReactionSpecialization final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         SightMinAdditionTime;                              // 0x0020(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         SightMaxAdditionTime;                              // 0x0048(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FSightReactionSpecialization) == 0x000008, "Wrong alignment on FSightReactionSpecialization");
static_assert(sizeof(FSightReactionSpecialization) == 0x000070, "Wrong size on FSightReactionSpecialization");
static_assert(offsetof(FSightReactionSpecialization, Tags) == 0x000000, "Member 'FSightReactionSpecialization::Tags' has a wrong offset!");
static_assert(offsetof(FSightReactionSpecialization, SightMinAdditionTime) == 0x000020, "Member 'FSightReactionSpecialization::SightMinAdditionTime' has a wrong offset!");
static_assert(offsetof(FSightReactionSpecialization, SightMaxAdditionTime) == 0x000048, "Member 'FSightReactionSpecialization::SightMaxAdditionTime' has a wrong offset!");

// ScriptStruct FortniteAI.DigestedSightReactionSpecialization
// 0x0070 (0x0070 - 0x0000)
struct FDigestedSightReactionSpecialization final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Transient, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         SightMinAdditionTime;                              // 0x0020(0x0028)(Transient, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         SightMaxAdditionTime;                              // 0x0048(0x0028)(Transient, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FDigestedSightReactionSpecialization) == 0x000008, "Wrong alignment on FDigestedSightReactionSpecialization");
static_assert(sizeof(FDigestedSightReactionSpecialization) == 0x000070, "Wrong size on FDigestedSightReactionSpecialization");
static_assert(offsetof(FDigestedSightReactionSpecialization, Tags) == 0x000000, "Member 'FDigestedSightReactionSpecialization::Tags' has a wrong offset!");
static_assert(offsetof(FDigestedSightReactionSpecialization, SightMinAdditionTime) == 0x000020, "Member 'FDigestedSightReactionSpecialization::SightMinAdditionTime' has a wrong offset!");
static_assert(offsetof(FDigestedSightReactionSpecialization, SightMaxAdditionTime) == 0x000048, "Member 'FDigestedSightReactionSpecialization::SightMaxAdditionTime' has a wrong offset!");

// ScriptStruct FortniteAI.FortAthenaAIBotDigestedTargetHeuristicSettingsSpecialization
// 0x01D0 (0x01D0 - 0x0000)
struct FFortAthenaAIBotDigestedTargetHeuristicSettingsSpecialization final
{
public:
	struct FGameplayTagQuery                      TargetTagQuery;                                    // 0x0000(0x0048)(Transient, NativeAccessSpecifierPrivate)
	struct FFortAthenaAIBotDigestedTargetHeuristicSettings Settings;                                          // 0x0048(0x0188)(Transient, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortAthenaAIBotDigestedTargetHeuristicSettingsSpecialization) == 0x000008, "Wrong alignment on FFortAthenaAIBotDigestedTargetHeuristicSettingsSpecialization");
static_assert(sizeof(FFortAthenaAIBotDigestedTargetHeuristicSettingsSpecialization) == 0x0001D0, "Wrong size on FFortAthenaAIBotDigestedTargetHeuristicSettingsSpecialization");
static_assert(offsetof(FFortAthenaAIBotDigestedTargetHeuristicSettingsSpecialization, TargetTagQuery) == 0x000000, "Member 'FFortAthenaAIBotDigestedTargetHeuristicSettingsSpecialization::TargetTagQuery' has a wrong offset!");
static_assert(offsetof(FFortAthenaAIBotDigestedTargetHeuristicSettingsSpecialization, Settings) == 0x000048, "Member 'FFortAthenaAIBotDigestedTargetHeuristicSettingsSpecialization::Settings' has a wrong offset!");

// ScriptStruct FortniteAI.PerceptionStateSettings
// 0x00C8 (0x00C8 - 0x0000)
struct FPerceptionStateSettings final
{
public:
	struct FScalableFloat                         ForgetTime;                                        // 0x0000(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         ForgetTimeDeviation;                               // 0x0028(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         ForgetDistance;                                    // 0x0050(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         ForgetDistanceDeviation;                           // 0x0078(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         ThreatDistanceWeight;                              // 0x00A0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FPerceptionStateSettings) == 0x000008, "Wrong alignment on FPerceptionStateSettings");
static_assert(sizeof(FPerceptionStateSettings) == 0x0000C8, "Wrong size on FPerceptionStateSettings");
static_assert(offsetof(FPerceptionStateSettings, ForgetTime) == 0x000000, "Member 'FPerceptionStateSettings::ForgetTime' has a wrong offset!");
static_assert(offsetof(FPerceptionStateSettings, ForgetTimeDeviation) == 0x000028, "Member 'FPerceptionStateSettings::ForgetTimeDeviation' has a wrong offset!");
static_assert(offsetof(FPerceptionStateSettings, ForgetDistance) == 0x000050, "Member 'FPerceptionStateSettings::ForgetDistance' has a wrong offset!");
static_assert(offsetof(FPerceptionStateSettings, ForgetDistanceDeviation) == 0x000078, "Member 'FPerceptionStateSettings::ForgetDistanceDeviation' has a wrong offset!");
static_assert(offsetof(FPerceptionStateSettings, ThreatDistanceWeight) == 0x0000A0, "Member 'FPerceptionStateSettings::ThreatDistanceWeight' has a wrong offset!");

// ScriptStruct FortniteAI.SoundPerceptionSetting
// 0x0078 (0x0078 - 0x0000)
struct FSoundPerceptionSetting final
{
public:
	struct FScalableFloat                         Loudness;                                          // 0x0000(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         IgnoreTime;                                        // 0x0028(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         OverrideReactionDistance;                          // 0x0050(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSoundPerceptionSetting) == 0x000008, "Wrong alignment on FSoundPerceptionSetting");
static_assert(sizeof(FSoundPerceptionSetting) == 0x000078, "Wrong size on FSoundPerceptionSetting");
static_assert(offsetof(FSoundPerceptionSetting, Loudness) == 0x000000, "Member 'FSoundPerceptionSetting::Loudness' has a wrong offset!");
static_assert(offsetof(FSoundPerceptionSetting, IgnoreTime) == 0x000028, "Member 'FSoundPerceptionSetting::IgnoreTime' has a wrong offset!");
static_assert(offsetof(FSoundPerceptionSetting, OverrideReactionDistance) == 0x000050, "Member 'FSoundPerceptionSetting::OverrideReactionDistance' has a wrong offset!");

// ScriptStruct FortniteAI.FortAthenaAIBotTargetHeuristicSettings
// 0x0320 (0x0320 - 0x0000)
struct FFortAthenaAIBotTargetHeuristicSettings final
{
public:
	struct FPerceptionStateSettings               ThreatSeeingPerceptionSettings;                    // 0x0000(0x00C8)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FPerceptionStateSettings               ThreatLKPPerceptionSettings;                       // 0x00C8(0x00C8)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FPerceptionStateSettings               ThreatAlertedPerceptionSettings;                   // 0x0190(0x00C8)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         ThreatDamageWeight;                                // 0x0258(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         ThreatDamageWeightMultiplier;                      // 0x0280(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         ThreatTimeSinceLastDamageMultiplier;               // 0x02A8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         ThreatLoFWeight;                                   // 0x02D0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         DBNOWeightModifier;                                // 0x02F8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAthenaAIBotTargetHeuristicSettings) == 0x000008, "Wrong alignment on FFortAthenaAIBotTargetHeuristicSettings");
static_assert(sizeof(FFortAthenaAIBotTargetHeuristicSettings) == 0x000320, "Wrong size on FFortAthenaAIBotTargetHeuristicSettings");
static_assert(offsetof(FFortAthenaAIBotTargetHeuristicSettings, ThreatSeeingPerceptionSettings) == 0x000000, "Member 'FFortAthenaAIBotTargetHeuristicSettings::ThreatSeeingPerceptionSettings' has a wrong offset!");
static_assert(offsetof(FFortAthenaAIBotTargetHeuristicSettings, ThreatLKPPerceptionSettings) == 0x0000C8, "Member 'FFortAthenaAIBotTargetHeuristicSettings::ThreatLKPPerceptionSettings' has a wrong offset!");
static_assert(offsetof(FFortAthenaAIBotTargetHeuristicSettings, ThreatAlertedPerceptionSettings) == 0x000190, "Member 'FFortAthenaAIBotTargetHeuristicSettings::ThreatAlertedPerceptionSettings' has a wrong offset!");
static_assert(offsetof(FFortAthenaAIBotTargetHeuristicSettings, ThreatDamageWeight) == 0x000258, "Member 'FFortAthenaAIBotTargetHeuristicSettings::ThreatDamageWeight' has a wrong offset!");
static_assert(offsetof(FFortAthenaAIBotTargetHeuristicSettings, ThreatDamageWeightMultiplier) == 0x000280, "Member 'FFortAthenaAIBotTargetHeuristicSettings::ThreatDamageWeightMultiplier' has a wrong offset!");
static_assert(offsetof(FFortAthenaAIBotTargetHeuristicSettings, ThreatTimeSinceLastDamageMultiplier) == 0x0002A8, "Member 'FFortAthenaAIBotTargetHeuristicSettings::ThreatTimeSinceLastDamageMultiplier' has a wrong offset!");
static_assert(offsetof(FFortAthenaAIBotTargetHeuristicSettings, ThreatLoFWeight) == 0x0002D0, "Member 'FFortAthenaAIBotTargetHeuristicSettings::ThreatLoFWeight' has a wrong offset!");
static_assert(offsetof(FFortAthenaAIBotTargetHeuristicSettings, DBNOWeightModifier) == 0x0002F8, "Member 'FFortAthenaAIBotTargetHeuristicSettings::DBNOWeightModifier' has a wrong offset!");

// ScriptStruct FortniteAI.FortAthenaAIBotTargetHeuristicSettingsSpecialization
// 0x0368 (0x0368 - 0x0000)
struct FFortAthenaAIBotTargetHeuristicSettingsSpecialization final
{
public:
	struct FGameplayTagQuery                      TargetTagQuery;                                    // 0x0000(0x0048)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FFortAthenaAIBotTargetHeuristicSettings Settings;                                          // 0x0048(0x0320)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortAthenaAIBotTargetHeuristicSettingsSpecialization) == 0x000008, "Wrong alignment on FFortAthenaAIBotTargetHeuristicSettingsSpecialization");
static_assert(sizeof(FFortAthenaAIBotTargetHeuristicSettingsSpecialization) == 0x000368, "Wrong size on FFortAthenaAIBotTargetHeuristicSettingsSpecialization");
static_assert(offsetof(FFortAthenaAIBotTargetHeuristicSettingsSpecialization, TargetTagQuery) == 0x000000, "Member 'FFortAthenaAIBotTargetHeuristicSettingsSpecialization::TargetTagQuery' has a wrong offset!");
static_assert(offsetof(FFortAthenaAIBotTargetHeuristicSettingsSpecialization, Settings) == 0x000048, "Member 'FFortAthenaAIBotTargetHeuristicSettingsSpecialization::Settings' has a wrong offset!");

// ScriptStruct FortniteAI.PlaystyleSwitchToAggressiveDataDigested
// 0x0058 (0x0058 - 0x0000)
struct FPlaystyleSwitchToAggressiveDataDigested final
{
public:
	struct FGameplayTagQuery                      TagQueryToMatch;                                   // 0x0000(0x0048)(Transient, NativeAccessSpecifierPrivate)
	float                                         TurnToAggressiveMinimumDistanceSquared;            // 0x0048(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TurnToAggressiveTime;                              // 0x004C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DamageThresholdToSwitchToAggressive;               // 0x0050(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SwitchBackToDefensivePreventionTime;               // 0x0054(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPlaystyleSwitchToAggressiveDataDigested) == 0x000008, "Wrong alignment on FPlaystyleSwitchToAggressiveDataDigested");
static_assert(sizeof(FPlaystyleSwitchToAggressiveDataDigested) == 0x000058, "Wrong size on FPlaystyleSwitchToAggressiveDataDigested");
static_assert(offsetof(FPlaystyleSwitchToAggressiveDataDigested, TagQueryToMatch) == 0x000000, "Member 'FPlaystyleSwitchToAggressiveDataDigested::TagQueryToMatch' has a wrong offset!");
static_assert(offsetof(FPlaystyleSwitchToAggressiveDataDigested, TurnToAggressiveMinimumDistanceSquared) == 0x000048, "Member 'FPlaystyleSwitchToAggressiveDataDigested::TurnToAggressiveMinimumDistanceSquared' has a wrong offset!");
static_assert(offsetof(FPlaystyleSwitchToAggressiveDataDigested, TurnToAggressiveTime) == 0x00004C, "Member 'FPlaystyleSwitchToAggressiveDataDigested::TurnToAggressiveTime' has a wrong offset!");
static_assert(offsetof(FPlaystyleSwitchToAggressiveDataDigested, DamageThresholdToSwitchToAggressive) == 0x000050, "Member 'FPlaystyleSwitchToAggressiveDataDigested::DamageThresholdToSwitchToAggressive' has a wrong offset!");
static_assert(offsetof(FPlaystyleSwitchToAggressiveDataDigested, SwitchBackToDefensivePreventionTime) == 0x000054, "Member 'FPlaystyleSwitchToAggressiveDataDigested::SwitchBackToDefensivePreventionTime' has a wrong offset!");

// ScriptStruct FortniteAI.PlaystyleSwitchToAggressiveData
// 0x00E8 (0x00E8 - 0x0000)
struct FPlaystyleSwitchToAggressiveData final
{
public:
	struct FGameplayTagQuery                      TagQueryToMatch;                                   // 0x0000(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         TurnToAggressiveMinimumDistance;                   // 0x0048(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         TurnToAggressiveTime;                              // 0x0070(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         SwitchBackToDefensivePreventionTime;               // 0x0098(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         DamageThresholdToSwitchToAggressive;               // 0x00C0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPlaystyleSwitchToAggressiveData) == 0x000008, "Wrong alignment on FPlaystyleSwitchToAggressiveData");
static_assert(sizeof(FPlaystyleSwitchToAggressiveData) == 0x0000E8, "Wrong size on FPlaystyleSwitchToAggressiveData");
static_assert(offsetof(FPlaystyleSwitchToAggressiveData, TagQueryToMatch) == 0x000000, "Member 'FPlaystyleSwitchToAggressiveData::TagQueryToMatch' has a wrong offset!");
static_assert(offsetof(FPlaystyleSwitchToAggressiveData, TurnToAggressiveMinimumDistance) == 0x000048, "Member 'FPlaystyleSwitchToAggressiveData::TurnToAggressiveMinimumDistance' has a wrong offset!");
static_assert(offsetof(FPlaystyleSwitchToAggressiveData, TurnToAggressiveTime) == 0x000070, "Member 'FPlaystyleSwitchToAggressiveData::TurnToAggressiveTime' has a wrong offset!");
static_assert(offsetof(FPlaystyleSwitchToAggressiveData, SwitchBackToDefensivePreventionTime) == 0x000098, "Member 'FPlaystyleSwitchToAggressiveData::SwitchBackToDefensivePreventionTime' has a wrong offset!");
static_assert(offsetof(FPlaystyleSwitchToAggressiveData, DamageThresholdToSwitchToAggressive) == 0x0000C0, "Member 'FPlaystyleSwitchToAggressiveData::DamageThresholdToSwitchToAggressive' has a wrong offset!");

// ScriptStruct FortniteAI.RangedWeaponSkill
// 0x00F0 (0x00F0 - 0x0000)
struct FRangedWeaponSkill final
{
public:
	struct FScalableFloat                         DelayBetweenShots;                                 // 0x0000(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         DelayDeviationTimeBetweenShots;                    // 0x0028(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         TriggerHoldDuration;                               // 0x0050(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         TriggerHoldDeviationTime;                          // 0x0078(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         DelayBeforeFirstShot;                              // 0x00A0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         ShotDelayAfterTargeting;                           // 0x00C8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FRangedWeaponSkill) == 0x000008, "Wrong alignment on FRangedWeaponSkill");
static_assert(sizeof(FRangedWeaponSkill) == 0x0000F0, "Wrong size on FRangedWeaponSkill");
static_assert(offsetof(FRangedWeaponSkill, DelayBetweenShots) == 0x000000, "Member 'FRangedWeaponSkill::DelayBetweenShots' has a wrong offset!");
static_assert(offsetof(FRangedWeaponSkill, DelayDeviationTimeBetweenShots) == 0x000028, "Member 'FRangedWeaponSkill::DelayDeviationTimeBetweenShots' has a wrong offset!");
static_assert(offsetof(FRangedWeaponSkill, TriggerHoldDuration) == 0x000050, "Member 'FRangedWeaponSkill::TriggerHoldDuration' has a wrong offset!");
static_assert(offsetof(FRangedWeaponSkill, TriggerHoldDeviationTime) == 0x000078, "Member 'FRangedWeaponSkill::TriggerHoldDeviationTime' has a wrong offset!");
static_assert(offsetof(FRangedWeaponSkill, DelayBeforeFirstShot) == 0x0000A0, "Member 'FRangedWeaponSkill::DelayBeforeFirstShot' has a wrong offset!");
static_assert(offsetof(FRangedWeaponSkill, ShotDelayAfterTargeting) == 0x0000C8, "Member 'FRangedWeaponSkill::ShotDelayAfterTargeting' has a wrong offset!");

// ScriptStruct FortniteAI.RangedWeaponSkillCategorySpecialization
// 0x0110 (0x0110 - 0x0000)
struct FRangedWeaponSkillCategorySpecialization final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FRangedWeaponSkill                     WeaponSkill;                                       // 0x0020(0x00F0)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FRangedWeaponSkillCategorySpecialization) == 0x000008, "Wrong alignment on FRangedWeaponSkillCategorySpecialization");
static_assert(sizeof(FRangedWeaponSkillCategorySpecialization) == 0x000110, "Wrong size on FRangedWeaponSkillCategorySpecialization");
static_assert(offsetof(FRangedWeaponSkillCategorySpecialization, Tags) == 0x000000, "Member 'FRangedWeaponSkillCategorySpecialization::Tags' has a wrong offset!");
static_assert(offsetof(FRangedWeaponSkillCategorySpecialization, WeaponSkill) == 0x000020, "Member 'FRangedWeaponSkillCategorySpecialization::WeaponSkill' has a wrong offset!");

// ScriptStruct FortniteAI.RangedWeaponSkillCategory
// 0x0120 (0x0120 - 0x0000)
struct FRangedWeaponSkillCategory final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FRangedWeaponSkill                     WeaponSkill;                                       // 0x0020(0x00F0)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TArray<struct FRangedWeaponSkillCategorySpecialization> Specializations;                                   // 0x0110(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FRangedWeaponSkillCategory) == 0x000008, "Wrong alignment on FRangedWeaponSkillCategory");
static_assert(sizeof(FRangedWeaponSkillCategory) == 0x000120, "Wrong size on FRangedWeaponSkillCategory");
static_assert(offsetof(FRangedWeaponSkillCategory, Tags) == 0x000000, "Member 'FRangedWeaponSkillCategory::Tags' has a wrong offset!");
static_assert(offsetof(FRangedWeaponSkillCategory, WeaponSkill) == 0x000020, "Member 'FRangedWeaponSkillCategory::WeaponSkill' has a wrong offset!");
static_assert(offsetof(FRangedWeaponSkillCategory, Specializations) == 0x000110, "Member 'FRangedWeaponSkillCategory::Specializations' has a wrong offset!");

// ScriptStruct FortniteAI.DigestedRangedWeaponSkill
// 0x0018 (0x0018 - 0x0000)
struct FDigestedRangedWeaponSkill final
{
public:
	float                                         DelayBetweenShots;                                 // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DelayDeviationTimeBetweenShots;                    // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TriggerHoldDuration;                               // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TriggerHoldDeviationTime;                          // 0x000C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DelayBeforeFirstShot;                              // 0x0010(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ShotDelayAfterTargeting;                           // 0x0014(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FDigestedRangedWeaponSkill) == 0x000004, "Wrong alignment on FDigestedRangedWeaponSkill");
static_assert(sizeof(FDigestedRangedWeaponSkill) == 0x000018, "Wrong size on FDigestedRangedWeaponSkill");
static_assert(offsetof(FDigestedRangedWeaponSkill, DelayBetweenShots) == 0x000000, "Member 'FDigestedRangedWeaponSkill::DelayBetweenShots' has a wrong offset!");
static_assert(offsetof(FDigestedRangedWeaponSkill, DelayDeviationTimeBetweenShots) == 0x000004, "Member 'FDigestedRangedWeaponSkill::DelayDeviationTimeBetweenShots' has a wrong offset!");
static_assert(offsetof(FDigestedRangedWeaponSkill, TriggerHoldDuration) == 0x000008, "Member 'FDigestedRangedWeaponSkill::TriggerHoldDuration' has a wrong offset!");
static_assert(offsetof(FDigestedRangedWeaponSkill, TriggerHoldDeviationTime) == 0x00000C, "Member 'FDigestedRangedWeaponSkill::TriggerHoldDeviationTime' has a wrong offset!");
static_assert(offsetof(FDigestedRangedWeaponSkill, DelayBeforeFirstShot) == 0x000010, "Member 'FDigestedRangedWeaponSkill::DelayBeforeFirstShot' has a wrong offset!");
static_assert(offsetof(FDigestedRangedWeaponSkill, ShotDelayAfterTargeting) == 0x000014, "Member 'FDigestedRangedWeaponSkill::ShotDelayAfterTargeting' has a wrong offset!");

// ScriptStruct FortniteAI.DigestedRangedWeaponSkillCategorySpecialization
// 0x0038 (0x0038 - 0x0000)
struct FDigestedRangedWeaponSkillCategorySpecialization final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Transient, NativeAccessSpecifierPrivate)
	struct FDigestedRangedWeaponSkill             WeaponSkill;                                       // 0x0020(0x0018)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FDigestedRangedWeaponSkillCategorySpecialization) == 0x000008, "Wrong alignment on FDigestedRangedWeaponSkillCategorySpecialization");
static_assert(sizeof(FDigestedRangedWeaponSkillCategorySpecialization) == 0x000038, "Wrong size on FDigestedRangedWeaponSkillCategorySpecialization");
static_assert(offsetof(FDigestedRangedWeaponSkillCategorySpecialization, Tags) == 0x000000, "Member 'FDigestedRangedWeaponSkillCategorySpecialization::Tags' has a wrong offset!");
static_assert(offsetof(FDigestedRangedWeaponSkillCategorySpecialization, WeaponSkill) == 0x000020, "Member 'FDigestedRangedWeaponSkillCategorySpecialization::WeaponSkill' has a wrong offset!");

// ScriptStruct FortniteAI.DigestedRangedWeaponSkillCategory
// 0x0048 (0x0048 - 0x0000)
struct FDigestedRangedWeaponSkillCategory final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Transient, NativeAccessSpecifierPrivate)
	struct FDigestedRangedWeaponSkill             WeaponSkill;                                       // 0x0020(0x0018)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
	TArray<struct FDigestedRangedWeaponSkillCategorySpecialization> Specializations;                                   // 0x0038(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FDigestedRangedWeaponSkillCategory) == 0x000008, "Wrong alignment on FDigestedRangedWeaponSkillCategory");
static_assert(sizeof(FDigestedRangedWeaponSkillCategory) == 0x000048, "Wrong size on FDigestedRangedWeaponSkillCategory");
static_assert(offsetof(FDigestedRangedWeaponSkillCategory, Tags) == 0x000000, "Member 'FDigestedRangedWeaponSkillCategory::Tags' has a wrong offset!");
static_assert(offsetof(FDigestedRangedWeaponSkillCategory, WeaponSkill) == 0x000020, "Member 'FDigestedRangedWeaponSkillCategory::WeaponSkill' has a wrong offset!");
static_assert(offsetof(FDigestedRangedWeaponSkillCategory, Specializations) == 0x000038, "Member 'FDigestedRangedWeaponSkillCategory::Specializations' has a wrong offset!");

// ScriptStruct FortniteAI.VehicleDigestedPIDController
// 0x000C (0x000C - 0x0000)
struct FVehicleDigestedPIDController final
{
public:
	float                                         KP;                                                // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KI;                                                // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KD;                                                // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleDigestedPIDController) == 0x000004, "Wrong alignment on FVehicleDigestedPIDController");
static_assert(sizeof(FVehicleDigestedPIDController) == 0x00000C, "Wrong size on FVehicleDigestedPIDController");
static_assert(offsetof(FVehicleDigestedPIDController, KP) == 0x000000, "Member 'FVehicleDigestedPIDController::KP' has a wrong offset!");
static_assert(offsetof(FVehicleDigestedPIDController, KI) == 0x000004, "Member 'FVehicleDigestedPIDController::KI' has a wrong offset!");
static_assert(offsetof(FVehicleDigestedPIDController, KD) == 0x000008, "Member 'FVehicleDigestedPIDController::KD' has a wrong offset!");

// ScriptStruct FortniteAI.VehiclePIDController
// 0x0078 (0x0078 - 0x0000)
struct FVehiclePIDController final
{
public:
	struct FScalableFloat                         KP;                                                // 0x0000(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         KI;                                                // 0x0028(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         KD;                                                // 0x0050(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehiclePIDController) == 0x000008, "Wrong alignment on FVehiclePIDController");
static_assert(sizeof(FVehiclePIDController) == 0x000078, "Wrong size on FVehiclePIDController");
static_assert(offsetof(FVehiclePIDController, KP) == 0x000000, "Member 'FVehiclePIDController::KP' has a wrong offset!");
static_assert(offsetof(FVehiclePIDController, KI) == 0x000028, "Member 'FVehiclePIDController::KI' has a wrong offset!");
static_assert(offsetof(FVehiclePIDController, KD) == 0x000050, "Member 'FVehiclePIDController::KD' has a wrong offset!");

// ScriptStruct FortniteAI.VehicleDigestedAppendToPath
// 0x0008 (0x0008 - 0x0000)
struct FVehicleDigestedAppendToPath final
{
public:
	float                                         MinimumPathLengthToEndOfPath;                      // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinTimeSinceLastAppend;                            // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleDigestedAppendToPath) == 0x000004, "Wrong alignment on FVehicleDigestedAppendToPath");
static_assert(sizeof(FVehicleDigestedAppendToPath) == 0x000008, "Wrong size on FVehicleDigestedAppendToPath");
static_assert(offsetof(FVehicleDigestedAppendToPath, MinimumPathLengthToEndOfPath) == 0x000000, "Member 'FVehicleDigestedAppendToPath::MinimumPathLengthToEndOfPath' has a wrong offset!");
static_assert(offsetof(FVehicleDigestedAppendToPath, MinTimeSinceLastAppend) == 0x000004, "Member 'FVehicleDigestedAppendToPath::MinTimeSinceLastAppend' has a wrong offset!");

// ScriptStruct FortniteAI.VehicleAppendToPath
// 0x0050 (0x0050 - 0x0000)
struct FVehicleAppendToPath final
{
public:
	struct FScalableFloat                         MinimumPathLengthToEndOfPath;                      // 0x0000(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MinTimeSinceLastAppend;                            // 0x0028(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleAppendToPath) == 0x000008, "Wrong alignment on FVehicleAppendToPath");
static_assert(sizeof(FVehicleAppendToPath) == 0x000050, "Wrong size on FVehicleAppendToPath");
static_assert(offsetof(FVehicleAppendToPath, MinimumPathLengthToEndOfPath) == 0x000000, "Member 'FVehicleAppendToPath::MinimumPathLengthToEndOfPath' has a wrong offset!");
static_assert(offsetof(FVehicleAppendToPath, MinTimeSinceLastAppend) == 0x000028, "Member 'FVehicleAppendToPath::MinTimeSinceLastAppend' has a wrong offset!");

// ScriptStruct FortniteAI.VehicleDigestedTurnInPlace
// 0x0018 (0x0018 - 0x0000)
struct FVehicleDigestedTurnInPlace final
{
public:
	float                                         MovingAngleBegin;                                  // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovingAngleEnd;                                    // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IdleAngleBegin;                                    // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IdleAngleEnd;                                      // 0x000C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinMovingSpeed;                                    // 0x0010(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMissedPathPointReverse;                           // 0x0014(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehicleDigestedTurnInPlace) == 0x000004, "Wrong alignment on FVehicleDigestedTurnInPlace");
static_assert(sizeof(FVehicleDigestedTurnInPlace) == 0x000018, "Wrong size on FVehicleDigestedTurnInPlace");
static_assert(offsetof(FVehicleDigestedTurnInPlace, MovingAngleBegin) == 0x000000, "Member 'FVehicleDigestedTurnInPlace::MovingAngleBegin' has a wrong offset!");
static_assert(offsetof(FVehicleDigestedTurnInPlace, MovingAngleEnd) == 0x000004, "Member 'FVehicleDigestedTurnInPlace::MovingAngleEnd' has a wrong offset!");
static_assert(offsetof(FVehicleDigestedTurnInPlace, IdleAngleBegin) == 0x000008, "Member 'FVehicleDigestedTurnInPlace::IdleAngleBegin' has a wrong offset!");
static_assert(offsetof(FVehicleDigestedTurnInPlace, IdleAngleEnd) == 0x00000C, "Member 'FVehicleDigestedTurnInPlace::IdleAngleEnd' has a wrong offset!");
static_assert(offsetof(FVehicleDigestedTurnInPlace, MinMovingSpeed) == 0x000010, "Member 'FVehicleDigestedTurnInPlace::MinMovingSpeed' has a wrong offset!");
static_assert(offsetof(FVehicleDigestedTurnInPlace, bMissedPathPointReverse) == 0x000014, "Member 'FVehicleDigestedTurnInPlace::bMissedPathPointReverse' has a wrong offset!");

// ScriptStruct FortniteAI.VehicleTurnInPlace
// 0x00D0 (0x00D0 - 0x0000)
struct FVehicleTurnInPlace final
{
public:
	struct FScalableFloat                         MovingAngleBegin;                                  // 0x0000(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MovingAngleEnd;                                    // 0x0028(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         IdleAngleBegin;                                    // 0x0050(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         IdleAngleEnd;                                      // 0x0078(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MinMovingSpeed;                                    // 0x00A0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bMissedPathPointReverse;                           // 0x00C8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehicleTurnInPlace) == 0x000008, "Wrong alignment on FVehicleTurnInPlace");
static_assert(sizeof(FVehicleTurnInPlace) == 0x0000D0, "Wrong size on FVehicleTurnInPlace");
static_assert(offsetof(FVehicleTurnInPlace, MovingAngleBegin) == 0x000000, "Member 'FVehicleTurnInPlace::MovingAngleBegin' has a wrong offset!");
static_assert(offsetof(FVehicleTurnInPlace, MovingAngleEnd) == 0x000028, "Member 'FVehicleTurnInPlace::MovingAngleEnd' has a wrong offset!");
static_assert(offsetof(FVehicleTurnInPlace, IdleAngleBegin) == 0x000050, "Member 'FVehicleTurnInPlace::IdleAngleBegin' has a wrong offset!");
static_assert(offsetof(FVehicleTurnInPlace, IdleAngleEnd) == 0x000078, "Member 'FVehicleTurnInPlace::IdleAngleEnd' has a wrong offset!");
static_assert(offsetof(FVehicleTurnInPlace, MinMovingSpeed) == 0x0000A0, "Member 'FVehicleTurnInPlace::MinMovingSpeed' has a wrong offset!");
static_assert(offsetof(FVehicleTurnInPlace, bMissedPathPointReverse) == 0x0000C8, "Member 'FVehicleTurnInPlace::bMissedPathPointReverse' has a wrong offset!");

// ScriptStruct FortniteAI.DigestedVehicleDriving
// 0x0098 (0x0098 - 0x0000)
struct FDigestedVehicleDriving final
{
public:
	bool                                          bCanTurnInPlace;                                   // 0x0000(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAvoidanceEnabled;                                 // 0x0001(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPreventTurningWhenStopping;                       // 0x0002(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      AvoidanceTagQuery;                                 // 0x0008(0x0048)(Transient, Protected, NativeAccessSpecifierProtected)
	bool                                          bReverseSwapLeftAndRight;                          // 0x0050(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinimumForwardPIDValueForStopping;                 // 0x0054(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinimumDistanceLeftForBoosting;                    // 0x0058(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVehicleDigestedPIDController          ForwardPIDController;                              // 0x005C(0x000C)(Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVehicleDigestedPIDController          SteeringPIDController;                             // 0x0068(0x000C)(Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVehicleDigestedAppendToPath           AppendToPath;                                      // 0x0074(0x0008)(Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVehicleDigestedTurnInPlace            TurnInPlace;                                       // 0x007C(0x0018)(Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDigestedVehicleDriving) == 0x000008, "Wrong alignment on FDigestedVehicleDriving");
static_assert(sizeof(FDigestedVehicleDriving) == 0x000098, "Wrong size on FDigestedVehicleDriving");
static_assert(offsetof(FDigestedVehicleDriving, bCanTurnInPlace) == 0x000000, "Member 'FDigestedVehicleDriving::bCanTurnInPlace' has a wrong offset!");
static_assert(offsetof(FDigestedVehicleDriving, bAvoidanceEnabled) == 0x000001, "Member 'FDigestedVehicleDriving::bAvoidanceEnabled' has a wrong offset!");
static_assert(offsetof(FDigestedVehicleDriving, bPreventTurningWhenStopping) == 0x000002, "Member 'FDigestedVehicleDriving::bPreventTurningWhenStopping' has a wrong offset!");
static_assert(offsetof(FDigestedVehicleDriving, AvoidanceTagQuery) == 0x000008, "Member 'FDigestedVehicleDriving::AvoidanceTagQuery' has a wrong offset!");
static_assert(offsetof(FDigestedVehicleDriving, bReverseSwapLeftAndRight) == 0x000050, "Member 'FDigestedVehicleDriving::bReverseSwapLeftAndRight' has a wrong offset!");
static_assert(offsetof(FDigestedVehicleDriving, MinimumForwardPIDValueForStopping) == 0x000054, "Member 'FDigestedVehicleDriving::MinimumForwardPIDValueForStopping' has a wrong offset!");
static_assert(offsetof(FDigestedVehicleDriving, MinimumDistanceLeftForBoosting) == 0x000058, "Member 'FDigestedVehicleDriving::MinimumDistanceLeftForBoosting' has a wrong offset!");
static_assert(offsetof(FDigestedVehicleDriving, ForwardPIDController) == 0x00005C, "Member 'FDigestedVehicleDriving::ForwardPIDController' has a wrong offset!");
static_assert(offsetof(FDigestedVehicleDriving, SteeringPIDController) == 0x000068, "Member 'FDigestedVehicleDriving::SteeringPIDController' has a wrong offset!");
static_assert(offsetof(FDigestedVehicleDriving, AppendToPath) == 0x000074, "Member 'FDigestedVehicleDriving::AppendToPath' has a wrong offset!");
static_assert(offsetof(FDigestedVehicleDriving, TurnInPlace) == 0x00007C, "Member 'FDigestedVehicleDriving::TurnInPlace' has a wrong offset!");

// ScriptStruct FortniteAI.DigestedVehicleDrivingCategory
// 0x00B8 (0x00B8 - 0x0000)
struct FDigestedVehicleDrivingCategory final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Transient, NativeAccessSpecifierPrivate)
	struct FDigestedVehicleDriving                VehicleDriving;                                    // 0x0020(0x0098)(Transient, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FDigestedVehicleDrivingCategory) == 0x000008, "Wrong alignment on FDigestedVehicleDrivingCategory");
static_assert(sizeof(FDigestedVehicleDrivingCategory) == 0x0000B8, "Wrong size on FDigestedVehicleDrivingCategory");
static_assert(offsetof(FDigestedVehicleDrivingCategory, Tags) == 0x000000, "Member 'FDigestedVehicleDrivingCategory::Tags' has a wrong offset!");
static_assert(offsetof(FDigestedVehicleDrivingCategory, VehicleDriving) == 0x000020, "Member 'FDigestedVehicleDrivingCategory::VehicleDriving' has a wrong offset!");

// ScriptStruct FortniteAI.VehicleDriving
// 0x02E0 (0x02E0 - 0x0000)
struct FVehicleDriving final
{
public:
	bool                                          bCanTurnInPlace;                                   // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVehicleTurnInPlace                    TurnInPlace;                                       // 0x0008(0x00D0)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         ReverseSwapLeftAndRight;                           // 0x00D8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MinimumForwardPIDValueForStopping;                 // 0x0100(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MinimumDistanceLeftForBoosting;                    // 0x0128(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FVehiclePIDController                  ForwardPIDController;                              // 0x0150(0x0078)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FVehiclePIDController                  SteeringPIDController;                             // 0x01C8(0x0078)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	bool                                          bAvoidanceEnabled;                                 // 0x0240(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bPreventTurningWhenStopping;                       // 0x0241(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_242[0x6];                                      // 0x0242(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      AvoidanceTagQuery;                                 // 0x0248(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FVehicleAppendToPath                   AppendToPath;                                      // 0x0290(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FVehicleDriving) == 0x000008, "Wrong alignment on FVehicleDriving");
static_assert(sizeof(FVehicleDriving) == 0x0002E0, "Wrong size on FVehicleDriving");
static_assert(offsetof(FVehicleDriving, bCanTurnInPlace) == 0x000000, "Member 'FVehicleDriving::bCanTurnInPlace' has a wrong offset!");
static_assert(offsetof(FVehicleDriving, TurnInPlace) == 0x000008, "Member 'FVehicleDriving::TurnInPlace' has a wrong offset!");
static_assert(offsetof(FVehicleDriving, ReverseSwapLeftAndRight) == 0x0000D8, "Member 'FVehicleDriving::ReverseSwapLeftAndRight' has a wrong offset!");
static_assert(offsetof(FVehicleDriving, MinimumForwardPIDValueForStopping) == 0x000100, "Member 'FVehicleDriving::MinimumForwardPIDValueForStopping' has a wrong offset!");
static_assert(offsetof(FVehicleDriving, MinimumDistanceLeftForBoosting) == 0x000128, "Member 'FVehicleDriving::MinimumDistanceLeftForBoosting' has a wrong offset!");
static_assert(offsetof(FVehicleDriving, ForwardPIDController) == 0x000150, "Member 'FVehicleDriving::ForwardPIDController' has a wrong offset!");
static_assert(offsetof(FVehicleDriving, SteeringPIDController) == 0x0001C8, "Member 'FVehicleDriving::SteeringPIDController' has a wrong offset!");
static_assert(offsetof(FVehicleDriving, bAvoidanceEnabled) == 0x000240, "Member 'FVehicleDriving::bAvoidanceEnabled' has a wrong offset!");
static_assert(offsetof(FVehicleDriving, bPreventTurningWhenStopping) == 0x000241, "Member 'FVehicleDriving::bPreventTurningWhenStopping' has a wrong offset!");
static_assert(offsetof(FVehicleDriving, AvoidanceTagQuery) == 0x000248, "Member 'FVehicleDriving::AvoidanceTagQuery' has a wrong offset!");
static_assert(offsetof(FVehicleDriving, AppendToPath) == 0x000290, "Member 'FVehicleDriving::AppendToPath' has a wrong offset!");

// ScriptStruct FortniteAI.VehicleDrivingCategory
// 0x0300 (0x0300 - 0x0000)
struct FVehicleDrivingCategory final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FVehicleDriving                        VehicleDriving;                                    // 0x0020(0x02E0)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FVehicleDrivingCategory) == 0x000008, "Wrong alignment on FVehicleDrivingCategory");
static_assert(sizeof(FVehicleDrivingCategory) == 0x000300, "Wrong size on FVehicleDrivingCategory");
static_assert(offsetof(FVehicleDrivingCategory, Tags) == 0x000000, "Member 'FVehicleDrivingCategory::Tags' has a wrong offset!");
static_assert(offsetof(FVehicleDrivingCategory, VehicleDriving) == 0x000020, "Member 'FVehicleDrivingCategory::VehicleDriving' has a wrong offset!");

// ScriptStruct FortniteAI.MovementEvaluatorInfo
// 0x0010 (0x0010 - 0x0000)
struct FMovementEvaluatorInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAthenaAIBotEvaluator_Movement*     MovementEval;                                      // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovementEvaluatorInfo) == 0x000008, "Wrong alignment on FMovementEvaluatorInfo");
static_assert(sizeof(FMovementEvaluatorInfo) == 0x000010, "Wrong size on FMovementEvaluatorInfo");
static_assert(offsetof(FMovementEvaluatorInfo, MovementEval) == 0x000008, "Member 'FMovementEvaluatorInfo::MovementEval' has a wrong offset!");

// ScriptStruct FortniteAI.FortAthenaAILODSetting
// 0x0001 (0x0001 - 0x0000)
struct FFortAthenaAILODSetting
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAthenaAILODSetting) == 0x000001, "Wrong alignment on FFortAthenaAILODSetting");
static_assert(sizeof(FFortAthenaAILODSetting) == 0x000001, "Wrong size on FFortAthenaAILODSetting");
static_assert(offsetof(FFortAthenaAILODSetting, bIsValid) == 0x000000, "Member 'FFortAthenaAILODSetting::bIsValid' has a wrong offset!");

// ScriptStruct FortniteAI.FortAILODSetting_AIEvaluator
// 0x0067 (0x0068 - 0x0001)
struct FFortAILODSetting_AIEvaluator final : public FFortAthenaAILODSetting
{
public:
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         IntervalMultiplier;                                // 0x0008(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         RandomDeviationMultiplier;                         // 0x0038(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_60[0x8];                                       // 0x0060(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAILODSetting_AIEvaluator) == 0x000008, "Wrong alignment on FFortAILODSetting_AIEvaluator");
static_assert(sizeof(FFortAILODSetting_AIEvaluator) == 0x000068, "Wrong size on FFortAILODSetting_AIEvaluator");
static_assert(offsetof(FFortAILODSetting_AIEvaluator, IntervalMultiplier) == 0x000008, "Member 'FFortAILODSetting_AIEvaluator::IntervalMultiplier' has a wrong offset!");
static_assert(offsetof(FFortAILODSetting_AIEvaluator, RandomDeviationMultiplier) == 0x000038, "Member 'FFortAILODSetting_AIEvaluator::RandomDeviationMultiplier' has a wrong offset!");

// ScriptStruct FortniteAI.FortAILODSetting_CharacterMovement
// 0x0187 (0x0188 - 0x0001)
struct FFortAILODSetting_CharacterMovement final : public FFortAthenaAILODSetting
{
public:
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Interval;                                          // 0x0008(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         RandomDeviation;                                   // 0x0030(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MinimumDynamicInterval;                            // 0x0058(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MaximumDotDifferenceBetweenInputVectors;           // 0x0080(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         bDisableAvoidance;                                 // 0x00A8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         bBotsEnableNavWalkingMode;                         // 0x00D0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         bBotsEnablePhysNavWalkingPathFollowingMode;        // 0x00F8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         bSweepWhileNavWalking;                             // 0x0120(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         bGenerateOverlapInNavWalking;                      // 0x0148(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_170[0x18];                                     // 0x0170(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAILODSetting_CharacterMovement) == 0x000008, "Wrong alignment on FFortAILODSetting_CharacterMovement");
static_assert(sizeof(FFortAILODSetting_CharacterMovement) == 0x000188, "Wrong size on FFortAILODSetting_CharacterMovement");
static_assert(offsetof(FFortAILODSetting_CharacterMovement, Interval) == 0x000008, "Member 'FFortAILODSetting_CharacterMovement::Interval' has a wrong offset!");
static_assert(offsetof(FFortAILODSetting_CharacterMovement, RandomDeviation) == 0x000030, "Member 'FFortAILODSetting_CharacterMovement::RandomDeviation' has a wrong offset!");
static_assert(offsetof(FFortAILODSetting_CharacterMovement, MinimumDynamicInterval) == 0x000058, "Member 'FFortAILODSetting_CharacterMovement::MinimumDynamicInterval' has a wrong offset!");
static_assert(offsetof(FFortAILODSetting_CharacterMovement, MaximumDotDifferenceBetweenInputVectors) == 0x000080, "Member 'FFortAILODSetting_CharacterMovement::MaximumDotDifferenceBetweenInputVectors' has a wrong offset!");
static_assert(offsetof(FFortAILODSetting_CharacterMovement, bDisableAvoidance) == 0x0000A8, "Member 'FFortAILODSetting_CharacterMovement::bDisableAvoidance' has a wrong offset!");
static_assert(offsetof(FFortAILODSetting_CharacterMovement, bBotsEnableNavWalkingMode) == 0x0000D0, "Member 'FFortAILODSetting_CharacterMovement::bBotsEnableNavWalkingMode' has a wrong offset!");
static_assert(offsetof(FFortAILODSetting_CharacterMovement, bBotsEnablePhysNavWalkingPathFollowingMode) == 0x0000F8, "Member 'FFortAILODSetting_CharacterMovement::bBotsEnablePhysNavWalkingPathFollowingMode' has a wrong offset!");
static_assert(offsetof(FFortAILODSetting_CharacterMovement, bSweepWhileNavWalking) == 0x000120, "Member 'FFortAILODSetting_CharacterMovement::bSweepWhileNavWalking' has a wrong offset!");
static_assert(offsetof(FFortAILODSetting_CharacterMovement, bGenerateOverlapInNavWalking) == 0x000148, "Member 'FFortAILODSetting_CharacterMovement::bGenerateOverlapInNavWalking' has a wrong offset!");

// ScriptStruct FortniteAI.FortAILODSetting_FortWeaponRanged
// 0x0067 (0x0068 - 0x0001)
struct FFortAILODSetting_FortWeaponRanged final : public FFortAthenaAILODSetting
{
public:
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Interval;                                          // 0x0008(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         RandomDeviation;                                   // 0x0038(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_60[0x8];                                       // 0x0060(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAILODSetting_FortWeaponRanged) == 0x000008, "Wrong alignment on FFortAILODSetting_FortWeaponRanged");
static_assert(sizeof(FFortAILODSetting_FortWeaponRanged) == 0x000068, "Wrong size on FFortAILODSetting_FortWeaponRanged");
static_assert(offsetof(FFortAILODSetting_FortWeaponRanged, Interval) == 0x000008, "Member 'FFortAILODSetting_FortWeaponRanged::Interval' has a wrong offset!");
static_assert(offsetof(FFortAILODSetting_FortWeaponRanged, RandomDeviation) == 0x000038, "Member 'FFortAILODSetting_FortWeaponRanged::RandomDeviation' has a wrong offset!");

// ScriptStruct FortniteAI.FortAILODSetting_GenericTickingObject
// 0x0037 (0x0038 - 0x0001)
struct FFortAILODSetting_GenericTickingObject final : public FFortAthenaAILODSetting
{
public:
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         TickMultiplier;                                    // 0x0008(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAILODSetting_GenericTickingObject) == 0x000008, "Wrong alignment on FFortAILODSetting_GenericTickingObject");
static_assert(sizeof(FFortAILODSetting_GenericTickingObject) == 0x000038, "Wrong size on FFortAILODSetting_GenericTickingObject");
static_assert(offsetof(FFortAILODSetting_GenericTickingObject, TickMultiplier) == 0x000008, "Member 'FFortAILODSetting_GenericTickingObject::TickMultiplier' has a wrong offset!");

// ScriptStruct FortniteAI.AITrackedObjectsSet
// 0x0100 (0x0100 - 0x0000)
struct alignas(0x10) FAITrackedObjectsSet final
{
public:
	uint8                                         Pad_0[0x100];                                      // 0x0000(0x0100)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAITrackedObjectsSet) == 0x000010, "Wrong alignment on FAITrackedObjectsSet");
static_assert(sizeof(FAITrackedObjectsSet) == 0x000100, "Wrong size on FAITrackedObjectsSet");

// ScriptStruct FortniteAI.FortAIRuntimePerkInfo_Bunker
// 0x0020 (0x0060 - 0x0040)
struct FFortAIRuntimePerkInfo_Bunker final : public FFortAIRuntimePerkInfo
{
public:
	float                                         OddsToBeUsedAgainstUnknownThreat;                  // 0x0040(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OddsToUseRoofBuilding;                             // 0x0044(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OddsToBuildForwardRamp;                            // 0x0048(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         InitialBuildDelay;                                 // 0x004C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SamePieceBuildDelay;                               // 0x0050(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SamePieceBuildDelayRandomDeviation;                // 0x0054(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DifferentPieceBuildDelay;                          // 0x0058(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DifferentPieceBuildDelayRandomDeviation;           // 0x005C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortAIRuntimePerkInfo_Bunker) == 0x000008, "Wrong alignment on FFortAIRuntimePerkInfo_Bunker");
static_assert(sizeof(FFortAIRuntimePerkInfo_Bunker) == 0x000060, "Wrong size on FFortAIRuntimePerkInfo_Bunker");
static_assert(offsetof(FFortAIRuntimePerkInfo_Bunker, OddsToBeUsedAgainstUnknownThreat) == 0x000040, "Member 'FFortAIRuntimePerkInfo_Bunker::OddsToBeUsedAgainstUnknownThreat' has a wrong offset!");
static_assert(offsetof(FFortAIRuntimePerkInfo_Bunker, OddsToUseRoofBuilding) == 0x000044, "Member 'FFortAIRuntimePerkInfo_Bunker::OddsToUseRoofBuilding' has a wrong offset!");
static_assert(offsetof(FFortAIRuntimePerkInfo_Bunker, OddsToBuildForwardRamp) == 0x000048, "Member 'FFortAIRuntimePerkInfo_Bunker::OddsToBuildForwardRamp' has a wrong offset!");
static_assert(offsetof(FFortAIRuntimePerkInfo_Bunker, InitialBuildDelay) == 0x00004C, "Member 'FFortAIRuntimePerkInfo_Bunker::InitialBuildDelay' has a wrong offset!");
static_assert(offsetof(FFortAIRuntimePerkInfo_Bunker, SamePieceBuildDelay) == 0x000050, "Member 'FFortAIRuntimePerkInfo_Bunker::SamePieceBuildDelay' has a wrong offset!");
static_assert(offsetof(FFortAIRuntimePerkInfo_Bunker, SamePieceBuildDelayRandomDeviation) == 0x000054, "Member 'FFortAIRuntimePerkInfo_Bunker::SamePieceBuildDelayRandomDeviation' has a wrong offset!");
static_assert(offsetof(FFortAIRuntimePerkInfo_Bunker, DifferentPieceBuildDelay) == 0x000058, "Member 'FFortAIRuntimePerkInfo_Bunker::DifferentPieceBuildDelay' has a wrong offset!");
static_assert(offsetof(FFortAIRuntimePerkInfo_Bunker, DifferentPieceBuildDelayRandomDeviation) == 0x00005C, "Member 'FFortAIRuntimePerkInfo_Bunker::DifferentPieceBuildDelayRandomDeviation' has a wrong offset!");

// ScriptStruct FortniteAI.FortAIRuntimePerkInfo_EvasiveManeuvers
// 0x0060 (0x00A0 - 0x0040)
struct FFortAIRuntimePerkInfo_EvasiveManeuvers final : public FFortAIRuntimePerkInfo
{
public:
	uint8                                         Pad_40[0x58];                                      // 0x0040(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceMinSquared;                                // 0x0098(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DistanceMaxSquared;                                // 0x009C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortAIRuntimePerkInfo_EvasiveManeuvers) == 0x000008, "Wrong alignment on FFortAIRuntimePerkInfo_EvasiveManeuvers");
static_assert(sizeof(FFortAIRuntimePerkInfo_EvasiveManeuvers) == 0x0000A0, "Wrong size on FFortAIRuntimePerkInfo_EvasiveManeuvers");
static_assert(offsetof(FFortAIRuntimePerkInfo_EvasiveManeuvers, DistanceMinSquared) == 0x000098, "Member 'FFortAIRuntimePerkInfo_EvasiveManeuvers::DistanceMinSquared' has a wrong offset!");
static_assert(offsetof(FFortAIRuntimePerkInfo_EvasiveManeuvers, DistanceMaxSquared) == 0x00009C, "Member 'FFortAIRuntimePerkInfo_EvasiveManeuvers::DistanceMaxSquared' has a wrong offset!");

// ScriptStruct FortniteAI.FortSmartObjectSlotDefinitionData
// 0x000C (0x000C - 0x0000)
struct FFortSmartObjectSlotDefinitionData final : public FSmartObjectSlotDefinitionData
{
public:
	float                                         CooldownOnFinished;                                // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CooldownOnInterrupted;                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Radius;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortSmartObjectSlotDefinitionData) == 0x000004, "Wrong alignment on FFortSmartObjectSlotDefinitionData");
static_assert(sizeof(FFortSmartObjectSlotDefinitionData) == 0x00000C, "Wrong size on FFortSmartObjectSlotDefinitionData");
static_assert(offsetof(FFortSmartObjectSlotDefinitionData, CooldownOnFinished) == 0x000000, "Member 'FFortSmartObjectSlotDefinitionData::CooldownOnFinished' has a wrong offset!");
static_assert(offsetof(FFortSmartObjectSlotDefinitionData, CooldownOnInterrupted) == 0x000004, "Member 'FFortSmartObjectSlotDefinitionData::CooldownOnInterrupted' has a wrong offset!");
static_assert(offsetof(FFortSmartObjectSlotDefinitionData, Radius) == 0x000008, "Member 'FFortSmartObjectSlotDefinitionData::Radius' has a wrong offset!");

// ScriptStruct FortniteAI.SmartObjectRecentlyUsed
// 0x0014 (0x0014 - 0x0000)
struct alignas(0x04) FSmartObjectRecentlyUsed final
{
public:
	uint8                                         Pad_0[0x14];                                       // 0x0000(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSmartObjectRecentlyUsed) == 0x000004, "Wrong alignment on FSmartObjectRecentlyUsed");
static_assert(sizeof(FSmartObjectRecentlyUsed) == 0x000014, "Wrong size on FSmartObjectRecentlyUsed");

// ScriptStruct FortniteAI.AIRuntimeParametersSmartObjectActivityCondition
// 0x0048 (0x0048 - 0x0000)
struct FAIRuntimeParametersSmartObjectActivityCondition final
{
public:
	struct FGameplayTagQuery                      SmartObjectActivityConditionTagQuery;              // 0x0000(0x0048)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAIRuntimeParametersSmartObjectActivityCondition) == 0x000008, "Wrong alignment on FAIRuntimeParametersSmartObjectActivityCondition");
static_assert(sizeof(FAIRuntimeParametersSmartObjectActivityCondition) == 0x000048, "Wrong size on FAIRuntimeParametersSmartObjectActivityCondition");
static_assert(offsetof(FAIRuntimeParametersSmartObjectActivityCondition, SmartObjectActivityConditionTagQuery) == 0x000000, "Member 'FAIRuntimeParametersSmartObjectActivityCondition::SmartObjectActivityConditionTagQuery' has a wrong offset!");

// ScriptStruct FortniteAI.AIRuntimeParametersSmartObjectActivityConfig
// 0x0058 (0x0058 - 0x0000)
struct FAIRuntimeParametersSmartObjectActivityConfig final
{
public:
	struct FGameplayTagQuery                      ActivityRequirements;                              // 0x0000(0x0048)(Transient, NativeAccessSpecifierPublic)
	float                                         MaxDetectionRadius;                                // 0x0048(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDetectionRadiusSqr;                             // 0x004C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActivityCooldownOnFinished;                        // 0x0050(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActivityCooldownOnInterrupted;                     // 0x0054(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAIRuntimeParametersSmartObjectActivityConfig) == 0x000008, "Wrong alignment on FAIRuntimeParametersSmartObjectActivityConfig");
static_assert(sizeof(FAIRuntimeParametersSmartObjectActivityConfig) == 0x000058, "Wrong size on FAIRuntimeParametersSmartObjectActivityConfig");
static_assert(offsetof(FAIRuntimeParametersSmartObjectActivityConfig, ActivityRequirements) == 0x000000, "Member 'FAIRuntimeParametersSmartObjectActivityConfig::ActivityRequirements' has a wrong offset!");
static_assert(offsetof(FAIRuntimeParametersSmartObjectActivityConfig, MaxDetectionRadius) == 0x000048, "Member 'FAIRuntimeParametersSmartObjectActivityConfig::MaxDetectionRadius' has a wrong offset!");
static_assert(offsetof(FAIRuntimeParametersSmartObjectActivityConfig, MaxDetectionRadiusSqr) == 0x00004C, "Member 'FAIRuntimeParametersSmartObjectActivityConfig::MaxDetectionRadiusSqr' has a wrong offset!");
static_assert(offsetof(FAIRuntimeParametersSmartObjectActivityConfig, ActivityCooldownOnFinished) == 0x000050, "Member 'FAIRuntimeParametersSmartObjectActivityConfig::ActivityCooldownOnFinished' has a wrong offset!");
static_assert(offsetof(FAIRuntimeParametersSmartObjectActivityConfig, ActivityCooldownOnInterrupted) == 0x000054, "Member 'FAIRuntimeParametersSmartObjectActivityConfig::ActivityCooldownOnInterrupted' has a wrong offset!");

// ScriptStruct FortniteAI.AIRuntimeParametersSmartObjectActivity
// 0x00B0 (0x00B0 - 0x0000)
struct FAIRuntimeParametersSmartObjectActivity final
{
public:
	struct FAIRuntimeParametersSmartObjectActivityCondition SmartObjectActivityCondition;                      // 0x0000(0x0048)(Transient, NativeAccessSpecifierPublic)
	struct FAIRuntimeParametersSmartObjectActivityConfig SmartObjectActivityConfig;                         // 0x0048(0x0058)(Transient, NativeAccessSpecifierPublic)
	uint8                                         bEnabled : 1;                                      // 0x00A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ActivityId;                                        // 0x00A4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastUseTimestamp;                                  // 0x00A8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Cooldown;                                          // 0x00AC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAIRuntimeParametersSmartObjectActivity) == 0x000008, "Wrong alignment on FAIRuntimeParametersSmartObjectActivity");
static_assert(sizeof(FAIRuntimeParametersSmartObjectActivity) == 0x0000B0, "Wrong size on FAIRuntimeParametersSmartObjectActivity");
static_assert(offsetof(FAIRuntimeParametersSmartObjectActivity, SmartObjectActivityCondition) == 0x000000, "Member 'FAIRuntimeParametersSmartObjectActivity::SmartObjectActivityCondition' has a wrong offset!");
static_assert(offsetof(FAIRuntimeParametersSmartObjectActivity, SmartObjectActivityConfig) == 0x000048, "Member 'FAIRuntimeParametersSmartObjectActivity::SmartObjectActivityConfig' has a wrong offset!");
static_assert(offsetof(FAIRuntimeParametersSmartObjectActivity, ActivityId) == 0x0000A4, "Member 'FAIRuntimeParametersSmartObjectActivity::ActivityId' has a wrong offset!");
static_assert(offsetof(FAIRuntimeParametersSmartObjectActivity, LastUseTimestamp) == 0x0000A8, "Member 'FAIRuntimeParametersSmartObjectActivity::LastUseTimestamp' has a wrong offset!");
static_assert(offsetof(FAIRuntimeParametersSmartObjectActivity, Cooldown) == 0x0000AC, "Member 'FAIRuntimeParametersSmartObjectActivity::Cooldown' has a wrong offset!");

// ScriptStruct FortniteAI.FortAthenaAISmartObjectActivityCondition
// 0x0048 (0x0048 - 0x0000)
struct FFortAthenaAISmartObjectActivityCondition final
{
public:
	struct FGameplayTagQuery                      SmartObjectActivityConditionTagQuery;              // 0x0000(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAthenaAISmartObjectActivityCondition) == 0x000008, "Wrong alignment on FFortAthenaAISmartObjectActivityCondition");
static_assert(sizeof(FFortAthenaAISmartObjectActivityCondition) == 0x000048, "Wrong size on FFortAthenaAISmartObjectActivityCondition");
static_assert(offsetof(FFortAthenaAISmartObjectActivityCondition, SmartObjectActivityConditionTagQuery) == 0x000000, "Member 'FFortAthenaAISmartObjectActivityCondition::SmartObjectActivityConditionTagQuery' has a wrong offset!");

// ScriptStruct FortniteAI.FortAthenaAISmartObjectActivityConfig
// 0x00C0 (0x00C0 - 0x0000)
struct FFortAthenaAISmartObjectActivityConfig final
{
public:
	struct FGameplayTagQuery                      ActivityRequirements;                              // 0x0000(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MaxDetectionRadius;                                // 0x0048(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         ActivityCooldownOnFinished;                        // 0x0070(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         ActivityCooldownOnInterrupted;                     // 0x0098(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAthenaAISmartObjectActivityConfig) == 0x000008, "Wrong alignment on FFortAthenaAISmartObjectActivityConfig");
static_assert(sizeof(FFortAthenaAISmartObjectActivityConfig) == 0x0000C0, "Wrong size on FFortAthenaAISmartObjectActivityConfig");
static_assert(offsetof(FFortAthenaAISmartObjectActivityConfig, ActivityRequirements) == 0x000000, "Member 'FFortAthenaAISmartObjectActivityConfig::ActivityRequirements' has a wrong offset!");
static_assert(offsetof(FFortAthenaAISmartObjectActivityConfig, MaxDetectionRadius) == 0x000048, "Member 'FFortAthenaAISmartObjectActivityConfig::MaxDetectionRadius' has a wrong offset!");
static_assert(offsetof(FFortAthenaAISmartObjectActivityConfig, ActivityCooldownOnFinished) == 0x000070, "Member 'FFortAthenaAISmartObjectActivityConfig::ActivityCooldownOnFinished' has a wrong offset!");
static_assert(offsetof(FFortAthenaAISmartObjectActivityConfig, ActivityCooldownOnInterrupted) == 0x000098, "Member 'FFortAthenaAISmartObjectActivityConfig::ActivityCooldownOnInterrupted' has a wrong offset!");

// ScriptStruct FortniteAI.SpawnerDataComponentAffiliationSharedBBConfiguration
// 0x0040 (0x0040 - 0x0000)
struct FSpawnerDataComponentAffiliationSharedBBConfiguration final
{
public:
	struct FGameplayTag                           FactionTag;                                        // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         MaximumDistance;                                   // 0x0008(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SharedBlackboardTag;                               // 0x0030(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlackboardData*                        SharedBlackboard;                                  // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnerDataComponentAffiliationSharedBBConfiguration) == 0x000008, "Wrong alignment on FSpawnerDataComponentAffiliationSharedBBConfiguration");
static_assert(sizeof(FSpawnerDataComponentAffiliationSharedBBConfiguration) == 0x000040, "Wrong size on FSpawnerDataComponentAffiliationSharedBBConfiguration");
static_assert(offsetof(FSpawnerDataComponentAffiliationSharedBBConfiguration, FactionTag) == 0x000000, "Member 'FSpawnerDataComponentAffiliationSharedBBConfiguration::FactionTag' has a wrong offset!");
static_assert(offsetof(FSpawnerDataComponentAffiliationSharedBBConfiguration, MaximumDistance) == 0x000008, "Member 'FSpawnerDataComponentAffiliationSharedBBConfiguration::MaximumDistance' has a wrong offset!");
static_assert(offsetof(FSpawnerDataComponentAffiliationSharedBBConfiguration, SharedBlackboardTag) == 0x000030, "Member 'FSpawnerDataComponentAffiliationSharedBBConfiguration::SharedBlackboardTag' has a wrong offset!");
static_assert(offsetof(FSpawnerDataComponentAffiliationSharedBBConfiguration, SharedBlackboard) == 0x000038, "Member 'FSpawnerDataComponentAffiliationSharedBBConfiguration::SharedBlackboard' has a wrong offset!");

// ScriptStruct FortniteAI.ConstructionBuildingInfo
// 0x0018 (0x0018 - 0x0000)
struct FConstructionBuildingInfo final
{
public:
	TSubclassOf<class ABuildingSMActor>           BuildingActorClass[0x3];                           // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConstructionBuildingInfo) == 0x000008, "Wrong alignment on FConstructionBuildingInfo");
static_assert(sizeof(FConstructionBuildingInfo) == 0x000018, "Wrong size on FConstructionBuildingInfo");
static_assert(offsetof(FConstructionBuildingInfo, BuildingActorClass) == 0x000000, "Member 'FConstructionBuildingInfo::BuildingActorClass' has a wrong offset!");

// ScriptStruct FortniteAI.ConstructionBuildingList
// 0x0090 (0x0090 - 0x0000)
struct FConstructionBuildingList final
{
public:
	struct FConstructionBuildingInfo              BuildingList[0x6];                                 // 0x0000(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConstructionBuildingList) == 0x000008, "Wrong alignment on FConstructionBuildingList");
static_assert(sizeof(FConstructionBuildingList) == 0x000090, "Wrong size on FConstructionBuildingList");
static_assert(offsetof(FConstructionBuildingList, BuildingList) == 0x000000, "Member 'FConstructionBuildingList::BuildingList' has a wrong offset!");

// ScriptStruct FortniteAI.FortAthenaAIWeightedCosmeticLoadout
// 0x0190 (0x0190 - 0x0000)
struct FFortAthenaAIWeightedCosmeticLoadout final
{
public:
	TStructCycleFixup<struct FFortAthenaLoadout, 0x0168, 0x08> CosmeticLoadout;                                   // 0x0000(0x0168)(Edit, NativeAccessSpecifierPublic)
	struct FScalableFloat                         Weight;                                            // 0x0168(0x0028)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAthenaAIWeightedCosmeticLoadout) == 0x000008, "Wrong alignment on FFortAthenaAIWeightedCosmeticLoadout");
static_assert(sizeof(FFortAthenaAIWeightedCosmeticLoadout) == 0x000190, "Wrong size on FFortAthenaAIWeightedCosmeticLoadout");
static_assert(offsetof(FFortAthenaAIWeightedCosmeticLoadout, CosmeticLoadout) == 0x000000, "Member 'FFortAthenaAIWeightedCosmeticLoadout::CosmeticLoadout' has a wrong offset!");
static_assert(offsetof(FFortAthenaAIWeightedCosmeticLoadout, Weight) == 0x000168, "Member 'FFortAthenaAIWeightedCosmeticLoadout::Weight' has a wrong offset!");

// ScriptStruct FortniteAI.InitialGameplayEffectInfo
// 0x0010 (0x0010 - 0x0000)
struct FInitialGameplayEffectInfo final
{
public:
	TSubclassOf<class UGameplayEffect>            GameplayEffect;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Level;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInitialGameplayEffectInfo) == 0x000008, "Wrong alignment on FInitialGameplayEffectInfo");
static_assert(sizeof(FInitialGameplayEffectInfo) == 0x000010, "Wrong size on FInitialGameplayEffectInfo");
static_assert(offsetof(FInitialGameplayEffectInfo, GameplayEffect) == 0x000000, "Member 'FInitialGameplayEffectInfo::GameplayEffect' has a wrong offset!");
static_assert(offsetof(FInitialGameplayEffectInfo, Level) == 0x000008, "Member 'FInitialGameplayEffectInfo::Level' has a wrong offset!");

// ScriptStruct FortniteAI.TeleportSettings
// 0x0038 (0x0038 - 0x0000)
struct FTeleportSettings final
{
public:
	struct FScalableFloat                         CheckTeleportConditionsTimeInterval;               // 0x0000(0x0028)(Edit, NativeAccessSpecifierPublic)
	float                                         TeleportRange;                                     // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeNeededOutsideTeleportRange;                    // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TeleportAbilityTag;                                // 0x0030(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTeleportSettings) == 0x000008, "Wrong alignment on FTeleportSettings");
static_assert(sizeof(FTeleportSettings) == 0x000038, "Wrong size on FTeleportSettings");
static_assert(offsetof(FTeleportSettings, CheckTeleportConditionsTimeInterval) == 0x000000, "Member 'FTeleportSettings::CheckTeleportConditionsTimeInterval' has a wrong offset!");
static_assert(offsetof(FTeleportSettings, TeleportRange) == 0x000028, "Member 'FTeleportSettings::TeleportRange' has a wrong offset!");
static_assert(offsetof(FTeleportSettings, TimeNeededOutsideTeleportRange) == 0x00002C, "Member 'FTeleportSettings::TimeNeededOutsideTeleportRange' has a wrong offset!");
static_assert(offsetof(FTeleportSettings, TeleportAbilityTag) == 0x000030, "Member 'FTeleportSettings::TeleportAbilityTag' has a wrong offset!");

// ScriptStruct FortniteAI.AILootInfoRowEntry
// 0x0060 (0x0060 - 0x0000)
struct FAILootInfoRowEntry final
{
public:
	struct FGameplayTagQuery                      OptionalTagQuery;                                  // 0x0000(0x0048)(Edit, NativeAccessSpecifierPublic)
	uint8                                         bShouldDropInventoryOnDeath : 1;                   // 0x0048(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShouldDropLootOnDeath : 1;                        // 0x0048(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           LootTiers;                                         // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAILootInfoRowEntry) == 0x000008, "Wrong alignment on FAILootInfoRowEntry");
static_assert(sizeof(FAILootInfoRowEntry) == 0x000060, "Wrong size on FAILootInfoRowEntry");
static_assert(offsetof(FAILootInfoRowEntry, OptionalTagQuery) == 0x000000, "Member 'FAILootInfoRowEntry::OptionalTagQuery' has a wrong offset!");
static_assert(offsetof(FAILootInfoRowEntry, LootTiers) == 0x000050, "Member 'FAILootInfoRowEntry::LootTiers' has a wrong offset!");

// ScriptStruct FortniteAI.FortAthenaAILootInfoDataTableRow
// 0x0010 (0x0018 - 0x0008)
struct FFortAthenaAILootInfoDataTableRow final : public FTableRowBase
{
public:
	TArray<struct FAILootInfoRowEntry>            LootDroppingBehaviors;                             // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAthenaAILootInfoDataTableRow) == 0x000008, "Wrong alignment on FFortAthenaAILootInfoDataTableRow");
static_assert(sizeof(FFortAthenaAILootInfoDataTableRow) == 0x000018, "Wrong size on FFortAthenaAILootInfoDataTableRow");
static_assert(offsetof(FFortAthenaAILootInfoDataTableRow, LootDroppingBehaviors) == 0x000008, "Member 'FFortAthenaAILootInfoDataTableRow::LootDroppingBehaviors' has a wrong offset!");

// ScriptStruct FortniteAI.WeightedAIInventoryLoadout
// 0x0038 (0x0038 - 0x0000)
struct FWeightedAIInventoryLoadout final
{
public:
	struct FScalableFloat                         Weight;                                            // 0x0000(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FItemAndCount>                  Items;                                             // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeightedAIInventoryLoadout) == 0x000008, "Wrong alignment on FWeightedAIInventoryLoadout");
static_assert(sizeof(FWeightedAIInventoryLoadout) == 0x000038, "Wrong size on FWeightedAIInventoryLoadout");
static_assert(offsetof(FWeightedAIInventoryLoadout, Weight) == 0x000000, "Member 'FWeightedAIInventoryLoadout::Weight' has a wrong offset!");
static_assert(offsetof(FWeightedAIInventoryLoadout, Items) == 0x000028, "Member 'FWeightedAIInventoryLoadout::Items' has a wrong offset!");

// ScriptStruct FortniteAI.FortBotTargetInfo
// 0x0110 (0x0110 - 0x0000)
struct FFortBotTargetInfo final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SupportingActor;                                   // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x18];                                      // 0x0010(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class ABuildingActor*                         AlternateTargetingActor;                           // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0xE0];                                      // 0x0030(0x00E0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortBotTargetInfo) == 0x000008, "Wrong alignment on FFortBotTargetInfo");
static_assert(sizeof(FFortBotTargetInfo) == 0x000110, "Wrong size on FFortBotTargetInfo");
static_assert(offsetof(FFortBotTargetInfo, SourceActor) == 0x000000, "Member 'FFortBotTargetInfo::SourceActor' has a wrong offset!");
static_assert(offsetof(FFortBotTargetInfo, SupportingActor) == 0x000008, "Member 'FFortBotTargetInfo::SupportingActor' has a wrong offset!");
static_assert(offsetof(FFortBotTargetInfo, AlternateTargetingActor) == 0x000028, "Member 'FFortBotTargetInfo::AlternateTargetingActor' has a wrong offset!");

// ScriptStruct FortniteAI.FortBotThreatActorInfo
// 0x0018 (0x0018 - 0x0000)
struct FFortBotThreatActorInfo final
{
public:
	class AActor*                                 ThreatActor;                                       // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortBotThreatActorInfo) == 0x000008, "Wrong alignment on FFortBotThreatActorInfo");
static_assert(sizeof(FFortBotThreatActorInfo) == 0x000018, "Wrong size on FFortBotThreatActorInfo");
static_assert(offsetof(FFortBotThreatActorInfo, ThreatActor) == 0x000000, "Member 'FFortBotThreatActorInfo::ThreatActor' has a wrong offset!");

// ScriptStruct FortniteAI.FortBotTargetHandler
// 0x0028 (0x0028 - 0x0000)
struct FFortBotTargetHandler final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortBotTargetInfo>             Targets;                                           // 0x0018(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortBotTargetHandler) == 0x000008, "Wrong alignment on FFortBotTargetHandler");
static_assert(sizeof(FFortBotTargetHandler) == 0x000028, "Wrong size on FFortBotTargetHandler");
static_assert(offsetof(FFortBotTargetHandler, Targets) == 0x000018, "Member 'FFortBotTargetHandler::Targets' has a wrong offset!");

// ScriptStruct FortniteAI.BotDelayedStimulus
// 0x0068 (0x0068 - 0x0000)
struct FBotDelayedStimulus final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x60];                                       // 0x0008(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBotDelayedStimulus) == 0x000008, "Wrong alignment on FBotDelayedStimulus");
static_assert(sizeof(FBotDelayedStimulus) == 0x000068, "Wrong size on FBotDelayedStimulus");
static_assert(offsetof(FBotDelayedStimulus, SourceActor) == 0x000000, "Member 'FBotDelayedStimulus::SourceActor' has a wrong offset!");

// ScriptStruct FortniteAI.BotPerceivedSound
// 0x0028 (0x0028 - 0x0000)
struct FBotPerceivedSound final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x20];                                       // 0x0008(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBotPerceivedSound) == 0x000008, "Wrong alignment on FBotPerceivedSound");
static_assert(sizeof(FBotPerceivedSound) == 0x000028, "Wrong size on FBotPerceivedSound");
static_assert(offsetof(FBotPerceivedSound, SourceActor) == 0x000000, "Member 'FBotPerceivedSound::SourceActor' has a wrong offset!");

// ScriptStruct FortniteAI.PatrolPathLeash
// 0x0050 (0x0050 - 0x0000)
struct FPatrolPathLeash final
{
public:
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0000(0x0048)(Edit, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPatrolPathLeash) == 0x000008, "Wrong alignment on FPatrolPathLeash");
static_assert(sizeof(FPatrolPathLeash) == 0x000050, "Wrong size on FPatrolPathLeash");
static_assert(offsetof(FPatrolPathLeash, TagQuery) == 0x000000, "Member 'FPatrolPathLeash::TagQuery' has a wrong offset!");
static_assert(offsetof(FPatrolPathLeash, Width) == 0x000048, "Member 'FPatrolPathLeash::Width' has a wrong offset!");
static_assert(offsetof(FPatrolPathLeash, Height) == 0x00004C, "Member 'FPatrolPathLeash::Height' has a wrong offset!");

// ScriptStruct FortniteAI.GameDifficultyInfo
// 0x0090 (0x0098 - 0x0008)
struct FGameDifficultyInfo final : public FTableRowBase
{
public:
	bool                                          bIsOnboarding;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Difficulty;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DifficultyMatchmakingMinOverride;                  // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DifficultyMatchmakingMaxOverride;                  // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LootLevel;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERatingsEnforcementType                       RatingsEnforcement;                                // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RequiredRating;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaximumRating;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PvPRating;                                         // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecommendedRating;                                 // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoreBonus;                                        // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LootTierGroup;                                     // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BonusLootTierGroup;                                // 0x0048(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DifficultyIncreaseLootTierGroup;                   // 0x0058(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumDifficultyIncreases;                            // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ThreatDisplayName;                                 // 0x0070(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   ColorParamName;                                    // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultPlayerLives;                                // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerStatClampRowName;                            // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameDifficultyInfo) == 0x000008, "Wrong alignment on FGameDifficultyInfo");
static_assert(sizeof(FGameDifficultyInfo) == 0x000098, "Wrong size on FGameDifficultyInfo");
static_assert(offsetof(FGameDifficultyInfo, bIsOnboarding) == 0x000008, "Member 'FGameDifficultyInfo::bIsOnboarding' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, Difficulty) == 0x00000C, "Member 'FGameDifficultyInfo::Difficulty' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, DifficultyMatchmakingMinOverride) == 0x000010, "Member 'FGameDifficultyInfo::DifficultyMatchmakingMinOverride' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, DifficultyMatchmakingMaxOverride) == 0x000014, "Member 'FGameDifficultyInfo::DifficultyMatchmakingMaxOverride' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, LootLevel) == 0x000018, "Member 'FGameDifficultyInfo::LootLevel' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, RatingsEnforcement) == 0x00001C, "Member 'FGameDifficultyInfo::RatingsEnforcement' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, RequiredRating) == 0x000020, "Member 'FGameDifficultyInfo::RequiredRating' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, MaximumRating) == 0x000024, "Member 'FGameDifficultyInfo::MaximumRating' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, PvPRating) == 0x000028, "Member 'FGameDifficultyInfo::PvPRating' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, RecommendedRating) == 0x00002C, "Member 'FGameDifficultyInfo::RecommendedRating' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, ScoreBonus) == 0x000030, "Member 'FGameDifficultyInfo::ScoreBonus' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, LootTierGroup) == 0x000038, "Member 'FGameDifficultyInfo::LootTierGroup' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, BonusLootTierGroup) == 0x000048, "Member 'FGameDifficultyInfo::BonusLootTierGroup' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, DifficultyIncreaseLootTierGroup) == 0x000058, "Member 'FGameDifficultyInfo::DifficultyIncreaseLootTierGroup' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, NumDifficultyIncreases) == 0x000068, "Member 'FGameDifficultyInfo::NumDifficultyIncreases' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, ThreatDisplayName) == 0x000070, "Member 'FGameDifficultyInfo::ThreatDisplayName' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, ColorParamName) == 0x000088, "Member 'FGameDifficultyInfo::ColorParamName' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, DefaultPlayerLives) == 0x00008C, "Member 'FGameDifficultyInfo::DefaultPlayerLives' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, PlayerStatClampRowName) == 0x000090, "Member 'FGameDifficultyInfo::PlayerStatClampRowName' has a wrong offset!");

// ScriptStruct FortniteAI.AttributeClamp
// 0x0040 (0x0040 - 0x0000)
struct FAttributeClamp final
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0000(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EClampType                                    ClampType;                                         // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ClampValue;                                        // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttributeClamp) == 0x000008, "Wrong alignment on FAttributeClamp");
static_assert(sizeof(FAttributeClamp) == 0x000040, "Wrong size on FAttributeClamp");
static_assert(offsetof(FAttributeClamp, Attribute) == 0x000000, "Member 'FAttributeClamp::Attribute' has a wrong offset!");
static_assert(offsetof(FAttributeClamp, ClampType) == 0x000038, "Member 'FAttributeClamp::ClampType' has a wrong offset!");
static_assert(offsetof(FAttributeClamp, ClampValue) == 0x00003C, "Member 'FAttributeClamp::ClampValue' has a wrong offset!");

// ScriptStruct FortniteAI.PlayerClampInfo
// 0x0010 (0x0018 - 0x0008)
struct FPlayerClampInfo final : public FTableRowBase
{
public:
	TArray<struct FAttributeClamp>                AttributeClamps;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerClampInfo) == 0x000008, "Wrong alignment on FPlayerClampInfo");
static_assert(sizeof(FPlayerClampInfo) == 0x000018, "Wrong size on FPlayerClampInfo");
static_assert(offsetof(FPlayerClampInfo, AttributeClamps) == 0x000008, "Member 'FPlayerClampInfo::AttributeClamps' has a wrong offset!");

// ScriptStruct FortniteAI.GameRewardOverridesInfo
// 0x0038 (0x0040 - 0x0008)
struct FGameRewardOverridesInfo final : public FTableRowBase
{
public:
	class FString                                 MissionName;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OverrideRewardsTag;                                // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LootLevel;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LootTierGroup;                                     // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameRewardOverridesInfo) == 0x000008, "Wrong alignment on FGameRewardOverridesInfo");
static_assert(sizeof(FGameRewardOverridesInfo) == 0x000040, "Wrong size on FGameRewardOverridesInfo");
static_assert(offsetof(FGameRewardOverridesInfo, MissionName) == 0x000008, "Member 'FGameRewardOverridesInfo::MissionName' has a wrong offset!");
static_assert(offsetof(FGameRewardOverridesInfo, OverrideRewardsTag) == 0x000018, "Member 'FGameRewardOverridesInfo::OverrideRewardsTag' has a wrong offset!");
static_assert(offsetof(FGameRewardOverridesInfo, LootLevel) == 0x000028, "Member 'FGameRewardOverridesInfo::LootLevel' has a wrong offset!");
static_assert(offsetof(FGameRewardOverridesInfo, LootTierGroup) == 0x000030, "Member 'FGameRewardOverridesInfo::LootTierGroup' has a wrong offset!");

// ScriptStruct FortniteAI.FortInstensityCurveSequenceProgression
// 0x0018 (0x0018 - 0x0000)
struct FFortInstensityCurveSequenceProgression final
{
public:
	class UFortIntensityCurveSequence*            CurveSequence;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   SelectionWeight;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortInstensityCurveSequenceProgression) == 0x000008, "Wrong alignment on FFortInstensityCurveSequenceProgression");
static_assert(sizeof(FFortInstensityCurveSequenceProgression) == 0x000018, "Wrong size on FFortInstensityCurveSequenceProgression");
static_assert(offsetof(FFortInstensityCurveSequenceProgression, CurveSequence) == 0x000000, "Member 'FFortInstensityCurveSequenceProgression::CurveSequence' has a wrong offset!");
static_assert(offsetof(FFortInstensityCurveSequenceProgression, SelectionWeight) == 0x000008, "Member 'FFortInstensityCurveSequenceProgression::SelectionWeight' has a wrong offset!");

// ScriptStruct FortniteAI.NavAgentData
// 0x0028 (0x0028 - 0x0000)
struct FNavAgentData final
{
public:
	class FName                                   AgentName;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCurveTableRowHandle                   BuildingActorHealthToNavAreaStrengthHandle;        // 0x0008(0x0010)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   PlayerBuiltBuildingActorHealthToNavAreaStrengthHandle; // 0x0018(0x0010)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNavAgentData) == 0x000008, "Wrong alignment on FNavAgentData");
static_assert(sizeof(FNavAgentData) == 0x000028, "Wrong size on FNavAgentData");
static_assert(offsetof(FNavAgentData, AgentName) == 0x000000, "Member 'FNavAgentData::AgentName' has a wrong offset!");
static_assert(offsetof(FNavAgentData, BuildingActorHealthToNavAreaStrengthHandle) == 0x000008, "Member 'FNavAgentData::BuildingActorHealthToNavAreaStrengthHandle' has a wrong offset!");
static_assert(offsetof(FNavAgentData, PlayerBuiltBuildingActorHealthToNavAreaStrengthHandle) == 0x000018, "Member 'FNavAgentData::PlayerBuiltBuildingActorHealthToNavAreaStrengthHandle' has a wrong offset!");

// ScriptStruct FortniteAI.MetaNavCachedEntry
// 0x01E8 (0x01E8 - 0x0000)
struct alignas(0x08) FMetaNavCachedEntry final
{
public:
	uint8                                         Pad_0[0x1E8];                                      // 0x0000(0x01E8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMetaNavCachedEntry) == 0x000008, "Wrong alignment on FMetaNavCachedEntry");
static_assert(sizeof(FMetaNavCachedEntry) == 0x0001E8, "Wrong size on FMetaNavCachedEntry");

// ScriptStruct FortniteAI.FortAthenaAIFormationSlotRuntime
// 0x0020 (0x0020 - 0x0000)
struct FFortAthenaAIFormationSlotRuntime final
{
public:
	struct FVector                                LocalLocation;                                     // 0x0000(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPawn*                              UserPawn;                                          // 0x0018(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAthenaAIFormationSlotRuntime) == 0x000008, "Wrong alignment on FFortAthenaAIFormationSlotRuntime");
static_assert(sizeof(FFortAthenaAIFormationSlotRuntime) == 0x000020, "Wrong size on FFortAthenaAIFormationSlotRuntime");
static_assert(offsetof(FFortAthenaAIFormationSlotRuntime, LocalLocation) == 0x000000, "Member 'FFortAthenaAIFormationSlotRuntime::LocalLocation' has a wrong offset!");
static_assert(offsetof(FFortAthenaAIFormationSlotRuntime, UserPawn) == 0x000018, "Member 'FFortAthenaAIFormationSlotRuntime::UserPawn' has a wrong offset!");

// ScriptStruct FortniteAI.FortPointOnCurveRange
// 0x0008 (0x0008 - 0x0000)
struct FFortPointOnCurveRange final
{
public:
	float                                         MinPercentage;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPercentage;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPointOnCurveRange) == 0x000004, "Wrong alignment on FFortPointOnCurveRange");
static_assert(sizeof(FFortPointOnCurveRange) == 0x000008, "Wrong size on FFortPointOnCurveRange");
static_assert(offsetof(FFortPointOnCurveRange, MinPercentage) == 0x000000, "Member 'FFortPointOnCurveRange::MinPercentage' has a wrong offset!");
static_assert(offsetof(FFortPointOnCurveRange, MaxPercentage) == 0x000004, "Member 'FFortPointOnCurveRange::MaxPercentage' has a wrong offset!");

// ScriptStruct FortniteAI.FortPointsOnCurve
// 0x0038 (0x0038 - 0x0000)
struct FFortPointsOnCurve final
{
public:
	TSoftObjectPtr<class UCurveFloat>             Curve;                                             // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortPointOnCurveRange>         RangesForPointsOnCurve;                            // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPointsOnCurve) == 0x000008, "Wrong alignment on FFortPointsOnCurve");
static_assert(sizeof(FFortPointsOnCurve) == 0x000038, "Wrong size on FFortPointsOnCurve");
static_assert(offsetof(FFortPointsOnCurve, Curve) == 0x000000, "Member 'FFortPointsOnCurve::Curve' has a wrong offset!");
static_assert(offsetof(FFortPointsOnCurve, RangesForPointsOnCurve) == 0x000028, "Member 'FFortPointsOnCurve::RangesForPointsOnCurve' has a wrong offset!");

// ScriptStruct FortniteAI.FortGameplayTagQueryPerDifficulty
// 0x0060 (0x0060 - 0x0000)
struct FFortGameplayTagQueryPerDifficulty final
{
public:
	struct FDataTableRowHandle                    DifficultyInfo;                                    // 0x0000(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      TagQueryToMatch;                                   // 0x0010(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         Difficulty;                                        // 0x0058(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortGameplayTagQueryPerDifficulty) == 0x000008, "Wrong alignment on FFortGameplayTagQueryPerDifficulty");
static_assert(sizeof(FFortGameplayTagQueryPerDifficulty) == 0x000060, "Wrong size on FFortGameplayTagQueryPerDifficulty");
static_assert(offsetof(FFortGameplayTagQueryPerDifficulty, DifficultyInfo) == 0x000000, "Member 'FFortGameplayTagQueryPerDifficulty::DifficultyInfo' has a wrong offset!");
static_assert(offsetof(FFortGameplayTagQueryPerDifficulty, TagQueryToMatch) == 0x000010, "Member 'FFortGameplayTagQueryPerDifficulty::TagQueryToMatch' has a wrong offset!");
static_assert(offsetof(FFortGameplayTagQueryPerDifficulty, Difficulty) == 0x000058, "Member 'FFortGameplayTagQueryPerDifficulty::Difficulty' has a wrong offset!");

// ScriptStruct FortniteAI.GoalDistanceData
// 0x00A0 (0x00A0 - 0x0000)
struct FGoalDistanceData final
{
public:
	bool                                          bIgnoreScreeningDistance;                          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAIDataProviderFloatValue              ScreeningTestMaxDistance;                          // 0x0008(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UCurveFloat>             TestScoreCurve;                                    // 0x0040(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIDataProviderFloatValue              CurveDistanceScale;                                // 0x0068(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGoalDistanceData) == 0x000008, "Wrong alignment on FGoalDistanceData");
static_assert(sizeof(FGoalDistanceData) == 0x0000A0, "Wrong size on FGoalDistanceData");
static_assert(offsetof(FGoalDistanceData, bIgnoreScreeningDistance) == 0x000000, "Member 'FGoalDistanceData::bIgnoreScreeningDistance' has a wrong offset!");
static_assert(offsetof(FGoalDistanceData, ScreeningTestMaxDistance) == 0x000008, "Member 'FGoalDistanceData::ScreeningTestMaxDistance' has a wrong offset!");
static_assert(offsetof(FGoalDistanceData, TestScoreCurve) == 0x000040, "Member 'FGoalDistanceData::TestScoreCurve' has a wrong offset!");
static_assert(offsetof(FGoalDistanceData, CurveDistanceScale) == 0x000068, "Member 'FGoalDistanceData::CurveDistanceScale' has a wrong offset!");

// ScriptStruct FortniteAI.ThreatGridIndex
// 0x0008 (0x0008 - 0x0000)
struct FThreatGridIndex final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FThreatGridIndex) == 0x000004, "Wrong alignment on FThreatGridIndex");
static_assert(sizeof(FThreatGridIndex) == 0x000008, "Wrong size on FThreatGridIndex");
static_assert(offsetof(FThreatGridIndex, X) == 0x000000, "Member 'FThreatGridIndex::X' has a wrong offset!");
static_assert(offsetof(FThreatGridIndex, Y) == 0x000004, "Member 'FThreatGridIndex::Y' has a wrong offset!");

// ScriptStruct FortniteAI.ThreatLocationInfo
// 0x007C (0x0088 - 0x000C)
struct FThreatLocationInfo final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CloudLocation;                                     // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   ThreatVolume;                                      // 0x0028(0x0038)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AFortThreatVisualsManager*              ThreatVisualsManager;                              // 0x0060(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AThreatCloud>            CloudActor;                                        // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_70[0x1];                                       // 0x0070(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bThreatActivated;                                  // 0x0071(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortThreatDeactivationType                   DeactivationType;                                  // 0x0072(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_73[0x15];                                      // 0x0073(0x0015)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FThreatLocationInfo) == 0x000008, "Wrong alignment on FThreatLocationInfo");
static_assert(sizeof(FThreatLocationInfo) == 0x000088, "Wrong size on FThreatLocationInfo");
static_assert(offsetof(FThreatLocationInfo, CloudLocation) == 0x000010, "Member 'FThreatLocationInfo::CloudLocation' has a wrong offset!");
static_assert(offsetof(FThreatLocationInfo, ThreatVolume) == 0x000028, "Member 'FThreatLocationInfo::ThreatVolume' has a wrong offset!");
static_assert(offsetof(FThreatLocationInfo, ThreatVisualsManager) == 0x000060, "Member 'FThreatLocationInfo::ThreatVisualsManager' has a wrong offset!");
static_assert(offsetof(FThreatLocationInfo, CloudActor) == 0x000068, "Member 'FThreatLocationInfo::CloudActor' has a wrong offset!");
static_assert(offsetof(FThreatLocationInfo, bThreatActivated) == 0x000071, "Member 'FThreatLocationInfo::bThreatActivated' has a wrong offset!");
static_assert(offsetof(FThreatLocationInfo, DeactivationType) == 0x000072, "Member 'FThreatLocationInfo::DeactivationType' has a wrong offset!");

// ScriptStruct FortniteAI.ThreatLocationArray
// 0x0010 (0x0118 - 0x0108)
struct FThreatLocationArray final : public FFastArraySerializer
{
public:
	TArray<struct FThreatLocationInfo>            Locations;                                         // 0x0108(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FThreatLocationArray) == 0x000008, "Wrong alignment on FThreatLocationArray");
static_assert(sizeof(FThreatLocationArray) == 0x000118, "Wrong size on FThreatLocationArray");
static_assert(offsetof(FThreatLocationArray, Locations) == 0x000108, "Member 'FThreatLocationArray::Locations' has a wrong offset!");

// ScriptStruct FortniteAI.StormWind
// 0x005C (0x0068 - 0x000C)
struct FStormWind final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0010(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0028(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0040(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Magnitude;                                         // 0x0044(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortThreatVisualsManager*              ThreatVisualsManager;                              // 0x0048(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortAIEncounterInfo*>           Encounters;                                        // 0x0050(0x0010)(ZeroConstructor, Transient, RepSkip, NativeAccessSpecifierPublic)
	TStructCycleFixup<struct FFortWindImpulseHandle, 0x0004, 0x04> WindHandle;                                        // 0x0060(0x0004)(Transient, RepSkip, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStormWind) == 0x000008, "Wrong alignment on FStormWind");
static_assert(sizeof(FStormWind) == 0x000068, "Wrong size on FStormWind");
static_assert(offsetof(FStormWind, Location) == 0x000010, "Member 'FStormWind::Location' has a wrong offset!");
static_assert(offsetof(FStormWind, Direction) == 0x000028, "Member 'FStormWind::Direction' has a wrong offset!");
static_assert(offsetof(FStormWind, Radius) == 0x000040, "Member 'FStormWind::Radius' has a wrong offset!");
static_assert(offsetof(FStormWind, Magnitude) == 0x000044, "Member 'FStormWind::Magnitude' has a wrong offset!");
static_assert(offsetof(FStormWind, ThreatVisualsManager) == 0x000048, "Member 'FStormWind::ThreatVisualsManager' has a wrong offset!");
static_assert(offsetof(FStormWind, Encounters) == 0x000050, "Member 'FStormWind::Encounters' has a wrong offset!");
static_assert(offsetof(FStormWind, WindHandle) == 0x000060, "Member 'FStormWind::WindHandle' has a wrong offset!");

// ScriptStruct FortniteAI.StormWindArray
// 0x0010 (0x0118 - 0x0108)
struct FStormWindArray final : public FFastArraySerializer
{
public:
	TArray<struct FStormWind>                     StormWinds;                                        // 0x0108(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStormWindArray) == 0x000008, "Wrong alignment on FStormWindArray");
static_assert(sizeof(FStormWindArray) == 0x000118, "Wrong size on FStormWindArray");
static_assert(offsetof(FStormWindArray, StormWinds) == 0x000108, "Member 'FStormWindArray::StormWinds' has a wrong offset!");

// ScriptStruct FortniteAI.MMRSpawningDataTableInfo
// 0x0018 (0x0018 - 0x0000)
struct FMMRSpawningDataTableInfo final
{
public:
	TSubclassOf<class UFortAthenaAISpawnerData>   AISpawnerData;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Skill;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawingItemIndex;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMMRSpawningDataTableInfo) == 0x000008, "Wrong alignment on FMMRSpawningDataTableInfo");
static_assert(sizeof(FMMRSpawningDataTableInfo) == 0x000018, "Wrong size on FMMRSpawningDataTableInfo");
static_assert(offsetof(FMMRSpawningDataTableInfo, AISpawnerData) == 0x000000, "Member 'FMMRSpawningDataTableInfo::AISpawnerData' has a wrong offset!");
static_assert(offsetof(FMMRSpawningDataTableInfo, Skill) == 0x000008, "Member 'FMMRSpawningDataTableInfo::Skill' has a wrong offset!");
static_assert(offsetof(FMMRSpawningDataTableInfo, Weight) == 0x00000C, "Member 'FMMRSpawningDataTableInfo::Weight' has a wrong offset!");
static_assert(offsetof(FMMRSpawningDataTableInfo, SpawingItemIndex) == 0x000010, "Member 'FMMRSpawningDataTableInfo::SpawingItemIndex' has a wrong offset!");

// ScriptStruct FortniteAI.MMRPhaseSpawningDataTableInfo
// 0x0018 (0x0018 - 0x0000)
struct FMMRPhaseSpawningDataTableInfo final
{
public:
	int32                                         GamePhaseIndexToSpawn;                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMMRSpawningDataTableInfo>      SpawningItems;                                     // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMMRPhaseSpawningDataTableInfo) == 0x000008, "Wrong alignment on FMMRPhaseSpawningDataTableInfo");
static_assert(sizeof(FMMRPhaseSpawningDataTableInfo) == 0x000018, "Wrong size on FMMRPhaseSpawningDataTableInfo");
static_assert(offsetof(FMMRPhaseSpawningDataTableInfo, GamePhaseIndexToSpawn) == 0x000000, "Member 'FMMRPhaseSpawningDataTableInfo::GamePhaseIndexToSpawn' has a wrong offset!");
static_assert(offsetof(FMMRPhaseSpawningDataTableInfo, SpawningItems) == 0x000008, "Member 'FMMRPhaseSpawningDataTableInfo::SpawningItems' has a wrong offset!");

// ScriptStruct FortniteAI.MMRSpawningBracketBotDataTableRow
// 0x0010 (0x0020 - 0x0010)
struct FMMRSpawningBracketBotDataTableRow final : public FMMRSpawningBracketBaseDataTableRow
{
public:
	TArray<struct FMMRPhaseSpawningDataTableInfo> PhaseSpawningItems;                                // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMMRSpawningBracketBotDataTableRow) == 0x000008, "Wrong alignment on FMMRSpawningBracketBotDataTableRow");
static_assert(sizeof(FMMRSpawningBracketBotDataTableRow) == 0x000020, "Wrong size on FMMRSpawningBracketBotDataTableRow");
static_assert(offsetof(FMMRSpawningBracketBotDataTableRow, PhaseSpawningItems) == 0x000010, "Member 'FMMRSpawningBracketBotDataTableRow::PhaseSpawningItems' has a wrong offset!");

}

