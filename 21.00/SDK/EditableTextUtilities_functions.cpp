#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EditableTextUtilities

#include "Basic.hpp"

#include "EditableTextUtilities_classes.hpp"
#include "EditableTextUtilities_parameters.hpp"


namespace SDK
{

// Function EditableTextUtilities.EditableTextUtilities_C.CheckIfNeedsTrimming
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Text                                                   (BlueprintVisible, BlueprintReadOnly, Parm)
// int32                                   Limit                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             TrimmedText                                            (Parm, OutParm)
// bool                                    WasTrimmed                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UEditableTextUtilities_C::CheckIfNeedsTrimming(const class FText& Text, int32 Limit, class UObject* __WorldContext, class FText* TrimmedText, bool* WasTrimmed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditableTextUtilities_C", "CheckIfNeedsTrimming");

	Params::EditableTextUtilities_C_CheckIfNeedsTrimming Parms{};

	Parms.Text = std::move(Text);
	Parms.Limit = Limit;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (TrimmedText != nullptr)
		*TrimmedText = std::move(Parms.TrimmedText);

	if (WasTrimmed != nullptr)
		*WasTrimmed = Parms.WasTrimmed;
}


// Function EditableTextUtilities.EditableTextUtilities_C.LimitTextLength
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidget*                          EditableTextWidget                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Length                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    WasTrimmed                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UEditableTextUtilities_C::LimitTextLength(class UWidget* EditableTextWidget, int32 Length, class UObject* __WorldContext, bool* WasTrimmed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditableTextUtilities_C", "LimitTextLength");

	Params::EditableTextUtilities_C_LimitTextLength Parms{};

	Parms.EditableTextWidget = EditableTextWidget;
	Parms.Length = Length;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (WasTrimmed != nullptr)
		*WasTrimmed = Parms.WasTrimmed;
}

}

