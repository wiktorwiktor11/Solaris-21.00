#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: StateTreeModule

#include "Basic.hpp"

#include "StateTreeModule_classes.hpp"
#include "StateTreeModule_parameters.hpp"


namespace SDK
{

// Function StateTreeModule.StateTreeTaskBlueprintBase.ReceiveEnterState
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class AActor*                           OwnerActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EStateTreeStateChangeType               ChangeType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FStateTreeTransitionResult       TRANSITION                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// EStateTreeRunStatus                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EStateTreeRunStatus UStateTreeTaskBlueprintBase::ReceiveEnterState(class AActor* OwnerActor, const EStateTreeStateChangeType ChangeType, const struct FStateTreeTransitionResult& TRANSITION)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StateTreeTaskBlueprintBase", "ReceiveEnterState");

	Params::StateTreeTaskBlueprintBase_ReceiveEnterState Parms{};

	Parms.OwnerActor = OwnerActor;
	Parms.ChangeType = ChangeType;
	Parms.TRANSITION = std::move(TRANSITION);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function StateTreeModule.StateTreeTaskBlueprintBase.ReceiveExitState
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class AActor*                           OwnerActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EStateTreeStateChangeType               ChangeType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FStateTreeTransitionResult       TRANSITION                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UStateTreeTaskBlueprintBase::ReceiveExitState(class AActor* OwnerActor, const EStateTreeStateChangeType ChangeType, const struct FStateTreeTransitionResult& TRANSITION)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StateTreeTaskBlueprintBase", "ReceiveExitState");

	Params::StateTreeTaskBlueprintBase_ReceiveExitState Parms{};

	Parms.OwnerActor = OwnerActor;
	Parms.ChangeType = ChangeType;
	Parms.TRANSITION = std::move(TRANSITION);

	UObject::ProcessEvent(Func, &Parms);
}


// Function StateTreeModule.StateTreeTaskBlueprintBase.ReceiveStateCompleted
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           OwnerActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EStateTreeRunStatus                     CompletionStatus                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FStateTreeHandle                 CompletedState                                         (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)

void UStateTreeTaskBlueprintBase::ReceiveStateCompleted(class AActor* OwnerActor, const EStateTreeRunStatus CompletionStatus, const struct FStateTreeHandle& CompletedState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StateTreeTaskBlueprintBase", "ReceiveStateCompleted");

	Params::StateTreeTaskBlueprintBase_ReceiveStateCompleted Parms{};

	Parms.OwnerActor = OwnerActor;
	Parms.CompletionStatus = CompletionStatus;
	Parms.CompletedState = std::move(CompletedState);

	UObject::ProcessEvent(Func, &Parms);
}


// Function StateTreeModule.StateTreeTaskBlueprintBase.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           OwnerActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EStateTreeRunStatus                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EStateTreeRunStatus UStateTreeTaskBlueprintBase::ReceiveTick(class AActor* OwnerActor, const float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StateTreeTaskBlueprintBase", "ReceiveTick");

	Params::StateTreeTaskBlueprintBase_ReceiveTick Parms{};

	Parms.OwnerActor = OwnerActor;
	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function StateTreeModule.StateTreeConditionBlueprintBase.ReceiveTestCondition
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           OwnerActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStateTreeConditionBlueprintBase::ReceiveTestCondition(class AActor* OwnerActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StateTreeConditionBlueprintBase", "ReceiveTestCondition");

	Params::StateTreeConditionBlueprintBase_ReceiveTestCondition Parms{};

	Parms.OwnerActor = OwnerActor;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function StateTreeModule.StateTreeEvaluatorBlueprintBase.ReceiveEnterState
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class AActor*                           OwnerActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EStateTreeStateChangeType               ChangeType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FStateTreeTransitionResult       TRANSITION                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UStateTreeEvaluatorBlueprintBase::ReceiveEnterState(class AActor* OwnerActor, const EStateTreeStateChangeType ChangeType, const struct FStateTreeTransitionResult& TRANSITION)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StateTreeEvaluatorBlueprintBase", "ReceiveEnterState");

	Params::StateTreeEvaluatorBlueprintBase_ReceiveEnterState Parms{};

	Parms.OwnerActor = OwnerActor;
	Parms.ChangeType = ChangeType;
	Parms.TRANSITION = std::move(TRANSITION);

	UObject::ProcessEvent(Func, &Parms);
}


// Function StateTreeModule.StateTreeEvaluatorBlueprintBase.ReceiveEvaluate
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           OwnerActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EStateTreeEvaluationType                EvalType                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStateTreeEvaluatorBlueprintBase::ReceiveEvaluate(class AActor* OwnerActor, const EStateTreeEvaluationType EvalType, const float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StateTreeEvaluatorBlueprintBase", "ReceiveEvaluate");

	Params::StateTreeEvaluatorBlueprintBase_ReceiveEvaluate Parms{};

	Parms.OwnerActor = OwnerActor;
	Parms.EvalType = EvalType;
	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function StateTreeModule.StateTreeEvaluatorBlueprintBase.ReceiveExitState
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class AActor*                           OwnerActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EStateTreeStateChangeType               ChangeType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FStateTreeTransitionResult       TRANSITION                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UStateTreeEvaluatorBlueprintBase::ReceiveExitState(class AActor* OwnerActor, const EStateTreeStateChangeType ChangeType, const struct FStateTreeTransitionResult& TRANSITION)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StateTreeEvaluatorBlueprintBase", "ReceiveExitState");

	Params::StateTreeEvaluatorBlueprintBase_ReceiveExitState Parms{};

	Parms.OwnerActor = OwnerActor;
	Parms.ChangeType = ChangeType;
	Parms.TRANSITION = std::move(TRANSITION);

	UObject::ProcessEvent(Func, &Parms);
}


// Function StateTreeModule.StateTreeEvaluatorBlueprintBase.ReceiveStateCompleted
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           OwnerActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EStateTreeRunStatus                     CompletionStatus                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FStateTreeHandle                 CompletedState                                         (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)

void UStateTreeEvaluatorBlueprintBase::ReceiveStateCompleted(class AActor* OwnerActor, const EStateTreeRunStatus CompletionStatus, const struct FStateTreeHandle& CompletedState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StateTreeEvaluatorBlueprintBase", "ReceiveStateCompleted");

	Params::StateTreeEvaluatorBlueprintBase_ReceiveStateCompleted Parms{};

	Parms.OwnerActor = OwnerActor;
	Parms.CompletionStatus = CompletionStatus;
	Parms.CompletedState = std::move(CompletedState);

	UObject::ProcessEvent(Func, &Parms);
}

}

