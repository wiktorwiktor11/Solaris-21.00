#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PointLight

#include "Basic.hpp"

#include "PointLight_classes.hpp"
#include "PointLight_parameters.hpp"


namespace SDK
{

// Function PointLight.PointLightNativeComponent.StartRhythmUpdate
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FTimerHandle                     TimerHandle                                            (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPointLightNativeComponent::StartRhythmUpdate(struct FTimerHandle* TimerHandle, float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointLightNativeComponent", "StartRhythmUpdate");

	Params::PointLightNativeComponent_StartRhythmUpdate Parms{};

	Parms.Rate = Rate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TimerHandle != nullptr)
		*TimerHandle = std::move(Parms.TimerHandle);
}


// Function PointLight.PointLightNativeComponent.StartShortCircuitUpdate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTimelineComponent*               ShortCircuitTimeline                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPointLightNativeComponent::StartShortCircuitUpdate(class UTimelineComponent* ShortCircuitTimeline)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointLightNativeComponent", "StartShortCircuitUpdate");

	Params::PointLightNativeComponent_StartShortCircuitUpdate Parms{};

	Parms.ShortCircuitTimeline = ShortCircuitTimeline;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PointLight.PointLightNativeComponent.StopShortCircuitUpdate
// (Final, Native, Public, BlueprintCallable)

void UPointLightNativeComponent::StopShortCircuitUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointLightNativeComponent", "StopShortCircuitUpdate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PointLight.PointLightNativeComponent.UpdateDeviceSettings
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FPointLightRhythmParameters      RhythmParameters                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UPointLightNativeComponent::UpdateDeviceSettings(const struct FPointLightRhythmParameters& RhythmParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointLightNativeComponent", "UpdateDeviceSettings");

	Params::PointLightNativeComponent_UpdateDeviceSettings Parms{};

	Parms.RhythmParameters = std::move(RhythmParameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PointLight.PointLightNativeComponent.UpdateShortCircuit
// (Final, Native, Private)

void UPointLightNativeComponent::UpdateShortCircuit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PointLightNativeComponent", "UpdateShortCircuit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

