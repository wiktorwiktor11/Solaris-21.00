#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Parent_Tree_Apollo

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Tree_Color_options_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Parent_Tree_Apollo.Parent_Tree_Apollo_C
// 0x0080 (0x0EF0 - 0x0E70)
class AParent_Tree_Apollo_C : public ABuildingProp
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0E70(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          Has_Bugs;                                          // 0x0E78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E79[0x3];                                      // 0x0E79(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Use_Lightning_Bug;                                 // 0x0E7C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BugOffset;                                         // 0x0E80(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Has_Falling_Leaves;                                // 0x0E98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E99[0x7];                                      // 0x0E99(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LeavesOffset;                                      // 0x0EA0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Priority;                                          // 0x0EB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETree_Color_options                           Tree_Color_Option;                                 // 0x0EBC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EBD[0x3];                                      // 0x0EBD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0EC0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HueVariation;                                      // 0x0ED0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ValueVariation;                                    // 0x0ED4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PrioritySetbyVolume;                               // 0x0ED8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EDC[0x4];                                      // 0x0EDC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTreeSeasonColor_Data_C*                TreeSeasonColor_Data;                              // 0x0EE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortGameStateComponent_SurfaceOverride* SurfaceOverrideComponent;                          // 0x0EE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void UpdateColor();
	void SetTreeSeasonalColor();
	void SetSeasonPresetColors();
	void RemoveUnderwaterTrees();
	void ReceiveBeginPlay();
	void OnWaterLevelSetOffline();
	bool IsSubmergedByWater();
	void ExecuteUbergraph_Parent_Tree_Apollo(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Parent_Tree_Apollo_C">();
	}
	static class AParent_Tree_Apollo_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AParent_Tree_Apollo_C>();
	}
};
static_assert(alignof(AParent_Tree_Apollo_C) == 0x000008, "Wrong alignment on AParent_Tree_Apollo_C");
static_assert(sizeof(AParent_Tree_Apollo_C) == 0x000EF0, "Wrong size on AParent_Tree_Apollo_C");
static_assert(offsetof(AParent_Tree_Apollo_C, UberGraphFrame) == 0x000E70, "Member 'AParent_Tree_Apollo_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AParent_Tree_Apollo_C, Has_Bugs) == 0x000E78, "Member 'AParent_Tree_Apollo_C::Has_Bugs' has a wrong offset!");
static_assert(offsetof(AParent_Tree_Apollo_C, Use_Lightning_Bug) == 0x000E7C, "Member 'AParent_Tree_Apollo_C::Use_Lightning_Bug' has a wrong offset!");
static_assert(offsetof(AParent_Tree_Apollo_C, BugOffset) == 0x000E80, "Member 'AParent_Tree_Apollo_C::BugOffset' has a wrong offset!");
static_assert(offsetof(AParent_Tree_Apollo_C, Has_Falling_Leaves) == 0x000E98, "Member 'AParent_Tree_Apollo_C::Has_Falling_Leaves' has a wrong offset!");
static_assert(offsetof(AParent_Tree_Apollo_C, LeavesOffset) == 0x000EA0, "Member 'AParent_Tree_Apollo_C::LeavesOffset' has a wrong offset!");
static_assert(offsetof(AParent_Tree_Apollo_C, Priority) == 0x000EB8, "Member 'AParent_Tree_Apollo_C::Priority' has a wrong offset!");
static_assert(offsetof(AParent_Tree_Apollo_C, Tree_Color_Option) == 0x000EBC, "Member 'AParent_Tree_Apollo_C::Tree_Color_Option' has a wrong offset!");
static_assert(offsetof(AParent_Tree_Apollo_C, Color) == 0x000EC0, "Member 'AParent_Tree_Apollo_C::Color' has a wrong offset!");
static_assert(offsetof(AParent_Tree_Apollo_C, HueVariation) == 0x000ED0, "Member 'AParent_Tree_Apollo_C::HueVariation' has a wrong offset!");
static_assert(offsetof(AParent_Tree_Apollo_C, ValueVariation) == 0x000ED4, "Member 'AParent_Tree_Apollo_C::ValueVariation' has a wrong offset!");
static_assert(offsetof(AParent_Tree_Apollo_C, PrioritySetbyVolume) == 0x000ED8, "Member 'AParent_Tree_Apollo_C::PrioritySetbyVolume' has a wrong offset!");
static_assert(offsetof(AParent_Tree_Apollo_C, TreeSeasonColor_Data) == 0x000EE0, "Member 'AParent_Tree_Apollo_C::TreeSeasonColor_Data' has a wrong offset!");
static_assert(offsetof(AParent_Tree_Apollo_C, SurfaceOverrideComponent) == 0x000EE8, "Member 'AParent_Tree_Apollo_C::SurfaceOverrideComponent' has a wrong offset!");

}

