#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BGA_Athena_Sentry_Parent

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BGA_Athena_Sentry_Parent.BGA_Athena_Sentry_Parent_C
// 0x01B0 (0x0CF8 - 0x0B48)
class ABGA_Athena_Sentry_Parent_C final : public ABuildingGameplayActorSentry
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0B48(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        Rotation_Audio;                                    // 0x0B50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      HitBox;                                            // 0x0B58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortLinkToActorComponent*              FortLinkToActor;                                   // 0x0B60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       PawnActivationVolume;                              // 0x0B68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         TL_ScaleRays_Alpha_0131847C4194FDF20B5930855C58BE4F; // 0x0B70(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TL_ScaleRays__Direction_0131847C4194FDF20B5930855C58BE4F; // 0x0B74(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B75[0x3];                                      // 0x0B75(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TL_ScaleRays;                                      // 0x0B78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetingInterval;                                 // 0x0B80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B84[0x4];                                      // 0x0B84(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Timer_DoTargeting;                                 // 0x0B88(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Timer_BeginAggro;                                  // 0x0B90(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          UsesIgnoreTargetTags;                              // 0x0B98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B99[0x7];                                      // 0x0B99(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TC_IgnoreTargetingTags;                            // 0x0BA0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           GC_Deactivated;                                    // 0x0BC0(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_Death;                                          // 0x0BC4(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_LostTarget;                                     // 0x0BC8(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BCC[0x4];                                      // 0x0BCC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TC_IgnoreActivationVolTags;                        // 0x0BD0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         Delay_NoRotateReset;                               // 0x0BF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RepDeath;                                          // 0x0BF4(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BF5[0x3];                                      // 0x0BF5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           GC_Damaged;                                        // 0x0BF8(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         TargetingConeAngle;                                // 0x0BFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartingScaleRays;                                 // 0x0C00(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RightLookIdle;                                     // 0x0C18(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                LeftLookIdle;                                      // 0x0C30(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FScalableFloat                         Row_LostTargetDelay;                               // 0x0C48(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                LastKnownTargetLocation;                           // 0x0C70(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Timer_LostTarget;                                  // 0x0C88(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Rotation_Stop_Sound;                               // 0x0C90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Lost_Target_Sound;                                 // 0x0C98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Rotation_Sound_Start;                              // 0x0CA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<EBuildingGameplayActorSentry_State, struct FGameplayTag> StateTagMap;                                       // 0x0CA8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ActivateRays();
	void AttemptToRegisterWithDataTrackerManager();
	void BeginTargeting();
	void BndEvt__ActivationVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__ActivationVolume_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__FortLinkToActor_K2Node_ComponentBoundEvent_2_OnLinkedActorDestroyed__DelegateSignature(class AActor* DamageCauser);
	void BP_Stop_Rotation_Sound();
	void BPOnSentryStateChanged();
	void CanDoTargeting(bool* Return);
	bool CanTargetPawn(class AFortPawn* Pawn);
	void Deactivate();
	void DeactivateRays();
	void DoTargeting();
	void ExecuteUbergraph_BGA_Athena_Sentry_Parent(int32 EntryPoint);
	void GetStateTagFromEnumValue(struct FGameplayTag* StateTag, bool* bFoundValidData);
	void HideAndKill();
	bool IsUpsideDown();
	struct FRotator LookLocationToWorldRotation(const struct FVector& Location);
	void LostTarget();
	void OnDamageServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnDeathServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnRep_RepDeath();
	void Play_Lost_Target_Sound();
	void PlayStartedIdleRotationAudio();
	void PlayStoppedIdleRotationAudio();
	void PostLostTargetDelay();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	float Scale_Pos_Yaw_Camera(float YawIn);
	void SelectClosestIdleRotation();
	void SetTargetLastLoc();
	void TL_ScaleRays__FinishedFunc();
	void TL_ScaleRays__UpdateFunc();
	void TrackedPawnWasSet();
	void UserConstructionScript();

	bool IsValidAutoFireTarget(const class AActor* Attacker) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BGA_Athena_Sentry_Parent_C">();
	}
	static class ABGA_Athena_Sentry_Parent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABGA_Athena_Sentry_Parent_C>();
	}
};
static_assert(alignof(ABGA_Athena_Sentry_Parent_C) == 0x000008, "Wrong alignment on ABGA_Athena_Sentry_Parent_C");
static_assert(sizeof(ABGA_Athena_Sentry_Parent_C) == 0x000CF8, "Wrong size on ABGA_Athena_Sentry_Parent_C");
static_assert(offsetof(ABGA_Athena_Sentry_Parent_C, UberGraphFrame) == 0x000B48, "Member 'ABGA_Athena_Sentry_Parent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Parent_C, Rotation_Audio) == 0x000B50, "Member 'ABGA_Athena_Sentry_Parent_C::Rotation_Audio' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Parent_C, HitBox) == 0x000B58, "Member 'ABGA_Athena_Sentry_Parent_C::HitBox' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Parent_C, FortLinkToActor) == 0x000B60, "Member 'ABGA_Athena_Sentry_Parent_C::FortLinkToActor' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Parent_C, PawnActivationVolume) == 0x000B68, "Member 'ABGA_Athena_Sentry_Parent_C::PawnActivationVolume' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Parent_C, TL_ScaleRays_Alpha_0131847C4194FDF20B5930855C58BE4F) == 0x000B70, "Member 'ABGA_Athena_Sentry_Parent_C::TL_ScaleRays_Alpha_0131847C4194FDF20B5930855C58BE4F' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Parent_C, TL_ScaleRays__Direction_0131847C4194FDF20B5930855C58BE4F) == 0x000B74, "Member 'ABGA_Athena_Sentry_Parent_C::TL_ScaleRays__Direction_0131847C4194FDF20B5930855C58BE4F' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Parent_C, TL_ScaleRays) == 0x000B78, "Member 'ABGA_Athena_Sentry_Parent_C::TL_ScaleRays' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Parent_C, TargetingInterval) == 0x000B80, "Member 'ABGA_Athena_Sentry_Parent_C::TargetingInterval' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Parent_C, Timer_DoTargeting) == 0x000B88, "Member 'ABGA_Athena_Sentry_Parent_C::Timer_DoTargeting' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Parent_C, Timer_BeginAggro) == 0x000B90, "Member 'ABGA_Athena_Sentry_Parent_C::Timer_BeginAggro' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Parent_C, UsesIgnoreTargetTags) == 0x000B98, "Member 'ABGA_Athena_Sentry_Parent_C::UsesIgnoreTargetTags' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Parent_C, TC_IgnoreTargetingTags) == 0x000BA0, "Member 'ABGA_Athena_Sentry_Parent_C::TC_IgnoreTargetingTags' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Parent_C, GC_Deactivated) == 0x000BC0, "Member 'ABGA_Athena_Sentry_Parent_C::GC_Deactivated' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Parent_C, GC_Death) == 0x000BC4, "Member 'ABGA_Athena_Sentry_Parent_C::GC_Death' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Parent_C, GC_LostTarget) == 0x000BC8, "Member 'ABGA_Athena_Sentry_Parent_C::GC_LostTarget' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Parent_C, TC_IgnoreActivationVolTags) == 0x000BD0, "Member 'ABGA_Athena_Sentry_Parent_C::TC_IgnoreActivationVolTags' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Parent_C, Delay_NoRotateReset) == 0x000BF0, "Member 'ABGA_Athena_Sentry_Parent_C::Delay_NoRotateReset' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Parent_C, RepDeath) == 0x000BF4, "Member 'ABGA_Athena_Sentry_Parent_C::RepDeath' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Parent_C, GC_Damaged) == 0x000BF8, "Member 'ABGA_Athena_Sentry_Parent_C::GC_Damaged' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Parent_C, TargetingConeAngle) == 0x000BFC, "Member 'ABGA_Athena_Sentry_Parent_C::TargetingConeAngle' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Parent_C, StartingScaleRays) == 0x000C00, "Member 'ABGA_Athena_Sentry_Parent_C::StartingScaleRays' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Parent_C, RightLookIdle) == 0x000C18, "Member 'ABGA_Athena_Sentry_Parent_C::RightLookIdle' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Parent_C, LeftLookIdle) == 0x000C30, "Member 'ABGA_Athena_Sentry_Parent_C::LeftLookIdle' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Parent_C, Row_LostTargetDelay) == 0x000C48, "Member 'ABGA_Athena_Sentry_Parent_C::Row_LostTargetDelay' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Parent_C, LastKnownTargetLocation) == 0x000C70, "Member 'ABGA_Athena_Sentry_Parent_C::LastKnownTargetLocation' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Parent_C, Timer_LostTarget) == 0x000C88, "Member 'ABGA_Athena_Sentry_Parent_C::Timer_LostTarget' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Parent_C, Rotation_Stop_Sound) == 0x000C90, "Member 'ABGA_Athena_Sentry_Parent_C::Rotation_Stop_Sound' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Parent_C, Lost_Target_Sound) == 0x000C98, "Member 'ABGA_Athena_Sentry_Parent_C::Lost_Target_Sound' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Parent_C, Rotation_Sound_Start) == 0x000CA0, "Member 'ABGA_Athena_Sentry_Parent_C::Rotation_Sound_Start' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Parent_C, StateTagMap) == 0x000CA8, "Member 'ABGA_Athena_Sentry_Parent_C::StateTagMap' has a wrong offset!");

}

