#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SOMRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayTags_0_structs.hpp"
#include "SOMRuntime_structs.hpp"


namespace SDK::Params
{

// Function SOMRuntime.ScriptedObjectMovement_StaticPath.HandleCalendarEventActive
// 0x0028 (0x0028 - 0x0000)
struct ScriptedObjectMovement_StaticPath_HandleCalendarEventActive final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              TimeUntilEnd;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              TimeSinceBegin;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimespanRatio;                                     // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScriptedObjectMovement_StaticPath_HandleCalendarEventActive) == 0x000008, "Wrong alignment on ScriptedObjectMovement_StaticPath_HandleCalendarEventActive");
static_assert(sizeof(ScriptedObjectMovement_StaticPath_HandleCalendarEventActive) == 0x000028, "Wrong size on ScriptedObjectMovement_StaticPath_HandleCalendarEventActive");
static_assert(offsetof(ScriptedObjectMovement_StaticPath_HandleCalendarEventActive, EventName) == 0x000000, "Member 'ScriptedObjectMovement_StaticPath_HandleCalendarEventActive::EventName' has a wrong offset!");
static_assert(offsetof(ScriptedObjectMovement_StaticPath_HandleCalendarEventActive, TimeUntilEnd) == 0x000010, "Member 'ScriptedObjectMovement_StaticPath_HandleCalendarEventActive::TimeUntilEnd' has a wrong offset!");
static_assert(offsetof(ScriptedObjectMovement_StaticPath_HandleCalendarEventActive, TimeSinceBegin) == 0x000018, "Member 'ScriptedObjectMovement_StaticPath_HandleCalendarEventActive::TimeSinceBegin' has a wrong offset!");
static_assert(offsetof(ScriptedObjectMovement_StaticPath_HandleCalendarEventActive, TimespanRatio) == 0x000020, "Member 'ScriptedObjectMovement_StaticPath_HandleCalendarEventActive::TimespanRatio' has a wrong offset!");

// Function SOMRuntime.ScriptedObjectMovement_StaticPath.HandleCalendarEventEnded
// 0x0028 (0x0028 - 0x0000)
struct ScriptedObjectMovement_StaticPath_HandleCalendarEventEnded final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              TimeUntilEnd;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              TimeSinceBegin;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimespanRatio;                                     // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScriptedObjectMovement_StaticPath_HandleCalendarEventEnded) == 0x000008, "Wrong alignment on ScriptedObjectMovement_StaticPath_HandleCalendarEventEnded");
static_assert(sizeof(ScriptedObjectMovement_StaticPath_HandleCalendarEventEnded) == 0x000028, "Wrong size on ScriptedObjectMovement_StaticPath_HandleCalendarEventEnded");
static_assert(offsetof(ScriptedObjectMovement_StaticPath_HandleCalendarEventEnded, EventName) == 0x000000, "Member 'ScriptedObjectMovement_StaticPath_HandleCalendarEventEnded::EventName' has a wrong offset!");
static_assert(offsetof(ScriptedObjectMovement_StaticPath_HandleCalendarEventEnded, TimeUntilEnd) == 0x000010, "Member 'ScriptedObjectMovement_StaticPath_HandleCalendarEventEnded::TimeUntilEnd' has a wrong offset!");
static_assert(offsetof(ScriptedObjectMovement_StaticPath_HandleCalendarEventEnded, TimeSinceBegin) == 0x000018, "Member 'ScriptedObjectMovement_StaticPath_HandleCalendarEventEnded::TimeSinceBegin' has a wrong offset!");
static_assert(offsetof(ScriptedObjectMovement_StaticPath_HandleCalendarEventEnded, TimespanRatio) == 0x000020, "Member 'ScriptedObjectMovement_StaticPath_HandleCalendarEventEnded::TimespanRatio' has a wrong offset!");

// Function SOMRuntime.ScriptedObjectMovement_StaticPath.HandleCalendarEventUpdated
// 0x0028 (0x0028 - 0x0000)
struct ScriptedObjectMovement_StaticPath_HandleCalendarEventUpdated final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              TimeUntilEnd;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              TimeSinceBegin;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimespanRatio;                                     // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScriptedObjectMovement_StaticPath_HandleCalendarEventUpdated) == 0x000008, "Wrong alignment on ScriptedObjectMovement_StaticPath_HandleCalendarEventUpdated");
static_assert(sizeof(ScriptedObjectMovement_StaticPath_HandleCalendarEventUpdated) == 0x000028, "Wrong size on ScriptedObjectMovement_StaticPath_HandleCalendarEventUpdated");
static_assert(offsetof(ScriptedObjectMovement_StaticPath_HandleCalendarEventUpdated, EventName) == 0x000000, "Member 'ScriptedObjectMovement_StaticPath_HandleCalendarEventUpdated::EventName' has a wrong offset!");
static_assert(offsetof(ScriptedObjectMovement_StaticPath_HandleCalendarEventUpdated, TimeUntilEnd) == 0x000010, "Member 'ScriptedObjectMovement_StaticPath_HandleCalendarEventUpdated::TimeUntilEnd' has a wrong offset!");
static_assert(offsetof(ScriptedObjectMovement_StaticPath_HandleCalendarEventUpdated, TimeSinceBegin) == 0x000018, "Member 'ScriptedObjectMovement_StaticPath_HandleCalendarEventUpdated::TimeSinceBegin' has a wrong offset!");
static_assert(offsetof(ScriptedObjectMovement_StaticPath_HandleCalendarEventUpdated, TimespanRatio) == 0x000020, "Member 'ScriptedObjectMovement_StaticPath_HandleCalendarEventUpdated::TimespanRatio' has a wrong offset!");

// Function SOMRuntime.FortGameStateComponent_ScriptedObjectMovementManager.HandleCurrentPlaylistReady
// 0x0030 (0x0030 - 0x0000)
struct FortGameStateComponent_ScriptedObjectMovementManager_HandleCurrentPlaylistReady final
{
public:
	class AFortGameStateAthena*                   GameState;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortPlaylist*                    Playlist;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  PlaylistContextTags;                               // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateComponent_ScriptedObjectMovementManager_HandleCurrentPlaylistReady) == 0x000008, "Wrong alignment on FortGameStateComponent_ScriptedObjectMovementManager_HandleCurrentPlaylistReady");
static_assert(sizeof(FortGameStateComponent_ScriptedObjectMovementManager_HandleCurrentPlaylistReady) == 0x000030, "Wrong size on FortGameStateComponent_ScriptedObjectMovementManager_HandleCurrentPlaylistReady");
static_assert(offsetof(FortGameStateComponent_ScriptedObjectMovementManager_HandleCurrentPlaylistReady, GameState) == 0x000000, "Member 'FortGameStateComponent_ScriptedObjectMovementManager_HandleCurrentPlaylistReady::GameState' has a wrong offset!");
static_assert(offsetof(FortGameStateComponent_ScriptedObjectMovementManager_HandleCurrentPlaylistReady, Playlist) == 0x000008, "Member 'FortGameStateComponent_ScriptedObjectMovementManager_HandleCurrentPlaylistReady::Playlist' has a wrong offset!");
static_assert(offsetof(FortGameStateComponent_ScriptedObjectMovementManager_HandleCurrentPlaylistReady, PlaylistContextTags) == 0x000010, "Member 'FortGameStateComponent_ScriptedObjectMovementManager_HandleCurrentPlaylistReady::PlaylistContextTags' has a wrong offset!");

// Function SOMRuntime.FortScriptedObjectMovement_MovableObjectBase.BeginMovingToStaticPathNode
// 0x00F0 (0x00F0 - 0x0000)
struct FortScriptedObjectMovement_MovableObjectBase_BeginMovingToStaticPathNode final
{
public:
	struct FScriptedObjectMovement_StaticPathStepData StepData;                                          // 0x0000(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortScriptedObjectMovement_MovableObjectBase_BeginMovingToStaticPathNode) == 0x000010, "Wrong alignment on FortScriptedObjectMovement_MovableObjectBase_BeginMovingToStaticPathNode");
static_assert(sizeof(FortScriptedObjectMovement_MovableObjectBase_BeginMovingToStaticPathNode) == 0x0000F0, "Wrong size on FortScriptedObjectMovement_MovableObjectBase_BeginMovingToStaticPathNode");
static_assert(offsetof(FortScriptedObjectMovement_MovableObjectBase_BeginMovingToStaticPathNode, StepData) == 0x000000, "Member 'FortScriptedObjectMovement_MovableObjectBase_BeginMovingToStaticPathNode::StepData' has a wrong offset!");

// Function SOMRuntime.FortScriptedObjectMovement_MovableObjectBase.Cheat_NetMulticast_SendDebugTimerInfo
// 0x0008 (0x0008 - 0x0000)
struct FortScriptedObjectMovement_MovableObjectBase_Cheat_NetMulticast_SendDebugTimerInfo final
{
public:
	float                                         ServerTimeWhenQueryInvoked;                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemainingTime;                                     // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortScriptedObjectMovement_MovableObjectBase_Cheat_NetMulticast_SendDebugTimerInfo) == 0x000004, "Wrong alignment on FortScriptedObjectMovement_MovableObjectBase_Cheat_NetMulticast_SendDebugTimerInfo");
static_assert(sizeof(FortScriptedObjectMovement_MovableObjectBase_Cheat_NetMulticast_SendDebugTimerInfo) == 0x000008, "Wrong size on FortScriptedObjectMovement_MovableObjectBase_Cheat_NetMulticast_SendDebugTimerInfo");
static_assert(offsetof(FortScriptedObjectMovement_MovableObjectBase_Cheat_NetMulticast_SendDebugTimerInfo, ServerTimeWhenQueryInvoked) == 0x000000, "Member 'FortScriptedObjectMovement_MovableObjectBase_Cheat_NetMulticast_SendDebugTimerInfo::ServerTimeWhenQueryInvoked' has a wrong offset!");
static_assert(offsetof(FortScriptedObjectMovement_MovableObjectBase_Cheat_NetMulticast_SendDebugTimerInfo, RemainingTime) == 0x000004, "Member 'FortScriptedObjectMovement_MovableObjectBase_Cheat_NetMulticast_SendDebugTimerInfo::RemainingTime' has a wrong offset!");

// Function SOMRuntime.FortScriptedObjectMovement_MovableObjectBase.ConfigureStaticMeshToSlotDefinition
// 0x0010 (0x0010 - 0x0000)
struct FortScriptedObjectMovement_MovableObjectBase_ConfigureStaticMeshToSlotDefinition final
{
public:
	class UFortScriptedObjectMovement_SlotDefinition* SlotDefinition;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   StaticMeshComponent;                               // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortScriptedObjectMovement_MovableObjectBase_ConfigureStaticMeshToSlotDefinition) == 0x000008, "Wrong alignment on FortScriptedObjectMovement_MovableObjectBase_ConfigureStaticMeshToSlotDefinition");
static_assert(sizeof(FortScriptedObjectMovement_MovableObjectBase_ConfigureStaticMeshToSlotDefinition) == 0x000010, "Wrong size on FortScriptedObjectMovement_MovableObjectBase_ConfigureStaticMeshToSlotDefinition");
static_assert(offsetof(FortScriptedObjectMovement_MovableObjectBase_ConfigureStaticMeshToSlotDefinition, SlotDefinition) == 0x000000, "Member 'FortScriptedObjectMovement_MovableObjectBase_ConfigureStaticMeshToSlotDefinition::SlotDefinition' has a wrong offset!");
static_assert(offsetof(FortScriptedObjectMovement_MovableObjectBase_ConfigureStaticMeshToSlotDefinition, StaticMeshComponent) == 0x000008, "Member 'FortScriptedObjectMovement_MovableObjectBase_ConfigureStaticMeshToSlotDefinition::StaticMeshComponent' has a wrong offset!");

// Function SOMRuntime.FortScriptedObjectMovement_MovableObjectBase.GetScriptedObjectStaticMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct FortScriptedObjectMovement_MovableObjectBase_GetScriptedObjectStaticMeshComponent final
{
public:
	class UStaticMeshComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortScriptedObjectMovement_MovableObjectBase_GetScriptedObjectStaticMeshComponent) == 0x000008, "Wrong alignment on FortScriptedObjectMovement_MovableObjectBase_GetScriptedObjectStaticMeshComponent");
static_assert(sizeof(FortScriptedObjectMovement_MovableObjectBase_GetScriptedObjectStaticMeshComponent) == 0x000008, "Wrong size on FortScriptedObjectMovement_MovableObjectBase_GetScriptedObjectStaticMeshComponent");
static_assert(offsetof(FortScriptedObjectMovement_MovableObjectBase_GetScriptedObjectStaticMeshComponent, ReturnValue) == 0x000000, "Member 'FortScriptedObjectMovement_MovableObjectBase_GetScriptedObjectStaticMeshComponent::ReturnValue' has a wrong offset!");

// Function SOMRuntime.FortScriptedObjectMovement_MovableObjectBase.HandleSlotDefinitionSlotted
// 0x0008 (0x0008 - 0x0000)
struct FortScriptedObjectMovement_MovableObjectBase_HandleSlotDefinitionSlotted final
{
public:
	class UFortScriptedObjectMovement_SlotDefinition* SlotDefinition;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortScriptedObjectMovement_MovableObjectBase_HandleSlotDefinitionSlotted) == 0x000008, "Wrong alignment on FortScriptedObjectMovement_MovableObjectBase_HandleSlotDefinitionSlotted");
static_assert(sizeof(FortScriptedObjectMovement_MovableObjectBase_HandleSlotDefinitionSlotted) == 0x000008, "Wrong size on FortScriptedObjectMovement_MovableObjectBase_HandleSlotDefinitionSlotted");
static_assert(offsetof(FortScriptedObjectMovement_MovableObjectBase_HandleSlotDefinitionSlotted, SlotDefinition) == 0x000000, "Member 'FortScriptedObjectMovement_MovableObjectBase_HandleSlotDefinitionSlotted::SlotDefinition' has a wrong offset!");

// Function SOMRuntime.FortScriptedObjectMovement_MovableObjectBase.NotifyStaticPathStepComplete
// 0x0001 (0x0001 - 0x0000)
struct FortScriptedObjectMovement_MovableObjectBase_NotifyStaticPathStepComplete final
{
public:
	bool                                          bReachedBeginPlaySkipStep;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortScriptedObjectMovement_MovableObjectBase_NotifyStaticPathStepComplete) == 0x000001, "Wrong alignment on FortScriptedObjectMovement_MovableObjectBase_NotifyStaticPathStepComplete");
static_assert(sizeof(FortScriptedObjectMovement_MovableObjectBase_NotifyStaticPathStepComplete) == 0x000001, "Wrong size on FortScriptedObjectMovement_MovableObjectBase_NotifyStaticPathStepComplete");
static_assert(offsetof(FortScriptedObjectMovement_MovableObjectBase_NotifyStaticPathStepComplete, bReachedBeginPlaySkipStep) == 0x000000, "Member 'FortScriptedObjectMovement_MovableObjectBase_NotifyStaticPathStepComplete::bReachedBeginPlaySkipStep' has a wrong offset!");

// Function SOMRuntime.FortScriptedObjectMovement_MovableObjectBase.SetCanEverAffectNavigation
// 0x0010 (0x0010 - 0x0000)
struct FortScriptedObjectMovement_MovableObjectBase_SetCanEverAffectNavigation final
{
public:
	bool                                          bCanEverAffectNavigation;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UActorComponent*                        TargetActorComponent;                              // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortScriptedObjectMovement_MovableObjectBase_SetCanEverAffectNavigation) == 0x000008, "Wrong alignment on FortScriptedObjectMovement_MovableObjectBase_SetCanEverAffectNavigation");
static_assert(sizeof(FortScriptedObjectMovement_MovableObjectBase_SetCanEverAffectNavigation) == 0x000010, "Wrong size on FortScriptedObjectMovement_MovableObjectBase_SetCanEverAffectNavigation");
static_assert(offsetof(FortScriptedObjectMovement_MovableObjectBase_SetCanEverAffectNavigation, bCanEverAffectNavigation) == 0x000000, "Member 'FortScriptedObjectMovement_MovableObjectBase_SetCanEverAffectNavigation::bCanEverAffectNavigation' has a wrong offset!");
static_assert(offsetof(FortScriptedObjectMovement_MovableObjectBase_SetCanEverAffectNavigation, TargetActorComponent) == 0x000008, "Member 'FortScriptedObjectMovement_MovableObjectBase_SetCanEverAffectNavigation::TargetActorComponent' has a wrong offset!");

// Function SOMRuntime.FortScriptedObjectMovement_MovableObjectBase.BlockOverlappingStaticPathSteps
// 0x0001 (0x0001 - 0x0000)
struct FortScriptedObjectMovement_MovableObjectBase_BlockOverlappingStaticPathSteps final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortScriptedObjectMovement_MovableObjectBase_BlockOverlappingStaticPathSteps) == 0x000001, "Wrong alignment on FortScriptedObjectMovement_MovableObjectBase_BlockOverlappingStaticPathSteps");
static_assert(sizeof(FortScriptedObjectMovement_MovableObjectBase_BlockOverlappingStaticPathSteps) == 0x000001, "Wrong size on FortScriptedObjectMovement_MovableObjectBase_BlockOverlappingStaticPathSteps");
static_assert(offsetof(FortScriptedObjectMovement_MovableObjectBase_BlockOverlappingStaticPathSteps, ReturnValue) == 0x000000, "Member 'FortScriptedObjectMovement_MovableObjectBase_BlockOverlappingStaticPathSteps::ReturnValue' has a wrong offset!");

// Function SOMRuntime.FortScriptedObjectMovement_MovableObjectBase.GetStaticPathTravelingBounds
// 0x0018 (0x0018 - 0x0000)
struct FortScriptedObjectMovement_MovableObjectBase_GetStaticPathTravelingBounds final
{
public:
	struct FVector                                OutBoxExtent;                                      // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortScriptedObjectMovement_MovableObjectBase_GetStaticPathTravelingBounds) == 0x000008, "Wrong alignment on FortScriptedObjectMovement_MovableObjectBase_GetStaticPathTravelingBounds");
static_assert(sizeof(FortScriptedObjectMovement_MovableObjectBase_GetStaticPathTravelingBounds) == 0x000018, "Wrong size on FortScriptedObjectMovement_MovableObjectBase_GetStaticPathTravelingBounds");
static_assert(offsetof(FortScriptedObjectMovement_MovableObjectBase_GetStaticPathTravelingBounds, OutBoxExtent) == 0x000000, "Member 'FortScriptedObjectMovement_MovableObjectBase_GetStaticPathTravelingBounds::OutBoxExtent' has a wrong offset!");

// Function SOMRuntime.FortScriptedObjectMovement_MovableObjectBase.GetStaticPathZOffsetHeight
// 0x0004 (0x0004 - 0x0000)
struct FortScriptedObjectMovement_MovableObjectBase_GetStaticPathZOffsetHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortScriptedObjectMovement_MovableObjectBase_GetStaticPathZOffsetHeight) == 0x000004, "Wrong alignment on FortScriptedObjectMovement_MovableObjectBase_GetStaticPathZOffsetHeight");
static_assert(sizeof(FortScriptedObjectMovement_MovableObjectBase_GetStaticPathZOffsetHeight) == 0x000004, "Wrong size on FortScriptedObjectMovement_MovableObjectBase_GetStaticPathZOffsetHeight");
static_assert(offsetof(FortScriptedObjectMovement_MovableObjectBase_GetStaticPathZOffsetHeight, ReturnValue) == 0x000000, "Member 'FortScriptedObjectMovement_MovableObjectBase_GetStaticPathZOffsetHeight::ReturnValue' has a wrong offset!");

}

