#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TimeSynthController_Base

#include "Basic.hpp"

#include "TimeSynth_structs.hpp"
#include "TimeSynth_TrackStemData_structs.hpp"
#include "TimeSynth_TransitionData_structs.hpp"


namespace SDK::Params
{

// Function BP_TimeSynthController_Base.BP_TimeSynthController_Base_C.CalculateMaxClipDuration
// 0x0060 (0x0060 - 0x0000)
struct BP_TimeSynthController_Base_C_CalculateMaxClipDuration final
{
public:
	class UBP_TimeSynthTrackComponent_C*          Track;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Duration;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxDuration;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimeSynthQuantizationSettings         CallFunc_GetQuantizationSettings_QuantizationSettings; // 0x0014(0x0014)(NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimeSynth_TrackStemData               CallFunc_Array_Get_Item;                           // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TimeSynthController_Base_C_CalculateMaxClipDuration) == 0x000008, "Wrong alignment on BP_TimeSynthController_Base_C_CalculateMaxClipDuration");
static_assert(sizeof(BP_TimeSynthController_Base_C_CalculateMaxClipDuration) == 0x000060, "Wrong size on BP_TimeSynthController_Base_C_CalculateMaxClipDuration");
static_assert(offsetof(BP_TimeSynthController_Base_C_CalculateMaxClipDuration, Track) == 0x000000, "Member 'BP_TimeSynthController_Base_C_CalculateMaxClipDuration::Track' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_CalculateMaxClipDuration, Duration) == 0x000008, "Member 'BP_TimeSynthController_Base_C_CalculateMaxClipDuration::Duration' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_CalculateMaxClipDuration, MaxDuration) == 0x00000C, "Member 'BP_TimeSynthController_Base_C_CalculateMaxClipDuration::MaxDuration' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_CalculateMaxClipDuration, Temp_bool_Variable) == 0x000010, "Member 'BP_TimeSynthController_Base_C_CalculateMaxClipDuration::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_CalculateMaxClipDuration, CallFunc_GetQuantizationSettings_QuantizationSettings) == 0x000014, "Member 'BP_TimeSynthController_Base_C_CalculateMaxClipDuration::CallFunc_GetQuantizationSettings_QuantizationSettings' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_CalculateMaxClipDuration, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_TimeSynthController_Base_C_CalculateMaxClipDuration::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_CalculateMaxClipDuration, Temp_int_Array_Index_Variable) == 0x00002C, "Member 'BP_TimeSynthController_Base_C_CalculateMaxClipDuration::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_CalculateMaxClipDuration, Temp_int_Loop_Counter_Variable) == 0x000030, "Member 'BP_TimeSynthController_Base_C_CalculateMaxClipDuration::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_CalculateMaxClipDuration, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_TimeSynthController_Base_C_CalculateMaxClipDuration::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_CalculateMaxClipDuration, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'BP_TimeSynthController_Base_C_CalculateMaxClipDuration::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_CalculateMaxClipDuration, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'BP_TimeSynthController_Base_C_CalculateMaxClipDuration::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_CalculateMaxClipDuration, CallFunc_Multiply_IntInt_ReturnValue) == 0x000050, "Member 'BP_TimeSynthController_Base_C_CalculateMaxClipDuration::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_CalculateMaxClipDuration, CallFunc_Greater_IntInt_ReturnValue) == 0x000054, "Member 'BP_TimeSynthController_Base_C_CalculateMaxClipDuration::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_CalculateMaxClipDuration, K2Node_Select_Default) == 0x000058, "Member 'BP_TimeSynthController_Base_C_CalculateMaxClipDuration::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_CalculateMaxClipDuration, CallFunc_Greater_IntInt_ReturnValue_1) == 0x00005C, "Member 'BP_TimeSynthController_Base_C_CalculateMaxClipDuration::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");

// Function BP_TimeSynthController_Base.BP_TimeSynthController_Base_C.ChangeTrack
// 0x0048 (0x0048 - 0x0000)
struct BP_TimeSynthController_Base_C_ChangeTrack final
{
public:
	class UBP_TimeSynthTrackComponent_C*          New_Track;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_TimeSynthTrackComponent_C*          NewTrack;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckPlaystate_Result;                    // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckPlaystate_Result_1;                  // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetTrackID_TrackID;                       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetTrackID_TrackID_1;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasTransitionForTrack_Transition_Found;   // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimeSynth_TransitionData              CallFunc_HasTransitionForTrack_Transition_Data;    // 0x0028(0x0018)(HasGetValueTypeHash)
	class FName                                   CallFunc_GetTrackID_TrackID_2;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TimeSynthController_Base_C_ChangeTrack) == 0x000008, "Wrong alignment on BP_TimeSynthController_Base_C_ChangeTrack");
static_assert(sizeof(BP_TimeSynthController_Base_C_ChangeTrack) == 0x000048, "Wrong size on BP_TimeSynthController_Base_C_ChangeTrack");
static_assert(offsetof(BP_TimeSynthController_Base_C_ChangeTrack, New_Track) == 0x000000, "Member 'BP_TimeSynthController_Base_C_ChangeTrack::New_Track' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_ChangeTrack, NewTrack) == 0x000008, "Member 'BP_TimeSynthController_Base_C_ChangeTrack::NewTrack' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_ChangeTrack, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_TimeSynthController_Base_C_ChangeTrack::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_ChangeTrack, CallFunc_IsValid_ReturnValue_1) == 0x000011, "Member 'BP_TimeSynthController_Base_C_ChangeTrack::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_ChangeTrack, CallFunc_CheckPlaystate_Result) == 0x000012, "Member 'BP_TimeSynthController_Base_C_ChangeTrack::CallFunc_CheckPlaystate_Result' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_ChangeTrack, CallFunc_CheckPlaystate_Result_1) == 0x000013, "Member 'BP_TimeSynthController_Base_C_ChangeTrack::CallFunc_CheckPlaystate_Result_1' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_ChangeTrack, CallFunc_BooleanOR_ReturnValue) == 0x000014, "Member 'BP_TimeSynthController_Base_C_ChangeTrack::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_ChangeTrack, CallFunc_GetTrackID_TrackID) == 0x000018, "Member 'BP_TimeSynthController_Base_C_ChangeTrack::CallFunc_GetTrackID_TrackID' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_ChangeTrack, CallFunc_GetTrackID_TrackID_1) == 0x00001C, "Member 'BP_TimeSynthController_Base_C_ChangeTrack::CallFunc_GetTrackID_TrackID_1' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_ChangeTrack, CallFunc_HasTransitionForTrack_Transition_Found) == 0x000020, "Member 'BP_TimeSynthController_Base_C_ChangeTrack::CallFunc_HasTransitionForTrack_Transition_Found' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_ChangeTrack, CallFunc_HasTransitionForTrack_Transition_Data) == 0x000028, "Member 'BP_TimeSynthController_Base_C_ChangeTrack::CallFunc_HasTransitionForTrack_Transition_Data' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_ChangeTrack, CallFunc_GetTrackID_TrackID_2) == 0x000040, "Member 'BP_TimeSynthController_Base_C_ChangeTrack::CallFunc_GetTrackID_TrackID_2' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_ChangeTrack, CallFunc_NotEqual_NameName_ReturnValue) == 0x000044, "Member 'BP_TimeSynthController_Base_C_ChangeTrack::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");

// Function BP_TimeSynthController_Base.BP_TimeSynthController_Base_C.ExecuteUbergraph_BP_TimeSynthController_Base
// 0x0030 (0x0030 - 0x0000)
struct BP_TimeSynthController_Base_C_ExecuteUbergraph_BP_TimeSynthController_Base final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(ETimeSynthEventQuantization QuantizationType, int32 NumBars, float Beat)> K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(ETimeSynthEventQuantization QuantizationType, int32 NumBars, float Beat)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0010(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Index;                          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Volume_Multiplier;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTimeSynthVolumeGroup*                  CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TimeSynthController_Base_C_ExecuteUbergraph_BP_TimeSynthController_Base) == 0x000008, "Wrong alignment on BP_TimeSynthController_Base_C_ExecuteUbergraph_BP_TimeSynthController_Base");
static_assert(sizeof(BP_TimeSynthController_Base_C_ExecuteUbergraph_BP_TimeSynthController_Base) == 0x000030, "Wrong size on BP_TimeSynthController_Base_C_ExecuteUbergraph_BP_TimeSynthController_Base");
static_assert(offsetof(BP_TimeSynthController_Base_C_ExecuteUbergraph_BP_TimeSynthController_Base, EntryPoint) == 0x000000, "Member 'BP_TimeSynthController_Base_C_ExecuteUbergraph_BP_TimeSynthController_Base::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_ExecuteUbergraph_BP_TimeSynthController_Base, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BP_TimeSynthController_Base_C_ExecuteUbergraph_BP_TimeSynthController_Base::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_ExecuteUbergraph_BP_TimeSynthController_Base, K2Node_CreateDelegate_OutputDelegate_1) == 0x000010, "Member 'BP_TimeSynthController_Base_C_ExecuteUbergraph_BP_TimeSynthController_Base::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_ExecuteUbergraph_BP_TimeSynthController_Base, K2Node_CustomEvent_Index) == 0x00001C, "Member 'BP_TimeSynthController_Base_C_ExecuteUbergraph_BP_TimeSynthController_Base::K2Node_CustomEvent_Index' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_ExecuteUbergraph_BP_TimeSynthController_Base, K2Node_CustomEvent_Volume_Multiplier) == 0x000020, "Member 'BP_TimeSynthController_Base_C_ExecuteUbergraph_BP_TimeSynthController_Base::K2Node_CustomEvent_Volume_Multiplier' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_ExecuteUbergraph_BP_TimeSynthController_Base, CallFunc_MapRangeClamped_ReturnValue) == 0x000024, "Member 'BP_TimeSynthController_Base_C_ExecuteUbergraph_BP_TimeSynthController_Base::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_ExecuteUbergraph_BP_TimeSynthController_Base, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_TimeSynthController_Base_C_ExecuteUbergraph_BP_TimeSynthController_Base::CallFunc_Array_Get_Item' has a wrong offset!");

// Function BP_TimeSynthController_Base.BP_TimeSynthController_Base_C.FlushExtraClips
// 0x0040 (0x0040 - 0x0000)
struct BP_TimeSynthController_Base_C_FlushExtraClips final
{
public:
	bool                                          Exclude_Current;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_TimeSynthTrackComponent_C*          CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TimeSynthController_Base_C_FlushExtraClips) == 0x000008, "Wrong alignment on BP_TimeSynthController_Base_C_FlushExtraClips");
static_assert(sizeof(BP_TimeSynthController_Base_C_FlushExtraClips) == 0x000040, "Wrong size on BP_TimeSynthController_Base_C_FlushExtraClips");
static_assert(offsetof(BP_TimeSynthController_Base_C_FlushExtraClips, Exclude_Current) == 0x000000, "Member 'BP_TimeSynthController_Base_C_FlushExtraClips::Exclude_Current' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_FlushExtraClips, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_TimeSynthController_Base_C_FlushExtraClips::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_FlushExtraClips, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_TimeSynthController_Base_C_FlushExtraClips::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_FlushExtraClips, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_TimeSynthController_Base_C_FlushExtraClips::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_FlushExtraClips, CallFunc_Array_Get_Item) == 0x000010, "Member 'BP_TimeSynthController_Base_C_FlushExtraClips::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_FlushExtraClips, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'BP_TimeSynthController_Base_C_FlushExtraClips::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_FlushExtraClips, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x00001C, "Member 'BP_TimeSynthController_Base_C_FlushExtraClips::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_FlushExtraClips, CallFunc_Less_IntInt_ReturnValue) == 0x00001D, "Member 'BP_TimeSynthController_Base_C_FlushExtraClips::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_FlushExtraClips, CallFunc_BooleanAND_ReturnValue) == 0x00001E, "Member 'BP_TimeSynthController_Base_C_FlushExtraClips::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_FlushExtraClips, CallFunc_Conv_NameToString_ReturnValue) == 0x000020, "Member 'BP_TimeSynthController_Base_C_FlushExtraClips::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_FlushExtraClips, CallFunc_Concat_StrStr_ReturnValue) == 0x000030, "Member 'BP_TimeSynthController_Base_C_FlushExtraClips::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function BP_TimeSynthController_Base.BP_TimeSynthController_Base_C.GetIsPlaying
// 0x0001 (0x0001 - 0x0000)
struct BP_TimeSynthController_Base_C_GetIsPlaying final
{
public:
	bool                                          IsPlaying_0;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TimeSynthController_Base_C_GetIsPlaying) == 0x000001, "Wrong alignment on BP_TimeSynthController_Base_C_GetIsPlaying");
static_assert(sizeof(BP_TimeSynthController_Base_C_GetIsPlaying) == 0x000001, "Wrong size on BP_TimeSynthController_Base_C_GetIsPlaying");
static_assert(offsetof(BP_TimeSynthController_Base_C_GetIsPlaying, IsPlaying_0) == 0x000000, "Member 'BP_TimeSynthController_Base_C_GetIsPlaying::IsPlaying_0' has a wrong offset!");

// Function BP_TimeSynthController_Base.BP_TimeSynthController_Base_C.GetTimeSynthComponent
// 0x0008 (0x0008 - 0x0000)
struct BP_TimeSynthController_Base_C_GetTimeSynthComponent final
{
public:
	class UTimeSynthComponent*                    TimeSynth_0;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TimeSynthController_Base_C_GetTimeSynthComponent) == 0x000008, "Wrong alignment on BP_TimeSynthController_Base_C_GetTimeSynthComponent");
static_assert(sizeof(BP_TimeSynthController_Base_C_GetTimeSynthComponent) == 0x000008, "Wrong size on BP_TimeSynthController_Base_C_GetTimeSynthComponent");
static_assert(offsetof(BP_TimeSynthController_Base_C_GetTimeSynthComponent, TimeSynth_0) == 0x000000, "Member 'BP_TimeSynthController_Base_C_GetTimeSynthComponent::TimeSynth_0' has a wrong offset!");

// Function BP_TimeSynthController_Base.BP_TimeSynthController_Base_C.OnQuantizationBar
// 0x0028 (0x0028 - 0x0000)
struct BP_TimeSynthController_Base_C_OnQuantizationBar final
{
public:
	ETimeSynthEventQuantization                   QuantizationType;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumBars;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Beat;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimeSynthQuantizationSettings         CallFunc_GetQuantizationSettings_QuantizationSettings; // 0x0010(0x0014)(NoDestructor)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TimeSynthController_Base_C_OnQuantizationBar) == 0x000004, "Wrong alignment on BP_TimeSynthController_Base_C_OnQuantizationBar");
static_assert(sizeof(BP_TimeSynthController_Base_C_OnQuantizationBar) == 0x000028, "Wrong size on BP_TimeSynthController_Base_C_OnQuantizationBar");
static_assert(offsetof(BP_TimeSynthController_Base_C_OnQuantizationBar, QuantizationType) == 0x000000, "Member 'BP_TimeSynthController_Base_C_OnQuantizationBar::QuantizationType' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_OnQuantizationBar, NumBars) == 0x000004, "Member 'BP_TimeSynthController_Base_C_OnQuantizationBar::NumBars' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_OnQuantizationBar, Beat) == 0x000008, "Member 'BP_TimeSynthController_Base_C_OnQuantizationBar::Beat' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_OnQuantizationBar, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00000C, "Member 'BP_TimeSynthController_Base_C_OnQuantizationBar::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_OnQuantizationBar, CallFunc_GetQuantizationSettings_QuantizationSettings) == 0x000010, "Member 'BP_TimeSynthController_Base_C_OnQuantizationBar::CallFunc_GetQuantizationSettings_QuantizationSettings' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_OnQuantizationBar, CallFunc_Subtract_IntInt_ReturnValue) == 0x000024, "Member 'BP_TimeSynthController_Base_C_OnQuantizationBar::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

// Function BP_TimeSynthController_Base.BP_TimeSynthController_Base_C.OnQuantizationBeat
// 0x000C (0x000C - 0x0000)
struct BP_TimeSynthController_Base_C_OnQuantizationBeat final
{
public:
	ETimeSynthEventQuantization                   QuantizationType;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumBars;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Beat;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TimeSynthController_Base_C_OnQuantizationBeat) == 0x000004, "Wrong alignment on BP_TimeSynthController_Base_C_OnQuantizationBeat");
static_assert(sizeof(BP_TimeSynthController_Base_C_OnQuantizationBeat) == 0x00000C, "Wrong size on BP_TimeSynthController_Base_C_OnQuantizationBeat");
static_assert(offsetof(BP_TimeSynthController_Base_C_OnQuantizationBeat, QuantizationType) == 0x000000, "Member 'BP_TimeSynthController_Base_C_OnQuantizationBeat::QuantizationType' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_OnQuantizationBeat, NumBars) == 0x000004, "Member 'BP_TimeSynthController_Base_C_OnQuantizationBeat::NumBars' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_OnQuantizationBeat, Beat) == 0x000008, "Member 'BP_TimeSynthController_Base_C_OnQuantizationBeat::Beat' has a wrong offset!");

// Function BP_TimeSynthController_Base.BP_TimeSynthController_Base_C.OnTimeSynthTrackComponentRegistered
// 0x0008 (0x0008 - 0x0000)
struct BP_TimeSynthController_Base_C_OnTimeSynthTrackComponentRegistered final
{
public:
	const class UBP_TimeSynthTrackComponent_C*    Track;                                             // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TimeSynthController_Base_C_OnTimeSynthTrackComponentRegistered) == 0x000008, "Wrong alignment on BP_TimeSynthController_Base_C_OnTimeSynthTrackComponentRegistered");
static_assert(sizeof(BP_TimeSynthController_Base_C_OnTimeSynthTrackComponentRegistered) == 0x000008, "Wrong size on BP_TimeSynthController_Base_C_OnTimeSynthTrackComponentRegistered");
static_assert(offsetof(BP_TimeSynthController_Base_C_OnTimeSynthTrackComponentRegistered, Track) == 0x000000, "Member 'BP_TimeSynthController_Base_C_OnTimeSynthTrackComponentRegistered::Track' has a wrong offset!");

// Function BP_TimeSynthController_Base.BP_TimeSynthController_Base_C.PlayTransition
// 0x0058 (0x0058 - 0x0000)
struct BP_TimeSynthController_Base_C_PlayTransition final
{
public:
	struct FTimeSynth_TransitionData              Transition_Data;                                   // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class UBP_TimeSynthTrackComponent_C*          Queued_Track;                                      // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMaxClipDuration_MaxClipDuration;       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimeSynth_TrackStemData               CallFunc_Array_Get_Item;                           // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimeSynthClipHandle                   CallFunc_PlayClip_ReturnValue;                     // 0x004C(0x0008)(NoDestructor)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TimeSynthController_Base_C_PlayTransition) == 0x000008, "Wrong alignment on BP_TimeSynthController_Base_C_PlayTransition");
static_assert(sizeof(BP_TimeSynthController_Base_C_PlayTransition) == 0x000058, "Wrong size on BP_TimeSynthController_Base_C_PlayTransition");
static_assert(offsetof(BP_TimeSynthController_Base_C_PlayTransition, Transition_Data) == 0x000000, "Member 'BP_TimeSynthController_Base_C_PlayTransition::Transition_Data' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_PlayTransition, Queued_Track) == 0x000018, "Member 'BP_TimeSynthController_Base_C_PlayTransition::Queued_Track' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_PlayTransition, CallFunc_GetMaxClipDuration_MaxClipDuration) == 0x000020, "Member 'BP_TimeSynthController_Base_C_PlayTransition::CallFunc_GetMaxClipDuration_MaxClipDuration' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_PlayTransition, Temp_int_Array_Index_Variable) == 0x000024, "Member 'BP_TimeSynthController_Base_C_PlayTransition::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_PlayTransition, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_TimeSynthController_Base_C_PlayTransition::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_PlayTransition, CallFunc_Array_Get_Item) == 0x000030, "Member 'BP_TimeSynthController_Base_C_PlayTransition::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_PlayTransition, Temp_int_Loop_Counter_Variable) == 0x000040, "Member 'BP_TimeSynthController_Base_C_PlayTransition::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_PlayTransition, CallFunc_Less_IntInt_ReturnValue) == 0x000044, "Member 'BP_TimeSynthController_Base_C_PlayTransition::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_PlayTransition, CallFunc_Add_IntInt_ReturnValue) == 0x000048, "Member 'BP_TimeSynthController_Base_C_PlayTransition::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_PlayTransition, CallFunc_PlayClip_ReturnValue) == 0x00004C, "Member 'BP_TimeSynthController_Base_C_PlayTransition::CallFunc_PlayClip_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_PlayTransition, CallFunc_Array_Add_ReturnValue) == 0x000054, "Member 'BP_TimeSynthController_Base_C_PlayTransition::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BP_TimeSynthController_Base.BP_TimeSynthController_Base_C.QueueTrackStartInternal
// 0x0028 (0x0028 - 0x0000)
struct BP_TimeSynthController_Base_C_QueueTrackStartInternal final
{
public:
	class UBP_TimeSynthTrackComponent_C*          NewTrack;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WasActive;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimeSynthQuantizationSettings         CallFunc_GetQuantizationSettings_QuantizationSettings; // 0x000C(0x0014)(NoDestructor)
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TimeSynthController_Base_C_QueueTrackStartInternal) == 0x000008, "Wrong alignment on BP_TimeSynthController_Base_C_QueueTrackStartInternal");
static_assert(sizeof(BP_TimeSynthController_Base_C_QueueTrackStartInternal) == 0x000028, "Wrong size on BP_TimeSynthController_Base_C_QueueTrackStartInternal");
static_assert(offsetof(BP_TimeSynthController_Base_C_QueueTrackStartInternal, NewTrack) == 0x000000, "Member 'BP_TimeSynthController_Base_C_QueueTrackStartInternal::NewTrack' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_QueueTrackStartInternal, WasActive) == 0x000008, "Member 'BP_TimeSynthController_Base_C_QueueTrackStartInternal::WasActive' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_QueueTrackStartInternal, CallFunc_Not_PreBool_ReturnValue) == 0x000009, "Member 'BP_TimeSynthController_Base_C_QueueTrackStartInternal::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_QueueTrackStartInternal, CallFunc_GetQuantizationSettings_QuantizationSettings) == 0x00000C, "Member 'BP_TimeSynthController_Base_C_QueueTrackStartInternal::CallFunc_GetQuantizationSettings_QuantizationSettings' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_QueueTrackStartInternal, CallFunc_IsActive_ReturnValue) == 0x000020, "Member 'BP_TimeSynthController_Base_C_QueueTrackStartInternal::CallFunc_IsActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_QueueTrackStartInternal, CallFunc_Array_Add_ReturnValue) == 0x000024, "Member 'BP_TimeSynthController_Base_C_QueueTrackStartInternal::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BP_TimeSynthController_Base.BP_TimeSynthController_Base_C.RequestTrackChange
// 0x0020 (0x0020 - 0x0000)
struct BP_TimeSynthController_Base_C_RequestTrackChange final
{
public:
	class UBP_TimeSynthTrackComponent_C*          TrackRequesting;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanChangeTrack;                                    // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPriority_Priority;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPriority_Priority_1;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckPlaystate_Result;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckPlaystate_Result_1;                  // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TimeSynthController_Base_C_RequestTrackChange) == 0x000008, "Wrong alignment on BP_TimeSynthController_Base_C_RequestTrackChange");
static_assert(sizeof(BP_TimeSynthController_Base_C_RequestTrackChange) == 0x000020, "Wrong size on BP_TimeSynthController_Base_C_RequestTrackChange");
static_assert(offsetof(BP_TimeSynthController_Base_C_RequestTrackChange, TrackRequesting) == 0x000000, "Member 'BP_TimeSynthController_Base_C_RequestTrackChange::TrackRequesting' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_RequestTrackChange, CanChangeTrack) == 0x000008, "Member 'BP_TimeSynthController_Base_C_RequestTrackChange::CanChangeTrack' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_RequestTrackChange, CallFunc_GetPriority_Priority) == 0x00000C, "Member 'BP_TimeSynthController_Base_C_RequestTrackChange::CallFunc_GetPriority_Priority' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_RequestTrackChange, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_TimeSynthController_Base_C_RequestTrackChange::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_RequestTrackChange, CallFunc_GetPriority_Priority_1) == 0x000014, "Member 'BP_TimeSynthController_Base_C_RequestTrackChange::CallFunc_GetPriority_Priority_1' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_RequestTrackChange, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000018, "Member 'BP_TimeSynthController_Base_C_RequestTrackChange::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_RequestTrackChange, CallFunc_CheckPlaystate_Result) == 0x000019, "Member 'BP_TimeSynthController_Base_C_RequestTrackChange::CallFunc_CheckPlaystate_Result' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_RequestTrackChange, CallFunc_CheckPlaystate_Result_1) == 0x00001A, "Member 'BP_TimeSynthController_Base_C_RequestTrackChange::CallFunc_CheckPlaystate_Result_1' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_RequestTrackChange, CallFunc_BooleanOR_ReturnValue) == 0x00001B, "Member 'BP_TimeSynthController_Base_C_RequestTrackChange::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_RequestTrackChange, CallFunc_Not_PreBool_ReturnValue) == 0x00001C, "Member 'BP_TimeSynthController_Base_C_RequestTrackChange::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_TimeSynthController_Base.BP_TimeSynthController_Base_C.SetVolumeGroup
// 0x0008 (0x0008 - 0x0000)
struct BP_TimeSynthController_Base_C_SetVolumeGroup final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Volume_Multiplier;                                 // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TimeSynthController_Base_C_SetVolumeGroup) == 0x000004, "Wrong alignment on BP_TimeSynthController_Base_C_SetVolumeGroup");
static_assert(sizeof(BP_TimeSynthController_Base_C_SetVolumeGroup) == 0x000008, "Wrong size on BP_TimeSynthController_Base_C_SetVolumeGroup");
static_assert(offsetof(BP_TimeSynthController_Base_C_SetVolumeGroup, Index_0) == 0x000000, "Member 'BP_TimeSynthController_Base_C_SetVolumeGroup::Index_0' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_SetVolumeGroup, Volume_Multiplier) == 0x000004, "Member 'BP_TimeSynthController_Base_C_SetVolumeGroup::Volume_Multiplier' has a wrong offset!");

// Function BP_TimeSynthController_Base.BP_TimeSynthController_Base_C.StopAllMusic
// 0x0002 (0x0002 - 0x0000)
struct BP_TimeSynthController_Base_C_StopAllMusic final
{
public:
	bool                                          Play_Outro;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TimeSynthController_Base_C_StopAllMusic) == 0x000001, "Wrong alignment on BP_TimeSynthController_Base_C_StopAllMusic");
static_assert(sizeof(BP_TimeSynthController_Base_C_StopAllMusic) == 0x000002, "Wrong size on BP_TimeSynthController_Base_C_StopAllMusic");
static_assert(offsetof(BP_TimeSynthController_Base_C_StopAllMusic, Play_Outro) == 0x000000, "Member 'BP_TimeSynthController_Base_C_StopAllMusic::Play_Outro' has a wrong offset!");
static_assert(offsetof(BP_TimeSynthController_Base_C_StopAllMusic, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_TimeSynthController_Base_C_StopAllMusic::CallFunc_IsValid_ReturnValue' has a wrong offset!");

}

