#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SpecialEventGameplayRuntime

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayAbilities_structs.hpp"
#include "SpecialEventGameplayRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GameplayTags_0_structs.hpp"
#include "CommonUILegacy_structs.hpp"
#include "ModularGameplay_classes.hpp"
#include "CommonInput_structs.hpp"


namespace SDK
{

// Class SpecialEventGameplayRuntime.FortCheatManager_SpecialEvent
// 0x0000 (0x0038 - 0x0038)
class UFortCheatManager_SpecialEvent final : public UFortCheatManager_Coupled
{
public:
	void AddCSVEvent(const class FString& CSVEventName);
	void AutobalanceTargetScore();
	void ChangeWinCondition(float NewGoalScore);
	void CloseParachutes();
	void PauseWinCondition(bool bLockScores);
	void PlacePlayersInAircraft();
	void ResetMatchTimeToPrevious();
	void ResetSpecialEventAircraft();
	void ResetWinCondition();
	void ResetWinConditionProgressToZero();
	void ResumeWinCondition();
	void SendToNightNight();
	void SetDestroyVehiclesInStorm(bool bDestroyVehiclesInStorm);
	void SetIsSimulatingDamage(bool bIsSimulating);
	void SetLockingOnFocalPoint(bool bInLockingOnFocalPoint);
	void SetMatchTime(int32 NewMatchTime);
	void SetReturnToMainMenuDelay(float MinDelayReturnToMainMenu, float MaxDelayReturnToMainMenu);
	void ShrinkSafeZone();
	void SpecialEventClearAdditionalViewpoint();
	void SpecialEventSetAdditionalViewpoint(float X, float Y, float Z);
	void StartEventScript(int32 InStartingIndex);
	void TeleportAllPlayers(int32 SafeZoneIndex);
	void ToggleDisableParachutes(bool bIsDisabled);
	void UnloadTerrainMaps(class FName MapTag);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCheatManager_SpecialEvent">();
	}
	static class UFortCheatManager_SpecialEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCheatManager_SpecialEvent>();
	}
};
static_assert(alignof(UFortCheatManager_SpecialEvent) == 0x000008, "Wrong alignment on UFortCheatManager_SpecialEvent");
static_assert(sizeof(UFortCheatManager_SpecialEvent) == 0x000038, "Wrong size on UFortCheatManager_SpecialEvent");

// Class SpecialEventGameplayRuntime.FortCheatManager_DestroyActorsAndComponents
// 0x0000 (0x0038 - 0x0038)
class UFortCheatManager_DestroyActorsAndComponents final : public UFortCheatManager_Coupled
{
public:
	void DestroyActorsAndComponentsMutator_SetActorDefinitionsEnabled(const class FString& TagString, const bool bEnabled);

	void DestroyActorsAndComponentsMutator_ListActorComponents(const class FString& InActorName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCheatManager_DestroyActorsAndComponents">();
	}
	static class UFortCheatManager_DestroyActorsAndComponents* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCheatManager_DestroyActorsAndComponents>();
	}
};
static_assert(alignof(UFortCheatManager_DestroyActorsAndComponents) == 0x000008, "Wrong alignment on UFortCheatManager_DestroyActorsAndComponents");
static_assert(sizeof(UFortCheatManager_DestroyActorsAndComponents) == 0x000038, "Wrong size on UFortCheatManager_DestroyActorsAndComponents");

// Class SpecialEventGameplayRuntime.FortAthenaMutator_DestroyActorsAndComponents
// 0x0030 (0x0348 - 0x0318)
class AFortAthenaMutator_DestroyActorsAndComponents final : public AFortAthenaMutator
{
public:
	TArray<struct FDestroyActorsAndComponentsMutator_ActorDefinition> ActorDefinitions;                                  // 0x0318(0x0010)(Edit, Net, ZeroConstructor, DisableEditOnInstance, RepNotify, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_328[0x20];                                     // 0x0328(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_ActorDefinitions(const TArray<struct FDestroyActorsAndComponentsMutator_ActorDefinition>& OldActorDefinitions);
	void OnTrackedActorDestroyed(class AActor* DestroyedActor);
	void PermanentlyDisableActorDefinitions(const struct FGameplayTagContainer& InTags);
	void SetActorDefinitionsEnabled(const struct FGameplayTagContainer& InTags, const bool bEnabled);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaMutator_DestroyActorsAndComponents">();
	}
	static class AFortAthenaMutator_DestroyActorsAndComponents* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortAthenaMutator_DestroyActorsAndComponents>();
	}
};
static_assert(alignof(AFortAthenaMutator_DestroyActorsAndComponents) == 0x000008, "Wrong alignment on AFortAthenaMutator_DestroyActorsAndComponents");
static_assert(sizeof(AFortAthenaMutator_DestroyActorsAndComponents) == 0x000348, "Wrong size on AFortAthenaMutator_DestroyActorsAndComponents");
static_assert(offsetof(AFortAthenaMutator_DestroyActorsAndComponents, ActorDefinitions) == 0x000318, "Member 'AFortAthenaMutator_DestroyActorsAndComponents::ActorDefinitions' has a wrong offset!");

// Class SpecialEventGameplayRuntime.FortCheatManager_FakeKillRelevancy
// 0x0000 (0x0038 - 0x0038)
class UFortCheatManager_FakeKillRelevancy final : public UFortCheatManager_Coupled
{
public:
	void FakeKillRelevancyDebug(const float TextScale);
	void FakeKillRelevancyReset();
	void FakeKillRelevancySetUpPhase(const int32 MaxPlayersRemaining, const class FString& ReasonGameplayTagString, const int32 NumWaves, const float RelevancyDelay);
	void FakeKillRelevancyStartNextWave();
	void FakeKillRelevancyTestAlgorithm(const int32 NumPlayers, const class FString& MaxPlayersRemainingAfterPhases, const int32 MinSquadSize, const int32 MaxSquadSize, const int32 Iterations, const int32 LogVerbosity);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCheatManager_FakeKillRelevancy">();
	}
	static class UFortCheatManager_FakeKillRelevancy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCheatManager_FakeKillRelevancy>();
	}
};
static_assert(alignof(UFortCheatManager_FakeKillRelevancy) == 0x000008, "Wrong alignment on UFortCheatManager_FakeKillRelevancy");
static_assert(sizeof(UFortCheatManager_FakeKillRelevancy) == 0x000038, "Wrong size on UFortCheatManager_FakeKillRelevancy");

// Class SpecialEventGameplayRuntime.FortControllerComponent_FakeKillRelevancy
// 0x0188 (0x0228 - 0x00A0)
class UFortControllerComponent_FakeKillRelevancy final : public UFortControllerComponent
{
public:
	struct FFakeKillRelevancyPlayerDataArray      PlayerDataArray;                                   // 0x00A0(0x0120)(Net, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TMap<class AFortPlayerStateAthena*, EFakeKillRelevancyPlayerKillStep> ClientPlayerStateKillStepMap;                      // 0x01C0(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         ResetCounter;                                      // 0x0210(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_211[0x7];                                      // 0x0211(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AFortPlayerStateAthena*>         DebugSupergroupPlayerStates;                       // 0x0218(0x0010)(Net, ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	void CancelKillEffectsOnClient(const TArray<class AFortPlayerStateAthena*>& PlayerStates);
	void CancelKillEffectsOnServer();
	void OnKillEffectsPlayed(const class AFortPlayerStateAthena* PlayerState);
	void OnRep_ResetCounter();
	void PlayKillEffects(const struct FFakeKillRelevancyPlayerDataEntry& FakeKillData, const float RelevancyDelay);
	void ResetRelevancy();

	struct FVector GetDeathLocation(const class AFortPlayerStateAthena* PlayerState) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortControllerComponent_FakeKillRelevancy">();
	}
	static class UFortControllerComponent_FakeKillRelevancy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortControllerComponent_FakeKillRelevancy>();
	}
};
static_assert(alignof(UFortControllerComponent_FakeKillRelevancy) == 0x000008, "Wrong alignment on UFortControllerComponent_FakeKillRelevancy");
static_assert(sizeof(UFortControllerComponent_FakeKillRelevancy) == 0x000228, "Wrong size on UFortControllerComponent_FakeKillRelevancy");
static_assert(offsetof(UFortControllerComponent_FakeKillRelevancy, PlayerDataArray) == 0x0000A0, "Member 'UFortControllerComponent_FakeKillRelevancy::PlayerDataArray' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_FakeKillRelevancy, ClientPlayerStateKillStepMap) == 0x0001C0, "Member 'UFortControllerComponent_FakeKillRelevancy::ClientPlayerStateKillStepMap' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_FakeKillRelevancy, ResetCounter) == 0x000210, "Member 'UFortControllerComponent_FakeKillRelevancy::ResetCounter' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_FakeKillRelevancy, DebugSupergroupPlayerStates) == 0x000218, "Member 'UFortControllerComponent_FakeKillRelevancy::DebugSupergroupPlayerStates' has a wrong offset!");

// Class SpecialEventGameplayRuntime.FortAthenaMutator_FakeKillRelevancy
// 0x0060 (0x0480 - 0x0420)
class AFortAthenaMutator_FakeKillRelevancy final : public AFortAthenaMutator_SpecialRelevancy
{
public:
	TSubclassOf<class UFortControllerComponent_FakeKillRelevancy> FakeKillControllerComponentClass;                  // 0x0420(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FFakeKillRelevancyPhaseData>    RelevancyPhaseDataArray;                           // 0x0428(0x0010)(Net, ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         PhaseNum;                                          // 0x0438(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_43C[0x44];                                     // 0x043C(0x0044)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EndWave(const int32 EndPhaseNum, const int32 WaveNum);
	void ResetRelevancy();
	void SetUpKillPhase(const int32 MaxPlayersRemaining, const struct FGameplayTag& Reason, const int32 NumWaves, const float RelevancyDelay);
	void StartNextKillWave();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaMutator_FakeKillRelevancy">();
	}
	static class AFortAthenaMutator_FakeKillRelevancy* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortAthenaMutator_FakeKillRelevancy>();
	}
};
static_assert(alignof(AFortAthenaMutator_FakeKillRelevancy) == 0x000008, "Wrong alignment on AFortAthenaMutator_FakeKillRelevancy");
static_assert(sizeof(AFortAthenaMutator_FakeKillRelevancy) == 0x000480, "Wrong size on AFortAthenaMutator_FakeKillRelevancy");
static_assert(offsetof(AFortAthenaMutator_FakeKillRelevancy, FakeKillControllerComponentClass) == 0x000420, "Member 'AFortAthenaMutator_FakeKillRelevancy::FakeKillControllerComponentClass' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_FakeKillRelevancy, RelevancyPhaseDataArray) == 0x000428, "Member 'AFortAthenaMutator_FakeKillRelevancy::RelevancyPhaseDataArray' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_FakeKillRelevancy, PhaseNum) == 0x000438, "Member 'AFortAthenaMutator_FakeKillRelevancy::PhaseNum' has a wrong offset!");

// Class SpecialEventGameplayRuntime.FortAthenaMutator_LoadGameFeature
// 0x0010 (0x0328 - 0x0318)
class AFortAthenaMutator_LoadGameFeature final : public AFortAthenaMutator
{
public:
	class FString                                 GameFeatureToLoad;                                 // 0x0318(0x0010)(Edit, ZeroConstructor, Config, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnPlaylistDataReady(class AFortGameStateAthena* GameState, const class UFortPlaylist* Playlist, const struct FGameplayTagContainer& PlaylistContextTags);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaMutator_LoadGameFeature">();
	}
	static class AFortAthenaMutator_LoadGameFeature* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortAthenaMutator_LoadGameFeature>();
	}
};
static_assert(alignof(AFortAthenaMutator_LoadGameFeature) == 0x000008, "Wrong alignment on AFortAthenaMutator_LoadGameFeature");
static_assert(sizeof(AFortAthenaMutator_LoadGameFeature) == 0x000328, "Wrong size on AFortAthenaMutator_LoadGameFeature");
static_assert(offsetof(AFortAthenaMutator_LoadGameFeature, GameFeatureToLoad) == 0x000318, "Member 'AFortAthenaMutator_LoadGameFeature::GameFeatureToLoad' has a wrong offset!");

// Class SpecialEventGameplayRuntime.FortAthenaMutator_RemoveGameFeatures
// 0x0010 (0x0328 - 0x0318)
class AFortAthenaMutator_RemoveGameFeatures final : public AFortAthenaMutator
{
public:
	TArray<class FString>                         AllowedGameFeatures;                               // 0x0318(0x0010)(Edit, ZeroConstructor, Config, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	void OnPlaylistDataReady(class AFortGameStateAthena* GameState, const class UFortPlaylist* Playlist, const struct FGameplayTagContainer& PlaylistContextTags);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaMutator_RemoveGameFeatures">();
	}
	static class AFortAthenaMutator_RemoveGameFeatures* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortAthenaMutator_RemoveGameFeatures>();
	}
};
static_assert(alignof(AFortAthenaMutator_RemoveGameFeatures) == 0x000008, "Wrong alignment on AFortAthenaMutator_RemoveGameFeatures");
static_assert(sizeof(AFortAthenaMutator_RemoveGameFeatures) == 0x000328, "Wrong size on AFortAthenaMutator_RemoveGameFeatures");
static_assert(offsetof(AFortAthenaMutator_RemoveGameFeatures, AllowedGameFeatures) == 0x000318, "Member 'AFortAthenaMutator_RemoveGameFeatures::AllowedGameFeatures' has a wrong offset!");

// Class SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEvent
// 0x0408 (0x0720 - 0x0318)
class AFortAthenaMutator_SpecialEvent final : public AFortAthenaMutator
{
public:
	TMulticastInlineDelegate<void()>              TeleportAllPlayersFinished;                        // 0x0318(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AFortPlayerPawnAthena* NewPawn)> OnPawnLoaded;                                      // 0x0328(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AFortPlayerControllerAthena* NewPlayer)> OnInitController;                                  // 0x0338(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnResumeGame;                                      // 0x0348(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FSpecialClientEvent& ClientEventData)> OnSpecialClientEvent;                              // 0x0358(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class APlayerState* PlayerState)> OnHandleLogout;                                    // 0x0368(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnClientInitialLoadingFinished;                    // 0x0378(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_388[0x68];                                     // 0x0388(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bPlayersAreInvincible;                             // 0x03F0(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3F1[0x27];                                     // 0x03F1(0x0027)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinimumScoreBumpForAutomadeGoal;                   // 0x0418(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_41C[0x4];                                      // 0x041C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ScoreBrackets;                                     // 0x0420(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bEnforceInfiniteSafeZonePhase;                     // 0x0430(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_431[0x3];                                      // 0x0431(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   WarmupIslandPlayerStartTag;                        // 0x0434(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowInventoryOpen;                               // 0x0438(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_439[0x7];                                      // 0x0439(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         bAllowFullScreenMap;                               // 0x0440(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	bool                                          bShouldClearFrontEndMapMarkers;                    // 0x0468(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBlockTeamIndicators;                              // 0x0469(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_46A[0x6];                                      // 0x046A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  UIToHideDuringSpecialEvent;                        // 0x0470(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  UIToHideWhenInInfiniteWarmup;                      // 0x0490(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  ClientEventsThatUnhideHiddenWhileLoadingHUDElements; // 0x04B0(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	bool                                          bForceGarbageCollectionAfterUnloadOnServer;        // 0x04D0(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bForceGarbageCollectionAfterUnloadOnClient;        // 0x04D1(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFullPurgeGC;                                      // 0x04D2(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4D3[0x5];                                      // 0x04D3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortAthenaAircraft*                    EventAircraft;                                     // 0x04D8(0x0008)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FAircraftFlightInfo                    EventAircraftInfo;                                 // 0x04E0(0x0048)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class AFortAthenaAircraft>        EventAircraftClass;                                // 0x0528(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASpecialEventScript*                    ScriptActor;                                       // 0x0530(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDisableHUD;                                       // 0x0538(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         GameResumed;                                       // 0x0539(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_53A[0x6];                                      // 0x053A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AdditionalViewpoint;                               // 0x0540(0x0018)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bParachutesDisabled;                               // 0x0558(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_559[0x7];                                      // 0x0559(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LastCSVEventName;                                  // 0x0560(0x0010)(Net, ZeroConstructor, RepNotify, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanStreamBuildingFoundationsIn;                   // 0x0570(0x0001)(Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_571[0x3];                                      // 0x0571(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AllPlayerTeleportedCount;                          // 0x0574(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FFortDelayRTMMData                     DelayPlayersFromReturningToLobbyData;              // 0x0578(0x0010)(Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class FName                                   NamedWeightForContainerLootRoll;                   // 0x0588(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WeightForContainerLootRoll;                        // 0x058C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_590[0x30];                                     // 0x0590(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortSpecialEventEmoteData>     SpecialEventEmoteData;                             // 0x05C0(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  BlockedNativeActions;                              // 0x05D0(0x0020)(Edit, Net, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UInputComponent*                        SpecialEventsInputComponent;                       // 0x05F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLockingOnFocalPoint;                              // 0x05F8(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5F9[0x7];                                      // 0x05F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortSpecialEventOverrideParts> SpecialEventOverrideParts;                         // 0x0600(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FFortSpecialEventGEData                GameplayEffectToApplyOnSwapToDefault;              // 0x0610(0x0010)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TMap<struct FUniqueNetIdRepl, int32>          OverridePartsArrayIndexMap;                        // 0x0620(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	TArray<struct FFortSpecialEventGEData>        GameplayEffectsToApplyOnLogin;                     // 0x0670(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FSpecialEventMapData>           TerrainMapsToUnload;                               // 0x0680(0x0010)(Edit, Net, ZeroConstructor, DisableEditOnInstance, RepNotify, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_690[0x10];                                     // 0x0690(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AFortPlayerControllerAthena*>    UnhandledPlayerControllers;                        // 0x06A0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           HLODActorsToHideNames;                             // 0x06B0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          bForceAllowCloth;                                  // 0x06C0(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6C1[0x1];                                      // 0x06C1(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bCanToggleCursorModeInStasis;                      // 0x06C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C3[0x5];                                      // 0x06C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         MannequinRecentlyRenderedCheckToleranceValue;      // 0x06C8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class ASpecialEventPlayerMannequin*>   SpecialEventMannequins;                            // 0x06F0(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class AActor>>             ActorSpawnDelegateClasses;                         // 0x0700(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_710[0x10];                                     // 0x0710(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddClientCSVEvent(const class FString& CSVEventName);
	void AddCSVEvent(const class FString& CSVEventName, bool bShouldRepToClient);
	void AddToBlockedNativeActions(const struct FGameplayTagContainer& Actions, const bool bCancelAbilities);
	void AutobalanceTargetScore();
	void ChangeWinCondition(float NewGoalScore);
	void ClearAdditionalViewpoint();
	void ClearBlockedNativeActions();
	void CloseParachutes();
	void FlushUnhandledPlayerControllers();
	void ForceSafeZoneFinalLocation(const struct FVector& NewFinalLocation, float DefaultAircraftOffsetFromMidLine, float MinDefaultMidlineAngle, float MaxDefaultMidlineAngle);
	void HandleSpecialEventMannequinDestroyed(class AActor* MannequinActor);
	void JumpToSafeZonePhase(const struct FVector& PawnSpawnCenterLocation, float PawnSpawnMinDistance, float PawnSpawnMaxDistance);
	void NotifyClientsGameResumed();
	void OnActorPreSpawnInitialization(class AActor* Actor);
	void OnActorSpawned(class AActor* Actor);
	void OnAircraftEnteredDropZone(class AFortAthenaAircraft* FortAthenaAircraft);
	void OnAircraftExitedDropZone(class AFortAthenaAircraft* FortAthenaAircraft);
	void OnAircraftFlightEnded(class AFortAthenaAircraft* FortAthenaAircraft);
	void OnGamePhaseStepChanged(const TScriptInterface<class IFortSafeZoneInterface>& SafeZoneInterface, const EAthenaGamePhaseStep GamePhaseStep);
	void OnGameViewportActivationChanged(bool bHasFocus);
	void OnRep_AdditionalViewpoint();
	void OnRep_Aircraft();
	void OnRep_AllPlayerTeleportedCount();
	void OnRep_bCanStreamBuildingFoundationsIn();
	void OnRep_bDisableHUD();
	void OnRep_bLockingOnFocalPoint();
	void OnRep_bPlayersAreInvincible();
	void OnRep_DelayPlayersFromReturningToLobbyData();
	void OnRep_GameResumed();
	void OnRep_LastCSVEventName();
	void OnRep_TerrainMapsToUnload();
	void OnWarmUpTeleportComplete(class AFortPlayerPawn* PlayerPawn);
	void PauseStormDamage(bool bPause);
	void PauseStormProgression(bool bPause);
	void PauseSupplyDrops(bool bPause);
	void PauseWinCondition(bool bLockScores);
	void PlacePlayersInAircraft();
	void PopSpecialEventEmoteInputComponent();
	void PushSpecialEventEmoteInputComponent();
	void RemoveFromBlockedNativeActions(const struct FGameplayTagContainer& Actions);
	void ResetMatchTimeToPrevious();
	void ResetSafeZoneOverrideAfterEvent(int32 MinResetSafeZoneIndex, float MinDelayReturnToMainMenu, float MaxDelayReturnToMainMenu);
	void ResetSpecialEventAircraft();
	void ResetWinCondition();
	void ResetWinConditionProgressToZero();
	void ResumeWinCondition();
	void SendToNightNight();
	void SetAdditionalViewpoint(const struct FVector& WorldLocation);
	void SetCanStreamBuildingFoundationsIn(bool bEnable);
	void SetDestroyVehiclesInStorm(bool bDestroyVehiclesInStorm);
	void SetIsSimulatingDamage(bool bIsSimulating);
	void SetLockingOnFocalPoint(bool bInLockingOnFocalPoint);
	void SetMatchTime(int32 NewMatchTime);
	void SetNamedWeightForContainerLootRoll(const class FName WeightName);
	void SetReturnToMainMenuDelay(float MinDelayReturnToMainMenu, float MaxDelayReturnToMainMenu);
	void SetWeightForContainerLootRoll(const float Weight);
	void ShrinkSafeZone();
	void StartSafeZoneOverrideForEvent(int32 SafeZoneIndexForEvent);
	void SwapBodyParts(const int32 ArrayIndex, class AFortPlayerController* FortPC);
	void TeleportAllPlayers(const struct FGameplayTagContainer& EventTags, int32 TeleportsPerFrame, int32 SafeZoneIndex);
	void ToggleAllPlayersInvincibility(bool bInvincible);
	void ToggleDisableParachutes(bool bDisable);
	void ToggleDisableWeapons(bool bDisableWeapons);
	void ToggleHUDs(bool bHide);
	void UnloadTerrainMaps(const struct FGameplayTag& MapTag);
	void WarmUpIslandUpdated();

	bool GetHasInfiniteSafeZonePhase() const;
	class ASpecialEventScript* GetScript() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaMutator_SpecialEvent">();
	}
	static class AFortAthenaMutator_SpecialEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortAthenaMutator_SpecialEvent>();
	}
};
static_assert(alignof(AFortAthenaMutator_SpecialEvent) == 0x000008, "Wrong alignment on AFortAthenaMutator_SpecialEvent");
static_assert(sizeof(AFortAthenaMutator_SpecialEvent) == 0x000720, "Wrong size on AFortAthenaMutator_SpecialEvent");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, TeleportAllPlayersFinished) == 0x000318, "Member 'AFortAthenaMutator_SpecialEvent::TeleportAllPlayersFinished' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, OnPawnLoaded) == 0x000328, "Member 'AFortAthenaMutator_SpecialEvent::OnPawnLoaded' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, OnInitController) == 0x000338, "Member 'AFortAthenaMutator_SpecialEvent::OnInitController' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, OnResumeGame) == 0x000348, "Member 'AFortAthenaMutator_SpecialEvent::OnResumeGame' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, OnSpecialClientEvent) == 0x000358, "Member 'AFortAthenaMutator_SpecialEvent::OnSpecialClientEvent' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, OnHandleLogout) == 0x000368, "Member 'AFortAthenaMutator_SpecialEvent::OnHandleLogout' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, OnClientInitialLoadingFinished) == 0x000378, "Member 'AFortAthenaMutator_SpecialEvent::OnClientInitialLoadingFinished' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, bPlayersAreInvincible) == 0x0003F0, "Member 'AFortAthenaMutator_SpecialEvent::bPlayersAreInvincible' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, MinimumScoreBumpForAutomadeGoal) == 0x000418, "Member 'AFortAthenaMutator_SpecialEvent::MinimumScoreBumpForAutomadeGoal' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, ScoreBrackets) == 0x000420, "Member 'AFortAthenaMutator_SpecialEvent::ScoreBrackets' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, bEnforceInfiniteSafeZonePhase) == 0x000430, "Member 'AFortAthenaMutator_SpecialEvent::bEnforceInfiniteSafeZonePhase' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, WarmupIslandPlayerStartTag) == 0x000434, "Member 'AFortAthenaMutator_SpecialEvent::WarmupIslandPlayerStartTag' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, bAllowInventoryOpen) == 0x000438, "Member 'AFortAthenaMutator_SpecialEvent::bAllowInventoryOpen' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, bAllowFullScreenMap) == 0x000440, "Member 'AFortAthenaMutator_SpecialEvent::bAllowFullScreenMap' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, bShouldClearFrontEndMapMarkers) == 0x000468, "Member 'AFortAthenaMutator_SpecialEvent::bShouldClearFrontEndMapMarkers' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, bBlockTeamIndicators) == 0x000469, "Member 'AFortAthenaMutator_SpecialEvent::bBlockTeamIndicators' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, UIToHideDuringSpecialEvent) == 0x000470, "Member 'AFortAthenaMutator_SpecialEvent::UIToHideDuringSpecialEvent' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, UIToHideWhenInInfiniteWarmup) == 0x000490, "Member 'AFortAthenaMutator_SpecialEvent::UIToHideWhenInInfiniteWarmup' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, ClientEventsThatUnhideHiddenWhileLoadingHUDElements) == 0x0004B0, "Member 'AFortAthenaMutator_SpecialEvent::ClientEventsThatUnhideHiddenWhileLoadingHUDElements' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, bForceGarbageCollectionAfterUnloadOnServer) == 0x0004D0, "Member 'AFortAthenaMutator_SpecialEvent::bForceGarbageCollectionAfterUnloadOnServer' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, bForceGarbageCollectionAfterUnloadOnClient) == 0x0004D1, "Member 'AFortAthenaMutator_SpecialEvent::bForceGarbageCollectionAfterUnloadOnClient' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, bFullPurgeGC) == 0x0004D2, "Member 'AFortAthenaMutator_SpecialEvent::bFullPurgeGC' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, EventAircraft) == 0x0004D8, "Member 'AFortAthenaMutator_SpecialEvent::EventAircraft' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, EventAircraftInfo) == 0x0004E0, "Member 'AFortAthenaMutator_SpecialEvent::EventAircraftInfo' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, EventAircraftClass) == 0x000528, "Member 'AFortAthenaMutator_SpecialEvent::EventAircraftClass' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, ScriptActor) == 0x000530, "Member 'AFortAthenaMutator_SpecialEvent::ScriptActor' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, bDisableHUD) == 0x000538, "Member 'AFortAthenaMutator_SpecialEvent::bDisableHUD' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, GameResumed) == 0x000539, "Member 'AFortAthenaMutator_SpecialEvent::GameResumed' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, AdditionalViewpoint) == 0x000540, "Member 'AFortAthenaMutator_SpecialEvent::AdditionalViewpoint' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, bParachutesDisabled) == 0x000558, "Member 'AFortAthenaMutator_SpecialEvent::bParachutesDisabled' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, LastCSVEventName) == 0x000560, "Member 'AFortAthenaMutator_SpecialEvent::LastCSVEventName' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, bCanStreamBuildingFoundationsIn) == 0x000570, "Member 'AFortAthenaMutator_SpecialEvent::bCanStreamBuildingFoundationsIn' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, AllPlayerTeleportedCount) == 0x000574, "Member 'AFortAthenaMutator_SpecialEvent::AllPlayerTeleportedCount' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, DelayPlayersFromReturningToLobbyData) == 0x000578, "Member 'AFortAthenaMutator_SpecialEvent::DelayPlayersFromReturningToLobbyData' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, NamedWeightForContainerLootRoll) == 0x000588, "Member 'AFortAthenaMutator_SpecialEvent::NamedWeightForContainerLootRoll' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, WeightForContainerLootRoll) == 0x00058C, "Member 'AFortAthenaMutator_SpecialEvent::WeightForContainerLootRoll' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, SpecialEventEmoteData) == 0x0005C0, "Member 'AFortAthenaMutator_SpecialEvent::SpecialEventEmoteData' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, BlockedNativeActions) == 0x0005D0, "Member 'AFortAthenaMutator_SpecialEvent::BlockedNativeActions' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, SpecialEventsInputComponent) == 0x0005F0, "Member 'AFortAthenaMutator_SpecialEvent::SpecialEventsInputComponent' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, bLockingOnFocalPoint) == 0x0005F8, "Member 'AFortAthenaMutator_SpecialEvent::bLockingOnFocalPoint' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, SpecialEventOverrideParts) == 0x000600, "Member 'AFortAthenaMutator_SpecialEvent::SpecialEventOverrideParts' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, GameplayEffectToApplyOnSwapToDefault) == 0x000610, "Member 'AFortAthenaMutator_SpecialEvent::GameplayEffectToApplyOnSwapToDefault' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, OverridePartsArrayIndexMap) == 0x000620, "Member 'AFortAthenaMutator_SpecialEvent::OverridePartsArrayIndexMap' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, GameplayEffectsToApplyOnLogin) == 0x000670, "Member 'AFortAthenaMutator_SpecialEvent::GameplayEffectsToApplyOnLogin' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, TerrainMapsToUnload) == 0x000680, "Member 'AFortAthenaMutator_SpecialEvent::TerrainMapsToUnload' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, UnhandledPlayerControllers) == 0x0006A0, "Member 'AFortAthenaMutator_SpecialEvent::UnhandledPlayerControllers' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, HLODActorsToHideNames) == 0x0006B0, "Member 'AFortAthenaMutator_SpecialEvent::HLODActorsToHideNames' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, bForceAllowCloth) == 0x0006C0, "Member 'AFortAthenaMutator_SpecialEvent::bForceAllowCloth' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, bCanToggleCursorModeInStasis) == 0x0006C2, "Member 'AFortAthenaMutator_SpecialEvent::bCanToggleCursorModeInStasis' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, MannequinRecentlyRenderedCheckToleranceValue) == 0x0006C8, "Member 'AFortAthenaMutator_SpecialEvent::MannequinRecentlyRenderedCheckToleranceValue' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, SpecialEventMannequins) == 0x0006F0, "Member 'AFortAthenaMutator_SpecialEvent::SpecialEventMannequins' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEvent, ActorSpawnDelegateClasses) == 0x000700, "Member 'AFortAthenaMutator_SpecialEvent::ActorSpawnDelegateClasses' has a wrong offset!");

// Class SpecialEventGameplayRuntime.FortAthenaMutator_SpecialEventTODM
// 0x0030 (0x0348 - 0x0318)
class AFortAthenaMutator_SpecialEventTODM final : public AFortAthenaMutator
{
public:
	TArray<struct FSpecialEventTODMPhaseData>     PhaseDataArray;                                    // 0x0318(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class ASpecialEventScript*                    SpecialEventScript;                                // 0x0328(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_330[0x10];                                     // 0x0330(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortTimeOfDayManager*                  SpawnedTODM;                                       // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnPhaseActivated(class ASpecialEventScript* InSpecialEventScript, class ASpecialEventPhase* InSpecialEventPhase);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaMutator_SpecialEventTODM">();
	}
	static class AFortAthenaMutator_SpecialEventTODM* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortAthenaMutator_SpecialEventTODM>();
	}
};
static_assert(alignof(AFortAthenaMutator_SpecialEventTODM) == 0x000008, "Wrong alignment on AFortAthenaMutator_SpecialEventTODM");
static_assert(sizeof(AFortAthenaMutator_SpecialEventTODM) == 0x000348, "Wrong size on AFortAthenaMutator_SpecialEventTODM");
static_assert(offsetof(AFortAthenaMutator_SpecialEventTODM, PhaseDataArray) == 0x000318, "Member 'AFortAthenaMutator_SpecialEventTODM::PhaseDataArray' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEventTODM, SpecialEventScript) == 0x000328, "Member 'AFortAthenaMutator_SpecialEventTODM::SpecialEventScript' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_SpecialEventTODM, SpawnedTODM) == 0x000340, "Member 'AFortAthenaMutator_SpecialEventTODM::SpawnedTODM' has a wrong offset!");

// Class SpecialEventGameplayRuntime.FortCameraMode_SpecialEventFocalPoint
// 0x0010 (0x1AC0 - 0x1AB0)
class UFortCameraMode_SpecialEventFocalPoint final : public UFortCameraMode_FocalPoint
{
public:
	float                                         OverrideTransitionTime;                            // 0x1AB0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1AB4[0xC];                                     // 0x1AB4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBecomeActiveBP(class AActor* ViewTarget);
	void OnBecomeInactiveBP(class AActor* ViewTarget);
	void SetOverrideTransitionTime(const float InTransitionTime);
	void UpdateCameraBP(class AActor* ViewTarget, float DeltaTime, struct FTViewTarget& OutVT);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCameraMode_SpecialEventFocalPoint">();
	}
	static class UFortCameraMode_SpecialEventFocalPoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCameraMode_SpecialEventFocalPoint>();
	}
};
static_assert(alignof(UFortCameraMode_SpecialEventFocalPoint) == 0x000010, "Wrong alignment on UFortCameraMode_SpecialEventFocalPoint");
static_assert(sizeof(UFortCameraMode_SpecialEventFocalPoint) == 0x001AC0, "Wrong size on UFortCameraMode_SpecialEventFocalPoint");
static_assert(offsetof(UFortCameraMode_SpecialEventFocalPoint, OverrideTransitionTime) == 0x001AB0, "Member 'UFortCameraMode_SpecialEventFocalPoint::OverrideTransitionTime' has a wrong offset!");

// Class SpecialEventGameplayRuntime.FortCharacterMovementMutatorComponent
// 0x0880 (0x0920 - 0x00A0)
class UFortCharacterMovementMutatorComponent final : public UActorComponent
{
public:
	class ACharacter*                             CharacterOwner;                                    // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortMovementComp_CharacterAthena*      MovementComponent;                                 // 0x00A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortMovementComp_CharacterAthena*      CDOMovementComponent;                              // 0x00B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B8[0x10];                                      // 0x00B8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         BuffetBubblesMoveToBoxSpeed;                       // 0x00C8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         BuffetBubblesRelativeVelocityInterpSpeed;          // 0x00F0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         BuffetBubblesLocationInterpSpeed;                  // 0x0118(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         BuffetBubblesRotationInterpSpeed;                  // 0x0140(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         BuffetBubblesMinRelativeX;                         // 0x0168(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         BuffetBubblesMaxRelativeX;                         // 0x0190(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         BuffetBubblesMinRelativeY;                         // 0x01B8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         BuffetBubblesMaxRelativeY;                         // 0x01E0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         BuffetBubblesMinRelativeZ;                         // 0x0208(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         BuffetBubblesMaxRelativeZ;                         // 0x0230(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               BuffetBubblesRotationRate;                         // 0x0258(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         BuffetBubblesMaxAcceleration;                      // 0x0270(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         BuffetBubblesMaxRelativeSpeed;                     // 0x0298(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         BuffetBubblesRelativeDeceleration;                 // 0x02C0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         BuffetBubblesSphereRadius;                         // 0x02E8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class AActor*                                 BuffetBubblesFollowActor;                          // 0x0310(0x0008)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                BuffetBubblesInitialFollowBoxOffsetPercent;        // 0x0318(0x0018)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_330[0xE0];                                     // 0x0330(0x00E0)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBuffetBubblesReplicatedData           BuffetBubblesReplicatedData;                       // 0x0410(0x0080)(Net, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_490[0x280];                                    // 0x0490(0x0280)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         BuffetBubblesIntroSpeed;                           // 0x0710(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_738[0x8];                                      // 0x0738(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             BuffetBubblesIntroTargetTransform;                 // 0x0740(0x0060)(Net, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         BuffetFlyingMaxPitchDegrees;                       // 0x07A0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         BuffetFlyingMaxSpeed;                              // 0x07C8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         BuffetFlyingVelocityDirectionInterpSpeed;          // 0x07F0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               BuffetFlyingRotationRate;                          // 0x0818(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         BuffetFlyingMaxSpeedOverride;                      // 0x0830(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BuffetFlyingMaxSpeedInterpSpeed;                   // 0x0834(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_838[0x4];                                      // 0x0838(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BuffetFlyingVelocityDirectionInterpSpeedOverride;  // 0x083C(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         BuffetFlyingRicochetSphereSize;                    // 0x0840(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         BuffetFlyingRicochetRotationDuration;              // 0x0868(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         BuffetFlyingRicochetControlRotationInterpSpeed;    // 0x0890(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_8B8[0x48];                                     // 0x08B8(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBuffetFlyingRicochetReplicatedData    BuffetFlyingRicochetReplicatedData;                // 0x0900(0x0020)(Net, RepNotify, NoDestructor, NativeAccessSpecifierPrivate)

public:
	void OnMovementModeChanged(class ACharacter* Character, EMovementMode PreviousMovementMode, uint8 PreviousCustomMode);
	void OnRep_BuffetBubblesFollowActor();
	void OnRep_BuffetFlyingRicochetReplicatedData();
	void OverrideBuffetFlyingMaxSpeed(const float Value, const bool bAsMultiplier, const float InterpSpeed);
	void OverrideBuffetFlyingVelocityDirectionInterpSpeed(const float Value, const bool bAsMultiplier);
	void SetBuffetBubblesFollowActor(class AActor* Actor);
	void SetBuffetBubblesInitialFollowBoxOffsetPercent(const struct FVector& BoxOffsetPercent);
	void SetBuffetBubblesIntroTargetTransform(const struct FTransform& Transform);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCharacterMovementMutatorComponent">();
	}
	static class UFortCharacterMovementMutatorComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCharacterMovementMutatorComponent>();
	}
};
static_assert(alignof(UFortCharacterMovementMutatorComponent) == 0x000010, "Wrong alignment on UFortCharacterMovementMutatorComponent");
static_assert(sizeof(UFortCharacterMovementMutatorComponent) == 0x000920, "Wrong size on UFortCharacterMovementMutatorComponent");
static_assert(offsetof(UFortCharacterMovementMutatorComponent, CharacterOwner) == 0x0000A0, "Member 'UFortCharacterMovementMutatorComponent::CharacterOwner' has a wrong offset!");
static_assert(offsetof(UFortCharacterMovementMutatorComponent, MovementComponent) == 0x0000A8, "Member 'UFortCharacterMovementMutatorComponent::MovementComponent' has a wrong offset!");
static_assert(offsetof(UFortCharacterMovementMutatorComponent, CDOMovementComponent) == 0x0000B0, "Member 'UFortCharacterMovementMutatorComponent::CDOMovementComponent' has a wrong offset!");
static_assert(offsetof(UFortCharacterMovementMutatorComponent, BuffetBubblesMoveToBoxSpeed) == 0x0000C8, "Member 'UFortCharacterMovementMutatorComponent::BuffetBubblesMoveToBoxSpeed' has a wrong offset!");
static_assert(offsetof(UFortCharacterMovementMutatorComponent, BuffetBubblesRelativeVelocityInterpSpeed) == 0x0000F0, "Member 'UFortCharacterMovementMutatorComponent::BuffetBubblesRelativeVelocityInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortCharacterMovementMutatorComponent, BuffetBubblesLocationInterpSpeed) == 0x000118, "Member 'UFortCharacterMovementMutatorComponent::BuffetBubblesLocationInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortCharacterMovementMutatorComponent, BuffetBubblesRotationInterpSpeed) == 0x000140, "Member 'UFortCharacterMovementMutatorComponent::BuffetBubblesRotationInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortCharacterMovementMutatorComponent, BuffetBubblesMinRelativeX) == 0x000168, "Member 'UFortCharacterMovementMutatorComponent::BuffetBubblesMinRelativeX' has a wrong offset!");
static_assert(offsetof(UFortCharacterMovementMutatorComponent, BuffetBubblesMaxRelativeX) == 0x000190, "Member 'UFortCharacterMovementMutatorComponent::BuffetBubblesMaxRelativeX' has a wrong offset!");
static_assert(offsetof(UFortCharacterMovementMutatorComponent, BuffetBubblesMinRelativeY) == 0x0001B8, "Member 'UFortCharacterMovementMutatorComponent::BuffetBubblesMinRelativeY' has a wrong offset!");
static_assert(offsetof(UFortCharacterMovementMutatorComponent, BuffetBubblesMaxRelativeY) == 0x0001E0, "Member 'UFortCharacterMovementMutatorComponent::BuffetBubblesMaxRelativeY' has a wrong offset!");
static_assert(offsetof(UFortCharacterMovementMutatorComponent, BuffetBubblesMinRelativeZ) == 0x000208, "Member 'UFortCharacterMovementMutatorComponent::BuffetBubblesMinRelativeZ' has a wrong offset!");
static_assert(offsetof(UFortCharacterMovementMutatorComponent, BuffetBubblesMaxRelativeZ) == 0x000230, "Member 'UFortCharacterMovementMutatorComponent::BuffetBubblesMaxRelativeZ' has a wrong offset!");
static_assert(offsetof(UFortCharacterMovementMutatorComponent, BuffetBubblesRotationRate) == 0x000258, "Member 'UFortCharacterMovementMutatorComponent::BuffetBubblesRotationRate' has a wrong offset!");
static_assert(offsetof(UFortCharacterMovementMutatorComponent, BuffetBubblesMaxAcceleration) == 0x000270, "Member 'UFortCharacterMovementMutatorComponent::BuffetBubblesMaxAcceleration' has a wrong offset!");
static_assert(offsetof(UFortCharacterMovementMutatorComponent, BuffetBubblesMaxRelativeSpeed) == 0x000298, "Member 'UFortCharacterMovementMutatorComponent::BuffetBubblesMaxRelativeSpeed' has a wrong offset!");
static_assert(offsetof(UFortCharacterMovementMutatorComponent, BuffetBubblesRelativeDeceleration) == 0x0002C0, "Member 'UFortCharacterMovementMutatorComponent::BuffetBubblesRelativeDeceleration' has a wrong offset!");
static_assert(offsetof(UFortCharacterMovementMutatorComponent, BuffetBubblesSphereRadius) == 0x0002E8, "Member 'UFortCharacterMovementMutatorComponent::BuffetBubblesSphereRadius' has a wrong offset!");
static_assert(offsetof(UFortCharacterMovementMutatorComponent, BuffetBubblesFollowActor) == 0x000310, "Member 'UFortCharacterMovementMutatorComponent::BuffetBubblesFollowActor' has a wrong offset!");
static_assert(offsetof(UFortCharacterMovementMutatorComponent, BuffetBubblesInitialFollowBoxOffsetPercent) == 0x000318, "Member 'UFortCharacterMovementMutatorComponent::BuffetBubblesInitialFollowBoxOffsetPercent' has a wrong offset!");
static_assert(offsetof(UFortCharacterMovementMutatorComponent, BuffetBubblesReplicatedData) == 0x000410, "Member 'UFortCharacterMovementMutatorComponent::BuffetBubblesReplicatedData' has a wrong offset!");
static_assert(offsetof(UFortCharacterMovementMutatorComponent, BuffetBubblesIntroSpeed) == 0x000710, "Member 'UFortCharacterMovementMutatorComponent::BuffetBubblesIntroSpeed' has a wrong offset!");
static_assert(offsetof(UFortCharacterMovementMutatorComponent, BuffetBubblesIntroTargetTransform) == 0x000740, "Member 'UFortCharacterMovementMutatorComponent::BuffetBubblesIntroTargetTransform' has a wrong offset!");
static_assert(offsetof(UFortCharacterMovementMutatorComponent, BuffetFlyingMaxPitchDegrees) == 0x0007A0, "Member 'UFortCharacterMovementMutatorComponent::BuffetFlyingMaxPitchDegrees' has a wrong offset!");
static_assert(offsetof(UFortCharacterMovementMutatorComponent, BuffetFlyingMaxSpeed) == 0x0007C8, "Member 'UFortCharacterMovementMutatorComponent::BuffetFlyingMaxSpeed' has a wrong offset!");
static_assert(offsetof(UFortCharacterMovementMutatorComponent, BuffetFlyingVelocityDirectionInterpSpeed) == 0x0007F0, "Member 'UFortCharacterMovementMutatorComponent::BuffetFlyingVelocityDirectionInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortCharacterMovementMutatorComponent, BuffetFlyingRotationRate) == 0x000818, "Member 'UFortCharacterMovementMutatorComponent::BuffetFlyingRotationRate' has a wrong offset!");
static_assert(offsetof(UFortCharacterMovementMutatorComponent, BuffetFlyingMaxSpeedOverride) == 0x000830, "Member 'UFortCharacterMovementMutatorComponent::BuffetFlyingMaxSpeedOverride' has a wrong offset!");
static_assert(offsetof(UFortCharacterMovementMutatorComponent, BuffetFlyingMaxSpeedInterpSpeed) == 0x000834, "Member 'UFortCharacterMovementMutatorComponent::BuffetFlyingMaxSpeedInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortCharacterMovementMutatorComponent, BuffetFlyingVelocityDirectionInterpSpeedOverride) == 0x00083C, "Member 'UFortCharacterMovementMutatorComponent::BuffetFlyingVelocityDirectionInterpSpeedOverride' has a wrong offset!");
static_assert(offsetof(UFortCharacterMovementMutatorComponent, BuffetFlyingRicochetSphereSize) == 0x000840, "Member 'UFortCharacterMovementMutatorComponent::BuffetFlyingRicochetSphereSize' has a wrong offset!");
static_assert(offsetof(UFortCharacterMovementMutatorComponent, BuffetFlyingRicochetRotationDuration) == 0x000868, "Member 'UFortCharacterMovementMutatorComponent::BuffetFlyingRicochetRotationDuration' has a wrong offset!");
static_assert(offsetof(UFortCharacterMovementMutatorComponent, BuffetFlyingRicochetControlRotationInterpSpeed) == 0x000890, "Member 'UFortCharacterMovementMutatorComponent::BuffetFlyingRicochetControlRotationInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortCharacterMovementMutatorComponent, BuffetFlyingRicochetReplicatedData) == 0x000900, "Member 'UFortCharacterMovementMutatorComponent::BuffetFlyingRicochetReplicatedData' has a wrong offset!");

// Class SpecialEventGameplayRuntime.FortCharacterMovementMutator
// 0x0008 (0x0320 - 0x0318)
class AFortCharacterMovementMutator final : public AFortAthenaMutator
{
public:
	TSubclassOf<class UFortCharacterMovementMutatorComponent> MovementMutatorComponentClass;                     // 0x0318(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnFortPawnChanged(class AFortPawn* NewPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCharacterMovementMutator">();
	}
	static class AFortCharacterMovementMutator* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortCharacterMovementMutator>();
	}
};
static_assert(alignof(AFortCharacterMovementMutator) == 0x000008, "Wrong alignment on AFortCharacterMovementMutator");
static_assert(sizeof(AFortCharacterMovementMutator) == 0x000320, "Wrong size on AFortCharacterMovementMutator");
static_assert(offsetof(AFortCharacterMovementMutator, MovementMutatorComponentClass) == 0x000318, "Member 'AFortCharacterMovementMutator::MovementMutatorComponentClass' has a wrong offset!");

// Class SpecialEventGameplayRuntime.FortControllerComponent_GameplayCinematic
// 0x0058 (0x00F8 - 0x00A0)
class UFortControllerComponent_GameplayCinematic final : public UFortControllerComponent
{
public:
	uint8                                         Pad_A0[0x30];                                      // 0x00A0(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AFortPlayerControllerAthena* PlayerControllerAthena)> BP_OnStartGameplayOutro;                           // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AFortPlayerControllerAthena* PlayerControllerAthena)> BP_OnGameplayIntroFinished;                        // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bIsReadyForGameplay;                               // 0x00F0(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HideHUDElementsForLoadingScreen(const bool bHideElements);
	void OnRep_bIsReadyForGameplay();
	void ServerOnGameplayIntroFinished();
	void SetReadyForGameplay(bool bIsReady);
	void ShowCinematicWidget(class FName WidgetName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortControllerComponent_GameplayCinematic">();
	}
	static class UFortControllerComponent_GameplayCinematic* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortControllerComponent_GameplayCinematic>();
	}
};
static_assert(alignof(UFortControllerComponent_GameplayCinematic) == 0x000008, "Wrong alignment on UFortControllerComponent_GameplayCinematic");
static_assert(sizeof(UFortControllerComponent_GameplayCinematic) == 0x0000F8, "Wrong size on UFortControllerComponent_GameplayCinematic");
static_assert(offsetof(UFortControllerComponent_GameplayCinematic, BP_OnStartGameplayOutro) == 0x0000D0, "Member 'UFortControllerComponent_GameplayCinematic::BP_OnStartGameplayOutro' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_GameplayCinematic, BP_OnGameplayIntroFinished) == 0x0000E0, "Member 'UFortControllerComponent_GameplayCinematic::BP_OnGameplayIntroFinished' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_GameplayCinematic, bIsReadyForGameplay) == 0x0000F0, "Member 'UFortControllerComponent_GameplayCinematic::bIsReadyForGameplay' has a wrong offset!");

// Class SpecialEventGameplayRuntime.FortControllerComponent_SpecialEvent
// 0x0008 (0x00A8 - 0x00A0)
class UFortControllerComponent_SpecialEvent final : public UFortControllerComponent
{
public:
	TWeakObjectPtr<class AFortAthenaMutator_SpecialEvent> SpecialEventMutator;                               // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SendSpecialClientEvent(const struct FGameplayTag& EventTag, const int32 Count);
	void ServerHandleSpecialClientEvent(const struct FGameplayTag& EventTag, const int32 Count);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortControllerComponent_SpecialEvent">();
	}
	static class UFortControllerComponent_SpecialEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortControllerComponent_SpecialEvent>();
	}
};
static_assert(alignof(UFortControllerComponent_SpecialEvent) == 0x000008, "Wrong alignment on UFortControllerComponent_SpecialEvent");
static_assert(sizeof(UFortControllerComponent_SpecialEvent) == 0x0000A8, "Wrong size on UFortControllerComponent_SpecialEvent");
static_assert(offsetof(UFortControllerComponent_SpecialEvent, SpecialEventMutator) == 0x0000A0, "Member 'UFortControllerComponent_SpecialEvent::SpecialEventMutator' has a wrong offset!");

// Class SpecialEventGameplayRuntime.FortCustomTickComponent
// 0x0100 (0x01A0 - 0x00A0)
class UFortCustomTickComponent final : public UActorComponent
{
public:
	EFortCustomTickComponentCondition             Condition;                                         // 0x00A0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           AuthorityQualitySettingsTag;                       // 0x00A4(0x0004)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           DefaultClientQualitySettingsTag;                   // 0x00A8(0x0004)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ECommonPlatformType, struct FGameplayTag> ClientPlatformQualitySettingsTagMap;               // 0x00B0(0x0050)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, struct FCustomTickComonentQualitySettings> QualitySettingsMap;                                // 0x0100(0x0050)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                         WasRecentlyRenderedTolerance;                      // 0x0150(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UFortCustomTickComponent* CustomTickComonent, float DeltaTime)> OnCustomTick;                                      // 0x0158(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_168[0x38];                                     // 0x0168(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCustomTickComponent">();
	}
	static class UFortCustomTickComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCustomTickComponent>();
	}
};
static_assert(alignof(UFortCustomTickComponent) == 0x000008, "Wrong alignment on UFortCustomTickComponent");
static_assert(sizeof(UFortCustomTickComponent) == 0x0001A0, "Wrong size on UFortCustomTickComponent");
static_assert(offsetof(UFortCustomTickComponent, Condition) == 0x0000A0, "Member 'UFortCustomTickComponent::Condition' has a wrong offset!");
static_assert(offsetof(UFortCustomTickComponent, AuthorityQualitySettingsTag) == 0x0000A4, "Member 'UFortCustomTickComponent::AuthorityQualitySettingsTag' has a wrong offset!");
static_assert(offsetof(UFortCustomTickComponent, DefaultClientQualitySettingsTag) == 0x0000A8, "Member 'UFortCustomTickComponent::DefaultClientQualitySettingsTag' has a wrong offset!");
static_assert(offsetof(UFortCustomTickComponent, ClientPlatformQualitySettingsTagMap) == 0x0000B0, "Member 'UFortCustomTickComponent::ClientPlatformQualitySettingsTagMap' has a wrong offset!");
static_assert(offsetof(UFortCustomTickComponent, QualitySettingsMap) == 0x000100, "Member 'UFortCustomTickComponent::QualitySettingsMap' has a wrong offset!");
static_assert(offsetof(UFortCustomTickComponent, WasRecentlyRenderedTolerance) == 0x000150, "Member 'UFortCustomTickComponent::WasRecentlyRenderedTolerance' has a wrong offset!");
static_assert(offsetof(UFortCustomTickComponent, OnCustomTick) == 0x000158, "Member 'UFortCustomTickComponent::OnCustomTick' has a wrong offset!");

// Class SpecialEventGameplayRuntime.FortSpecialRelevancyActorSpawner
// 0x0008 (0x02A8 - 0x02A0)
class AFortSpecialRelevancyActorSpawner final : public AFortActorSpawner
{
public:
	uint8                                         Pad_2A0[0x8];                                      // 0x02A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnActorSpawnedPerRelevancyGroup(const TArray<class AActor*>& InSpawnedActors);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSpecialRelevancyActorSpawner">();
	}
	static class AFortSpecialRelevancyActorSpawner* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortSpecialRelevancyActorSpawner>();
	}
};
static_assert(alignof(AFortSpecialRelevancyActorSpawner) == 0x000008, "Wrong alignment on AFortSpecialRelevancyActorSpawner");
static_assert(sizeof(AFortSpecialRelevancyActorSpawner) == 0x0002A8, "Wrong size on AFortSpecialRelevancyActorSpawner");

// Class SpecialEventGameplayRuntime.SpecialEventAudioAnalysisBaseComponent
// 0x0020 (0x00C0 - 0x00A0)
class USpecialEventAudioAnalysisBaseComponent : public UActorComponent
{
public:
	float                                         CurrentTime;                                       // 0x00A0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULoudnessNRT*                           LoudnessNRT;                                       // 0x00A8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOnsetNRT*                              OnsetNRT;                                          // 0x00B0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UConstantQNRT*                          ConstantQNRT;                                      // 0x00B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void UpdateConstantQ(float Time);
	void UpdateLoudness(float Time);
	void UpdateOnset(float Time);
	void UpdateTime(const float NewTime);

	class UConstantQNRT* GetConstantQNRT() const;
	float GetCurrentNormalizedLoudness() const;
	class ULoudnessNRT* GetLoudnessNRT() const;
	class UOnsetNRT* GetOnsetNRT() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpecialEventAudioAnalysisBaseComponent">();
	}
	static class USpecialEventAudioAnalysisBaseComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpecialEventAudioAnalysisBaseComponent>();
	}
};
static_assert(alignof(USpecialEventAudioAnalysisBaseComponent) == 0x000008, "Wrong alignment on USpecialEventAudioAnalysisBaseComponent");
static_assert(sizeof(USpecialEventAudioAnalysisBaseComponent) == 0x0000C0, "Wrong size on USpecialEventAudioAnalysisBaseComponent");
static_assert(offsetof(USpecialEventAudioAnalysisBaseComponent, CurrentTime) == 0x0000A0, "Member 'USpecialEventAudioAnalysisBaseComponent::CurrentTime' has a wrong offset!");
static_assert(offsetof(USpecialEventAudioAnalysisBaseComponent, LoudnessNRT) == 0x0000A8, "Member 'USpecialEventAudioAnalysisBaseComponent::LoudnessNRT' has a wrong offset!");
static_assert(offsetof(USpecialEventAudioAnalysisBaseComponent, OnsetNRT) == 0x0000B0, "Member 'USpecialEventAudioAnalysisBaseComponent::OnsetNRT' has a wrong offset!");
static_assert(offsetof(USpecialEventAudioAnalysisBaseComponent, ConstantQNRT) == 0x0000B8, "Member 'USpecialEventAudioAnalysisBaseComponent::ConstantQNRT' has a wrong offset!");

// Class SpecialEventGameplayRuntime.SpecialEventAudioHapticsComponent
// 0x0028 (0x00E8 - 0x00C0)
class USpecialEventAudioHapticsComponent final : public USpecialEventAudioAnalysisBaseComponent
{
public:
	TArray<struct FSpecialEventAudioHapticsAction> HapticsActions;                                    // 0x00C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bStartHapticsOnBeginPlay;                          // 0x00D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IntensityMultiplier;                               // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x10];                                      // 0x00D8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void StartHaptics();
	void StopHaptics();

	bool AreHapticsActive() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpecialEventAudioHapticsComponent">();
	}
	static class USpecialEventAudioHapticsComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpecialEventAudioHapticsComponent>();
	}
};
static_assert(alignof(USpecialEventAudioHapticsComponent) == 0x000008, "Wrong alignment on USpecialEventAudioHapticsComponent");
static_assert(sizeof(USpecialEventAudioHapticsComponent) == 0x0000E8, "Wrong size on USpecialEventAudioHapticsComponent");
static_assert(offsetof(USpecialEventAudioHapticsComponent, HapticsActions) == 0x0000C0, "Member 'USpecialEventAudioHapticsComponent::HapticsActions' has a wrong offset!");
static_assert(offsetof(USpecialEventAudioHapticsComponent, bStartHapticsOnBeginPlay) == 0x0000D0, "Member 'USpecialEventAudioHapticsComponent::bStartHapticsOnBeginPlay' has a wrong offset!");
static_assert(offsetof(USpecialEventAudioHapticsComponent, IntensityMultiplier) == 0x0000D4, "Member 'USpecialEventAudioHapticsComponent::IntensityMultiplier' has a wrong offset!");

// Class SpecialEventGameplayRuntime.SpecialEventCinematicCameraMode
// 0x0000 (0x0060 - 0x0060)
class USpecialEventCinematicCameraMode final : public UFortCinematicCamera
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpecialEventCinematicCameraMode">();
	}
	static class USpecialEventCinematicCameraMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpecialEventCinematicCameraMode>();
	}
};
static_assert(alignof(USpecialEventCinematicCameraMode) == 0x000008, "Wrong alignment on USpecialEventCinematicCameraMode");
static_assert(sizeof(USpecialEventCinematicCameraMode) == 0x000060, "Wrong size on USpecialEventCinematicCameraMode");

// Class SpecialEventGameplayRuntime.SpecialEventCursorInstigatorInterface
// 0x0000 (0x0028 - 0x0028)
class ISpecialEventCursorInstigatorInterface final : public IInterface
{
public:
	bool SpecialEventCursorTrace(struct FHitResult* OutHitResult, class USpecialEventCursorPawnComponent* CursorPawnComponent, const struct FGameplayTag& CursorModeTag, const class UCameraComponent* CameraComponent, const struct FVector& CursorWorldDirection);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpecialEventCursorInstigatorInterface">();
	}
	static class ISpecialEventCursorInstigatorInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISpecialEventCursorInstigatorInterface>();
	}
};
static_assert(alignof(ISpecialEventCursorInstigatorInterface) == 0x000008, "Wrong alignment on ISpecialEventCursorInstigatorInterface");
static_assert(sizeof(ISpecialEventCursorInstigatorInterface) == 0x000028, "Wrong size on ISpecialEventCursorInstigatorInterface");

// Class SpecialEventGameplayRuntime.SpecialEventCursorPawnComponent
// 0x0308 (0x03A8 - 0x00A0)
class USpecialEventCursorPawnComponent final : public UPawnComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class USpecialEventCursorPawnComponent* CursorPawnComponent, struct FGameplayTag& CursorModeTag, bool bShouldBeVisible)> OnDesiredVisibilityChanged;                        // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bAllowOnNonOwningClients;                          // 0x00B8(0x0001)(Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        OwningPawn;                                        // 0x00C0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AFortPlayerController*                  OwningController;                                  // 0x00C8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D0[0x10];                                      // 0x00D0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class USpecialEventCursorPawnComponent* CursorPawnComponent, struct FGameplayTag& NewCursorModeTag, struct FGameplayTag& OldCursorModeTag)> OnCursorModeChanged;                               // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DefaultCursorModeTag;                              // 0x00F0(0x0004)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDefaultCursorModeAutoActivate;                    // 0x00F4(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, struct FSpecialEventCursorMode> CursorModes;                                       // 0x00F8(0x0050)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FSpecialEventCursorStackEntry>  CursorStack;                                       // 0x0148(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FSpecialEventCursorStackEntry          ReplicatedCursorStackEntry;                        // 0x0158(0x000C)(Net, RepNotify, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class USpecialEventInputHelperComponent> InputHelperClass;                                  // 0x0168(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseGamepadLookInput;                              // 0x0170(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseGamepadMoveInput;                              // 0x0171(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseGyroInput;                                     // 0x0172(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bObeyInvertedPitchUserSetting;                     // 0x0173(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonInputSubsystem*                  CommonInputSubsystem;                              // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USpecialEventInputHelperComponent*      InputHelperComponent;                              // 0x0180(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_188[0x38];                                     // 0x0188(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class USpecialEventCursorPawnComponent* CursorPawnComponent, struct FVector2D& NormalizedLocation, struct FVector2D& ViewportLocation)> OnViewportLocationChanged;                         // 0x01C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FScalableFloat                         NonOwningInterpSpeed;                              // 0x01D0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MinDeltaToSendWorldLocationToServer;               // 0x01F8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_220[0x8];                                      // 0x0220(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReplicatedWorldLocation;                           // 0x0228(0x0018)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_240[0x50];                                     // 0x0240(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UUserWidget*>                    Widgets;                                           // 0x0290(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A0[0xE9];                                     // 0x02A0(0x00E9)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bAdditiveRotationAllowedByDefault;                 // 0x0389(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_38A[0x1];                                      // 0x038A(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bZoomAllowedByDefault;                             // 0x038B(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ZoomActionName;                                    // 0x038C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_390[0x8];                                      // 0x0390(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraComponent*                       AdditiveOffsetCameraComponent;                     // 0x0398(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3A0[0x8];                                      // 0x03A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USpecialEventCursorPawnComponent* GetSpecialEventCursorPawnComponent(const class AFortPlayerPawn* Pawn, const struct FGameplayTag& CursorModeTag, const bool bMustBeActive);

	bool GetCurrentHitResult(struct FHitResult* OutHitResult);
	void GyroInputUpdate(const struct FVector& InInputVector);
	void InputPressed(const class FName& ActionName, const bool bPressed);
	void LookInputUpdate(const struct FVector& InInputVector);
	void MoveInputUpdate(const struct FVector& InInputVector);
	void OnHUDPostRender(class AHUD* HUD, class UCanvas* Canvas);
	void OnInputMethodChanged(ECommonInputType InputType);
	void OnLocallyControlledCursorVisibilityChanged(class USpecialEventCursorPawnComponent* CursorPawnComponent, const struct FGameplayTag& CursorModeTag, const bool bShouldBeVisible);
	void OnRep_bAllowOnNonOwningClients();
	void OnRep_ReplicatedCursorStackEntry(const struct FSpecialEventCursorStackEntry& OldCursorStackEntry);
	void OnRep_ReplicatedWorldLocation();
	void PopAllCursorsForObject(class UObject* InstigatingObject, const bool bDeactivateIfStackEmpty);
	void PopCursor(const struct FGameplayTag& CursorModeTag, class UObject* InstigatingObject, const bool bDeactivateIfStackEmpty);
	void PushCursor(const struct FGameplayTag& CursorModeTag, class UObject* InstigatingObject, const bool bActivate);
	void ServerOnWorldLocationChanged(const struct FVector& WorldLocation);
	void SetAdditiveRotationAllowed(const bool bInAdditiveRotationAllowed);
	void SetAllowOnNonOwningClients(const bool bAllow);
	void SetZoomAllowed(const bool bInZoomAllowed);

	bool CanBeVisible() const;
	bool ConvertNormalizedToViewportLocation(struct FVector2D* OutViewportLocation, const struct FVector2D& NormalizedLocation) const;
	bool ConvertNormalizedToWorldLocationAndDirection(struct FVector* OutWorldLocation, struct FVector* OutWorldDirection, const struct FVector2D& NormalizedLocation) const;
	bool ConvertViewportToNormalizedLocation(struct FVector2D* OutNormalizedLocation, const struct FVector2D& ViewportLocation) const;
	bool ConvertViewportToWorldLocationAndDirection(struct FVector* OutWorldLocation, struct FVector* OutWorldDirection, const struct FVector2D& ViewportLocation) const;
	bool ConvertWorldToNormalizedLocation(struct FVector2D* OutNormalizedLocation, const struct FVector& WorldLocation) const;
	bool ConvertWorldToViewportLocation(struct FVector2D* OutViewportLocation, const struct FVector& WorldLocation) const;
	class UCameraComponent* GetCameraComponent() const;
	struct FVector2D GetCenteredWidgetLocation(class UUserWidget* Widget, const struct FVector2D& ViewportLocation) const;
	const struct FGameplayTag GetCurrentCursorModeTag() const;
	class UUserWidget* GetCurrentWidget() const;
	struct FGameplayTagContainer GetCursorModeTagsForWidget(const class UUserWidget* Widget) const;
	ECommonInputType GetInputType() const;
	class APlayerController* GetLocalController() const;
	struct FVector2D GetNormalizedLocation() const;
	bool GetViewportCenter(struct FVector2D* OutViewportCenter) const;
	bool GetViewportLocation(struct FVector2D* OutViewportLocation) const;
	bool GetViewportSize(struct FVector2D* OutViewportSize) const;
	bool GetWorldLocationAndDirection(struct FVector* OutWorldLocation, struct FVector* OutWorldDirection) const;
	bool IsAdditiveRotationAllowed() const;
	bool IsLocallyControlled() const;
	bool IsZoomAllowed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpecialEventCursorPawnComponent">();
	}
	static class USpecialEventCursorPawnComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpecialEventCursorPawnComponent>();
	}
};
static_assert(alignof(USpecialEventCursorPawnComponent) == 0x000008, "Wrong alignment on USpecialEventCursorPawnComponent");
static_assert(sizeof(USpecialEventCursorPawnComponent) == 0x0003A8, "Wrong size on USpecialEventCursorPawnComponent");
static_assert(offsetof(USpecialEventCursorPawnComponent, OnDesiredVisibilityChanged) == 0x0000A8, "Member 'USpecialEventCursorPawnComponent::OnDesiredVisibilityChanged' has a wrong offset!");
static_assert(offsetof(USpecialEventCursorPawnComponent, bAllowOnNonOwningClients) == 0x0000B8, "Member 'USpecialEventCursorPawnComponent::bAllowOnNonOwningClients' has a wrong offset!");
static_assert(offsetof(USpecialEventCursorPawnComponent, OwningPawn) == 0x0000C0, "Member 'USpecialEventCursorPawnComponent::OwningPawn' has a wrong offset!");
static_assert(offsetof(USpecialEventCursorPawnComponent, OwningController) == 0x0000C8, "Member 'USpecialEventCursorPawnComponent::OwningController' has a wrong offset!");
static_assert(offsetof(USpecialEventCursorPawnComponent, OnCursorModeChanged) == 0x0000E0, "Member 'USpecialEventCursorPawnComponent::OnCursorModeChanged' has a wrong offset!");
static_assert(offsetof(USpecialEventCursorPawnComponent, DefaultCursorModeTag) == 0x0000F0, "Member 'USpecialEventCursorPawnComponent::DefaultCursorModeTag' has a wrong offset!");
static_assert(offsetof(USpecialEventCursorPawnComponent, bDefaultCursorModeAutoActivate) == 0x0000F4, "Member 'USpecialEventCursorPawnComponent::bDefaultCursorModeAutoActivate' has a wrong offset!");
static_assert(offsetof(USpecialEventCursorPawnComponent, CursorModes) == 0x0000F8, "Member 'USpecialEventCursorPawnComponent::CursorModes' has a wrong offset!");
static_assert(offsetof(USpecialEventCursorPawnComponent, CursorStack) == 0x000148, "Member 'USpecialEventCursorPawnComponent::CursorStack' has a wrong offset!");
static_assert(offsetof(USpecialEventCursorPawnComponent, ReplicatedCursorStackEntry) == 0x000158, "Member 'USpecialEventCursorPawnComponent::ReplicatedCursorStackEntry' has a wrong offset!");
static_assert(offsetof(USpecialEventCursorPawnComponent, InputHelperClass) == 0x000168, "Member 'USpecialEventCursorPawnComponent::InputHelperClass' has a wrong offset!");
static_assert(offsetof(USpecialEventCursorPawnComponent, bUseGamepadLookInput) == 0x000170, "Member 'USpecialEventCursorPawnComponent::bUseGamepadLookInput' has a wrong offset!");
static_assert(offsetof(USpecialEventCursorPawnComponent, bUseGamepadMoveInput) == 0x000171, "Member 'USpecialEventCursorPawnComponent::bUseGamepadMoveInput' has a wrong offset!");
static_assert(offsetof(USpecialEventCursorPawnComponent, bUseGyroInput) == 0x000172, "Member 'USpecialEventCursorPawnComponent::bUseGyroInput' has a wrong offset!");
static_assert(offsetof(USpecialEventCursorPawnComponent, bObeyInvertedPitchUserSetting) == 0x000173, "Member 'USpecialEventCursorPawnComponent::bObeyInvertedPitchUserSetting' has a wrong offset!");
static_assert(offsetof(USpecialEventCursorPawnComponent, CommonInputSubsystem) == 0x000178, "Member 'USpecialEventCursorPawnComponent::CommonInputSubsystem' has a wrong offset!");
static_assert(offsetof(USpecialEventCursorPawnComponent, InputHelperComponent) == 0x000180, "Member 'USpecialEventCursorPawnComponent::InputHelperComponent' has a wrong offset!");
static_assert(offsetof(USpecialEventCursorPawnComponent, OnViewportLocationChanged) == 0x0001C0, "Member 'USpecialEventCursorPawnComponent::OnViewportLocationChanged' has a wrong offset!");
static_assert(offsetof(USpecialEventCursorPawnComponent, NonOwningInterpSpeed) == 0x0001D0, "Member 'USpecialEventCursorPawnComponent::NonOwningInterpSpeed' has a wrong offset!");
static_assert(offsetof(USpecialEventCursorPawnComponent, MinDeltaToSendWorldLocationToServer) == 0x0001F8, "Member 'USpecialEventCursorPawnComponent::MinDeltaToSendWorldLocationToServer' has a wrong offset!");
static_assert(offsetof(USpecialEventCursorPawnComponent, ReplicatedWorldLocation) == 0x000228, "Member 'USpecialEventCursorPawnComponent::ReplicatedWorldLocation' has a wrong offset!");
static_assert(offsetof(USpecialEventCursorPawnComponent, Widgets) == 0x000290, "Member 'USpecialEventCursorPawnComponent::Widgets' has a wrong offset!");
static_assert(offsetof(USpecialEventCursorPawnComponent, bAdditiveRotationAllowedByDefault) == 0x000389, "Member 'USpecialEventCursorPawnComponent::bAdditiveRotationAllowedByDefault' has a wrong offset!");
static_assert(offsetof(USpecialEventCursorPawnComponent, bZoomAllowedByDefault) == 0x00038B, "Member 'USpecialEventCursorPawnComponent::bZoomAllowedByDefault' has a wrong offset!");
static_assert(offsetof(USpecialEventCursorPawnComponent, ZoomActionName) == 0x00038C, "Member 'USpecialEventCursorPawnComponent::ZoomActionName' has a wrong offset!");
static_assert(offsetof(USpecialEventCursorPawnComponent, AdditiveOffsetCameraComponent) == 0x000398, "Member 'USpecialEventCursorPawnComponent::AdditiveOffsetCameraComponent' has a wrong offset!");

// Class SpecialEventGameplayRuntime.SpecialEventCursorWeaponComponent
// 0x0098 (0x0138 - 0x00A0)
class USpecialEventCursorWeaponComponent final : public UFortWeaponComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class USpecialEventCursorPawnComponent* CursorPawnComponent, class AFortWeapon* Weapon)> OnCursorPawnComponentSet;                          // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class USpecialEventCursorPawnComponent> CursorPawnComponentClass;                          // 0x00B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           CursorModeTag;                                     // 0x00C0(0x0004)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAlignFXToCursor;                                  // 0x00C4(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortWeapon*                            OwningWeapon;                                      // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AFortPlayerPawn*                        Pawn;                                              // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USpecialEventCursorPawnComponent*       CursorPawnComponent;                               // 0x00D8(0x0008)(ExportObject, Net, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E0[0x58];                                      // 0x00E0(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USpecialEventCursorWeaponComponent* GetCurrentSpecialEventCursorWeaponComponent(const class AFortPlayerPawn* Pawn_0);
	static class USpecialEventCursorPawnComponent* GetSpecialEventCursorPawnComponentForCurrentWeapon(const class AFortPlayerPawn* Pawn_0);
	static class USpecialEventCursorPawnComponent* GetSpecialEventCursorPawnComponentForWeapon(const class AFortWeapon* Weapon);

	void OnBeamFired(class AFortWeapon* Weapon, bool bUsePersistentBeam, class UFXSystemComponent* PSC, const struct FVector& BeamOrigin, const struct FVector& HitLocation);
	bool OnGetAimRotOverride(const class AFortWeapon* Weapon, struct FRotator* OutOverride, const EFortAbilityTargetingSource TargetingSource);
	void OnPlayImpactFX(class AFortWeapon* Weapon, const struct FHitResult& HitResult, class UFXSystemComponent* FXSystemComponent);
	void OnRep_CursorPawnComponent();

	bool GetCurrentHitResult(struct FHitResult* OutHitResult) const;
	class USpecialEventCursorPawnComponent* GetCursorPawnComponent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpecialEventCursorWeaponComponent">();
	}
	static class USpecialEventCursorWeaponComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpecialEventCursorWeaponComponent>();
	}
};
static_assert(alignof(USpecialEventCursorWeaponComponent) == 0x000008, "Wrong alignment on USpecialEventCursorWeaponComponent");
static_assert(sizeof(USpecialEventCursorWeaponComponent) == 0x000138, "Wrong size on USpecialEventCursorWeaponComponent");
static_assert(offsetof(USpecialEventCursorWeaponComponent, OnCursorPawnComponentSet) == 0x0000A8, "Member 'USpecialEventCursorWeaponComponent::OnCursorPawnComponentSet' has a wrong offset!");
static_assert(offsetof(USpecialEventCursorWeaponComponent, CursorPawnComponentClass) == 0x0000B8, "Member 'USpecialEventCursorWeaponComponent::CursorPawnComponentClass' has a wrong offset!");
static_assert(offsetof(USpecialEventCursorWeaponComponent, CursorModeTag) == 0x0000C0, "Member 'USpecialEventCursorWeaponComponent::CursorModeTag' has a wrong offset!");
static_assert(offsetof(USpecialEventCursorWeaponComponent, bAlignFXToCursor) == 0x0000C4, "Member 'USpecialEventCursorWeaponComponent::bAlignFXToCursor' has a wrong offset!");
static_assert(offsetof(USpecialEventCursorWeaponComponent, OwningWeapon) == 0x0000C8, "Member 'USpecialEventCursorWeaponComponent::OwningWeapon' has a wrong offset!");
static_assert(offsetof(USpecialEventCursorWeaponComponent, Pawn) == 0x0000D0, "Member 'USpecialEventCursorWeaponComponent::Pawn' has a wrong offset!");
static_assert(offsetof(USpecialEventCursorWeaponComponent, CursorPawnComponent) == 0x0000D8, "Member 'USpecialEventCursorWeaponComponent::CursorPawnComponent' has a wrong offset!");

// Class SpecialEventGameplayRuntime.SpecialEventGameplayGlobals
// 0x0000 (0x0028 - 0x0028)
class USpecialEventGameplayGlobals final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpecialEventGameplayGlobals">();
	}
	static class USpecialEventGameplayGlobals* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpecialEventGameplayGlobals>();
	}
};
static_assert(alignof(USpecialEventGameplayGlobals) == 0x000008, "Wrong alignment on USpecialEventGameplayGlobals");
static_assert(sizeof(USpecialEventGameplayGlobals) == 0x000028, "Wrong size on USpecialEventGameplayGlobals");

// Class SpecialEventGameplayRuntime.SpecialEventGameplayLibrary
// 0x0000 (0x0028 - 0x0028)
class USpecialEventGameplayLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void AddSpecialEventKillFeedEntry(const class UObject* WorldContextObject, const class AFortPlayerStateAthena* VictimPlayerState, const class AFortPlayerStateAthena* KillerPlayerState, const class FText& NonPlayerVictimName, const class FText& NonPlayerKillerName, const struct FGameplayTag& DeathCauseTag, const EDeathCauseReason DeathCauseReason, const float Distance);
	static void AddSpecialEventRecentElimination(const struct FVector& Location, const class AFortPlayerStateAthena* PlayerState);
	static bool AttachPawnToComponent(class AFortPawn* Pawn, class USceneComponent* Component, const class FName SocketName, const EAttachmentRule LocationRule, const EAttachmentRule RotationRule, const EAttachmentRule ScaleRule, const bool bWeldSimulatedBodies);
	static void CreateSpecialEventPlayerEliminationWorldMarker(const class AFortPlayerControllerAthena* LocalController, const class AFortPlayerStateAthena* VictimPlayerState, const struct FVector& DeathLocation);
	static bool DetachPawn(class AFortPawn* Pawn, const EDetachmentRule LocationRule, const EDetachmentRule RotationRule, const EDetachmentRule ScaleRule);
	static bool DetachPawnFromComponent(class AFortPawn* Pawn, const class USceneComponent* Component, const EDetachmentRule LocationRule, const EDetachmentRule RotationRule, const EDetachmentRule ScaleRule);
	static class UFortControllerComponent_GameplayCinematic* FindGameplayCinematicComponent(class AController* Controller);
	static class UFortControllerComponent_SpecialEvent* FindSpecialEventComponent(class AController* Controller);
	static void ForceDestroyComponents(const TArray<class UActorComponent*>& Components, const bool bPromoteChildren, const class FString& LogContext);
	static void ForceUpdateGrass(class UObject* WorldContextObject, const struct FVector& Location);
	static bool GetHasInfiniteSafeZonePhase(class UObject* WorldContextObject);
	static struct FFortAthenaLoadout GetLocalPlayerLoadout(class UObject* WorldContextObject);
	static class AFortAthenaMutator_SpecialEvent* GetSpecialEventMutator(class UObject* WorldContextObject);
	static class FString GetSpecialEventPlayerDisplayName(const class AFortPlayerControllerAthena* LocalController, const class AFortPlayerStateAthena* PlayerState);
	static class ASpecialEventScript* GetSpecialEventScript(class UObject* WorldContextObject);
	static void HideSkydivingShadowProxy(const class UObject* WorldContextObject);
	static void SetLODOnLandscapProxies(class UObject* WorldContextObject, bool bForced, int32 InLODValue);
	static void SetNextLoadingScreen(class UObject* WorldContextObject, const class UAthenaLoadingScreenItemDefinition* LoadingScreenDefinition, const bool bCanShowLoadingBar);
	static void StreamOutAllBuildingFoundations(const class UObject* WorldContextObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpecialEventGameplayLibrary">();
	}
	static class USpecialEventGameplayLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpecialEventGameplayLibrary>();
	}
};
static_assert(alignof(USpecialEventGameplayLibrary) == 0x000008, "Wrong alignment on USpecialEventGameplayLibrary");
static_assert(sizeof(USpecialEventGameplayLibrary) == 0x000028, "Wrong size on USpecialEventGameplayLibrary");

// Class SpecialEventGameplayRuntime.FortAsyncAction_GameplayCinematicComponentReady
// 0x0018 (0x0048 - 0x0030)
class UFortAsyncAction_GameplayCinematicComponentReady final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(class UFortControllerComponent_GameplayCinematic* FoundComponent)> OnReady;                                           // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UFortAsyncAction_GameplayCinematicComponentReady* FindGameplayCinematicComponentAsync(class AController* Conroller);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAsyncAction_GameplayCinematicComponentReady">();
	}
	static class UFortAsyncAction_GameplayCinematicComponentReady* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAsyncAction_GameplayCinematicComponentReady>();
	}
};
static_assert(alignof(UFortAsyncAction_GameplayCinematicComponentReady) == 0x000008, "Wrong alignment on UFortAsyncAction_GameplayCinematicComponentReady");
static_assert(sizeof(UFortAsyncAction_GameplayCinematicComponentReady) == 0x000048, "Wrong size on UFortAsyncAction_GameplayCinematicComponentReady");
static_assert(offsetof(UFortAsyncAction_GameplayCinematicComponentReady, OnReady) == 0x000030, "Member 'UFortAsyncAction_GameplayCinematicComponentReady::OnReady' has a wrong offset!");

// Class SpecialEventGameplayRuntime.SpecialEventPhase
// 0x00A0 (0x0310 - 0x0270)
class ASpecialEventPhase final : public AInfo
{
public:
	uint8                                         Pad_270[0x18];                                     // 0x0270(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           PhaseTag;                                          // 0x0288(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bApplyGameplayEffects;                             // 0x028C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_28D[0x3];                                      // 0x028D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UGameplayEffect>>    GameplayEffectsToApply;                            // 0x0290(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<struct FSpecialEventPhaseComponentNetModeInfo> ControllerComponentsToApplyInfoList;               // 0x02A0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FSpecialEventPhaseComponentNetModeInfo> PawnComponentsToApplyInfoList;                     // 0x02B0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UCameraModifier>            CameraModifierToApply;                             // 0x02C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRemoveModifierOnPhaseDeactivation;                // 0x02C8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRemoveGameplayEffects;                            // 0x02C9(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2CA[0x6];                                      // 0x02CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UGameplayEffect>>    GameplayEffectsToRemove;                           // 0x02D0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<struct FSpecialEventPhaseComponentNetModeInfo> ControllerComponentsToRemoveInfoList;              // 0x02E0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FSpecialEventPhaseComponentNetModeInfo> PawnComponentsToRemoveInfoList;                    // 0x02F0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UCameraModifier*                        AppliedCameraModifier;                             // 0x0300(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESpecialEventPhaseState                       PhaseState;                                        // 0x0308(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DebugActivatePhase();
	void OnPhaseActivation_Client();
	void OnPhaseActivation_Server();
	void OnPhaseDeactivation_Client();
	void OnPhaseDeactivation_Server();
	void OnPhaseFinished();
	void OnRep_PhaseState();
	void PrePhaseActivation_Server();
	void SetHUDElementVisibility(const struct FGameplayTagContainer& HUDElementTags, bool bHideElements);

	struct FGameplayTag GetPhaseTag() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpecialEventPhase">();
	}
	static class ASpecialEventPhase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASpecialEventPhase>();
	}
};
static_assert(alignof(ASpecialEventPhase) == 0x000008, "Wrong alignment on ASpecialEventPhase");
static_assert(sizeof(ASpecialEventPhase) == 0x000310, "Wrong size on ASpecialEventPhase");
static_assert(offsetof(ASpecialEventPhase, PhaseTag) == 0x000288, "Member 'ASpecialEventPhase::PhaseTag' has a wrong offset!");
static_assert(offsetof(ASpecialEventPhase, bApplyGameplayEffects) == 0x00028C, "Member 'ASpecialEventPhase::bApplyGameplayEffects' has a wrong offset!");
static_assert(offsetof(ASpecialEventPhase, GameplayEffectsToApply) == 0x000290, "Member 'ASpecialEventPhase::GameplayEffectsToApply' has a wrong offset!");
static_assert(offsetof(ASpecialEventPhase, ControllerComponentsToApplyInfoList) == 0x0002A0, "Member 'ASpecialEventPhase::ControllerComponentsToApplyInfoList' has a wrong offset!");
static_assert(offsetof(ASpecialEventPhase, PawnComponentsToApplyInfoList) == 0x0002B0, "Member 'ASpecialEventPhase::PawnComponentsToApplyInfoList' has a wrong offset!");
static_assert(offsetof(ASpecialEventPhase, CameraModifierToApply) == 0x0002C0, "Member 'ASpecialEventPhase::CameraModifierToApply' has a wrong offset!");
static_assert(offsetof(ASpecialEventPhase, bRemoveModifierOnPhaseDeactivation) == 0x0002C8, "Member 'ASpecialEventPhase::bRemoveModifierOnPhaseDeactivation' has a wrong offset!");
static_assert(offsetof(ASpecialEventPhase, bRemoveGameplayEffects) == 0x0002C9, "Member 'ASpecialEventPhase::bRemoveGameplayEffects' has a wrong offset!");
static_assert(offsetof(ASpecialEventPhase, GameplayEffectsToRemove) == 0x0002D0, "Member 'ASpecialEventPhase::GameplayEffectsToRemove' has a wrong offset!");
static_assert(offsetof(ASpecialEventPhase, ControllerComponentsToRemoveInfoList) == 0x0002E0, "Member 'ASpecialEventPhase::ControllerComponentsToRemoveInfoList' has a wrong offset!");
static_assert(offsetof(ASpecialEventPhase, PawnComponentsToRemoveInfoList) == 0x0002F0, "Member 'ASpecialEventPhase::PawnComponentsToRemoveInfoList' has a wrong offset!");
static_assert(offsetof(ASpecialEventPhase, AppliedCameraModifier) == 0x000300, "Member 'ASpecialEventPhase::AppliedCameraModifier' has a wrong offset!");
static_assert(offsetof(ASpecialEventPhase, PhaseState) == 0x000308, "Member 'ASpecialEventPhase::PhaseState' has a wrong offset!");

// Class SpecialEventGameplayRuntime.SpecialEventPlayerMannequin
// 0x0008 (0x05B8 - 0x05B0)
class ASpecialEventPlayerMannequin final : public AFortPlayerMannequin
{
public:
	uint8                                         bDisableCollisionOnBeginPlay : 1;                  // 0x05B0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bDisableComponentsTickOnServer : 1;                // 0x05B0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bRegisterWithSpecialEventMutatorOnClient : 1;      // 0x05B0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bDestroyUnusedSkeletalMeshComponentsOnClientFirstInitialization : 1; // 0x05B0(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_5B1[0x7];                                      // 0x05B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DestroyUnusedSkeletalMeshComponents();
	void HandleOnMutatorAdded(class AFortGameplayMutator* NewMutator);
	void RegisterWithSpecialEventMutator();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpecialEventPlayerMannequin">();
	}
	static class ASpecialEventPlayerMannequin* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASpecialEventPlayerMannequin>();
	}
};
static_assert(alignof(ASpecialEventPlayerMannequin) == 0x000008, "Wrong alignment on ASpecialEventPlayerMannequin");
static_assert(sizeof(ASpecialEventPlayerMannequin) == 0x0005B8, "Wrong size on ASpecialEventPlayerMannequin");

// Class SpecialEventGameplayRuntime.SpecialEventScript
// 0x0080 (0x02F0 - 0x0270)
class ASpecialEventScript final : public AInfo
{
public:
	TMulticastInlineDelegate<void(class ASpecialEventScript* SpecialEventScript, class ASpecialEventPhase* SpecialEventPhase)> OnSpecialEventPhaseActivated;                      // 0x0270(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ASpecialEventScript* SpecialEventScript, class ASpecialEventPhase* SpecialEventPhase)> OnSpecialEventPhaseDeactivated;                    // 0x0280(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FPhaseInfo>                     PhaseInfoArray;                                    // 0x0290(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class ALevelSequenceActor*                    MasterSequence;                                    // 0x02A0(0x0008)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DropDeadWindowSizeInSeconds;                       // 0x02A8(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DelayAfterConentLoad;                              // 0x02AC(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DelayAfterWarmup;                                  // 0x02B0(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ForceReturnToMainMenuTime;                         // 0x02B4(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ForceReturnToMainMenuTimeRandomness;               // 0x02B8(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinDelayReturnToMainMenu;                          // 0x02BC(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxDelayReturnToMainMenu;                          // 0x02C0(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPreloadAllLevelsOnServer;                         // 0x02C4(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowGarbageCollectionAfterUnload;                // 0x02C5(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFullPurgeGC;                                      // 0x02C6(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C7[0x1];                                      // 0x02C7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReplicatedActivePhaseIndex;                        // 0x02C8(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2CC[0xC];                                      // 0x02CC(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshNetworkComponent*                  MeshNetworkComponent;                              // 0x02D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2E0[0x10];                                     // 0x02E0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AttemptFinishPhase(const struct FGameplayTag& PhaseTag);
	void AttemptStartNextPhase(const struct FGameplayTag& CurrentPhaseTag);
	void BP_OnScriptFinished();
	void BP_OnScriptReady();
	void OnRep_ReplicatedActivePhaseIndex();
	void StartEventAtIndex(int32 InStartingIndex);
	void UpdateMasterSequence(float Time);

	int32 GetActivePhaseIndex() const;
	void SetLocalPlayersSignificantForSpecialEventSequence(const bool bIsSignificant) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpecialEventScript">();
	}
	static class ASpecialEventScript* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASpecialEventScript>();
	}
};
static_assert(alignof(ASpecialEventScript) == 0x000008, "Wrong alignment on ASpecialEventScript");
static_assert(sizeof(ASpecialEventScript) == 0x0002F0, "Wrong size on ASpecialEventScript");
static_assert(offsetof(ASpecialEventScript, OnSpecialEventPhaseActivated) == 0x000270, "Member 'ASpecialEventScript::OnSpecialEventPhaseActivated' has a wrong offset!");
static_assert(offsetof(ASpecialEventScript, OnSpecialEventPhaseDeactivated) == 0x000280, "Member 'ASpecialEventScript::OnSpecialEventPhaseDeactivated' has a wrong offset!");
static_assert(offsetof(ASpecialEventScript, PhaseInfoArray) == 0x000290, "Member 'ASpecialEventScript::PhaseInfoArray' has a wrong offset!");
static_assert(offsetof(ASpecialEventScript, MasterSequence) == 0x0002A0, "Member 'ASpecialEventScript::MasterSequence' has a wrong offset!");
static_assert(offsetof(ASpecialEventScript, DropDeadWindowSizeInSeconds) == 0x0002A8, "Member 'ASpecialEventScript::DropDeadWindowSizeInSeconds' has a wrong offset!");
static_assert(offsetof(ASpecialEventScript, DelayAfterConentLoad) == 0x0002AC, "Member 'ASpecialEventScript::DelayAfterConentLoad' has a wrong offset!");
static_assert(offsetof(ASpecialEventScript, DelayAfterWarmup) == 0x0002B0, "Member 'ASpecialEventScript::DelayAfterWarmup' has a wrong offset!");
static_assert(offsetof(ASpecialEventScript, ForceReturnToMainMenuTime) == 0x0002B4, "Member 'ASpecialEventScript::ForceReturnToMainMenuTime' has a wrong offset!");
static_assert(offsetof(ASpecialEventScript, ForceReturnToMainMenuTimeRandomness) == 0x0002B8, "Member 'ASpecialEventScript::ForceReturnToMainMenuTimeRandomness' has a wrong offset!");
static_assert(offsetof(ASpecialEventScript, MinDelayReturnToMainMenu) == 0x0002BC, "Member 'ASpecialEventScript::MinDelayReturnToMainMenu' has a wrong offset!");
static_assert(offsetof(ASpecialEventScript, MaxDelayReturnToMainMenu) == 0x0002C0, "Member 'ASpecialEventScript::MaxDelayReturnToMainMenu' has a wrong offset!");
static_assert(offsetof(ASpecialEventScript, bPreloadAllLevelsOnServer) == 0x0002C4, "Member 'ASpecialEventScript::bPreloadAllLevelsOnServer' has a wrong offset!");
static_assert(offsetof(ASpecialEventScript, bAllowGarbageCollectionAfterUnload) == 0x0002C5, "Member 'ASpecialEventScript::bAllowGarbageCollectionAfterUnload' has a wrong offset!");
static_assert(offsetof(ASpecialEventScript, bFullPurgeGC) == 0x0002C6, "Member 'ASpecialEventScript::bFullPurgeGC' has a wrong offset!");
static_assert(offsetof(ASpecialEventScript, ReplicatedActivePhaseIndex) == 0x0002C8, "Member 'ASpecialEventScript::ReplicatedActivePhaseIndex' has a wrong offset!");
static_assert(offsetof(ASpecialEventScript, MeshNetworkComponent) == 0x0002D8, "Member 'ASpecialEventScript::MeshNetworkComponent' has a wrong offset!");

// Class SpecialEventGameplayRuntime.SpecialEventScriptMeshActor
// 0x0030 (0x02A0 - 0x0270)
class ASpecialEventScriptMeshActor final : public AInfo
{
public:
	struct FDateTime                              RootStartTime;                                     // 0x0270(0x0008)(Net, ZeroConstructor, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 CalendarEventName;                                 // 0x0278(0x0010)(Edit, ZeroConstructor, Config, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CalenderEventOffsetInSeconds;                      // 0x0288(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EncryptionKeyDeliveryTimeOffset;                   // 0x028C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_290[0x8];                                      // 0x0290(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshNetworkComponent*                  MeshNetworkComponent;                              // 0x0298(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void MeshRootClearCalendarTimer();
	void MeshRootLogCalendarTimer();
	void MeshRootResetEvent();
	void MeshRootStartCalendarTimer();
	void MeshRootStartCalendarTimerOnly();
	void MeshRootStartEvent();
	void OnRep_RootStartTime();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpecialEventScriptMeshActor">();
	}
	static class ASpecialEventScriptMeshActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASpecialEventScriptMeshActor>();
	}
};
static_assert(alignof(ASpecialEventScriptMeshActor) == 0x000008, "Wrong alignment on ASpecialEventScriptMeshActor");
static_assert(sizeof(ASpecialEventScriptMeshActor) == 0x0002A0, "Wrong size on ASpecialEventScriptMeshActor");
static_assert(offsetof(ASpecialEventScriptMeshActor, RootStartTime) == 0x000270, "Member 'ASpecialEventScriptMeshActor::RootStartTime' has a wrong offset!");
static_assert(offsetof(ASpecialEventScriptMeshActor, CalendarEventName) == 0x000278, "Member 'ASpecialEventScriptMeshActor::CalendarEventName' has a wrong offset!");
static_assert(offsetof(ASpecialEventScriptMeshActor, CalenderEventOffsetInSeconds) == 0x000288, "Member 'ASpecialEventScriptMeshActor::CalenderEventOffsetInSeconds' has a wrong offset!");
static_assert(offsetof(ASpecialEventScriptMeshActor, EncryptionKeyDeliveryTimeOffset) == 0x00028C, "Member 'ASpecialEventScriptMeshActor::EncryptionKeyDeliveryTimeOffset' has a wrong offset!");
static_assert(offsetof(ASpecialEventScriptMeshActor, MeshNetworkComponent) == 0x000298, "Member 'ASpecialEventScriptMeshActor::MeshNetworkComponent' has a wrong offset!");

// Class SpecialEventGameplayRuntime.SpecialEventStatComponent
// 0x0140 (0x01E0 - 0x00A0)
class USpecialEventStatComponent final : public UActorComponent
{
public:
	TMulticastInlineDelegate<void(struct FSpecialEventStatArrayEntry& Stat)> OnValueChangedDelegate;                            // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FSpecialEventStatDefinition>    StatDefinitions;                                   // 0x00B0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FSpecialEventStatArray                 StatFastArray;                                     // 0x00C0(0x0120)(Net, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	static void AdjustSpecialEventStat(class AActor* Actor, const struct FGameplayTag& LookupTag, const float Adjustment);
	static const struct FSpecialEventStatArrayEntry GetSpecialEventStat(bool* bOutValid, const class AActor* Actor, const struct FGameplayTag& LookupTag);

	bool AdjustStat(const struct FGameplayTag& LookupTag, const float Adjustment, const bool bLogError);
	const struct FSpecialEventStatArrayEntry GetStat(bool* bOutValid, const struct FGameplayTag& LookupTag);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpecialEventStatComponent">();
	}
	static class USpecialEventStatComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpecialEventStatComponent>();
	}
};
static_assert(alignof(USpecialEventStatComponent) == 0x000008, "Wrong alignment on USpecialEventStatComponent");
static_assert(sizeof(USpecialEventStatComponent) == 0x0001E0, "Wrong size on USpecialEventStatComponent");
static_assert(offsetof(USpecialEventStatComponent, OnValueChangedDelegate) == 0x0000A0, "Member 'USpecialEventStatComponent::OnValueChangedDelegate' has a wrong offset!");
static_assert(offsetof(USpecialEventStatComponent, StatDefinitions) == 0x0000B0, "Member 'USpecialEventStatComponent::StatDefinitions' has a wrong offset!");
static_assert(offsetof(USpecialEventStatComponent, StatFastArray) == 0x0000C0, "Member 'USpecialEventStatComponent::StatFastArray' has a wrong offset!");

// Class SpecialEventGameplayRuntime.DamageRecordEntry
// 0x0120 (0x0148 - 0x0028)
class UDamageRecordEntry final : public UObject
{
public:
	float                                         DamageTotal;                                       // 0x0028(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndReplicationTime;                                // 0x002C(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  DamageTags;                                        // 0x0030(0x0020)(Net, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0050(0x0018)(Net, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 GameplayCueParams;                                 // 0x0068(0x00D0)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_138[0x10];                                     // 0x0138(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_DamageTotal();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DamageRecordEntry">();
	}
	static class UDamageRecordEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDamageRecordEntry>();
	}
};
static_assert(alignof(UDamageRecordEntry) == 0x000008, "Wrong alignment on UDamageRecordEntry");
static_assert(sizeof(UDamageRecordEntry) == 0x000148, "Wrong size on UDamageRecordEntry");
static_assert(offsetof(UDamageRecordEntry, DamageTotal) == 0x000028, "Member 'UDamageRecordEntry::DamageTotal' has a wrong offset!");
static_assert(offsetof(UDamageRecordEntry, EndReplicationTime) == 0x00002C, "Member 'UDamageRecordEntry::EndReplicationTime' has a wrong offset!");
static_assert(offsetof(UDamageRecordEntry, DamageTags) == 0x000030, "Member 'UDamageRecordEntry::DamageTags' has a wrong offset!");
static_assert(offsetof(UDamageRecordEntry, EffectContext) == 0x000050, "Member 'UDamageRecordEntry::EffectContext' has a wrong offset!");
static_assert(offsetof(UDamageRecordEntry, GameplayCueParams) == 0x000068, "Member 'UDamageRecordEntry::GameplayCueParams' has a wrong offset!");

// Class SpecialEventGameplayRuntime.SpecialRelevancyHealthComponent
// 0x0068 (0x0108 - 0x00A0)
class USpecialRelevancyHealthComponent final : public USpecialRelevancyComponentBase
{
public:
	struct FScalableFloat                         RelevancyDeathTimeLength;                          // 0x00A0(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	bool                                          bSetLifespanOnLastRelevancyDeath;                  // 0x00C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OwnerMaxHealthCached;                              // 0x00CC(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UDamageRecordEntry*>             ReplicatedDamageRecords;                           // 0x00D0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(struct FGameplayTagContainer& DamageTags)> OnSpecialRelevancyDeath;                           // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(class AFortPlayerState* InstigatingPlayerState, struct FGameplayEffectContextHandle& EffectContext, struct FGameplayCueParameters& GameplayCueParams, int32 RelevancyGroupIndex, float DealtDamage, struct FGameplayTagContainer& DeathTags, bool bKilled)> OnSpecialRelevancyDamage;                          // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	class AFortAthenaMutator_SpecialRelevancy*    CachedMutator;                                     // 0x0100(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnDamaged(const class AFortPlayerState* DamagingPlayerState, const int32 RelevancyGroupIndex, const float DealtDamage, const float ActualDealtDamage, const float TotalDamage, const float DealtDamagePercent, const float ActualDealtDamagePercent, const float TotalDamagePercent, const float MaxHealth, const bool bKilled);
	void OnKilled(const class AFortPlayerState* KillingPlayerState, const int32 RelevancyGroupIndex);

	float ClientGetHealth() const;
	float ClientGetHealthPercent() const;
	float GetHealth(const class AActor* RelevancyActor) const;
	float GetHealthFromRelevancyIndex(int32 Index_0) const;
	float GetHealthPercent(const class AActor* RelevancyActor) const;
	float GetHealthPercentFromRelevancyIndex(int32 Index_0) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpecialRelevancyHealthComponent">();
	}
	static class USpecialRelevancyHealthComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpecialRelevancyHealthComponent>();
	}
};
static_assert(alignof(USpecialRelevancyHealthComponent) == 0x000008, "Wrong alignment on USpecialRelevancyHealthComponent");
static_assert(sizeof(USpecialRelevancyHealthComponent) == 0x000108, "Wrong size on USpecialRelevancyHealthComponent");
static_assert(offsetof(USpecialRelevancyHealthComponent, RelevancyDeathTimeLength) == 0x0000A0, "Member 'USpecialRelevancyHealthComponent::RelevancyDeathTimeLength' has a wrong offset!");
static_assert(offsetof(USpecialRelevancyHealthComponent, bSetLifespanOnLastRelevancyDeath) == 0x0000C8, "Member 'USpecialRelevancyHealthComponent::bSetLifespanOnLastRelevancyDeath' has a wrong offset!");
static_assert(offsetof(USpecialRelevancyHealthComponent, OwnerMaxHealthCached) == 0x0000CC, "Member 'USpecialRelevancyHealthComponent::OwnerMaxHealthCached' has a wrong offset!");
static_assert(offsetof(USpecialRelevancyHealthComponent, ReplicatedDamageRecords) == 0x0000D0, "Member 'USpecialRelevancyHealthComponent::ReplicatedDamageRecords' has a wrong offset!");
static_assert(offsetof(USpecialRelevancyHealthComponent, OnSpecialRelevancyDeath) == 0x0000E0, "Member 'USpecialRelevancyHealthComponent::OnSpecialRelevancyDeath' has a wrong offset!");
static_assert(offsetof(USpecialRelevancyHealthComponent, OnSpecialRelevancyDamage) == 0x0000F0, "Member 'USpecialRelevancyHealthComponent::OnSpecialRelevancyDamage' has a wrong offset!");
static_assert(offsetof(USpecialRelevancyHealthComponent, CachedMutator) == 0x000100, "Member 'USpecialRelevancyHealthComponent::CachedMutator' has a wrong offset!");

}

