#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EnvironmentArt_FuncLib

#include "Basic.hpp"

#include "EnvironmentArt_FuncLib_classes.hpp"
#include "EnvironmentArt_FuncLib_parameters.hpp"


namespace SDK
{

// Function EnvironmentArt_FuncLib.EnvironmentArt_FuncLib_C.randomFloatByLocation
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          WorldLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   distanceInterval                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    includeZ                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Float                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UEnvironmentArt_FuncLib_C::randomFloatByLocation(const struct FVector& WorldLocation, float distanceInterval, bool includeZ, class UObject* __WorldContext, float* Float)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EnvironmentArt_FuncLib_C", "randomFloatByLocation");

	Params::EnvironmentArt_FuncLib_C_randomFloatByLocation Parms{};

	Parms.WorldLocation = std::move(WorldLocation);
	Parms.distanceInterval = distanceInterval;
	Parms.includeZ = includeZ;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Float != nullptr)
		*Float = Parms.Float;
}


// Function EnvironmentArt_FuncLib.EnvironmentArt_FuncLib_C.randomSteppedIntByLocation
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          WorldLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   distanceInterval                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    includeZ                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   stepCount                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Integer                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Percent                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UEnvironmentArt_FuncLib_C::randomSteppedIntByLocation(const struct FVector& WorldLocation, float distanceInterval, bool includeZ, int32 stepCount, class UObject* __WorldContext, int32* Integer, float* Percent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EnvironmentArt_FuncLib_C", "randomSteppedIntByLocation");

	Params::EnvironmentArt_FuncLib_C_randomSteppedIntByLocation Parms{};

	Parms.WorldLocation = std::move(WorldLocation);
	Parms.distanceInterval = distanceInterval;
	Parms.includeZ = includeZ;
	Parms.stepCount = stepCount;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Integer != nullptr)
		*Integer = Parms.Integer;

	if (Percent != nullptr)
		*Percent = Parms.Percent;
}

}

