#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_RealitySeed_ListenForTree

#include "Basic.hpp"

#include "GA_RealitySeed_ListenForTree_classes.hpp"
#include "GA_RealitySeed_ListenForTree_parameters.hpp"


namespace SDK
{

// Function GA_RealitySeed_ListenForTree.GA_RealitySeed_ListenForTree_C.EventReceived_BEED7CAC42EA6CD4A52F96B69B8310D4
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayEventData               Payload                                                (BlueprintVisible, BlueprintReadOnly, Parm)

void UGA_RealitySeed_ListenForTree_C::EventReceived_BEED7CAC42EA6CD4A52F96B69B8310D4(const struct FGameplayEventData& Payload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_RealitySeed_ListenForTree_C", "EventReceived_BEED7CAC42EA6CD4A52F96B69B8310D4");

	Params::GA_RealitySeed_ListenForTree_C_EventReceived_BEED7CAC42EA6CD4A52F96B69B8310D4 Parms{};

	Parms.Payload = std::move(Payload);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_RealitySeed_ListenForTree.GA_RealitySeed_ListenForTree_C.ExecuteUbergraph_GA_RealitySeed_ListenForTree
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_RealitySeed_ListenForTree_C::ExecuteUbergraph_GA_RealitySeed_ListenForTree(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_RealitySeed_ListenForTree_C", "ExecuteUbergraph_GA_RealitySeed_ListenForTree");

	Params::GA_RealitySeed_ListenForTree_C_ExecuteUbergraph_GA_RealitySeed_ListenForTree Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_RealitySeed_ListenForTree.GA_RealitySeed_ListenForTree_C.FailedToActivatePassiveAbility
// (Event, Public, BlueprintEvent)

void UGA_RealitySeed_ListenForTree_C::FailedToActivatePassiveAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_RealitySeed_ListenForTree_C", "FailedToActivatePassiveAbility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_RealitySeed_ListenForTree.GA_RealitySeed_ListenForTree_C.K2_ActivateAbility
// (Event, Protected, BlueprintEvent)

void UGA_RealitySeed_ListenForTree_C::K2_ActivateAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_RealitySeed_ListenForTree_C", "K2_ActivateAbility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_RealitySeed_ListenForTree.GA_RealitySeed_ListenForTree_C.RegisterTree
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_RealitySeed_ListenForTree_C::RegisterTree(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_RealitySeed_ListenForTree_C", "RegisterTree");

	Params::GA_RealitySeed_ListenForTree_C_RegisterTree Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_RealitySeed_ListenForTree.GA_RealitySeed_ListenForTree_C.SaplingPlanted
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isNewSapling                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_RealitySeed_ListenForTree_C::SaplingPlanted(bool isNewSapling)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_RealitySeed_ListenForTree_C", "SaplingPlanted");

	Params::GA_RealitySeed_ListenForTree_C_SaplingPlanted Parms{};

	Parms.isNewSapling = isNewSapling;

	UObject::ProcessEvent(Func, &Parms);
}

}

