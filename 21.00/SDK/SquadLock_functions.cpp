#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SquadLock

#include "Basic.hpp"

#include "SquadLock_classes.hpp"
#include "SquadLock_parameters.hpp"


namespace SDK
{

// Function SquadLock.SquadLock_C.Activate Scan Volume NS
// (BlueprintCallable, BlueprintEvent)

void ASquadLock_C::Activate_Scan_Volume_NS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "Activate Scan Volume NS");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SquadLock.SquadLock_C.Aim Eye__FinishedFunc
// (BlueprintEvent)

void ASquadLock_C::Aim_Eye__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "Aim Eye__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SquadLock.SquadLock_C.Aim Eye__UpdateFunc
// (BlueprintEvent)

void ASquadLock_C::Aim_Eye__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "Aim Eye__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SquadLock.SquadLock_C.BlueprintOnInteract
// (BlueprintAuthorityOnly, Event, Public, BlueprintEvent)
// Parameters:
// class AFortPawn*                        InteractingPawn                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EInteractionBeingAttempted              InteractionBeingAttempted                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASquadLock_C::BlueprintOnInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "BlueprintOnInteract");

	Params::SquadLock_C_BlueprintOnInteract Parms{};

	Parms.InteractingPawn = InteractingPawn;
	Parms.InteractionBeingAttempted = InteractionBeingAttempted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SquadLock.SquadLock_C.CE_AimEye
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AFortPawn*                        Interacting_Pawn                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASquadLock_C::CE_AimEye(class AFortPawn* Interacting_Pawn, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "CE_AimEye");

	Params::SquadLock_C_CE_AimEye Parms{};

	Parms.Interacting_Pawn = Interacting_Pawn;
	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SquadLock.SquadLock_C.CE_EndAimEye
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AFortPawn*                        InFortPawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASquadLock_C::CE_EndAimEye(int32 Index_0, class AFortPawn* InFortPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "CE_EndAimEye");

	Params::SquadLock_C_CE_EndAimEye Parms{};

	Parms.Index_0 = Index_0;
	Parms.InFortPawn = InFortPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SquadLock.SquadLock_C.CountActiveScanners
// (Public, BlueprintCallable, BlueprintEvent)

void ASquadLock_C::CountActiveScanners()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "CountActiveScanners");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SquadLock.SquadLock_C.Deactivate Scan Volume NS
// (BlueprintCallable, BlueprintEvent)

void ASquadLock_C::Deactivate_Scan_Volume_NS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "Deactivate Scan Volume NS");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SquadLock.SquadLock_C.DoneWithScan
// (BlueprintCallable, BlueprintEvent)

void ASquadLock_C::DoneWithScan()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "DoneWithScan");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SquadLock.SquadLock_C.DrawDebugToQuedPawns
// (BlueprintCallable, BlueprintEvent)

void ASquadLock_C::DrawDebugToQuedPawns()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "DrawDebugToQuedPawns");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SquadLock.SquadLock_C.EndScan
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    canceled                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASquadLock_C::EndScan(bool canceled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "EndScan");

	Params::SquadLock_C_EndScan Parms{};

	Parms.canceled = canceled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SquadLock.SquadLock_C.ExecuteUbergraph_SquadLock
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASquadLock_C::ExecuteUbergraph_SquadLock(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "ExecuteUbergraph_SquadLock");

	Params::SquadLock_C_ExecuteUbergraph_SquadLock Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SquadLock.SquadLock_C.ExitScanTimerExpired
// (BlueprintCallable, BlueprintEvent)

void ASquadLock_C::ExitScanTimerExpired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "ExitScanTimerExpired");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SquadLock.SquadLock_C.Find Scanner Slot For Pawn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AFortPawn*                        InFortPawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Exiting                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ScannerIndex                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASquadLock_C::Find_Scanner_Slot_For_Pawn(class AFortPawn* InFortPawn, bool Exiting, bool* Success, int32* ScannerIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "Find Scanner Slot For Pawn");

	Params::SquadLock_C_Find_Scanner_Slot_For_Pawn Parms{};

	Parms.InFortPawn = InFortPawn;
	Parms.Exiting = Exiting;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;

	if (ScannerIndex != nullptr)
		*ScannerIndex = Parms.ScannerIndex;
}


// Function SquadLock.SquadLock_C.FinishedAllEyeAims
// (BlueprintCallable, BlueprintEvent)

void ASquadLock_C::FinishedAllEyeAims()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "FinishedAllEyeAims");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SquadLock.SquadLock_C.FlashScanner
// (BlueprintCallable, BlueprintEvent)

void ASquadLock_C::FlashScanner()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "FlashScanner");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SquadLock.SquadLock_C.FrameUpdateAimInterpolation
// (BlueprintCallable, BlueprintEvent)

void ASquadLock_C::FrameUpdateAimInterpolation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "FrameUpdateAimInterpolation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SquadLock.SquadLock_C.Get Next Unscanned PawnInVolume Index
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   RetIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASquadLock_C::Get_Next_Unscanned_PawnInVolume_Index(int32* RetIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "Get Next Unscanned PawnInVolume Index");

	Params::SquadLock_C_Get_Next_Unscanned_PawnInVolume_Index Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RetIndex != nullptr)
		*RetIndex = Parms.RetIndex;
}


// Function SquadLock.SquadLock_C.Get Pawns In Volume Index By Pawn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AFortPawn*                        FortPawn                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASquadLock_C::Get_Pawns_In_Volume_Index_By_Pawn(class AFortPawn* FortPawn, int32* RetIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "Get Pawns In Volume Index By Pawn");

	Params::SquadLock_C_Get_Pawns_In_Volume_Index_By_Pawn Parms{};

	Parms.FortPawn = FortPawn;

	UObject::ProcessEvent(Func, &Parms);

	if (RetIndex != nullptr)
		*RetIndex = Parms.RetIndex;
}


// Function SquadLock.SquadLock_C.Get Scanner Forward Rot
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ASquadLock_C::Get_Scanner_Forward_Rot(struct FRotator* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "Get Scanner Forward Rot");

	Params::SquadLock_C_Get_Scanner_Forward_Rot Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = std::move(Parms.NewParam);
}


// Function SquadLock.SquadLock_C.Init Lock Screen Widget
// (Public, BlueprintCallable, BlueprintEvent)

void ASquadLock_C::Init_Lock_Screen_Widget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "Init Lock Screen Widget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SquadLock.SquadLock_C.Initialize Scanner Ray
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStaticMeshComponent*             ScannerRayStaticMesh                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     ScannerColor_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BaseWidth                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EndWidth                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Angle                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ScanRotAnim                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASquadLock_C::Initialize_Scanner_Ray(class UStaticMeshComponent* ScannerRayStaticMesh, const struct FLinearColor& ScannerColor_0, float BaseWidth, float EndWidth, float Angle, const float ScanRotAnim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "Initialize Scanner Ray");

	Params::SquadLock_C_Initialize_Scanner_Ray Parms{};

	Parms.ScannerRayStaticMesh = ScannerRayStaticMesh;
	Parms.ScannerColor_0 = std::move(ScannerColor_0);
	Parms.BaseWidth = BaseWidth;
	Parms.EndWidth = EndWidth;
	Parms.Angle = Angle;
	Parms.ScanRotAnim = ScanRotAnim;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SquadLock.SquadLock_C.IsLocked
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bIsLocked                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASquadLock_C::IsLocked(bool* bIsLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "IsLocked");

	Params::SquadLock_C_IsLocked Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bIsLocked != nullptr)
		*bIsLocked = Parms.bIsLocked;
}


// Function SquadLock.SquadLock_C.OneTime_SetAdjustedNumPlayersRequiredToUnlock
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTagContainer            PlaylistTags                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// class UFortPlaylist*                    FortPlaylist                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASquadLock_C::OneTime_SetAdjustedNumPlayersRequiredToUnlock(const struct FGameplayTagContainer& PlaylistTags, class UFortPlaylist* FortPlaylist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "OneTime_SetAdjustedNumPlayersRequiredToUnlock");

	Params::SquadLock_C_OneTime_SetAdjustedNumPlayersRequiredToUnlock Parms{};

	Parms.PlaylistTags = std::move(PlaylistTags);
	Parms.FortPlaylist = FortPlaylist;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SquadLock.SquadLock_C.OnReady_0BAB31FB47344C6E04082EA0DFE1C899
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AFortGameStateAthena*             GameState                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UFortPlaylist*                    Playlist                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTagContainer            PlaylistContextTags                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ASquadLock_C::OnReady_0BAB31FB47344C6E04082EA0DFE1C899(class AFortGameStateAthena* GameState, const class UFortPlaylist* Playlist, const struct FGameplayTagContainer& PlaylistContextTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "OnReady_0BAB31FB47344C6E04082EA0DFE1C899");

	Params::SquadLock_C_OnReady_0BAB31FB47344C6E04082EA0DFE1C899 Parms{};

	Parms.GameState = GameState;
	Parms.Playlist = Playlist;
	Parms.PlaylistContextTags = std::move(PlaylistContextTags);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SquadLock.SquadLock_C.OnRep_AdjustedNumPlayersRequiredToUnlock
// (BlueprintCallable, BlueprintEvent)

void ASquadLock_C::OnRep_AdjustedNumPlayersRequiredToUnlock()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "OnRep_AdjustedNumPlayersRequiredToUnlock");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SquadLock.SquadLock_C.OnRep_As Fort Pawn
// (BlueprintCallable, BlueprintEvent)

void ASquadLock_C::OnRep_As_Fort_Pawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "OnRep_As Fort Pawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SquadLock.SquadLock_C.OnRep_bIsUnlocked
// (BlueprintCallable, BlueprintEvent)

void ASquadLock_C::OnRep_bIsUnlocked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "OnRep_bIsUnlocked");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SquadLock.SquadLock_C.OnRep_EndType
// (BlueprintCallable, BlueprintEvent)

void ASquadLock_C::OnRep_EndType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "OnRep_EndType");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SquadLock.SquadLock_C.OnRep_HasBeenDistabled
// (BlueprintCallable, BlueprintEvent)

void ASquadLock_C::OnRep_HasBeenDistabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "OnRep_HasBeenDistabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SquadLock.SquadLock_C.OnRep_NumPendingPlayersInRange
// (BlueprintCallable, BlueprintEvent)

void ASquadLock_C::OnRep_NumPendingPlayersInRange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "OnRep_NumPendingPlayersInRange");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SquadLock.SquadLock_C.OnRep_NumPlayersInRange
// (BlueprintCallable, BlueprintEvent)

void ASquadLock_C::OnRep_NumPlayersInRange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "OnRep_NumPlayersInRange");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SquadLock.SquadLock_C.OnRep_PendingUnlock
// (BlueprintCallable, BlueprintEvent)

void ASquadLock_C::OnRep_PendingUnlock()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "OnRep_PendingUnlock");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SquadLock.SquadLock_C.OnUnLocked
// (BlueprintCallable, BlueprintEvent)

void ASquadLock_C::OnUnLocked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "OnUnLocked");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SquadLock.SquadLock_C.Ping if Needed
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ASquadLock_C::Ping_if_Needed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "Ping if Needed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SquadLock.SquadLock_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ASquadLock_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SquadLock.SquadLock_C.ReinitializeCollisionBoxForPlayerStandingInFrontOfScanner
// (BlueprintCallable, BlueprintEvent)

void ASquadLock_C::ReinitializeCollisionBoxForPlayerStandingInFrontOfScanner()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "ReinitializeCollisionBoxForPlayerStandingInFrontOfScanner");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SquadLock.SquadLock_C.ReinitializeCollisionSphereForDisableTeamupBehaviorTag
// (BlueprintCallable, BlueprintEvent)

void ASquadLock_C::ReinitializeCollisionSphereForDisableTeamupBehaviorTag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "ReinitializeCollisionSphereForDisableTeamupBehaviorTag");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SquadLock.SquadLock_C.ResetDoOnce
// (BlueprintCallable, BlueprintEvent)

void ASquadLock_C::ResetDoOnce()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "ResetDoOnce");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SquadLock.SquadLock_C.Scanner Collis End Overlap
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASquadLock_C::Scanner_Collis_End_Overlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "Scanner Collis End Overlap");

	Params::SquadLock_C_Scanner_Collis_End_Overlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SquadLock.SquadLock_C.Scanner Collis Overlap
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ASquadLock_C::Scanner_Collis_Overlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "Scanner Collis Overlap");

	Params::SquadLock_C_Scanner_Collis_Overlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SquadLock.SquadLock_C.SendQuestUpdateForPlayers
// (BlueprintCallable, BlueprintEvent)

void ASquadLock_C::SendQuestUpdateForPlayers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "SendQuestUpdateForPlayers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SquadLock.SquadLock_C.SetPrimaryAimToCurrent
// (BlueprintCallable, BlueprintEvent)

void ASquadLock_C::SetPrimaryAimToCurrent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "SetPrimaryAimToCurrent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SquadLock.SquadLock_C.SetScannerColor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStaticMeshComponent*             ScannerRayStaticMesh                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     InScannerColor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASquadLock_C::SetScannerColor(class UStaticMeshComponent* ScannerRayStaticMesh, const struct FLinearColor& InScannerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "SetScannerColor");

	Params::SquadLock_C_SetScannerColor Parms{};

	Parms.ScannerRayStaticMesh = ScannerRayStaticMesh;
	Parms.InScannerColor = std::move(InScannerColor);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SquadLock.SquadLock_C.SetScannerPower
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    On                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASquadLock_C::SetScannerPower(bool On)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "SetScannerPower");

	Params::SquadLock_C_SetScannerPower Parms{};

	Parms.On = On;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SquadLock.SquadLock_C.SetScanningActive
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Active                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASquadLock_C::SetScanningActive(bool Active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "SetScanningActive");

	Params::SquadLock_C_SetScanningActive Parms{};

	Parms.Active = Active;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SquadLock.SquadLock_C.SetupAndStartScannerAimInterpolation
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         InAimRot                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FLinearColor                     LinearColor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsExit                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASquadLock_C::SetupAndStartScannerAimInterpolation(const struct FRotator& InAimRot, const struct FLinearColor& LinearColor, bool IsExit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "SetupAndStartScannerAimInterpolation");

	Params::SquadLock_C_SetupAndStartScannerAimInterpolation Parms{};

	Parms.InAimRot = std::move(InAimRot);
	Parms.LinearColor = std::move(LinearColor);
	Parms.IsExit = IsExit;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SquadLock.SquadLock_C.SpawnScannedPawnParticles
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AFortPawn*                        InFortPawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InScannedTime                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASquadLock_C::SpawnScannedPawnParticles(class AFortPawn* InFortPawn, const float& InScannedTime, bool NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "SpawnScannedPawnParticles");

	Params::SquadLock_C_SpawnScannedPawnParticles Parms{};

	Parms.InFortPawn = InFortPawn;
	Parms.InScannedTime = InScannedTime;
	Parms.NewParam = NewParam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SquadLock.SquadLock_C.Start Scanner Aim Interpolation
// (BlueprintCallable, BlueprintEvent)

void ASquadLock_C::Start_Scanner_Aim_Interpolation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "Start Scanner Aim Interpolation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SquadLock.SquadLock_C.StartAllEyeAimScanning
// (BlueprintCallable, BlueprintEvent)

void ASquadLock_C::StartAllEyeAimScanning()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "StartAllEyeAimScanning");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SquadLock.SquadLock_C.StartScanningAll
// (BlueprintCallable, BlueprintEvent)

void ASquadLock_C::StartScanningAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "StartScanningAll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SquadLock.SquadLock_C.StartUnlock
// (BlueprintCallable, BlueprintEvent)

void ASquadLock_C::StartUnlock()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "StartUnlock");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SquadLock.SquadLock_C.TeamupVolumeEndOverlap
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASquadLock_C::TeamupVolumeEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "TeamupVolumeEndOverlap");

	Params::SquadLock_C_TeamupVolumeEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SquadLock.SquadLock_C.TeamupVolumeStartOverlap
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ASquadLock_C::TeamupVolumeStartOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "TeamupVolumeStartOverlap");

	Params::SquadLock_C_TeamupVolumeStartOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SquadLock.SquadLock_C.UnAim Eye__FinishedFunc
// (BlueprintEvent)

void ASquadLock_C::UnAim_Eye__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "UnAim Eye__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SquadLock.SquadLock_C.UnAim Eye__UpdateFunc
// (BlueprintEvent)

void ASquadLock_C::UnAim_Eye__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "UnAim Eye__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SquadLock.SquadLock_C.UnaimEyeAll
// (BlueprintCallable, BlueprintEvent)

void ASquadLock_C::UnaimEyeAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "UnaimEyeAll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SquadLock.SquadLock_C.Update Scanning Ques
// (BlueprintCallable, BlueprintEvent)

void ASquadLock_C::Update_Scanning_Ques()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "Update Scanning Ques");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SquadLock.SquadLock_C.UpdatePawnCounts
// (Public, BlueprintCallable, BlueprintEvent)

void ASquadLock_C::UpdatePawnCounts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "UpdatePawnCounts");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SquadLock.SquadLock_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ASquadLock_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SquadLock.SquadLock_C.BlueprintCanInteract
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class AFortPawn*                        InteractingPawn                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EInteractionBeingAttempted              InteractionBeingAttempted                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ETInteractionType                       InteractionType                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ASquadLock_C::BlueprintCanInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted, const ETInteractionType InteractionType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "BlueprintCanInteract");

	Params::SquadLock_C_BlueprintCanInteract Parms{};

	Parms.InteractingPawn = InteractingPawn;
	Parms.InteractionBeingAttempted = InteractionBeingAttempted;
	Parms.InteractionType = InteractionType;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SquadLock.SquadLock_C.BlueprintGetFailedInteractionString
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class AFortPawn*                        InteractingPawn                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EInteractionBeingAttempted              InteractionBeingAttempted                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm)

class FText ASquadLock_C::BlueprintGetFailedInteractionString(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "BlueprintGetFailedInteractionString");

	Params::SquadLock_C_BlueprintGetFailedInteractionString Parms{};

	Parms.InteractingPawn = InteractingPawn;
	Parms.InteractionBeingAttempted = InteractionBeingAttempted;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SquadLock.SquadLock_C.BlueprintGetInteractionString
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class AFortPawn*                        InteractingPawn                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EInteractionBeingAttempted              InteractionBeingAttempted                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm)

class FText ASquadLock_C::BlueprintGetInteractionString(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "BlueprintGetInteractionString");

	Params::SquadLock_C_BlueprintGetInteractionString Parms{};

	Parms.InteractingPawn = InteractingPawn;
	Parms.InteractionBeingAttempted = InteractionBeingAttempted;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SquadLock.SquadLock_C.Get Num Required Players
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// int32                                   GetNumRequiredPlayers                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASquadLock_C::Get_Num_Required_Players(int32* GetNumRequiredPlayers) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "Get Num Required Players");

	Params::SquadLock_C_Get_Num_Required_Players Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (GetNumRequiredPlayers != nullptr)
		*GetNumRequiredPlayers = Parms.GetNumRequiredPlayers;
}


// Function SquadLock.SquadLock_C.Get Players In Range and Total Required To Unlock
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// int32                                   NumPlayersnRange                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NumPlayersRequired                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NumUnscannedPlayersInRange                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASquadLock_C::Get_Players_In_Range_and_Total_Required_To_Unlock(int32* NumPlayersnRange, int32* NumPlayersRequired, int32* NumUnscannedPlayersInRange) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "Get Players In Range and Total Required To Unlock");

	Params::SquadLock_C_Get_Players_In_Range_and_Total_Required_To_Unlock Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NumPlayersnRange != nullptr)
		*NumPlayersnRange = Parms.NumPlayersnRange;

	if (NumPlayersRequired != nullptr)
		*NumPlayersRequired = Parms.NumPlayersRequired;

	if (NumUnscannedPlayersInRange != nullptr)
		*NumUnscannedPlayersInRange = Parms.NumUnscannedPlayersInRange;
}


// Function SquadLock.SquadLock_C.Get Present Pawn Counts
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// float                                   CurrentTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetVal_ScannedPawnCount                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RetVal_PendingScannedPawnCount                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASquadLock_C::Get_Present_Pawn_Counts(float CurrentTime, int32* RetVal_ScannedPawnCount, int32* RetVal_PendingScannedPawnCount) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "Get Present Pawn Counts");

	Params::SquadLock_C_Get_Present_Pawn_Counts Parms{};

	Parms.CurrentTime = CurrentTime;

	UObject::ProcessEvent(Func, &Parms);

	if (RetVal_ScannedPawnCount != nullptr)
		*RetVal_ScannedPawnCount = Parms.RetVal_ScannedPawnCount;

	if (RetVal_PendingScannedPawnCount != nullptr)
		*RetVal_PendingScannedPawnCount = Parms.RetVal_PendingScannedPawnCount;
}


// Function SquadLock.SquadLock_C.GetMarkerDetailsId
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class FName ASquadLock_C::GetMarkerDetailsId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadLock_C", "GetMarkerDetailsId");

	Params::SquadLock_C_GetMarkerDetailsId Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

