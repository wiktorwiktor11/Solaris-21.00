#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: QuartzMusicTrackComponent

#include "Basic.hpp"

#include "GameplayTags_0_structs.hpp"
#include "Engine_structs.hpp"
#include "ModularGameplay_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass QuartzMusicTrackComponent.QuartzMusicTrackComponent_C
// 0x00C8 (0x0168 - 0x00A0)
class UQuartzMusicTrackComponent_C : public UGameFrameworkComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USoundCue*                              TrackSoundCue;                                     // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TrackPriority;                                     // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuartzClockHandle*                     ClockInst;                                         // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ClockName;                                         // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ClockBPM;                                          // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FQuartzClockSettings                   ClockSettings;                                     // 0x00C8(0x0020)(Edit, BlueprintVisible)
	class ABP_QuartzMusicController_C*            ControllerActor;                                   // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FQuartzQuantizationBoundary            ClockQuantizationBoundary;                         // 0x00F0(0x0020)(Edit, BlueprintVisible)
	bool                                          bDebugEnabled;                                     // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        AudioComponent;                                    // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bQueueStop;                                        // 0x0120(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TrackFadeInTime;                                   // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TrackFadeOutTime;                                  // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TrackParameters;                                   // 0x0130(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TrackDisableTags;                                  // 0x0140(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           MusicEventTag;                                     // 0x0160(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_QuartzMusicTrackComponent(int32 EntryPoint);
	void GetAudioComponent(class UAudioComponent** AudioComponent_0);
	void GetClockHandle(class UQuartzClockHandle** Clock_Handle);
	void GetIsPlaying(bool* Is_Playing);
	EAudioComponentPlayState GetPlayState();
	void GetTrackPriority(float* Priority);
	void OnQuartzClockDelegate(EQuartzCommandDelegateSubType EventType, class FName Name_0);
	void OnQuartzQuantizationEvent(class FName ClockName_0, EQuartzCommandQuantization QuantizationType, int32 NumBars, int32 Beat, float BeatFraction);
	void QueueTrackStart();
	void QueueTrackStop();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void SetDebugEnabled(bool Debug);
	void SetStemVolume(int32 Index_0, float Value);
	void SetTrackParameter(int32 ParameterIndex, float InFloat);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"QuartzMusicTrackComponent_C">();
	}
	static class UQuartzMusicTrackComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuartzMusicTrackComponent_C>();
	}
};
static_assert(alignof(UQuartzMusicTrackComponent_C) == 0x000008, "Wrong alignment on UQuartzMusicTrackComponent_C");
static_assert(sizeof(UQuartzMusicTrackComponent_C) == 0x000168, "Wrong size on UQuartzMusicTrackComponent_C");
static_assert(offsetof(UQuartzMusicTrackComponent_C, UberGraphFrame) == 0x0000A0, "Member 'UQuartzMusicTrackComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_C, TrackSoundCue) == 0x0000A8, "Member 'UQuartzMusicTrackComponent_C::TrackSoundCue' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_C, TrackPriority) == 0x0000B0, "Member 'UQuartzMusicTrackComponent_C::TrackPriority' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_C, ClockInst) == 0x0000B8, "Member 'UQuartzMusicTrackComponent_C::ClockInst' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_C, ClockName) == 0x0000C0, "Member 'UQuartzMusicTrackComponent_C::ClockName' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_C, ClockBPM) == 0x0000C4, "Member 'UQuartzMusicTrackComponent_C::ClockBPM' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_C, ClockSettings) == 0x0000C8, "Member 'UQuartzMusicTrackComponent_C::ClockSettings' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_C, ControllerActor) == 0x0000E8, "Member 'UQuartzMusicTrackComponent_C::ControllerActor' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_C, ClockQuantizationBoundary) == 0x0000F0, "Member 'UQuartzMusicTrackComponent_C::ClockQuantizationBoundary' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_C, bDebugEnabled) == 0x000110, "Member 'UQuartzMusicTrackComponent_C::bDebugEnabled' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_C, AudioComponent) == 0x000118, "Member 'UQuartzMusicTrackComponent_C::AudioComponent' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_C, bQueueStop) == 0x000120, "Member 'UQuartzMusicTrackComponent_C::bQueueStop' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_C, TrackFadeInTime) == 0x000124, "Member 'UQuartzMusicTrackComponent_C::TrackFadeInTime' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_C, TrackFadeOutTime) == 0x000128, "Member 'UQuartzMusicTrackComponent_C::TrackFadeOutTime' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_C, TrackParameters) == 0x000130, "Member 'UQuartzMusicTrackComponent_C::TrackParameters' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_C, TrackDisableTags) == 0x000140, "Member 'UQuartzMusicTrackComponent_C::TrackDisableTags' has a wrong offset!");
static_assert(offsetof(UQuartzMusicTrackComponent_C, MusicEventTag) == 0x000160, "Member 'UQuartzMusicTrackComponent_C::MusicEventTag' has a wrong offset!");

}

