#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_ResTorchWeapon

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "B_Ranged_Generic_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_ResTorchWeapon.B_ResTorchWeapon_C
// 0x02D0 (0x19D0 - 0x1700)
class AB_ResTorchWeapon_C final : public AB_Ranged_Generic_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_B_ResTorchWeapon_C;                 // 0x1700(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      FXComp_EndFire;                                    // 0x1708(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        SFX_Heal_LP;                                       // 0x1710(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        SFX_Activated_lp;                                  // 0x1718(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        SFX_Idle_lp;                                       // 0x1720(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         ScaleUpTimeline_Value_13D2E72944034421BB1F4DBE908335D3; // 0x1728(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ScaleUpTimeline__Direction_13D2E72944034421BB1F4DBE908335D3; // 0x172C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_172D[0x3];                                     // 0x172D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ScaleUpTimeline;                                   // 0x1730(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         NS_Idle;                                           // 0x1738(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         NS_RepairToolCore;                                 // 0x1740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         NS_FlameEnd;                                       // 0x1748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        SFX_StopSputter;                                   // 0x1750(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         NS_ImpactDamage;                                   // 0x1758(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         NS_ImpactHeals;                                    // 0x1760(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ImpactFlameScale;                                  // 0x1768(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFXSystemComponent*                     FXComp_IdleFire;                                   // 0x1780(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFXSystemComponent*                     FXComp_FireCore;                                   // 0x1788(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Persistent_Fire;                                   // 0x1790(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1791[0x3];                                     // 0x1791(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         KnobTurnDelay;                                     // 0x1794(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RechargeDisabled_;                                 // 0x1798(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1799[0x3];                                     // 0x1799(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinAmmoToRestartFX;                                // 0x179C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             FlameStartSound;                                   // 0x17A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             FlameStopSound;                                    // 0x17A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ImpactLocation;                                    // 0x17B0(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             SFX_ImpactHeals;                                   // 0x17C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             SFX_ImpactGeneric;                                 // 0x17D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             SFX_ImpactWood;                                    // 0x17D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             SFX_ImpactMetal;                                   // 0x17E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSputtering_;                                     // 0x17E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TargetHealable_;                                   // 0x17E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17EA[0x6];                                     // 0x17EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             SFX_ImpactSparks;                                  // 0x17F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundConcurrency*                      HealSoundConcurrency;                              // 0x17F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           HealLoopHandle;                                    // 0x1800(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TurnOffHealTimer;                                  // 0x1808(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         HealedPercent;                                     // 0x1810(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1814[0x4];                                     // 0x1814(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             SFX_FullyHealedOneShot;                            // 0x1818(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           IdleTimer;                                         // 0x1820(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Gameplay_Cue_Tag;                                  // 0x1828(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          OnEffectsActive;                                   // 0x182C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_182D[0x3];                                     // 0x182D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 ImpactParams;                                      // 0x1830(0x00D0)(Edit, BlueprintVisible, Net, DisableEditOnInstance, ContainsInstancedReference)
	class AActor*                                 Hit_Actor;                                         // 0x1900(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OriginalFireScale;                                 // 0x1908(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OnHealLoopFaded;                                   // 0x1920(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1921[0x7];                                     // 0x1921(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     DecalMasterDamage;                                 // 0x1928(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     DecalMasterHeals;                                  // 0x1930(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DecalLifeMin;                                      // 0x1938(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DecalLifeMax;                                      // 0x193C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Decal_Texture;                                     // 0x1940(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DecalHealColor;                                    // 0x1948(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DecalDamageColor;                                  // 0x1958(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Decal_Size_Min;                                    // 0x1968(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Decal_Size_Max;                                    // 0x1980(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Impact_Normal;                                     // 0x1998(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           A;                                                 // 0x19B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OnEffectsFadeIn;                                   // 0x19C0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19C1[0x7];                                     // 0x19C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UForceFeedbackComponent*                ForceFeedbackCompWeaponFire;                       // 0x19C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ActivateIdleSound();
	void DeactivateAudioComponents();
	void DestroyTimer();
	void DrawDecalOnTarget(const struct FVector& Location, bool Healing_, const struct FVector& Normal);
	void EnableAmmoEvents();
	void ExecuteUbergraph_B_ResTorchWeapon(int32 EntryPoint);
	void GameplayCue_Impact_Generic(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void Get_FX_By_Actor(class AActor* Actor, class UNiagaraSystem** NS);
	void Get_SFX_By_Actor(class AActor* SurfacedActor, class USoundBase** Impact_Sound, float* HealthPercent);
	void GetActorAndLocation(const struct FGameplayCueParameters& Parameters, struct FVector* Location, class AActor** HitActor);
	void Is_Full_Health_(class AActor* Actor, bool* Full, float* HealthPercent);
	void IsSMActorHealable_(class ABuildingActor* Actor, bool* Return_Value);
	void K2_OnUnEquip();
	struct FRotator Make_Normalized_Rot(const struct FVector& Normal);
	void OnAmmoCountChanged();
	void OnHolstered();
	void OnPlayWeaponFireFX(bool bPersistentFire, bool bSecondaryFire);
	void OnRep_OnEffectsFadeIn();
	void OnRep_OnHealLoopFaded();
	void OnStopWeaponFireFX();
	void OnUnholstered();
	void OnWeaponAttached();
	void PlayFXLatent(class UNiagaraComponent* NS);
	void PlayHealingLoop(class AActor* Actor);
	void PlayImpactFXOnCue(const struct FGameplayCueParameters& InputParams);
	void PlayWeaponFireFX_ForceFeedback();
	void ReceiveBeginPlay();
	void RepUnequipFX();
	void ResetLatentFX();
	void ScaleUpTimeline__FinishedFunc();
	void ScaleUpTimeline__UpdateFunc();
	void SetEndFlameColor(class UFXSystemComponent* FXComp);
	void SetHealingOff();
	void ShrinkAndFadeActiveFire();
	void StopTimeline();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_ResTorchWeapon_C">();
	}
	static class AB_ResTorchWeapon_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_ResTorchWeapon_C>();
	}
};
static_assert(alignof(AB_ResTorchWeapon_C) == 0x000008, "Wrong alignment on AB_ResTorchWeapon_C");
static_assert(sizeof(AB_ResTorchWeapon_C) == 0x0019D0, "Wrong size on AB_ResTorchWeapon_C");
static_assert(offsetof(AB_ResTorchWeapon_C, UberGraphFrame_B_ResTorchWeapon_C) == 0x001700, "Member 'AB_ResTorchWeapon_C::UberGraphFrame_B_ResTorchWeapon_C' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, FXComp_EndFire) == 0x001708, "Member 'AB_ResTorchWeapon_C::FXComp_EndFire' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, SFX_Heal_LP) == 0x001710, "Member 'AB_ResTorchWeapon_C::SFX_Heal_LP' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, SFX_Activated_lp) == 0x001718, "Member 'AB_ResTorchWeapon_C::SFX_Activated_lp' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, SFX_Idle_lp) == 0x001720, "Member 'AB_ResTorchWeapon_C::SFX_Idle_lp' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, ScaleUpTimeline_Value_13D2E72944034421BB1F4DBE908335D3) == 0x001728, "Member 'AB_ResTorchWeapon_C::ScaleUpTimeline_Value_13D2E72944034421BB1F4DBE908335D3' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, ScaleUpTimeline__Direction_13D2E72944034421BB1F4DBE908335D3) == 0x00172C, "Member 'AB_ResTorchWeapon_C::ScaleUpTimeline__Direction_13D2E72944034421BB1F4DBE908335D3' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, ScaleUpTimeline) == 0x001730, "Member 'AB_ResTorchWeapon_C::ScaleUpTimeline' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, NS_Idle) == 0x001738, "Member 'AB_ResTorchWeapon_C::NS_Idle' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, NS_RepairToolCore) == 0x001740, "Member 'AB_ResTorchWeapon_C::NS_RepairToolCore' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, NS_FlameEnd) == 0x001748, "Member 'AB_ResTorchWeapon_C::NS_FlameEnd' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, SFX_StopSputter) == 0x001750, "Member 'AB_ResTorchWeapon_C::SFX_StopSputter' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, NS_ImpactDamage) == 0x001758, "Member 'AB_ResTorchWeapon_C::NS_ImpactDamage' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, NS_ImpactHeals) == 0x001760, "Member 'AB_ResTorchWeapon_C::NS_ImpactHeals' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, ImpactFlameScale) == 0x001768, "Member 'AB_ResTorchWeapon_C::ImpactFlameScale' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, FXComp_IdleFire) == 0x001780, "Member 'AB_ResTorchWeapon_C::FXComp_IdleFire' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, FXComp_FireCore) == 0x001788, "Member 'AB_ResTorchWeapon_C::FXComp_FireCore' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, Persistent_Fire) == 0x001790, "Member 'AB_ResTorchWeapon_C::Persistent_Fire' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, KnobTurnDelay) == 0x001794, "Member 'AB_ResTorchWeapon_C::KnobTurnDelay' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, RechargeDisabled_) == 0x001798, "Member 'AB_ResTorchWeapon_C::RechargeDisabled_' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, MinAmmoToRestartFX) == 0x00179C, "Member 'AB_ResTorchWeapon_C::MinAmmoToRestartFX' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, FlameStartSound) == 0x0017A0, "Member 'AB_ResTorchWeapon_C::FlameStartSound' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, FlameStopSound) == 0x0017A8, "Member 'AB_ResTorchWeapon_C::FlameStopSound' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, ImpactLocation) == 0x0017B0, "Member 'AB_ResTorchWeapon_C::ImpactLocation' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, SFX_ImpactHeals) == 0x0017C8, "Member 'AB_ResTorchWeapon_C::SFX_ImpactHeals' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, SFX_ImpactGeneric) == 0x0017D0, "Member 'AB_ResTorchWeapon_C::SFX_ImpactGeneric' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, SFX_ImpactWood) == 0x0017D8, "Member 'AB_ResTorchWeapon_C::SFX_ImpactWood' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, SFX_ImpactMetal) == 0x0017E0, "Member 'AB_ResTorchWeapon_C::SFX_ImpactMetal' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, IsSputtering_) == 0x0017E8, "Member 'AB_ResTorchWeapon_C::IsSputtering_' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, TargetHealable_) == 0x0017E9, "Member 'AB_ResTorchWeapon_C::TargetHealable_' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, SFX_ImpactSparks) == 0x0017F0, "Member 'AB_ResTorchWeapon_C::SFX_ImpactSparks' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, HealSoundConcurrency) == 0x0017F8, "Member 'AB_ResTorchWeapon_C::HealSoundConcurrency' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, HealLoopHandle) == 0x001800, "Member 'AB_ResTorchWeapon_C::HealLoopHandle' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, TurnOffHealTimer) == 0x001808, "Member 'AB_ResTorchWeapon_C::TurnOffHealTimer' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, HealedPercent) == 0x001810, "Member 'AB_ResTorchWeapon_C::HealedPercent' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, SFX_FullyHealedOneShot) == 0x001818, "Member 'AB_ResTorchWeapon_C::SFX_FullyHealedOneShot' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, IdleTimer) == 0x001820, "Member 'AB_ResTorchWeapon_C::IdleTimer' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, Gameplay_Cue_Tag) == 0x001828, "Member 'AB_ResTorchWeapon_C::Gameplay_Cue_Tag' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, OnEffectsActive) == 0x00182C, "Member 'AB_ResTorchWeapon_C::OnEffectsActive' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, ImpactParams) == 0x001830, "Member 'AB_ResTorchWeapon_C::ImpactParams' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, Hit_Actor) == 0x001900, "Member 'AB_ResTorchWeapon_C::Hit_Actor' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, OriginalFireScale) == 0x001908, "Member 'AB_ResTorchWeapon_C::OriginalFireScale' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, OnHealLoopFaded) == 0x001920, "Member 'AB_ResTorchWeapon_C::OnHealLoopFaded' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, DecalMasterDamage) == 0x001928, "Member 'AB_ResTorchWeapon_C::DecalMasterDamage' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, DecalMasterHeals) == 0x001930, "Member 'AB_ResTorchWeapon_C::DecalMasterHeals' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, DecalLifeMin) == 0x001938, "Member 'AB_ResTorchWeapon_C::DecalLifeMin' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, DecalLifeMax) == 0x00193C, "Member 'AB_ResTorchWeapon_C::DecalLifeMax' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, Decal_Texture) == 0x001940, "Member 'AB_ResTorchWeapon_C::Decal_Texture' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, DecalHealColor) == 0x001948, "Member 'AB_ResTorchWeapon_C::DecalHealColor' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, DecalDamageColor) == 0x001958, "Member 'AB_ResTorchWeapon_C::DecalDamageColor' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, Decal_Size_Min) == 0x001968, "Member 'AB_ResTorchWeapon_C::Decal_Size_Min' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, Decal_Size_Max) == 0x001980, "Member 'AB_ResTorchWeapon_C::Decal_Size_Max' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, Impact_Normal) == 0x001998, "Member 'AB_ResTorchWeapon_C::Impact_Normal' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, A) == 0x0019B0, "Member 'AB_ResTorchWeapon_C::A' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, OnEffectsFadeIn) == 0x0019C0, "Member 'AB_ResTorchWeapon_C::OnEffectsFadeIn' has a wrong offset!");
static_assert(offsetof(AB_ResTorchWeapon_C, ForceFeedbackCompWeaponFire) == 0x0019C8, "Member 'AB_ResTorchWeapon_C::ForceFeedbackCompWeaponFire' has a wrong offset!");

}

