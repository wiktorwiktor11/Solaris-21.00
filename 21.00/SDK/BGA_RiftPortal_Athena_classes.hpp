#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BGA_RiftPortal_Athena

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BGA_RiftPortal_Athena.BGA_RiftPortal_Athena_C
// 0x0250 (0x0C50 - 0x0A00)
class ABGA_RiftPortal_Athena_C final : public AFortAthenaRiftPortal
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0A00(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      NS_Rift_Portal_Idle_Shimmer;                       // 0x0A08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  RiftPostProcess;                                   // 0x0A10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       PostProcessRadius;                                 // 0x0A18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      OverlapCapsule;                                    // 0x0A20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Capsule;                                           // 0x0A28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Rift;                                           // 0x0A30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio_Looping;                                     // 0x0A38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         FragmentMovement_Glow_0216837E42A17FBFE0B65F9D47929352; // 0x0A40(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FragmentMovement_Open_0216837E42A17FBFE0B65F9D47929352; // 0x0A44(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            FragmentMovement__Direction_0216837E42A17FBFE0B65F9D47929352; // 0x0A48(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A49[0x7];                                      // 0x0A49(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     FragmentMovement;                                  // 0x0A50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Audio_RiftDestroyed_PitchCurve_FD5644F8499DCD599737CE8E444A6A41; // 0x0A58(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Audio_RiftDestroyed__Direction_FD5644F8499DCD599737CE8E444A6A41; // 0x0A5C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A5D[0x3];                                      // 0x0A5D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Audio_RiftDestroyed;                               // 0x0A60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VectorScale_Open_E8FFA9954C20AF01A2B5FBA7F5A6D4B9; // 0x0A68(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            VectorScale__Direction_E8FFA9954C20AF01A2B5FBA7F5A6D4B9; // 0x0A6C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A6D[0x3];                                      // 0x0A6D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     VectorScale;                                       // 0x0A70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        DeathEffects;                                      // 0x0A78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             EnteredRift;                                       // 0x0A80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             RiftDestroyed;                                     // 0x0A88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0A90(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TeleportLocation;                                  // 0x0A98(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        EnterRift;                                         // 0x0AB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PortalOpen;                                        // 0x0AB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AB9[0x7];                                      // 0x0AB9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           FallingAnimation;                                  // 0x0AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         TeleportHeight;                                    // 0x0AC8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         ActiveDuration;                                    // 0x0AF0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         HangTime;                                          // 0x0B18(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         TeleportDelay;                                     // 0x0B40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B44[0x4];                                      // 0x0B44(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AFortPlayerPawn*>                PassengerArray;                                    // 0x0B48(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class UParticleSystem*                        CrackExitRift;                                     // 0x0B58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             PlayerExitSkyCrack;                                // 0x0B60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         MaxSpawnHeight;                                    // 0x0B68(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                ActorOriginalLocation;                             // 0x0B90(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxSpawnHeightMultiplier;                          // 0x0BA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BAC[0x4];                                      // 0x0BAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortQuestItemDefinition*               QuestItem;                                         // 0x0BB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ObjectiveBackendName;                              // 0x0BB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BBC[0x4];                                      // 0x0BBC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortQuestItemDefinition*               RiftPortalLocationsQuest;                          // 0x0BC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CreativeMode;                                      // 0x0BC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC9[0x7];                                      // 0x0BC9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OverlapActor;                                      // 0x0BD0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ActorRotation;                                     // 0x0BD8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FScalableFloat                         ShouldSpawnRift_;                                  // 0x0BF0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	TScriptInterface<class IFortVehicleInterface> FortVehicleInterface;                              // 0x0C18(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PermanentRift;                                     // 0x0C28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C29[0x3];                                      // 0x0C29(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RandomRange;                                       // 0x0C2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  PawnBlockTeleportTags;                             // 0x0C30(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void Audio_RiftDestroyed__FinishedFunc();
	void Audio_RiftDestroyed__UpdateFunc();
	void BndEvt__Capsule_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__Capsule_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__OverlapCapsule_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	bool CanPawnBeTeleported(class AFortPlayerPawn* InputPin);
	void CheckForRiftLocUpdate(class AController* Controller);
	void DestroyRift();
	void ExecuteUbergraph_BGA_RiftPortal_Athena(int32 EntryPoint);
	void FragmentMovement__FinishedFunc();
	void FragmentMovement__UpdateFunc();
	bool Is_Flying();
	void IsPlayerAttachedToAIPawn(class AFortAIPawn* AIPawn, bool* Result, class AFortPlayerPawn** AttachedPlayerPawn);
	void OverlappingOnBeginPlay(class AActor* Actor);
	void PlayExpandOrCollapseAudio(bool Expand);
	void PlaylistLoaded(class FName PlaylistName, const struct FGameplayTagContainer& PlaylistContextTags);
	void PlayTeleportFX(const struct FVector& Location);
	void PortalOpened();
	void QuestUpdateComplexCustom(class AFortPlayerPawn* Player);
	void ReceiveBeginPlay();
	void ResetFX();
	void ResetRift();
	void TryRiftTeleport(class AActor* TargetActor);
	void UseRiftQuestUpdate(class AController* InController);
	void VectorScale__FinishedFunc();
	void VectorScale__UpdateFunc();
	void Vehicle_Telport_Event();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BGA_RiftPortal_Athena_C">();
	}
	static class ABGA_RiftPortal_Athena_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABGA_RiftPortal_Athena_C>();
	}
};
static_assert(alignof(ABGA_RiftPortal_Athena_C) == 0x000008, "Wrong alignment on ABGA_RiftPortal_Athena_C");
static_assert(sizeof(ABGA_RiftPortal_Athena_C) == 0x000C50, "Wrong size on ABGA_RiftPortal_Athena_C");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, UberGraphFrame) == 0x000A00, "Member 'ABGA_RiftPortal_Athena_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, NS_Rift_Portal_Idle_Shimmer) == 0x000A08, "Member 'ABGA_RiftPortal_Athena_C::NS_Rift_Portal_Idle_Shimmer' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, RiftPostProcess) == 0x000A10, "Member 'ABGA_RiftPortal_Athena_C::RiftPostProcess' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, PostProcessRadius) == 0x000A18, "Member 'ABGA_RiftPortal_Athena_C::PostProcessRadius' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, OverlapCapsule) == 0x000A20, "Member 'ABGA_RiftPortal_Athena_C::OverlapCapsule' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, Capsule) == 0x000A28, "Member 'ABGA_RiftPortal_Athena_C::Capsule' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, SM_Rift) == 0x000A30, "Member 'ABGA_RiftPortal_Athena_C::SM_Rift' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, Audio_Looping) == 0x000A38, "Member 'ABGA_RiftPortal_Athena_C::Audio_Looping' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, FragmentMovement_Glow_0216837E42A17FBFE0B65F9D47929352) == 0x000A40, "Member 'ABGA_RiftPortal_Athena_C::FragmentMovement_Glow_0216837E42A17FBFE0B65F9D47929352' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, FragmentMovement_Open_0216837E42A17FBFE0B65F9D47929352) == 0x000A44, "Member 'ABGA_RiftPortal_Athena_C::FragmentMovement_Open_0216837E42A17FBFE0B65F9D47929352' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, FragmentMovement__Direction_0216837E42A17FBFE0B65F9D47929352) == 0x000A48, "Member 'ABGA_RiftPortal_Athena_C::FragmentMovement__Direction_0216837E42A17FBFE0B65F9D47929352' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, FragmentMovement) == 0x000A50, "Member 'ABGA_RiftPortal_Athena_C::FragmentMovement' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, Audio_RiftDestroyed_PitchCurve_FD5644F8499DCD599737CE8E444A6A41) == 0x000A58, "Member 'ABGA_RiftPortal_Athena_C::Audio_RiftDestroyed_PitchCurve_FD5644F8499DCD599737CE8E444A6A41' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, Audio_RiftDestroyed__Direction_FD5644F8499DCD599737CE8E444A6A41) == 0x000A5C, "Member 'ABGA_RiftPortal_Athena_C::Audio_RiftDestroyed__Direction_FD5644F8499DCD599737CE8E444A6A41' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, Audio_RiftDestroyed) == 0x000A60, "Member 'ABGA_RiftPortal_Athena_C::Audio_RiftDestroyed' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, VectorScale_Open_E8FFA9954C20AF01A2B5FBA7F5A6D4B9) == 0x000A68, "Member 'ABGA_RiftPortal_Athena_C::VectorScale_Open_E8FFA9954C20AF01A2B5FBA7F5A6D4B9' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, VectorScale__Direction_E8FFA9954C20AF01A2B5FBA7F5A6D4B9) == 0x000A6C, "Member 'ABGA_RiftPortal_Athena_C::VectorScale__Direction_E8FFA9954C20AF01A2B5FBA7F5A6D4B9' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, VectorScale) == 0x000A70, "Member 'ABGA_RiftPortal_Athena_C::VectorScale' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, DeathEffects) == 0x000A78, "Member 'ABGA_RiftPortal_Athena_C::DeathEffects' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, EnteredRift) == 0x000A80, "Member 'ABGA_RiftPortal_Athena_C::EnteredRift' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, RiftDestroyed) == 0x000A88, "Member 'ABGA_RiftPortal_Athena_C::RiftDestroyed' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, PlayerPawn) == 0x000A90, "Member 'ABGA_RiftPortal_Athena_C::PlayerPawn' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, TeleportLocation) == 0x000A98, "Member 'ABGA_RiftPortal_Athena_C::TeleportLocation' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, EnterRift) == 0x000AB0, "Member 'ABGA_RiftPortal_Athena_C::EnterRift' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, PortalOpen) == 0x000AB8, "Member 'ABGA_RiftPortal_Athena_C::PortalOpen' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, FallingAnimation) == 0x000AC0, "Member 'ABGA_RiftPortal_Athena_C::FallingAnimation' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, TeleportHeight) == 0x000AC8, "Member 'ABGA_RiftPortal_Athena_C::TeleportHeight' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, ActiveDuration) == 0x000AF0, "Member 'ABGA_RiftPortal_Athena_C::ActiveDuration' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, HangTime) == 0x000B18, "Member 'ABGA_RiftPortal_Athena_C::HangTime' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, TeleportDelay) == 0x000B40, "Member 'ABGA_RiftPortal_Athena_C::TeleportDelay' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, PassengerArray) == 0x000B48, "Member 'ABGA_RiftPortal_Athena_C::PassengerArray' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, CrackExitRift) == 0x000B58, "Member 'ABGA_RiftPortal_Athena_C::CrackExitRift' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, PlayerExitSkyCrack) == 0x000B60, "Member 'ABGA_RiftPortal_Athena_C::PlayerExitSkyCrack' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, MaxSpawnHeight) == 0x000B68, "Member 'ABGA_RiftPortal_Athena_C::MaxSpawnHeight' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, ActorOriginalLocation) == 0x000B90, "Member 'ABGA_RiftPortal_Athena_C::ActorOriginalLocation' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, MaxSpawnHeightMultiplier) == 0x000BA8, "Member 'ABGA_RiftPortal_Athena_C::MaxSpawnHeightMultiplier' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, QuestItem) == 0x000BB0, "Member 'ABGA_RiftPortal_Athena_C::QuestItem' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, ObjectiveBackendName) == 0x000BB8, "Member 'ABGA_RiftPortal_Athena_C::ObjectiveBackendName' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, RiftPortalLocationsQuest) == 0x000BC0, "Member 'ABGA_RiftPortal_Athena_C::RiftPortalLocationsQuest' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, CreativeMode) == 0x000BC8, "Member 'ABGA_RiftPortal_Athena_C::CreativeMode' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, OverlapActor) == 0x000BD0, "Member 'ABGA_RiftPortal_Athena_C::OverlapActor' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, ActorRotation) == 0x000BD8, "Member 'ABGA_RiftPortal_Athena_C::ActorRotation' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, ShouldSpawnRift_) == 0x000BF0, "Member 'ABGA_RiftPortal_Athena_C::ShouldSpawnRift_' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, FortVehicleInterface) == 0x000C18, "Member 'ABGA_RiftPortal_Athena_C::FortVehicleInterface' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, PermanentRift) == 0x000C28, "Member 'ABGA_RiftPortal_Athena_C::PermanentRift' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, RandomRange) == 0x000C2C, "Member 'ABGA_RiftPortal_Athena_C::RandomRange' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, PawnBlockTeleportTags) == 0x000C30, "Member 'ABGA_RiftPortal_Athena_C::PawnBlockTeleportTags' has a wrong offset!");

}

