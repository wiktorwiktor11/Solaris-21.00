#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VGameplayRst_0

#include "Basic.hpp"

#include "VGameplayRst_0_structs.hpp"
#include "Verse_0_structs.hpp"
#include "Verse_structs.hpp"


namespace SDK::Params
{

// Function VGameplayRst.Context_dynamic_activation_component$WaitForTransitionComplete.Update
// 0x0008 (0x0008 - 0x0000)
struct Context_dynamic_activation_component_WaitForTransitionComplete_Update final
{
public:
	int64                                         RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Context_dynamic_activation_component_WaitForTransitionComplete_Update) == 0x000008, "Wrong alignment on Context_dynamic_activation_component_WaitForTransitionComplete_Update");
static_assert(sizeof(Context_dynamic_activation_component_WaitForTransitionComplete_Update) == 0x000008, "Wrong size on Context_dynamic_activation_component_WaitForTransitionComplete_Update");
static_assert(offsetof(Context_dynamic_activation_component_WaitForTransitionComplete_Update, RetVal) == 0x000000, "Member 'Context_dynamic_activation_component_WaitForTransitionComplete_Update::RetVal' has a wrong offset!");

// Function VGameplayRst.tagged_object_finder_entry.$InitCDO
// 0x0018 (0x0018 - 0x0000)
struct tagged_object_finder_entry__InitCDO final
{
public:
	class Ugameplay_tag_container*                _TEMP_0;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class Ugameplay_tag_container*                _TEMP_1;                                           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class Ugameplay_tag_container*                _TEMP_2;                                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(tagged_object_finder_entry__InitCDO) == 0x000008, "Wrong alignment on tagged_object_finder_entry__InitCDO");
static_assert(sizeof(tagged_object_finder_entry__InitCDO) == 0x000018, "Wrong size on tagged_object_finder_entry__InitCDO");
static_assert(offsetof(tagged_object_finder_entry__InitCDO, _TEMP_0) == 0x000000, "Member 'tagged_object_finder_entry__InitCDO::_TEMP_0' has a wrong offset!");
static_assert(offsetof(tagged_object_finder_entry__InitCDO, _TEMP_1) == 0x000008, "Member 'tagged_object_finder_entry__InitCDO::_TEMP_1' has a wrong offset!");
static_assert(offsetof(tagged_object_finder_entry__InitCDO, _TEMP_2) == 0x000010, "Member 'tagged_object_finder_entry__InitCDO::_TEMP_2' has a wrong offset!");

// Function VGameplayRst.scale_component._L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__scalable_N_RSetScale_L_Nvector3_R
// 0x0018 (0x0018 - 0x0000)
struct scale_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__scalable_N_RSetScale_L_Nvector3_R final
{
public:
	struct Fvector3                               __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(scale_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__scalable_N_RSetScale_L_Nvector3_R) == 0x000008, "Wrong alignment on scale_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__scalable_N_RSetScale_L_Nvector3_R");
static_assert(sizeof(scale_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__scalable_N_RSetScale_L_Nvector3_R) == 0x000018, "Wrong size on scale_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__scalable_N_RSetScale_L_Nvector3_R");
static_assert(offsetof(scale_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__scalable_N_RSetScale_L_Nvector3_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'scale_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__scalable_N_RSetScale_L_Nvector3_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.scale_component._L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fscalable_N_RGetScale
// 0x0020 (0x0020 - 0x0000)
struct scale_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fscalable_N_RGetScale final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct Fvector3                               RetVal;                                            // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(scale_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fscalable_N_RGetScale) == 0x000008, "Wrong alignment on scale_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fscalable_N_RGetScale");
static_assert(sizeof(scale_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fscalable_N_RGetScale) == 0x000020, "Wrong size on scale_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fscalable_N_RGetScale");
static_assert(offsetof(scale_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fscalable_N_RGetScale, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'scale_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fscalable_N_RGetScale::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(scale_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fscalable_N_RGetScale, RetVal) == 0x000008, "Member 'scale_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fscalable_N_RGetScale::RetVal' has a wrong offset!");

// Function VGameplayRst.scale_component._L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fscale__component_N_RAddToScale_L_Nvector3_R
// 0x0018 (0x0018 - 0x0000)
struct scale_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fscale__component_N_RAddToScale_L_Nvector3_R final
{
public:
	struct Fvector3                               __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(scale_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fscale__component_N_RAddToScale_L_Nvector3_R) == 0x000008, "Wrong alignment on scale_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fscale__component_N_RAddToScale_L_Nvector3_R");
static_assert(sizeof(scale_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fscale__component_N_RAddToScale_L_Nvector3_R) == 0x000018, "Wrong size on scale_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fscale__component_N_RAddToScale_L_Nvector3_R");
static_assert(offsetof(scale_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fscale__component_N_RAddToScale_L_Nvector3_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'scale_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fscale__component_N_RAddToScale_L_Nvector3_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.Context_collision_component$WaitBeginOverlap.Update
// 0x0008 (0x0008 - 0x0000)
struct Context_collision_component_WaitBeginOverlap_Update final
{
public:
	int64                                         RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Context_collision_component_WaitBeginOverlap_Update) == 0x000008, "Wrong alignment on Context_collision_component_WaitBeginOverlap_Update");
static_assert(sizeof(Context_collision_component_WaitBeginOverlap_Update) == 0x000008, "Wrong size on Context_collision_component_WaitBeginOverlap_Update");
static_assert(offsetof(Context_collision_component_WaitBeginOverlap_Update, RetVal) == 0x000000, "Member 'Context_collision_component_WaitBeginOverlap_Update::RetVal' has a wrong offset!");

// Function VGameplayRst.scalable._L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fscalable_N_RGetScale
// 0x0020 (0x0020 - 0x0000)
struct scalable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fscalable_N_RGetScale final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct Fvector3                               RetVal;                                            // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(scalable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fscalable_N_RGetScale) == 0x000008, "Wrong alignment on scalable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fscalable_N_RGetScale");
static_assert(sizeof(scalable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fscalable_N_RGetScale) == 0x000020, "Wrong size on scalable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fscalable_N_RGetScale");
static_assert(offsetof(scalable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fscalable_N_RGetScale, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'scalable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fscalable_N_RGetScale::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(scalable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fscalable_N_RGetScale, RetVal) == 0x000008, "Member 'scalable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fscalable_N_RGetScale::RetVal' has a wrong offset!");

// Function VGameplayRst.Context_debug_command_component$__WaitForCommand_L_N_Kchar_R.Update
// 0x0008 (0x0008 - 0x0000)
struct Context_debug_command_component___WaitForCommand_L_N_Kchar_R_Update final
{
public:
	int64                                         RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Context_debug_command_component___WaitForCommand_L_N_Kchar_R_Update) == 0x000008, "Wrong alignment on Context_debug_command_component___WaitForCommand_L_N_Kchar_R_Update");
static_assert(sizeof(Context_debug_command_component___WaitForCommand_L_N_Kchar_R_Update) == 0x000008, "Wrong size on Context_debug_command_component___WaitForCommand_L_N_Kchar_R_Update");
static_assert(offsetof(Context_debug_command_component___WaitForCommand_L_N_Kchar_R_Update, RetVal) == 0x000000, "Member 'Context_debug_command_component___WaitForCommand_L_N_Kchar_R_Update::RetVal' has a wrong offset!");

// Function VGameplayRst.audio_component._L_2fVerse_2eorg_2fVGameplayRst_2fAudio_2faudio__component_N_RPlaySound
// 0x0001 (0x0001 - 0x0000)
struct audio_component__L_2fVerse_2eorg_2fVGameplayRst_2fAudio_2faudio__component_N_RPlaySound final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
};
static_assert(alignof(audio_component__L_2fVerse_2eorg_2fVGameplayRst_2fAudio_2faudio__component_N_RPlaySound) == 0x000001, "Wrong alignment on audio_component__L_2fVerse_2eorg_2fVGameplayRst_2fAudio_2faudio__component_N_RPlaySound");
static_assert(sizeof(audio_component__L_2fVerse_2eorg_2fVGameplayRst_2fAudio_2faudio__component_N_RPlaySound) == 0x000001, "Wrong size on audio_component__L_2fVerse_2eorg_2fVGameplayRst_2fAudio_2faudio__component_N_RPlaySound");
static_assert(offsetof(audio_component__L_2fVerse_2eorg_2fVGameplayRst_2fAudio_2faudio__component_N_RPlaySound, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'audio_component__L_2fVerse_2eorg_2fVGameplayRst_2fAudio_2faudio__component_N_RPlaySound::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.audio_component._L_2fVerse_2eorg_2fVGameplayRst_2fAudio_2faudio__component_N_RSetSound_L_Nsound_R
// 0x0008 (0x0008 - 0x0000)
struct audio_component__L_2fVerse_2eorg_2fVGameplayRst_2fAudio_2faudio__component_N_RSetSound_L_Nsound_R final
{
public:
	class Usound*                                 __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(audio_component__L_2fVerse_2eorg_2fVGameplayRst_2fAudio_2faudio__component_N_RSetSound_L_Nsound_R) == 0x000008, "Wrong alignment on audio_component__L_2fVerse_2eorg_2fVGameplayRst_2fAudio_2faudio__component_N_RSetSound_L_Nsound_R");
static_assert(sizeof(audio_component__L_2fVerse_2eorg_2fVGameplayRst_2fAudio_2faudio__component_N_RSetSound_L_Nsound_R) == 0x000008, "Wrong size on audio_component__L_2fVerse_2eorg_2fVGameplayRst_2fAudio_2faudio__component_N_RSetSound_L_Nsound_R");
static_assert(offsetof(audio_component__L_2fVerse_2eorg_2fVGameplayRst_2fAudio_2faudio__component_N_RSetSound_L_Nsound_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'audio_component__L_2fVerse_2eorg_2fVGameplayRst_2fAudio_2faudio__component_N_RSetSound_L_Nsound_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.audio_component._L_2fVerse_2eorg_2fVGameplayRst_2fAudio_2faudio__component_N_RStopSound
// 0x0001 (0x0001 - 0x0000)
struct audio_component__L_2fVerse_2eorg_2fVGameplayRst_2fAudio_2faudio__component_N_RStopSound final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
};
static_assert(alignof(audio_component__L_2fVerse_2eorg_2fVGameplayRst_2fAudio_2faudio__component_N_RStopSound) == 0x000001, "Wrong alignment on audio_component__L_2fVerse_2eorg_2fVGameplayRst_2fAudio_2faudio__component_N_RStopSound");
static_assert(sizeof(audio_component__L_2fVerse_2eorg_2fVGameplayRst_2fAudio_2faudio__component_N_RStopSound) == 0x000001, "Wrong size on audio_component__L_2fVerse_2eorg_2fVGameplayRst_2fAudio_2faudio__component_N_RStopSound");
static_assert(offsetof(audio_component__L_2fVerse_2eorg_2fVGameplayRst_2fAudio_2faudio__component_N_RStopSound, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'audio_component__L_2fVerse_2eorg_2fVGameplayRst_2fAudio_2faudio__component_N_RStopSound::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.Context_collision_component$WaitHit.Update
// 0x0008 (0x0008 - 0x0000)
struct Context_collision_component_WaitHit_Update final
{
public:
	int64                                         RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Context_collision_component_WaitHit_Update) == 0x000008, "Wrong alignment on Context_collision_component_WaitHit_Update");
static_assert(sizeof(Context_collision_component_WaitHit_Update) == 0x000008, "Wrong size on Context_collision_component_WaitHit_Update");
static_assert(offsetof(Context_collision_component_WaitHit_Update, RetVal) == 0x000000, "Member 'Context_collision_component_WaitHit_Update::RetVal' has a wrong offset!");

// Function VGameplayRst.collision_component._L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetCollisionProfileName
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetCollisionProfileName final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FVerseStringProperty_                         RetVal;                                            // 0x0008(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetCollisionProfileName) == 0x000008, "Wrong alignment on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetCollisionProfileName");
static_assert(sizeof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetCollisionProfileName) == 0x000018, "Wrong size on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetCollisionProfileName");
static_assert(offsetof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetCollisionProfileName, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetCollisionProfileName::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetCollisionProfileName, RetVal) == 0x000008, "Member 'collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetCollisionProfileName::RetVal' has a wrong offset!");

// Function VGameplayRst.collision_component._L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetCollisionShapeMode
// 0x0002 (0x0002 - 0x0000)
struct collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetCollisionShapeMode final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	Ecollision_shape_mode                         RetVal;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetCollisionShapeMode) == 0x000001, "Wrong alignment on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetCollisionShapeMode");
static_assert(sizeof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetCollisionShapeMode) == 0x000002, "Wrong size on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetCollisionShapeMode");
static_assert(offsetof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetCollisionShapeMode, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetCollisionShapeMode::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetCollisionShapeMode, RetVal) == 0x000001, "Member 'collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetCollisionShapeMode::RetVal' has a wrong offset!");

// Function VGameplayRst.collision_component._L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetEnabled
// 0x0002 (0x0002 - 0x0000)
struct collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetEnabled final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         RetVal : 1;                                        // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
static_assert(alignof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetEnabled) == 0x000001, "Wrong alignment on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetEnabled");
static_assert(sizeof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetEnabled) == 0x000002, "Wrong size on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetEnabled");
static_assert(offsetof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetEnabled, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetEnabled::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.collision_component._L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetGravityEnabled
// 0x0002 (0x0002 - 0x0000)
struct collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetGravityEnabled final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         RetVal : 1;                                        // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
static_assert(alignof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetGravityEnabled) == 0x000001, "Wrong alignment on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetGravityEnabled");
static_assert(sizeof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetGravityEnabled) == 0x000002, "Wrong size on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetGravityEnabled");
static_assert(offsetof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetGravityEnabled, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetGravityEnabled::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.collision_component._L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetMovable
// 0x0002 (0x0002 - 0x0000)
struct collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetMovable final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         RetVal : 1;                                        // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
static_assert(alignof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetMovable) == 0x000001, "Wrong alignment on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetMovable");
static_assert(sizeof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetMovable) == 0x000002, "Wrong size on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetMovable");
static_assert(offsetof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetMovable, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetMovable::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.collision_component._L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetSendHitEventsOnCollide
// 0x0002 (0x0002 - 0x0000)
struct collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetSendHitEventsOnCollide final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         RetVal : 1;                                        // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
static_assert(alignof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetSendHitEventsOnCollide) == 0x000001, "Wrong alignment on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetSendHitEventsOnCollide");
static_assert(sizeof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetSendHitEventsOnCollide) == 0x000002, "Wrong size on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetSendHitEventsOnCollide");
static_assert(offsetof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetSendHitEventsOnCollide, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetSendHitEventsOnCollide::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.collision_component._L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetSendOverlapEvents
// 0x0002 (0x0002 - 0x0000)
struct collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetSendOverlapEvents final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         RetVal : 1;                                        // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
static_assert(alignof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetSendOverlapEvents) == 0x000001, "Wrong alignment on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetSendOverlapEvents");
static_assert(sizeof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetSendOverlapEvents) == 0x000002, "Wrong size on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetSendOverlapEvents");
static_assert(offsetof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetSendOverlapEvents, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetSendOverlapEvents::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.collision_component._L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetUseContinuousCollisionDetection
// 0x0002 (0x0002 - 0x0000)
struct collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetUseContinuousCollisionDetection final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         RetVal : 1;                                        // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
static_assert(alignof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetUseContinuousCollisionDetection) == 0x000001, "Wrong alignment on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetUseContinuousCollisionDetection");
static_assert(sizeof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetUseContinuousCollisionDetection) == 0x000002, "Wrong size on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetUseContinuousCollisionDetection");
static_assert(offsetof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetUseContinuousCollisionDetection, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RGetUseContinuousCollisionDetection::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.collision_component._L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetBoxCollisionShapeMode_L_Nvector3_R
// 0x0018 (0x0018 - 0x0000)
struct collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetBoxCollisionShapeMode_L_Nvector3_R final
{
public:
	struct Fvector3                               __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetBoxCollisionShapeMode_L_Nvector3_R) == 0x000008, "Wrong alignment on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetBoxCollisionShapeMode_L_Nvector3_R");
static_assert(sizeof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetBoxCollisionShapeMode_L_Nvector3_R) == 0x000018, "Wrong size on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetBoxCollisionShapeMode_L_Nvector3_R");
static_assert(offsetof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetBoxCollisionShapeMode_L_Nvector3_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetBoxCollisionShapeMode_L_Nvector3_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.collision_component._L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetCapsuleCollisionShapeMode_L_Nfloat_M_Nfloat_R
// 0x0010 (0x0010 - 0x0000)
struct collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetCapsuleCollisionShapeMode_L_Nfloat_M_Nfloat_R final
{
public:
	struct VGameplayRst_0::Ftuple_Lfloat_Mfloat_R __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0010)(Parm, HasGetValueTypeHash)
};
static_assert(alignof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetCapsuleCollisionShapeMode_L_Nfloat_M_Nfloat_R) == 0x000008, "Wrong alignment on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetCapsuleCollisionShapeMode_L_Nfloat_M_Nfloat_R");
static_assert(sizeof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetCapsuleCollisionShapeMode_L_Nfloat_M_Nfloat_R) == 0x000010, "Wrong size on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetCapsuleCollisionShapeMode_L_Nfloat_M_Nfloat_R");
static_assert(offsetof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetCapsuleCollisionShapeMode_L_Nfloat_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetCapsuleCollisionShapeMode_L_Nfloat_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.collision_component._L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetCollisionProfileName_L_N_Kchar_R
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetCollisionProfileName_L_N_Kchar_R final
{
public:
	FVerseStringProperty_                         __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0010)(Parm, HasGetValueTypeHash)
};
static_assert(alignof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetCollisionProfileName_L_N_Kchar_R) == 0x000008, "Wrong alignment on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetCollisionProfileName_L_N_Kchar_R");
static_assert(sizeof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetCollisionProfileName_L_N_Kchar_R) == 0x000010, "Wrong size on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetCollisionProfileName_L_N_Kchar_R");
static_assert(offsetof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetCollisionProfileName_L_N_Kchar_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetCollisionProfileName_L_N_Kchar_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.collision_component._L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetCustomDegreeOfFreedomConstrain_L_Nvector3_R
// 0x0018 (0x0018 - 0x0000)
struct collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetCustomDegreeOfFreedomConstrain_L_Nvector3_R final
{
public:
	struct Fvector3                               __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetCustomDegreeOfFreedomConstrain_L_Nvector3_R) == 0x000008, "Wrong alignment on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetCustomDegreeOfFreedomConstrain_L_Nvector3_R");
static_assert(sizeof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetCustomDegreeOfFreedomConstrain_L_Nvector3_R) == 0x000018, "Wrong size on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetCustomDegreeOfFreedomConstrain_L_Nvector3_R");
static_assert(offsetof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetCustomDegreeOfFreedomConstrain_L_Nvector3_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetCustomDegreeOfFreedomConstrain_L_Nvector3_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.collision_component._L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetDegreeOfFreedomContraint_L_Ndof__movement__mode_R
// 0x0001 (0x0001 - 0x0000)
struct collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetDegreeOfFreedomContraint_L_Ndof__movement__mode_R final
{
public:
	Edof_movement_mode                            __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetDegreeOfFreedomContraint_L_Ndof__movement__mode_R) == 0x000001, "Wrong alignment on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetDegreeOfFreedomContraint_L_Ndof__movement__mode_R");
static_assert(sizeof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetDegreeOfFreedomContraint_L_Ndof__movement__mode_R) == 0x000001, "Wrong size on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetDegreeOfFreedomContraint_L_Ndof__movement__mode_R");
static_assert(offsetof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetDegreeOfFreedomContraint_L_Ndof__movement__mode_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetDegreeOfFreedomContraint_L_Ndof__movement__mode_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.collision_component._L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetEnabled_L_Nlogic_R
// 0x0001 (0x0001 - 0x0000)
struct collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetEnabled_L_Nlogic_R final
{
public:
	uint8                                         __verse_0xB2CDDD72_Argument : 1;                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
static_assert(alignof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetEnabled_L_Nlogic_R) == 0x000001, "Wrong alignment on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetEnabled_L_Nlogic_R");
static_assert(sizeof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetEnabled_L_Nlogic_R) == 0x000001, "Wrong size on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetEnabled_L_Nlogic_R");

// Function VGameplayRst.collision_component._L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetGravityEnabled_L_Nlogic_R
// 0x0001 (0x0001 - 0x0000)
struct collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetGravityEnabled_L_Nlogic_R final
{
public:
	uint8                                         __verse_0xB2CDDD72_Argument : 1;                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
static_assert(alignof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetGravityEnabled_L_Nlogic_R) == 0x000001, "Wrong alignment on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetGravityEnabled_L_Nlogic_R");
static_assert(sizeof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetGravityEnabled_L_Nlogic_R) == 0x000001, "Wrong size on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetGravityEnabled_L_Nlogic_R");

// Function VGameplayRst.collision_component._L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetMeshCollisionShapeMode
// 0x0001 (0x0001 - 0x0000)
struct collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetMeshCollisionShapeMode final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
};
static_assert(alignof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetMeshCollisionShapeMode) == 0x000001, "Wrong alignment on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetMeshCollisionShapeMode");
static_assert(sizeof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetMeshCollisionShapeMode) == 0x000001, "Wrong size on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetMeshCollisionShapeMode");
static_assert(offsetof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetMeshCollisionShapeMode, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetMeshCollisionShapeMode::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.collision_component._L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetMeshCollisionShapeMode_L_Nstatic__mesh_R
// 0x0008 (0x0008 - 0x0000)
struct collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetMeshCollisionShapeMode_L_Nstatic__mesh_R final
{
public:
	class Ustatic_mesh*                           __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetMeshCollisionShapeMode_L_Nstatic__mesh_R) == 0x000008, "Wrong alignment on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetMeshCollisionShapeMode_L_Nstatic__mesh_R");
static_assert(sizeof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetMeshCollisionShapeMode_L_Nstatic__mesh_R) == 0x000008, "Wrong size on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetMeshCollisionShapeMode_L_Nstatic__mesh_R");
static_assert(offsetof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetMeshCollisionShapeMode_L_Nstatic__mesh_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetMeshCollisionShapeMode_L_Nstatic__mesh_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.collision_component._L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetMovable_L_Nlogic_R
// 0x0001 (0x0001 - 0x0000)
struct collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetMovable_L_Nlogic_R final
{
public:
	uint8                                         __verse_0xB2CDDD72_Argument : 1;                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
static_assert(alignof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetMovable_L_Nlogic_R) == 0x000001, "Wrong alignment on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetMovable_L_Nlogic_R");
static_assert(sizeof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetMovable_L_Nlogic_R) == 0x000001, "Wrong size on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetMovable_L_Nlogic_R");

// Function VGameplayRst.collision_component._L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetSendHitEventsOnCollide_L_Nlogic_R
// 0x0001 (0x0001 - 0x0000)
struct collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetSendHitEventsOnCollide_L_Nlogic_R final
{
public:
	uint8                                         __verse_0xB2CDDD72_Argument : 1;                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
static_assert(alignof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetSendHitEventsOnCollide_L_Nlogic_R) == 0x000001, "Wrong alignment on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetSendHitEventsOnCollide_L_Nlogic_R");
static_assert(sizeof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetSendHitEventsOnCollide_L_Nlogic_R) == 0x000001, "Wrong size on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetSendHitEventsOnCollide_L_Nlogic_R");

// Function VGameplayRst.collision_component._L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetSendOverlapEvents_L_Nlogic_R
// 0x0001 (0x0001 - 0x0000)
struct collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetSendOverlapEvents_L_Nlogic_R final
{
public:
	uint8                                         __verse_0xB2CDDD72_Argument : 1;                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
static_assert(alignof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetSendOverlapEvents_L_Nlogic_R) == 0x000001, "Wrong alignment on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetSendOverlapEvents_L_Nlogic_R");
static_assert(sizeof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetSendOverlapEvents_L_Nlogic_R) == 0x000001, "Wrong size on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetSendOverlapEvents_L_Nlogic_R");

// Function VGameplayRst.collision_component._L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetSphereCollisionShapeMode_L_Nfloat_R
// 0x0008 (0x0008 - 0x0000)
struct collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetSphereCollisionShapeMode_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetSphereCollisionShapeMode_L_Nfloat_R) == 0x000008, "Wrong alignment on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetSphereCollisionShapeMode_L_Nfloat_R");
static_assert(sizeof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetSphereCollisionShapeMode_L_Nfloat_R) == 0x000008, "Wrong size on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetSphereCollisionShapeMode_L_Nfloat_R");
static_assert(offsetof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetSphereCollisionShapeMode_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetSphereCollisionShapeMode_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.collision_component._L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetUseContinuousCollisionDetection_L_Nlogic_R
// 0x0001 (0x0001 - 0x0000)
struct collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetUseContinuousCollisionDetection_L_Nlogic_R final
{
public:
	uint8                                         __verse_0xB2CDDD72_Argument : 1;                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
static_assert(alignof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetUseContinuousCollisionDetection_L_Nlogic_R) == 0x000001, "Wrong alignment on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetUseContinuousCollisionDetection_L_Nlogic_R");
static_assert(sizeof(collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetUseContinuousCollisionDetection_L_Nlogic_R) == 0x000001, "Wrong size on collision_component__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fcollision__component_N_RSetUseContinuousCollisionDetection_L_Nlogic_R");

// Function VGameplayRst.collision_component.WaitBeginOverlap
// 0x0028 (0x0028 - 0x0000)
struct collision_component_WaitBeginOverlap final
{
public:
	class Utask*                                  __verse_0xC1E81372_CallingTask;                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         __verse_0xA3A00DDB_CallerResumeState;              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         __verse_0x2AC0E4D8_CallerCancelState;              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0018(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class Utask*                                  RetVal;                                            // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(collision_component_WaitBeginOverlap) == 0x000008, "Wrong alignment on collision_component_WaitBeginOverlap");
static_assert(sizeof(collision_component_WaitBeginOverlap) == 0x000028, "Wrong size on collision_component_WaitBeginOverlap");
static_assert(offsetof(collision_component_WaitBeginOverlap, __verse_0xC1E81372_CallingTask) == 0x000000, "Member 'collision_component_WaitBeginOverlap::__verse_0xC1E81372_CallingTask' has a wrong offset!");
static_assert(offsetof(collision_component_WaitBeginOverlap, __verse_0xA3A00DDB_CallerResumeState) == 0x000008, "Member 'collision_component_WaitBeginOverlap::__verse_0xA3A00DDB_CallerResumeState' has a wrong offset!");
static_assert(offsetof(collision_component_WaitBeginOverlap, __verse_0x2AC0E4D8_CallerCancelState) == 0x000010, "Member 'collision_component_WaitBeginOverlap::__verse_0x2AC0E4D8_CallerCancelState' has a wrong offset!");
static_assert(offsetof(collision_component_WaitBeginOverlap, __verse_0xB2CDDD72_Argument) == 0x000018, "Member 'collision_component_WaitBeginOverlap::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(collision_component_WaitBeginOverlap, RetVal) == 0x000020, "Member 'collision_component_WaitBeginOverlap::RetVal' has a wrong offset!");

// Function VGameplayRst.collision_component.WaitEndOverlap
// 0x0028 (0x0028 - 0x0000)
struct collision_component_WaitEndOverlap final
{
public:
	class Utask*                                  __verse_0xC1E81372_CallingTask;                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         __verse_0xA3A00DDB_CallerResumeState;              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         __verse_0x2AC0E4D8_CallerCancelState;              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0018(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class Utask*                                  RetVal;                                            // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(collision_component_WaitEndOverlap) == 0x000008, "Wrong alignment on collision_component_WaitEndOverlap");
static_assert(sizeof(collision_component_WaitEndOverlap) == 0x000028, "Wrong size on collision_component_WaitEndOverlap");
static_assert(offsetof(collision_component_WaitEndOverlap, __verse_0xC1E81372_CallingTask) == 0x000000, "Member 'collision_component_WaitEndOverlap::__verse_0xC1E81372_CallingTask' has a wrong offset!");
static_assert(offsetof(collision_component_WaitEndOverlap, __verse_0xA3A00DDB_CallerResumeState) == 0x000008, "Member 'collision_component_WaitEndOverlap::__verse_0xA3A00DDB_CallerResumeState' has a wrong offset!");
static_assert(offsetof(collision_component_WaitEndOverlap, __verse_0x2AC0E4D8_CallerCancelState) == 0x000010, "Member 'collision_component_WaitEndOverlap::__verse_0x2AC0E4D8_CallerCancelState' has a wrong offset!");
static_assert(offsetof(collision_component_WaitEndOverlap, __verse_0xB2CDDD72_Argument) == 0x000018, "Member 'collision_component_WaitEndOverlap::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(collision_component_WaitEndOverlap, RetVal) == 0x000020, "Member 'collision_component_WaitEndOverlap::RetVal' has a wrong offset!");

// Function VGameplayRst.collision_component.WaitHit
// 0x0028 (0x0028 - 0x0000)
struct collision_component_WaitHit final
{
public:
	class Utask*                                  __verse_0xC1E81372_CallingTask;                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         __verse_0xA3A00DDB_CallerResumeState;              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         __verse_0x2AC0E4D8_CallerCancelState;              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0018(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class Utask*                                  RetVal;                                            // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(collision_component_WaitHit) == 0x000008, "Wrong alignment on collision_component_WaitHit");
static_assert(sizeof(collision_component_WaitHit) == 0x000028, "Wrong size on collision_component_WaitHit");
static_assert(offsetof(collision_component_WaitHit, __verse_0xC1E81372_CallingTask) == 0x000000, "Member 'collision_component_WaitHit::__verse_0xC1E81372_CallingTask' has a wrong offset!");
static_assert(offsetof(collision_component_WaitHit, __verse_0xA3A00DDB_CallerResumeState) == 0x000008, "Member 'collision_component_WaitHit::__verse_0xA3A00DDB_CallerResumeState' has a wrong offset!");
static_assert(offsetof(collision_component_WaitHit, __verse_0x2AC0E4D8_CallerCancelState) == 0x000010, "Member 'collision_component_WaitHit::__verse_0x2AC0E4D8_CallerCancelState' has a wrong offset!");
static_assert(offsetof(collision_component_WaitHit, __verse_0xB2CDDD72_Argument) == 0x000018, "Member 'collision_component_WaitHit::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(collision_component_WaitHit, RetVal) == 0x000020, "Member 'collision_component_WaitHit::RetVal' has a wrong offset!");

// Function VGameplayRst.Context_collision_component$WaitEndOverlap.Update
// 0x0008 (0x0008 - 0x0000)
struct Context_collision_component_WaitEndOverlap_Update final
{
public:
	int64                                         RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Context_collision_component_WaitEndOverlap_Update) == 0x000008, "Wrong alignment on Context_collision_component_WaitEndOverlap_Update");
static_assert(sizeof(Context_collision_component_WaitEndOverlap_Update) == 0x000008, "Wrong size on Context_collision_component_WaitEndOverlap_Update");
static_assert(offsetof(Context_collision_component_WaitEndOverlap_Update, RetVal) == 0x000000, "Member 'Context_collision_component_WaitEndOverlap_Update::RetVal' has a wrong offset!");

// Function VGameplayRst.Physics.hit_result$Factory
// 0x0040 (0x0040 - 0x0000)
struct Physics_hit_result_Factory final
{
public:
	struct Fhit_result                            RetVal;                                            // 0x0000(0x0040)(Parm, OutParm, ReturnParm, NoDestructor)
};
static_assert(alignof(Physics_hit_result_Factory) == 0x000008, "Wrong alignment on Physics_hit_result_Factory");
static_assert(sizeof(Physics_hit_result_Factory) == 0x000040, "Wrong size on Physics_hit_result_Factory");
static_assert(offsetof(Physics_hit_result_Factory, RetVal) == 0x000000, "Member 'Physics_hit_result_Factory::RetVal' has a wrong offset!");

// Function VGameplayRst.Context_dynamic_activation_component$WaitForTransitionStart.Update
// 0x0008 (0x0008 - 0x0000)
struct Context_dynamic_activation_component_WaitForTransitionStart_Update final
{
public:
	int64                                         RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Context_dynamic_activation_component_WaitForTransitionStart_Update) == 0x000008, "Wrong alignment on Context_dynamic_activation_component_WaitForTransitionStart_Update");
static_assert(sizeof(Context_dynamic_activation_component_WaitForTransitionStart_Update) == 0x000008, "Wrong size on Context_dynamic_activation_component_WaitForTransitionStart_Update");
static_assert(offsetof(Context_dynamic_activation_component_WaitForTransitionStart_Update, RetVal) == 0x000000, "Member 'Context_dynamic_activation_component_WaitForTransitionStart_Update::RetVal' has a wrong offset!");

// Function VGameplayRst.particle_system_component._L_2fVerse_2eorg_2fVGameplayRst_2fVFX_2fparticle__system__component_N_RActivate
// 0x0001 (0x0001 - 0x0000)
struct particle_system_component__L_2fVerse_2eorg_2fVGameplayRst_2fVFX_2fparticle__system__component_N_RActivate final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
};
static_assert(alignof(particle_system_component__L_2fVerse_2eorg_2fVGameplayRst_2fVFX_2fparticle__system__component_N_RActivate) == 0x000001, "Wrong alignment on particle_system_component__L_2fVerse_2eorg_2fVGameplayRst_2fVFX_2fparticle__system__component_N_RActivate");
static_assert(sizeof(particle_system_component__L_2fVerse_2eorg_2fVGameplayRst_2fVFX_2fparticle__system__component_N_RActivate) == 0x000001, "Wrong size on particle_system_component__L_2fVerse_2eorg_2fVGameplayRst_2fVFX_2fparticle__system__component_N_RActivate");
static_assert(offsetof(particle_system_component__L_2fVerse_2eorg_2fVGameplayRst_2fVFX_2fparticle__system__component_N_RActivate, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'particle_system_component__L_2fVerse_2eorg_2fVGameplayRst_2fVFX_2fparticle__system__component_N_RActivate::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.particle_system_component._L_2fVerse_2eorg_2fVGameplayRst_2fVFX_2fparticle__system__component_N_RDeactivate
// 0x0001 (0x0001 - 0x0000)
struct particle_system_component__L_2fVerse_2eorg_2fVGameplayRst_2fVFX_2fparticle__system__component_N_RDeactivate final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
};
static_assert(alignof(particle_system_component__L_2fVerse_2eorg_2fVGameplayRst_2fVFX_2fparticle__system__component_N_RDeactivate) == 0x000001, "Wrong alignment on particle_system_component__L_2fVerse_2eorg_2fVGameplayRst_2fVFX_2fparticle__system__component_N_RDeactivate");
static_assert(sizeof(particle_system_component__L_2fVerse_2eorg_2fVGameplayRst_2fVFX_2fparticle__system__component_N_RDeactivate) == 0x000001, "Wrong size on particle_system_component__L_2fVerse_2eorg_2fVGameplayRst_2fVFX_2fparticle__system__component_N_RDeactivate");
static_assert(offsetof(particle_system_component__L_2fVerse_2eorg_2fVGameplayRst_2fVFX_2fparticle__system__component_N_RDeactivate, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'particle_system_component__L_2fVerse_2eorg_2fVGameplayRst_2fVFX_2fparticle__system__component_N_RDeactivate::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.particle_system_component._L_2fVerse_2eorg_2fVGameplayRst_2fVFX_2fparticle__system__component_N_RSetParticleSystem_L_Nparticle__system_R
// 0x0008 (0x0008 - 0x0000)
struct particle_system_component__L_2fVerse_2eorg_2fVGameplayRst_2fVFX_2fparticle__system__component_N_RSetParticleSystem_L_Nparticle__system_R final
{
public:
	class Uparticle_system*                       __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(particle_system_component__L_2fVerse_2eorg_2fVGameplayRst_2fVFX_2fparticle__system__component_N_RSetParticleSystem_L_Nparticle__system_R) == 0x000008, "Wrong alignment on particle_system_component__L_2fVerse_2eorg_2fVGameplayRst_2fVFX_2fparticle__system__component_N_RSetParticleSystem_L_Nparticle__system_R");
static_assert(sizeof(particle_system_component__L_2fVerse_2eorg_2fVGameplayRst_2fVFX_2fparticle__system__component_N_RSetParticleSystem_L_Nparticle__system_R) == 0x000008, "Wrong size on particle_system_component__L_2fVerse_2eorg_2fVGameplayRst_2fVFX_2fparticle__system__component_N_RSetParticleSystem_L_Nparticle__system_R");
static_assert(offsetof(particle_system_component__L_2fVerse_2eorg_2fVGameplayRst_2fVFX_2fparticle__system__component_N_RSetParticleSystem_L_Nparticle__system_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'particle_system_component__L_2fVerse_2eorg_2fVGameplayRst_2fVFX_2fparticle__system__component_N_RSetParticleSystem_L_Nparticle__system_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.Context_physics_trace$WaitPhysicsTrace.Update
// 0x0008 (0x0008 - 0x0000)
struct Context_physics_trace_WaitPhysicsTrace_Update final
{
public:
	int64                                         RetVal;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Context_physics_trace_WaitPhysicsTrace_Update) == 0x000008, "Wrong alignment on Context_physics_trace_WaitPhysicsTrace_Update");
static_assert(sizeof(Context_physics_trace_WaitPhysicsTrace_Update) == 0x000008, "Wrong size on Context_physics_trace_WaitPhysicsTrace_Update");
static_assert(offsetof(Context_physics_trace_WaitPhysicsTrace_Update, RetVal) == 0x000000, "Member 'Context_physics_trace_WaitPhysicsTrace_Update::RetVal' has a wrong offset!");

// Function VGameplayRst.script_component.$InitCDO
// 0x0001 (0x0001 - 0x0000)
struct script_component__InitCDO final
{
public:
	uint8                                         _TEMP_0 : 1;                                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash))
};
static_assert(alignof(script_component__InitCDO) == 0x000001, "Wrong alignment on script_component__InitCDO");
static_assert(sizeof(script_component__InitCDO) == 0x000001, "Wrong size on script_component__InitCDO");

// Function VGameplayRst.script_component._L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RAddToCreateComponentList_L_N_Ksubtype_Lcomponent_R_R
// 0x0010 (0x0010 - 0x0000)
struct script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RAddToCreateComponentList_L_N_Ksubtype_Lcomponent_R_R final
{
public:
	TArray<class UClass*>                         __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0010)(Parm)
};
static_assert(alignof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RAddToCreateComponentList_L_N_Ksubtype_Lcomponent_R_R) == 0x000008, "Wrong alignment on script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RAddToCreateComponentList_L_N_Ksubtype_Lcomponent_R_R");
static_assert(sizeof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RAddToCreateComponentList_L_N_Ksubtype_Lcomponent_R_R) == 0x000010, "Wrong size on script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RAddToCreateComponentList_L_N_Ksubtype_Lcomponent_R_R");
static_assert(offsetof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RAddToCreateComponentList_L_N_Ksubtype_Lcomponent_R_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RAddToCreateComponentList_L_N_Ksubtype_Lcomponent_R_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.script_component._L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RAddToRequiredComponentList_L_N_Ksubtype_Lcomponent_R_R
// 0x0010 (0x0010 - 0x0000)
struct script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RAddToRequiredComponentList_L_N_Ksubtype_Lcomponent_R_R final
{
public:
	TArray<class UClass*>                         __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0010)(Parm)
};
static_assert(alignof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RAddToRequiredComponentList_L_N_Ksubtype_Lcomponent_R_R) == 0x000008, "Wrong alignment on script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RAddToRequiredComponentList_L_N_Ksubtype_Lcomponent_R_R");
static_assert(sizeof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RAddToRequiredComponentList_L_N_Ksubtype_Lcomponent_R_R) == 0x000010, "Wrong size on script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RAddToRequiredComponentList_L_N_Ksubtype_Lcomponent_R_R");
static_assert(offsetof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RAddToRequiredComponentList_L_N_Ksubtype_Lcomponent_R_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RAddToRequiredComponentList_L_N_Ksubtype_Lcomponent_R_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.script_component._L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetAllComponentsOfType_L_Ntype_R
// 0x0018 (0x0018 - 0x0000)
struct script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetAllComponentsOfType_L_Ntype_R final
{
public:
	class UClass*                                 __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UEntityComponent*>               RetVal;                                            // 0x0008(0x0010)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetAllComponentsOfType_L_Ntype_R) == 0x000008, "Wrong alignment on script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetAllComponentsOfType_L_Ntype_R");
static_assert(sizeof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetAllComponentsOfType_L_Ntype_R) == 0x000018, "Wrong size on script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetAllComponentsOfType_L_Ntype_R");
static_assert(offsetof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetAllComponentsOfType_L_Ntype_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetAllComponentsOfType_L_Ntype_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetAllComponentsOfType_L_Ntype_R, RetVal) == 0x000008, "Member 'script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetAllComponentsOfType_L_Ntype_R::RetVal' has a wrong offset!");

// Function VGameplayRst.script_component._L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetComponentOfType_L_Ntype_R
// 0x0010 (0x0010 - 0x0000)
struct script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetComponentOfType_L_Ntype_R final
{
public:
	class UClass*                                 __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FOptionProperty_                              RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetComponentOfType_L_Ntype_R) == 0x000008, "Wrong alignment on script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetComponentOfType_L_Ntype_R");
static_assert(sizeof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetComponentOfType_L_Ntype_R) == 0x000010, "Wrong size on script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetComponentOfType_L_Ntype_R");
static_assert(offsetof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetComponentOfType_L_Ntype_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetComponentOfType_L_Ntype_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetComponentOfType_L_Ntype_R, RetVal) == 0x000008, "Member 'script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetComponentOfType_L_Ntype_R::RetVal' has a wrong offset!");

// Function VGameplayRst.script_component._L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetFullname
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetFullname final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FVerseStringProperty_                         RetVal;                                            // 0x0008(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetFullname) == 0x000008, "Wrong alignment on script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetFullname");
static_assert(sizeof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetFullname) == 0x000018, "Wrong size on script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetFullname");
static_assert(offsetof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetFullname, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetFullname::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetFullname, RetVal) == 0x000008, "Member 'script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetFullname::RetVal' has a wrong offset!");

// Function VGameplayRst.script_component._L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetName
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetName final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FVerseStringProperty_                         RetVal;                                            // 0x0008(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetName) == 0x000008, "Wrong alignment on script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetName");
static_assert(sizeof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetName) == 0x000018, "Wrong size on script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetName");
static_assert(offsetof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetName, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetName::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetName, RetVal) == 0x000008, "Member 'script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RGetName::RetVal' has a wrong offset!");

// Function VGameplayRst.script_component._L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RIsEnabled
// 0x0002 (0x0002 - 0x0000)
struct script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RIsEnabled final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         RetVal : 1;                                        // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
static_assert(alignof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RIsEnabled) == 0x000001, "Wrong alignment on script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RIsEnabled");
static_assert(sizeof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RIsEnabled) == 0x000002, "Wrong size on script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RIsEnabled");
static_assert(offsetof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RIsEnabled, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RIsEnabled::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.script_component._L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnCreate
// 0x0001 (0x0001 - 0x0000)
struct script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnCreate final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
};
static_assert(alignof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnCreate) == 0x000001, "Wrong alignment on script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnCreate");
static_assert(sizeof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnCreate) == 0x000001, "Wrong size on script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnCreate");
static_assert(offsetof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnCreate, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnCreate::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.script_component._L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnEnabledChanged_L_Nlogic_R
// 0x0001 (0x0001 - 0x0000)
struct script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnEnabledChanged_L_Nlogic_R final
{
public:
	uint8                                         __verse_0xB2CDDD72_Argument : 1;                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
static_assert(alignof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnEnabledChanged_L_Nlogic_R) == 0x000001, "Wrong alignment on script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnEnabledChanged_L_Nlogic_R");
static_assert(sizeof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnEnabledChanged_L_Nlogic_R) == 0x000001, "Wrong size on script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnEnabledChanged_L_Nlogic_R");

// Function VGameplayRst.script_component._L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnEnd
// 0x0001 (0x0001 - 0x0000)
struct script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnEnd final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
};
static_assert(alignof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnEnd) == 0x000001, "Wrong alignment on script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnEnd");
static_assert(sizeof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnEnd) == 0x000001, "Wrong size on script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnEnd");
static_assert(offsetof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnEnd, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnEnd::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.script_component._L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnPostCreate
// 0x0001 (0x0001 - 0x0000)
struct script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnPostCreate final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
};
static_assert(alignof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnPostCreate) == 0x000001, "Wrong alignment on script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnPostCreate");
static_assert(sizeof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnPostCreate) == 0x000001, "Wrong size on script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnPostCreate");
static_assert(offsetof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnPostCreate, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnPostCreate::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.script_component._L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnStart
// 0x0001 (0x0001 - 0x0000)
struct script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnStart final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
};
static_assert(alignof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnStart) == 0x000001, "Wrong alignment on script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnStart");
static_assert(sizeof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnStart) == 0x000001, "Wrong size on script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnStart");
static_assert(offsetof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnStart, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnStart::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.script_component._L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnTick_L_Nfloat_R
// 0x0008 (0x0008 - 0x0000)
struct script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnTick_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnTick_L_Nfloat_R) == 0x000008, "Wrong alignment on script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnTick_L_Nfloat_R");
static_assert(sizeof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnTick_L_Nfloat_R) == 0x000008, "Wrong size on script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnTick_L_Nfloat_R");
static_assert(offsetof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnTick_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_ROnTick_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.script_component._L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RSetEnabled_L_Nlogic_R
// 0x0001 (0x0001 - 0x0000)
struct script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RSetEnabled_L_Nlogic_R final
{
public:
	uint8                                         __verse_0xB2CDDD72_Argument : 1;                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
static_assert(alignof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RSetEnabled_L_Nlogic_R) == 0x000001, "Wrong alignment on script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RSetEnabled_L_Nlogic_R");
static_assert(sizeof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RSetEnabled_L_Nlogic_R) == 0x000001, "Wrong size on script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RSetEnabled_L_Nlogic_R");

// Function VGameplayRst.script_component._L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RSetTickEnabled_L_Nlogic_R
// 0x0001 (0x0001 - 0x0000)
struct script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RSetTickEnabled_L_Nlogic_R final
{
public:
	uint8                                         __verse_0xB2CDDD72_Argument : 1;                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
static_assert(alignof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RSetTickEnabled_L_Nlogic_R) == 0x000001, "Wrong alignment on script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RSetTickEnabled_L_Nlogic_R");
static_assert(sizeof(script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RSetTickEnabled_L_Nlogic_R) == 0x000001, "Wrong size on script_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fscript__component_N_RSetTickEnabled_L_Nlogic_R");

// Function VGameplayRst.skeletal_mesh_component._L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RGetAnimationPlayRate__FIXME
// 0x0010 (0x0010 - 0x0000)
struct skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RGetAnimationPlayRate__FIXME final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RGetAnimationPlayRate__FIXME) == 0x000008, "Wrong alignment on skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RGetAnimationPlayRate__FIXME");
static_assert(sizeof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RGetAnimationPlayRate__FIXME) == 0x000010, "Wrong size on skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RGetAnimationPlayRate__FIXME");
static_assert(offsetof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RGetAnimationPlayRate__FIXME, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RGetAnimationPlayRate__FIXME::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RGetAnimationPlayRate__FIXME, RetVal) == 0x000008, "Member 'skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RGetAnimationPlayRate__FIXME::RetVal' has a wrong offset!");

// Function VGameplayRst.skeletal_mesh_component._L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RGetAnimationPosition__FIXME
// 0x0010 (0x0010 - 0x0000)
struct skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RGetAnimationPosition__FIXME final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RGetAnimationPosition__FIXME) == 0x000008, "Wrong alignment on skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RGetAnimationPosition__FIXME");
static_assert(sizeof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RGetAnimationPosition__FIXME) == 0x000010, "Wrong size on skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RGetAnimationPosition__FIXME");
static_assert(offsetof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RGetAnimationPosition__FIXME, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RGetAnimationPosition__FIXME::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RGetAnimationPosition__FIXME, RetVal) == 0x000008, "Member 'skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RGetAnimationPosition__FIXME::RetVal' has a wrong offset!");

// Function VGameplayRst.skeletal_mesh_component._L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RIsPlayingAnimation
// 0x0002 (0x0002 - 0x0000)
struct skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RIsPlayingAnimation final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         RetVal : 1;                                        // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
static_assert(alignof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RIsPlayingAnimation) == 0x000001, "Wrong alignment on skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RIsPlayingAnimation");
static_assert(sizeof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RIsPlayingAnimation) == 0x000002, "Wrong size on skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RIsPlayingAnimation");
static_assert(offsetof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RIsPlayingAnimation, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RIsPlayingAnimation::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.skeletal_mesh_component._L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RPlayAnimation_L_Nlogic_R
// 0x0001 (0x0001 - 0x0000)
struct skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RPlayAnimation_L_Nlogic_R final
{
public:
	uint8                                         __verse_0xB2CDDD72_Argument : 1;                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
static_assert(alignof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RPlayAnimation_L_Nlogic_R) == 0x000001, "Wrong alignment on skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RPlayAnimation_L_Nlogic_R");
static_assert(sizeof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RPlayAnimation_L_Nlogic_R) == 0x000001, "Wrong size on skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RPlayAnimation_L_Nlogic_R");

// Function VGameplayRst.skeletal_mesh_component._L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimation_L_Nanimation_R
// 0x0008 (0x0008 - 0x0000)
struct skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimation_L_Nanimation_R final
{
public:
	class UAnimation*                             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimation_L_Nanimation_R) == 0x000008, "Wrong alignment on skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimation_L_Nanimation_R");
static_assert(sizeof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimation_L_Nanimation_R) == 0x000008, "Wrong size on skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimation_L_Nanimation_R");
static_assert(offsetof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimation_L_Nanimation_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimation_L_Nanimation_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.skeletal_mesh_component._L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationBlueprint_L_Nanimation__blueprint_R
// 0x0008 (0x0008 - 0x0000)
struct skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationBlueprint_L_Nanimation__blueprint_R final
{
public:
	class Uanimation_blueprint*                   __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationBlueprint_L_Nanimation__blueprint_R) == 0x000008, "Wrong alignment on skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationBlueprint_L_Nanimation__blueprint_R");
static_assert(sizeof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationBlueprint_L_Nanimation__blueprint_R) == 0x000008, "Wrong size on skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationBlueprint_L_Nanimation__blueprint_R");
static_assert(offsetof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationBlueprint_L_Nanimation__blueprint_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationBlueprint_L_Nanimation__blueprint_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.skeletal_mesh_component._L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationInstance_L_Nanimation__instance_R
// 0x0008 (0x0008 - 0x0000)
struct skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationInstance_L_Nanimation__instance_R final
{
public:
	class Uanimation_instance*                    __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationInstance_L_Nanimation__instance_R) == 0x000008, "Wrong alignment on skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationInstance_L_Nanimation__instance_R");
static_assert(sizeof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationInstance_L_Nanimation__instance_R) == 0x000008, "Wrong size on skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationInstance_L_Nanimation__instance_R");
static_assert(offsetof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationInstance_L_Nanimation__instance_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationInstance_L_Nanimation__instance_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.skeletal_mesh_component._L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationMode_L_Ndefault__animation__mode__type_R
// 0x0001 (0x0001 - 0x0000)
struct skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationMode_L_Ndefault__animation__mode__type_R final
{
public:
	Edefault_animation_mode_type                  __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationMode_L_Ndefault__animation__mode__type_R) == 0x000001, "Wrong alignment on skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationMode_L_Ndefault__animation__mode__type_R");
static_assert(sizeof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationMode_L_Ndefault__animation__mode__type_R) == 0x000001, "Wrong size on skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationMode_L_Ndefault__animation__mode__type_R");
static_assert(offsetof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationMode_L_Ndefault__animation__mode__type_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationMode_L_Ndefault__animation__mode__type_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.skeletal_mesh_component._L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationPlayRate__FIXME_L_Nfloat_R
// 0x0008 (0x0008 - 0x0000)
struct skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationPlayRate__FIXME_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationPlayRate__FIXME_L_Nfloat_R) == 0x000008, "Wrong alignment on skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationPlayRate__FIXME_L_Nfloat_R");
static_assert(sizeof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationPlayRate__FIXME_L_Nfloat_R) == 0x000008, "Wrong size on skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationPlayRate__FIXME_L_Nfloat_R");
static_assert(offsetof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationPlayRate__FIXME_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationPlayRate__FIXME_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.skeletal_mesh_component._L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationPosition__FIXME_L_Nfloat_M_Nlogic_R
// 0x0010 (0x0010 - 0x0000)
struct skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationPosition__FIXME_L_Nfloat_M_Nlogic_R final
{
public:
	struct Ftuple_Lfloat_Mlogic_R                 __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0010)(Parm, HasGetValueTypeHash)
};
static_assert(alignof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationPosition__FIXME_L_Nfloat_M_Nlogic_R) == 0x000008, "Wrong alignment on skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationPosition__FIXME_L_Nfloat_M_Nlogic_R");
static_assert(sizeof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationPosition__FIXME_L_Nfloat_M_Nlogic_R) == 0x000010, "Wrong size on skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationPosition__FIXME_L_Nfloat_M_Nlogic_R");
static_assert(offsetof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationPosition__FIXME_L_Nfloat_M_Nlogic_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetAnimationPosition__FIXME_L_Nfloat_M_Nlogic_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.skeletal_mesh_component._L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetMaterial_L_Nmaterial__v_R
// 0x0008 (0x0008 - 0x0000)
struct skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetMaterial_L_Nmaterial__v_R final
{
public:
	class Umaterial_v*                            __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetMaterial_L_Nmaterial__v_R) == 0x000008, "Wrong alignment on skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetMaterial_L_Nmaterial__v_R");
static_assert(sizeof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetMaterial_L_Nmaterial__v_R) == 0x000008, "Wrong size on skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetMaterial_L_Nmaterial__v_R");
static_assert(offsetof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetMaterial_L_Nmaterial__v_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetMaterial_L_Nmaterial__v_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.skeletal_mesh_component._L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetSkeletalMesh_L_Nskeletal__mesh_R
// 0x0008 (0x0008 - 0x0000)
struct skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetSkeletalMesh_L_Nskeletal__mesh_R final
{
public:
	class Uskeletal_mesh*                         __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetSkeletalMesh_L_Nskeletal__mesh_R) == 0x000008, "Wrong alignment on skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetSkeletalMesh_L_Nskeletal__mesh_R");
static_assert(sizeof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetSkeletalMesh_L_Nskeletal__mesh_R) == 0x000008, "Wrong size on skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetSkeletalMesh_L_Nskeletal__mesh_R");
static_assert(offsetof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetSkeletalMesh_L_Nskeletal__mesh_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RSetSkeletalMesh_L_Nskeletal__mesh_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.skeletal_mesh_component._L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RStopAnimation
// 0x0001 (0x0001 - 0x0000)
struct skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RStopAnimation final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
};
static_assert(alignof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RStopAnimation) == 0x000001, "Wrong alignment on skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RStopAnimation");
static_assert(sizeof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RStopAnimation) == 0x000001, "Wrong size on skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RStopAnimation");
static_assert(offsetof(skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RStopAnimation, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'skeletal_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2fskeletal__mesh__component_N_RStopAnimation::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.DatastoreComponent._L_2fVerse_2eorg_2fVGameplayRst_2fDatastore_2fDatastoreComponent_N_RClearAllDatastoreValues_L_Nplayer__component_R
// 0x0008 (0x0008 - 0x0000)
struct DatastoreComponent__L_2fVerse_2eorg_2fVGameplayRst_2fDatastore_2fDatastoreComponent_N_RClearAllDatastoreValues_L_Nplayer__component_R final
{
public:
	class Uplayer_component*                      __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DatastoreComponent__L_2fVerse_2eorg_2fVGameplayRst_2fDatastore_2fDatastoreComponent_N_RClearAllDatastoreValues_L_Nplayer__component_R) == 0x000008, "Wrong alignment on DatastoreComponent__L_2fVerse_2eorg_2fVGameplayRst_2fDatastore_2fDatastoreComponent_N_RClearAllDatastoreValues_L_Nplayer__component_R");
static_assert(sizeof(DatastoreComponent__L_2fVerse_2eorg_2fVGameplayRst_2fDatastore_2fDatastoreComponent_N_RClearAllDatastoreValues_L_Nplayer__component_R) == 0x000008, "Wrong size on DatastoreComponent__L_2fVerse_2eorg_2fVGameplayRst_2fDatastore_2fDatastoreComponent_N_RClearAllDatastoreValues_L_Nplayer__component_R");
static_assert(offsetof(DatastoreComponent__L_2fVerse_2eorg_2fVGameplayRst_2fDatastore_2fDatastoreComponent_N_RClearAllDatastoreValues_L_Nplayer__component_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'DatastoreComponent__L_2fVerse_2eorg_2fVGameplayRst_2fDatastore_2fDatastoreComponent_N_RClearAllDatastoreValues_L_Nplayer__component_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.DatastoreComponent._L_2fVerse_2eorg_2fVGameplayRst_2fDatastore_2fDatastoreComponent_N_RSetDatastoreValue_L_Nplayer__component_M_N_Kchar_M_N_Kchar_R
// 0x0028 (0x0028 - 0x0000)
struct DatastoreComponent__L_2fVerse_2eorg_2fVGameplayRst_2fDatastore_2fDatastoreComponent_N_RSetDatastoreValue_L_Nplayer__component_M_N_Kchar_M_N_Kchar_R final
{
public:
	struct VGameplayRst_0::Ftuple_Lplayer__component_M_Kchar_M_Kchar_R __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0028)(Parm, HasGetValueTypeHash)
};
static_assert(alignof(DatastoreComponent__L_2fVerse_2eorg_2fVGameplayRst_2fDatastore_2fDatastoreComponent_N_RSetDatastoreValue_L_Nplayer__component_M_N_Kchar_M_N_Kchar_R) == 0x000008, "Wrong alignment on DatastoreComponent__L_2fVerse_2eorg_2fVGameplayRst_2fDatastore_2fDatastoreComponent_N_RSetDatastoreValue_L_Nplayer__component_M_N_Kchar_M_N_Kchar_R");
static_assert(sizeof(DatastoreComponent__L_2fVerse_2eorg_2fVGameplayRst_2fDatastore_2fDatastoreComponent_N_RSetDatastoreValue_L_Nplayer__component_M_N_Kchar_M_N_Kchar_R) == 0x000028, "Wrong size on DatastoreComponent__L_2fVerse_2eorg_2fVGameplayRst_2fDatastore_2fDatastoreComponent_N_RSetDatastoreValue_L_Nplayer__component_M_N_Kchar_M_N_Kchar_R");
static_assert(offsetof(DatastoreComponent__L_2fVerse_2eorg_2fVGameplayRst_2fDatastore_2fDatastoreComponent_N_RSetDatastoreValue_L_Nplayer__component_M_N_Kchar_M_N_Kchar_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'DatastoreComponent__L_2fVerse_2eorg_2fVGameplayRst_2fDatastore_2fDatastoreComponent_N_RSetDatastoreValue_L_Nplayer__component_M_N_Kchar_M_N_Kchar_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.DatastoreComponent._L_2fVerse_2eorg_2fVGameplayRst_2fDatastore_2fDatastoreComponent_N_RSetDatastoreValueInt_L_Nplayer__component_M_N_Kchar_M_Nint_R
// 0x0020 (0x0020 - 0x0000)
struct DatastoreComponent__L_2fVerse_2eorg_2fVGameplayRst_2fDatastore_2fDatastoreComponent_N_RSetDatastoreValueInt_L_Nplayer__component_M_N_Kchar_M_Nint_R final
{
public:
	struct Ftuple_Lplayer__component_M_Kchar_Mint_R __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, HasGetValueTypeHash)
};
static_assert(alignof(DatastoreComponent__L_2fVerse_2eorg_2fVGameplayRst_2fDatastore_2fDatastoreComponent_N_RSetDatastoreValueInt_L_Nplayer__component_M_N_Kchar_M_Nint_R) == 0x000008, "Wrong alignment on DatastoreComponent__L_2fVerse_2eorg_2fVGameplayRst_2fDatastore_2fDatastoreComponent_N_RSetDatastoreValueInt_L_Nplayer__component_M_N_Kchar_M_Nint_R");
static_assert(sizeof(DatastoreComponent__L_2fVerse_2eorg_2fVGameplayRst_2fDatastore_2fDatastoreComponent_N_RSetDatastoreValueInt_L_Nplayer__component_M_N_Kchar_M_Nint_R) == 0x000020, "Wrong size on DatastoreComponent__L_2fVerse_2eorg_2fVGameplayRst_2fDatastore_2fDatastoreComponent_N_RSetDatastoreValueInt_L_Nplayer__component_M_N_Kchar_M_Nint_R");
static_assert(offsetof(DatastoreComponent__L_2fVerse_2eorg_2fVGameplayRst_2fDatastore_2fDatastoreComponent_N_RSetDatastoreValueInt_L_Nplayer__component_M_N_Kchar_M_Nint_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'DatastoreComponent__L_2fVerse_2eorg_2fVGameplayRst_2fDatastore_2fDatastoreComponent_N_RSetDatastoreValueInt_L_Nplayer__component_M_N_Kchar_M_Nint_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.debug_command_component.__WaitForCommand_L_N_Kchar_R
// 0x0030 (0x0030 - 0x0000)
struct debug_command_component___WaitForCommand_L_N_Kchar_R final
{
public:
	class Utask*                                  __verse_0xC1E81372_CallingTask;                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         __verse_0xA3A00DDB_CallerResumeState;              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         __verse_0x2AC0E4D8_CallerCancelState;              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FVerseStringProperty_                         __verse_0xB2CDDD72_Argument;                       // 0x0018(0x0010)(Parm, HasGetValueTypeHash)
	class Utask*                                  RetVal;                                            // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(debug_command_component___WaitForCommand_L_N_Kchar_R) == 0x000008, "Wrong alignment on debug_command_component___WaitForCommand_L_N_Kchar_R");
static_assert(sizeof(debug_command_component___WaitForCommand_L_N_Kchar_R) == 0x000030, "Wrong size on debug_command_component___WaitForCommand_L_N_Kchar_R");
static_assert(offsetof(debug_command_component___WaitForCommand_L_N_Kchar_R, __verse_0xC1E81372_CallingTask) == 0x000000, "Member 'debug_command_component___WaitForCommand_L_N_Kchar_R::__verse_0xC1E81372_CallingTask' has a wrong offset!");
static_assert(offsetof(debug_command_component___WaitForCommand_L_N_Kchar_R, __verse_0xA3A00DDB_CallerResumeState) == 0x000008, "Member 'debug_command_component___WaitForCommand_L_N_Kchar_R::__verse_0xA3A00DDB_CallerResumeState' has a wrong offset!");
static_assert(offsetof(debug_command_component___WaitForCommand_L_N_Kchar_R, __verse_0x2AC0E4D8_CallerCancelState) == 0x000010, "Member 'debug_command_component___WaitForCommand_L_N_Kchar_R::__verse_0x2AC0E4D8_CallerCancelState' has a wrong offset!");
static_assert(offsetof(debug_command_component___WaitForCommand_L_N_Kchar_R, __verse_0xB2CDDD72_Argument) == 0x000018, "Member 'debug_command_component___WaitForCommand_L_N_Kchar_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(debug_command_component___WaitForCommand_L_N_Kchar_R, RetVal) == 0x000028, "Member 'debug_command_component___WaitForCommand_L_N_Kchar_R::RetVal' has a wrong offset!");

// Function VGameplayRst.dynamic_activation_component._L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fdynamic__activation__component_N_RLinkComponent_L_Ncomponent_R
// 0x0008 (0x0008 - 0x0000)
struct dynamic_activation_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fdynamic__activation__component_N_RLinkComponent_L_Ncomponent_R final
{
public:
	class UEntityComponent*                       __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(dynamic_activation_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fdynamic__activation__component_N_RLinkComponent_L_Ncomponent_R) == 0x000008, "Wrong alignment on dynamic_activation_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fdynamic__activation__component_N_RLinkComponent_L_Ncomponent_R");
static_assert(sizeof(dynamic_activation_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fdynamic__activation__component_N_RLinkComponent_L_Ncomponent_R) == 0x000008, "Wrong size on dynamic_activation_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fdynamic__activation__component_N_RLinkComponent_L_Ncomponent_R");
static_assert(offsetof(dynamic_activation_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fdynamic__activation__component_N_RLinkComponent_L_Ncomponent_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'dynamic_activation_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fdynamic__activation__component_N_RLinkComponent_L_Ncomponent_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.dynamic_activation_component._L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fdynamic__activation__component_N_RReset
// 0x0001 (0x0001 - 0x0000)
struct dynamic_activation_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fdynamic__activation__component_N_RReset final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
};
static_assert(alignof(dynamic_activation_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fdynamic__activation__component_N_RReset) == 0x000001, "Wrong alignment on dynamic_activation_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fdynamic__activation__component_N_RReset");
static_assert(sizeof(dynamic_activation_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fdynamic__activation__component_N_RReset) == 0x000001, "Wrong size on dynamic_activation_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fdynamic__activation__component_N_RReset");
static_assert(offsetof(dynamic_activation_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fdynamic__activation__component_N_RReset, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'dynamic_activation_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fdynamic__activation__component_N_RReset::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.dynamic_activation_component._L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fdynamic__activation__component_N_RStartTransition_L_Nfloat_M_Nactivation__state_R
// 0x0010 (0x0010 - 0x0000)
struct dynamic_activation_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fdynamic__activation__component_N_RStartTransition_L_Nfloat_M_Nactivation__state_R final
{
public:
	struct Ftuple_Lfloat_Mactivation__state_R     __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0010)(Parm, HasGetValueTypeHash)
};
static_assert(alignof(dynamic_activation_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fdynamic__activation__component_N_RStartTransition_L_Nfloat_M_Nactivation__state_R) == 0x000008, "Wrong alignment on dynamic_activation_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fdynamic__activation__component_N_RStartTransition_L_Nfloat_M_Nactivation__state_R");
static_assert(sizeof(dynamic_activation_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fdynamic__activation__component_N_RStartTransition_L_Nfloat_M_Nactivation__state_R) == 0x000010, "Wrong size on dynamic_activation_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fdynamic__activation__component_N_RStartTransition_L_Nfloat_M_Nactivation__state_R");
static_assert(offsetof(dynamic_activation_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fdynamic__activation__component_N_RStartTransition_L_Nfloat_M_Nactivation__state_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'dynamic_activation_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fdynamic__activation__component_N_RStartTransition_L_Nfloat_M_Nactivation__state_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.dynamic_activation_component._L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fdynamic__activation__component_N_RUnlinkComponent_L_Ncomponent_R
// 0x0008 (0x0008 - 0x0000)
struct dynamic_activation_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fdynamic__activation__component_N_RUnlinkComponent_L_Ncomponent_R final
{
public:
	class UEntityComponent*                       __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(dynamic_activation_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fdynamic__activation__component_N_RUnlinkComponent_L_Ncomponent_R) == 0x000008, "Wrong alignment on dynamic_activation_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fdynamic__activation__component_N_RUnlinkComponent_L_Ncomponent_R");
static_assert(sizeof(dynamic_activation_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fdynamic__activation__component_N_RUnlinkComponent_L_Ncomponent_R) == 0x000008, "Wrong size on dynamic_activation_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fdynamic__activation__component_N_RUnlinkComponent_L_Ncomponent_R");
static_assert(offsetof(dynamic_activation_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fdynamic__activation__component_N_RUnlinkComponent_L_Ncomponent_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'dynamic_activation_component__L_2fVerse_2eorg_2fVGameplayRst_2fComponents_2fdynamic__activation__component_N_RUnlinkComponent_L_Ncomponent_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.dynamic_activation_component.WaitForTransitionComplete
// 0x0028 (0x0028 - 0x0000)
struct dynamic_activation_component_WaitForTransitionComplete final
{
public:
	class Utask*                                  __verse_0xC1E81372_CallingTask;                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         __verse_0xA3A00DDB_CallerResumeState;              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         __verse_0x2AC0E4D8_CallerCancelState;              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0018(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class Utask*                                  RetVal;                                            // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(dynamic_activation_component_WaitForTransitionComplete) == 0x000008, "Wrong alignment on dynamic_activation_component_WaitForTransitionComplete");
static_assert(sizeof(dynamic_activation_component_WaitForTransitionComplete) == 0x000028, "Wrong size on dynamic_activation_component_WaitForTransitionComplete");
static_assert(offsetof(dynamic_activation_component_WaitForTransitionComplete, __verse_0xC1E81372_CallingTask) == 0x000000, "Member 'dynamic_activation_component_WaitForTransitionComplete::__verse_0xC1E81372_CallingTask' has a wrong offset!");
static_assert(offsetof(dynamic_activation_component_WaitForTransitionComplete, __verse_0xA3A00DDB_CallerResumeState) == 0x000008, "Member 'dynamic_activation_component_WaitForTransitionComplete::__verse_0xA3A00DDB_CallerResumeState' has a wrong offset!");
static_assert(offsetof(dynamic_activation_component_WaitForTransitionComplete, __verse_0x2AC0E4D8_CallerCancelState) == 0x000010, "Member 'dynamic_activation_component_WaitForTransitionComplete::__verse_0x2AC0E4D8_CallerCancelState' has a wrong offset!");
static_assert(offsetof(dynamic_activation_component_WaitForTransitionComplete, __verse_0xB2CDDD72_Argument) == 0x000018, "Member 'dynamic_activation_component_WaitForTransitionComplete::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(dynamic_activation_component_WaitForTransitionComplete, RetVal) == 0x000020, "Member 'dynamic_activation_component_WaitForTransitionComplete::RetVal' has a wrong offset!");

// Function VGameplayRst.dynamic_activation_component.WaitForTransitionStart
// 0x0028 (0x0028 - 0x0000)
struct dynamic_activation_component_WaitForTransitionStart final
{
public:
	class Utask*                                  __verse_0xC1E81372_CallingTask;                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         __verse_0xA3A00DDB_CallerResumeState;              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         __verse_0x2AC0E4D8_CallerCancelState;              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0018(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class Utask*                                  RetVal;                                            // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(dynamic_activation_component_WaitForTransitionStart) == 0x000008, "Wrong alignment on dynamic_activation_component_WaitForTransitionStart");
static_assert(sizeof(dynamic_activation_component_WaitForTransitionStart) == 0x000028, "Wrong size on dynamic_activation_component_WaitForTransitionStart");
static_assert(offsetof(dynamic_activation_component_WaitForTransitionStart, __verse_0xC1E81372_CallingTask) == 0x000000, "Member 'dynamic_activation_component_WaitForTransitionStart::__verse_0xC1E81372_CallingTask' has a wrong offset!");
static_assert(offsetof(dynamic_activation_component_WaitForTransitionStart, __verse_0xA3A00DDB_CallerResumeState) == 0x000008, "Member 'dynamic_activation_component_WaitForTransitionStart::__verse_0xA3A00DDB_CallerResumeState' has a wrong offset!");
static_assert(offsetof(dynamic_activation_component_WaitForTransitionStart, __verse_0x2AC0E4D8_CallerCancelState) == 0x000010, "Member 'dynamic_activation_component_WaitForTransitionStart::__verse_0x2AC0E4D8_CallerCancelState' has a wrong offset!");
static_assert(offsetof(dynamic_activation_component_WaitForTransitionStart, __verse_0xB2CDDD72_Argument) == 0x000018, "Member 'dynamic_activation_component_WaitForTransitionStart::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(dynamic_activation_component_WaitForTransitionStart, RetVal) == 0x000020, "Member 'dynamic_activation_component_WaitForTransitionStart::RetVal' has a wrong offset!");

// Function VGameplayRst.EntityUtil._L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RCreateAndAddComponent_L_Nint_M_Nsubtype_Lcomponent_R_R
// 0x0018 (0x0018 - 0x0000)
struct EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RCreateAndAddComponent_L_Nint_M_Nsubtype_Lcomponent_R_R final
{
public:
	struct Ftuple_Lint_Msubtype_Lcomponent_R_R    __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0010)(Parm, HasGetValueTypeHash)
	class UEntityComponent*                       RetVal;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RCreateAndAddComponent_L_Nint_M_Nsubtype_Lcomponent_R_R) == 0x000008, "Wrong alignment on EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RCreateAndAddComponent_L_Nint_M_Nsubtype_Lcomponent_R_R");
static_assert(sizeof(EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RCreateAndAddComponent_L_Nint_M_Nsubtype_Lcomponent_R_R) == 0x000018, "Wrong size on EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RCreateAndAddComponent_L_Nint_M_Nsubtype_Lcomponent_R_R");
static_assert(offsetof(EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RCreateAndAddComponent_L_Nint_M_Nsubtype_Lcomponent_R_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RCreateAndAddComponent_L_Nint_M_Nsubtype_Lcomponent_R_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RCreateAndAddComponent_L_Nint_M_Nsubtype_Lcomponent_R_R, RetVal) == 0x000010, "Member 'EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RCreateAndAddComponent_L_Nint_M_Nsubtype_Lcomponent_R_R::RetVal' has a wrong offset!");

// Function VGameplayRst.EntityUtil._L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RGetComponentOfTypeFromComponent_L_Ncomponent_M_Ntype_R
// 0x0018 (0x0018 - 0x0000)
struct EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RGetComponentOfTypeFromComponent_L_Ncomponent_M_Ntype_R final
{
public:
	struct VGameplayRst_0::Ftuple_Lcomponent_Mtype_R __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0010)(Parm, HasGetValueTypeHash)
	FOptionProperty_                              RetVal;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RGetComponentOfTypeFromComponent_L_Ncomponent_M_Ntype_R) == 0x000008, "Wrong alignment on EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RGetComponentOfTypeFromComponent_L_Ncomponent_M_Ntype_R");
static_assert(sizeof(EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RGetComponentOfTypeFromComponent_L_Ncomponent_M_Ntype_R) == 0x000018, "Wrong size on EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RGetComponentOfTypeFromComponent_L_Ncomponent_M_Ntype_R");
static_assert(offsetof(EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RGetComponentOfTypeFromComponent_L_Ncomponent_M_Ntype_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RGetComponentOfTypeFromComponent_L_Ncomponent_M_Ntype_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RGetComponentOfTypeFromComponent_L_Ncomponent_M_Ntype_R, RetVal) == 0x000010, "Member 'EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RGetComponentOfTypeFromComponent_L_Ncomponent_M_Ntype_R::RetVal' has a wrong offset!");

// Function VGameplayRst.EntityUtil._L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RGetComponentOfTypeFromComponentForEntity_L_Ncomponent_M_Nint_M_Ntype_R
// 0x0020 (0x0020 - 0x0000)
struct EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RGetComponentOfTypeFromComponentForEntity_L_Ncomponent_M_Nint_M_Ntype_R final
{
public:
	struct Ftuple_Lcomponent_Mint_Mtype_R         __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0018)(Parm, HasGetValueTypeHash)
	FOptionProperty_                              RetVal;                                            // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RGetComponentOfTypeFromComponentForEntity_L_Ncomponent_M_Nint_M_Ntype_R) == 0x000008, "Wrong alignment on EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RGetComponentOfTypeFromComponentForEntity_L_Ncomponent_M_Nint_M_Ntype_R");
static_assert(sizeof(EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RGetComponentOfTypeFromComponentForEntity_L_Ncomponent_M_Nint_M_Ntype_R) == 0x000020, "Wrong size on EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RGetComponentOfTypeFromComponentForEntity_L_Ncomponent_M_Nint_M_Ntype_R");
static_assert(offsetof(EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RGetComponentOfTypeFromComponentForEntity_L_Ncomponent_M_Nint_M_Ntype_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RGetComponentOfTypeFromComponentForEntity_L_Ncomponent_M_Nint_M_Ntype_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RGetComponentOfTypeFromComponentForEntity_L_Ncomponent_M_Nint_M_Ntype_R, RetVal) == 0x000018, "Member 'EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RGetComponentOfTypeFromComponentForEntity_L_Ncomponent_M_Nint_M_Ntype_R::RetVal' has a wrong offset!");

// Function VGameplayRst.EntityUtil._L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RSpawnEmptyEntity_L_Ntransform__v_M_N_Kchar_R
// 0x0070 (0x0070 - 0x0000)
struct EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RSpawnEmptyEntity_L_Ntransform__v_M_N_Kchar_R final
{
public:
	struct VGameplayRst_0::Ftuple_Ltransform__v_M_Kchar_R __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0060)(Parm, HasGetValueTypeHash)
	int64                                         RetVal;                                            // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RSpawnEmptyEntity_L_Ntransform__v_M_N_Kchar_R) == 0x000010, "Wrong alignment on EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RSpawnEmptyEntity_L_Ntransform__v_M_N_Kchar_R");
static_assert(sizeof(EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RSpawnEmptyEntity_L_Ntransform__v_M_N_Kchar_R) == 0x000070, "Wrong size on EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RSpawnEmptyEntity_L_Ntransform__v_M_N_Kchar_R");
static_assert(offsetof(EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RSpawnEmptyEntity_L_Ntransform__v_M_N_Kchar_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RSpawnEmptyEntity_L_Ntransform__v_M_N_Kchar_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RSpawnEmptyEntity_L_Ntransform__v_M_N_Kchar_R, RetVal) == 0x000060, "Member 'EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RSpawnEmptyEntity_L_Ntransform__v_M_N_Kchar_R::RetVal' has a wrong offset!");

// Function VGameplayRst.EntityUtil._L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RSpawnEntityFromAsset_L_N_Kchar_M_Ntransform__v_M_N_Kchar_R
// 0x0080 (0x0080 - 0x0000)
struct EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RSpawnEntityFromAsset_L_N_Kchar_M_Ntransform__v_M_N_Kchar_R final
{
public:
	struct Ftuple_L_Kchar_Mtransform__v_M_Kchar_R __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0070)(Parm, HasGetValueTypeHash)
	int64                                         RetVal;                                            // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RSpawnEntityFromAsset_L_N_Kchar_M_Ntransform__v_M_N_Kchar_R) == 0x000010, "Wrong alignment on EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RSpawnEntityFromAsset_L_N_Kchar_M_Ntransform__v_M_N_Kchar_R");
static_assert(sizeof(EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RSpawnEntityFromAsset_L_N_Kchar_M_Ntransform__v_M_N_Kchar_R) == 0x000080, "Wrong size on EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RSpawnEntityFromAsset_L_N_Kchar_M_Ntransform__v_M_N_Kchar_R");
static_assert(offsetof(EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RSpawnEntityFromAsset_L_N_Kchar_M_Ntransform__v_M_N_Kchar_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RSpawnEntityFromAsset_L_N_Kchar_M_Ntransform__v_M_N_Kchar_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RSpawnEntityFromAsset_L_N_Kchar_M_Ntransform__v_M_N_Kchar_R, RetVal) == 0x000070, "Member 'EntityUtil__L_2fVerse_2eorg_2fVGameplayRst_2fEntityUtil_N_RSpawnEntityFromAsset_L_N_Kchar_M_Ntransform__v_M_N_Kchar_R::RetVal' has a wrong offset!");

// Function VGameplayRst.fixed_mesh_component._L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RIsVisible
// 0x0002 (0x0002 - 0x0000)
struct fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RIsVisible final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         RetVal : 1;                                        // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
static_assert(alignof(fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RIsVisible) == 0x000001, "Wrong alignment on fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RIsVisible");
static_assert(sizeof(fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RIsVisible) == 0x000002, "Wrong size on fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RIsVisible");
static_assert(offsetof(fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RIsVisible, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RIsVisible::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.fixed_mesh_component._L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetAsRootComponent_L_Nlogic_M_Nlogic_R
// 0x0002 (0x0002 - 0x0000)
struct fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetAsRootComponent_L_Nlogic_M_Nlogic_R final
{
public:
	struct VGameplayRst_0::Ftuple_Llogic_Mlogic_R __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0002)(Parm, HasGetValueTypeHash)
};
static_assert(alignof(fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetAsRootComponent_L_Nlogic_M_Nlogic_R) == 0x000001, "Wrong alignment on fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetAsRootComponent_L_Nlogic_M_Nlogic_R");
static_assert(sizeof(fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetAsRootComponent_L_Nlogic_M_Nlogic_R) == 0x000002, "Wrong size on fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetAsRootComponent_L_Nlogic_M_Nlogic_R");
static_assert(offsetof(fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetAsRootComponent_L_Nlogic_M_Nlogic_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetAsRootComponent_L_Nlogic_M_Nlogic_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.fixed_mesh_component._L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetDefaultStaticMesh_L_Ndefault__mesh__type_R
// 0x0001 (0x0001 - 0x0000)
struct fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetDefaultStaticMesh_L_Ndefault__mesh__type_R final
{
public:
	Edefault_mesh_type                            __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetDefaultStaticMesh_L_Ndefault__mesh__type_R) == 0x000001, "Wrong alignment on fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetDefaultStaticMesh_L_Ndefault__mesh__type_R");
static_assert(sizeof(fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetDefaultStaticMesh_L_Ndefault__mesh__type_R) == 0x000001, "Wrong size on fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetDefaultStaticMesh_L_Ndefault__mesh__type_R");
static_assert(offsetof(fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetDefaultStaticMesh_L_Ndefault__mesh__type_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetDefaultStaticMesh_L_Ndefault__mesh__type_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.fixed_mesh_component._L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetEnableCollision_L_Ncollision__type_R
// 0x0001 (0x0001 - 0x0000)
struct fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetEnableCollision_L_Ncollision__type_R final
{
public:
	Ecollision_type                               __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetEnableCollision_L_Ncollision__type_R) == 0x000001, "Wrong alignment on fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetEnableCollision_L_Ncollision__type_R");
static_assert(sizeof(fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetEnableCollision_L_Ncollision__type_R) == 0x000001, "Wrong size on fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetEnableCollision_L_Ncollision__type_R");
static_assert(offsetof(fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetEnableCollision_L_Ncollision__type_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetEnableCollision_L_Ncollision__type_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.fixed_mesh_component._L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetMaterial_L_Nmaterial__v_R
// 0x0008 (0x0008 - 0x0000)
struct fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetMaterial_L_Nmaterial__v_R final
{
public:
	class Umaterial_v*                            __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetMaterial_L_Nmaterial__v_R) == 0x000008, "Wrong alignment on fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetMaterial_L_Nmaterial__v_R");
static_assert(sizeof(fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetMaterial_L_Nmaterial__v_R) == 0x000008, "Wrong size on fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetMaterial_L_Nmaterial__v_R");
static_assert(offsetof(fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetMaterial_L_Nmaterial__v_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetMaterial_L_Nmaterial__v_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.fixed_mesh_component._L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetMaterialAtIndex_L_Nmaterial__v_M_Nint_R
// 0x0010 (0x0010 - 0x0000)
struct fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetMaterialAtIndex_L_Nmaterial__v_M_Nint_R final
{
public:
	struct Ftuple_Lmaterial__v_Mint_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0010)(Parm, HasGetValueTypeHash)
};
static_assert(alignof(fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetMaterialAtIndex_L_Nmaterial__v_M_Nint_R) == 0x000008, "Wrong alignment on fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetMaterialAtIndex_L_Nmaterial__v_M_Nint_R");
static_assert(sizeof(fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetMaterialAtIndex_L_Nmaterial__v_M_Nint_R) == 0x000010, "Wrong size on fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetMaterialAtIndex_L_Nmaterial__v_M_Nint_R");
static_assert(offsetof(fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetMaterialAtIndex_L_Nmaterial__v_M_Nint_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetMaterialAtIndex_L_Nmaterial__v_M_Nint_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.fixed_mesh_component._L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetStaticMesh_L_Nstatic__mesh_R
// 0x0008 (0x0008 - 0x0000)
struct fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetStaticMesh_L_Nstatic__mesh_R final
{
public:
	class Ustatic_mesh*                           __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetStaticMesh_L_Nstatic__mesh_R) == 0x000008, "Wrong alignment on fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetStaticMesh_L_Nstatic__mesh_R");
static_assert(sizeof(fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetStaticMesh_L_Nstatic__mesh_R) == 0x000008, "Wrong size on fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetStaticMesh_L_Nstatic__mesh_R");
static_assert(offsetof(fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetStaticMesh_L_Nstatic__mesh_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetStaticMesh_L_Nstatic__mesh_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.fixed_mesh_component._L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetVisibility_L_Nlogic_R
// 0x0001 (0x0001 - 0x0000)
struct fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetVisibility_L_Nlogic_R final
{
public:
	uint8                                         __verse_0xB2CDDD72_Argument : 1;                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
};
static_assert(alignof(fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetVisibility_L_Nlogic_R) == 0x000001, "Wrong alignment on fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetVisibility_L_Nlogic_R");
static_assert(sizeof(fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetVisibility_L_Nlogic_R) == 0x000001, "Wrong size on fixed_mesh_component__L_2fVerse_2eorg_2fVGameplayRst_2fGeometry_2ffixed__mesh__component_N_RSetVisibility_L_Nlogic_R");

// Function VGameplayRst.level_streaming_component._L_2fVerse_2eorg_2fVGameplayRst_2fLevelStreaming_2flevel__streaming__component_N_RRequestLoadLevel_L_Nlevel__v_M_Ntime__span_M_N_Kchar_R
// 0x0030 (0x0030 - 0x0000)
struct level_streaming_component__L_2fVerse_2eorg_2fVGameplayRst_2fLevelStreaming_2flevel__streaming__component_N_RRequestLoadLevel_L_Nlevel__v_M_Ntime__span_M_N_Kchar_R final
{
public:
	struct Ftuple_Llevel__v_Mtime__span_M_Kchar_R __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0028)(Parm, HasGetValueTypeHash)
	FOptionProperty_                              RetVal;                                            // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(level_streaming_component__L_2fVerse_2eorg_2fVGameplayRst_2fLevelStreaming_2flevel__streaming__component_N_RRequestLoadLevel_L_Nlevel__v_M_Ntime__span_M_N_Kchar_R) == 0x000008, "Wrong alignment on level_streaming_component__L_2fVerse_2eorg_2fVGameplayRst_2fLevelStreaming_2flevel__streaming__component_N_RRequestLoadLevel_L_Nlevel__v_M_Ntime__span_M_N_Kchar_R");
static_assert(sizeof(level_streaming_component__L_2fVerse_2eorg_2fVGameplayRst_2fLevelStreaming_2flevel__streaming__component_N_RRequestLoadLevel_L_Nlevel__v_M_Ntime__span_M_N_Kchar_R) == 0x000030, "Wrong size on level_streaming_component__L_2fVerse_2eorg_2fVGameplayRst_2fLevelStreaming_2flevel__streaming__component_N_RRequestLoadLevel_L_Nlevel__v_M_Ntime__span_M_N_Kchar_R");
static_assert(offsetof(level_streaming_component__L_2fVerse_2eorg_2fVGameplayRst_2fLevelStreaming_2flevel__streaming__component_N_RRequestLoadLevel_L_Nlevel__v_M_Ntime__span_M_N_Kchar_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'level_streaming_component__L_2fVerse_2eorg_2fVGameplayRst_2fLevelStreaming_2flevel__streaming__component_N_RRequestLoadLevel_L_Nlevel__v_M_Ntime__span_M_N_Kchar_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(level_streaming_component__L_2fVerse_2eorg_2fVGameplayRst_2fLevelStreaming_2flevel__streaming__component_N_RRequestLoadLevel_L_Nlevel__v_M_Ntime__span_M_N_Kchar_R, RetVal) == 0x000028, "Member 'level_streaming_component__L_2fVerse_2eorg_2fVGameplayRst_2fLevelStreaming_2flevel__streaming__component_N_RRequestLoadLevel_L_Nlevel__v_M_Ntime__span_M_N_Kchar_R::RetVal' has a wrong offset!");

// Function VGameplayRst.level_streaming_component._L_2fVerse_2eorg_2fVGameplayRst_2fLevelStreaming_2flevel__streaming__component_N_RRequestUnloadLevel_L_Ntime__span_M_N_Kchar_R
// 0x0028 (0x0028 - 0x0000)
struct level_streaming_component__L_2fVerse_2eorg_2fVGameplayRst_2fLevelStreaming_2flevel__streaming__component_N_RRequestUnloadLevel_L_Ntime__span_M_N_Kchar_R final
{
public:
	struct Ftuple_Ltime__span_M_Kchar_R           __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, HasGetValueTypeHash)
	FOptionProperty_                              RetVal;                                            // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(level_streaming_component__L_2fVerse_2eorg_2fVGameplayRst_2fLevelStreaming_2flevel__streaming__component_N_RRequestUnloadLevel_L_Ntime__span_M_N_Kchar_R) == 0x000008, "Wrong alignment on level_streaming_component__L_2fVerse_2eorg_2fVGameplayRst_2fLevelStreaming_2flevel__streaming__component_N_RRequestUnloadLevel_L_Ntime__span_M_N_Kchar_R");
static_assert(sizeof(level_streaming_component__L_2fVerse_2eorg_2fVGameplayRst_2fLevelStreaming_2flevel__streaming__component_N_RRequestUnloadLevel_L_Ntime__span_M_N_Kchar_R) == 0x000028, "Wrong size on level_streaming_component__L_2fVerse_2eorg_2fVGameplayRst_2fLevelStreaming_2flevel__streaming__component_N_RRequestUnloadLevel_L_Ntime__span_M_N_Kchar_R");
static_assert(offsetof(level_streaming_component__L_2fVerse_2eorg_2fVGameplayRst_2fLevelStreaming_2flevel__streaming__component_N_RRequestUnloadLevel_L_Ntime__span_M_N_Kchar_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'level_streaming_component__L_2fVerse_2eorg_2fVGameplayRst_2fLevelStreaming_2flevel__streaming__component_N_RRequestUnloadLevel_L_Ntime__span_M_N_Kchar_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(level_streaming_component__L_2fVerse_2eorg_2fVGameplayRst_2fLevelStreaming_2flevel__streaming__component_N_RRequestUnloadLevel_L_Ntime__span_M_N_Kchar_R, RetVal) == 0x000020, "Member 'level_streaming_component__L_2fVerse_2eorg_2fVGameplayRst_2fLevelStreaming_2flevel__streaming__component_N_RRequestUnloadLevel_L_Ntime__span_M_N_Kchar_R::RetVal' has a wrong offset!");

// Function VGameplayRst.mutable_positionable._L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__positionable_N_RSetPosition_L_Nvector3_R
// 0x0018 (0x0018 - 0x0000)
struct mutable_positionable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__positionable_N_RSetPosition_L_Nvector3_R final
{
public:
	struct Fvector3                               __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(mutable_positionable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__positionable_N_RSetPosition_L_Nvector3_R) == 0x000008, "Wrong alignment on mutable_positionable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__positionable_N_RSetPosition_L_Nvector3_R");
static_assert(sizeof(mutable_positionable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__positionable_N_RSetPosition_L_Nvector3_R) == 0x000018, "Wrong size on mutable_positionable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__positionable_N_RSetPosition_L_Nvector3_R");
static_assert(offsetof(mutable_positionable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__positionable_N_RSetPosition_L_Nvector3_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'mutable_positionable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__positionable_N_RSetPosition_L_Nvector3_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.TagUtils._L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_N_RFindObjectsWithTag_L_Ngameplay__tag_R
// 0x0018 (0x0018 - 0x0000)
struct TagUtils__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_N_RFindObjectsWithTag_L_Ngameplay__tag_R final
{
public:
	class Ugameplay_tag*                          __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UEntityComponent*>               RetVal;                                            // 0x0008(0x0010)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(TagUtils__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_N_RFindObjectsWithTag_L_Ngameplay__tag_R) == 0x000008, "Wrong alignment on TagUtils__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_N_RFindObjectsWithTag_L_Ngameplay__tag_R");
static_assert(sizeof(TagUtils__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_N_RFindObjectsWithTag_L_Ngameplay__tag_R) == 0x000018, "Wrong size on TagUtils__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_N_RFindObjectsWithTag_L_Ngameplay__tag_R");
static_assert(offsetof(TagUtils__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_N_RFindObjectsWithTag_L_Ngameplay__tag_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'TagUtils__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_N_RFindObjectsWithTag_L_Ngameplay__tag_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(TagUtils__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_N_RFindObjectsWithTag_L_Ngameplay__tag_R, RetVal) == 0x000008, "Member 'TagUtils__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_N_RFindObjectsWithTag_L_Ngameplay__tag_R::RetVal' has a wrong offset!");

// Function VGameplayRst.TagUtils._L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_N_RFindObjectsWithTags_L_Ntagged__object__finder__entry_R
// 0x0018 (0x0018 - 0x0000)
struct TagUtils__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_N_RFindObjectsWithTags_L_Ntagged__object__finder__entry_R final
{
public:
	class Utagged_object_finder_entry*            __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UEntityComponent*>               RetVal;                                            // 0x0008(0x0010)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(TagUtils__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_N_RFindObjectsWithTags_L_Ntagged__object__finder__entry_R) == 0x000008, "Wrong alignment on TagUtils__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_N_RFindObjectsWithTags_L_Ntagged__object__finder__entry_R");
static_assert(sizeof(TagUtils__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_N_RFindObjectsWithTags_L_Ntagged__object__finder__entry_R) == 0x000018, "Wrong size on TagUtils__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_N_RFindObjectsWithTags_L_Ntagged__object__finder__entry_R");
static_assert(offsetof(TagUtils__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_N_RFindObjectsWithTags_L_Ntagged__object__finder__entry_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'TagUtils__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_N_RFindObjectsWithTags_L_Ntagged__object__finder__entry_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(TagUtils__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_N_RFindObjectsWithTags_L_Ntagged__object__finder__entry_R, RetVal) == 0x000008, "Member 'TagUtils__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_N_RFindObjectsWithTags_L_Ntagged__object__finder__entry_R::RetVal' has a wrong offset!");

// Function VGameplayRst.TagUtils._L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_N_RFindObjectWithTag_L_Ngameplay__tag_R
// 0x0010 (0x0010 - 0x0000)
struct TagUtils__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_N_RFindObjectWithTag_L_Ngameplay__tag_R final
{
public:
	class Ugameplay_tag*                          __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FOptionProperty_                              RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TagUtils__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_N_RFindObjectWithTag_L_Ngameplay__tag_R) == 0x000008, "Wrong alignment on TagUtils__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_N_RFindObjectWithTag_L_Ngameplay__tag_R");
static_assert(sizeof(TagUtils__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_N_RFindObjectWithTag_L_Ngameplay__tag_R) == 0x000010, "Wrong size on TagUtils__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_N_RFindObjectWithTag_L_Ngameplay__tag_R");
static_assert(offsetof(TagUtils__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_N_RFindObjectWithTag_L_Ngameplay__tag_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'TagUtils__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_N_RFindObjectWithTag_L_Ngameplay__tag_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(TagUtils__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_N_RFindObjectWithTag_L_Ngameplay__tag_R, RetVal) == 0x000008, "Member 'TagUtils__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_N_RFindObjectWithTag_L_Ngameplay__tag_R::RetVal' has a wrong offset!");

// Function VGameplayRst.mutable_rotatable._L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RApplyAdditionalRotation_L_Nrotation_R
// 0x0020 (0x0020 - 0x0000)
struct mutable_rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RApplyAdditionalRotation_L_Nrotation_R final
{
public:
	struct FVerseRotation                         __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, NoDestructor)
};
static_assert(alignof(mutable_rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RApplyAdditionalRotation_L_Nrotation_R) == 0x000010, "Wrong alignment on mutable_rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RApplyAdditionalRotation_L_Nrotation_R");
static_assert(sizeof(mutable_rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RApplyAdditionalRotation_L_Nrotation_R) == 0x000020, "Wrong size on mutable_rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RApplyAdditionalRotation_L_Nrotation_R");
static_assert(offsetof(mutable_rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RApplyAdditionalRotation_L_Nrotation_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'mutable_rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RApplyAdditionalRotation_L_Nrotation_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.mutable_rotatable._L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RSetForwardVectorFromXY_L_Nvector3_M_Nvector3_R
// 0x0030 (0x0030 - 0x0000)
struct mutable_rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RSetForwardVectorFromXY_L_Nvector3_M_Nvector3_R final
{
public:
	struct VGameplayRst_0::Ftuple_Lvector3_Mvector3_R __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0030)(Parm, HasGetValueTypeHash)
};
static_assert(alignof(mutable_rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RSetForwardVectorFromXY_L_Nvector3_M_Nvector3_R) == 0x000008, "Wrong alignment on mutable_rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RSetForwardVectorFromXY_L_Nvector3_M_Nvector3_R");
static_assert(sizeof(mutable_rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RSetForwardVectorFromXY_L_Nvector3_M_Nvector3_R) == 0x000030, "Wrong size on mutable_rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RSetForwardVectorFromXY_L_Nvector3_M_Nvector3_R");
static_assert(offsetof(mutable_rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RSetForwardVectorFromXY_L_Nvector3_M_Nvector3_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'mutable_rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RSetForwardVectorFromXY_L_Nvector3_M_Nvector3_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.mutable_rotatable._L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RSetRotation_L_Nrotation_R
// 0x0020 (0x0020 - 0x0000)
struct mutable_rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RSetRotation_L_Nrotation_R final
{
public:
	struct FVerseRotation                         __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, NoDestructor)
};
static_assert(alignof(mutable_rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RSetRotation_L_Nrotation_R) == 0x000010, "Wrong alignment on mutable_rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RSetRotation_L_Nrotation_R");
static_assert(sizeof(mutable_rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RSetRotation_L_Nrotation_R) == 0x000020, "Wrong size on mutable_rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RSetRotation_L_Nrotation_R");
static_assert(offsetof(mutable_rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RSetRotation_L_Nrotation_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'mutable_rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RSetRotation_L_Nrotation_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.mutable_scalable._L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__scalable_N_RSetScale_L_Nvector3_R
// 0x0018 (0x0018 - 0x0000)
struct mutable_scalable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__scalable_N_RSetScale_L_Nvector3_R final
{
public:
	struct Fvector3                               __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(mutable_scalable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__scalable_N_RSetScale_L_Nvector3_R) == 0x000008, "Wrong alignment on mutable_scalable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__scalable_N_RSetScale_L_Nvector3_R");
static_assert(sizeof(mutable_scalable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__scalable_N_RSetScale_L_Nvector3_R) == 0x000018, "Wrong size on mutable_scalable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__scalable_N_RSetScale_L_Nvector3_R");
static_assert(offsetof(mutable_scalable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__scalable_N_RSetScale_L_Nvector3_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'mutable_scalable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__scalable_N_RSetScale_L_Nvector3_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.physics_trace._L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fphysics__trace_N_RInitPhysicsTrace_L_Ncomponent_M_Nphysics__trace__category_M_Nphysics__trace__type_M_Nphysics__trace__shape_M_Nphysics__trace__channel_M_Nvector3_M_Nvector3_M_Nlogic_M_Nvector3_M_Nfloat_M_N_Kchar_R
// 0x0078 (0x0078 - 0x0000)
struct physics_trace__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fphysics__trace_N_RInitPhysicsTrace_L_Ncomponent_M_Nphysics__trace__category_M_Nphysics__trace__type_M_Nphysics__trace__shape_M_Nphysics__trace__channel_M_Nvector3_M_Nvector3_M_Nlogic_M_Nvector3_M_Nfloat_M_N_Kchar_R final
{
public:
	struct Ftuple_Lcomponent_Mphysics__trace__category_Mphysics__trace__type_Mphysics__trace__shape_Mphysics__trace__channel_Mvector3_Mvector3_Mlogic_Mvector3_Mfloat_M_Kchar_R __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0078)(Parm, HasGetValueTypeHash)
};
static_assert(alignof(physics_trace__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fphysics__trace_N_RInitPhysicsTrace_L_Ncomponent_M_Nphysics__trace__category_M_Nphysics__trace__type_M_Nphysics__trace__shape_M_Nphysics__trace__channel_M_Nvector3_M_Nvector3_M_Nlogic_M_Nvector3_M_Nfloat_M_N_Kchar_R) == 0x000008, "Wrong alignment on physics_trace__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fphysics__trace_N_RInitPhysicsTrace_L_Ncomponent_M_Nphysics__trace__category_M_Nphysics__trace__type_M_Nphysics__trace__shape_M_Nphysics__trace__channel_M_Nvector3_M_Nvector3_M_Nlogic_M_Nvector3_M_Nfloat_M_N_Kchar_R");
static_assert(sizeof(physics_trace__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fphysics__trace_N_RInitPhysicsTrace_L_Ncomponent_M_Nphysics__trace__category_M_Nphysics__trace__type_M_Nphysics__trace__shape_M_Nphysics__trace__channel_M_Nvector3_M_Nvector3_M_Nlogic_M_Nvector3_M_Nfloat_M_N_Kchar_R) == 0x000078, "Wrong size on physics_trace__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fphysics__trace_N_RInitPhysicsTrace_L_Ncomponent_M_Nphysics__trace__category_M_Nphysics__trace__type_M_Nphysics__trace__shape_M_Nphysics__trace__channel_M_Nvector3_M_Nvector3_M_Nlogic_M_Nvector3_M_Nfloat_M_N_Kchar_R");
static_assert(offsetof(physics_trace__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fphysics__trace_N_RInitPhysicsTrace_L_Ncomponent_M_Nphysics__trace__category_M_Nphysics__trace__type_M_Nphysics__trace__shape_M_Nphysics__trace__channel_M_Nvector3_M_Nvector3_M_Nlogic_M_Nvector3_M_Nfloat_M_N_Kchar_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'physics_trace__L_2fVerse_2eorg_2fVGameplayRst_2fPhysics_2fphysics__trace_N_RInitPhysicsTrace_L_Ncomponent_M_Nphysics__trace__category_M_Nphysics__trace__type_M_Nphysics__trace__shape_M_Nphysics__trace__channel_M_Nvector3_M_Nvector3_M_Nlogic_M_Nvector3_M_Nfloat_M_N_Kchar_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.physics_trace.WaitPhysicsTrace
// 0x0028 (0x0028 - 0x0000)
struct physics_trace_WaitPhysicsTrace final
{
public:
	class Utask*                                  __verse_0xC1E81372_CallingTask;                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         __verse_0xA3A00DDB_CallerResumeState;              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         __verse_0x2AC0E4D8_CallerCancelState;              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0018(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class Utask*                                  RetVal;                                            // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(physics_trace_WaitPhysicsTrace) == 0x000008, "Wrong alignment on physics_trace_WaitPhysicsTrace");
static_assert(sizeof(physics_trace_WaitPhysicsTrace) == 0x000028, "Wrong size on physics_trace_WaitPhysicsTrace");
static_assert(offsetof(physics_trace_WaitPhysicsTrace, __verse_0xC1E81372_CallingTask) == 0x000000, "Member 'physics_trace_WaitPhysicsTrace::__verse_0xC1E81372_CallingTask' has a wrong offset!");
static_assert(offsetof(physics_trace_WaitPhysicsTrace, __verse_0xA3A00DDB_CallerResumeState) == 0x000008, "Member 'physics_trace_WaitPhysicsTrace::__verse_0xA3A00DDB_CallerResumeState' has a wrong offset!");
static_assert(offsetof(physics_trace_WaitPhysicsTrace, __verse_0x2AC0E4D8_CallerCancelState) == 0x000010, "Member 'physics_trace_WaitPhysicsTrace::__verse_0x2AC0E4D8_CallerCancelState' has a wrong offset!");
static_assert(offsetof(physics_trace_WaitPhysicsTrace, __verse_0xB2CDDD72_Argument) == 0x000018, "Member 'physics_trace_WaitPhysicsTrace::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(physics_trace_WaitPhysicsTrace, RetVal) == 0x000020, "Member 'physics_trace_WaitPhysicsTrace::RetVal' has a wrong offset!");

// Function VGameplayRst.point_light_component._L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetAttenuationRadius
// 0x0010 (0x0010 - 0x0000)
struct point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetAttenuationRadius final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetAttenuationRadius) == 0x000008, "Wrong alignment on point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetAttenuationRadius");
static_assert(sizeof(point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetAttenuationRadius) == 0x000010, "Wrong size on point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetAttenuationRadius");
static_assert(offsetof(point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetAttenuationRadius, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetAttenuationRadius::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetAttenuationRadius, RetVal) == 0x000008, "Member 'point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetAttenuationRadius::RetVal' has a wrong offset!");

// Function VGameplayRst.point_light_component._L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetColor
// 0x0028 (0x0028 - 0x0000)
struct point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetColor final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct Fcolor_v                               RetVal;                                            // 0x0008(0x0020)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetColor) == 0x000008, "Wrong alignment on point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetColor");
static_assert(sizeof(point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetColor) == 0x000028, "Wrong size on point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetColor");
static_assert(offsetof(point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetColor, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetColor::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetColor, RetVal) == 0x000008, "Member 'point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetColor::RetVal' has a wrong offset!");

// Function VGameplayRst.point_light_component._L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetIntensity
// 0x0010 (0x0010 - 0x0000)
struct point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetIntensity final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetIntensity) == 0x000008, "Wrong alignment on point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetIntensity");
static_assert(sizeof(point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetIntensity) == 0x000010, "Wrong size on point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetIntensity");
static_assert(offsetof(point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetIntensity, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetIntensity::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetIntensity, RetVal) == 0x000008, "Member 'point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetIntensity::RetVal' has a wrong offset!");

// Function VGameplayRst.point_light_component._L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetSourceLength
// 0x0010 (0x0010 - 0x0000)
struct point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetSourceLength final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetSourceLength) == 0x000008, "Wrong alignment on point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetSourceLength");
static_assert(sizeof(point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetSourceLength) == 0x000010, "Wrong size on point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetSourceLength");
static_assert(offsetof(point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetSourceLength, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetSourceLength::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetSourceLength, RetVal) == 0x000008, "Member 'point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetSourceLength::RetVal' has a wrong offset!");

// Function VGameplayRst.point_light_component._L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetSourceRadius
// 0x0010 (0x0010 - 0x0000)
struct point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetSourceRadius final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetSourceRadius) == 0x000008, "Wrong alignment on point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetSourceRadius");
static_assert(sizeof(point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetSourceRadius) == 0x000010, "Wrong size on point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetSourceRadius");
static_assert(offsetof(point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetSourceRadius, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetSourceRadius::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetSourceRadius, RetVal) == 0x000008, "Member 'point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RGetSourceRadius::RetVal' has a wrong offset!");

// Function VGameplayRst.point_light_component._L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetAttenuationRadius_L_Nfloat_R
// 0x0008 (0x0008 - 0x0000)
struct point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetAttenuationRadius_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetAttenuationRadius_L_Nfloat_R) == 0x000008, "Wrong alignment on point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetAttenuationRadius_L_Nfloat_R");
static_assert(sizeof(point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetAttenuationRadius_L_Nfloat_R) == 0x000008, "Wrong size on point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetAttenuationRadius_L_Nfloat_R");
static_assert(offsetof(point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetAttenuationRadius_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetAttenuationRadius_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.point_light_component._L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetColor_L_Ncolor__v_R
// 0x0020 (0x0020 - 0x0000)
struct point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetColor_L_Ncolor__v_R final
{
public:
	struct Fcolor_v                               __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetColor_L_Ncolor__v_R) == 0x000008, "Wrong alignment on point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetColor_L_Ncolor__v_R");
static_assert(sizeof(point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetColor_L_Ncolor__v_R) == 0x000020, "Wrong size on point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetColor_L_Ncolor__v_R");
static_assert(offsetof(point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetColor_L_Ncolor__v_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetColor_L_Ncolor__v_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.point_light_component._L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetIntensity_L_Nfloat_R
// 0x0008 (0x0008 - 0x0000)
struct point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetIntensity_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetIntensity_L_Nfloat_R) == 0x000008, "Wrong alignment on point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetIntensity_L_Nfloat_R");
static_assert(sizeof(point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetIntensity_L_Nfloat_R) == 0x000008, "Wrong size on point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetIntensity_L_Nfloat_R");
static_assert(offsetof(point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetIntensity_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetIntensity_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.point_light_component._L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetSourceLength_L_Nfloat_R
// 0x0008 (0x0008 - 0x0000)
struct point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetSourceLength_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetSourceLength_L_Nfloat_R) == 0x000008, "Wrong alignment on point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetSourceLength_L_Nfloat_R");
static_assert(sizeof(point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetSourceLength_L_Nfloat_R) == 0x000008, "Wrong size on point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetSourceLength_L_Nfloat_R");
static_assert(offsetof(point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetSourceLength_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetSourceLength_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.point_light_component._L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetSourceRadius_L_Nfloat_R
// 0x0008 (0x0008 - 0x0000)
struct point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetSourceRadius_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetSourceRadius_L_Nfloat_R) == 0x000008, "Wrong alignment on point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetSourceRadius_L_Nfloat_R");
static_assert(sizeof(point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetSourceRadius_L_Nfloat_R) == 0x000008, "Wrong size on point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetSourceRadius_L_Nfloat_R");
static_assert(offsetof(point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetSourceRadius_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'point_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fpoint__light__component_N_RSetSourceRadius_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.position_component._L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__positionable_N_RSetPosition_L_Nvector3_R
// 0x0018 (0x0018 - 0x0000)
struct position_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__positionable_N_RSetPosition_L_Nvector3_R final
{
public:
	struct Fvector3                               __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(position_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__positionable_N_RSetPosition_L_Nvector3_R) == 0x000008, "Wrong alignment on position_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__positionable_N_RSetPosition_L_Nvector3_R");
static_assert(sizeof(position_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__positionable_N_RSetPosition_L_Nvector3_R) == 0x000018, "Wrong size on position_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__positionable_N_RSetPosition_L_Nvector3_R");
static_assert(offsetof(position_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__positionable_N_RSetPosition_L_Nvector3_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'position_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__positionable_N_RSetPosition_L_Nvector3_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.position_component._L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fposition__component_N_RAddToPosition_L_Nvector3_R
// 0x0018 (0x0018 - 0x0000)
struct position_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fposition__component_N_RAddToPosition_L_Nvector3_R final
{
public:
	struct Fvector3                               __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(position_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fposition__component_N_RAddToPosition_L_Nvector3_R) == 0x000008, "Wrong alignment on position_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fposition__component_N_RAddToPosition_L_Nvector3_R");
static_assert(sizeof(position_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fposition__component_N_RAddToPosition_L_Nvector3_R) == 0x000018, "Wrong size on position_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fposition__component_N_RAddToPosition_L_Nvector3_R");
static_assert(offsetof(position_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fposition__component_N_RAddToPosition_L_Nvector3_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'position_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fposition__component_N_RAddToPosition_L_Nvector3_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.position_component._L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fpositionable_N_RGetPosition
// 0x0020 (0x0020 - 0x0000)
struct position_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fpositionable_N_RGetPosition final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct Fvector3                               RetVal;                                            // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(position_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fpositionable_N_RGetPosition) == 0x000008, "Wrong alignment on position_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fpositionable_N_RGetPosition");
static_assert(sizeof(position_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fpositionable_N_RGetPosition) == 0x000020, "Wrong size on position_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fpositionable_N_RGetPosition");
static_assert(offsetof(position_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fpositionable_N_RGetPosition, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'position_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fpositionable_N_RGetPosition::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(position_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fpositionable_N_RGetPosition, RetVal) == 0x000008, "Member 'position_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fpositionable_N_RGetPosition::RetVal' has a wrong offset!");

// Function VGameplayRst.positionable._L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fpositionable_N_RGetPosition
// 0x0020 (0x0020 - 0x0000)
struct positionable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fpositionable_N_RGetPosition final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct Fvector3                               RetVal;                                            // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(positionable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fpositionable_N_RGetPosition) == 0x000008, "Wrong alignment on positionable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fpositionable_N_RGetPosition");
static_assert(sizeof(positionable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fpositionable_N_RGetPosition) == 0x000020, "Wrong size on positionable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fpositionable_N_RGetPosition");
static_assert(offsetof(positionable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fpositionable_N_RGetPosition, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'positionable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fpositionable_N_RGetPosition::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(positionable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fpositionable_N_RGetPosition, RetVal) == 0x000008, "Member 'positionable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fpositionable_N_RGetPosition::RetVal' has a wrong offset!");

// Function VGameplayRst.rotatable._L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RForwardVector
// 0x0020 (0x0020 - 0x0000)
struct rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RForwardVector final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct Fvector3                               RetVal;                                            // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RForwardVector) == 0x000008, "Wrong alignment on rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RForwardVector");
static_assert(sizeof(rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RForwardVector) == 0x000020, "Wrong size on rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RForwardVector");
static_assert(offsetof(rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RForwardVector, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RForwardVector::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RForwardVector, RetVal) == 0x000008, "Member 'rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RForwardVector::RetVal' has a wrong offset!");

// Function VGameplayRst.rotatable._L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRightVector
// 0x0020 (0x0020 - 0x0000)
struct rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRightVector final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct Fvector3                               RetVal;                                            // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRightVector) == 0x000008, "Wrong alignment on rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRightVector");
static_assert(sizeof(rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRightVector) == 0x000020, "Wrong size on rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRightVector");
static_assert(offsetof(rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRightVector, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRightVector::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRightVector, RetVal) == 0x000008, "Member 'rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRightVector::RetVal' has a wrong offset!");

// Function VGameplayRst.rotatable._L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRotation
// 0x0030 (0x0030 - 0x0000)
struct rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRotation final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVerseRotation                         RetVal;                                            // 0x0010(0x0020)(Parm, OutParm, ReturnParm, NoDestructor)
};
static_assert(alignof(rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRotation) == 0x000010, "Wrong alignment on rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRotation");
static_assert(sizeof(rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRotation) == 0x000030, "Wrong size on rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRotation");
static_assert(offsetof(rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRotation, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRotation::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRotation, RetVal) == 0x000010, "Member 'rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRotation::RetVal' has a wrong offset!");

// Function VGameplayRst.rotatable._L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RUpVector
// 0x0020 (0x0020 - 0x0000)
struct rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RUpVector final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct Fvector3                               RetVal;                                            // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RUpVector) == 0x000008, "Wrong alignment on rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RUpVector");
static_assert(sizeof(rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RUpVector) == 0x000020, "Wrong size on rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RUpVector");
static_assert(offsetof(rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RUpVector, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RUpVector::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RUpVector, RetVal) == 0x000008, "Member 'rotatable__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RUpVector::RetVal' has a wrong offset!");

// Function VGameplayRst.rotation_component._L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RApplyAdditionalRotation_L_Nrotation_R
// 0x0020 (0x0020 - 0x0000)
struct rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RApplyAdditionalRotation_L_Nrotation_R final
{
public:
	struct FVerseRotation                         __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, NoDestructor)
};
static_assert(alignof(rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RApplyAdditionalRotation_L_Nrotation_R) == 0x000010, "Wrong alignment on rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RApplyAdditionalRotation_L_Nrotation_R");
static_assert(sizeof(rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RApplyAdditionalRotation_L_Nrotation_R) == 0x000020, "Wrong size on rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RApplyAdditionalRotation_L_Nrotation_R");
static_assert(offsetof(rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RApplyAdditionalRotation_L_Nrotation_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RApplyAdditionalRotation_L_Nrotation_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.rotation_component._L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RSetForwardVectorFromXY_L_Nvector3_M_Nvector3_R
// 0x0030 (0x0030 - 0x0000)
struct rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RSetForwardVectorFromXY_L_Nvector3_M_Nvector3_R final
{
public:
	struct VGameplayRst_0::Ftuple_Lvector3_Mvector3_R __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0030)(Parm, HasGetValueTypeHash)
};
static_assert(alignof(rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RSetForwardVectorFromXY_L_Nvector3_M_Nvector3_R) == 0x000008, "Wrong alignment on rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RSetForwardVectorFromXY_L_Nvector3_M_Nvector3_R");
static_assert(sizeof(rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RSetForwardVectorFromXY_L_Nvector3_M_Nvector3_R) == 0x000030, "Wrong size on rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RSetForwardVectorFromXY_L_Nvector3_M_Nvector3_R");
static_assert(offsetof(rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RSetForwardVectorFromXY_L_Nvector3_M_Nvector3_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RSetForwardVectorFromXY_L_Nvector3_M_Nvector3_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.rotation_component._L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RSetRotation_L_Nrotation_R
// 0x0020 (0x0020 - 0x0000)
struct rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RSetRotation_L_Nrotation_R final
{
public:
	struct FVerseRotation                         __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, NoDestructor)
};
static_assert(alignof(rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RSetRotation_L_Nrotation_R) == 0x000010, "Wrong alignment on rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RSetRotation_L_Nrotation_R");
static_assert(sizeof(rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RSetRotation_L_Nrotation_R) == 0x000020, "Wrong size on rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RSetRotation_L_Nrotation_R");
static_assert(offsetof(rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RSetRotation_L_Nrotation_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2fmutable__rotatable_N_RSetRotation_L_Nrotation_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.rotation_component._L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RForwardVector
// 0x0040 (0x0040 - 0x0000)
struct rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RForwardVector final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct Fvector3                               RetVal;                                            // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	TDelegate<void(const struct FVerseRotation& __verse_0xB2CDDD72_Argument)> _TEMP_0;                                           // 0x0020(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const struct VGameplayRst_0::Ftuple_L_R& __verse_0xB2CDDD72_Argument)> _TEMP_1;                                           // 0x002C(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct VGameplayRst_0::Ftuple_L_R             _TEMP_2;                                           // 0x0038(0x0001)(HasGetValueTypeHash)
};
static_assert(alignof(rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RForwardVector) == 0x000008, "Wrong alignment on rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RForwardVector");
static_assert(sizeof(rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RForwardVector) == 0x000040, "Wrong size on rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RForwardVector");
static_assert(offsetof(rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RForwardVector, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RForwardVector::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RForwardVector, RetVal) == 0x000008, "Member 'rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RForwardVector::RetVal' has a wrong offset!");
static_assert(offsetof(rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RForwardVector, _TEMP_0) == 0x000020, "Member 'rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RForwardVector::_TEMP_0' has a wrong offset!");
static_assert(offsetof(rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RForwardVector, _TEMP_1) == 0x00002C, "Member 'rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RForwardVector::_TEMP_1' has a wrong offset!");
static_assert(offsetof(rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RForwardVector, _TEMP_2) == 0x000038, "Member 'rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RForwardVector::_TEMP_2' has a wrong offset!");

// Function VGameplayRst.rotation_component._L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRightVector
// 0x0040 (0x0040 - 0x0000)
struct rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRightVector final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct Fvector3                               RetVal;                                            // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	TDelegate<void(const struct FVerseRotation& __verse_0xB2CDDD72_Argument)> _TEMP_0;                                           // 0x0020(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const struct VGameplayRst_0::Ftuple_L_R& __verse_0xB2CDDD72_Argument)> _TEMP_1;                                           // 0x002C(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct VGameplayRst_0::Ftuple_L_R             _TEMP_2;                                           // 0x0038(0x0001)(HasGetValueTypeHash)
};
static_assert(alignof(rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRightVector) == 0x000008, "Wrong alignment on rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRightVector");
static_assert(sizeof(rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRightVector) == 0x000040, "Wrong size on rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRightVector");
static_assert(offsetof(rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRightVector, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRightVector::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRightVector, RetVal) == 0x000008, "Member 'rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRightVector::RetVal' has a wrong offset!");
static_assert(offsetof(rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRightVector, _TEMP_0) == 0x000020, "Member 'rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRightVector::_TEMP_0' has a wrong offset!");
static_assert(offsetof(rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRightVector, _TEMP_1) == 0x00002C, "Member 'rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRightVector::_TEMP_1' has a wrong offset!");
static_assert(offsetof(rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRightVector, _TEMP_2) == 0x000038, "Member 'rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRightVector::_TEMP_2' has a wrong offset!");

// Function VGameplayRst.rotation_component._L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRotation
// 0x0030 (0x0030 - 0x0000)
struct rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRotation final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVerseRotation                         RetVal;                                            // 0x0010(0x0020)(Parm, OutParm, ReturnParm, NoDestructor)
};
static_assert(alignof(rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRotation) == 0x000010, "Wrong alignment on rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRotation");
static_assert(sizeof(rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRotation) == 0x000030, "Wrong size on rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRotation");
static_assert(offsetof(rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRotation, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRotation::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRotation, RetVal) == 0x000010, "Member 'rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RRotation::RetVal' has a wrong offset!");

// Function VGameplayRst.rotation_component._L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RUpVector
// 0x0040 (0x0040 - 0x0000)
struct rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RUpVector final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct Fvector3                               RetVal;                                            // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	TDelegate<void(const struct FVerseRotation& __verse_0xB2CDDD72_Argument)> _TEMP_0;                                           // 0x0020(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const struct VGameplayRst_0::Ftuple_L_R& __verse_0xB2CDDD72_Argument)> _TEMP_1;                                           // 0x002C(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct VGameplayRst_0::Ftuple_L_R             _TEMP_2;                                           // 0x0038(0x0001)(HasGetValueTypeHash)
};
static_assert(alignof(rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RUpVector) == 0x000008, "Wrong alignment on rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RUpVector");
static_assert(sizeof(rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RUpVector) == 0x000040, "Wrong size on rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RUpVector");
static_assert(offsetof(rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RUpVector, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RUpVector::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RUpVector, RetVal) == 0x000008, "Member 'rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RUpVector::RetVal' has a wrong offset!");
static_assert(offsetof(rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RUpVector, _TEMP_0) == 0x000020, "Member 'rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RUpVector::_TEMP_0' has a wrong offset!");
static_assert(offsetof(rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RUpVector, _TEMP_1) == 0x00002C, "Member 'rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RUpVector::_TEMP_1' has a wrong offset!");
static_assert(offsetof(rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RUpVector, _TEMP_2) == 0x000038, "Member 'rotation_component__L_2fVerse_2eorg_2fVGameplayRst_2fTransform_2frotatable_N_RUpVector::_TEMP_2' has a wrong offset!");

// Function VGameplayRst.spot_light_component._L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetAttenuationRadius
// 0x0010 (0x0010 - 0x0000)
struct spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetAttenuationRadius final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetAttenuationRadius) == 0x000008, "Wrong alignment on spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetAttenuationRadius");
static_assert(sizeof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetAttenuationRadius) == 0x000010, "Wrong size on spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetAttenuationRadius");
static_assert(offsetof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetAttenuationRadius, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetAttenuationRadius::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetAttenuationRadius, RetVal) == 0x000008, "Member 'spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetAttenuationRadius::RetVal' has a wrong offset!");

// Function VGameplayRst.spot_light_component._L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetColor
// 0x0028 (0x0028 - 0x0000)
struct spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetColor final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct Fcolor_v                               RetVal;                                            // 0x0008(0x0020)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetColor) == 0x000008, "Wrong alignment on spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetColor");
static_assert(sizeof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetColor) == 0x000028, "Wrong size on spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetColor");
static_assert(offsetof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetColor, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetColor::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetColor, RetVal) == 0x000008, "Member 'spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetColor::RetVal' has a wrong offset!");

// Function VGameplayRst.spot_light_component._L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetInnerConeAngle
// 0x0010 (0x0010 - 0x0000)
struct spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetInnerConeAngle final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetInnerConeAngle) == 0x000008, "Wrong alignment on spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetInnerConeAngle");
static_assert(sizeof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetInnerConeAngle) == 0x000010, "Wrong size on spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetInnerConeAngle");
static_assert(offsetof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetInnerConeAngle, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetInnerConeAngle::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetInnerConeAngle, RetVal) == 0x000008, "Member 'spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetInnerConeAngle::RetVal' has a wrong offset!");

// Function VGameplayRst.spot_light_component._L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetIntensity
// 0x0010 (0x0010 - 0x0000)
struct spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetIntensity final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetIntensity) == 0x000008, "Wrong alignment on spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetIntensity");
static_assert(sizeof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetIntensity) == 0x000010, "Wrong size on spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetIntensity");
static_assert(offsetof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetIntensity, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetIntensity::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetIntensity, RetVal) == 0x000008, "Member 'spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetIntensity::RetVal' has a wrong offset!");

// Function VGameplayRst.spot_light_component._L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetOuterConeAngle
// 0x0010 (0x0010 - 0x0000)
struct spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetOuterConeAngle final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetOuterConeAngle) == 0x000008, "Wrong alignment on spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetOuterConeAngle");
static_assert(sizeof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetOuterConeAngle) == 0x000010, "Wrong size on spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetOuterConeAngle");
static_assert(offsetof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetOuterConeAngle, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetOuterConeAngle::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetOuterConeAngle, RetVal) == 0x000008, "Member 'spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetOuterConeAngle::RetVal' has a wrong offset!");

// Function VGameplayRst.spot_light_component._L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetSourceLength
// 0x0010 (0x0010 - 0x0000)
struct spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetSourceLength final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetSourceLength) == 0x000008, "Wrong alignment on spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetSourceLength");
static_assert(sizeof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetSourceLength) == 0x000010, "Wrong size on spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetSourceLength");
static_assert(offsetof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetSourceLength, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetSourceLength::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetSourceLength, RetVal) == 0x000008, "Member 'spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetSourceLength::RetVal' has a wrong offset!");

// Function VGameplayRst.spot_light_component._L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetSourceRadius
// 0x0010 (0x0010 - 0x0000)
struct spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetSourceRadius final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetSourceRadius) == 0x000008, "Wrong alignment on spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetSourceRadius");
static_assert(sizeof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetSourceRadius) == 0x000010, "Wrong size on spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetSourceRadius");
static_assert(offsetof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetSourceRadius, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetSourceRadius::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetSourceRadius, RetVal) == 0x000008, "Member 'spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RGetSourceRadius::RetVal' has a wrong offset!");

// Function VGameplayRst.spot_light_component._L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetAttenuationRadius_L_Nfloat_R
// 0x0008 (0x0008 - 0x0000)
struct spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetAttenuationRadius_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetAttenuationRadius_L_Nfloat_R) == 0x000008, "Wrong alignment on spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetAttenuationRadius_L_Nfloat_R");
static_assert(sizeof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetAttenuationRadius_L_Nfloat_R) == 0x000008, "Wrong size on spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetAttenuationRadius_L_Nfloat_R");
static_assert(offsetof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetAttenuationRadius_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetAttenuationRadius_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.spot_light_component._L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetColor_L_Ncolor__v_R
// 0x0020 (0x0020 - 0x0000)
struct spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetColor_L_Ncolor__v_R final
{
public:
	struct Fcolor_v                               __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetColor_L_Ncolor__v_R) == 0x000008, "Wrong alignment on spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetColor_L_Ncolor__v_R");
static_assert(sizeof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetColor_L_Ncolor__v_R) == 0x000020, "Wrong size on spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetColor_L_Ncolor__v_R");
static_assert(offsetof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetColor_L_Ncolor__v_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetColor_L_Ncolor__v_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.spot_light_component._L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetInnerConeAngle_L_Nfloat_R
// 0x0008 (0x0008 - 0x0000)
struct spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetInnerConeAngle_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetInnerConeAngle_L_Nfloat_R) == 0x000008, "Wrong alignment on spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetInnerConeAngle_L_Nfloat_R");
static_assert(sizeof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetInnerConeAngle_L_Nfloat_R) == 0x000008, "Wrong size on spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetInnerConeAngle_L_Nfloat_R");
static_assert(offsetof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetInnerConeAngle_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetInnerConeAngle_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.spot_light_component._L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetIntensity_L_Nfloat_R
// 0x0008 (0x0008 - 0x0000)
struct spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetIntensity_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetIntensity_L_Nfloat_R) == 0x000008, "Wrong alignment on spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetIntensity_L_Nfloat_R");
static_assert(sizeof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetIntensity_L_Nfloat_R) == 0x000008, "Wrong size on spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetIntensity_L_Nfloat_R");
static_assert(offsetof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetIntensity_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetIntensity_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.spot_light_component._L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetOuterConeAngle_L_Nfloat_R
// 0x0008 (0x0008 - 0x0000)
struct spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetOuterConeAngle_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetOuterConeAngle_L_Nfloat_R) == 0x000008, "Wrong alignment on spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetOuterConeAngle_L_Nfloat_R");
static_assert(sizeof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetOuterConeAngle_L_Nfloat_R) == 0x000008, "Wrong size on spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetOuterConeAngle_L_Nfloat_R");
static_assert(offsetof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetOuterConeAngle_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetOuterConeAngle_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.spot_light_component._L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetSourceLength_L_Nfloat_R
// 0x0008 (0x0008 - 0x0000)
struct spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetSourceLength_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetSourceLength_L_Nfloat_R) == 0x000008, "Wrong alignment on spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetSourceLength_L_Nfloat_R");
static_assert(sizeof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetSourceLength_L_Nfloat_R) == 0x000008, "Wrong size on spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetSourceLength_L_Nfloat_R");
static_assert(offsetof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetSourceLength_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetSourceLength_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.spot_light_component._L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetSourceRadius_L_Nfloat_R
// 0x0008 (0x0008 - 0x0000)
struct spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetSourceRadius_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetSourceRadius_L_Nfloat_R) == 0x000008, "Wrong alignment on spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetSourceRadius_L_Nfloat_R");
static_assert(sizeof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetSourceRadius_L_Nfloat_R) == 0x000008, "Wrong size on spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetSourceRadius_L_Nfloat_R");
static_assert(offsetof(spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetSourceRadius_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'spot_light_component__L_2fVerse_2eorg_2fVGameplayRst_2fLights_2fspot__light__component_N_RSetSourceRadius_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.tag_container_component._L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_2ftag__container__component_N_RAddTag_L_Ngameplay__tag_R
// 0x0008 (0x0008 - 0x0000)
struct tag_container_component__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_2ftag__container__component_N_RAddTag_L_Ngameplay__tag_R final
{
public:
	class Ugameplay_tag*                          __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(tag_container_component__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_2ftag__container__component_N_RAddTag_L_Ngameplay__tag_R) == 0x000008, "Wrong alignment on tag_container_component__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_2ftag__container__component_N_RAddTag_L_Ngameplay__tag_R");
static_assert(sizeof(tag_container_component__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_2ftag__container__component_N_RAddTag_L_Ngameplay__tag_R) == 0x000008, "Wrong size on tag_container_component__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_2ftag__container__component_N_RAddTag_L_Ngameplay__tag_R");
static_assert(offsetof(tag_container_component__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_2ftag__container__component_N_RAddTag_L_Ngameplay__tag_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'tag_container_component__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_2ftag__container__component_N_RAddTag_L_Ngameplay__tag_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.tag_container_component._L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_2ftag__container__component_N_RGetTags
// 0x0010 (0x0010 - 0x0000)
struct tag_container_component__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_2ftag__container__component_N_RGetTags final
{
public:
	struct VGameplayRst_0::Ftuple_L_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class Ugameplay_tag_container*                RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(tag_container_component__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_2ftag__container__component_N_RGetTags) == 0x000008, "Wrong alignment on tag_container_component__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_2ftag__container__component_N_RGetTags");
static_assert(sizeof(tag_container_component__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_2ftag__container__component_N_RGetTags) == 0x000010, "Wrong size on tag_container_component__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_2ftag__container__component_N_RGetTags");
static_assert(offsetof(tag_container_component__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_2ftag__container__component_N_RGetTags, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'tag_container_component__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_2ftag__container__component_N_RGetTags::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(tag_container_component__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_2ftag__container__component_N_RGetTags, RetVal) == 0x000008, "Member 'tag_container_component__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_2ftag__container__component_N_RGetTags::RetVal' has a wrong offset!");

// Function VGameplayRst.tag_container_component._L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_2ftag__container__component_N_RRemoveTag_L_Ngameplay__tag_R
// 0x0010 (0x0010 - 0x0000)
struct tag_container_component__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_2ftag__container__component_N_RRemoveTag_L_Ngameplay__tag_R final
{
public:
	class Ugameplay_tag*                          __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         RetVal : 1;                                        // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
static_assert(alignof(tag_container_component__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_2ftag__container__component_N_RRemoveTag_L_Ngameplay__tag_R) == 0x000008, "Wrong alignment on tag_container_component__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_2ftag__container__component_N_RRemoveTag_L_Ngameplay__tag_R");
static_assert(sizeof(tag_container_component__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_2ftag__container__component_N_RRemoveTag_L_Ngameplay__tag_R) == 0x000010, "Wrong size on tag_container_component__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_2ftag__container__component_N_RRemoveTag_L_Ngameplay__tag_R");
static_assert(offsetof(tag_container_component__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_2ftag__container__component_N_RRemoveTag_L_Ngameplay__tag_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'tag_container_component__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_2ftag__container__component_N_RRemoveTag_L_Ngameplay__tag_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function VGameplayRst.tag_container_component._L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_2ftag__container__component_N_RSetTags_L_Ngameplay__tag__container_R
// 0x0008 (0x0008 - 0x0000)
struct tag_container_component__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_2ftag__container__component_N_RSetTags_L_Ngameplay__tag__container_R final
{
public:
	class Ugameplay_tag_container*                __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(tag_container_component__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_2ftag__container__component_N_RSetTags_L_Ngameplay__tag__container_R) == 0x000008, "Wrong alignment on tag_container_component__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_2ftag__container__component_N_RSetTags_L_Ngameplay__tag__container_R");
static_assert(sizeof(tag_container_component__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_2ftag__container__component_N_RSetTags_L_Ngameplay__tag__container_R) == 0x000008, "Wrong size on tag_container_component__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_2ftag__container__component_N_RSetTags_L_Ngameplay__tag__container_R");
static_assert(offsetof(tag_container_component__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_2ftag__container__component_N_RSetTags_L_Ngameplay__tag__container_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'tag_container_component__L_2fVerse_2eorg_2fVGameplayRst_2fTagUtils_2ftag__container__component_N_RSetTags_L_Ngameplay__tag__container_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

}

