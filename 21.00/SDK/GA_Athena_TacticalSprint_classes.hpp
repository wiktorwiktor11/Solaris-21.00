#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Athena_TacticalSprint

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "TacticalSprintRuntime_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Athena_TacticalSprint.GA_Athena_TacticalSprint_C
// 0x02C8 (0x0DD8 - 0x0B10)
class UGA_Athena_TacticalSprint_C final : public UFortGameplayAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0B10(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FActiveGameplayEffectHandle            SprintGE;                                          // 0x0B18(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        FortPlayerPawn;                                    // 0x0B20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_SprintEnd;                                      // 0x0B28(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_Speedlines;                                     // 0x0B2C(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Timer_FullSpeedGC;                                 // 0x0B30(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         CosmeticTimeTakenToFullSpeed;                      // 0x0B38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B3C[0x4];                                      // 0x0B3C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Timer_Acceleration;                                // 0x0B40(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         MinEnergyToActivate;                               // 0x0B48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EnergyUseIdentifier;                               // 0x0B4C(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_SprintAccelerate;                               // 0x0B50(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B54[0x4];                                      // 0x0B54(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         HF_TacSprintEnabled;                               // 0x0B58(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         HF_AccelerationFrequency;                          // 0x0B80(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         HF_SafetyKillTimer;                                // 0x0BA8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           GC_EnergyDrain;                                    // 0x0BD0(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_EnergyFullyDrained;                             // 0x0BD4(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         HF_EnergyCostOnStart;                              // 0x0BD8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         HF_EnergyCostOnJump;                               // 0x0C00(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         HF_EnergyCostOnSlide;                              // 0x0C28(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsJumping;                                         // 0x0C50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C51[0x7];                                      // 0x0C51(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Timer_FallingTimeout;                              // 0x0C58(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          InfiniteSprint;                                    // 0x0C60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C61[0x7];                                      // 0x0C61(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Timer_SafetyKill;                                  // 0x0C68(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          DebuggingDisplayLogsOnScreen;                      // 0x0C70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C71[0x7];                                      // 0x0C71(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTacticalSprintControllerComponent_C*   CachedTacticalSprintComponent;                     // 0x0C78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         HF_TimeFallingAllowedBeforeCanceling;              // 0x0C80(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UAbilityAsync_WaitGameplayEvent*        WaitForPrimaryInputPress;                          // 0x0CA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  TagSprintFailed;                                   // 0x0CB0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TagSprintFailed_LowEnergy;                         // 0x0CD0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         HF_SpeedMultiplier;                                // 0x0CF0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         HF_JumpHeightMultiplier;                           // 0x0D18(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         HF_EnergyCostPerSecond;                            // 0x0D40(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         HF_MaxEnergy;                                      // 0x0D68(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         SingleStackSpeedMultiplier;                        // 0x0D90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SingleStackJumpZMultiplier;                        // 0x0D94(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            Sprint_Accel_GE;                                   // 0x0D98(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          UseNewAccelMethod;                                 // 0x0DA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DA1[0x7];                                      // 0x0DA1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         HF_ShouldUseNewAccelMethod;                        // 0x0DA8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         LevelForLookupOfShouldUseNewAccelMethod;           // 0x0DD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UnbindToFortPlayerPawnDied();
	void SetUseHighLocationToleranceForAcceleration(bool bShouldUseHighTolerance);
	void UnbindOnReloadCancelingSprint();
	void UnbindOnEnteredEditMode();
	void ToggleAccelMode();
	void StopDrainingEnergy();
	void StartDrainingEnergy();
	void SetUpTagBinds();
	void SetupAircraftBinds();
	void SetInfiniteSprint(bool NewInfiniteSprint);
	void SafetyKillTimer();
	void ResetSlideCancellation();
	void Register_For_Safety_Kill();
	void PayEnergyCostOnSlide();
	void OnReloadCancelingSprint();
	void OnFortPlayerPawnDied(class AFortPlayerPawnAthena* FortPlayerPawnAthena);
	void OnEnteredEditMode();
	void OnEnergyDrained(class UFortComponent_Energy* EnergyComponent);
	void NotifySprintStarted();
	void NotifySprintEnded();
	void LogAndVisualLog(ESprintLoggingVerbosityLevel Verbosity, const class FString& LogString);
	void K2_OnEndAbility(bool bWasCancelled);
	void K2_ActivateAbility();
	void IsSprintJumping(bool* IsJumping_0);
	void HasZeroEnergy(bool* Has_Zero_Energy);
	void HandleTutorialQuestUpdate();
	void HandleSlidingStopped();
	void HandleSlidingStarted();
	void HandlePawnJumped();
	void HandleMovementModeChanged(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode);
	void HandleMovementModeBecameSliding();
	void HandleFailedToSprint();
	void HandleEnteredAircraft();
	void GetTacticalSprintEnergyComponent(class UFortComponent_Energy** TacticalSprintEnergyComponent);
	void GetTacticalSprintComponent(class UTacticalSprintControllerComponent_C** TacticalSprintComponent);
	void Full_Speed_Reached();
	void FindFortPlayerPawnCached(class AFortPlayerPawn** FortPlayerPawn_0);
	void ExecuteUbergraph_GA_Athena_TacticalSprint(int32 EntryPoint);
	void EndAbilityAtTopOfNextFrame();
	void EndAbilityAtTopOfFrame();
	void CostEnergyOnJump();
	void ClearAircraftBinds();
	void CheckMovementModeWhenEnergyDrained(bool* Not_Jumping___End_Immediately, bool* Other_States___Need_to_End_Sprint_Now, bool* Is_Airborne___Wait_for_no_longer_airborne, bool* Still_Walking___Make_sure_jumping_happens);
	void CheckIfStillFalling();
	void Check_if_Jump_Succeeded___Out_of_Energy();
	void BindToFortPlayerPawnDied();
	void BindToCheckIfFalling();
	void BindOnReloadCancelingSprint();
	void BindOnEnteredEditMode();
	void ApplyStackOfSpeedAndJumpModifiers(float Single_Stack_Max_Speed_Multiplier, float Single_Stack_Jump_Z_Multiplier, TSubclassOf<class UGameplayEffect> Gameplay_Effect_Class, struct FActiveGameplayEffectHandle* GameplayEffectHandle);
	void ApplySpeedAndJumpZIncreaseOverTime();
	void Accelerate();

	bool K2_CanActivateAbility(const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayAbilitySpecHandle& Handle, struct FGameplayTagContainer* RelevantTags) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Athena_TacticalSprint_C">();
	}
	static class UGA_Athena_TacticalSprint_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Athena_TacticalSprint_C>();
	}
};
static_assert(alignof(UGA_Athena_TacticalSprint_C) == 0x000008, "Wrong alignment on UGA_Athena_TacticalSprint_C");
static_assert(sizeof(UGA_Athena_TacticalSprint_C) == 0x000DD8, "Wrong size on UGA_Athena_TacticalSprint_C");
static_assert(offsetof(UGA_Athena_TacticalSprint_C, UberGraphFrame) == 0x000B10, "Member 'UGA_Athena_TacticalSprint_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacticalSprint_C, SprintGE) == 0x000B18, "Member 'UGA_Athena_TacticalSprint_C::SprintGE' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacticalSprint_C, FortPlayerPawn) == 0x000B20, "Member 'UGA_Athena_TacticalSprint_C::FortPlayerPawn' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacticalSprint_C, GC_SprintEnd) == 0x000B28, "Member 'UGA_Athena_TacticalSprint_C::GC_SprintEnd' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacticalSprint_C, GC_Speedlines) == 0x000B2C, "Member 'UGA_Athena_TacticalSprint_C::GC_Speedlines' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacticalSprint_C, Timer_FullSpeedGC) == 0x000B30, "Member 'UGA_Athena_TacticalSprint_C::Timer_FullSpeedGC' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacticalSprint_C, CosmeticTimeTakenToFullSpeed) == 0x000B38, "Member 'UGA_Athena_TacticalSprint_C::CosmeticTimeTakenToFullSpeed' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacticalSprint_C, Timer_Acceleration) == 0x000B40, "Member 'UGA_Athena_TacticalSprint_C::Timer_Acceleration' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacticalSprint_C, MinEnergyToActivate) == 0x000B48, "Member 'UGA_Athena_TacticalSprint_C::MinEnergyToActivate' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacticalSprint_C, EnergyUseIdentifier) == 0x000B4C, "Member 'UGA_Athena_TacticalSprint_C::EnergyUseIdentifier' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacticalSprint_C, GC_SprintAccelerate) == 0x000B50, "Member 'UGA_Athena_TacticalSprint_C::GC_SprintAccelerate' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacticalSprint_C, HF_TacSprintEnabled) == 0x000B58, "Member 'UGA_Athena_TacticalSprint_C::HF_TacSprintEnabled' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacticalSprint_C, HF_AccelerationFrequency) == 0x000B80, "Member 'UGA_Athena_TacticalSprint_C::HF_AccelerationFrequency' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacticalSprint_C, HF_SafetyKillTimer) == 0x000BA8, "Member 'UGA_Athena_TacticalSprint_C::HF_SafetyKillTimer' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacticalSprint_C, GC_EnergyDrain) == 0x000BD0, "Member 'UGA_Athena_TacticalSprint_C::GC_EnergyDrain' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacticalSprint_C, GC_EnergyFullyDrained) == 0x000BD4, "Member 'UGA_Athena_TacticalSprint_C::GC_EnergyFullyDrained' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacticalSprint_C, HF_EnergyCostOnStart) == 0x000BD8, "Member 'UGA_Athena_TacticalSprint_C::HF_EnergyCostOnStart' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacticalSprint_C, HF_EnergyCostOnJump) == 0x000C00, "Member 'UGA_Athena_TacticalSprint_C::HF_EnergyCostOnJump' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacticalSprint_C, HF_EnergyCostOnSlide) == 0x000C28, "Member 'UGA_Athena_TacticalSprint_C::HF_EnergyCostOnSlide' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacticalSprint_C, IsJumping) == 0x000C50, "Member 'UGA_Athena_TacticalSprint_C::IsJumping' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacticalSprint_C, Timer_FallingTimeout) == 0x000C58, "Member 'UGA_Athena_TacticalSprint_C::Timer_FallingTimeout' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacticalSprint_C, InfiniteSprint) == 0x000C60, "Member 'UGA_Athena_TacticalSprint_C::InfiniteSprint' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacticalSprint_C, Timer_SafetyKill) == 0x000C68, "Member 'UGA_Athena_TacticalSprint_C::Timer_SafetyKill' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacticalSprint_C, DebuggingDisplayLogsOnScreen) == 0x000C70, "Member 'UGA_Athena_TacticalSprint_C::DebuggingDisplayLogsOnScreen' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacticalSprint_C, CachedTacticalSprintComponent) == 0x000C78, "Member 'UGA_Athena_TacticalSprint_C::CachedTacticalSprintComponent' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacticalSprint_C, HF_TimeFallingAllowedBeforeCanceling) == 0x000C80, "Member 'UGA_Athena_TacticalSprint_C::HF_TimeFallingAllowedBeforeCanceling' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacticalSprint_C, WaitForPrimaryInputPress) == 0x000CA8, "Member 'UGA_Athena_TacticalSprint_C::WaitForPrimaryInputPress' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacticalSprint_C, TagSprintFailed) == 0x000CB0, "Member 'UGA_Athena_TacticalSprint_C::TagSprintFailed' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacticalSprint_C, TagSprintFailed_LowEnergy) == 0x000CD0, "Member 'UGA_Athena_TacticalSprint_C::TagSprintFailed_LowEnergy' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacticalSprint_C, HF_SpeedMultiplier) == 0x000CF0, "Member 'UGA_Athena_TacticalSprint_C::HF_SpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacticalSprint_C, HF_JumpHeightMultiplier) == 0x000D18, "Member 'UGA_Athena_TacticalSprint_C::HF_JumpHeightMultiplier' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacticalSprint_C, HF_EnergyCostPerSecond) == 0x000D40, "Member 'UGA_Athena_TacticalSprint_C::HF_EnergyCostPerSecond' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacticalSprint_C, HF_MaxEnergy) == 0x000D68, "Member 'UGA_Athena_TacticalSprint_C::HF_MaxEnergy' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacticalSprint_C, SingleStackSpeedMultiplier) == 0x000D90, "Member 'UGA_Athena_TacticalSprint_C::SingleStackSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacticalSprint_C, SingleStackJumpZMultiplier) == 0x000D94, "Member 'UGA_Athena_TacticalSprint_C::SingleStackJumpZMultiplier' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacticalSprint_C, Sprint_Accel_GE) == 0x000D98, "Member 'UGA_Athena_TacticalSprint_C::Sprint_Accel_GE' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacticalSprint_C, UseNewAccelMethod) == 0x000DA0, "Member 'UGA_Athena_TacticalSprint_C::UseNewAccelMethod' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacticalSprint_C, HF_ShouldUseNewAccelMethod) == 0x000DA8, "Member 'UGA_Athena_TacticalSprint_C::HF_ShouldUseNewAccelMethod' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacticalSprint_C, LevelForLookupOfShouldUseNewAccelMethod) == 0x000DD0, "Member 'UGA_Athena_TacticalSprint_C::LevelForLookupOfShouldUseNewAccelMethod' has a wrong offset!");

}

