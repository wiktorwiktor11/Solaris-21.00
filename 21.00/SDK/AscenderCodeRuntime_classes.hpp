#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AscenderCodeRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// Class AscenderCodeRuntime.FortAscenderZipline
// 0x0338 (0x0F08 - 0x0BD0)
class AFortAscenderZipline : public AFortAthenaSplineZipline
{
public:
	class FName                                   SplineTopAttachPointName;                          // 0x0BD0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAutoFindSplineEndLocation;                        // 0x0BD4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_BD5[0x3];                                      // 0x0BD5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SplineOffsetFromGround;                            // 0x0BD8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CableOffsetFromSplineEnd;                          // 0x0BDC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SplineLength;                                      // 0x0BE0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_BE4[0x4];                                      // 0x0BE4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            SplineStaticMesh;                                  // 0x0BE8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESplineMeshAxis                               MeshForwardAxis;                                   // 0x0BF0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHandleReturning;                                  // 0x0BF1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_BF2[0x2];                                      // 0x0BF2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HandleReturnSpeed;                                 // 0x0BF4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCableDropping;                                    // 0x0BF8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_BF9[0x3];                                      // 0x0BF9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CableDropSpeed;                                    // 0x0BFC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         YawRotationOffsetWhileUsingHandle;                 // 0x0C00(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         YawRotationOffsetWhileSlidingDown;                 // 0x0C04(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseComplexSplineCollision;                        // 0x0C08(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C09[0x3];                                      // 0x0C09(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SimpleSplineCollisionRadius;                       // 0x0C0C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SimpleSplineCollisionHeightExtension;              // 0x0C10(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C14[0x4];                                      // 0x0C14(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         DescendMinDistanceFromBottom;                      // 0x0C18(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         AscendReachedEndHorizontalLaunchSpeed;             // 0x0C40(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         AscendReachedEndVerticalLaunchSpeed;               // 0x0C68(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         AscendJumpedOffHorizontalLaunchSpeed;              // 0x0C90(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         AscendJumpedOffVerticalLaunchSpeed;                // 0x0CB8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         DescendReachedEndHorizontalLaunchSpeed;            // 0x0CE0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         DescendReachedEndVerticalLaunchSpeed;              // 0x0D08(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         DescendJumpedOffHorizontalLaunchSpeed;             // 0x0D30(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         DescendJumpedOffVerticalLaunchSpeed;               // 0x0D58(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         HandleActorHitPlayerHorizontalLaunchSpeed;         // 0x0D80(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         HandleActorHitPlayerVerticalLaunchSpeed;           // 0x0DA8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FVector                                HandleDestroyBuildingsOverlapExtents;              // 0x0DD0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                PlayerDestroyBuildingsOverlapExtents;              // 0x0DE8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                InitialSplineEndLocation;                          // 0x0E00(0x0018)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                CurrentSplineEndLocation;                          // 0x0E18(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                TargetSplineEndLocation;                           // 0x0E30(0x0018)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                CurrentHandleLocation;                             // 0x0E48(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UPrimitiveComponent>     CurrentInteractComponent;                          // 0x0E60(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AFortPlayerPawn*                        PawnUsingHandle;                                   // 0x0E68(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AFortPlayerPawn>         PreviousPawnUsingHandle;                           // 0x0E70(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USplineMeshComponent*                   SplineMesh;                                        // 0x0E78(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCapsuleComponent*                      SimpleSplineMeshCollision;                         // 0x0E80(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ABuildingActor>          FloorActor;                                        // 0x0E88(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TWeakObjectPtr<class AFortPlayerPawn>> RotationLockedPawns;                               // 0x0E90(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_EA0[0x68];                                     // 0x0EA0(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_HandlePlayerStartedUsingHandle(class AFortPlayerPawn* Player);
	void BP_HandlePlayerStoppedUsingHandle(class AFortPlayerPawn* Player);
	void BP_HandleStartedLoweringCable();
	void BP_HandleStartedLoweringHandle();
	void BP_HandleStoppedLoweringCable();
	void BP_HandleStoppedLoweringHandle();
	void BP_HandleUpdatedLoweringCable();
	void BP_HandleUpdatedLoweringHandle();
	void HandleFloorActorDestroyed(class AActor* Actor);
	void HandleFloorActorHealthChanged();
	void HandlePawnUsingHandleDied(class AFortPawn* DeadPawn);
	void OnRep_InitialSplineEndLocation();
	void OnRep_PawnUsingHandle();
	void OnRep_TargetSplineEndLocation();

	void ApplyStructureDamage(class ABuildingSMActor* BuildingActor, class AActor* DamageSource) const;
	class UPrimitiveComponent* GetHandleComponent() const;
	class UPrimitiveComponent* GetInteractComponentOverride(class AFortPlayerPawn* InteractingPawn, class UPrimitiveComponent* InteractComponent) const;
	class AFortPlayerPawn* GetPawnUsingHandle() const;
	class UPrimitiveComponent* GetTopComponent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAscenderZipline">();
	}
	static class AFortAscenderZipline* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortAscenderZipline>();
	}
};
static_assert(alignof(AFortAscenderZipline) == 0x000008, "Wrong alignment on AFortAscenderZipline");
static_assert(sizeof(AFortAscenderZipline) == 0x000F08, "Wrong size on AFortAscenderZipline");
static_assert(offsetof(AFortAscenderZipline, SplineTopAttachPointName) == 0x000BD0, "Member 'AFortAscenderZipline::SplineTopAttachPointName' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, bAutoFindSplineEndLocation) == 0x000BD4, "Member 'AFortAscenderZipline::bAutoFindSplineEndLocation' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, SplineOffsetFromGround) == 0x000BD8, "Member 'AFortAscenderZipline::SplineOffsetFromGround' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, CableOffsetFromSplineEnd) == 0x000BDC, "Member 'AFortAscenderZipline::CableOffsetFromSplineEnd' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, SplineLength) == 0x000BE0, "Member 'AFortAscenderZipline::SplineLength' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, SplineStaticMesh) == 0x000BE8, "Member 'AFortAscenderZipline::SplineStaticMesh' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, MeshForwardAxis) == 0x000BF0, "Member 'AFortAscenderZipline::MeshForwardAxis' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, bHandleReturning) == 0x000BF1, "Member 'AFortAscenderZipline::bHandleReturning' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, HandleReturnSpeed) == 0x000BF4, "Member 'AFortAscenderZipline::HandleReturnSpeed' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, bCableDropping) == 0x000BF8, "Member 'AFortAscenderZipline::bCableDropping' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, CableDropSpeed) == 0x000BFC, "Member 'AFortAscenderZipline::CableDropSpeed' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, YawRotationOffsetWhileUsingHandle) == 0x000C00, "Member 'AFortAscenderZipline::YawRotationOffsetWhileUsingHandle' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, YawRotationOffsetWhileSlidingDown) == 0x000C04, "Member 'AFortAscenderZipline::YawRotationOffsetWhileSlidingDown' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, bUseComplexSplineCollision) == 0x000C08, "Member 'AFortAscenderZipline::bUseComplexSplineCollision' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, SimpleSplineCollisionRadius) == 0x000C0C, "Member 'AFortAscenderZipline::SimpleSplineCollisionRadius' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, SimpleSplineCollisionHeightExtension) == 0x000C10, "Member 'AFortAscenderZipline::SimpleSplineCollisionHeightExtension' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, DescendMinDistanceFromBottom) == 0x000C18, "Member 'AFortAscenderZipline::DescendMinDistanceFromBottom' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, AscendReachedEndHorizontalLaunchSpeed) == 0x000C40, "Member 'AFortAscenderZipline::AscendReachedEndHorizontalLaunchSpeed' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, AscendReachedEndVerticalLaunchSpeed) == 0x000C68, "Member 'AFortAscenderZipline::AscendReachedEndVerticalLaunchSpeed' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, AscendJumpedOffHorizontalLaunchSpeed) == 0x000C90, "Member 'AFortAscenderZipline::AscendJumpedOffHorizontalLaunchSpeed' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, AscendJumpedOffVerticalLaunchSpeed) == 0x000CB8, "Member 'AFortAscenderZipline::AscendJumpedOffVerticalLaunchSpeed' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, DescendReachedEndHorizontalLaunchSpeed) == 0x000CE0, "Member 'AFortAscenderZipline::DescendReachedEndHorizontalLaunchSpeed' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, DescendReachedEndVerticalLaunchSpeed) == 0x000D08, "Member 'AFortAscenderZipline::DescendReachedEndVerticalLaunchSpeed' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, DescendJumpedOffHorizontalLaunchSpeed) == 0x000D30, "Member 'AFortAscenderZipline::DescendJumpedOffHorizontalLaunchSpeed' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, DescendJumpedOffVerticalLaunchSpeed) == 0x000D58, "Member 'AFortAscenderZipline::DescendJumpedOffVerticalLaunchSpeed' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, HandleActorHitPlayerHorizontalLaunchSpeed) == 0x000D80, "Member 'AFortAscenderZipline::HandleActorHitPlayerHorizontalLaunchSpeed' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, HandleActorHitPlayerVerticalLaunchSpeed) == 0x000DA8, "Member 'AFortAscenderZipline::HandleActorHitPlayerVerticalLaunchSpeed' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, HandleDestroyBuildingsOverlapExtents) == 0x000DD0, "Member 'AFortAscenderZipline::HandleDestroyBuildingsOverlapExtents' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, PlayerDestroyBuildingsOverlapExtents) == 0x000DE8, "Member 'AFortAscenderZipline::PlayerDestroyBuildingsOverlapExtents' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, InitialSplineEndLocation) == 0x000E00, "Member 'AFortAscenderZipline::InitialSplineEndLocation' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, CurrentSplineEndLocation) == 0x000E18, "Member 'AFortAscenderZipline::CurrentSplineEndLocation' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, TargetSplineEndLocation) == 0x000E30, "Member 'AFortAscenderZipline::TargetSplineEndLocation' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, CurrentHandleLocation) == 0x000E48, "Member 'AFortAscenderZipline::CurrentHandleLocation' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, CurrentInteractComponent) == 0x000E60, "Member 'AFortAscenderZipline::CurrentInteractComponent' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, PawnUsingHandle) == 0x000E68, "Member 'AFortAscenderZipline::PawnUsingHandle' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, PreviousPawnUsingHandle) == 0x000E70, "Member 'AFortAscenderZipline::PreviousPawnUsingHandle' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, SplineMesh) == 0x000E78, "Member 'AFortAscenderZipline::SplineMesh' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, SimpleSplineMeshCollision) == 0x000E80, "Member 'AFortAscenderZipline::SimpleSplineMeshCollision' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, FloorActor) == 0x000E88, "Member 'AFortAscenderZipline::FloorActor' has a wrong offset!");
static_assert(offsetof(AFortAscenderZipline, RotationLockedPawns) == 0x000E90, "Member 'AFortAscenderZipline::RotationLockedPawns' has a wrong offset!");

}

