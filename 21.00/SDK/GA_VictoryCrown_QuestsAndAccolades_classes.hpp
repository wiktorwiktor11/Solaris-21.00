#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_VictoryCrown_QuestsAndAccolades

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "GAT_PassiveAbility_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_VictoryCrown_QuestsAndAccolades.GA_VictoryCrown_QuestsAndAccolades_C
// 0x0100 (0x0C10 - 0x0B10)
class UGA_VictoryCrown_QuestsAndAccolades_C final : public UGAT_PassiveAbility_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0B10(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FGameplayTagContainer                  CrownPickup_QuestTag;                              // 0x0B18(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  KillCrownWearer_QuestTag;                          // 0x0B38(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  KillCrownWearerWhileWearingCrown_QuestTag;         // 0x0B58(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AFortGameModeAthena*                    GameMode;                                          // 0x0B78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FScalableFloat                         PickupAccoladeBlockedInWarmupPhase_;               // 0x0B80(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           Crown_Flare_FX_GC;                                 // 0x0BA8(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BAC[0x4];                                      // 0x0BAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 crown_wearer;                                      // 0x0BB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         Circle_Accolade_Flare_Delay;                       // 0x0BB8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Kill_Accolade_Flare_Delay;                         // 0x0BE0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           Crown_Drop_GC;                                     // 0x0C08(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void Crown_Flare_FX();
	void Crown_Wearer_On_Died(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void EventReceived_0B1984324C0E15BD613ABFB62FFD87B6(const struct FGameplayEventData& Payload);
	void ExecuteUbergraph_GA_VictoryCrown_QuestsAndAccolades(int32 EntryPoint);
	void FailedToActivatePassiveAbility();
	void GamePhaseChange(const TScriptInterface<class IFortSafeZoneInterface>& SafeZoneInterface, const EAthenaGamePhaseStep GamePhaseStep);
	void K2_ActivateAbility();
	void K2_OnEndAbility(bool bWasCancelled);
	void PhaseStepChanged(const TScriptInterface<class IFortSafeZoneInterface>& SafeZoneInterface, const EAthenaGamePhaseStep GamePhaseStep);
	void Trigger_Accolade(class AFortPlayerController* Target, EFortQuestObjectiveStatEvent Type, const struct FGameplayTagContainer& AdditionalSourceTags);
	void Trigger_Pickup_Accolade(class AActor* Actor);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_VictoryCrown_QuestsAndAccolades_C">();
	}
	static class UGA_VictoryCrown_QuestsAndAccolades_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_VictoryCrown_QuestsAndAccolades_C>();
	}
};
static_assert(alignof(UGA_VictoryCrown_QuestsAndAccolades_C) == 0x000008, "Wrong alignment on UGA_VictoryCrown_QuestsAndAccolades_C");
static_assert(sizeof(UGA_VictoryCrown_QuestsAndAccolades_C) == 0x000C10, "Wrong size on UGA_VictoryCrown_QuestsAndAccolades_C");
static_assert(offsetof(UGA_VictoryCrown_QuestsAndAccolades_C, UberGraphFrame) == 0x000B10, "Member 'UGA_VictoryCrown_QuestsAndAccolades_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_VictoryCrown_QuestsAndAccolades_C, CrownPickup_QuestTag) == 0x000B18, "Member 'UGA_VictoryCrown_QuestsAndAccolades_C::CrownPickup_QuestTag' has a wrong offset!");
static_assert(offsetof(UGA_VictoryCrown_QuestsAndAccolades_C, KillCrownWearer_QuestTag) == 0x000B38, "Member 'UGA_VictoryCrown_QuestsAndAccolades_C::KillCrownWearer_QuestTag' has a wrong offset!");
static_assert(offsetof(UGA_VictoryCrown_QuestsAndAccolades_C, KillCrownWearerWhileWearingCrown_QuestTag) == 0x000B58, "Member 'UGA_VictoryCrown_QuestsAndAccolades_C::KillCrownWearerWhileWearingCrown_QuestTag' has a wrong offset!");
static_assert(offsetof(UGA_VictoryCrown_QuestsAndAccolades_C, GameMode) == 0x000B78, "Member 'UGA_VictoryCrown_QuestsAndAccolades_C::GameMode' has a wrong offset!");
static_assert(offsetof(UGA_VictoryCrown_QuestsAndAccolades_C, PickupAccoladeBlockedInWarmupPhase_) == 0x000B80, "Member 'UGA_VictoryCrown_QuestsAndAccolades_C::PickupAccoladeBlockedInWarmupPhase_' has a wrong offset!");
static_assert(offsetof(UGA_VictoryCrown_QuestsAndAccolades_C, Crown_Flare_FX_GC) == 0x000BA8, "Member 'UGA_VictoryCrown_QuestsAndAccolades_C::Crown_Flare_FX_GC' has a wrong offset!");
static_assert(offsetof(UGA_VictoryCrown_QuestsAndAccolades_C, crown_wearer) == 0x000BB0, "Member 'UGA_VictoryCrown_QuestsAndAccolades_C::crown_wearer' has a wrong offset!");
static_assert(offsetof(UGA_VictoryCrown_QuestsAndAccolades_C, Circle_Accolade_Flare_Delay) == 0x000BB8, "Member 'UGA_VictoryCrown_QuestsAndAccolades_C::Circle_Accolade_Flare_Delay' has a wrong offset!");
static_assert(offsetof(UGA_VictoryCrown_QuestsAndAccolades_C, Kill_Accolade_Flare_Delay) == 0x000BE0, "Member 'UGA_VictoryCrown_QuestsAndAccolades_C::Kill_Accolade_Flare_Delay' has a wrong offset!");
static_assert(offsetof(UGA_VictoryCrown_QuestsAndAccolades_C, Crown_Drop_GC) == 0x000C08, "Member 'UGA_VictoryCrown_QuestsAndAccolades_C::Crown_Drop_GC' has a wrong offset!");

}

