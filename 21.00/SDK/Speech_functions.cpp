#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Speech

#include "Basic.hpp"

#include "Speech_classes.hpp"
#include "Speech_parameters.hpp"


namespace SDK
{

// Function Speech.Speech_C.SwapSpeakerAndListener
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void USpeech_C::SwapSpeakerAndListener()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Speech_C", "SwapSpeakerAndListener");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Speech.Speech_C.HandleVOPlayback
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FConversationContext             Context                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void USpeech_C::HandleVOPlayback(const struct FConversationContext& Context) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Speech_C", "HandleVOPlayback");

	Params::Speech_C_HandleVOPlayback Parms{};

	Parms.Context = std::move(Context);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Speech.Speech_C.GetParticipantNameStyled
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FConversationContext             Context                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// struct FGameplayTag                     ParticipantTag                                         (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm)

class FText USpeech_C::GetParticipantNameStyled(const struct FConversationContext& Context, const struct FGameplayTag& ParticipantTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Speech_C", "GetParticipantNameStyled");

	Params::Speech_C_GetParticipantNameStyled Parms{};

	Parms.Context = std::move(Context);
	Parms.ParticipantTag = std::move(ParticipantTag);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Speech.Speech_C.GetNodeBodyColor
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FLinearColor                     BodyColor                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool USpeech_C::GetNodeBodyColor(struct FLinearColor* BodyColor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Speech_C", "GetNodeBodyColor");

	Params::Speech_C_GetNodeBodyColor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BodyColor != nullptr)
		*BodyColor = std::move(Parms.BodyColor);

	return Parms.ReturnValue;
}


// Function Speech.Speech_C.ExecuteTaskNode
// (BlueprintAuthorityOnly, Event, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FConversationContext             Context                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// struct FConversationTaskResult          ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FConversationTaskResult USpeech_C::ExecuteTaskNode(const struct FConversationContext& Context) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Speech_C", "ExecuteTaskNode");

	Params::Speech_C_ExecuteTaskNode Parms{};

	Parms.Context = std::move(Context);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Speech.Speech_C.ExecuteClientEffects
// (BlueprintCosmetic, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FConversationContext             Context                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void USpeech_C::ExecuteClientEffects(const struct FConversationContext& Context) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Speech_C", "ExecuteClientEffects");

	Params::Speech_C_ExecuteClientEffects Parms{};

	Parms.Context = std::move(Context);

	UObject::ProcessEvent(Func, &Parms);
}

}

