#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AmbientAudio

#include "Basic.hpp"

#include "GameplayTags_0_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AudioGameplay_structs.hpp"


namespace SDK
{

// Enum AmbientAudio.EAmbientAudioEntryActionType
// NumValues: 0x0005
enum class EAmbientAudioEntryActionType : uint8
{
	Added                                    = 0,
	Updated                                  = 1,
	Removed                                  = 2,
	Count                                    = 3,
	EAmbientAudioEntryActionType_MAX         = 4,
};

// Enum AmbientAudio.EAmbientAudioTagActionType
// NumValues: 0x0004
enum class EAmbientAudioTagActionType : uint8
{
	Added                                    = 0,
	Removed                                  = 1,
	Count                                    = 2,
	EAmbientAudioTagActionType_MAX           = 3,
};

// ScriptStruct AmbientAudio.AmbientAudioBase
// 0x00C0 (0x00C0 - 0x0000)
struct FAmbientAudioBase
{
public:
	TSoftObjectPtr<class USoundBase>              sound;                                             // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      Requirements;                                      // 0x0028(0x0048)(NativeAccessSpecifierPublic)
	struct FAudioGameplayRequirements             PlaybackRequirements;                              // 0x0070(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAmbientAudioBase) == 0x000008, "Wrong alignment on FAmbientAudioBase");
static_assert(sizeof(FAmbientAudioBase) == 0x0000C0, "Wrong size on FAmbientAudioBase");
static_assert(offsetof(FAmbientAudioBase, sound) == 0x000000, "Member 'FAmbientAudioBase::sound' has a wrong offset!");
static_assert(offsetof(FAmbientAudioBase, Requirements) == 0x000028, "Member 'FAmbientAudioBase::Requirements' has a wrong offset!");
static_assert(offsetof(FAmbientAudioBase, PlaybackRequirements) == 0x000070, "Member 'FAmbientAudioBase::PlaybackRequirements' has a wrong offset!");

// ScriptStruct AmbientAudio.AmbientAudioLoop
// 0x0000 (0x00C0 - 0x00C0)
struct FAmbientAudioLoop final : public FAmbientAudioBase
{
};
static_assert(alignof(FAmbientAudioLoop) == 0x000008, "Wrong alignment on FAmbientAudioLoop");
static_assert(sizeof(FAmbientAudioLoop) == 0x0000C0, "Wrong size on FAmbientAudioLoop");

// ScriptStruct AmbientAudio.AmbientAudioOneShot
// 0x0020 (0x00E0 - 0x00C0)
struct FAmbientAudioOneShot final : public FAmbientAudioBase
{
public:
	struct FVector2D                              RetriggerTimeRange;                                // 0x00C0(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TriggerDistanceRange;                              // 0x00D0(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAmbientAudioOneShot) == 0x000008, "Wrong alignment on FAmbientAudioOneShot");
static_assert(sizeof(FAmbientAudioOneShot) == 0x0000E0, "Wrong size on FAmbientAudioOneShot");
static_assert(offsetof(FAmbientAudioOneShot, RetriggerTimeRange) == 0x0000C0, "Member 'FAmbientAudioOneShot::RetriggerTimeRange' has a wrong offset!");
static_assert(offsetof(FAmbientAudioOneShot, TriggerDistanceRange) == 0x0000D0, "Member 'FAmbientAudioOneShot::TriggerDistanceRange' has a wrong offset!");

}

