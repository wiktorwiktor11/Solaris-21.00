#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ControlRig

#include "Basic.hpp"

#include "MovieSceneTracks_structs.hpp"
#include "MovieSceneTracks_classes.hpp"
#include "RigVM_structs.hpp"
#include "ControlRig_structs.hpp"
#include "Engine_classes.hpp"
#include "MovieScene_structs.hpp"
#include "MovieScene_classes.hpp"
#include "PropertyPath_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "LevelSequence_classes.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class ControlRig.ControlRigShapeActor
// 0x0028 (0x0298 - 0x0270)
class AControlRigShapeActor final : public AActor
{
public:
	class USceneComponent*                        ActorRootComponent;                                // 0x0270(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   StaticMeshComponent;                               // 0x0278(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ControlRigIndex;                                   // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ControlName;                                       // 0x0284(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ShapeName;                                         // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ColorParameterName;                                // 0x028C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnabled : 1;                                      // 0x0290(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bSelected : 1;                                     // 0x0290(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bSelectable : 1;                                   // 0x0290(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bHovered : 1;                                      // 0x0290(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnEnabledChanged(bool bIsEnabled);
	void OnHoveredChanged(bool bIsSelected);
	void OnManipulatingChanged(bool bIsManipulating);
	void OnSelectionChanged(bool bIsSelected);
	void OnTransformChanged(const struct FTransform& NewTransform);
	void SetEnabled(bool bInEnabled);
	void SetGlobalTransform(const struct FTransform& InTransform);
	void SetHovered(bool bInHovered);
	void SetSelectable(bool bInSelectable);
	void SetSelected(bool bInSelected);

	struct FTransform GetGlobalTransform() const;
	bool IsEnabled() const;
	bool IsHovered() const;
	bool IsSelectedInEditor() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigShapeActor">();
	}
	static class AControlRigShapeActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AControlRigShapeActor>();
	}
};
static_assert(alignof(AControlRigShapeActor) == 0x000008, "Wrong alignment on AControlRigShapeActor");
static_assert(sizeof(AControlRigShapeActor) == 0x000298, "Wrong size on AControlRigShapeActor");
static_assert(offsetof(AControlRigShapeActor, ActorRootComponent) == 0x000270, "Member 'AControlRigShapeActor::ActorRootComponent' has a wrong offset!");
static_assert(offsetof(AControlRigShapeActor, StaticMeshComponent) == 0x000278, "Member 'AControlRigShapeActor::StaticMeshComponent' has a wrong offset!");
static_assert(offsetof(AControlRigShapeActor, ControlRigIndex) == 0x000280, "Member 'AControlRigShapeActor::ControlRigIndex' has a wrong offset!");
static_assert(offsetof(AControlRigShapeActor, ControlName) == 0x000284, "Member 'AControlRigShapeActor::ControlName' has a wrong offset!");
static_assert(offsetof(AControlRigShapeActor, ShapeName) == 0x000288, "Member 'AControlRigShapeActor::ShapeName' has a wrong offset!");
static_assert(offsetof(AControlRigShapeActor, ColorParameterName) == 0x00028C, "Member 'AControlRigShapeActor::ColorParameterName' has a wrong offset!");

// Class ControlRig.ControlRig
// 0x0468 (0x0490 - 0x0028)
#pragma pack(push, 0x1)
class alignas(0x10) UControlRig : public UObject
{
public:
	uint8                                         Pad_28[0x1E];                                      // 0x0028(0x001E)(Fixing Size After Last Property [ Dumper-7 ])
	ERigExecutionType                             ExecutionType;                                     // 0x0046(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47[0x9];                                       // 0x0047(0x0009)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigVMRuntimeSettings                  VMRuntimeSettings;                                 // 0x0050(0x0050)(NativeAccessSpecifierPublic)
	TMap<struct FRigElementKey, struct FRigControlElementCustomization> ControlCustomizations;                             // 0x00A0(0x0050)(NativeAccessSpecifierPrivate)
	class URigVM*                                 VM;                                                // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URigHierarchy*                          DynamicHierarchy;                                  // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UControlRigShapeLibrary> GizmoLibrary;                                      // 0x0100(0x0028)(Deprecated, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<TSoftObjectPtr<class UControlRigShapeLibrary>> ShapeLibraries;                                    // 0x0128(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_138[0x10];                                     // 0x0138(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FCachedPropertyPath> InputProperties;                                   // 0x0148(0x0050)(Deprecated, NativeAccessSpecifierPrivate)
	TMap<class FName, struct FCachedPropertyPath> OutputProperties;                                  // 0x0198(0x0050)(Deprecated, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1E8[0xA0];                                     // 0x01E8(0x00A0)(Fixing Size After Last Property [ Dumper-7 ])
	struct FControlRigDrawContainer               DrawContainer;                                     // 0x0288(0x0018)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A0[0x18];                                     // 0x02A0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimationDataSourceRegistry*           DataSourceRegistry;                                // 0x02B8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           EventQueue;                                        // 0x02C0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D0[0xA8];                                     // 0x02D0(0x00A8)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigInfluenceMapPerEvent               Influences;                                        // 0x0378(0x0060)(NativeAccessSpecifierPrivate)
	class UControlRig*                            InteractionRig;                                    // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UControlRig>                InteractionRigClass;                               // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UAssetUserData*>                 AssetUserData;                                     // 0x03E8(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_3F8[0x90];                                     // 0x03F8(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static TArray<class UControlRig*> FindControlRigs(class UObject* Outer_0, TSubclassOf<class UControlRig> OptionalClass);

	bool ClearControlSelection();
	void Execute(const EControlRigState State, const class FName& InEventName);
	class URigHierarchy* GetHierarchy();
	class URigVM* GetVM();
	void RequestInit();
	void RequestSetup();
	void SelectControl(const class FName& InControlName, bool bSelect);
	void SetAbsoluteAndDeltaTime(float InAbsoluteTime, float InDeltaTime);
	void SetAbsoluteTime(float InAbsoluteTime, bool InSetDeltaTimeZero);
	void SetDeltaTime(float InDeltaTime);
	void SetFramesPerSecond(float InFramesPerSecond);
	void SetInteractionRig(class UControlRig* InInteractionRig);
	void SetInteractionRigClass(TSubclassOf<class UControlRig> InInteractionRigClass);
	bool SetVariableFromString(const class FName& InVariableName, const class FString& InValue);

	bool CanExecute() const;
	TArray<class FName> CurrentControlSelection() const;
	float GetAbsoluteTime() const;
	float GetCurrentFramesPerSecond() const;
	class UControlRig* GetInteractionRig() const;
	TSubclassOf<class UControlRig> GetInteractionRigClass() const;
	TArray<class FName> GetScriptAccessibleVariables() const;
	TArray<class FName> GetSupportedEvents() const;
	class FString GetVariableAsString(const class FName& InVariableName) const;
	class FName GetVariableType(const class FName& InVariableName) const;
	bool IsControlSelected(const class FName& InControlName) const;
	bool SupportsEvent(const class FName& InEventName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRig">();
	}
	static class UControlRig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRig>();
	}
};
#pragma pack(pop)
static_assert(alignof(UControlRig) == 0x000010, "Wrong alignment on UControlRig");
static_assert(sizeof(UControlRig) == 0x000490, "Wrong size on UControlRig");
static_assert(offsetof(UControlRig, ExecutionType) == 0x000046, "Member 'UControlRig::ExecutionType' has a wrong offset!");
static_assert(offsetof(UControlRig, VMRuntimeSettings) == 0x000050, "Member 'UControlRig::VMRuntimeSettings' has a wrong offset!");
static_assert(offsetof(UControlRig, ControlCustomizations) == 0x0000A0, "Member 'UControlRig::ControlCustomizations' has a wrong offset!");
static_assert(offsetof(UControlRig, VM) == 0x0000F0, "Member 'UControlRig::VM' has a wrong offset!");
static_assert(offsetof(UControlRig, DynamicHierarchy) == 0x0000F8, "Member 'UControlRig::DynamicHierarchy' has a wrong offset!");
static_assert(offsetof(UControlRig, GizmoLibrary) == 0x000100, "Member 'UControlRig::GizmoLibrary' has a wrong offset!");
static_assert(offsetof(UControlRig, ShapeLibraries) == 0x000128, "Member 'UControlRig::ShapeLibraries' has a wrong offset!");
static_assert(offsetof(UControlRig, InputProperties) == 0x000148, "Member 'UControlRig::InputProperties' has a wrong offset!");
static_assert(offsetof(UControlRig, OutputProperties) == 0x000198, "Member 'UControlRig::OutputProperties' has a wrong offset!");
static_assert(offsetof(UControlRig, DrawContainer) == 0x000288, "Member 'UControlRig::DrawContainer' has a wrong offset!");
static_assert(offsetof(UControlRig, DataSourceRegistry) == 0x0002B8, "Member 'UControlRig::DataSourceRegistry' has a wrong offset!");
static_assert(offsetof(UControlRig, EventQueue) == 0x0002C0, "Member 'UControlRig::EventQueue' has a wrong offset!");
static_assert(offsetof(UControlRig, Influences) == 0x000378, "Member 'UControlRig::Influences' has a wrong offset!");
static_assert(offsetof(UControlRig, InteractionRig) == 0x0003D8, "Member 'UControlRig::InteractionRig' has a wrong offset!");
static_assert(offsetof(UControlRig, InteractionRigClass) == 0x0003E0, "Member 'UControlRig::InteractionRigClass' has a wrong offset!");
static_assert(offsetof(UControlRig, AssetUserData) == 0x0003E8, "Member 'UControlRig::AssetUserData' has a wrong offset!");

// Class ControlRig.AdditiveControlRig
// 0x0010 (0x04A0 - 0x0490)
class UAdditiveControlRig final : public UControlRig
{
public:
	uint8                                         Pad_488[0x18];                                     // 0x0488(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AdditiveControlRig">();
	}
	static class UAdditiveControlRig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAdditiveControlRig>();
	}
};
static_assert(alignof(UAdditiveControlRig) == 0x000010, "Wrong alignment on UAdditiveControlRig");
static_assert(sizeof(UAdditiveControlRig) == 0x0004A0, "Wrong size on UAdditiveControlRig");

// Class ControlRig.ControlRigAnimInstance
// 0x0000 (0x0350 - 0x0350)
class UControlRigAnimInstance final : public UAnimInstance
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigAnimInstance">();
	}
	static class UControlRigAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigAnimInstance>();
	}
};
static_assert(alignof(UControlRigAnimInstance) == 0x000010, "Wrong alignment on UControlRigAnimInstance");
static_assert(sizeof(UControlRigAnimInstance) == 0x000350, "Wrong size on UControlRigAnimInstance");

// Class ControlRig.ControlRigBlueprintGeneratedClass
// 0x0000 (0x0328 - 0x0328)
class UControlRigBlueprintGeneratedClass final : public UBlueprintGeneratedClass
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigBlueprintGeneratedClass">();
	}
	static class UControlRigBlueprintGeneratedClass* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigBlueprintGeneratedClass>();
	}
};
static_assert(alignof(UControlRigBlueprintGeneratedClass) == 0x000008, "Wrong alignment on UControlRigBlueprintGeneratedClass");
static_assert(sizeof(UControlRigBlueprintGeneratedClass) == 0x000328, "Wrong size on UControlRigBlueprintGeneratedClass");

// Class ControlRig.ControlRigComponent
// 0x0150 (0x0680 - 0x0530)
class UControlRigComponent final : public UPrimitiveComponent
{
public:
	TSubclassOf<class UControlRig>                ControlRigClass;                                   // 0x0530(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UControlRigComponent* Component)> OnPreInitializeDelegate;                           // 0x0538(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UControlRigComponent* Component)> OnPostInitializeDelegate;                          // 0x0548(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UControlRigComponent* Component)> OnPreSetupDelegate;                                // 0x0558(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UControlRigComponent* Component)> OnPostSetupDelegate;                               // 0x0568(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UControlRigComponent* Component)> OnPreForwardsSolveDelegate;                        // 0x0578(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UControlRigComponent* Component)> OnPostForwardsSolveDelegate;                       // 0x0588(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FControlRigComponentMappedElement> UserDefinedElements;                               // 0x0598(0x0010)(Edit, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FControlRigComponentMappedElement> MappedElements;                                    // 0x05A8(0x0010)(Edit, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bEnableLazyEvaluation;                             // 0x05B8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5B9[0x3];                                      // 0x05B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LazyEvaluationPositionThreshold;                   // 0x05BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LazyEvaluationRotationThreshold;                   // 0x05C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LazyEvaluationScaleThreshold;                      // 0x05C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetTransformBeforeTick;                         // 0x05C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetInitialsBeforeSetup;                         // 0x05C9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateRigOnTick;                                  // 0x05CA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateInEditor;                                   // 0x05CB(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawBones;                                        // 0x05CC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowDebugDrawing;                                 // 0x05CD(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5CE[0x2];                                      // 0x05CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UControlRig*                            ControlRig;                                        // 0x05D0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5D8[0xA8];                                     // 0x05D8(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddMappedCompleteSkeletalMesh(class USkeletalMeshComponent* SkeletalMeshComponent);
	void AddMappedComponents(const TArray<struct FControlRigComponentMappedComponent>& Components);
	void AddMappedElements(const TArray<struct FControlRigComponentMappedElement>& NewMappedElements);
	void AddMappedSkeletalMesh(class USkeletalMeshComponent* SkeletalMeshComponent, const TArray<struct FControlRigComponentMappedBone>& Bones, const TArray<struct FControlRigComponentMappedCurve>& Curves);
	bool CanExecute();
	void ClearMappedElements();
	bool DoesElementExist(class FName Name_0, ERigElementType ElementType);
	struct FTransform GetBoneTransform(class FName BoneName, EControlRigComponentSpace Space);
	bool GetControlBool(class FName ControlName);
	float GetControlFloat(class FName ControlName);
	int32 GetControlInt(class FName ControlName);
	struct FTransform GetControlOffset(class FName ControlName, EControlRigComponentSpace Space);
	struct FVector GetControlPosition(class FName ControlName, EControlRigComponentSpace Space);
	class UControlRig* GetControlRig();
	struct FRotator GetControlRotator(class FName ControlName, EControlRigComponentSpace Space);
	struct FVector GetControlScale(class FName ControlName, EControlRigComponentSpace Space);
	struct FTransform GetControlTransform(class FName ControlName, EControlRigComponentSpace Space);
	struct FVector2D GetControlVector2D(class FName ControlName);
	TArray<class FName> GetElementNames(ERigElementType ElementType);
	struct FTransform GetInitialBoneTransform(class FName BoneName, EControlRigComponentSpace Space);
	struct FTransform GetInitialSpaceTransform(class FName SpaceName, EControlRigComponentSpace Space);
	struct FTransform GetSpaceTransform(class FName SpaceName, EControlRigComponentSpace Space);
	void Initialize();
	void OnPostForwardsSolve(class UControlRigComponent* Component);
	void OnPostInitialize(class UControlRigComponent* Component);
	void OnPostSetup(class UControlRigComponent* Component);
	void OnPreForwardsSolve(class UControlRigComponent* Component);
	void OnPreInitialize(class UControlRigComponent* Component);
	void OnPreSetup(class UControlRigComponent* Component);
	void SetBoneInitialTransformsFromSkeletalMesh(class USkeletalMesh* InSkeletalMesh);
	void SetBoneTransform(class FName BoneName, const struct FTransform& Transform, EControlRigComponentSpace Space, float Weight, bool bPropagateToChildren);
	void SetControlBool(class FName ControlName, bool Value);
	void SetControlFloat(class FName ControlName, float Value);
	void SetControlInt(class FName ControlName, int32 Value);
	void SetControlOffset(class FName ControlName, const struct FTransform& OffsetTransform, EControlRigComponentSpace Space);
	void SetControlPosition(class FName ControlName, const struct FVector& Value, EControlRigComponentSpace Space);
	void SetControlRotator(class FName ControlName, const struct FRotator& Value, EControlRigComponentSpace Space);
	void SetControlScale(class FName ControlName, const struct FVector& Value, EControlRigComponentSpace Space);
	void SetControlTransform(class FName ControlName, const struct FTransform& Value, EControlRigComponentSpace Space);
	void SetControlVector2D(class FName ControlName, const struct FVector2D& Value);
	void SetInitialBoneTransform(class FName BoneName, const struct FTransform& InitialTransform, EControlRigComponentSpace Space, bool bPropagateToChildren);
	void SetInitialSpaceTransform(class FName SpaceName, const struct FTransform& InitialTransform, EControlRigComponentSpace Space);
	void SetMappedElements(const TArray<struct FControlRigComponentMappedElement>& NewMappedElements);
	void Update(float DeltaTime);

	float GetAbsoluteTime() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigComponent">();
	}
	static class UControlRigComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigComponent>();
	}
};
static_assert(alignof(UControlRigComponent) == 0x000010, "Wrong alignment on UControlRigComponent");
static_assert(sizeof(UControlRigComponent) == 0x000680, "Wrong size on UControlRigComponent");
static_assert(offsetof(UControlRigComponent, ControlRigClass) == 0x000530, "Member 'UControlRigComponent::ControlRigClass' has a wrong offset!");
static_assert(offsetof(UControlRigComponent, OnPreInitializeDelegate) == 0x000538, "Member 'UControlRigComponent::OnPreInitializeDelegate' has a wrong offset!");
static_assert(offsetof(UControlRigComponent, OnPostInitializeDelegate) == 0x000548, "Member 'UControlRigComponent::OnPostInitializeDelegate' has a wrong offset!");
static_assert(offsetof(UControlRigComponent, OnPreSetupDelegate) == 0x000558, "Member 'UControlRigComponent::OnPreSetupDelegate' has a wrong offset!");
static_assert(offsetof(UControlRigComponent, OnPostSetupDelegate) == 0x000568, "Member 'UControlRigComponent::OnPostSetupDelegate' has a wrong offset!");
static_assert(offsetof(UControlRigComponent, OnPreForwardsSolveDelegate) == 0x000578, "Member 'UControlRigComponent::OnPreForwardsSolveDelegate' has a wrong offset!");
static_assert(offsetof(UControlRigComponent, OnPostForwardsSolveDelegate) == 0x000588, "Member 'UControlRigComponent::OnPostForwardsSolveDelegate' has a wrong offset!");
static_assert(offsetof(UControlRigComponent, UserDefinedElements) == 0x000598, "Member 'UControlRigComponent::UserDefinedElements' has a wrong offset!");
static_assert(offsetof(UControlRigComponent, MappedElements) == 0x0005A8, "Member 'UControlRigComponent::MappedElements' has a wrong offset!");
static_assert(offsetof(UControlRigComponent, bEnableLazyEvaluation) == 0x0005B8, "Member 'UControlRigComponent::bEnableLazyEvaluation' has a wrong offset!");
static_assert(offsetof(UControlRigComponent, LazyEvaluationPositionThreshold) == 0x0005BC, "Member 'UControlRigComponent::LazyEvaluationPositionThreshold' has a wrong offset!");
static_assert(offsetof(UControlRigComponent, LazyEvaluationRotationThreshold) == 0x0005C0, "Member 'UControlRigComponent::LazyEvaluationRotationThreshold' has a wrong offset!");
static_assert(offsetof(UControlRigComponent, LazyEvaluationScaleThreshold) == 0x0005C4, "Member 'UControlRigComponent::LazyEvaluationScaleThreshold' has a wrong offset!");
static_assert(offsetof(UControlRigComponent, bResetTransformBeforeTick) == 0x0005C8, "Member 'UControlRigComponent::bResetTransformBeforeTick' has a wrong offset!");
static_assert(offsetof(UControlRigComponent, bResetInitialsBeforeSetup) == 0x0005C9, "Member 'UControlRigComponent::bResetInitialsBeforeSetup' has a wrong offset!");
static_assert(offsetof(UControlRigComponent, bUpdateRigOnTick) == 0x0005CA, "Member 'UControlRigComponent::bUpdateRigOnTick' has a wrong offset!");
static_assert(offsetof(UControlRigComponent, bUpdateInEditor) == 0x0005CB, "Member 'UControlRigComponent::bUpdateInEditor' has a wrong offset!");
static_assert(offsetof(UControlRigComponent, bDrawBones) == 0x0005CC, "Member 'UControlRigComponent::bDrawBones' has a wrong offset!");
static_assert(offsetof(UControlRigComponent, bShowDebugDrawing) == 0x0005CD, "Member 'UControlRigComponent::bShowDebugDrawing' has a wrong offset!");
static_assert(offsetof(UControlRigComponent, ControlRig) == 0x0005D0, "Member 'UControlRigComponent::ControlRig' has a wrong offset!");

// Class ControlRig.ControlRigControlActor
// 0x0098 (0x0308 - 0x0270)
class AControlRigControlActor final : public AActor
{
public:
	class AActor*                                 ActorToTrack;                                      // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UControlRig>                ControlRigClass;                                   // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRefreshOnTick;                                    // 0x0280(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSelectable;                                     // 0x0281(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_282[0x6];                                      // 0x0282(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     MaterialOverride;                                  // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ColorParameter;                                    // 0x0290(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastShadows;                                      // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        ActorRootComponent;                                // 0x02A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UControlRig*                            ControlRig;                                        // 0x02B0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           ControlNames;                                      // 0x02B8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<struct FTransform>                     ShapeTransforms;                                   // 0x02C8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class UStaticMeshComponent*>           Components;                                        // 0x02D8(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UMaterialInstanceDynamic*>       Materials;                                         // 0x02E8(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	class FName                                   ColorParameterName;                                // 0x02F8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2FC[0xC];                                      // 0x02FC(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Clear();
	void Refresh();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigControlActor">();
	}
	static class AControlRigControlActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AControlRigControlActor>();
	}
};
static_assert(alignof(AControlRigControlActor) == 0x000008, "Wrong alignment on AControlRigControlActor");
static_assert(sizeof(AControlRigControlActor) == 0x000308, "Wrong size on AControlRigControlActor");
static_assert(offsetof(AControlRigControlActor, ActorToTrack) == 0x000270, "Member 'AControlRigControlActor::ActorToTrack' has a wrong offset!");
static_assert(offsetof(AControlRigControlActor, ControlRigClass) == 0x000278, "Member 'AControlRigControlActor::ControlRigClass' has a wrong offset!");
static_assert(offsetof(AControlRigControlActor, bRefreshOnTick) == 0x000280, "Member 'AControlRigControlActor::bRefreshOnTick' has a wrong offset!");
static_assert(offsetof(AControlRigControlActor, bIsSelectable) == 0x000281, "Member 'AControlRigControlActor::bIsSelectable' has a wrong offset!");
static_assert(offsetof(AControlRigControlActor, MaterialOverride) == 0x000288, "Member 'AControlRigControlActor::MaterialOverride' has a wrong offset!");
static_assert(offsetof(AControlRigControlActor, ColorParameter) == 0x000290, "Member 'AControlRigControlActor::ColorParameter' has a wrong offset!");
static_assert(offsetof(AControlRigControlActor, bCastShadows) == 0x0002A0, "Member 'AControlRigControlActor::bCastShadows' has a wrong offset!");
static_assert(offsetof(AControlRigControlActor, ActorRootComponent) == 0x0002A8, "Member 'AControlRigControlActor::ActorRootComponent' has a wrong offset!");
static_assert(offsetof(AControlRigControlActor, ControlRig) == 0x0002B0, "Member 'AControlRigControlActor::ControlRig' has a wrong offset!");
static_assert(offsetof(AControlRigControlActor, ControlNames) == 0x0002B8, "Member 'AControlRigControlActor::ControlNames' has a wrong offset!");
static_assert(offsetof(AControlRigControlActor, ShapeTransforms) == 0x0002C8, "Member 'AControlRigControlActor::ShapeTransforms' has a wrong offset!");
static_assert(offsetof(AControlRigControlActor, Components) == 0x0002D8, "Member 'AControlRigControlActor::Components' has a wrong offset!");
static_assert(offsetof(AControlRigControlActor, Materials) == 0x0002E8, "Member 'AControlRigControlActor::Materials' has a wrong offset!");
static_assert(offsetof(AControlRigControlActor, ColorParameterName) == 0x0002F8, "Member 'AControlRigControlActor::ColorParameterName' has a wrong offset!");

// Class ControlRig.ControlRigShapeLibrary
// 0x00F8 (0x0120 - 0x0028)
class UControlRigShapeLibrary final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FControlRigShapeDefinition             DefaultShape;                                      // 0x0030(0x00A0)(Edit, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterial>               DefaultMaterial;                                   // 0x00D0(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MaterialColorParameter;                            // 0x00F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FControlRigShapeDefinition>     Shapes;                                            // 0x0100(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_110[0x10];                                     // 0x0110(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigShapeLibrary">();
	}
	static class UControlRigShapeLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigShapeLibrary>();
	}
};
static_assert(alignof(UControlRigShapeLibrary) == 0x000010, "Wrong alignment on UControlRigShapeLibrary");
static_assert(sizeof(UControlRigShapeLibrary) == 0x000120, "Wrong size on UControlRigShapeLibrary");
static_assert(offsetof(UControlRigShapeLibrary, DefaultShape) == 0x000030, "Member 'UControlRigShapeLibrary::DefaultShape' has a wrong offset!");
static_assert(offsetof(UControlRigShapeLibrary, DefaultMaterial) == 0x0000D0, "Member 'UControlRigShapeLibrary::DefaultMaterial' has a wrong offset!");
static_assert(offsetof(UControlRigShapeLibrary, MaterialColorParameter) == 0x0000F8, "Member 'UControlRigShapeLibrary::MaterialColorParameter' has a wrong offset!");
static_assert(offsetof(UControlRigShapeLibrary, Shapes) == 0x000100, "Member 'UControlRigShapeLibrary::Shapes' has a wrong offset!");

// Class ControlRig.ControlRigLayerInstance
// 0x0000 (0x0350 - 0x0350)
class UControlRigLayerInstance final : public UAnimInstance
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigLayerInstance">();
	}
	static class UControlRigLayerInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigLayerInstance>();
	}
};
static_assert(alignof(UControlRigLayerInstance) == 0x000010, "Wrong alignment on UControlRigLayerInstance");
static_assert(sizeof(UControlRigLayerInstance) == 0x000350, "Wrong size on UControlRigLayerInstance");

// Class ControlRig.ControlRigValidationPass
// 0x0000 (0x0028 - 0x0028)
class UControlRigValidationPass : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigValidationPass">();
	}
	static class UControlRigValidationPass* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigValidationPass>();
	}
};
static_assert(alignof(UControlRigValidationPass) == 0x000008, "Wrong alignment on UControlRigValidationPass");
static_assert(sizeof(UControlRigValidationPass) == 0x000028, "Wrong size on UControlRigValidationPass");

// Class ControlRig.ControlRigNumericalValidationPass
// 0x0090 (0x00B8 - 0x0028)
class UControlRigNumericalValidationPass final : public UControlRigValidationPass
{
public:
	bool                                          bCheckControls;                                    // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckBones;                                       // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckCurves;                                      // 0x002A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TranslationPrecision;                              // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationPrecision;                                 // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScalePrecision;                                    // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurvePrecision;                                    // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventNameA;                                        // 0x003C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   EventNameB;                                        // 0x0040(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigPose                               Pose;                                              // 0x0048(0x0070)(Transient, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigNumericalValidationPass">();
	}
	static class UControlRigNumericalValidationPass* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigNumericalValidationPass>();
	}
};
static_assert(alignof(UControlRigNumericalValidationPass) == 0x000008, "Wrong alignment on UControlRigNumericalValidationPass");
static_assert(sizeof(UControlRigNumericalValidationPass) == 0x0000B8, "Wrong size on UControlRigNumericalValidationPass");
static_assert(offsetof(UControlRigNumericalValidationPass, bCheckControls) == 0x000028, "Member 'UControlRigNumericalValidationPass::bCheckControls' has a wrong offset!");
static_assert(offsetof(UControlRigNumericalValidationPass, bCheckBones) == 0x000029, "Member 'UControlRigNumericalValidationPass::bCheckBones' has a wrong offset!");
static_assert(offsetof(UControlRigNumericalValidationPass, bCheckCurves) == 0x00002A, "Member 'UControlRigNumericalValidationPass::bCheckCurves' has a wrong offset!");
static_assert(offsetof(UControlRigNumericalValidationPass, TranslationPrecision) == 0x00002C, "Member 'UControlRigNumericalValidationPass::TranslationPrecision' has a wrong offset!");
static_assert(offsetof(UControlRigNumericalValidationPass, RotationPrecision) == 0x000030, "Member 'UControlRigNumericalValidationPass::RotationPrecision' has a wrong offset!");
static_assert(offsetof(UControlRigNumericalValidationPass, ScalePrecision) == 0x000034, "Member 'UControlRigNumericalValidationPass::ScalePrecision' has a wrong offset!");
static_assert(offsetof(UControlRigNumericalValidationPass, CurvePrecision) == 0x000038, "Member 'UControlRigNumericalValidationPass::CurvePrecision' has a wrong offset!");
static_assert(offsetof(UControlRigNumericalValidationPass, EventNameA) == 0x00003C, "Member 'UControlRigNumericalValidationPass::EventNameA' has a wrong offset!");
static_assert(offsetof(UControlRigNumericalValidationPass, EventNameB) == 0x000040, "Member 'UControlRigNumericalValidationPass::EventNameB' has a wrong offset!");
static_assert(offsetof(UControlRigNumericalValidationPass, Pose) == 0x000048, "Member 'UControlRigNumericalValidationPass::Pose' has a wrong offset!");

// Class ControlRig.ControlRigObjectHolder
// 0x0010 (0x0038 - 0x0028)
class UControlRigObjectHolder final : public UObject
{
public:
	TArray<class UObject*>                        Objects;                                           // 0x0028(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigObjectHolder">();
	}
	static class UControlRigObjectHolder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigObjectHolder>();
	}
};
static_assert(alignof(UControlRigObjectHolder) == 0x000008, "Wrong alignment on UControlRigObjectHolder");
static_assert(sizeof(UControlRigObjectHolder) == 0x000038, "Wrong size on UControlRigObjectHolder");
static_assert(offsetof(UControlRigObjectHolder, Objects) == 0x000028, "Member 'UControlRigObjectHolder::Objects' has a wrong offset!");

// Class ControlRig.ControlRigPoseAsset
// 0x0060 (0x0088 - 0x0028)
class UControlRigPoseAsset final : public UObject
{
public:
	struct FControlRigControlPose                 Pose;                                              // 0x0028(0x0060)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	void GetCurrentPose(class UControlRig* InControlRig, struct FControlRigControlPose* OutPose);
	void PastePose(class UControlRig* InControlRig, bool bDoKey, bool bDoMirror);
	void ReplaceControlName(const class FName& CurrentName, const class FName& NewName);
	void SavePose(class UControlRig* InControlRig, bool bUseAll);
	void SelectControls(class UControlRig* InControlRig, bool bDoMirror);

	bool DoesMirrorMatch(class UControlRig* ControlRig, const class FName& ControlName) const;
	TArray<class FName> GetControlNames() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigPoseAsset">();
	}
	static class UControlRigPoseAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigPoseAsset>();
	}
};
static_assert(alignof(UControlRigPoseAsset) == 0x000008, "Wrong alignment on UControlRigPoseAsset");
static_assert(sizeof(UControlRigPoseAsset) == 0x000088, "Wrong size on UControlRigPoseAsset");
static_assert(offsetof(UControlRigPoseAsset, Pose) == 0x000028, "Member 'UControlRigPoseAsset::Pose' has a wrong offset!");

// Class ControlRig.ControlRigPoseMirrorSettings
// 0x0028 (0x0050 - 0x0028)
class UControlRigPoseMirrorSettings final : public UObject
{
public:
	class FString                                 RightSide;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeftSide;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         MirrorAxis;                                        // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         AxisToFlip;                                        // 0x0049(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigPoseMirrorSettings">();
	}
	static class UControlRigPoseMirrorSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigPoseMirrorSettings>();
	}
};
static_assert(alignof(UControlRigPoseMirrorSettings) == 0x000008, "Wrong alignment on UControlRigPoseMirrorSettings");
static_assert(sizeof(UControlRigPoseMirrorSettings) == 0x000050, "Wrong size on UControlRigPoseMirrorSettings");
static_assert(offsetof(UControlRigPoseMirrorSettings, RightSide) == 0x000028, "Member 'UControlRigPoseMirrorSettings::RightSide' has a wrong offset!");
static_assert(offsetof(UControlRigPoseMirrorSettings, LeftSide) == 0x000038, "Member 'UControlRigPoseMirrorSettings::LeftSide' has a wrong offset!");
static_assert(offsetof(UControlRigPoseMirrorSettings, MirrorAxis) == 0x000048, "Member 'UControlRigPoseMirrorSettings::MirrorAxis' has a wrong offset!");
static_assert(offsetof(UControlRigPoseMirrorSettings, AxisToFlip) == 0x000049, "Member 'UControlRigPoseMirrorSettings::AxisToFlip' has a wrong offset!");

// Class ControlRig.ControlRigPoseProjectSettings
// 0x0010 (0x0038 - 0x0028)
class UControlRigPoseProjectSettings final : public UObject
{
public:
	TArray<struct FDirectoryPath>                 RootSaveDirs;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigPoseProjectSettings">();
	}
	static class UControlRigPoseProjectSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigPoseProjectSettings>();
	}
};
static_assert(alignof(UControlRigPoseProjectSettings) == 0x000008, "Wrong alignment on UControlRigPoseProjectSettings");
static_assert(sizeof(UControlRigPoseProjectSettings) == 0x000038, "Wrong size on UControlRigPoseProjectSettings");
static_assert(offsetof(UControlRigPoseProjectSettings, RootSaveDirs) == 0x000028, "Member 'UControlRigPoseProjectSettings::RootSaveDirs' has a wrong offset!");

// Class ControlRig.ControlRigSequence
// 0x0058 (0x0220 - 0x01C8)
class UControlRigSequence final : public ULevelSequence
{
public:
	TSoftObjectPtr<class UAnimSequence>           LastExportedToAnimationSequence;                   // 0x01C8(0x0028)(AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           LastExportedUsingSkeletalMesh;                     // 0x01F0(0x0028)(AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastExportedFrameRate;                             // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C[0x4];                                      // 0x021C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigSequence">();
	}
	static class UControlRigSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigSequence>();
	}
};
static_assert(alignof(UControlRigSequence) == 0x000008, "Wrong alignment on UControlRigSequence");
static_assert(sizeof(UControlRigSequence) == 0x000220, "Wrong size on UControlRigSequence");
static_assert(offsetof(UControlRigSequence, LastExportedToAnimationSequence) == 0x0001C8, "Member 'UControlRigSequence::LastExportedToAnimationSequence' has a wrong offset!");
static_assert(offsetof(UControlRigSequence, LastExportedUsingSkeletalMesh) == 0x0001F0, "Member 'UControlRigSequence::LastExportedUsingSkeletalMesh' has a wrong offset!");
static_assert(offsetof(UControlRigSequence, LastExportedFrameRate) == 0x000218, "Member 'UControlRigSequence::LastExportedFrameRate' has a wrong offset!");

// Class ControlRig.ControlRigSettings
// 0x0000 (0x0030 - 0x0030)
class UControlRigSettings final : public UDeveloperSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigSettings">();
	}
	static class UControlRigSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigSettings>();
	}
};
static_assert(alignof(UControlRigSettings) == 0x000008, "Wrong alignment on UControlRigSettings");
static_assert(sizeof(UControlRigSettings) == 0x000030, "Wrong size on UControlRigSettings");

// Class ControlRig.ControlRigEditorSettings
// 0x0000 (0x0030 - 0x0030)
class UControlRigEditorSettings final : public UDeveloperSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigEditorSettings">();
	}
	static class UControlRigEditorSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigEditorSettings>();
	}
};
static_assert(alignof(UControlRigEditorSettings) == 0x000008, "Wrong alignment on UControlRigEditorSettings");
static_assert(sizeof(UControlRigEditorSettings) == 0x000030, "Wrong size on UControlRigEditorSettings");

// Class ControlRig.ControlRigSnapSettings
// 0x0008 (0x0030 - 0x0028)
class UControlRigSnapSettings final : public UObject
{
public:
	bool                                          bKeepOffset;                                       // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSnapPosition;                                     // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSnapRotation;                                     // 0x002A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSnapScale;                                        // 0x002B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigSnapSettings">();
	}
	static class UControlRigSnapSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigSnapSettings>();
	}
};
static_assert(alignof(UControlRigSnapSettings) == 0x000008, "Wrong alignment on UControlRigSnapSettings");
static_assert(sizeof(UControlRigSnapSettings) == 0x000030, "Wrong size on UControlRigSnapSettings");
static_assert(offsetof(UControlRigSnapSettings, bKeepOffset) == 0x000028, "Member 'UControlRigSnapSettings::bKeepOffset' has a wrong offset!");
static_assert(offsetof(UControlRigSnapSettings, bSnapPosition) == 0x000029, "Member 'UControlRigSnapSettings::bSnapPosition' has a wrong offset!");
static_assert(offsetof(UControlRigSnapSettings, bSnapRotation) == 0x00002A, "Member 'UControlRigSnapSettings::bSnapRotation' has a wrong offset!");
static_assert(offsetof(UControlRigSnapSettings, bSnapScale) == 0x00002B, "Member 'UControlRigSnapSettings::bSnapScale' has a wrong offset!");

// Class ControlRig.ControlRigValidator
// 0x0040 (0x0068 - 0x0028)
class UControlRigValidator final : public UObject
{
public:
	TArray<class UControlRigValidationPass*>      Passes;                                            // 0x0028(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_38[0x30];                                      // 0x0038(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlRigValidator">();
	}
	static class UControlRigValidator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlRigValidator>();
	}
};
static_assert(alignof(UControlRigValidator) == 0x000008, "Wrong alignment on UControlRigValidator");
static_assert(sizeof(UControlRigValidator) == 0x000068, "Wrong size on UControlRigValidator");
static_assert(offsetof(UControlRigValidator, Passes) == 0x000028, "Member 'UControlRigValidator::Passes' has a wrong offset!");

// Class ControlRig.FKControlRig
// 0x0010 (0x04A0 - 0x0490)
class UFKControlRig final : public UControlRig
{
public:
	TArray<bool>                                  IsControlActive;                                   // 0x0488(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	EControlRigFKRigExecuteMode                   ApplyMode;                                         // 0x0498(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_499[0x7];                                      // 0x0499(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FKControlRig">();
	}
	static class UFKControlRig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFKControlRig>();
	}
};
static_assert(alignof(UFKControlRig) == 0x000010, "Wrong alignment on UFKControlRig");
static_assert(sizeof(UFKControlRig) == 0x0004A0, "Wrong size on UFKControlRig");
static_assert(offsetof(UFKControlRig, IsControlActive) == 0x000488, "Member 'UFKControlRig::IsControlActive' has a wrong offset!");
static_assert(offsetof(UFKControlRig, ApplyMode) == 0x000498, "Member 'UFKControlRig::ApplyMode' has a wrong offset!");

// Class ControlRig.MovieSceneControlRigParameterSection
// 0x0200 (0x0348 - 0x0148)
class UMovieSceneControlRigParameterSection final : public UMovieSceneParameterSection
{
public:
	uint8                                         Pad_148[0x18];                                     // 0x0148(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UControlRig*                            ControlRig;                                        // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UControlRig>                ControlRigClass;                                   // 0x0168(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<bool>                                  ControlsMask;                                      // 0x0170(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FMovieSceneTransformMask               TransformMask;                                     // 0x0180(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneFloatChannel                Weight;                                            // 0x0188(0x00E8)(NativeAccessSpecifierPublic)
	TMap<class FName, struct FChannelMapInfo>     ControlChannelMap;                                 // 0x0270(0x0050)(NativeAccessSpecifierPublic)
	TArray<struct FEnumParameterNameAndCurve>     EnumParameterNamesAndCurves;                       // 0x02C0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FIntegerParameterNameAndCurve>  IntegerParameterNamesAndCurves;                    // 0x02D0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FSpaceControlNameAndChannel>    SpaceChannels;                                     // 0x02E0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F0[0x58];                                     // 0x02F0(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneControlRigParameterSection">();
	}
	static class UMovieSceneControlRigParameterSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneControlRigParameterSection>();
	}
};
static_assert(alignof(UMovieSceneControlRigParameterSection) == 0x000008, "Wrong alignment on UMovieSceneControlRigParameterSection");
static_assert(sizeof(UMovieSceneControlRigParameterSection) == 0x000348, "Wrong size on UMovieSceneControlRigParameterSection");
static_assert(offsetof(UMovieSceneControlRigParameterSection, ControlRig) == 0x000160, "Member 'UMovieSceneControlRigParameterSection::ControlRig' has a wrong offset!");
static_assert(offsetof(UMovieSceneControlRigParameterSection, ControlRigClass) == 0x000168, "Member 'UMovieSceneControlRigParameterSection::ControlRigClass' has a wrong offset!");
static_assert(offsetof(UMovieSceneControlRigParameterSection, ControlsMask) == 0x000170, "Member 'UMovieSceneControlRigParameterSection::ControlsMask' has a wrong offset!");
static_assert(offsetof(UMovieSceneControlRigParameterSection, TransformMask) == 0x000180, "Member 'UMovieSceneControlRigParameterSection::TransformMask' has a wrong offset!");
static_assert(offsetof(UMovieSceneControlRigParameterSection, Weight) == 0x000188, "Member 'UMovieSceneControlRigParameterSection::Weight' has a wrong offset!");
static_assert(offsetof(UMovieSceneControlRigParameterSection, ControlChannelMap) == 0x000270, "Member 'UMovieSceneControlRigParameterSection::ControlChannelMap' has a wrong offset!");
static_assert(offsetof(UMovieSceneControlRigParameterSection, EnumParameterNamesAndCurves) == 0x0002C0, "Member 'UMovieSceneControlRigParameterSection::EnumParameterNamesAndCurves' has a wrong offset!");
static_assert(offsetof(UMovieSceneControlRigParameterSection, IntegerParameterNamesAndCurves) == 0x0002D0, "Member 'UMovieSceneControlRigParameterSection::IntegerParameterNamesAndCurves' has a wrong offset!");
static_assert(offsetof(UMovieSceneControlRigParameterSection, SpaceChannels) == 0x0002E0, "Member 'UMovieSceneControlRigParameterSection::SpaceChannels' has a wrong offset!");

// Class ControlRig.MovieSceneControlRigParameterTrack
// 0x0050 (0x00E0 - 0x0090)
class UMovieSceneControlRigParameterTrack final : public UMovieSceneNameableTrack
{
public:
	uint8                                         Pad_90[0x28];                                      // 0x0090(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UControlRig*                            ControlRig;                                        // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMovieSceneSection*                     SectionToKey;                                      // 0x00C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x00C8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	class FName                                   TrackName;                                         // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneControlRigParameterTrack">();
	}
	static class UMovieSceneControlRigParameterTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneControlRigParameterTrack>();
	}
};
static_assert(alignof(UMovieSceneControlRigParameterTrack) == 0x000008, "Wrong alignment on UMovieSceneControlRigParameterTrack");
static_assert(sizeof(UMovieSceneControlRigParameterTrack) == 0x0000E0, "Wrong size on UMovieSceneControlRigParameterTrack");
static_assert(offsetof(UMovieSceneControlRigParameterTrack, ControlRig) == 0x0000B8, "Member 'UMovieSceneControlRigParameterTrack::ControlRig' has a wrong offset!");
static_assert(offsetof(UMovieSceneControlRigParameterTrack, SectionToKey) == 0x0000C0, "Member 'UMovieSceneControlRigParameterTrack::SectionToKey' has a wrong offset!");
static_assert(offsetof(UMovieSceneControlRigParameterTrack, Sections) == 0x0000C8, "Member 'UMovieSceneControlRigParameterTrack::Sections' has a wrong offset!");
static_assert(offsetof(UMovieSceneControlRigParameterTrack, TrackName) == 0x0000D8, "Member 'UMovieSceneControlRigParameterTrack::TrackName' has a wrong offset!");

// Class ControlRig.RigHierarchy
// 0x0208 (0x0230 - 0x0028)
class alignas(0x10) URigHierarchy final : public UObject
{
public:
	uint8                                         Pad_28[0x30];                                      // 0x0028(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	uint16                                        TopologyVersion;                                   // 0x0058(0x0002)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bEnableDirtyPropagation;                           // 0x005A(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5B[0x75];                                      // 0x005B(0x0075)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TransformStackIndex;                               // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D4[0x54];                                      // 0x00D4(0x0054)(Fixing Size After Last Property [ Dumper-7 ])
	class URigHierarchyController*                HierarchyController;                               // 0x0128(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_130[0xD8];                                     // 0x0130(0x00D8)(Fixing Size After Last Property [ Dumper-7 ])
	class URigHierarchy*                          HierarchyForCacheValidation;                       // 0x0208(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_210[0x20];                                     // 0x0210(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FEulerTransform GetEulerTransformFromControlValue(const struct FRigControlValue& InValue);
	static float GetFloatFromControlValue(const struct FRigControlValue& InValue);
	static int32 GetIntFromControlValue(const struct FRigControlValue& InValue);
	static struct FRotator GetRotatorFromControlValue(const struct FRigControlValue& InValue);
	static struct FTransform GetTransformFromControlValue(const struct FRigControlValue& InValue);
	static struct FTransformNoScale GetTransformNoScaleFromControlValue(const struct FRigControlValue& InValue);
	static struct FVector2D GetVector2DFromControlValue(const struct FRigControlValue& InValue);
	static struct FVector GetVectorFromControlValue(const struct FRigControlValue& InValue);
	static struct FRigControlValue MakeControlValueFromBool(bool InValue);
	static struct FRigControlValue MakeControlValueFromEulerTransform(const struct FEulerTransform& InValue);
	static struct FRigControlValue MakeControlValueFromFloat(float InValue);
	static struct FRigControlValue MakeControlValueFromInt(int32 InValue);
	static struct FRigControlValue MakeControlValueFromRotator(const struct FRotator& InValue);
	static struct FRigControlValue MakeControlValueFromTransform(const struct FTransform& InValue);
	static struct FRigControlValue MakeControlValueFromTransformNoScale(const struct FTransformNoScale& InValue);
	static struct FRigControlValue MakeControlValueFromVector(const struct FVector& InValue);
	static struct FRigControlValue MakeControlValueFromVector2D(const struct FVector2D& InValue);

	void CopyHierarchy(class URigHierarchy* InHierarchy);
	void CopyPose(class URigHierarchy* InHierarchy, bool bCurrent, bool bInitial);
	class URigHierarchyController* GetController(bool bCreateIfNeeded);
	void Reset();
	void ResetCurveValues();
	void ResetPoseToInitial(ERigElementType InTypeFilter);
	void SendAutoKeyEvent(const struct FRigElementKey& InElement, float InOffsetInSeconds, bool bAsynchronous);
	void SetControlOffsetTransform(const struct FRigElementKey& InKey, const struct FTransform& InTransform, bool bInitial, bool bAffectChildren, bool bSetupUndo, bool bPrintPythonCommands);
	void SetControlOffsetTransformByIndex(int32 InElementIndex, const struct FTransform& InTransform, bool bInitial, bool bAffectChildren, bool bSetupUndo, bool bPrintPythonCommands);
	void SetControlSettings(const struct FRigElementKey& InKey, const struct FRigControlSettings& InSettings, bool bSetupUndo, bool bForce, bool bPrintPythonCommands);
	void SetControlSettingsByIndex(int32 InElementIndex, const struct FRigControlSettings& InSettings, bool bSetupUndo, bool bForce, bool bPrintPythonCommands);
	void SetControlShapeTransform(const struct FRigElementKey& InKey, const struct FTransform& InTransform, bool bInitial, bool bSetupUndo);
	void SetControlShapeTransformByIndex(int32 InElementIndex, const struct FTransform& InTransform, bool bInitial, bool bSetupUndo);
	void SetControlValue(const struct FRigElementKey& InKey, const struct FRigControlValue& InValue, ERigControlValueType InValueType, bool bSetupUndo, bool bPrintPythonCommands);
	void SetControlValueByIndex(int32 InElementIndex, const struct FRigControlValue& InValue, ERigControlValueType InValueType, bool bSetupUndo, bool bPrintPythonCommands);
	void SetControlVisibility(const struct FRigElementKey& InKey, bool bVisibility);
	void SetControlVisibilityByIndex(int32 InElementIndex, bool bVisibility);
	void SetCurveValue(const struct FRigElementKey& InKey, float InValue, bool bSetupUndo);
	void SetCurveValueByIndex(int32 InElementIndex, float InValue, bool bSetupUndo);
	void SetGlobalTransform(const struct FRigElementKey& InKey, const struct FTransform& InTransform, bool bInitial, bool bAffectChildren, bool bSetupUndo);
	void SetGlobalTransformByIndex(int32 InElementIndex, const struct FTransform& InTransform, bool bInitial, bool bAffectChildren, bool bSetupUndo);
	void SetLocalTransform(const struct FRigElementKey& InKey, const struct FTransform& InTransform, bool bInitial, bool bAffectChildren, bool bSetupUndo, bool bPrintPythonCommands);
	void SetLocalTransformByIndex(int32 InElementIndex, const struct FTransform& InTransform, bool bInitial, bool bAffectChildren, bool bSetupUndo, bool bPrintPythonCommands);
	bool SetParentWeight(const struct FRigElementKey& InChild, const struct FRigElementKey& InParent, const struct FRigElementWeight& InWeight, bool bInitial, bool bAffectChildren);
	bool SetParentWeightArray(const struct FRigElementKey& InChild, const TArray<struct FRigElementWeight>& InWeights, bool bInitial, bool bAffectChildren);
	void SetPose_ForBlueprint(const struct FRigPose& InPose);
	bool SwitchToDefaultParent(const struct FRigElementKey& InChild, bool bInitial, bool bAffectChildren);
	bool SwitchToParent(const struct FRigElementKey& InChild, const struct FRigElementKey& InParent, bool bInitial, bool bAffectChildren);
	bool SwitchToWorldSpace(const struct FRigElementKey& InChild, bool bInitial, bool bAffectChildren);

	bool Contains_ForBlueprint(const struct FRigElementKey& InKey) const;
	struct FRigBoneElement FindBone_ForBlueprintOnly(const struct FRigElementKey& InKey) const;
	struct FRigControlElement FindControl_ForBlueprintOnly(const struct FRigElementKey& InKey) const;
	struct FRigNullElement FindNull_ForBlueprintOnly(const struct FRigElementKey& InKey) const;
	TArray<struct FRigElementKey> GetAllKeys_ForBlueprint(bool bTraverse) const;
	TArray<struct FRigElementKey> GetBoneKeys(bool bTraverse) const;
	TArray<struct FRigElementKey> GetChildren(const struct FRigElementKey& InKey, bool bRecursive) const;
	TArray<struct FRigElementKey> GetControlKeys(bool bTraverse) const;
	struct FRigControlValue GetControlValue(const struct FRigElementKey& InKey, ERigControlValueType InValueType) const;
	struct FRigControlValue GetControlValueByIndex(int32 InElementIndex, ERigControlValueType InValueType) const;
	TArray<struct FRigElementKey> GetCurveKeys() const;
	float GetCurveValue(const struct FRigElementKey& InKey) const;
	float GetCurveValueByIndex(int32 InElementIndex) const;
	struct FRigElementKey GetFirstParent(const struct FRigElementKey& InKey) const;
	struct FTransform GetGlobalControlOffsetTransform(const struct FRigElementKey& InKey, bool bInitial) const;
	struct FTransform GetGlobalControlOffsetTransformByIndex(int32 InElementIndex, bool bInitial) const;
	struct FTransform GetGlobalControlShapeTransform(const struct FRigElementKey& InKey, bool bInitial) const;
	struct FTransform GetGlobalControlShapeTransformByIndex(int32 InElementIndex, bool bInitial) const;
	struct FTransform GetGlobalTransform(const struct FRigElementKey& InKey, bool bInitial) const;
	struct FTransform GetGlobalTransformByIndex(int32 InElementIndex, bool bInitial) const;
	int32 GetIndex_ForBlueprint(const struct FRigElementKey& InKey) const;
	struct FRigElementKey GetKey(int32 InElementIndex) const;
	struct FTransform GetLocalTransform(const struct FRigElementKey& InKey, bool bInitial) const;
	struct FTransform GetLocalTransformByIndex(int32 InElementIndex, bool bInitial) const;
	TArray<struct FRigElementKey> GetNullKeys(bool bTraverse) const;
	int32 GetNumberOfParents(const struct FRigElementKey& InKey) const;
	TArray<struct FRigElementKey> GetParents(const struct FRigElementKey& InKey, bool bRecursive) const;
	struct FTransform GetParentTransform(const struct FRigElementKey& InKey, bool bInitial) const;
	struct FTransform GetParentTransformByIndex(int32 InElementIndex, bool bInitial) const;
	struct FRigElementWeight GetParentWeight(const struct FRigElementKey& InChild, const struct FRigElementKey& InParent, bool bInitial) const;
	TArray<struct FRigElementWeight> GetParentWeightArray(const struct FRigElementKey& InChild, bool bInitial) const;
	struct FRigPose GetPose(bool bInitial) const;
	class FName GetPreviousName(const struct FRigElementKey& InKey) const;
	struct FRigElementKey GetPreviousParent(const struct FRigElementKey& InKey) const;
	TArray<struct FRigElementKey> GetReferenceKeys(bool bTraverse) const;
	TArray<struct FRigElementKey> GetRigidBodyKeys(bool bTraverse) const;
	TArray<struct FRigElementKey> GetSelectedKeys(ERigElementType InTypeFilter) const;
	bool IsControllerAvailable() const;
	bool IsParentedTo(const struct FRigElementKey& InChild, const struct FRigElementKey& InParent) const;
	bool IsSelected(const struct FRigElementKey& InKey) const;
	bool IsSelectedByIndex(int32 InIndex) const;
	bool IsValidIndex(int32 InElementIndex) const;
	int32 Num() const;
	TArray<struct FRigElementKey> SortKeys(const TArray<struct FRigElementKey>& InKeys) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigHierarchy">();
	}
	static class URigHierarchy* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigHierarchy>();
	}
};
static_assert(alignof(URigHierarchy) == 0x000010, "Wrong alignment on URigHierarchy");
static_assert(sizeof(URigHierarchy) == 0x000230, "Wrong size on URigHierarchy");
static_assert(offsetof(URigHierarchy, TopologyVersion) == 0x000058, "Member 'URigHierarchy::TopologyVersion' has a wrong offset!");
static_assert(offsetof(URigHierarchy, bEnableDirtyPropagation) == 0x00005A, "Member 'URigHierarchy::bEnableDirtyPropagation' has a wrong offset!");
static_assert(offsetof(URigHierarchy, TransformStackIndex) == 0x0000D0, "Member 'URigHierarchy::TransformStackIndex' has a wrong offset!");
static_assert(offsetof(URigHierarchy, HierarchyController) == 0x000128, "Member 'URigHierarchy::HierarchyController' has a wrong offset!");
static_assert(offsetof(URigHierarchy, HierarchyForCacheValidation) == 0x000208, "Member 'URigHierarchy::HierarchyForCacheValidation' has a wrong offset!");

// Class ControlRig.RigHierarchyController
// 0x0078 (0x00A0 - 0x0028)
class URigHierarchyController final : public UObject
{
public:
	bool                                          bReportWarningsAndErrors;                          // 0x0028(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class URigHierarchy>           Hierarchy;                                         // 0x002C(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_34[0x6C];                                      // 0x0034(0x006C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FRigElementKey AddBone(class FName InName, const struct FRigElementKey& InParent, const struct FTransform& InTransform, bool bTransformInGlobal, ERigBoneType InBoneType, bool bSetupUndo, bool bPrintPythonCommand);
	struct FRigElementKey AddControl_ForBlueprint(class FName InName, const struct FRigElementKey& InParent, const struct FRigControlSettings& InSettings, const struct FRigControlValue& InValue, bool bSetupUndo);
	struct FRigElementKey AddCurve(class FName InName, float InValue, bool bSetupUndo, bool bPrintPythonCommand);
	struct FRigElementKey AddNull(class FName InName, const struct FRigElementKey& InParent, const struct FTransform& InTransform, bool bTransformInGlobal, bool bSetupUndo, bool bPrintPythonCommand);
	bool AddParent(const struct FRigElementKey& InChild, const struct FRigElementKey& InParent, float InWeight, bool bMaintainGlobalTransform, bool bSetupUndo);
	struct FRigElementKey AddRigidBody(class FName InName, const struct FRigElementKey& InParent, const struct FRigRigidBodySettings& InSettings, const struct FTransform& InLocalTransform, bool bSetupUndo, bool bPrintPythonCommand);
	bool ClearSelection();
	bool DeselectElement(const struct FRigElementKey& InKey);
	TArray<struct FRigElementKey> DuplicateElements(const TArray<struct FRigElementKey>& InKeys, bool bSelectNewElements, bool bSetupUndo, bool bPrintPythonCommands);
	TArray<struct FRigElementKey> ImportBones(class USkeleton* InSkeleton, class FName InNameSpace, bool bReplaceExistingBones, bool bRemoveObsoleteBones, bool bSelectBones, bool bSetupUndo, bool bPrintPythonCommand);
	TArray<struct FRigElementKey> ImportCurves(class USkeleton* InSkeleton, class FName InNameSpace, bool bSelectCurves, bool bSetupUndo, bool bPrintPythonCommand);
	TArray<struct FRigElementKey> ImportFromText(const class FString& InContent, bool bReplaceExistingElements, bool bSelectNewElements, bool bSetupUndo, bool bPrintPythonCommands);
	TArray<struct FRigElementKey> MirrorElements(const TArray<struct FRigElementKey>& InKeys, const struct FRigMirrorSettings& InSettings, bool bSelectNewElements, bool bSetupUndo, bool bPrintPythonCommands);
	bool RemoveAllParents(const struct FRigElementKey& InChild, bool bMaintainGlobalTransform, bool bSetupUndo, bool bPrintPythonCommand);
	bool RemoveElement(const struct FRigElementKey& InElement, bool bSetupUndo, bool bPrintPythonCommand);
	bool RemoveParent(const struct FRigElementKey& InChild, const struct FRigElementKey& InParent, bool bMaintainGlobalTransform, bool bSetupUndo, bool bPrintPythonCommand);
	struct FRigElementKey RenameElement(const struct FRigElementKey& InElement, class FName InName, bool bSetupUndo, bool bPrintPythonCommand);
	bool SelectElement(const struct FRigElementKey& InKey, bool bSelect, bool bClearSelection);
	void SetHierarchy(class URigHierarchy* InHierarchy);
	bool SetParent(const struct FRigElementKey& InChild, const struct FRigElementKey& InParent, bool bMaintainGlobalTransform, bool bSetupUndo, bool bPrintPythonCommand);
	bool SetSelection(const TArray<struct FRigElementKey>& InKeys, bool bPrintPythonCommand);

	class FString ExportSelectionToText() const;
	class FString ExportToText(const TArray<struct FRigElementKey>& InKeys) const;
	struct FRigControlSettings GetControlSettings(const struct FRigElementKey& InKey) const;
	class URigHierarchy* GetHierarchy() const;
	bool SetControlSettings(const struct FRigElementKey& InKey, const struct FRigControlSettings& InSettings, bool bSetupUndo) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigHierarchyController">();
	}
	static class URigHierarchyController* GetDefaultObj()
	{
		return GetDefaultObjImpl<URigHierarchyController>();
	}
};
static_assert(alignof(URigHierarchyController) == 0x000008, "Wrong alignment on URigHierarchyController");
static_assert(sizeof(URigHierarchyController) == 0x0000A0, "Wrong size on URigHierarchyController");
static_assert(offsetof(URigHierarchyController, bReportWarningsAndErrors) == 0x000028, "Member 'URigHierarchyController::bReportWarningsAndErrors' has a wrong offset!");
static_assert(offsetof(URigHierarchyController, Hierarchy) == 0x00002C, "Member 'URigHierarchyController::Hierarchy' has a wrong offset!");

}

