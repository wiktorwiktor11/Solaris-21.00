#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BGA_Athena_SCMachine

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BGA_Athena_SCMachine.BGA_Athena_SCMachine_C
// 0x0300 (0x0E10 - 0x0B10)
class ABGA_Athena_SCMachine_C : public ABuildingGameplayActorSpawnMachine
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0B10(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UMultiInteractActorComponent_C*         MultiInteractActorComponent;                       // 0x0B18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        ActivateEndSound;                                  // 0x0B20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortSoundIndicatorComponent*           FortSoundIndicatorComponent;                       // 0x0B28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BlockingSkirt;                                     // 0x0B30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   EdgeNavLinks2;                                     // 0x0B38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   EdgeNavLinks;                                      // 0x0B40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        SC_Machine_Cooldown_Cue_End;                       // 0x0B48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        SC_Machine_Cooldown_Cue;                           // 0x0B50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_SCMachine_HoloLogo;                              // 0x0B58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    HeadlightR;                                        // 0x0B60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    HeadlightL;                                        // 0x0B68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_SCMachine_PedestalGlow;                          // 0x0B70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        ActivateSound;                                     // 0x0B78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AmbientSound;                                      // 0x0B80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      BlockingVolume;                                    // 0x0B88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PadCollision;                                      // 0x0B90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Van;                                               // 0x0B98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          InteractionBox;                                    // 0x0BA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         LightFlash_LightBrightness_9296C3734D2838F5D5DD42912D8F0CBB; // 0x0BA8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            LightFlash__Direction_9296C3734D2838F5D5DD42912D8F0CBB; // 0x0BAC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BAD[0x3];                                      // 0x0BAD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     LightFlash;                                        // 0x0BB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WarpVan_Scale_947A8C9647767577A408EC87E76820CB;    // 0x0BB8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            WarpVan__Direction_947A8C9647767577A408EC87E76820CB; // 0x0BD0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BD1[0x7];                                      // 0x0BD1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     WarpVan;                                           // 0x0BD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        SpawnInParticle;                                   // 0x0BE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SpawnInParticleOffset;                             // 0x0BE8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MannequinTransitionOffset;                         // 0x0C00(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FXDoneDelay;                                       // 0x0C18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1C[0x4];                                      // 0x0C1C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         PawnsBehindVan;                                    // 0x0C20(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FTimerHandle                           Timer_Cooldown;                                    // 0x0C30(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         FXDelayThenBotSpawn;                               // 0x0C38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         VanState;                                          // 0x0C3C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               ScreensMaterial;                                   // 0x0C40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         Row_DestroyIfOff;                                  // 0x0C48(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         PlayRate;                                          // 0x0C70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         XYKnockAmountPlayer;                               // 0x0C74(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ZKnockAmountPlayer;                                // 0x0C78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C7C[0x4];                                      // 0x0C7C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             DefaultAmbientAudio;                               // 0x0C80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             CooldownAmbientAudio;                              // 0x0C88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DelayBeforeCooldown;                               // 0x0C90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C94[0x4];                                      // 0x0C94(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Row_RespawnTime;                                   // 0x0C98(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_InteractTime;                                  // 0x0CC0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          RepServerInteract;                                 // 0x0CE8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CE9[0x7];                                      // 0x0CE9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortWorldItemDefinition*               WeaponToGive;                                      // 0x0CF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortWorldItemDefinition*               MatsToGive;                                        // 0x0CF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MatNumberToGive;                                   // 0x0D00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AmmoNumberToGive;                                  // 0x0D04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   FailedTextNoCard;                                  // 0x0D08(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UFortWorldItemDefinition*               AmmoToGive;                                        // 0x0D20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   FailedTextRecharging;                              // 0x0D28(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   FailedTextRebooting;                               // 0x0D40(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   PassedText;                                        // 0x0D58(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UMaterialInstanceDynamic*               VanBodyMaterial;                                   // 0x0D70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeadlightIntensity;                                // 0x0D78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Did_Horn_Play_;                                    // 0x0D7C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D7D[0x3];                                      // 0x0D7D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AFortPlayerControllerAthena*>    PlayersInteracting;                                // 0x0D80(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class FName                                   GrantedItemsLootTier;                              // 0x0D90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeightCheckForSkydive;                             // 0x0D94(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ZKnockAmountVehicle;                               // 0x0D98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         XYKnockAmountVehicle;                              // 0x0D9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InvincibleVisualsDuration;                         // 0x0DA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ActiveCue;                                         // 0x0DA4(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EndCue;                                            // 0x0DA8(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TransitionCue;                                     // 0x0DAC(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ActivateCue;                                       // 0x0DB0(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         DelayBeforeSkydiveCheck;                           // 0x0DB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SCMachine_Respawn_Cue;                             // 0x0DB8(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          RepDisabledState;                                  // 0x0DBC(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DBD[0x3];                                      // 0x0DBD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Row_EnabledInWorld;                                // 0x0DC0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UMaterialInterface*                     StaticScreen_Material;                             // 0x0DE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ScreenMaterialIndex;                               // 0x0DF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Van_Emissive_Parameter;                            // 0x0DF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseRiftSpawn;                                      // 0x0DF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DF9[0x7];                                      // 0x0DF9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             HornAlertAudio;                                    // 0x0E00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        RebootedPlayer;                                    // 0x0E08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__BlockingVolume_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BlockingVolume_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void CheckQuestCredit();
	void CooldownTimer();
	void DisabledState();
	void ExecuteUbergraph_BGA_Athena_SCMachine(int32 EntryPoint);
	void GiveWeaponsAndResources(class AFortPlayerController* FortPC);
	void HandleActorCountChanged(int32 InteractingActorCount, float MultiInteractMultiplier, float InteractingDuration);
	void HandleAmbientSound();
	void InteactComplete(class AFortPawn* InteractingPawn);
	void KnockPlayerPawns(class AActor* IgnoreKnock);
	void KnockVehicles();
	void LightFlash__FinishedFunc();
	void LightFlash__UpdateFunc();
	void OnBeginLongUse(class AFortPlayerControllerAthena* AthenaPC);
	void OnInterruptLongUse(class AFortPlayerControllerAthena* AthenaPC);
	void OnPlayerPawnResurrected(class AFortPlayerPawn* PlayerPawn);
	void OnReady_10047ADE486AD610434BFBB28224F10F(class AFortGameStateAthena* GameState, const class UFortPlaylist* Playlist, const struct FGameplayTagContainer& PlaylistContextTags);
	void OnRep_RepDisabledState();
	void OnRep_RepServerInteract();
	void OnResurrectionCompleted();
	void OnResurrectionStarted();
	void OnSpawnMachineStateChanged();
	void Play_Horn_Sound();
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void Reset_Rift();
	bool ShouldDie(float Damage, class AController* EventInstigator, class AActor* DamageCauser);
	void SkydiveIfAirborne(class AFortPlayerPawn* Player);
	void SpawnRift(class AFortPawn* InFortPawn);
	void Start_Activate_Sound_Timer();
	void StartCoolDown();
	void ToggleHologram(bool TurnOn);
	void TriggerRespawnFX(class AFortPawn* PhaseInPawn);
	void Update_Cooldown_Sound();
	void UpdateScreen();
	void UserConstructionScript();
	void WarpVan__FinishedFunc();
	void WarpVan__UpdateFunc();

	bool BlueprintCanInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted, const ETInteractionType InteractionType) const;
	class FText BlueprintGetFailedInteractionString(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted) const;
	class FText BlueprintGetInteractionString(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BGA_Athena_SCMachine_C">();
	}
	static class ABGA_Athena_SCMachine_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABGA_Athena_SCMachine_C>();
	}
};
static_assert(alignof(ABGA_Athena_SCMachine_C) == 0x000008, "Wrong alignment on ABGA_Athena_SCMachine_C");
static_assert(sizeof(ABGA_Athena_SCMachine_C) == 0x000E10, "Wrong size on ABGA_Athena_SCMachine_C");
static_assert(offsetof(ABGA_Athena_SCMachine_C, UberGraphFrame) == 0x000B10, "Member 'ABGA_Athena_SCMachine_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, MultiInteractActorComponent) == 0x000B18, "Member 'ABGA_Athena_SCMachine_C::MultiInteractActorComponent' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, ActivateEndSound) == 0x000B20, "Member 'ABGA_Athena_SCMachine_C::ActivateEndSound' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, FortSoundIndicatorComponent) == 0x000B28, "Member 'ABGA_Athena_SCMachine_C::FortSoundIndicatorComponent' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, BlockingSkirt) == 0x000B30, "Member 'ABGA_Athena_SCMachine_C::BlockingSkirt' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, EdgeNavLinks2) == 0x000B38, "Member 'ABGA_Athena_SCMachine_C::EdgeNavLinks2' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, EdgeNavLinks) == 0x000B40, "Member 'ABGA_Athena_SCMachine_C::EdgeNavLinks' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, SC_Machine_Cooldown_Cue_End) == 0x000B48, "Member 'ABGA_Athena_SCMachine_C::SC_Machine_Cooldown_Cue_End' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, SC_Machine_Cooldown_Cue) == 0x000B50, "Member 'ABGA_Athena_SCMachine_C::SC_Machine_Cooldown_Cue' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, P_SCMachine_HoloLogo) == 0x000B58, "Member 'ABGA_Athena_SCMachine_C::P_SCMachine_HoloLogo' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, HeadlightR) == 0x000B60, "Member 'ABGA_Athena_SCMachine_C::HeadlightR' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, HeadlightL) == 0x000B68, "Member 'ABGA_Athena_SCMachine_C::HeadlightL' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, P_SCMachine_PedestalGlow) == 0x000B70, "Member 'ABGA_Athena_SCMachine_C::P_SCMachine_PedestalGlow' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, ActivateSound) == 0x000B78, "Member 'ABGA_Athena_SCMachine_C::ActivateSound' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, AmbientSound) == 0x000B80, "Member 'ABGA_Athena_SCMachine_C::AmbientSound' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, BlockingVolume) == 0x000B88, "Member 'ABGA_Athena_SCMachine_C::BlockingVolume' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, PadCollision) == 0x000B90, "Member 'ABGA_Athena_SCMachine_C::PadCollision' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, Van) == 0x000B98, "Member 'ABGA_Athena_SCMachine_C::Van' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, InteractionBox) == 0x000BA0, "Member 'ABGA_Athena_SCMachine_C::InteractionBox' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, LightFlash_LightBrightness_9296C3734D2838F5D5DD42912D8F0CBB) == 0x000BA8, "Member 'ABGA_Athena_SCMachine_C::LightFlash_LightBrightness_9296C3734D2838F5D5DD42912D8F0CBB' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, LightFlash__Direction_9296C3734D2838F5D5DD42912D8F0CBB) == 0x000BAC, "Member 'ABGA_Athena_SCMachine_C::LightFlash__Direction_9296C3734D2838F5D5DD42912D8F0CBB' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, LightFlash) == 0x000BB0, "Member 'ABGA_Athena_SCMachine_C::LightFlash' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, WarpVan_Scale_947A8C9647767577A408EC87E76820CB) == 0x000BB8, "Member 'ABGA_Athena_SCMachine_C::WarpVan_Scale_947A8C9647767577A408EC87E76820CB' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, WarpVan__Direction_947A8C9647767577A408EC87E76820CB) == 0x000BD0, "Member 'ABGA_Athena_SCMachine_C::WarpVan__Direction_947A8C9647767577A408EC87E76820CB' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, WarpVan) == 0x000BD8, "Member 'ABGA_Athena_SCMachine_C::WarpVan' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, SpawnInParticle) == 0x000BE0, "Member 'ABGA_Athena_SCMachine_C::SpawnInParticle' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, SpawnInParticleOffset) == 0x000BE8, "Member 'ABGA_Athena_SCMachine_C::SpawnInParticleOffset' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, MannequinTransitionOffset) == 0x000C00, "Member 'ABGA_Athena_SCMachine_C::MannequinTransitionOffset' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, FXDoneDelay) == 0x000C18, "Member 'ABGA_Athena_SCMachine_C::FXDoneDelay' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, PawnsBehindVan) == 0x000C20, "Member 'ABGA_Athena_SCMachine_C::PawnsBehindVan' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, Timer_Cooldown) == 0x000C30, "Member 'ABGA_Athena_SCMachine_C::Timer_Cooldown' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, FXDelayThenBotSpawn) == 0x000C38, "Member 'ABGA_Athena_SCMachine_C::FXDelayThenBotSpawn' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, VanState) == 0x000C3C, "Member 'ABGA_Athena_SCMachine_C::VanState' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, ScreensMaterial) == 0x000C40, "Member 'ABGA_Athena_SCMachine_C::ScreensMaterial' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, Row_DestroyIfOff) == 0x000C48, "Member 'ABGA_Athena_SCMachine_C::Row_DestroyIfOff' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, PlayRate) == 0x000C70, "Member 'ABGA_Athena_SCMachine_C::PlayRate' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, XYKnockAmountPlayer) == 0x000C74, "Member 'ABGA_Athena_SCMachine_C::XYKnockAmountPlayer' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, ZKnockAmountPlayer) == 0x000C78, "Member 'ABGA_Athena_SCMachine_C::ZKnockAmountPlayer' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, DefaultAmbientAudio) == 0x000C80, "Member 'ABGA_Athena_SCMachine_C::DefaultAmbientAudio' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, CooldownAmbientAudio) == 0x000C88, "Member 'ABGA_Athena_SCMachine_C::CooldownAmbientAudio' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, DelayBeforeCooldown) == 0x000C90, "Member 'ABGA_Athena_SCMachine_C::DelayBeforeCooldown' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, Row_RespawnTime) == 0x000C98, "Member 'ABGA_Athena_SCMachine_C::Row_RespawnTime' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, Row_InteractTime) == 0x000CC0, "Member 'ABGA_Athena_SCMachine_C::Row_InteractTime' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, RepServerInteract) == 0x000CE8, "Member 'ABGA_Athena_SCMachine_C::RepServerInteract' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, WeaponToGive) == 0x000CF0, "Member 'ABGA_Athena_SCMachine_C::WeaponToGive' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, MatsToGive) == 0x000CF8, "Member 'ABGA_Athena_SCMachine_C::MatsToGive' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, MatNumberToGive) == 0x000D00, "Member 'ABGA_Athena_SCMachine_C::MatNumberToGive' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, AmmoNumberToGive) == 0x000D04, "Member 'ABGA_Athena_SCMachine_C::AmmoNumberToGive' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, FailedTextNoCard) == 0x000D08, "Member 'ABGA_Athena_SCMachine_C::FailedTextNoCard' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, AmmoToGive) == 0x000D20, "Member 'ABGA_Athena_SCMachine_C::AmmoToGive' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, FailedTextRecharging) == 0x000D28, "Member 'ABGA_Athena_SCMachine_C::FailedTextRecharging' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, FailedTextRebooting) == 0x000D40, "Member 'ABGA_Athena_SCMachine_C::FailedTextRebooting' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, PassedText) == 0x000D58, "Member 'ABGA_Athena_SCMachine_C::PassedText' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, VanBodyMaterial) == 0x000D70, "Member 'ABGA_Athena_SCMachine_C::VanBodyMaterial' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, HeadlightIntensity) == 0x000D78, "Member 'ABGA_Athena_SCMachine_C::HeadlightIntensity' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, Did_Horn_Play_) == 0x000D7C, "Member 'ABGA_Athena_SCMachine_C::Did_Horn_Play_' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, PlayersInteracting) == 0x000D80, "Member 'ABGA_Athena_SCMachine_C::PlayersInteracting' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, GrantedItemsLootTier) == 0x000D90, "Member 'ABGA_Athena_SCMachine_C::GrantedItemsLootTier' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, HeightCheckForSkydive) == 0x000D94, "Member 'ABGA_Athena_SCMachine_C::HeightCheckForSkydive' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, ZKnockAmountVehicle) == 0x000D98, "Member 'ABGA_Athena_SCMachine_C::ZKnockAmountVehicle' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, XYKnockAmountVehicle) == 0x000D9C, "Member 'ABGA_Athena_SCMachine_C::XYKnockAmountVehicle' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, InvincibleVisualsDuration) == 0x000DA0, "Member 'ABGA_Athena_SCMachine_C::InvincibleVisualsDuration' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, ActiveCue) == 0x000DA4, "Member 'ABGA_Athena_SCMachine_C::ActiveCue' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, EndCue) == 0x000DA8, "Member 'ABGA_Athena_SCMachine_C::EndCue' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, TransitionCue) == 0x000DAC, "Member 'ABGA_Athena_SCMachine_C::TransitionCue' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, ActivateCue) == 0x000DB0, "Member 'ABGA_Athena_SCMachine_C::ActivateCue' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, DelayBeforeSkydiveCheck) == 0x000DB4, "Member 'ABGA_Athena_SCMachine_C::DelayBeforeSkydiveCheck' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, SCMachine_Respawn_Cue) == 0x000DB8, "Member 'ABGA_Athena_SCMachine_C::SCMachine_Respawn_Cue' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, RepDisabledState) == 0x000DBC, "Member 'ABGA_Athena_SCMachine_C::RepDisabledState' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, Row_EnabledInWorld) == 0x000DC0, "Member 'ABGA_Athena_SCMachine_C::Row_EnabledInWorld' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, StaticScreen_Material) == 0x000DE8, "Member 'ABGA_Athena_SCMachine_C::StaticScreen_Material' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, ScreenMaterialIndex) == 0x000DF0, "Member 'ABGA_Athena_SCMachine_C::ScreenMaterialIndex' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, Van_Emissive_Parameter) == 0x000DF4, "Member 'ABGA_Athena_SCMachine_C::Van_Emissive_Parameter' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, UseRiftSpawn) == 0x000DF8, "Member 'ABGA_Athena_SCMachine_C::UseRiftSpawn' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, HornAlertAudio) == 0x000E00, "Member 'ABGA_Athena_SCMachine_C::HornAlertAudio' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, RebootedPlayer) == 0x000E08, "Member 'ABGA_Athena_SCMachine_C::RebootedPlayer' has a wrong offset!");

}

