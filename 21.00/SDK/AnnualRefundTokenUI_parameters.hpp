#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnnualRefundTokenUI

#include "Basic.hpp"

#include "AnnualRefundTokenUI_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK::Params
{

// Function AnnualRefundTokenUI.FortAnnualRefundTicket.OnUpdateAvailableState
// 0x0001 (0x0001 - 0x0000)
struct FortAnnualRefundTicket_OnUpdateAvailableState final
{
public:
	bool                                          bIsAvailable;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAnnualRefundTicket_OnUpdateAvailableState) == 0x000001, "Wrong alignment on FortAnnualRefundTicket_OnUpdateAvailableState");
static_assert(sizeof(FortAnnualRefundTicket_OnUpdateAvailableState) == 0x000001, "Wrong size on FortAnnualRefundTicket_OnUpdateAvailableState");
static_assert(offsetof(FortAnnualRefundTicket_OnUpdateAvailableState, bIsAvailable) == 0x000000, "Member 'FortAnnualRefundTicket_OnUpdateAvailableState::bIsAvailable' has a wrong offset!");

// Function AnnualRefundTokenUI.FortAnnualRefundTicket.OnUpdatePendingState
// 0x0001 (0x0001 - 0x0000)
struct FortAnnualRefundTicket_OnUpdatePendingState final
{
public:
	bool                                          bIsPending;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAnnualRefundTicket_OnUpdatePendingState) == 0x000001, "Wrong alignment on FortAnnualRefundTicket_OnUpdatePendingState");
static_assert(sizeof(FortAnnualRefundTicket_OnUpdatePendingState) == 0x000001, "Wrong size on FortAnnualRefundTicket_OnUpdatePendingState");
static_assert(offsetof(FortAnnualRefundTicket_OnUpdatePendingState, bIsPending) == 0x000000, "Member 'FortAnnualRefundTicket_OnUpdatePendingState::bIsPending' has a wrong offset!");

// Function AnnualRefundTokenUI.FortPurchaseHistoryEntry.OnSetHistory
// 0x0003 (0x0003 - 0x0000)
struct FortPurchaseHistoryEntry_OnSetHistory final
{
public:
	bool                                          bHasBeenRefunded;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTokenlessRefund;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerHasTokens;                                  // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPurchaseHistoryEntry_OnSetHistory) == 0x000001, "Wrong alignment on FortPurchaseHistoryEntry_OnSetHistory");
static_assert(sizeof(FortPurchaseHistoryEntry_OnSetHistory) == 0x000003, "Wrong size on FortPurchaseHistoryEntry_OnSetHistory");
static_assert(offsetof(FortPurchaseHistoryEntry_OnSetHistory, bHasBeenRefunded) == 0x000000, "Member 'FortPurchaseHistoryEntry_OnSetHistory::bHasBeenRefunded' has a wrong offset!");
static_assert(offsetof(FortPurchaseHistoryEntry_OnSetHistory, bIsTokenlessRefund) == 0x000001, "Member 'FortPurchaseHistoryEntry_OnSetHistory::bIsTokenlessRefund' has a wrong offset!");
static_assert(offsetof(FortPurchaseHistoryEntry_OnSetHistory, bPlayerHasTokens) == 0x000002, "Member 'FortPurchaseHistoryEntry_OnSetHistory::bPlayerHasTokens' has a wrong offset!");

// Function AnnualRefundTokenUI.FortPurchaseHistoryEntry.SetPurchaseText
// 0x0020 (0x0020 - 0x0000)
struct FortPurchaseHistoryEntry_SetPurchaseText final
{
public:
	class FText                                   PurchaseText;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bHasBeenRefunded;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPurchaseHistoryEntry_SetPurchaseText) == 0x000008, "Wrong alignment on FortPurchaseHistoryEntry_SetPurchaseText");
static_assert(sizeof(FortPurchaseHistoryEntry_SetPurchaseText) == 0x000020, "Wrong size on FortPurchaseHistoryEntry_SetPurchaseText");
static_assert(offsetof(FortPurchaseHistoryEntry_SetPurchaseText, PurchaseText) == 0x000000, "Member 'FortPurchaseHistoryEntry_SetPurchaseText::PurchaseText' has a wrong offset!");
static_assert(offsetof(FortPurchaseHistoryEntry_SetPurchaseText, bHasBeenRefunded) == 0x000018, "Member 'FortPurchaseHistoryEntry_SetPurchaseText::bHasBeenRefunded' has a wrong offset!");

// Function AnnualRefundTokenUI.FortPurchaseHistoryEntry.SetupItemCard
// 0x0010 (0x0010 - 0x0000)
struct FortPurchaseHistoryEntry_SetupItemCard final
{
public:
	const class UFortCosmeticItemCard*            ItemCard;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortItem*                        Item;                                              // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPurchaseHistoryEntry_SetupItemCard) == 0x000008, "Wrong alignment on FortPurchaseHistoryEntry_SetupItemCard");
static_assert(sizeof(FortPurchaseHistoryEntry_SetupItemCard) == 0x000010, "Wrong size on FortPurchaseHistoryEntry_SetupItemCard");
static_assert(offsetof(FortPurchaseHistoryEntry_SetupItemCard, ItemCard) == 0x000000, "Member 'FortPurchaseHistoryEntry_SetupItemCard::ItemCard' has a wrong offset!");
static_assert(offsetof(FortPurchaseHistoryEntry_SetupItemCard, Item) == 0x000008, "Member 'FortPurchaseHistoryEntry_SetupItemCard::Item' has a wrong offset!");

// Function AnnualRefundTokenUI.FortPurchaseHistoryEntry.UpdateItemList
// 0x0010 (0x0010 - 0x0000)
struct FortPurchaseHistoryEntry_UpdateItemList final
{
public:
	TArray<class UFortCosmeticItemCard*>          ItemCards;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPurchaseHistoryEntry_UpdateItemList) == 0x000008, "Wrong alignment on FortPurchaseHistoryEntry_UpdateItemList");
static_assert(sizeof(FortPurchaseHistoryEntry_UpdateItemList) == 0x000010, "Wrong size on FortPurchaseHistoryEntry_UpdateItemList");
static_assert(offsetof(FortPurchaseHistoryEntry_UpdateItemList, ItemCards) == 0x000000, "Member 'FortPurchaseHistoryEntry_UpdateItemList::ItemCards' has a wrong offset!");

// Function AnnualRefundTokenUI.FortPurchaseHistoryScreen.HandleTabButtonClicked
// 0x0001 (0x0001 - 0x0000)
struct FortPurchaseHistoryScreen_HandleTabButtonClicked final
{
public:
	EPurchaseReturnStep                           ClickedStep;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPurchaseHistoryScreen_HandleTabButtonClicked) == 0x000001, "Wrong alignment on FortPurchaseHistoryScreen_HandleTabButtonClicked");
static_assert(sizeof(FortPurchaseHistoryScreen_HandleTabButtonClicked) == 0x000001, "Wrong size on FortPurchaseHistoryScreen_HandleTabButtonClicked");
static_assert(offsetof(FortPurchaseHistoryScreen_HandleTabButtonClicked, ClickedStep) == 0x000000, "Member 'FortPurchaseHistoryScreen_HandleTabButtonClicked::ClickedStep' has a wrong offset!");

// Function AnnualRefundTokenUI.FortPurchaseHistoryScreen.OnItemRefresh
// 0x0020 (0x0020 - 0x0000)
struct FortPurchaseHistoryScreen_OnItemRefresh final
{
public:
	struct FMtxPurchaseHistory                    PurchaseHistory;                                   // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPurchaseHistoryScreen_OnItemRefresh) == 0x000008, "Wrong alignment on FortPurchaseHistoryScreen_OnItemRefresh");
static_assert(sizeof(FortPurchaseHistoryScreen_OnItemRefresh) == 0x000020, "Wrong size on FortPurchaseHistoryScreen_OnItemRefresh");
static_assert(offsetof(FortPurchaseHistoryScreen_OnItemRefresh, PurchaseHistory) == 0x000000, "Member 'FortPurchaseHistoryScreen_OnItemRefresh::PurchaseHistory' has a wrong offset!");

// Function AnnualRefundTokenUI.FortPurchaseHistoryScreen.OnOpenSubmitRequest
// 0x0001 (0x0001 - 0x0000)
struct FortPurchaseHistoryScreen_OnOpenSubmitRequest final
{
public:
	bool                                          bIsSelectionTokenlessRefundable;                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPurchaseHistoryScreen_OnOpenSubmitRequest) == 0x000001, "Wrong alignment on FortPurchaseHistoryScreen_OnOpenSubmitRequest");
static_assert(sizeof(FortPurchaseHistoryScreen_OnOpenSubmitRequest) == 0x000001, "Wrong size on FortPurchaseHistoryScreen_OnOpenSubmitRequest");
static_assert(offsetof(FortPurchaseHistoryScreen_OnOpenSubmitRequest, bIsSelectionTokenlessRefundable) == 0x000000, "Member 'FortPurchaseHistoryScreen_OnOpenSubmitRequest::bIsSelectionTokenlessRefundable' has a wrong offset!");

// Function AnnualRefundTokenUI.FortPurchaseHistoryScreen.OnPopulateView
// 0x0001 (0x0001 - 0x0000)
struct FortPurchaseHistoryScreen_OnPopulateView final
{
public:
	EPurchaseReturnStep                           CurrentStep;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPurchaseHistoryScreen_OnPopulateView) == 0x000001, "Wrong alignment on FortPurchaseHistoryScreen_OnPopulateView");
static_assert(sizeof(FortPurchaseHistoryScreen_OnPopulateView) == 0x000001, "Wrong size on FortPurchaseHistoryScreen_OnPopulateView");
static_assert(offsetof(FortPurchaseHistoryScreen_OnPopulateView, CurrentStep) == 0x000000, "Member 'FortPurchaseHistoryScreen_OnPopulateView::CurrentStep' has a wrong offset!");

// Function AnnualRefundTokenUI.FortPurchaseHistoryScreen.UpdateItemList
// 0x0010 (0x0010 - 0x0000)
struct FortPurchaseHistoryScreen_UpdateItemList final
{
public:
	TArray<class UCommonTextBlock*>               ItemsToReturn;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPurchaseHistoryScreen_UpdateItemList) == 0x000008, "Wrong alignment on FortPurchaseHistoryScreen_UpdateItemList");
static_assert(sizeof(FortPurchaseHistoryScreen_UpdateItemList) == 0x000010, "Wrong size on FortPurchaseHistoryScreen_UpdateItemList");
static_assert(offsetof(FortPurchaseHistoryScreen_UpdateItemList, ItemsToReturn) == 0x000000, "Member 'FortPurchaseHistoryScreen_UpdateItemList::ItemsToReturn' has a wrong offset!");

// Function AnnualRefundTokenUI.FortPurchaseHistoryScreen.GetCurrentStep
// 0x0001 (0x0001 - 0x0000)
struct FortPurchaseHistoryScreen_GetCurrentStep final
{
public:
	EPurchaseReturnStep                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPurchaseHistoryScreen_GetCurrentStep) == 0x000001, "Wrong alignment on FortPurchaseHistoryScreen_GetCurrentStep");
static_assert(sizeof(FortPurchaseHistoryScreen_GetCurrentStep) == 0x000001, "Wrong size on FortPurchaseHistoryScreen_GetCurrentStep");
static_assert(offsetof(FortPurchaseHistoryScreen_GetCurrentStep, ReturnValue) == 0x000000, "Member 'FortPurchaseHistoryScreen_GetCurrentStep::ReturnValue' has a wrong offset!");

}

