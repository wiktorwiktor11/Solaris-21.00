#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DynamicUI

#include "Basic.hpp"

#include "CommonInput_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "DynamicUI_structs.hpp"
#include "Engine_classes.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// Class DynamicUI.DynamicUIConstraintBase
// 0x0068 (0x0090 - 0x0028)
class UDynamicUIConstraintBase : public UObject
{
public:
	uint8                                         Pad_28[0x48];                                      // 0x0028(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Offset;                                            // 0x0070(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicUIConstraintOverrideBase*       ConstraintOverride;                                // 0x0080(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseOffset : 1;                                    // 0x0088(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseOverride : 1;                                  // 0x0088(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DynamicUIConstraintBase">();
	}
	static class UDynamicUIConstraintBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDynamicUIConstraintBase>();
	}
};
static_assert(alignof(UDynamicUIConstraintBase) == 0x000008, "Wrong alignment on UDynamicUIConstraintBase");
static_assert(sizeof(UDynamicUIConstraintBase) == 0x000090, "Wrong size on UDynamicUIConstraintBase");
static_assert(offsetof(UDynamicUIConstraintBase, Offset) == 0x000070, "Member 'UDynamicUIConstraintBase::Offset' has a wrong offset!");
static_assert(offsetof(UDynamicUIConstraintBase, ConstraintOverride) == 0x000080, "Member 'UDynamicUIConstraintBase::ConstraintOverride' has a wrong offset!");

// Class DynamicUI.DynamicUIConstraintContainer
// 0x0028 (0x00B8 - 0x0090)
class UDynamicUIConstraintContainer final : public UDynamicUIConstraintBase
{
public:
	TArray<struct FDynamicUIContraintTarget>      WidgetsToContain;                                  // 0x0090(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FMargin                                Padding;                                           // 0x00A0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bMustMatchAllWidgets : 1;                          // 0x00B0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DynamicUIConstraintContainer">();
	}
	static class UDynamicUIConstraintContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDynamicUIConstraintContainer>();
	}
};
static_assert(alignof(UDynamicUIConstraintContainer) == 0x000008, "Wrong alignment on UDynamicUIConstraintContainer");
static_assert(sizeof(UDynamicUIConstraintContainer) == 0x0000B8, "Wrong size on UDynamicUIConstraintContainer");
static_assert(offsetof(UDynamicUIConstraintContainer, WidgetsToContain) == 0x000090, "Member 'UDynamicUIConstraintContainer::WidgetsToContain' has a wrong offset!");
static_assert(offsetof(UDynamicUIConstraintContainer, Padding) == 0x0000A0, "Member 'UDynamicUIConstraintContainer::Padding' has a wrong offset!");

// Class DynamicUI.DynamicUIScene
// 0x0030 (0x0060 - 0x0030)
class UDynamicUIScene : public UDataAsset
{
public:
	TArray<struct FDynamicUIAllowed>              Allowed;                                           // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FDynamicUIUnallowed>            Unallowed;                                         // 0x0040(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FDynamicUIPreload>              Preload;                                           // 0x0050(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DynamicUIScene">();
	}
	static class UDynamicUIScene* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDynamicUIScene>();
	}
};
static_assert(alignof(UDynamicUIScene) == 0x000008, "Wrong alignment on UDynamicUIScene");
static_assert(sizeof(UDynamicUIScene) == 0x000060, "Wrong size on UDynamicUIScene");
static_assert(offsetof(UDynamicUIScene, Allowed) == 0x000030, "Member 'UDynamicUIScene::Allowed' has a wrong offset!");
static_assert(offsetof(UDynamicUIScene, Unallowed) == 0x000040, "Member 'UDynamicUIScene::Unallowed' has a wrong offset!");
static_assert(offsetof(UDynamicUIScene, Preload) == 0x000050, "Member 'UDynamicUIScene::Preload' has a wrong offset!");

// Class DynamicUI.DynamicUIDirectorBase
// 0x0020 (0x0290 - 0x0270)
class ADynamicUIDirectorBase : public AActor
{
public:
	TArray<class UDynamicUIScene*>                DefaultScenes;                                     // 0x0270(0x0010)(Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ULocalPlayer>            OwningLocalPlayer;                                 // 0x0280(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnabledDuringReplay;                              // 0x0288(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_289[0x7];                                      // 0x0289(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddScene(const class UDynamicUIScene* Scene, const class UObject* OptionalContext);
	void RemoveScene(const class UDynamicUIScene* Scene, const class UObject* OptionalContext);

	class APlayerController* GetOwningLocalPlayerController() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DynamicUIDirectorBase">();
	}
	static class ADynamicUIDirectorBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADynamicUIDirectorBase>();
	}
};
static_assert(alignof(ADynamicUIDirectorBase) == 0x000008, "Wrong alignment on ADynamicUIDirectorBase");
static_assert(sizeof(ADynamicUIDirectorBase) == 0x000290, "Wrong size on ADynamicUIDirectorBase");
static_assert(offsetof(ADynamicUIDirectorBase, DefaultScenes) == 0x000270, "Member 'ADynamicUIDirectorBase::DefaultScenes' has a wrong offset!");
static_assert(offsetof(ADynamicUIDirectorBase, OwningLocalPlayer) == 0x000280, "Member 'ADynamicUIDirectorBase::OwningLocalPlayer' has a wrong offset!");
static_assert(offsetof(ADynamicUIDirectorBase, bEnabledDuringReplay) == 0x000288, "Member 'ADynamicUIDirectorBase::bEnabledDuringReplay' has a wrong offset!");

// Class DynamicUI.DynamicUIConstraintPosition
// 0x0018 (0x00A8 - 0x0090)
class UDynamicUIConstraintPosition final : public UDynamicUIConstraintBase
{
public:
	struct FVector2D                              Position;                                          // 0x0090(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDynamicUIAnchor                              Anchor;                                            // 0x00A0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseSafeZone : 1;                                  // 0x00A4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DynamicUIConstraintPosition">();
	}
	static class UDynamicUIConstraintPosition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDynamicUIConstraintPosition>();
	}
};
static_assert(alignof(UDynamicUIConstraintPosition) == 0x000008, "Wrong alignment on UDynamicUIConstraintPosition");
static_assert(sizeof(UDynamicUIConstraintPosition) == 0x0000A8, "Wrong size on UDynamicUIConstraintPosition");
static_assert(offsetof(UDynamicUIConstraintPosition, Position) == 0x000090, "Member 'UDynamicUIConstraintPosition::Position' has a wrong offset!");
static_assert(offsetof(UDynamicUIConstraintPosition, Anchor) == 0x0000A0, "Member 'UDynamicUIConstraintPosition::Anchor' has a wrong offset!");

// Class DynamicUI.DynamicUIConstraintAlignment
// 0x0018 (0x00A8 - 0x0090)
class UDynamicUIConstraintAlignment final : public UDynamicUIConstraintBase
{
public:
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0090(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0091(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x2];                                       // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	EDynamicUIAnchor                              Anchor;                                            // 0x0094(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDynamicUIAspectRatio                  MaxAspectRatio;                                    // 0x0098(0x0008)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bUseSafeZone : 1;                                  // 0x00A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseMaxAspectRatio : 1;                            // 0x00A0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DynamicUIConstraintAlignment">();
	}
	static class UDynamicUIConstraintAlignment* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDynamicUIConstraintAlignment>();
	}
};
static_assert(alignof(UDynamicUIConstraintAlignment) == 0x000008, "Wrong alignment on UDynamicUIConstraintAlignment");
static_assert(sizeof(UDynamicUIConstraintAlignment) == 0x0000A8, "Wrong size on UDynamicUIConstraintAlignment");
static_assert(offsetof(UDynamicUIConstraintAlignment, HorizontalAlignment) == 0x000090, "Member 'UDynamicUIConstraintAlignment::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UDynamicUIConstraintAlignment, VerticalAlignment) == 0x000091, "Member 'UDynamicUIConstraintAlignment::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(UDynamicUIConstraintAlignment, Anchor) == 0x000094, "Member 'UDynamicUIConstraintAlignment::Anchor' has a wrong offset!");
static_assert(offsetof(UDynamicUIConstraintAlignment, MaxAspectRatio) == 0x000098, "Member 'UDynamicUIConstraintAlignment::MaxAspectRatio' has a wrong offset!");

// Class DynamicUI.DynamicUIConstraintWidget
// 0x0060 (0x00F0 - 0x0090)
class UDynamicUIConstraintWidget final : public UDynamicUIConstraintBase
{
public:
	EDynamicUIAnchor                              Anchor;                                            // 0x0090(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDynamicUIContraintTarget              TargetWidget;                                      // 0x0098(0x0038)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EDynamicUIAnchor                              TargetAnchor;                                      // 0x00D0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UDynamicUIConstraintBase*>       Fallbacks;                                         // 0x00D8(0x0010)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         bConstrainToUnallowedWidgets : 1;                  // 0x00E8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseFallbacks : 1;                                 // 0x00E8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DynamicUIConstraintWidget">();
	}
	static class UDynamicUIConstraintWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDynamicUIConstraintWidget>();
	}
};
static_assert(alignof(UDynamicUIConstraintWidget) == 0x000008, "Wrong alignment on UDynamicUIConstraintWidget");
static_assert(sizeof(UDynamicUIConstraintWidget) == 0x0000F0, "Wrong size on UDynamicUIConstraintWidget");
static_assert(offsetof(UDynamicUIConstraintWidget, Anchor) == 0x000090, "Member 'UDynamicUIConstraintWidget::Anchor' has a wrong offset!");
static_assert(offsetof(UDynamicUIConstraintWidget, TargetWidget) == 0x000098, "Member 'UDynamicUIConstraintWidget::TargetWidget' has a wrong offset!");
static_assert(offsetof(UDynamicUIConstraintWidget, TargetAnchor) == 0x0000D0, "Member 'UDynamicUIConstraintWidget::TargetAnchor' has a wrong offset!");
static_assert(offsetof(UDynamicUIConstraintWidget, Fallbacks) == 0x0000D8, "Member 'UDynamicUIConstraintWidget::Fallbacks' has a wrong offset!");

// Class DynamicUI.DynamicUIConstraintOverrideBase
// 0x0000 (0x0028 - 0x0028)
class UDynamicUIConstraintOverrideBase : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DynamicUIConstraintOverrideBase">();
	}
	static class UDynamicUIConstraintOverrideBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDynamicUIConstraintOverrideBase>();
	}
};
static_assert(alignof(UDynamicUIConstraintOverrideBase) == 0x000008, "Wrong alignment on UDynamicUIConstraintOverrideBase");
static_assert(sizeof(UDynamicUIConstraintOverrideBase) == 0x000028, "Wrong size on UDynamicUIConstraintOverrideBase");

// Class DynamicUI.DynamicUIConstraintPlatformOverride
// 0x00A8 (0x00D0 - 0x0028)
class UDynamicUIConstraintPlatformOverride final : public UDynamicUIConstraintOverrideBase
{
public:
	TMap<class FName, class UDynamicUIConstraintBase*> PlatformVisibilityControls;                        // 0x0028(0x0050)(Edit, ExportObject, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<ECommonInputType, class UDynamicUIConstraintBase*> InputTypeVisibilityControls;                       // 0x0078(0x0050)(Edit, ExportObject, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DynamicUIConstraintPlatformOverride">();
	}
	static class UDynamicUIConstraintPlatformOverride* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDynamicUIConstraintPlatformOverride>();
	}
};
static_assert(alignof(UDynamicUIConstraintPlatformOverride) == 0x000008, "Wrong alignment on UDynamicUIConstraintPlatformOverride");
static_assert(sizeof(UDynamicUIConstraintPlatformOverride) == 0x0000D0, "Wrong size on UDynamicUIConstraintPlatformOverride");
static_assert(offsetof(UDynamicUIConstraintPlatformOverride, PlatformVisibilityControls) == 0x000028, "Member 'UDynamicUIConstraintPlatformOverride::PlatformVisibilityControls' has a wrong offset!");
static_assert(offsetof(UDynamicUIConstraintPlatformOverride, InputTypeVisibilityControls) == 0x000078, "Member 'UDynamicUIConstraintPlatformOverride::InputTypeVisibilityControls' has a wrong offset!");

// Class DynamicUI.DynamicUIManager
// 0x0068 (0x0098 - 0x0030)
class UDynamicUIManager final : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0x18];                                      // 0x0030(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<TWeakObjectPtr<class ULocalPlayer>, struct FDynamicUIPlayerData> PlayerDataMap;                                     // 0x0048(0x0050)(Transient, NativeAccessSpecifierPrivate)

public:
	void AddScene(const class UDynamicUIScene* Scene, const class ULocalPlayer* Player, const class UObject* OptionalContext);
	void AddScenes(const TArray<class UDynamicUIScene*>& Scenes, const class ULocalPlayer* Player, const class UObject* OptionalContext);
	void AddSceneToFirstLocalPlayer(const class UDynamicUIScene* Scene, const class UObject* OptionalContext);
	void RemoveScene(const class UDynamicUIScene* Scene, const class ULocalPlayer* Player, const class UObject* OptionalContext);
	void RemoveSceneFromFirstLocalPlayer(const class UDynamicUIScene* Scene, const class UObject* OptionalContext);
	void RemoveScenes(const TArray<class UDynamicUIScene*>& Scenes, const class ULocalPlayer* Player, const class UObject* OptionalContext);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DynamicUIManager">();
	}
	static class UDynamicUIManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDynamicUIManager>();
	}
};
static_assert(alignof(UDynamicUIManager) == 0x000008, "Wrong alignment on UDynamicUIManager");
static_assert(sizeof(UDynamicUIManager) == 0x000098, "Wrong size on UDynamicUIManager");
static_assert(offsetof(UDynamicUIManager, PlayerDataMap) == 0x000048, "Member 'UDynamicUIManager::PlayerDataMap' has a wrong offset!");

// Class DynamicUI.DynamicUIVisualizerWidget
// 0x0028 (0x02E0 - 0x02B8)
class UDynamicUIVisualizerWidget final : public UUserWidget
{
public:
	TArray<class UDynamicUIScene*>                Scenes;                                            // 0x02B8(0x0010)(Edit, ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	bool                                          bRefresh;                                          // 0x02C8(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C9[0x17];                                     // 0x02C9(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DynamicUIVisualizerWidget">();
	}
	static class UDynamicUIVisualizerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDynamicUIVisualizerWidget>();
	}
};
static_assert(alignof(UDynamicUIVisualizerWidget) == 0x000008, "Wrong alignment on UDynamicUIVisualizerWidget");
static_assert(sizeof(UDynamicUIVisualizerWidget) == 0x0002E0, "Wrong size on UDynamicUIVisualizerWidget");
static_assert(offsetof(UDynamicUIVisualizerWidget, Scenes) == 0x0002B8, "Member 'UDynamicUIVisualizerWidget::Scenes' has a wrong offset!");
static_assert(offsetof(UDynamicUIVisualizerWidget, bRefresh) == 0x0002C8, "Member 'UDynamicUIVisualizerWidget::bRefresh' has a wrong offset!");

}

