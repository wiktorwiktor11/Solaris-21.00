#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ValetRuntime

#include "Basic.hpp"

#include "GameplayTags_0_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "NetworkPrediction_structs.hpp"
#include "ModularGameplay_classes.hpp"
#include "ValetRuntime_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class ValetRuntime.FortDagwoodModsConfigs
// 0x0000 (0x0028 - 0x0028)
class UFortDagwoodModsConfigs final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortDagwoodModsConfigs">();
	}
	static class UFortDagwoodModsConfigs* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortDagwoodModsConfigs>();
	}
};
static_assert(alignof(UFortDagwoodModsConfigs) == 0x000008, "Wrong alignment on UFortDagwoodModsConfigs");
static_assert(sizeof(UFortDagwoodModsConfigs) == 0x000028, "Wrong size on UFortDagwoodModsConfigs");

// Class ValetRuntime.DagwoodNetworkPhysicsComponent
// 0x0DC0 (0x0E60 - 0x00A0)
class UDagwoodNetworkPhysicsComponent final : public UActorComponent
{
public:
	struct FNetworkPhysicsState                   NetworkPhysicsState;                               // 0x00A0(0x0090)(Net, Transient, NoDestructor, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnGeneratedLocalInputCmd;                          // 0x0130(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FDagwoodManagedState                   ReplicatedManagedState;                            // 0x0140(0x0460)(Net, Transient, Protected, NativeAccessSpecifierProtected)
	struct FDagwoodManagedState                   InManagedState;                                    // 0x05A0(0x0460)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FDagwoodManagedState                   OutManagedState;                                   // 0x0A00(0x0460)(Transient, Protected, NativeAccessSpecifierProtected)

public:
	void SetPendingInputCmd(const struct FFortDagwoodCmd& In);
	void SetState_GT(const struct FDagwoodInPersistent& In);

	struct FFortDagwoodCmd GetPendingInputCmd() const;
	struct FDagwoodInPersistent GetState_GT() const;
	struct FDagwoodState_PT GetState_PT() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DagwoodNetworkPhysicsComponent">();
	}
	static class UDagwoodNetworkPhysicsComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDagwoodNetworkPhysicsComponent>();
	}
};
static_assert(alignof(UDagwoodNetworkPhysicsComponent) == 0x000010, "Wrong alignment on UDagwoodNetworkPhysicsComponent");
static_assert(sizeof(UDagwoodNetworkPhysicsComponent) == 0x000E60, "Wrong size on UDagwoodNetworkPhysicsComponent");
static_assert(offsetof(UDagwoodNetworkPhysicsComponent, NetworkPhysicsState) == 0x0000A0, "Member 'UDagwoodNetworkPhysicsComponent::NetworkPhysicsState' has a wrong offset!");
static_assert(offsetof(UDagwoodNetworkPhysicsComponent, OnGeneratedLocalInputCmd) == 0x000130, "Member 'UDagwoodNetworkPhysicsComponent::OnGeneratedLocalInputCmd' has a wrong offset!");
static_assert(offsetof(UDagwoodNetworkPhysicsComponent, ReplicatedManagedState) == 0x000140, "Member 'UDagwoodNetworkPhysicsComponent::ReplicatedManagedState' has a wrong offset!");
static_assert(offsetof(UDagwoodNetworkPhysicsComponent, InManagedState) == 0x0005A0, "Member 'UDagwoodNetworkPhysicsComponent::InManagedState' has a wrong offset!");
static_assert(offsetof(UDagwoodNetworkPhysicsComponent, OutManagedState) == 0x000A00, "Member 'UDagwoodNetworkPhysicsComponent::OutManagedState' has a wrong offset!");

// Class ValetRuntime.FortAthenaMutator_OverrideValetVehicleParameters
// 0x0050 (0x0368 - 0x0318)
class AFortAthenaMutator_OverrideValetVehicleParameters final : public AFortAthenaMutator
{
public:
	struct FScalableFloat                         MinInitialVehicleFuelPercent;                      // 0x0318(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MaxInitialVehicleFuelPercent;                      // 0x0340(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	void OnPlaylistLoaded(class FName PlaylistName, const struct FGameplayTagContainer& PlaylistContainerTags);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaMutator_OverrideValetVehicleParameters">();
	}
	static class AFortAthenaMutator_OverrideValetVehicleParameters* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortAthenaMutator_OverrideValetVehicleParameters>();
	}
};
static_assert(alignof(AFortAthenaMutator_OverrideValetVehicleParameters) == 0x000008, "Wrong alignment on AFortAthenaMutator_OverrideValetVehicleParameters");
static_assert(sizeof(AFortAthenaMutator_OverrideValetVehicleParameters) == 0x000368, "Wrong size on AFortAthenaMutator_OverrideValetVehicleParameters");
static_assert(offsetof(AFortAthenaMutator_OverrideValetVehicleParameters, MinInitialVehicleFuelPercent) == 0x000318, "Member 'AFortAthenaMutator_OverrideValetVehicleParameters::MinInitialVehicleFuelPercent' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_OverrideValetVehicleParameters, MaxInitialVehicleFuelPercent) == 0x000340, "Member 'AFortAthenaMutator_OverrideValetVehicleParameters::MaxInitialVehicleFuelPercent' has a wrong offset!");

// Class ValetRuntime.FortDagwoodVehicle
// 0x0640 (0x1FB0 - 0x1970)
class AFortDagwoodVehicle final : public AFortAthenaSKMotorVehicle
{
public:
	TSubclassOf<class UMatineeCameraShake>        HardLandingCameraShake;                            // 0x1970(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMatineeCameraShake>        DriverCamShakeClass;                               // 0x1978(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMatineeCameraShake>        HandBrakeCamShakeClass;                            // 0x1980(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVehicleClass                                 VehicleClass;                                      // 0x1988(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1989[0x3];                                     // 0x1989(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeDelay;                                         // 0x198C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeDuration;                                      // 0x1990(0x0004)(Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinBrakeForceForSkid;                              // 0x1994(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinForwardSpeedForSkid;                            // 0x1998(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SpeedLinesCueTag;                                  // 0x199C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeStartTime;                                     // 0x19A0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19A4[0x4];                                     // 0x19A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDagwoodNetworkPhysicsComponent*        NetworkPhysicsComponent;                           // 0x19A8(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19B0[0x78];                                    // 0x19B0(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RechargeableBoostPercent;                          // 0x1A28(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A2C[0x4];                                     // 0x1A2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortSplatterSourceComponent*           SplatterSourceComp;                                // 0x1A30(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableNativizedTick;                              // 0x1A38(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A39[0x7];                                     // 0x1A39(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           PassengerLeanSockets;                              // 0x1A40(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FVector>                        PassngerLeanRelativeOffsets;                       // 0x1A50(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortCameraMode_AthenaVehicle> PassengerCameraModeClass;                          // 0x1A60(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortCameraMode>            PassengerCameraModeClass_ADS;                      // 0x1A68(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FName>                           WheelSocketNames;                                  // 0x1A70(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UFortDagwoodVehicleConfigs*             FortDagwoodVehicleConfigs;                         // 0x1A80(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<int32>                                 RearShocks;                                        // 0x1A88(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  OffroadEnvironmentDamageTags;                      // 0x1A98(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  FireDamageTags;                                    // 0x1AB8(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FVector                                NativeWheelScaleRear;                              // 0x1AD8(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                NativeWheelScaleFront;                             // 0x1AF0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                NativeTireScaleRear;                               // 0x1B08(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                NativeTireScaleFront;                              // 0x1B20(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTireSmokeActive;                                  // 0x1B38(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBoostFailed;                                      // 0x1B39(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanBoostPitch;                                    // 0x1B3A(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOnRoad;                                           // 0x1B3B(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOnLandscape;                                      // 0x1B3C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOnDirt;                                           // 0x1B3D(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOnVehicle;                                        // 0x1B3E(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bWasBrakeSkidding;                                 // 0x1B3F(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint64                                        AccelForceFeedbackHandle;                          // 0x1B40(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint64                                        SkidForceFeedbackHandle;                           // 0x1B48(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint64                                        BrakeForceFeedbackHandle;                          // 0x1B50(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint64                                        HandBrakeForceFeedbackHandle;                      // 0x1B58(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<ETireSurfaces>                         TireSurfaces;                                      // 0x1B60(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	bool                                          bSpeedLinesActive;                                 // 0x1B70(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B71[0x1F];                                    // 0x1B71(0x001F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDagwoodRuntimeModifiers               DagwoodRuntimeModifiedProperties;                  // 0x1B90(0x0088)(Net, Transient, RepNotify, Protected, NativeAccessSpecifierProtected)
	TArray<struct FAttachedWheel>                 ServerRepWheelData;                                // 0x1C18(0x0010)(Net, ZeroConstructor, Transient, RepNotify, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C28[0x50];                                    // 0x1C28(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FlipYawForwardTargetDirection;                     // 0x1C78(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                FlipYawOriginalForward;                            // 0x1C90(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETireLocations                                LastPoppedTire;                                    // 0x1CA8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1CA9[0x3];                                     // 0x1CA9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RoadTopSpeedMultiplier;                            // 0x1CAC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentBumpiness;                                  // 0x1CB0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentForwardAcceleration;                        // 0x1CB4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PreviousTurnAlpha;                                 // 0x1CB8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentCameraAssistStrength;                       // 0x1CBC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LostGripTime;                                      // 0x1CC0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LostGripRightAlpha;                                // 0x1CC4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HandbrakeTime;                                     // 0x1CC8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HandbrakeStartTime;                                // 0x1CCC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RimScrapeDamageTimer;                              // 0x1CD0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FlipYawMult;                                       // 0x1CD4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FlipTimer;                                         // 0x1CD8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FlipExplodeTimer;                                  // 0x1CDC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FlipPushForceTimer;                                // 0x1CE0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FlipAirTimer;                                      // 0x1CE4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FlipLanding;                                       // 0x1CE8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FlipStartTime;                                     // 0x1CEC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LastFlipDamageTime;                                // 0x1CF0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PreFlipControlLossTimer;                           // 0x1CF4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LastPopTireTime;                                   // 0x1CF8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDidCinematicFlip;                                 // 0x1CFC(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanCinematicFlip;                                 // 0x1CFD(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInPopTireVeer;                                    // 0x1CFE(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInFlipRecovery;                                   // 0x1CFF(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bExplodeAfterFlip;                                 // 0x1D00(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLostGrip;                                         // 0x1D01(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bApplyHandbrakeCatchupForce;                       // 0x1D02(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDidHandbrakeCatchup;                              // 0x1D03(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInFlipRoll;                                       // 0x1D04(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInFlipYaw;                                        // 0x1D05(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInFlipPitch;                                      // 0x1D06(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFlipDidLeaveGround;                               // 0x1D07(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBreakBuildingsIfBlockingLeaningPassenger;         // 0x1D08(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1D09[0x3];                                     // 0x1D09(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LeanBreakTimeAccumulator;                          // 0x1D0C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LeanBreakCheckInterval;                            // 0x1D10(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1D14[0x4];                                     // 0x1D14(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              LastStickInput;                                    // 0x1D18(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FName>                           SeatToWindowShapeNames;                            // 0x1D28(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UMatineeCameraShake*                    OffroadCameraShakeInstance;                        // 0x1D38(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMatineeCameraShake*                    DriverCameraShakeInstance;                         // 0x1D40(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMatineeCameraShake*                    AccelCameraShakeInstance;                          // 0x1D48(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMatineeCameraShake*                    HandBrakeCameraShakeInstance;                      // 0x1D50(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      NativeComp_RoadAndExhaust;                         // 0x1D58(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      NativeComp_TireSkid;                               // 0x1D60(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      NativeComp_Damage;                                 // 0x1D68(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      NativeComp_SpeedLines;                             // 0x1D70(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraSystem*                         TireExhaustFX;                                     // 0x1D78(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraSystem*                         NativeSys_SpeedLines;                              // 0x1D80(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraSystem*                         NativeSys_TireSkid;                                // 0x1D88(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1D90[0x10];                                    // 0x1D90(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ETireStates>                           TireStates;                                        // 0x1DA0(0x0010)(Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate)
	TArray<ETireStates>                           FakeTireStates;                                    // 0x1DB0(0x0010)(Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate)
	EPoppedTireReactionStates                     ActivePoppedTireReaction;                          // 0x1DC0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EPoppedTireReactionStates                     ReplicatedPoppedTireReaction;                      // 0x1DC1(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1DC2[0x2];                                     // 0x1DC2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AFortValetAudioController> ValetAudio;                                        // 0x1DC4(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1DCC[0x4];                                     // 0x1DCC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMeshComponent*>           TireMeshes;                                        // 0x1DD0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UStaticMeshComponent*>           FakeTireMeshes;                                    // 0x1DE0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1DF0[0x4];                                     // 0x1DF0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsInoperable;                                     // 0x1DF4(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1DF5[0x3];                                     // 0x1DF5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RandomSeed;                                        // 0x1DF8(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRandomStream                          RandStream;                                        // 0x1DFC(0x0008)(ZeroConstructor, Transient, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1E04[0x10C];                                   // 0x1E04(0x010C)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bSelfDestructEnabled : 1;                          // 0x1F10(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bClientUsesSelfDestructTimer : 1;                  // 0x1F10(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_1F11[0x7];                                     // 0x1F11(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            TireBootMesh;                                      // 0x1F18(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, struct FDagwoodActionDefForUI>    MapSelfDestructActionDefForUI;                     // 0x1F20(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         MinimumTimeBetweenSelfDestructPromptChanges;       // 0x1F70(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F74[0x3C];                                    // 0x1F74(0x003C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyRuntimeModifiers();
	void CleanupLoopingPooledFX();
	const struct FDagwoodRuntimeModifiers GetCurrentDagwoodRuntimeProperties();
	void HandleCurrentPlaylistLoaded(class FName PlaylistName, const struct FGameplayTagContainer& PlaylistContextTags);
	void MakeInoperable();
	void MakeOperable(bool bAddGas);
	void OnBoostFailed();
	void OnBoostReady();
	void OnClientBeginAltInteract(class AFortPawn* Pawn);
	void OnDestroyedPropFromCollision(const class ABuildingActor* BuildingHitActor);
	void OnEnteredRoad();
	void OnEnterLandscape();
	void OnExitLandscape();
	void OnExitRoad();
	void OnFlipImpactDamage();
	void OnHoldSelfDestructStarted(class AFortPawn* DriverPawn, const float ExitDuration);
	void OnHoldSelfDestructStopped(class AFortPawn* DriverPawn);
	void OnInoperableChanged(bool bInoperable);
	void OnPoppedTire(const int32 TireIndex, const bool bFakeTire);
	void OnRep_DagwoodRuntimeModifiers(const struct FDagwoodRuntimeModifiers& PrevMods);
	void OnRep_FakeTires(const TArray<ETireStates>& PrevTireStates);
	void OnRep_IsInoperable();
	void OnRep_PoppedTireReaction();
	void OnRep_RandSeed();
	void OnRep_ServerRepWheelData();
	void OnRep_Tires(const TArray<ETireStates>& PrevTireStates);
	void OnRimScrapeDamage(int32 TireIndex);
	void OnServerAltInteract(class AFortPawn* Pawn);
	void OnStartHandbrake();
	void OnStopHandbrake();
	void OnTickAudioController(float DeltaTime);
	void OnTickAudioFade(float FadeParam);
	void SelfDestructCleanup();
	void ServerAddRuntimeGearsInfo(const struct FRuntimeGearInfo& GearInfo);
	void ServerSelfDestructActivated();
	void ServerSetDestructionInfo(const float InSelfDestructTime, const float InMaxTimeZeroHealth, const float InMaxTimeSelfDestructCleanup, const float InMaxTimeExplosion);
	void ServerSetFadeDuration(const float NewFadeDuration);
	void ServerSetRuntimeBoostInfo(const struct FRuntimeBoostInfo& BoostInfo);
	void ServerSetRuntimeDriveInfo(float MaxIncline, float MaxTilt);
	void ServerSetRuntimeFuelInfo(const struct FRuntimeFuelInfo& FuelInfo);
	void ServerSetRuntimeGravity(float GravMult);
	void ServerSetRuntimeSpringsInfo(const struct FRuntimeSpringsInfo& SpringsInfo);
	void SetDamageInfoOnServer(const bool bInDamageFriendlyVehicles, const bool bInDamageOtherVehicles, const bool bInDamageOwnVehicle, const bool bInDamageAllowedFromOtherVehicle);
	void SetValetAudioController(class AFortValetAudioController* ValetAudio_0);
	void StartFade();

	bool ForwardOrReverseInputPressed() const;
	float GetBumpiness() const;
	float GetMiddleAxleForwardAdjust() const;
	float GetTireHealthPercent(ETireLocations TireIndex) const;
	bool GetTireState(int32 TireIndex) const;
	ETireSurfaces GetTireSurface(ETireLocations TireIndex) const;
	bool IsNativeBPTickEnabled() const;
	bool IsOnLandscape() const;
	bool IsOnRoad() const;
	bool IsTireSkidding(const float MinSpeedForSkid, const float AngleForSkid, const float SpeedForPeelout, const float SpeedForBraking) const;
	float NativeCalculateAccelRumbleIntensity(float MaxIntensity) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortDagwoodVehicle">();
	}
	static class AFortDagwoodVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortDagwoodVehicle>();
	}
};
static_assert(alignof(AFortDagwoodVehicle) == 0x000010, "Wrong alignment on AFortDagwoodVehicle");
static_assert(sizeof(AFortDagwoodVehicle) == 0x001FB0, "Wrong size on AFortDagwoodVehicle");
static_assert(offsetof(AFortDagwoodVehicle, HardLandingCameraShake) == 0x001970, "Member 'AFortDagwoodVehicle::HardLandingCameraShake' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, DriverCamShakeClass) == 0x001978, "Member 'AFortDagwoodVehicle::DriverCamShakeClass' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, HandBrakeCamShakeClass) == 0x001980, "Member 'AFortDagwoodVehicle::HandBrakeCamShakeClass' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, VehicleClass) == 0x001988, "Member 'AFortDagwoodVehicle::VehicleClass' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FadeDelay) == 0x00198C, "Member 'AFortDagwoodVehicle::FadeDelay' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FadeDuration) == 0x001990, "Member 'AFortDagwoodVehicle::FadeDuration' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, MinBrakeForceForSkid) == 0x001994, "Member 'AFortDagwoodVehicle::MinBrakeForceForSkid' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, MinForwardSpeedForSkid) == 0x001998, "Member 'AFortDagwoodVehicle::MinForwardSpeedForSkid' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, SpeedLinesCueTag) == 0x00199C, "Member 'AFortDagwoodVehicle::SpeedLinesCueTag' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FadeStartTime) == 0x0019A0, "Member 'AFortDagwoodVehicle::FadeStartTime' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NetworkPhysicsComponent) == 0x0019A8, "Member 'AFortDagwoodVehicle::NetworkPhysicsComponent' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, RechargeableBoostPercent) == 0x001A28, "Member 'AFortDagwoodVehicle::RechargeableBoostPercent' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, SplatterSourceComp) == 0x001A30, "Member 'AFortDagwoodVehicle::SplatterSourceComp' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bEnableNativizedTick) == 0x001A38, "Member 'AFortDagwoodVehicle::bEnableNativizedTick' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, PassengerLeanSockets) == 0x001A40, "Member 'AFortDagwoodVehicle::PassengerLeanSockets' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, PassngerLeanRelativeOffsets) == 0x001A50, "Member 'AFortDagwoodVehicle::PassngerLeanRelativeOffsets' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, PassengerCameraModeClass) == 0x001A60, "Member 'AFortDagwoodVehicle::PassengerCameraModeClass' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, PassengerCameraModeClass_ADS) == 0x001A68, "Member 'AFortDagwoodVehicle::PassengerCameraModeClass_ADS' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, WheelSocketNames) == 0x001A70, "Member 'AFortDagwoodVehicle::WheelSocketNames' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FortDagwoodVehicleConfigs) == 0x001A80, "Member 'AFortDagwoodVehicle::FortDagwoodVehicleConfigs' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, RearShocks) == 0x001A88, "Member 'AFortDagwoodVehicle::RearShocks' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, OffroadEnvironmentDamageTags) == 0x001A98, "Member 'AFortDagwoodVehicle::OffroadEnvironmentDamageTags' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FireDamageTags) == 0x001AB8, "Member 'AFortDagwoodVehicle::FireDamageTags' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativeWheelScaleRear) == 0x001AD8, "Member 'AFortDagwoodVehicle::NativeWheelScaleRear' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativeWheelScaleFront) == 0x001AF0, "Member 'AFortDagwoodVehicle::NativeWheelScaleFront' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativeTireScaleRear) == 0x001B08, "Member 'AFortDagwoodVehicle::NativeTireScaleRear' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativeTireScaleFront) == 0x001B20, "Member 'AFortDagwoodVehicle::NativeTireScaleFront' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bTireSmokeActive) == 0x001B38, "Member 'AFortDagwoodVehicle::bTireSmokeActive' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bBoostFailed) == 0x001B39, "Member 'AFortDagwoodVehicle::bBoostFailed' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bCanBoostPitch) == 0x001B3A, "Member 'AFortDagwoodVehicle::bCanBoostPitch' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bOnRoad) == 0x001B3B, "Member 'AFortDagwoodVehicle::bOnRoad' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bOnLandscape) == 0x001B3C, "Member 'AFortDagwoodVehicle::bOnLandscape' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bOnDirt) == 0x001B3D, "Member 'AFortDagwoodVehicle::bOnDirt' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bOnVehicle) == 0x001B3E, "Member 'AFortDagwoodVehicle::bOnVehicle' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bWasBrakeSkidding) == 0x001B3F, "Member 'AFortDagwoodVehicle::bWasBrakeSkidding' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, AccelForceFeedbackHandle) == 0x001B40, "Member 'AFortDagwoodVehicle::AccelForceFeedbackHandle' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, SkidForceFeedbackHandle) == 0x001B48, "Member 'AFortDagwoodVehicle::SkidForceFeedbackHandle' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, BrakeForceFeedbackHandle) == 0x001B50, "Member 'AFortDagwoodVehicle::BrakeForceFeedbackHandle' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, HandBrakeForceFeedbackHandle) == 0x001B58, "Member 'AFortDagwoodVehicle::HandBrakeForceFeedbackHandle' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, TireSurfaces) == 0x001B60, "Member 'AFortDagwoodVehicle::TireSurfaces' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bSpeedLinesActive) == 0x001B70, "Member 'AFortDagwoodVehicle::bSpeedLinesActive' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, DagwoodRuntimeModifiedProperties) == 0x001B90, "Member 'AFortDagwoodVehicle::DagwoodRuntimeModifiedProperties' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, ServerRepWheelData) == 0x001C18, "Member 'AFortDagwoodVehicle::ServerRepWheelData' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FlipYawForwardTargetDirection) == 0x001C78, "Member 'AFortDagwoodVehicle::FlipYawForwardTargetDirection' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FlipYawOriginalForward) == 0x001C90, "Member 'AFortDagwoodVehicle::FlipYawOriginalForward' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, LastPoppedTire) == 0x001CA8, "Member 'AFortDagwoodVehicle::LastPoppedTire' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, RoadTopSpeedMultiplier) == 0x001CAC, "Member 'AFortDagwoodVehicle::RoadTopSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, CurrentBumpiness) == 0x001CB0, "Member 'AFortDagwoodVehicle::CurrentBumpiness' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, CurrentForwardAcceleration) == 0x001CB4, "Member 'AFortDagwoodVehicle::CurrentForwardAcceleration' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, PreviousTurnAlpha) == 0x001CB8, "Member 'AFortDagwoodVehicle::PreviousTurnAlpha' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, CurrentCameraAssistStrength) == 0x001CBC, "Member 'AFortDagwoodVehicle::CurrentCameraAssistStrength' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, LostGripTime) == 0x001CC0, "Member 'AFortDagwoodVehicle::LostGripTime' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, LostGripRightAlpha) == 0x001CC4, "Member 'AFortDagwoodVehicle::LostGripRightAlpha' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, HandbrakeTime) == 0x001CC8, "Member 'AFortDagwoodVehicle::HandbrakeTime' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, HandbrakeStartTime) == 0x001CCC, "Member 'AFortDagwoodVehicle::HandbrakeStartTime' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, RimScrapeDamageTimer) == 0x001CD0, "Member 'AFortDagwoodVehicle::RimScrapeDamageTimer' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FlipYawMult) == 0x001CD4, "Member 'AFortDagwoodVehicle::FlipYawMult' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FlipTimer) == 0x001CD8, "Member 'AFortDagwoodVehicle::FlipTimer' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FlipExplodeTimer) == 0x001CDC, "Member 'AFortDagwoodVehicle::FlipExplodeTimer' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FlipPushForceTimer) == 0x001CE0, "Member 'AFortDagwoodVehicle::FlipPushForceTimer' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FlipAirTimer) == 0x001CE4, "Member 'AFortDagwoodVehicle::FlipAirTimer' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FlipLanding) == 0x001CE8, "Member 'AFortDagwoodVehicle::FlipLanding' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FlipStartTime) == 0x001CEC, "Member 'AFortDagwoodVehicle::FlipStartTime' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, LastFlipDamageTime) == 0x001CF0, "Member 'AFortDagwoodVehicle::LastFlipDamageTime' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, PreFlipControlLossTimer) == 0x001CF4, "Member 'AFortDagwoodVehicle::PreFlipControlLossTimer' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, LastPopTireTime) == 0x001CF8, "Member 'AFortDagwoodVehicle::LastPopTireTime' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bDidCinematicFlip) == 0x001CFC, "Member 'AFortDagwoodVehicle::bDidCinematicFlip' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bCanCinematicFlip) == 0x001CFD, "Member 'AFortDagwoodVehicle::bCanCinematicFlip' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bInPopTireVeer) == 0x001CFE, "Member 'AFortDagwoodVehicle::bInPopTireVeer' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bInFlipRecovery) == 0x001CFF, "Member 'AFortDagwoodVehicle::bInFlipRecovery' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bExplodeAfterFlip) == 0x001D00, "Member 'AFortDagwoodVehicle::bExplodeAfterFlip' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bLostGrip) == 0x001D01, "Member 'AFortDagwoodVehicle::bLostGrip' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bApplyHandbrakeCatchupForce) == 0x001D02, "Member 'AFortDagwoodVehicle::bApplyHandbrakeCatchupForce' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bDidHandbrakeCatchup) == 0x001D03, "Member 'AFortDagwoodVehicle::bDidHandbrakeCatchup' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bInFlipRoll) == 0x001D04, "Member 'AFortDagwoodVehicle::bInFlipRoll' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bInFlipYaw) == 0x001D05, "Member 'AFortDagwoodVehicle::bInFlipYaw' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bInFlipPitch) == 0x001D06, "Member 'AFortDagwoodVehicle::bInFlipPitch' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bFlipDidLeaveGround) == 0x001D07, "Member 'AFortDagwoodVehicle::bFlipDidLeaveGround' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bBreakBuildingsIfBlockingLeaningPassenger) == 0x001D08, "Member 'AFortDagwoodVehicle::bBreakBuildingsIfBlockingLeaningPassenger' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, LeanBreakTimeAccumulator) == 0x001D0C, "Member 'AFortDagwoodVehicle::LeanBreakTimeAccumulator' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, LeanBreakCheckInterval) == 0x001D10, "Member 'AFortDagwoodVehicle::LeanBreakCheckInterval' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, LastStickInput) == 0x001D18, "Member 'AFortDagwoodVehicle::LastStickInput' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, SeatToWindowShapeNames) == 0x001D28, "Member 'AFortDagwoodVehicle::SeatToWindowShapeNames' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, OffroadCameraShakeInstance) == 0x001D38, "Member 'AFortDagwoodVehicle::OffroadCameraShakeInstance' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, DriverCameraShakeInstance) == 0x001D40, "Member 'AFortDagwoodVehicle::DriverCameraShakeInstance' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, AccelCameraShakeInstance) == 0x001D48, "Member 'AFortDagwoodVehicle::AccelCameraShakeInstance' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, HandBrakeCameraShakeInstance) == 0x001D50, "Member 'AFortDagwoodVehicle::HandBrakeCameraShakeInstance' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativeComp_RoadAndExhaust) == 0x001D58, "Member 'AFortDagwoodVehicle::NativeComp_RoadAndExhaust' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativeComp_TireSkid) == 0x001D60, "Member 'AFortDagwoodVehicle::NativeComp_TireSkid' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativeComp_Damage) == 0x001D68, "Member 'AFortDagwoodVehicle::NativeComp_Damage' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativeComp_SpeedLines) == 0x001D70, "Member 'AFortDagwoodVehicle::NativeComp_SpeedLines' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, TireExhaustFX) == 0x001D78, "Member 'AFortDagwoodVehicle::TireExhaustFX' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativeSys_SpeedLines) == 0x001D80, "Member 'AFortDagwoodVehicle::NativeSys_SpeedLines' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativeSys_TireSkid) == 0x001D88, "Member 'AFortDagwoodVehicle::NativeSys_TireSkid' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, TireStates) == 0x001DA0, "Member 'AFortDagwoodVehicle::TireStates' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FakeTireStates) == 0x001DB0, "Member 'AFortDagwoodVehicle::FakeTireStates' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, ActivePoppedTireReaction) == 0x001DC0, "Member 'AFortDagwoodVehicle::ActivePoppedTireReaction' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, ReplicatedPoppedTireReaction) == 0x001DC1, "Member 'AFortDagwoodVehicle::ReplicatedPoppedTireReaction' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, ValetAudio) == 0x001DC4, "Member 'AFortDagwoodVehicle::ValetAudio' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, TireMeshes) == 0x001DD0, "Member 'AFortDagwoodVehicle::TireMeshes' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FakeTireMeshes) == 0x001DE0, "Member 'AFortDagwoodVehicle::FakeTireMeshes' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bIsInoperable) == 0x001DF4, "Member 'AFortDagwoodVehicle::bIsInoperable' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, RandomSeed) == 0x001DF8, "Member 'AFortDagwoodVehicle::RandomSeed' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, RandStream) == 0x001DFC, "Member 'AFortDagwoodVehicle::RandStream' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, TireBootMesh) == 0x001F18, "Member 'AFortDagwoodVehicle::TireBootMesh' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, MapSelfDestructActionDefForUI) == 0x001F20, "Member 'AFortDagwoodVehicle::MapSelfDestructActionDefForUI' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, MinimumTimeBetweenSelfDestructPromptChanges) == 0x001F70, "Member 'AFortDagwoodVehicle::MinimumTimeBetweenSelfDestructPromptChanges' has a wrong offset!");

// Class ValetRuntime.FortCameraMode_Dagwood
// 0x0040 (0x1B00 - 0x1AC0)
class UFortCameraMode_Dagwood final : public UFortCameraMode_AthenaVehicle
{
public:
	float                                         HorizontalCameraSpaceOffsetWhileTurning;           // 0x1AC0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteeringAngleForMaxHorizontalOffset;               // 0x1AC4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAirVerticalOffset;                               // 0x1AC8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirOffsetDampFactor;                               // 0x1ACC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedAlphaDampFactor;                              // 0x1AD0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeInAirRequiredForVertOffset;                    // 0x1AD4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VehicleBasePitch;                                  // 0x1AD8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizOffsetInterpSpeed;                            // 0x1ADC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizOffsetInterpSpeedRecovery;                    // 0x1AE0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentSpeedAlpha;                                 // 0x1AE4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentVerticalOffset;                             // 0x1AE8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentHorizontalOffset;                           // 0x1AEC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeInAir;                                         // 0x1AF0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviousSpeed;                                     // 0x1AF4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AppliedPitch;                                      // 0x1AF8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AFC[0x4];                                     // 0x1AFC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCameraMode_Dagwood">();
	}
	static class UFortCameraMode_Dagwood* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCameraMode_Dagwood>();
	}
};
static_assert(alignof(UFortCameraMode_Dagwood) == 0x000010, "Wrong alignment on UFortCameraMode_Dagwood");
static_assert(sizeof(UFortCameraMode_Dagwood) == 0x001B00, "Wrong size on UFortCameraMode_Dagwood");
static_assert(offsetof(UFortCameraMode_Dagwood, HorizontalCameraSpaceOffsetWhileTurning) == 0x001AC0, "Member 'UFortCameraMode_Dagwood::HorizontalCameraSpaceOffsetWhileTurning' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, SteeringAngleForMaxHorizontalOffset) == 0x001AC4, "Member 'UFortCameraMode_Dagwood::SteeringAngleForMaxHorizontalOffset' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, InAirVerticalOffset) == 0x001AC8, "Member 'UFortCameraMode_Dagwood::InAirVerticalOffset' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, AirOffsetDampFactor) == 0x001ACC, "Member 'UFortCameraMode_Dagwood::AirOffsetDampFactor' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, SpeedAlphaDampFactor) == 0x001AD0, "Member 'UFortCameraMode_Dagwood::SpeedAlphaDampFactor' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, TimeInAirRequiredForVertOffset) == 0x001AD4, "Member 'UFortCameraMode_Dagwood::TimeInAirRequiredForVertOffset' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, VehicleBasePitch) == 0x001AD8, "Member 'UFortCameraMode_Dagwood::VehicleBasePitch' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, HorizOffsetInterpSpeed) == 0x001ADC, "Member 'UFortCameraMode_Dagwood::HorizOffsetInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, HorizOffsetInterpSpeedRecovery) == 0x001AE0, "Member 'UFortCameraMode_Dagwood::HorizOffsetInterpSpeedRecovery' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, CurrentSpeedAlpha) == 0x001AE4, "Member 'UFortCameraMode_Dagwood::CurrentSpeedAlpha' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, CurrentVerticalOffset) == 0x001AE8, "Member 'UFortCameraMode_Dagwood::CurrentVerticalOffset' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, CurrentHorizontalOffset) == 0x001AEC, "Member 'UFortCameraMode_Dagwood::CurrentHorizontalOffset' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, TimeInAir) == 0x001AF0, "Member 'UFortCameraMode_Dagwood::TimeInAir' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, PreviousSpeed) == 0x001AF4, "Member 'UFortCameraMode_Dagwood::PreviousSpeed' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, AppliedPitch) == 0x001AF8, "Member 'UFortCameraMode_Dagwood::AppliedPitch' has a wrong offset!");

// Class ValetRuntime.FortDagwoodVehicleAnimInstance
// 0x0070 (0x0610 - 0x05A0)
class UFortDagwoodVehicleAnimInstance final : public UFortVehicleAnimInstance
{
public:
	class AFortDagwoodVehicle*                    Dagwood;                                           // 0x05A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GlassScale_FR;                                     // 0x05A8(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GlassScale_FL;                                     // 0x05C0(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GlassScale_BR;                                     // 0x05D8(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GlassScale_BL;                                     // 0x05F0(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_608[0x8];                                      // 0x0608(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortDagwoodVehicleAnimInstance">();
	}
	static class UFortDagwoodVehicleAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortDagwoodVehicleAnimInstance>();
	}
};
static_assert(alignof(UFortDagwoodVehicleAnimInstance) == 0x000010, "Wrong alignment on UFortDagwoodVehicleAnimInstance");
static_assert(sizeof(UFortDagwoodVehicleAnimInstance) == 0x000610, "Wrong size on UFortDagwoodVehicleAnimInstance");
static_assert(offsetof(UFortDagwoodVehicleAnimInstance, Dagwood) == 0x0005A0, "Member 'UFortDagwoodVehicleAnimInstance::Dagwood' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleAnimInstance, GlassScale_FR) == 0x0005A8, "Member 'UFortDagwoodVehicleAnimInstance::GlassScale_FR' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleAnimInstance, GlassScale_FL) == 0x0005C0, "Member 'UFortDagwoodVehicleAnimInstance::GlassScale_FL' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleAnimInstance, GlassScale_BR) == 0x0005D8, "Member 'UFortDagwoodVehicleAnimInstance::GlassScale_BR' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleAnimInstance, GlassScale_BL) == 0x0005F0, "Member 'UFortDagwoodVehicleAnimInstance::GlassScale_BL' has a wrong offset!");

// Class ValetRuntime.FortContextualTutorial_VehicleValetLowFuel
// 0x0008 (0x0100 - 0x00F8)
class UFortContextualTutorial_VehicleValetLowFuel final : public UFortContextualTutorial
{
public:
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleStartSkydivingForActivation();
	void HandleVehicleStateChanged(class AFortPlayerPawn* PlayerPawn, class AActor* NewVehicle, class AActor* OldVehicle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortContextualTutorial_VehicleValetLowFuel">();
	}
	static class UFortContextualTutorial_VehicleValetLowFuel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortContextualTutorial_VehicleValetLowFuel>();
	}
};
static_assert(alignof(UFortContextualTutorial_VehicleValetLowFuel) == 0x000008, "Wrong alignment on UFortContextualTutorial_VehicleValetLowFuel");
static_assert(sizeof(UFortContextualTutorial_VehicleValetLowFuel) == 0x000100, "Wrong size on UFortContextualTutorial_VehicleValetLowFuel");

// Class ValetRuntime.FortDagwoodVehicleConfigs
// 0x0220 (0x0960 - 0x0740)
class UFortDagwoodVehicleConfigs final : public UFortPhysicsVehicleConfigs
{
public:
	float                                         BoostMinPushForce;                                 // 0x0740(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostTopSpeedForceMultiplier;                      // 0x0744(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostTopSpeedMultiplier;                           // 0x0748(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostWaterMultiplier;                              // 0x074C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VehiclePowerSlideFrontMultiplier;                  // 0x0750(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VehiclePowerSlideRearMultiplier;                   // 0x0754(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandbrakeGripAngle;                                // 0x0758(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandbrakeGripAngleRecovery;                        // 0x075C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandbrakeSpeedForGripLoss;                         // 0x0760(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSlipDuration;                                   // 0x0764(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandbrakeLateralFriction;                          // 0x0768(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandbrakeSteeringMultiplier;                       // 0x076C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandbrakeFrictionDampFactor;                       // 0x0770(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RestoreTractionDampFactor;                         // 0x0774(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandbrakeForce;                                    // 0x0778(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandbrakeForceNoAccel;                             // 0x077C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostSteeringMultiplier;                           // 0x0780(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirtRoadTopSpeedMultiplier;                        // 0x0784(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirtRoadFrontLateralFriction;                      // 0x0788(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirtRoadRearLateralFriction;                       // 0x078C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirtRoadAccelForceMultiplier;                      // 0x0790(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirtRoadFakeBumpinessMultiplier;                   // 0x0794(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffRoadTopSpeedMultiplier;                         // 0x0798(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffRoadFrontLateralFriction;                       // 0x079C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffRoadRearLateralFriction;                        // 0x07A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffRoadPushForceMultiplier;                        // 0x07A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffroadDamageImpactForceMin;                       // 0x07A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffroadDamageImpactForceMax;                       // 0x07AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffroadImpactDamageMin;                            // 0x07B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffroadImpactDamageMax;                            // 0x07B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSpeedForOffroadHandling;                        // 0x07B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FireHealthPercentThreshold;                        // 0x07BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinBumpinessSpringHitTimeMultiplier;               // 0x07C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxBumpinessSpringHitTimeMultiplier;               // 0x07C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BumpinessExponentForShocks;                        // 0x07C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffroadRumbleIntensity;                            // 0x07CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirtRoadRumbleIntensity;                           // 0x07D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffroadDamageScaleExponent;                        // 0x07D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HardLandingThresholdMin;                           // 0x07D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HardLandingThresholdMax;                           // 0x07DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HardLandingShakeZAmplitudeMin;                     // 0x07E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HardLandingShakeZAmplitudeMax;                     // 0x07E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedLinesThreshold;                               // 0x07E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PropDestructionImpulse;                            // 0x07EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DestructionAngle;                                  // 0x07F0(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpNormalMinProtected;                              // 0x07F4(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpForwardMinProtected;                             // 0x07F8(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NonCameraSteeringAngleMultiplier;                  // 0x07FC(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraAssistStrengthMax;                           // 0x0800(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraAssistStrengthMin;                           // 0x0804(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraAssistStrengthRecovery;                      // 0x0808(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraAssistInterpSpeed;                           // 0x080C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReverseChangeDirectionBrakeForceMultiplier;        // 0x0810(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReverseChangeDirectionSpeedThreshold;              // 0x0814(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DriftExitPushForce;                                // 0x0818(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DriftExitCatchupSpeed;                             // 0x081C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandbrakeDurationRequiredForCatchup;               // 0x0820(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpactMagnitudeToEndCatchup;                       // 0x0824(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoppedTireSpringLength;                            // 0x0828(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoppedTireSpringStiff;                             // 0x082C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoppedTireSpringDamp;                              // 0x0830(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoppedTireTractionMultiplier_StageOne;             // 0x0834(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoppedTireTractionMultiplier_StageTwo;             // 0x0838(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoppedTireTractionMultiplier_Min;                  // 0x083C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoppedTireScrapeFrictionMultiplier;                // 0x0840(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSpeedForRimScrapeDamage;                        // 0x0844(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RimScrapeDamageRate;                               // 0x0848(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RimScrapeFlipRollMagnitude;                        // 0x084C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RimScrapeFlipPitchMagnitude;                       // 0x0850(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedForRimFlip;                                   // 0x0854(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealthPercentForFlip;                              // 0x0858(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipYawDuration;                                   // 0x085C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipRollDuration;                                  // 0x0860(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipPitchDuration;                                 // 0x0864(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipExplodeDuration_Yaw;                           // 0x0868(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipExplodeDuration_Pitch;                         // 0x086C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipPushForceDuration_Yaw;                         // 0x0870(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipPushForceDuration_Pitch;                       // 0x0874(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipPushForcMultiplier;                            // 0x0878(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipPushForce_UpComponentPitch;                    // 0x087C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipPushForce_UpComponentRoll;                     // 0x0880(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinTimeInAirRequiredForExplodeLanding;             // 0x0884(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipYawSpringStiff;                                // 0x0888(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipYawSpringDamp;                                 // 0x088C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipYawSpringMaxAccel;                             // 0x0890(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealthPercentForExplode;                           // 0x0894(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipRecoveryTime;                                  // 0x0898(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipMaxDuration;                                   // 0x089C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipWiggleDuration;                                // 0x08A0(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoppedTireVeerDuration;                            // 0x08A4(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoppedTireVeerSteeringAngle;                       // 0x08A8(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipWiggleFrequency;                               // 0x08AC(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipWiggleSteeringAngle;                           // 0x08B0(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipYawAngleThreshold;                             // 0x08B4(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsesBoost;                                        // 0x08B8(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8B9[0x3];                                      // 0x08B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RechargeableBoostRateOfUse;                        // 0x08BC(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RechargeableBoostRateOfRegen;                      // 0x08C0(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostRateOfRegenMinMultiplier;                     // 0x08C4(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostRateOfRegenMaxMultiplier;                     // 0x08C8(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostRegenMaxMultiplyTime;                         // 0x08CC(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RechargeableBoostRequiredPercentToActivate;        // 0x08D0(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RechargeableBoostMaxPercent;                       // 0x08D4(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RechargeableBoostMinPercent;                       // 0x08D8(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumWheelsOnSurfaceRequired;                        // 0x08DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnalogDriftStickThreshold;                         // 0x08E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TireBootRightSocketName;                           // 0x08E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TireBootLeftSocketName;                            // 0x08E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TireBootRelativeDistance;                          // 0x08EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostForceInAir;                                   // 0x08F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostAirMaxSpeed;                                  // 0x08F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           TireSocketNames;                                   // 0x08F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<class FName>                           TireBoneNames;                                     // 0x0908(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<int32>                                 RearTireIndices;                                   // 0x0918(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<int32>                                 RightSideTires;                                    // 0x0928(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<int32>                                 FakeTireIndices;                                   // 0x0938(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                          bNoWheels;                                         // 0x0948(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_949[0x3];                                      // 0x0949(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NoWheelsSpringLenMult;                             // 0x094C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           NoWheelsBonesToHide;                               // 0x0950(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortDagwoodVehicleConfigs">();
	}
	static class UFortDagwoodVehicleConfigs* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortDagwoodVehicleConfigs>();
	}
};
static_assert(alignof(UFortDagwoodVehicleConfigs) == 0x000008, "Wrong alignment on UFortDagwoodVehicleConfigs");
static_assert(sizeof(UFortDagwoodVehicleConfigs) == 0x000960, "Wrong size on UFortDagwoodVehicleConfigs");
static_assert(offsetof(UFortDagwoodVehicleConfigs, BoostMinPushForce) == 0x000740, "Member 'UFortDagwoodVehicleConfigs::BoostMinPushForce' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, BoostTopSpeedForceMultiplier) == 0x000744, "Member 'UFortDagwoodVehicleConfigs::BoostTopSpeedForceMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, BoostTopSpeedMultiplier) == 0x000748, "Member 'UFortDagwoodVehicleConfigs::BoostTopSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, BoostWaterMultiplier) == 0x00074C, "Member 'UFortDagwoodVehicleConfigs::BoostWaterMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, VehiclePowerSlideFrontMultiplier) == 0x000750, "Member 'UFortDagwoodVehicleConfigs::VehiclePowerSlideFrontMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, VehiclePowerSlideRearMultiplier) == 0x000754, "Member 'UFortDagwoodVehicleConfigs::VehiclePowerSlideRearMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HandbrakeGripAngle) == 0x000758, "Member 'UFortDagwoodVehicleConfigs::HandbrakeGripAngle' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HandbrakeGripAngleRecovery) == 0x00075C, "Member 'UFortDagwoodVehicleConfigs::HandbrakeGripAngleRecovery' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HandbrakeSpeedForGripLoss) == 0x000760, "Member 'UFortDagwoodVehicleConfigs::HandbrakeSpeedForGripLoss' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, MinSlipDuration) == 0x000764, "Member 'UFortDagwoodVehicleConfigs::MinSlipDuration' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HandbrakeLateralFriction) == 0x000768, "Member 'UFortDagwoodVehicleConfigs::HandbrakeLateralFriction' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HandbrakeSteeringMultiplier) == 0x00076C, "Member 'UFortDagwoodVehicleConfigs::HandbrakeSteeringMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HandbrakeFrictionDampFactor) == 0x000770, "Member 'UFortDagwoodVehicleConfigs::HandbrakeFrictionDampFactor' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, RestoreTractionDampFactor) == 0x000774, "Member 'UFortDagwoodVehicleConfigs::RestoreTractionDampFactor' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HandbrakeForce) == 0x000778, "Member 'UFortDagwoodVehicleConfigs::HandbrakeForce' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HandbrakeForceNoAccel) == 0x00077C, "Member 'UFortDagwoodVehicleConfigs::HandbrakeForceNoAccel' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, BoostSteeringMultiplier) == 0x000780, "Member 'UFortDagwoodVehicleConfigs::BoostSteeringMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, DirtRoadTopSpeedMultiplier) == 0x000784, "Member 'UFortDagwoodVehicleConfigs::DirtRoadTopSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, DirtRoadFrontLateralFriction) == 0x000788, "Member 'UFortDagwoodVehicleConfigs::DirtRoadFrontLateralFriction' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, DirtRoadRearLateralFriction) == 0x00078C, "Member 'UFortDagwoodVehicleConfigs::DirtRoadRearLateralFriction' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, DirtRoadAccelForceMultiplier) == 0x000790, "Member 'UFortDagwoodVehicleConfigs::DirtRoadAccelForceMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, DirtRoadFakeBumpinessMultiplier) == 0x000794, "Member 'UFortDagwoodVehicleConfigs::DirtRoadFakeBumpinessMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, OffRoadTopSpeedMultiplier) == 0x000798, "Member 'UFortDagwoodVehicleConfigs::OffRoadTopSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, OffRoadFrontLateralFriction) == 0x00079C, "Member 'UFortDagwoodVehicleConfigs::OffRoadFrontLateralFriction' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, OffRoadRearLateralFriction) == 0x0007A0, "Member 'UFortDagwoodVehicleConfigs::OffRoadRearLateralFriction' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, OffRoadPushForceMultiplier) == 0x0007A4, "Member 'UFortDagwoodVehicleConfigs::OffRoadPushForceMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, OffroadDamageImpactForceMin) == 0x0007A8, "Member 'UFortDagwoodVehicleConfigs::OffroadDamageImpactForceMin' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, OffroadDamageImpactForceMax) == 0x0007AC, "Member 'UFortDagwoodVehicleConfigs::OffroadDamageImpactForceMax' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, OffroadImpactDamageMin) == 0x0007B0, "Member 'UFortDagwoodVehicleConfigs::OffroadImpactDamageMin' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, OffroadImpactDamageMax) == 0x0007B4, "Member 'UFortDagwoodVehicleConfigs::OffroadImpactDamageMax' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, MinSpeedForOffroadHandling) == 0x0007B8, "Member 'UFortDagwoodVehicleConfigs::MinSpeedForOffroadHandling' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FireHealthPercentThreshold) == 0x0007BC, "Member 'UFortDagwoodVehicleConfigs::FireHealthPercentThreshold' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, MinBumpinessSpringHitTimeMultiplier) == 0x0007C0, "Member 'UFortDagwoodVehicleConfigs::MinBumpinessSpringHitTimeMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, MaxBumpinessSpringHitTimeMultiplier) == 0x0007C4, "Member 'UFortDagwoodVehicleConfigs::MaxBumpinessSpringHitTimeMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, BumpinessExponentForShocks) == 0x0007C8, "Member 'UFortDagwoodVehicleConfigs::BumpinessExponentForShocks' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, OffroadRumbleIntensity) == 0x0007CC, "Member 'UFortDagwoodVehicleConfigs::OffroadRumbleIntensity' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, DirtRoadRumbleIntensity) == 0x0007D0, "Member 'UFortDagwoodVehicleConfigs::DirtRoadRumbleIntensity' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, OffroadDamageScaleExponent) == 0x0007D4, "Member 'UFortDagwoodVehicleConfigs::OffroadDamageScaleExponent' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HardLandingThresholdMin) == 0x0007D8, "Member 'UFortDagwoodVehicleConfigs::HardLandingThresholdMin' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HardLandingThresholdMax) == 0x0007DC, "Member 'UFortDagwoodVehicleConfigs::HardLandingThresholdMax' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HardLandingShakeZAmplitudeMin) == 0x0007E0, "Member 'UFortDagwoodVehicleConfigs::HardLandingShakeZAmplitudeMin' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HardLandingShakeZAmplitudeMax) == 0x0007E4, "Member 'UFortDagwoodVehicleConfigs::HardLandingShakeZAmplitudeMax' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, SpeedLinesThreshold) == 0x0007E8, "Member 'UFortDagwoodVehicleConfigs::SpeedLinesThreshold' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, PropDestructionImpulse) == 0x0007EC, "Member 'UFortDagwoodVehicleConfigs::PropDestructionImpulse' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, DestructionAngle) == 0x0007F0, "Member 'UFortDagwoodVehicleConfigs::DestructionAngle' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, UpNormalMinProtected) == 0x0007F4, "Member 'UFortDagwoodVehicleConfigs::UpNormalMinProtected' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, UpForwardMinProtected) == 0x0007F8, "Member 'UFortDagwoodVehicleConfigs::UpForwardMinProtected' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, NonCameraSteeringAngleMultiplier) == 0x0007FC, "Member 'UFortDagwoodVehicleConfigs::NonCameraSteeringAngleMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, CameraAssistStrengthMax) == 0x000800, "Member 'UFortDagwoodVehicleConfigs::CameraAssistStrengthMax' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, CameraAssistStrengthMin) == 0x000804, "Member 'UFortDagwoodVehicleConfigs::CameraAssistStrengthMin' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, CameraAssistStrengthRecovery) == 0x000808, "Member 'UFortDagwoodVehicleConfigs::CameraAssistStrengthRecovery' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, CameraAssistInterpSpeed) == 0x00080C, "Member 'UFortDagwoodVehicleConfigs::CameraAssistInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, ReverseChangeDirectionBrakeForceMultiplier) == 0x000810, "Member 'UFortDagwoodVehicleConfigs::ReverseChangeDirectionBrakeForceMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, ReverseChangeDirectionSpeedThreshold) == 0x000814, "Member 'UFortDagwoodVehicleConfigs::ReverseChangeDirectionSpeedThreshold' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, DriftExitPushForce) == 0x000818, "Member 'UFortDagwoodVehicleConfigs::DriftExitPushForce' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, DriftExitCatchupSpeed) == 0x00081C, "Member 'UFortDagwoodVehicleConfigs::DriftExitCatchupSpeed' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HandbrakeDurationRequiredForCatchup) == 0x000820, "Member 'UFortDagwoodVehicleConfigs::HandbrakeDurationRequiredForCatchup' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, ImpactMagnitudeToEndCatchup) == 0x000824, "Member 'UFortDagwoodVehicleConfigs::ImpactMagnitudeToEndCatchup' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, PoppedTireSpringLength) == 0x000828, "Member 'UFortDagwoodVehicleConfigs::PoppedTireSpringLength' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, PoppedTireSpringStiff) == 0x00082C, "Member 'UFortDagwoodVehicleConfigs::PoppedTireSpringStiff' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, PoppedTireSpringDamp) == 0x000830, "Member 'UFortDagwoodVehicleConfigs::PoppedTireSpringDamp' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, PoppedTireTractionMultiplier_StageOne) == 0x000834, "Member 'UFortDagwoodVehicleConfigs::PoppedTireTractionMultiplier_StageOne' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, PoppedTireTractionMultiplier_StageTwo) == 0x000838, "Member 'UFortDagwoodVehicleConfigs::PoppedTireTractionMultiplier_StageTwo' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, PoppedTireTractionMultiplier_Min) == 0x00083C, "Member 'UFortDagwoodVehicleConfigs::PoppedTireTractionMultiplier_Min' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, PoppedTireScrapeFrictionMultiplier) == 0x000840, "Member 'UFortDagwoodVehicleConfigs::PoppedTireScrapeFrictionMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, MinSpeedForRimScrapeDamage) == 0x000844, "Member 'UFortDagwoodVehicleConfigs::MinSpeedForRimScrapeDamage' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, RimScrapeDamageRate) == 0x000848, "Member 'UFortDagwoodVehicleConfigs::RimScrapeDamageRate' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, RimScrapeFlipRollMagnitude) == 0x00084C, "Member 'UFortDagwoodVehicleConfigs::RimScrapeFlipRollMagnitude' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, RimScrapeFlipPitchMagnitude) == 0x000850, "Member 'UFortDagwoodVehicleConfigs::RimScrapeFlipPitchMagnitude' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, SpeedForRimFlip) == 0x000854, "Member 'UFortDagwoodVehicleConfigs::SpeedForRimFlip' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HealthPercentForFlip) == 0x000858, "Member 'UFortDagwoodVehicleConfigs::HealthPercentForFlip' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipYawDuration) == 0x00085C, "Member 'UFortDagwoodVehicleConfigs::FlipYawDuration' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipRollDuration) == 0x000860, "Member 'UFortDagwoodVehicleConfigs::FlipRollDuration' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipPitchDuration) == 0x000864, "Member 'UFortDagwoodVehicleConfigs::FlipPitchDuration' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipExplodeDuration_Yaw) == 0x000868, "Member 'UFortDagwoodVehicleConfigs::FlipExplodeDuration_Yaw' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipExplodeDuration_Pitch) == 0x00086C, "Member 'UFortDagwoodVehicleConfigs::FlipExplodeDuration_Pitch' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipPushForceDuration_Yaw) == 0x000870, "Member 'UFortDagwoodVehicleConfigs::FlipPushForceDuration_Yaw' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipPushForceDuration_Pitch) == 0x000874, "Member 'UFortDagwoodVehicleConfigs::FlipPushForceDuration_Pitch' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipPushForcMultiplier) == 0x000878, "Member 'UFortDagwoodVehicleConfigs::FlipPushForcMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipPushForce_UpComponentPitch) == 0x00087C, "Member 'UFortDagwoodVehicleConfigs::FlipPushForce_UpComponentPitch' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipPushForce_UpComponentRoll) == 0x000880, "Member 'UFortDagwoodVehicleConfigs::FlipPushForce_UpComponentRoll' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, MinTimeInAirRequiredForExplodeLanding) == 0x000884, "Member 'UFortDagwoodVehicleConfigs::MinTimeInAirRequiredForExplodeLanding' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipYawSpringStiff) == 0x000888, "Member 'UFortDagwoodVehicleConfigs::FlipYawSpringStiff' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipYawSpringDamp) == 0x00088C, "Member 'UFortDagwoodVehicleConfigs::FlipYawSpringDamp' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipYawSpringMaxAccel) == 0x000890, "Member 'UFortDagwoodVehicleConfigs::FlipYawSpringMaxAccel' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HealthPercentForExplode) == 0x000894, "Member 'UFortDagwoodVehicleConfigs::HealthPercentForExplode' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipRecoveryTime) == 0x000898, "Member 'UFortDagwoodVehicleConfigs::FlipRecoveryTime' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipMaxDuration) == 0x00089C, "Member 'UFortDagwoodVehicleConfigs::FlipMaxDuration' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipWiggleDuration) == 0x0008A0, "Member 'UFortDagwoodVehicleConfigs::FlipWiggleDuration' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, PoppedTireVeerDuration) == 0x0008A4, "Member 'UFortDagwoodVehicleConfigs::PoppedTireVeerDuration' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, PoppedTireVeerSteeringAngle) == 0x0008A8, "Member 'UFortDagwoodVehicleConfigs::PoppedTireVeerSteeringAngle' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipWiggleFrequency) == 0x0008AC, "Member 'UFortDagwoodVehicleConfigs::FlipWiggleFrequency' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipWiggleSteeringAngle) == 0x0008B0, "Member 'UFortDagwoodVehicleConfigs::FlipWiggleSteeringAngle' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipYawAngleThreshold) == 0x0008B4, "Member 'UFortDagwoodVehicleConfigs::FlipYawAngleThreshold' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, bUsesBoost) == 0x0008B8, "Member 'UFortDagwoodVehicleConfigs::bUsesBoost' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, RechargeableBoostRateOfUse) == 0x0008BC, "Member 'UFortDagwoodVehicleConfigs::RechargeableBoostRateOfUse' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, RechargeableBoostRateOfRegen) == 0x0008C0, "Member 'UFortDagwoodVehicleConfigs::RechargeableBoostRateOfRegen' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, BoostRateOfRegenMinMultiplier) == 0x0008C4, "Member 'UFortDagwoodVehicleConfigs::BoostRateOfRegenMinMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, BoostRateOfRegenMaxMultiplier) == 0x0008C8, "Member 'UFortDagwoodVehicleConfigs::BoostRateOfRegenMaxMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, BoostRegenMaxMultiplyTime) == 0x0008CC, "Member 'UFortDagwoodVehicleConfigs::BoostRegenMaxMultiplyTime' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, RechargeableBoostRequiredPercentToActivate) == 0x0008D0, "Member 'UFortDagwoodVehicleConfigs::RechargeableBoostRequiredPercentToActivate' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, RechargeableBoostMaxPercent) == 0x0008D4, "Member 'UFortDagwoodVehicleConfigs::RechargeableBoostMaxPercent' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, RechargeableBoostMinPercent) == 0x0008D8, "Member 'UFortDagwoodVehicleConfigs::RechargeableBoostMinPercent' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, NumWheelsOnSurfaceRequired) == 0x0008DC, "Member 'UFortDagwoodVehicleConfigs::NumWheelsOnSurfaceRequired' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, AnalogDriftStickThreshold) == 0x0008E0, "Member 'UFortDagwoodVehicleConfigs::AnalogDriftStickThreshold' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, TireBootRightSocketName) == 0x0008E4, "Member 'UFortDagwoodVehicleConfigs::TireBootRightSocketName' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, TireBootLeftSocketName) == 0x0008E8, "Member 'UFortDagwoodVehicleConfigs::TireBootLeftSocketName' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, TireBootRelativeDistance) == 0x0008EC, "Member 'UFortDagwoodVehicleConfigs::TireBootRelativeDistance' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, BoostForceInAir) == 0x0008F0, "Member 'UFortDagwoodVehicleConfigs::BoostForceInAir' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, BoostAirMaxSpeed) == 0x0008F4, "Member 'UFortDagwoodVehicleConfigs::BoostAirMaxSpeed' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, TireSocketNames) == 0x0008F8, "Member 'UFortDagwoodVehicleConfigs::TireSocketNames' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, TireBoneNames) == 0x000908, "Member 'UFortDagwoodVehicleConfigs::TireBoneNames' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, RearTireIndices) == 0x000918, "Member 'UFortDagwoodVehicleConfigs::RearTireIndices' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, RightSideTires) == 0x000928, "Member 'UFortDagwoodVehicleConfigs::RightSideTires' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FakeTireIndices) == 0x000938, "Member 'UFortDagwoodVehicleConfigs::FakeTireIndices' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, bNoWheels) == 0x000948, "Member 'UFortDagwoodVehicleConfigs::bNoWheels' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, NoWheelsSpringLenMult) == 0x00094C, "Member 'UFortDagwoodVehicleConfigs::NoWheelsSpringLenMult' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, NoWheelsBonesToHide) == 0x000950, "Member 'UFortDagwoodVehicleConfigs::NoWheelsBonesToHide' has a wrong offset!");

// Class ValetRuntime.FortDagwoodVehicleManager
// 0x0010 (0x00B0 - 0x00A0)
class UFortDagwoodVehicleManager final : public UGameStateComponent
{
public:
	bool                                          bHasUpdatedPropReplacement;                        // 0x00A0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumVehiclesSpawnedWithTireMod;                     // 0x00A4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CustomHandleActorStreamedInEditor(class AActor* SourceActor);
	void OnVehicleSpawned(class AFortAthenaVehicle* Vehicle);
	void OnVehicleSpawnsUpdated(class UFortVehicleItemDefinition* VehicleItemDef, TArray<class AActor*>* SpawnedVehicles, int32 NewVehicleCount);
	void UpdatePropReplacement();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortDagwoodVehicleManager">();
	}
	static class UFortDagwoodVehicleManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortDagwoodVehicleManager>();
	}
};
static_assert(alignof(UFortDagwoodVehicleManager) == 0x000008, "Wrong alignment on UFortDagwoodVehicleManager");
static_assert(sizeof(UFortDagwoodVehicleManager) == 0x0000B0, "Wrong size on UFortDagwoodVehicleManager");
static_assert(offsetof(UFortDagwoodVehicleManager, bHasUpdatedPropReplacement) == 0x0000A0, "Member 'UFortDagwoodVehicleManager::bHasUpdatedPropReplacement' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleManager, NumVehiclesSpawnedWithTireMod) == 0x0000A4, "Member 'UFortDagwoodVehicleManager::NumVehiclesSpawnedWithTireMod' has a wrong offset!");

// Class ValetRuntime.FortValetAudioController
// 0x0150 (0x03C0 - 0x0270)
class AFortValetAudioController final : public AActor
{
public:
	TMulticastInlineDelegate<void()>              OnEngineLoadChanged;                               // 0x0270(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnShiftGearCompleted;                              // 0x0280(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bUpshift)> OnShiftGearDelegate;                               // 0x0290(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         RPMResetTime_Native;                               // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JitterAmount_Native;                               // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShiftTimeThreshold_Native;                         // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeSinceShift_Native;                             // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EngineRPMInterp_Native;                            // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EngineRPMLinear_Native;                            // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinRPMRange_Native;                                // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRPMRange_Native;                                // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCurrentlyShifting_Native;                         // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C1[0x3];                                      // 0x02C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentAccelRateGearModifier_Native;               // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentAccelRate_Native;                           // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentGear_Native;                                // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxGear_Native;                                    // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultAccelRateScalar_Native;                     // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GearAttackInterpSpeed_Native;                      // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GearReleaseInterpSpeed_Native;                     // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccelRateScalarFirstGear_Native;                   // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccelRateScalarMinGear_Native;                     // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccelRateScalarMaxGear_Native;                     // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShiftToRPMStart_Native;                            // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShiftToRPMEnd_Native;                              // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShiftFromRPMStart_Native;                          // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShiftFromRPMEnd_Native;                            // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRPMSawtoothDecrement_Native;                    // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRPMSawtoothRepeatTime_Native;                   // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownhillAccelScalar_Native;                        // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UphillAccelScalar_Native;                          // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30C[0x4];                                      // 0x030C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            RPMFloatCurveMapping;                              // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalizedSpeed_Native;                            // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuspValue_Native;                                  // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHandbraking_Native;                             // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_321[0x3];                                      // 0x0321(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MotoSynthVolume_Native;                            // 0x0324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MotoSynthInitialFadeInTime_Native;                 // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32C[0x4];                                      // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MotoSynthLogRPM_Native;                            // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasFuel_Native;                                   // 0x0334(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInWater_Native;                                 // 0x0335(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocalPlayerInVehicle_Native;                      // 0x0336(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_337[0x1];                                      // 0x0337(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeLocalPlayerEnteredVehicle_Native;              // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttemptingDirectionChange_Native;                 // 0x033C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreDestroy_Native;                                // 0x033D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEngineLoad_Native;                                // 0x033E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33F[0x1];                                      // 0x033F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SkidAmount_Native;                                 // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeSinceAwoken_Native;                            // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDestroyed_Native;                                 // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_349[0x3];                                      // 0x0349(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeSinceSurfaceChange_Native;                     // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             OnInitialSuspensionSound;                          // 0x0350(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleForSkidding_Native;                           // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringCompressionMultiplier;                       // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MotoSynthMaxVolume_Native;                         // 0x0360(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_364[0x4];                                      // 0x0364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              MotoSynthTimeInVehicleTimeRange;                   // 0x0368(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MotoSynthTimeInVehicleVolumeRange;                 // 0x0378(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AFortDagwoodVehicle>     ValetVehicle;                                      // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortLayeredAudioComponent*             Engine_Native;                                     // 0x0390(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAudioComponent*                        BoostAudioComponent_Native;                        // 0x0398(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USynthComponentMoto*                    SynthComponentMoto_Native;                         // 0x03A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortCollisionAudioComponent*           SuspensionCollisionComponent_Native;               // 0x03A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B0[0x10];                                     // 0x03B0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CacheValetVehicle(class AFortDagwoodVehicle* InVehicle);
	void OnSuspensionCollision_Native(bool* OutResult, float* OutMagnitude);
	void OnTireModApplied(const struct FTireInfo& AppliedTireMod);
	void Update_Native();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortValetAudioController">();
	}
	static class AFortValetAudioController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortValetAudioController>();
	}
};
static_assert(alignof(AFortValetAudioController) == 0x000008, "Wrong alignment on AFortValetAudioController");
static_assert(sizeof(AFortValetAudioController) == 0x0003C0, "Wrong size on AFortValetAudioController");
static_assert(offsetof(AFortValetAudioController, OnEngineLoadChanged) == 0x000270, "Member 'AFortValetAudioController::OnEngineLoadChanged' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, OnShiftGearCompleted) == 0x000280, "Member 'AFortValetAudioController::OnShiftGearCompleted' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, OnShiftGearDelegate) == 0x000290, "Member 'AFortValetAudioController::OnShiftGearDelegate' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, RPMResetTime_Native) == 0x0002A0, "Member 'AFortValetAudioController::RPMResetTime_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, JitterAmount_Native) == 0x0002A4, "Member 'AFortValetAudioController::JitterAmount_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, ShiftTimeThreshold_Native) == 0x0002A8, "Member 'AFortValetAudioController::ShiftTimeThreshold_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, TimeSinceShift_Native) == 0x0002AC, "Member 'AFortValetAudioController::TimeSinceShift_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, EngineRPMInterp_Native) == 0x0002B0, "Member 'AFortValetAudioController::EngineRPMInterp_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, EngineRPMLinear_Native) == 0x0002B4, "Member 'AFortValetAudioController::EngineRPMLinear_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, MinRPMRange_Native) == 0x0002B8, "Member 'AFortValetAudioController::MinRPMRange_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, MaxRPMRange_Native) == 0x0002BC, "Member 'AFortValetAudioController::MaxRPMRange_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, bCurrentlyShifting_Native) == 0x0002C0, "Member 'AFortValetAudioController::bCurrentlyShifting_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, CurrentAccelRateGearModifier_Native) == 0x0002C4, "Member 'AFortValetAudioController::CurrentAccelRateGearModifier_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, CurrentAccelRate_Native) == 0x0002C8, "Member 'AFortValetAudioController::CurrentAccelRate_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, CurrentGear_Native) == 0x0002CC, "Member 'AFortValetAudioController::CurrentGear_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, MaxGear_Native) == 0x0002D0, "Member 'AFortValetAudioController::MaxGear_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, DefaultAccelRateScalar_Native) == 0x0002D4, "Member 'AFortValetAudioController::DefaultAccelRateScalar_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, GearAttackInterpSpeed_Native) == 0x0002D8, "Member 'AFortValetAudioController::GearAttackInterpSpeed_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, GearReleaseInterpSpeed_Native) == 0x0002DC, "Member 'AFortValetAudioController::GearReleaseInterpSpeed_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, AccelRateScalarFirstGear_Native) == 0x0002E0, "Member 'AFortValetAudioController::AccelRateScalarFirstGear_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, AccelRateScalarMinGear_Native) == 0x0002E4, "Member 'AFortValetAudioController::AccelRateScalarMinGear_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, AccelRateScalarMaxGear_Native) == 0x0002E8, "Member 'AFortValetAudioController::AccelRateScalarMaxGear_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, ShiftToRPMStart_Native) == 0x0002EC, "Member 'AFortValetAudioController::ShiftToRPMStart_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, ShiftToRPMEnd_Native) == 0x0002F0, "Member 'AFortValetAudioController::ShiftToRPMEnd_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, ShiftFromRPMStart_Native) == 0x0002F4, "Member 'AFortValetAudioController::ShiftFromRPMStart_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, ShiftFromRPMEnd_Native) == 0x0002F8, "Member 'AFortValetAudioController::ShiftFromRPMEnd_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, MaxRPMSawtoothDecrement_Native) == 0x0002FC, "Member 'AFortValetAudioController::MaxRPMSawtoothDecrement_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, MaxRPMSawtoothRepeatTime_Native) == 0x000300, "Member 'AFortValetAudioController::MaxRPMSawtoothRepeatTime_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, DownhillAccelScalar_Native) == 0x000304, "Member 'AFortValetAudioController::DownhillAccelScalar_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, UphillAccelScalar_Native) == 0x000308, "Member 'AFortValetAudioController::UphillAccelScalar_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, RPMFloatCurveMapping) == 0x000310, "Member 'AFortValetAudioController::RPMFloatCurveMapping' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, NormalizedSpeed_Native) == 0x000318, "Member 'AFortValetAudioController::NormalizedSpeed_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, SuspValue_Native) == 0x00031C, "Member 'AFortValetAudioController::SuspValue_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, bIsHandbraking_Native) == 0x000320, "Member 'AFortValetAudioController::bIsHandbraking_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, MotoSynthVolume_Native) == 0x000324, "Member 'AFortValetAudioController::MotoSynthVolume_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, MotoSynthInitialFadeInTime_Native) == 0x000328, "Member 'AFortValetAudioController::MotoSynthInitialFadeInTime_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, MotoSynthLogRPM_Native) == 0x000330, "Member 'AFortValetAudioController::MotoSynthLogRPM_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, bHasFuel_Native) == 0x000334, "Member 'AFortValetAudioController::bHasFuel_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, bIsInWater_Native) == 0x000335, "Member 'AFortValetAudioController::bIsInWater_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, bLocalPlayerInVehicle_Native) == 0x000336, "Member 'AFortValetAudioController::bLocalPlayerInVehicle_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, TimeLocalPlayerEnteredVehicle_Native) == 0x000338, "Member 'AFortValetAudioController::TimeLocalPlayerEnteredVehicle_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, bAttemptingDirectionChange_Native) == 0x00033C, "Member 'AFortValetAudioController::bAttemptingDirectionChange_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, bPreDestroy_Native) == 0x00033D, "Member 'AFortValetAudioController::bPreDestroy_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, bEngineLoad_Native) == 0x00033E, "Member 'AFortValetAudioController::bEngineLoad_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, SkidAmount_Native) == 0x000340, "Member 'AFortValetAudioController::SkidAmount_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, TimeSinceAwoken_Native) == 0x000344, "Member 'AFortValetAudioController::TimeSinceAwoken_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, bDestroyed_Native) == 0x000348, "Member 'AFortValetAudioController::bDestroyed_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, TimeSinceSurfaceChange_Native) == 0x00034C, "Member 'AFortValetAudioController::TimeSinceSurfaceChange_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, OnInitialSuspensionSound) == 0x000350, "Member 'AFortValetAudioController::OnInitialSuspensionSound' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, AngleForSkidding_Native) == 0x000358, "Member 'AFortValetAudioController::AngleForSkidding_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, SpringCompressionMultiplier) == 0x00035C, "Member 'AFortValetAudioController::SpringCompressionMultiplier' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, MotoSynthMaxVolume_Native) == 0x000360, "Member 'AFortValetAudioController::MotoSynthMaxVolume_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, MotoSynthTimeInVehicleTimeRange) == 0x000368, "Member 'AFortValetAudioController::MotoSynthTimeInVehicleTimeRange' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, MotoSynthTimeInVehicleVolumeRange) == 0x000378, "Member 'AFortValetAudioController::MotoSynthTimeInVehicleVolumeRange' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, ValetVehicle) == 0x000388, "Member 'AFortValetAudioController::ValetVehicle' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, Engine_Native) == 0x000390, "Member 'AFortValetAudioController::Engine_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, BoostAudioComponent_Native) == 0x000398, "Member 'AFortValetAudioController::BoostAudioComponent_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, SynthComponentMoto_Native) == 0x0003A0, "Member 'AFortValetAudioController::SynthComponentMoto_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, SuspensionCollisionComponent_Native) == 0x0003A8, "Member 'AFortValetAudioController::SuspensionCollisionComponent_Native' has a wrong offset!");

// Class ValetRuntime.FortValetGameFeatureData
// 0x0080 (0x0560 - 0x04E0)
class UFortValetGameFeatureData final : public UFortGameFeatureData
{
public:
	TMap<TSoftClassPtr<class UClass>, struct FVehiclePropReplacementData> PropReplacements;                                  // 0x04E0(0x0050)(Edit, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   VehicleSpawnerClass;                               // 0x0530(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpawnActorCollisionHandlingMethod            SpawnActorCollisionHandlingMethod;                 // 0x0558(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_559[0x7];                                      // 0x0559(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortValetGameFeatureData">();
	}
	static class UFortValetGameFeatureData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortValetGameFeatureData>();
	}
};
static_assert(alignof(UFortValetGameFeatureData) == 0x000008, "Wrong alignment on UFortValetGameFeatureData");
static_assert(sizeof(UFortValetGameFeatureData) == 0x000560, "Wrong size on UFortValetGameFeatureData");
static_assert(offsetof(UFortValetGameFeatureData, PropReplacements) == 0x0004E0, "Member 'UFortValetGameFeatureData::PropReplacements' has a wrong offset!");
static_assert(offsetof(UFortValetGameFeatureData, VehicleSpawnerClass) == 0x000530, "Member 'UFortValetGameFeatureData::VehicleSpawnerClass' has a wrong offset!");
static_assert(offsetof(UFortValetGameFeatureData, SpawnActorCollisionHandlingMethod) == 0x000558, "Member 'UFortValetGameFeatureData::SpawnActorCollisionHandlingMethod' has a wrong offset!");

// Class ValetRuntime.FortValetMountedGunAnimInstance
// 0x0020 (0x0510 - 0x04F0)
class UFortValetMountedGunAnimInstance final : public UFortAnimInstance
{
public:
	class AFortDagwoodVehicle*                    VehicleActor;                                      // 0x04E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUsingMountedGun;                                // 0x04F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4F1[0x3];                                      // 0x04F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SeatIndexCached;                                   // 0x04F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimingYaw;                                         // 0x04F8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimingPitch;                                       // 0x04FC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortWeaponRangedForVehicle*            MountedWeapon;                                     // 0x0500(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_508[0x8];                                      // 0x0508(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortValetMountedGunAnimInstance">();
	}
	static class UFortValetMountedGunAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortValetMountedGunAnimInstance>();
	}
};
static_assert(alignof(UFortValetMountedGunAnimInstance) == 0x000010, "Wrong alignment on UFortValetMountedGunAnimInstance");
static_assert(sizeof(UFortValetMountedGunAnimInstance) == 0x000510, "Wrong size on UFortValetMountedGunAnimInstance");
static_assert(offsetof(UFortValetMountedGunAnimInstance, VehicleActor) == 0x0004E8, "Member 'UFortValetMountedGunAnimInstance::VehicleActor' has a wrong offset!");
static_assert(offsetof(UFortValetMountedGunAnimInstance, bIsUsingMountedGun) == 0x0004F0, "Member 'UFortValetMountedGunAnimInstance::bIsUsingMountedGun' has a wrong offset!");
static_assert(offsetof(UFortValetMountedGunAnimInstance, SeatIndexCached) == 0x0004F4, "Member 'UFortValetMountedGunAnimInstance::SeatIndexCached' has a wrong offset!");
static_assert(offsetof(UFortValetMountedGunAnimInstance, AimingYaw) == 0x0004F8, "Member 'UFortValetMountedGunAnimInstance::AimingYaw' has a wrong offset!");
static_assert(offsetof(UFortValetMountedGunAnimInstance, AimingPitch) == 0x0004FC, "Member 'UFortValetMountedGunAnimInstance::AimingPitch' has a wrong offset!");
static_assert(offsetof(UFortValetMountedGunAnimInstance, MountedWeapon) == 0x000500, "Member 'UFortValetMountedGunAnimInstance::MountedWeapon' has a wrong offset!");

// Class ValetRuntime.FortValetPassengerAnimInstance
// 0x0070 (0x0830 - 0x07C0)
class UFortValetPassengerAnimInstance : public UFortVehicleOccupantAnimInstance
{
public:
	struct FCachedAnimRelevancyData               IntoVehicleCachedData;                             // 0x07C0(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FCachedAnimRelevancyData               OutOfVehicleCachedData;                            // 0x07D4(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AFortDagwoodVehicle>     DagwoodVehicleInstance;                            // 0x07E8(0x0028)(BlueprintVisible, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnYaw;                                           // 0x0810(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTime;                                            // 0x0814(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutTime;                                           // 0x0818(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NegativeTurnYaw;                                   // 0x081C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReloading;                                      // 0x0820(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTargeting;                                      // 0x0821(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFiring;                                         // 0x0822(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUsingConsumable;                                // 0x0823(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInAction;                                       // 0x0824(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPassengerBackLeft;                              // 0x0825(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsThrowConsumable;                                // 0x0826(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTargetingOrThrowingConsumable;                  // 0x0827(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_828[0x8];                                      // 0x0828(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortValetPassengerAnimInstance">();
	}
	static class UFortValetPassengerAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortValetPassengerAnimInstance>();
	}
};
static_assert(alignof(UFortValetPassengerAnimInstance) == 0x000010, "Wrong alignment on UFortValetPassengerAnimInstance");
static_assert(sizeof(UFortValetPassengerAnimInstance) == 0x000830, "Wrong size on UFortValetPassengerAnimInstance");
static_assert(offsetof(UFortValetPassengerAnimInstance, IntoVehicleCachedData) == 0x0007C0, "Member 'UFortValetPassengerAnimInstance::IntoVehicleCachedData' has a wrong offset!");
static_assert(offsetof(UFortValetPassengerAnimInstance, OutOfVehicleCachedData) == 0x0007D4, "Member 'UFortValetPassengerAnimInstance::OutOfVehicleCachedData' has a wrong offset!");
static_assert(offsetof(UFortValetPassengerAnimInstance, DagwoodVehicleInstance) == 0x0007E8, "Member 'UFortValetPassengerAnimInstance::DagwoodVehicleInstance' has a wrong offset!");
static_assert(offsetof(UFortValetPassengerAnimInstance, TurnYaw) == 0x000810, "Member 'UFortValetPassengerAnimInstance::TurnYaw' has a wrong offset!");
static_assert(offsetof(UFortValetPassengerAnimInstance, InTime) == 0x000814, "Member 'UFortValetPassengerAnimInstance::InTime' has a wrong offset!");
static_assert(offsetof(UFortValetPassengerAnimInstance, OutTime) == 0x000818, "Member 'UFortValetPassengerAnimInstance::OutTime' has a wrong offset!");
static_assert(offsetof(UFortValetPassengerAnimInstance, NegativeTurnYaw) == 0x00081C, "Member 'UFortValetPassengerAnimInstance::NegativeTurnYaw' has a wrong offset!");
static_assert(offsetof(UFortValetPassengerAnimInstance, bIsReloading) == 0x000820, "Member 'UFortValetPassengerAnimInstance::bIsReloading' has a wrong offset!");
static_assert(offsetof(UFortValetPassengerAnimInstance, bIsTargeting) == 0x000821, "Member 'UFortValetPassengerAnimInstance::bIsTargeting' has a wrong offset!");
static_assert(offsetof(UFortValetPassengerAnimInstance, bIsFiring) == 0x000822, "Member 'UFortValetPassengerAnimInstance::bIsFiring' has a wrong offset!");
static_assert(offsetof(UFortValetPassengerAnimInstance, bIsUsingConsumable) == 0x000823, "Member 'UFortValetPassengerAnimInstance::bIsUsingConsumable' has a wrong offset!");
static_assert(offsetof(UFortValetPassengerAnimInstance, bIsInAction) == 0x000824, "Member 'UFortValetPassengerAnimInstance::bIsInAction' has a wrong offset!");
static_assert(offsetof(UFortValetPassengerAnimInstance, bIsPassengerBackLeft) == 0x000825, "Member 'UFortValetPassengerAnimInstance::bIsPassengerBackLeft' has a wrong offset!");
static_assert(offsetof(UFortValetPassengerAnimInstance, bIsThrowConsumable) == 0x000826, "Member 'UFortValetPassengerAnimInstance::bIsThrowConsumable' has a wrong offset!");
static_assert(offsetof(UFortValetPassengerAnimInstance, bIsTargetingOrThrowingConsumable) == 0x000827, "Member 'UFortValetPassengerAnimInstance::bIsTargetingOrThrowingConsumable' has a wrong offset!");

}

