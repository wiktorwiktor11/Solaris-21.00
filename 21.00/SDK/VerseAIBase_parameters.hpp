#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VerseAIBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function VerseAIBase.VerseAISpawner.InternalOnAIDied
// 0x0028 (0x0028 - 0x0000)
struct VerseAISpawner_InternalOnAIDied final
{
public:
	class AController*                            KilledController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsABot;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPawn*                              KilledAIPawn;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerPawn*                        KilledPlayerPawn;                                  // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            KillerController;                                  // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseAISpawner_InternalOnAIDied) == 0x000008, "Wrong alignment on VerseAISpawner_InternalOnAIDied");
static_assert(sizeof(VerseAISpawner_InternalOnAIDied) == 0x000028, "Wrong size on VerseAISpawner_InternalOnAIDied");
static_assert(offsetof(VerseAISpawner_InternalOnAIDied, KilledController) == 0x000000, "Member 'VerseAISpawner_InternalOnAIDied::KilledController' has a wrong offset!");
static_assert(offsetof(VerseAISpawner_InternalOnAIDied, bIsABot) == 0x000008, "Member 'VerseAISpawner_InternalOnAIDied::bIsABot' has a wrong offset!");
static_assert(offsetof(VerseAISpawner_InternalOnAIDied, KilledAIPawn) == 0x000010, "Member 'VerseAISpawner_InternalOnAIDied::KilledAIPawn' has a wrong offset!");
static_assert(offsetof(VerseAISpawner_InternalOnAIDied, KilledPlayerPawn) == 0x000018, "Member 'VerseAISpawner_InternalOnAIDied::KilledPlayerPawn' has a wrong offset!");
static_assert(offsetof(VerseAISpawner_InternalOnAIDied, KillerController) == 0x000020, "Member 'VerseAISpawner_InternalOnAIDied::KillerController' has a wrong offset!");

// Function VerseAIBase.VerseAISpawner.InternalOnSpawned
// 0x0010 (0x0010 - 0x0000)
struct VerseAISpawner_InternalOnSpawned final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestId;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VerseAISpawner_InternalOnSpawned) == 0x000008, "Wrong alignment on VerseAISpawner_InternalOnSpawned");
static_assert(sizeof(VerseAISpawner_InternalOnSpawned) == 0x000010, "Wrong size on VerseAISpawner_InternalOnSpawned");
static_assert(offsetof(VerseAISpawner_InternalOnSpawned, Pawn) == 0x000000, "Member 'VerseAISpawner_InternalOnSpawned::Pawn' has a wrong offset!");
static_assert(offsetof(VerseAISpawner_InternalOnSpawned, RequestId) == 0x000008, "Member 'VerseAISpawner_InternalOnSpawned::RequestId' has a wrong offset!");

// Function VerseAIBase.VerseAISpawner.KillAllBots
// 0x0001 (0x0001 - 0x0000)
struct VerseAISpawner_KillAllBots final
{
public:
	bool                                          bForceDoNotDropLoot;                               // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseAISpawner_KillAllBots) == 0x000001, "Wrong alignment on VerseAISpawner_KillAllBots");
static_assert(sizeof(VerseAISpawner_KillAllBots) == 0x000001, "Wrong size on VerseAISpawner_KillAllBots");
static_assert(offsetof(VerseAISpawner_KillAllBots, bForceDoNotDropLoot) == 0x000000, "Member 'VerseAISpawner_KillAllBots::bForceDoNotDropLoot' has a wrong offset!");

// Function VerseAIBase.VerseAISpawner.OnEQSFinished
// 0x0010 (0x0010 - 0x0000)
struct VerseAISpawner_OnEQSFinished final
{
public:
	TArray<struct FVector>                        QueryResultLocations;                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseAISpawner_OnEQSFinished) == 0x000008, "Wrong alignment on VerseAISpawner_OnEQSFinished");
static_assert(sizeof(VerseAISpawner_OnEQSFinished) == 0x000010, "Wrong size on VerseAISpawner_OnEQSFinished");
static_assert(offsetof(VerseAISpawner_OnEQSFinished, QueryResultLocations) == 0x000000, "Member 'VerseAISpawner_OnEQSFinished::QueryResultLocations' has a wrong offset!");

// Function VerseAIBase.VerseAISpawner.OnPreSpawn
// 0x0008 (0x0008 - 0x0000)
struct VerseAISpawner_OnPreSpawn final
{
public:
	class UFortAthenaAISpawnerDataComponentList*  ComponentList;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseAISpawner_OnPreSpawn) == 0x000008, "Wrong alignment on VerseAISpawner_OnPreSpawn");
static_assert(sizeof(VerseAISpawner_OnPreSpawn) == 0x000008, "Wrong size on VerseAISpawner_OnPreSpawn");
static_assert(offsetof(VerseAISpawner_OnPreSpawn, ComponentList) == 0x000000, "Member 'VerseAISpawner_OnPreSpawn::ComponentList' has a wrong offset!");

// Function VerseAIBase.VerseAISpawner.OnSpawned
// 0x0008 (0x0008 - 0x0000)
struct VerseAISpawner_OnSpawned final
{
public:
	class AFortPawn*                              Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerseAISpawner_OnSpawned) == 0x000008, "Wrong alignment on VerseAISpawner_OnSpawned");
static_assert(sizeof(VerseAISpawner_OnSpawned) == 0x000008, "Wrong size on VerseAISpawner_OnSpawned");
static_assert(offsetof(VerseAISpawner_OnSpawned, Pawn) == 0x000000, "Member 'VerseAISpawner_OnSpawned::Pawn' has a wrong offset!");

}

