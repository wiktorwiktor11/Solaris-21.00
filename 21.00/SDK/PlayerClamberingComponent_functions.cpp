#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PlayerClamberingComponent

#include "Basic.hpp"

#include "PlayerClamberingComponent_classes.hpp"
#include "PlayerClamberingComponent_parameters.hpp"


namespace SDK
{

// Function PlayerClamberingComponent.PlayerClamberingComponent_C.UpdateClamberLocationHighlight
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FClamberingTargetingData         TargetingData                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)

void UPlayerClamberingComponent_C::UpdateClamberLocationHighlight(struct FClamberingTargetingData& TargetingData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerClamberingComponent_C", "UpdateClamberLocationHighlight");

	Params::PlayerClamberingComponent_C_UpdateClamberLocationHighlight Parms{};

	Parms.TargetingData = std::move(TargetingData);

	UObject::ProcessEvent(Func, &Parms);

	TargetingData = std::move(Parms.TargetingData);
}


// Function PlayerClamberingComponent.PlayerClamberingComponent_C.ShouldTutorialBeEnabled
// (Public, BlueprintCallable, BlueprintEvent)

void UPlayerClamberingComponent_C::ShouldTutorialBeEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerClamberingComponent_C", "ShouldTutorialBeEnabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PlayerClamberingComponent.PlayerClamberingComponent_C.SetUISceneVisible
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bVisible                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPlayerClamberingComponent_C::SetUISceneVisible(bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerClamberingComponent_C", "SetUISceneVisible");

	Params::PlayerClamberingComponent_C_SetUISceneVisible Parms{};

	Parms.bVisible = bVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PlayerClamberingComponent.PlayerClamberingComponent_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPlayerClamberingComponent_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerClamberingComponent_C", "ReceiveTick");

	Params::PlayerClamberingComponent_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PlayerClamberingComponent.PlayerClamberingComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UPlayerClamberingComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerClamberingComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PlayerClamberingComponent.PlayerClamberingComponent_C.HandleTargetingDataValid
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FClamberingTargetingData         TargetingData                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)

void UPlayerClamberingComponent_C::HandleTargetingDataValid(const struct FClamberingTargetingData& TargetingData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerClamberingComponent_C", "HandleTargetingDataValid");

	Params::PlayerClamberingComponent_C_HandleTargetingDataValid Parms{};

	Parms.TargetingData = std::move(TargetingData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function PlayerClamberingComponent.PlayerClamberingComponent_C.HandleTargetingDataInvalid
// (Event, Protected, BlueprintEvent)

void UPlayerClamberingComponent_C::HandleTargetingDataInvalid()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerClamberingComponent_C", "HandleTargetingDataInvalid");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PlayerClamberingComponent.PlayerClamberingComponent_C.HandleClamberStateStopped
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AFortPawn*                        Pawn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EClamberingState                        ClamberingState                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPlayerClamberingComponent_C::HandleClamberStateStopped(class AFortPawn* Pawn, EClamberingState ClamberingState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerClamberingComponent_C", "HandleClamberStateStopped");

	Params::PlayerClamberingComponent_C_HandleClamberStateStopped Parms{};

	Parms.Pawn = Pawn;
	Parms.ClamberingState = ClamberingState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PlayerClamberingComponent.PlayerClamberingComponent_C.HandleClamberStateStarted
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AFortPawn*                        Pawn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EClamberingState                        ClamberingState                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPlayerClamberingComponent_C::HandleClamberStateStarted(class AFortPawn* Pawn, EClamberingState ClamberingState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerClamberingComponent_C", "HandleClamberStateStarted");

	Params::PlayerClamberingComponent_C_HandleClamberStateStarted Parms{};

	Parms.Pawn = Pawn;
	Parms.ClamberingState = ClamberingState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PlayerClamberingComponent.PlayerClamberingComponent_C.HandleClamberingTargetOutOfActivationRange
// (Event, Protected, BlueprintEvent)

void UPlayerClamberingComponent_C::HandleClamberingTargetOutOfActivationRange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerClamberingComponent_C", "HandleClamberingTargetOutOfActivationRange");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PlayerClamberingComponent.PlayerClamberingComponent_C.HandleClamberingTargetInActivationRange
// (Event, Protected, BlueprintEvent)

void UPlayerClamberingComponent_C::HandleClamberingTargetInActivationRange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerClamberingComponent_C", "HandleClamberingTargetInActivationRange");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PlayerClamberingComponent.PlayerClamberingComponent_C.GetClamberLocationHighlightTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FClamberingTargetingData         TargetingData                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)
// struct FTransform                       Transform                                              (Parm, OutParm, IsPlainOldData, NoDestructor)
// struct FRotator                         Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UPlayerClamberingComponent_C::GetClamberLocationHighlightTransform(struct FClamberingTargetingData& TargetingData, struct FTransform* Transform, struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerClamberingComponent_C", "GetClamberLocationHighlightTransform");

	Params::PlayerClamberingComponent_C_GetClamberLocationHighlightTransform Parms{};

	Parms.TargetingData = std::move(TargetingData);

	UObject::ProcessEvent(Func, &Parms);

	TargetingData = std::move(Parms.TargetingData);

	if (Transform != nullptr)
		*Transform = std::move(Parms.Transform);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function PlayerClamberingComponent.PlayerClamberingComponent_C.GetClamberAnimPlayRate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   PlayRate                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPlayerClamberingComponent_C::GetClamberAnimPlayRate(float* PlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerClamberingComponent_C", "GetClamberAnimPlayRate");

	Params::PlayerClamberingComponent_C_GetClamberAnimPlayRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayRate != nullptr)
		*PlayRate = Parms.PlayRate;
}


// Function PlayerClamberingComponent.PlayerClamberingComponent_C.GetClamberAnim
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Clamber_Anim                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPlayerClamberingComponent_C::GetClamberAnim(class UAnimMontage** Clamber_Anim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerClamberingComponent_C", "GetClamberAnim");

	Params::PlayerClamberingComponent_C_GetClamberAnim Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Clamber_Anim != nullptr)
		*Clamber_Anim = Parms.Clamber_Anim;
}


// Function PlayerClamberingComponent.PlayerClamberingComponent_C.ExecuteUbergraph_PlayerClamberingComponent
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPlayerClamberingComponent_C::ExecuteUbergraph_PlayerClamberingComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerClamberingComponent_C", "ExecuteUbergraph_PlayerClamberingComponent");

	Params::PlayerClamberingComponent_C_ExecuteUbergraph_PlayerClamberingComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PlayerClamberingComponent.PlayerClamberingComponent_C.DestroyClamberLocationHighlight
// (Public, BlueprintCallable, BlueprintEvent)

void UPlayerClamberingComponent_C::DestroyClamberLocationHighlight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerClamberingComponent_C", "DestroyClamberLocationHighlight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PlayerClamberingComponent.PlayerClamberingComponent_C.CustomEvent_0
// (BlueprintCallable, BlueprintEvent)

void UPlayerClamberingComponent_C::CustomEvent_0()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerClamberingComponent_C", "CustomEvent_0");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PlayerClamberingComponent.PlayerClamberingComponent_C.CreateClamberLocationHighlight
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FClamberingTargetingData         TargetingData                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)

void UPlayerClamberingComponent_C::CreateClamberLocationHighlight(struct FClamberingTargetingData& TargetingData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerClamberingComponent_C", "CreateClamberLocationHighlight");

	Params::PlayerClamberingComponent_C_CreateClamberLocationHighlight Parms{};

	Parms.TargetingData = std::move(TargetingData);

	UObject::ProcessEvent(Func, &Parms);

	TargetingData = std::move(Parms.TargetingData);
}


// Function PlayerClamberingComponent.PlayerClamberingComponent_C.CanShowUIPrompt
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bCanShow                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPlayerClamberingComponent_C::CanShowUIPrompt(bool* bCanShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerClamberingComponent_C", "CanShowUIPrompt");

	Params::PlayerClamberingComponent_C_CanShowUIPrompt Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bCanShow != nullptr)
		*bCanShow = Parms.bCanShow;
}


// Function PlayerClamberingComponent.PlayerClamberingComponent_C.BP_HandleSynchedActionStarted
// (Event, Protected, BlueprintEvent)

void UPlayerClamberingComponent_C::BP_HandleSynchedActionStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerClamberingComponent_C", "BP_HandleSynchedActionStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PlayerClamberingComponent.PlayerClamberingComponent_C.BP_HandleClamberingStateChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// EClamberingState                        OldClamberingState                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EClamberingState                        NewClamberingState                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPlayerClamberingComponent_C::BP_HandleClamberingStateChanged(const EClamberingState OldClamberingState, const EClamberingState NewClamberingState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerClamberingComponent_C", "BP_HandleClamberingStateChanged");

	Params::PlayerClamberingComponent_C_BP_HandleClamberingStateChanged Parms{};

	Parms.OldClamberingState = OldClamberingState;
	Parms.NewClamberingState = NewClamberingState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PlayerClamberingComponent.PlayerClamberingComponent_C.BP_TutorialModeEnabled
// (Event, Protected, BlueprintCallable, BlueprintEvent, Const)

void UPlayerClamberingComponent_C::BP_TutorialModeEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerClamberingComponent_C", "BP_TutorialModeEnabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PlayerClamberingComponent.PlayerClamberingComponent_C.BP_TutorialModeDisabled
// (Event, Protected, BlueprintCallable, BlueprintEvent, Const)

void UPlayerClamberingComponent_C::BP_TutorialModeDisabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerClamberingComponent_C", "BP_TutorialModeDisabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PlayerClamberingComponent.PlayerClamberingComponent_C.BP_CanStartTargeting
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bCanStartTargeting                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPlayerClamberingComponent_C::BP_CanStartTargeting(bool* bCanStartTargeting) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerClamberingComponent_C", "BP_CanStartTargeting");

	Params::PlayerClamberingComponent_C_BP_CanStartTargeting Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bCanStartTargeting != nullptr)
		*bCanStartTargeting = Parms.bCanStartTargeting;
}


// Function PlayerClamberingComponent.PlayerClamberingComponent_C.BP_CanStartClambering
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bCanStartClambering                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPlayerClamberingComponent_C::BP_CanStartClambering(bool* bCanStartClambering) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerClamberingComponent_C", "BP_CanStartClambering");

	Params::PlayerClamberingComponent_C_BP_CanStartClambering Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bCanStartClambering != nullptr)
		*bCanStartClambering = Parms.bCanStartClambering;
}

}

