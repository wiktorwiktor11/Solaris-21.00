#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SOMRuntime

#include "Basic.hpp"

#include "SOMRuntime_structs.hpp"
#include "Engine_classes.hpp"
#include "GameplayTags_0_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// Class SOMRuntime.FortScriptedObjectMovement_GridProviderInterface
// 0x0000 (0x0028 - 0x0028)
class IFortScriptedObjectMovement_GridProviderInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortScriptedObjectMovement_GridProviderInterface">();
	}
	static class IFortScriptedObjectMovement_GridProviderInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFortScriptedObjectMovement_GridProviderInterface>();
	}
};
static_assert(alignof(IFortScriptedObjectMovement_GridProviderInterface) == 0x000008, "Wrong alignment on IFortScriptedObjectMovement_GridProviderInterface");
static_assert(sizeof(IFortScriptedObjectMovement_GridProviderInterface) == 0x000028, "Wrong size on IFortScriptedObjectMovement_GridProviderInterface");

// Class SOMRuntime.ScriptedObjectMovement_StaticPath
// 0x0260 (0x04D0 - 0x0270)
#pragma pack(push, 0x1)
class alignas(0x10) AScriptedObjectMovement_StaticPath : public AActor
{
public:
	uint8                                         Pad_270[0x18];                                     // 0x0270(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class USplineComponent*                       MasterSplinePath;                                  // 0x0288(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FScriptedObjectMovement_StaticPathTravelerData> PathTravelers;                                     // 0x0290(0x0010)(Edit, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<struct FScriptedObjectMovement_StaticPathSplineInputKeyData> SplineData;                                        // 0x02A0(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	float                                         StepSpacingDistance;                               // 0x02B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B4[0x4];                                      // 0x02B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UScriptedObjectMovement_CalendarCheatDefinition> CheatCalendarEventDefinition;                      // 0x02B8(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           MovementStyleTag;                                  // 0x02E0(0x0004)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2E4[0x84];                                     // 0x02E4(0x0084)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EnterSplineCalendarEvent;                          // 0x0368(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 ExitSplineCalendarEvent;                           // 0x0378(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FStaticPathCalendarSplinePointGroup> OrderedCalendarEventPointGroups;                   // 0x0388(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_398[0x128];                                    // 0x0398(0x0128)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAsyncAction_CalendarMultiEventWatcher* CalendarWatcherAction;                             // 0x04C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void GeneratePathData();
	void HandleCalendarEventActive(const class FString& EventName, const struct FTimespan& TimeUntilEnd, const struct FTimespan& TimeSinceBegin, float TimespanRatio);
	void HandleCalendarEventEnded(const class FString& EventName, const struct FTimespan& TimeUntilEnd, const struct FTimespan& TimeSinceBegin, float TimespanRatio);
	void HandleCalendarEventUpdated(const class FString& EventName, const struct FTimespan& TimeUntilEnd, const struct FTimespan& TimeSinceBegin, float TimespanRatio);
	void LockAllPathNodesFromBeingRegenerated();
	void UnlockAllPathsFromBeingRegenerated();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScriptedObjectMovement_StaticPath">();
	}
	static class AScriptedObjectMovement_StaticPath* GetDefaultObj()
	{
		return GetDefaultObjImpl<AScriptedObjectMovement_StaticPath>();
	}
};
#pragma pack(pop)
static_assert(alignof(AScriptedObjectMovement_StaticPath) == 0x000010, "Wrong alignment on AScriptedObjectMovement_StaticPath");
static_assert(sizeof(AScriptedObjectMovement_StaticPath) == 0x0004D0, "Wrong size on AScriptedObjectMovement_StaticPath");
static_assert(offsetof(AScriptedObjectMovement_StaticPath, MasterSplinePath) == 0x000288, "Member 'AScriptedObjectMovement_StaticPath::MasterSplinePath' has a wrong offset!");
static_assert(offsetof(AScriptedObjectMovement_StaticPath, PathTravelers) == 0x000290, "Member 'AScriptedObjectMovement_StaticPath::PathTravelers' has a wrong offset!");
static_assert(offsetof(AScriptedObjectMovement_StaticPath, SplineData) == 0x0002A0, "Member 'AScriptedObjectMovement_StaticPath::SplineData' has a wrong offset!");
static_assert(offsetof(AScriptedObjectMovement_StaticPath, StepSpacingDistance) == 0x0002B0, "Member 'AScriptedObjectMovement_StaticPath::StepSpacingDistance' has a wrong offset!");
static_assert(offsetof(AScriptedObjectMovement_StaticPath, CheatCalendarEventDefinition) == 0x0002B8, "Member 'AScriptedObjectMovement_StaticPath::CheatCalendarEventDefinition' has a wrong offset!");
static_assert(offsetof(AScriptedObjectMovement_StaticPath, MovementStyleTag) == 0x0002E0, "Member 'AScriptedObjectMovement_StaticPath::MovementStyleTag' has a wrong offset!");
static_assert(offsetof(AScriptedObjectMovement_StaticPath, EnterSplineCalendarEvent) == 0x000368, "Member 'AScriptedObjectMovement_StaticPath::EnterSplineCalendarEvent' has a wrong offset!");
static_assert(offsetof(AScriptedObjectMovement_StaticPath, ExitSplineCalendarEvent) == 0x000378, "Member 'AScriptedObjectMovement_StaticPath::ExitSplineCalendarEvent' has a wrong offset!");
static_assert(offsetof(AScriptedObjectMovement_StaticPath, OrderedCalendarEventPointGroups) == 0x000388, "Member 'AScriptedObjectMovement_StaticPath::OrderedCalendarEventPointGroups' has a wrong offset!");
static_assert(offsetof(AScriptedObjectMovement_StaticPath, CalendarWatcherAction) == 0x0004C0, "Member 'AScriptedObjectMovement_StaticPath::CalendarWatcherAction' has a wrong offset!");

// Class SOMRuntime.FortGameStateComponent_ScriptedObjectMovementManager
// 0x0120 (0x01C0 - 0x00A0)
class alignas(0x10) UFortGameStateComponent_ScriptedObjectMovementManager final : public UFortGameStateComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AFortScriptedObjectMovement_WorldPhaseSite*> WorldPhaseSites;                                   // 0x00A8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B8[0x98];                                      // 0x00B8(0x0098)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AScriptedObjectMovement_StaticPath*> RegisteredStaticPaths;                             // 0x0150(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	class AScriptedObjectMovement_StaticPath*     CurrentlyMovingStaticPath;                         // 0x0160(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_168[0x28];                                     // 0x0168(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         StaticPathCooldownBetweenMoves;                    // 0x0190(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B8[0x8];                                      // 0x01B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleCurrentPlaylistReady(class AFortGameStateAthena* GameState, const class UFortPlaylist* Playlist, const struct FGameplayTagContainer& PlaylistContextTags);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGameStateComponent_ScriptedObjectMovementManager">();
	}
	static class UFortGameStateComponent_ScriptedObjectMovementManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGameStateComponent_ScriptedObjectMovementManager>();
	}
};
static_assert(alignof(UFortGameStateComponent_ScriptedObjectMovementManager) == 0x000010, "Wrong alignment on UFortGameStateComponent_ScriptedObjectMovementManager");
static_assert(sizeof(UFortGameStateComponent_ScriptedObjectMovementManager) == 0x0001C0, "Wrong size on UFortGameStateComponent_ScriptedObjectMovementManager");
static_assert(offsetof(UFortGameStateComponent_ScriptedObjectMovementManager, WorldPhaseSites) == 0x0000A8, "Member 'UFortGameStateComponent_ScriptedObjectMovementManager::WorldPhaseSites' has a wrong offset!");
static_assert(offsetof(UFortGameStateComponent_ScriptedObjectMovementManager, RegisteredStaticPaths) == 0x000150, "Member 'UFortGameStateComponent_ScriptedObjectMovementManager::RegisteredStaticPaths' has a wrong offset!");
static_assert(offsetof(UFortGameStateComponent_ScriptedObjectMovementManager, CurrentlyMovingStaticPath) == 0x000160, "Member 'UFortGameStateComponent_ScriptedObjectMovementManager::CurrentlyMovingStaticPath' has a wrong offset!");
static_assert(offsetof(UFortGameStateComponent_ScriptedObjectMovementManager, StaticPathCooldownBetweenMoves) == 0x000190, "Member 'UFortGameStateComponent_ScriptedObjectMovementManager::StaticPathCooldownBetweenMoves' has a wrong offset!");

// Class SOMRuntime.FortScriptedObjectMovement_MovableObjectBase
// 0x0210 (0x0B80 - 0x0970)
class AFortScriptedObjectMovement_MovableObjectBase final : public ABuildingGameplayActor
{
public:
	uint8                                         Pad_970[0x70];                                     // 0x0970(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Editor_SkipMasterPathIndex;                        // 0x09E0(0x0004)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Editor_SkipSubPathIndex;                           // 0x09E4(0x0004)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Editor_NumStepsPerClick;                           // 0x09E8(0x0004)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9EC[0x24];                                     // 0x09EC(0x0024)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortScriptedObjectMovement_SlotDefinition* AssignedSlotDefinition;                            // 0x0A10(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FScriptedObjectMovement_DynamicPathContext MovementPath;                                      // 0x0A18(0x0038)(Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A50[0x8];                                      // 0x0A50(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            ScriptedObjectMesh;                                // 0x0A58(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A60[0x18];                                     // 0x0A60(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bDebugStaticMovement;                              // 0x0A78(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWaitingForBeginPlaySkip;                          // 0x0A79(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A7A[0x6];                                      // 0x0A7A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AScriptedObjectMovement_StaticPath*     StaticFollowPath;                                  // 0x0A80(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A88[0x8];                                      // 0x0A88(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScriptedObjectMovement_StaticPathStepData CurrentStepData;                                   // 0x0A90(0x00F0)(BlueprintVisible, BlueprintReadOnly, Net, Transient, RepNotify, NativeAccessSpecifierPrivate)

public:
	void BeginMovingToStaticPathNode(const struct FScriptedObjectMovement_StaticPathStepData& StepData);
	void Cheat_NetMulticast_SendDebugTimerInfo(const float ServerTimeWhenQueryInvoked, const float RemainingTime);
	void CheatDrawKeyframes();
	void ConfigureStaticMeshToSlotDefinition(class UFortScriptedObjectMovement_SlotDefinition* SlotDefinition, class UStaticMeshComponent* StaticMeshComponent);
	void Editor_ClearResetObjectLocation();
	void Editor_DebugLogStaticPathTravelIndex();
	void Editor_NextStep();
	void Editor_PreviousStep();
	void Editor_ResetObject();
	void Editor_TryJumpToStartStep();
	class UStaticMeshComponent* GetScriptedObjectStaticMeshComponent();
	void HandleSlotDefinitionSlotted(class UFortScriptedObjectMovement_SlotDefinition* SlotDefinition);
	void NotifyStaticPathStepComplete(bool bReachedBeginPlaySkipStep);
	void OnRep_CurrentStepData();
	void SetCanEverAffectNavigation(bool bCanEverAffectNavigation, class UActorComponent* TargetActorComponent);

	bool BlockOverlappingStaticPathSteps() const;
	void GetStaticPathTravelingBounds(struct FVector* OutBoxExtent) const;
	float GetStaticPathZOffsetHeight() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortScriptedObjectMovement_MovableObjectBase">();
	}
	static class AFortScriptedObjectMovement_MovableObjectBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortScriptedObjectMovement_MovableObjectBase>();
	}
};
static_assert(alignof(AFortScriptedObjectMovement_MovableObjectBase) == 0x000010, "Wrong alignment on AFortScriptedObjectMovement_MovableObjectBase");
static_assert(sizeof(AFortScriptedObjectMovement_MovableObjectBase) == 0x000B80, "Wrong size on AFortScriptedObjectMovement_MovableObjectBase");
static_assert(offsetof(AFortScriptedObjectMovement_MovableObjectBase, Editor_SkipMasterPathIndex) == 0x0009E0, "Member 'AFortScriptedObjectMovement_MovableObjectBase::Editor_SkipMasterPathIndex' has a wrong offset!");
static_assert(offsetof(AFortScriptedObjectMovement_MovableObjectBase, Editor_SkipSubPathIndex) == 0x0009E4, "Member 'AFortScriptedObjectMovement_MovableObjectBase::Editor_SkipSubPathIndex' has a wrong offset!");
static_assert(offsetof(AFortScriptedObjectMovement_MovableObjectBase, Editor_NumStepsPerClick) == 0x0009E8, "Member 'AFortScriptedObjectMovement_MovableObjectBase::Editor_NumStepsPerClick' has a wrong offset!");
static_assert(offsetof(AFortScriptedObjectMovement_MovableObjectBase, AssignedSlotDefinition) == 0x000A10, "Member 'AFortScriptedObjectMovement_MovableObjectBase::AssignedSlotDefinition' has a wrong offset!");
static_assert(offsetof(AFortScriptedObjectMovement_MovableObjectBase, MovementPath) == 0x000A18, "Member 'AFortScriptedObjectMovement_MovableObjectBase::MovementPath' has a wrong offset!");
static_assert(offsetof(AFortScriptedObjectMovement_MovableObjectBase, ScriptedObjectMesh) == 0x000A58, "Member 'AFortScriptedObjectMovement_MovableObjectBase::ScriptedObjectMesh' has a wrong offset!");
static_assert(offsetof(AFortScriptedObjectMovement_MovableObjectBase, bDebugStaticMovement) == 0x000A78, "Member 'AFortScriptedObjectMovement_MovableObjectBase::bDebugStaticMovement' has a wrong offset!");
static_assert(offsetof(AFortScriptedObjectMovement_MovableObjectBase, bWaitingForBeginPlaySkip) == 0x000A79, "Member 'AFortScriptedObjectMovement_MovableObjectBase::bWaitingForBeginPlaySkip' has a wrong offset!");
static_assert(offsetof(AFortScriptedObjectMovement_MovableObjectBase, StaticFollowPath) == 0x000A80, "Member 'AFortScriptedObjectMovement_MovableObjectBase::StaticFollowPath' has a wrong offset!");
static_assert(offsetof(AFortScriptedObjectMovement_MovableObjectBase, CurrentStepData) == 0x000A90, "Member 'AFortScriptedObjectMovement_MovableObjectBase::CurrentStepData' has a wrong offset!");

// Class SOMRuntime.FortScriptedObjectMovement_WorldPhaseSite
// 0x01C8 (0x0438 - 0x0270)
class AFortScriptedObjectMovement_WorldPhaseSite final : public AActor
{
public:
	uint8                                         Pad_270[0x8];                                      // 0x0270(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortScriptedObjectMovementPhaseData> Phases;                                            // 0x0278(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         NumSimulatenousMovingObjects;                      // 0x0288(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         PhaseIntervalSeconds;                              // 0x02B0(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D8[0x20];                                     // 0x02D8(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScriptedObjectMovement_Grid           BaseGrid;                                          // 0x02F8(0x00C8)(Transient, NativeAccessSpecifierPrivate)
	struct FScriptedObjectMovement_DynamicPathContext InProgressPath;                                    // 0x03C0(0x0038)(Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UFortScriptedObjectMovement_Slot*> LeavingSlotStack;                                  // 0x03F8(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UFortScriptedObjectMovement_Slot*> DestinationSlotStack;                              // 0x0408(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UFortScriptedObjectMovement_Slot*> OverflowSlotStack;                                 // 0x0418(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class AFortScriptedObjectMovement_MovableObjectBase*> CurrentlyMovingObjects;                            // 0x0428(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortScriptedObjectMovement_WorldPhaseSite">();
	}
	static class AFortScriptedObjectMovement_WorldPhaseSite* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortScriptedObjectMovement_WorldPhaseSite>();
	}
};
static_assert(alignof(AFortScriptedObjectMovement_WorldPhaseSite) == 0x000008, "Wrong alignment on AFortScriptedObjectMovement_WorldPhaseSite");
static_assert(sizeof(AFortScriptedObjectMovement_WorldPhaseSite) == 0x000438, "Wrong size on AFortScriptedObjectMovement_WorldPhaseSite");
static_assert(offsetof(AFortScriptedObjectMovement_WorldPhaseSite, Phases) == 0x000278, "Member 'AFortScriptedObjectMovement_WorldPhaseSite::Phases' has a wrong offset!");
static_assert(offsetof(AFortScriptedObjectMovement_WorldPhaseSite, NumSimulatenousMovingObjects) == 0x000288, "Member 'AFortScriptedObjectMovement_WorldPhaseSite::NumSimulatenousMovingObjects' has a wrong offset!");
static_assert(offsetof(AFortScriptedObjectMovement_WorldPhaseSite, PhaseIntervalSeconds) == 0x0002B0, "Member 'AFortScriptedObjectMovement_WorldPhaseSite::PhaseIntervalSeconds' has a wrong offset!");
static_assert(offsetof(AFortScriptedObjectMovement_WorldPhaseSite, BaseGrid) == 0x0002F8, "Member 'AFortScriptedObjectMovement_WorldPhaseSite::BaseGrid' has a wrong offset!");
static_assert(offsetof(AFortScriptedObjectMovement_WorldPhaseSite, InProgressPath) == 0x0003C0, "Member 'AFortScriptedObjectMovement_WorldPhaseSite::InProgressPath' has a wrong offset!");
static_assert(offsetof(AFortScriptedObjectMovement_WorldPhaseSite, LeavingSlotStack) == 0x0003F8, "Member 'AFortScriptedObjectMovement_WorldPhaseSite::LeavingSlotStack' has a wrong offset!");
static_assert(offsetof(AFortScriptedObjectMovement_WorldPhaseSite, DestinationSlotStack) == 0x000408, "Member 'AFortScriptedObjectMovement_WorldPhaseSite::DestinationSlotStack' has a wrong offset!");
static_assert(offsetof(AFortScriptedObjectMovement_WorldPhaseSite, OverflowSlotStack) == 0x000418, "Member 'AFortScriptedObjectMovement_WorldPhaseSite::OverflowSlotStack' has a wrong offset!");
static_assert(offsetof(AFortScriptedObjectMovement_WorldPhaseSite, CurrentlyMovingObjects) == 0x000428, "Member 'AFortScriptedObjectMovement_WorldPhaseSite::CurrentlyMovingObjects' has a wrong offset!");

// Class SOMRuntime.FortScriptedObjectMovement_SlotDefinition
// 0x0010 (0x0040 - 0x0030)
class UFortScriptedObjectMovement_SlotDefinition final : public UPrimaryDataAsset
{
public:
	TSubclassOf<class AFortScriptedObjectMovement_MovableObjectBase> ScriptedObjectClass;                               // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ObjectScale;                                       // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortScriptedObjectMovement_SlotDefinition">();
	}
	static class UFortScriptedObjectMovement_SlotDefinition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortScriptedObjectMovement_SlotDefinition>();
	}
};
static_assert(alignof(UFortScriptedObjectMovement_SlotDefinition) == 0x000008, "Wrong alignment on UFortScriptedObjectMovement_SlotDefinition");
static_assert(sizeof(UFortScriptedObjectMovement_SlotDefinition) == 0x000040, "Wrong size on UFortScriptedObjectMovement_SlotDefinition");
static_assert(offsetof(UFortScriptedObjectMovement_SlotDefinition, ScriptedObjectClass) == 0x000030, "Member 'UFortScriptedObjectMovement_SlotDefinition::ScriptedObjectClass' has a wrong offset!");
static_assert(offsetof(UFortScriptedObjectMovement_SlotDefinition, ObjectScale) == 0x000038, "Member 'UFortScriptedObjectMovement_SlotDefinition::ObjectScale' has a wrong offset!");

// Class SOMRuntime.FortScriptedObjectMovement_Slot
// 0x0020 (0x05F0 - 0x05D0)
class UFortScriptedObjectMovement_Slot final : public UStaticMeshComponent
{
public:
	class UFortScriptedObjectMovement_SlotDefinition* SlotDefinition;                                    // 0x05D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ObjectRemoveOrder;                                 // 0x05D8(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5DC[0x4];                                      // 0x05DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortScriptedObjectMovement_MovableObjectBase* SlottedObject;                                     // 0x05E0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5E8[0x8];                                      // 0x05E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortScriptedObjectMovement_Slot">();
	}
	static class UFortScriptedObjectMovement_Slot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortScriptedObjectMovement_Slot>();
	}
};
static_assert(alignof(UFortScriptedObjectMovement_Slot) == 0x000010, "Wrong alignment on UFortScriptedObjectMovement_Slot");
static_assert(sizeof(UFortScriptedObjectMovement_Slot) == 0x0005F0, "Wrong size on UFortScriptedObjectMovement_Slot");
static_assert(offsetof(UFortScriptedObjectMovement_Slot, SlotDefinition) == 0x0005D0, "Member 'UFortScriptedObjectMovement_Slot::SlotDefinition' has a wrong offset!");
static_assert(offsetof(UFortScriptedObjectMovement_Slot, ObjectRemoveOrder) == 0x0005D8, "Member 'UFortScriptedObjectMovement_Slot::ObjectRemoveOrder' has a wrong offset!");
static_assert(offsetof(UFortScriptedObjectMovement_Slot, SlottedObject) == 0x0005E0, "Member 'UFortScriptedObjectMovement_Slot::SlottedObject' has a wrong offset!");

// Class SOMRuntime.FortScriptedObjectMovement_Structure
// 0x0020 (0x0290 - 0x0270)
class AFortScriptedObjectMovement_Structure final : public AActor
{
public:
	TArray<class UFortScriptedObjectMovement_Slot*> CachedObjectSlots;                                 // 0x0270(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UFortScriptedObjectMovement_SlotDefinition*> CachedSlotDefinitions;                             // 0x0280(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortScriptedObjectMovement_Structure">();
	}
	static class AFortScriptedObjectMovement_Structure* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortScriptedObjectMovement_Structure>();
	}
};
static_assert(alignof(AFortScriptedObjectMovement_Structure) == 0x000008, "Wrong alignment on AFortScriptedObjectMovement_Structure");
static_assert(sizeof(AFortScriptedObjectMovement_Structure) == 0x000290, "Wrong size on AFortScriptedObjectMovement_Structure");
static_assert(offsetof(AFortScriptedObjectMovement_Structure, CachedObjectSlots) == 0x000270, "Member 'AFortScriptedObjectMovement_Structure::CachedObjectSlots' has a wrong offset!");
static_assert(offsetof(AFortScriptedObjectMovement_Structure, CachedSlotDefinitions) == 0x000280, "Member 'AFortScriptedObjectMovement_Structure::CachedSlotDefinitions' has a wrong offset!");

// Class SOMRuntime.ScriptedObjectMovement_CalendarCheatDefinition
// 0x0010 (0x0040 - 0x0030)
class UScriptedObjectMovement_CalendarCheatDefinition final : public UPrimaryDataAsset
{
public:
	TArray<struct FScriptedObjectMovement_StaticPathCalendarCheatDefinitionData> CheatCalendarEvents;                               // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScriptedObjectMovement_CalendarCheatDefinition">();
	}
	static class UScriptedObjectMovement_CalendarCheatDefinition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScriptedObjectMovement_CalendarCheatDefinition>();
	}
};
static_assert(alignof(UScriptedObjectMovement_CalendarCheatDefinition) == 0x000008, "Wrong alignment on UScriptedObjectMovement_CalendarCheatDefinition");
static_assert(sizeof(UScriptedObjectMovement_CalendarCheatDefinition) == 0x000040, "Wrong size on UScriptedObjectMovement_CalendarCheatDefinition");
static_assert(offsetof(UScriptedObjectMovement_CalendarCheatDefinition, CheatCalendarEvents) == 0x000030, "Member 'UScriptedObjectMovement_CalendarCheatDefinition::CheatCalendarEvents' has a wrong offset!");

}

