#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NevadaUI

#include "Basic.hpp"

#include "NevadaRuntime_structs.hpp"


namespace SDK::Params
{

// Function NevadaUI.FortNevadaVehicleReticle.OnBatteryChanged
// 0x0004 (0x0004 - 0x0000)
struct FortNevadaVehicleReticle_OnBatteryChanged final
{
public:
	float                                         BatteryLevel;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortNevadaVehicleReticle_OnBatteryChanged) == 0x000004, "Wrong alignment on FortNevadaVehicleReticle_OnBatteryChanged");
static_assert(sizeof(FortNevadaVehicleReticle_OnBatteryChanged) == 0x000004, "Wrong size on FortNevadaVehicleReticle_OnBatteryChanged");
static_assert(offsetof(FortNevadaVehicleReticle_OnBatteryChanged, BatteryLevel) == 0x000000, "Member 'FortNevadaVehicleReticle_OnBatteryChanged::BatteryLevel' has a wrong offset!");

// Function NevadaUI.FortNevadaVehicleReticle.OnEnergyCannonEnabledChanged
// 0x0001 (0x0001 - 0x0000)
struct FortNevadaVehicleReticle_OnEnergyCannonEnabledChanged final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortNevadaVehicleReticle_OnEnergyCannonEnabledChanged) == 0x000001, "Wrong alignment on FortNevadaVehicleReticle_OnEnergyCannonEnabledChanged");
static_assert(sizeof(FortNevadaVehicleReticle_OnEnergyCannonEnabledChanged) == 0x000001, "Wrong size on FortNevadaVehicleReticle_OnEnergyCannonEnabledChanged");
static_assert(offsetof(FortNevadaVehicleReticle_OnEnergyCannonEnabledChanged, bEnabled) == 0x000000, "Member 'FortNevadaVehicleReticle_OnEnergyCannonEnabledChanged::bEnabled' has a wrong offset!");

// Function NevadaUI.FortNevadaVehicleReticle.OnEnergyCanonFired
// 0x0004 (0x0004 - 0x0000)
struct FortNevadaVehicleReticle_OnEnergyCanonFired final
{
public:
	float                                         Cooldown;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortNevadaVehicleReticle_OnEnergyCanonFired) == 0x000004, "Wrong alignment on FortNevadaVehicleReticle_OnEnergyCanonFired");
static_assert(sizeof(FortNevadaVehicleReticle_OnEnergyCanonFired) == 0x000004, "Wrong size on FortNevadaVehicleReticle_OnEnergyCanonFired");
static_assert(offsetof(FortNevadaVehicleReticle_OnEnergyCanonFired, Cooldown) == 0x000000, "Member 'FortNevadaVehicleReticle_OnEnergyCanonFired::Cooldown' has a wrong offset!");

// Function NevadaUI.FortNevadaVehicleReticle.OnTractorBeamDeactivated
// 0x0004 (0x0004 - 0x0000)
struct FortNevadaVehicleReticle_OnTractorBeamDeactivated final
{
public:
	float                                         Cooldown;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortNevadaVehicleReticle_OnTractorBeamDeactivated) == 0x000004, "Wrong alignment on FortNevadaVehicleReticle_OnTractorBeamDeactivated");
static_assert(sizeof(FortNevadaVehicleReticle_OnTractorBeamDeactivated) == 0x000004, "Wrong size on FortNevadaVehicleReticle_OnTractorBeamDeactivated");
static_assert(offsetof(FortNevadaVehicleReticle_OnTractorBeamDeactivated, Cooldown) == 0x000000, "Member 'FortNevadaVehicleReticle_OnTractorBeamDeactivated::Cooldown' has a wrong offset!");

// Function NevadaUI.FortNevadaVehicleReticle.OnTractorBeamEnabledChanged
// 0x0001 (0x0001 - 0x0000)
struct FortNevadaVehicleReticle_OnTractorBeamEnabledChanged final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortNevadaVehicleReticle_OnTractorBeamEnabledChanged) == 0x000001, "Wrong alignment on FortNevadaVehicleReticle_OnTractorBeamEnabledChanged");
static_assert(sizeof(FortNevadaVehicleReticle_OnTractorBeamEnabledChanged) == 0x000001, "Wrong size on FortNevadaVehicleReticle_OnTractorBeamEnabledChanged");
static_assert(offsetof(FortNevadaVehicleReticle_OnTractorBeamEnabledChanged, bEnabled) == 0x000000, "Member 'FortNevadaVehicleReticle_OnTractorBeamEnabledChanged::bEnabled' has a wrong offset!");

// Function NevadaUI.FortNevadaVehicleReticle.OnVehicleStateChanged
// 0x0001 (0x0001 - 0x0000)
struct FortNevadaVehicleReticle_OnVehicleStateChanged final
{
public:
	ENevadaFlightStates                           VehicleState;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortNevadaVehicleReticle_OnVehicleStateChanged) == 0x000001, "Wrong alignment on FortNevadaVehicleReticle_OnVehicleStateChanged");
static_assert(sizeof(FortNevadaVehicleReticle_OnVehicleStateChanged) == 0x000001, "Wrong size on FortNevadaVehicleReticle_OnVehicleStateChanged");
static_assert(offsetof(FortNevadaVehicleReticle_OnVehicleStateChanged, VehicleState) == 0x000000, "Member 'FortNevadaVehicleReticle_OnVehicleStateChanged::VehicleState' has a wrong offset!");

// Function NevadaUI.NevadaTargetIndicator.OnTractorBeamActivated
// 0x0001 (0x0001 - 0x0000)
struct NevadaTargetIndicator_OnTractorBeamActivated final
{
public:
	bool                                          bActivated;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NevadaTargetIndicator_OnTractorBeamActivated) == 0x000001, "Wrong alignment on NevadaTargetIndicator_OnTractorBeamActivated");
static_assert(sizeof(NevadaTargetIndicator_OnTractorBeamActivated) == 0x000001, "Wrong size on NevadaTargetIndicator_OnTractorBeamActivated");
static_assert(offsetof(NevadaTargetIndicator_OnTractorBeamActivated, bActivated) == 0x000000, "Member 'NevadaTargetIndicator_OnTractorBeamActivated::bActivated' has a wrong offset!");

// Function NevadaUI.NevadaTargetIndicator.OnTractorBeamAttached
// 0x0001 (0x0001 - 0x0000)
struct NevadaTargetIndicator_OnTractorBeamAttached final
{
public:
	bool                                          bAttached;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NevadaTargetIndicator_OnTractorBeamAttached) == 0x000001, "Wrong alignment on NevadaTargetIndicator_OnTractorBeamAttached");
static_assert(sizeof(NevadaTargetIndicator_OnTractorBeamAttached) == 0x000001, "Wrong size on NevadaTargetIndicator_OnTractorBeamAttached");
static_assert(offsetof(NevadaTargetIndicator_OnTractorBeamAttached, bAttached) == 0x000000, "Member 'NevadaTargetIndicator_OnTractorBeamAttached::bAttached' has a wrong offset!");

}

