#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LagerRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayTags_0_structs.hpp"
#include "Engine_structs.hpp"
#include "LagerRuntime_structs.hpp"


namespace SDK::Params
{

// Function LagerRuntime.FortAthenaLivingWorldManager.GetLivingWorldManager
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaLivingWorldManager_GetLivingWorldManager final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAthenaLivingWorldManager*          ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLivingWorldManager_GetLivingWorldManager) == 0x000008, "Wrong alignment on FortAthenaLivingWorldManager_GetLivingWorldManager");
static_assert(sizeof(FortAthenaLivingWorldManager_GetLivingWorldManager) == 0x000010, "Wrong size on FortAthenaLivingWorldManager_GetLivingWorldManager");
static_assert(offsetof(FortAthenaLivingWorldManager_GetLivingWorldManager, WorldContextObject) == 0x000000, "Member 'FortAthenaLivingWorldManager_GetLivingWorldManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAthenaLivingWorldManager_GetLivingWorldManager, ReturnValue) == 0x000008, "Member 'FortAthenaLivingWorldManager_GetLivingWorldManager::ReturnValue' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldManager.LivingWorldManagerRegisterPointProvider
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaLivingWorldManager_LivingWorldManagerRegisterPointProvider final
{
public:
	class AActor*                                 PointProvider;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLivingWorldManager_LivingWorldManagerRegisterPointProvider) == 0x000008, "Wrong alignment on FortAthenaLivingWorldManager_LivingWorldManagerRegisterPointProvider");
static_assert(sizeof(FortAthenaLivingWorldManager_LivingWorldManagerRegisterPointProvider) == 0x000008, "Wrong size on FortAthenaLivingWorldManager_LivingWorldManagerRegisterPointProvider");
static_assert(offsetof(FortAthenaLivingWorldManager_LivingWorldManagerRegisterPointProvider, PointProvider) == 0x000000, "Member 'FortAthenaLivingWorldManager_LivingWorldManagerRegisterPointProvider::PointProvider' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldManager.LivingWorldManagerUnregisterPointProvider
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaLivingWorldManager_LivingWorldManagerUnregisterPointProvider final
{
public:
	class AActor*                                 PointProvider;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLivingWorldManager_LivingWorldManagerUnregisterPointProvider) == 0x000008, "Wrong alignment on FortAthenaLivingWorldManager_LivingWorldManagerUnregisterPointProvider");
static_assert(sizeof(FortAthenaLivingWorldManager_LivingWorldManagerUnregisterPointProvider) == 0x000008, "Wrong size on FortAthenaLivingWorldManager_LivingWorldManagerUnregisterPointProvider");
static_assert(offsetof(FortAthenaLivingWorldManager_LivingWorldManagerUnregisterPointProvider, PointProvider) == 0x000000, "Member 'FortAthenaLivingWorldManager_LivingWorldManagerUnregisterPointProvider::PointProvider' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldManager.EndEncounter
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaLivingWorldManager_EndEncounter final
{
public:
	class UFortAthenaLivingWorldEncounterInstance* EncounterInstance;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLivingWorldManager_EndEncounter) == 0x000008, "Wrong alignment on FortAthenaLivingWorldManager_EndEncounter");
static_assert(sizeof(FortAthenaLivingWorldManager_EndEncounter) == 0x000008, "Wrong size on FortAthenaLivingWorldManager_EndEncounter");
static_assert(offsetof(FortAthenaLivingWorldManager_EndEncounter, EncounterInstance) == 0x000000, "Member 'FortAthenaLivingWorldManager_EndEncounter::EncounterInstance' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldManager.LivingWorldManagerProviderDebugActor
// 0x0004 (0x0004 - 0x0000)
struct FortAthenaLivingWorldManager_LivingWorldManagerProviderDebugActor final
{
public:
	int32                                         ProviderIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLivingWorldManager_LivingWorldManagerProviderDebugActor) == 0x000004, "Wrong alignment on FortAthenaLivingWorldManager_LivingWorldManagerProviderDebugActor");
static_assert(sizeof(FortAthenaLivingWorldManager_LivingWorldManagerProviderDebugActor) == 0x000004, "Wrong size on FortAthenaLivingWorldManager_LivingWorldManagerProviderDebugActor");
static_assert(offsetof(FortAthenaLivingWorldManager_LivingWorldManagerProviderDebugActor, ProviderIndex) == 0x000000, "Member 'FortAthenaLivingWorldManager_LivingWorldManagerProviderDebugActor::ProviderIndex' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldManager.OnActorSpawned
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaLivingWorldManager_OnActorSpawned final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestId;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAthenaLivingWorldManager_OnActorSpawned) == 0x000008, "Wrong alignment on FortAthenaLivingWorldManager_OnActorSpawned");
static_assert(sizeof(FortAthenaLivingWorldManager_OnActorSpawned) == 0x000010, "Wrong size on FortAthenaLivingWorldManager_OnActorSpawned");
static_assert(offsetof(FortAthenaLivingWorldManager_OnActorSpawned, Actor) == 0x000000, "Member 'FortAthenaLivingWorldManager_OnActorSpawned::Actor' has a wrong offset!");
static_assert(offsetof(FortAthenaLivingWorldManager_OnActorSpawned, RequestId) == 0x000008, "Member 'FortAthenaLivingWorldManager_OnActorSpawned::RequestId' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldManager.OnCurrentPlaylistLoaded
// 0x0028 (0x0028 - 0x0000)
struct FortAthenaLivingWorldManager_OnCurrentPlaylistLoaded final
{
public:
	class FName                                   PlaylistName;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  PlaylistContextTags;                               // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLivingWorldManager_OnCurrentPlaylistLoaded) == 0x000008, "Wrong alignment on FortAthenaLivingWorldManager_OnCurrentPlaylistLoaded");
static_assert(sizeof(FortAthenaLivingWorldManager_OnCurrentPlaylistLoaded) == 0x000028, "Wrong size on FortAthenaLivingWorldManager_OnCurrentPlaylistLoaded");
static_assert(offsetof(FortAthenaLivingWorldManager_OnCurrentPlaylistLoaded, PlaylistName) == 0x000000, "Member 'FortAthenaLivingWorldManager_OnCurrentPlaylistLoaded::PlaylistName' has a wrong offset!");
static_assert(offsetof(FortAthenaLivingWorldManager_OnCurrentPlaylistLoaded, PlaylistContextTags) == 0x000008, "Member 'FortAthenaLivingWorldManager_OnCurrentPlaylistLoaded::PlaylistContextTags' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldManager.OnDebugSpawnEventSpawned
// 0x0018 (0x0018 - 0x0000)
struct FortAthenaLivingWorldManager_OnDebugSpawnEventSpawned final
{
public:
	TArray<class AActor*>                         SpawnedActors;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAthenaLivingWorldManager_OnDebugSpawnEventSpawned) == 0x000008, "Wrong alignment on FortAthenaLivingWorldManager_OnDebugSpawnEventSpawned");
static_assert(sizeof(FortAthenaLivingWorldManager_OnDebugSpawnEventSpawned) == 0x000018, "Wrong size on FortAthenaLivingWorldManager_OnDebugSpawnEventSpawned");
static_assert(offsetof(FortAthenaLivingWorldManager_OnDebugSpawnEventSpawned, SpawnedActors) == 0x000000, "Member 'FortAthenaLivingWorldManager_OnDebugSpawnEventSpawned::SpawnedActors' has a wrong offset!");
static_assert(offsetof(FortAthenaLivingWorldManager_OnDebugSpawnEventSpawned, bSuccess) == 0x000010, "Member 'FortAthenaLivingWorldManager_OnDebugSpawnEventSpawned::bSuccess' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldManager.OnPatrolPathAdded
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaLivingWorldManager_OnPatrolPathAdded final
{
public:
	class AFortAthenaPatrolPath*                  PatrolPath;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLivingWorldManager_OnPatrolPathAdded) == 0x000008, "Wrong alignment on FortAthenaLivingWorldManager_OnPatrolPathAdded");
static_assert(sizeof(FortAthenaLivingWorldManager_OnPatrolPathAdded) == 0x000008, "Wrong size on FortAthenaLivingWorldManager_OnPatrolPathAdded");
static_assert(offsetof(FortAthenaLivingWorldManager_OnPatrolPathAdded, PatrolPath) == 0x000000, "Member 'FortAthenaLivingWorldManager_OnPatrolPathAdded::PatrolPath' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldManager.OnRep_DebugDensityMinimapIndicator
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaLivingWorldManager_OnRep_DebugDensityMinimapIndicator final
{
public:
	class UFortAthenaLivingWorldDebugDensityMiniMapIndicator* OldMapIndicator;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLivingWorldManager_OnRep_DebugDensityMinimapIndicator) == 0x000008, "Wrong alignment on FortAthenaLivingWorldManager_OnRep_DebugDensityMinimapIndicator");
static_assert(sizeof(FortAthenaLivingWorldManager_OnRep_DebugDensityMinimapIndicator) == 0x000008, "Wrong size on FortAthenaLivingWorldManager_OnRep_DebugDensityMinimapIndicator");
static_assert(offsetof(FortAthenaLivingWorldManager_OnRep_DebugDensityMinimapIndicator, OldMapIndicator) == 0x000000, "Member 'FortAthenaLivingWorldManager_OnRep_DebugDensityMinimapIndicator::OldMapIndicator' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldManager.OnSpawnedActorDestroy
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaLivingWorldManager_OnSpawnedActorDestroy final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLivingWorldManager_OnSpawnedActorDestroy) == 0x000008, "Wrong alignment on FortAthenaLivingWorldManager_OnSpawnedActorDestroy");
static_assert(sizeof(FortAthenaLivingWorldManager_OnSpawnedActorDestroy) == 0x000008, "Wrong size on FortAthenaLivingWorldManager_OnSpawnedActorDestroy");
static_assert(offsetof(FortAthenaLivingWorldManager_OnSpawnedActorDestroy, DestroyedActor) == 0x000000, "Member 'FortAthenaLivingWorldManager_OnSpawnedActorDestroy::DestroyedActor' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldManager.OnUnmanagedDensityReservoirActorDestroy
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaLivingWorldManager_OnUnmanagedDensityReservoirActorDestroy final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLivingWorldManager_OnUnmanagedDensityReservoirActorDestroy) == 0x000008, "Wrong alignment on FortAthenaLivingWorldManager_OnUnmanagedDensityReservoirActorDestroy");
static_assert(sizeof(FortAthenaLivingWorldManager_OnUnmanagedDensityReservoirActorDestroy) == 0x000008, "Wrong size on FortAthenaLivingWorldManager_OnUnmanagedDensityReservoirActorDestroy");
static_assert(offsetof(FortAthenaLivingWorldManager_OnUnmanagedDensityReservoirActorDestroy, DestroyedActor) == 0x000000, "Member 'FortAthenaLivingWorldManager_OnUnmanagedDensityReservoirActorDestroy::DestroyedActor' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldManager.OnWorldFinishedInitialization
// 0x0020 (0x0020 - 0x0000)
struct FortAthenaLivingWorldManager_OnWorldFinishedInitialization final
{
public:
	struct FGameplayTagContainer                  ContextTags;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLivingWorldManager_OnWorldFinishedInitialization) == 0x000008, "Wrong alignment on FortAthenaLivingWorldManager_OnWorldFinishedInitialization");
static_assert(sizeof(FortAthenaLivingWorldManager_OnWorldFinishedInitialization) == 0x000020, "Wrong size on FortAthenaLivingWorldManager_OnWorldFinishedInitialization");
static_assert(offsetof(FortAthenaLivingWorldManager_OnWorldFinishedInitialization, ContextTags) == 0x000000, "Member 'FortAthenaLivingWorldManager_OnWorldFinishedInitialization::ContextTags' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldManager.QueryEventBudget
// 0x0020 (0x0020 - 0x0000)
struct FortAthenaLivingWorldManager_QueryEventBudget final
{
public:
	struct FDataTableRowHandle                    EventEntry;                                        // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	const class AActor*                           SpawnLocation;                                     // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAthenaLivingWorldManager_QueryEventBudget) == 0x000008, "Wrong alignment on FortAthenaLivingWorldManager_QueryEventBudget");
static_assert(sizeof(FortAthenaLivingWorldManager_QueryEventBudget) == 0x000020, "Wrong size on FortAthenaLivingWorldManager_QueryEventBudget");
static_assert(offsetof(FortAthenaLivingWorldManager_QueryEventBudget, EventEntry) == 0x000000, "Member 'FortAthenaLivingWorldManager_QueryEventBudget::EventEntry' has a wrong offset!");
static_assert(offsetof(FortAthenaLivingWorldManager_QueryEventBudget, SpawnLocation) == 0x000010, "Member 'FortAthenaLivingWorldManager_QueryEventBudget::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FortAthenaLivingWorldManager_QueryEventBudget, ReturnValue) == 0x000018, "Member 'FortAthenaLivingWorldManager_QueryEventBudget::ReturnValue' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldManager.RegisterDensityReservoir
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaLivingWorldManager_RegisterDensityReservoir final
{
public:
	class AActor*                                 ActorDensityReservoir;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Density;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Range;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLivingWorldManager_RegisterDensityReservoir) == 0x000008, "Wrong alignment on FortAthenaLivingWorldManager_RegisterDensityReservoir");
static_assert(sizeof(FortAthenaLivingWorldManager_RegisterDensityReservoir) == 0x000010, "Wrong size on FortAthenaLivingWorldManager_RegisterDensityReservoir");
static_assert(offsetof(FortAthenaLivingWorldManager_RegisterDensityReservoir, ActorDensityReservoir) == 0x000000, "Member 'FortAthenaLivingWorldManager_RegisterDensityReservoir::ActorDensityReservoir' has a wrong offset!");
static_assert(offsetof(FortAthenaLivingWorldManager_RegisterDensityReservoir, Density) == 0x000008, "Member 'FortAthenaLivingWorldManager_RegisterDensityReservoir::Density' has a wrong offset!");
static_assert(offsetof(FortAthenaLivingWorldManager_RegisterDensityReservoir, Range) == 0x00000C, "Member 'FortAthenaLivingWorldManager_RegisterDensityReservoir::Range' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldManager.StartEncounter
// 0x0048 (0x0048 - 0x0000)
struct FortAthenaLivingWorldManager_StartEncounter final
{
public:
	TSoftObjectPtr<class UFortAthenaLivingWorldEncounter> EncounterType;                                     // 0x0000(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>> EncounterPointProviders;                           // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
	class AActor*                                 ActorDensityReservoir;                             // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAthenaLivingWorldEncounterInstance* ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLivingWorldManager_StartEncounter) == 0x000008, "Wrong alignment on FortAthenaLivingWorldManager_StartEncounter");
static_assert(sizeof(FortAthenaLivingWorldManager_StartEncounter) == 0x000048, "Wrong size on FortAthenaLivingWorldManager_StartEncounter");
static_assert(offsetof(FortAthenaLivingWorldManager_StartEncounter, EncounterType) == 0x000000, "Member 'FortAthenaLivingWorldManager_StartEncounter::EncounterType' has a wrong offset!");
static_assert(offsetof(FortAthenaLivingWorldManager_StartEncounter, EncounterPointProviders) == 0x000028, "Member 'FortAthenaLivingWorldManager_StartEncounter::EncounterPointProviders' has a wrong offset!");
static_assert(offsetof(FortAthenaLivingWorldManager_StartEncounter, ActorDensityReservoir) == 0x000038, "Member 'FortAthenaLivingWorldManager_StartEncounter::ActorDensityReservoir' has a wrong offset!");
static_assert(offsetof(FortAthenaLivingWorldManager_StartEncounter, ReturnValue) == 0x000040, "Member 'FortAthenaLivingWorldManager_StartEncounter::ReturnValue' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldManager.TrySpawnEvent
// 0x0080 (0x0080 - 0x0000)
struct FortAthenaLivingWorldManager_TrySpawnEvent final
{
public:
	struct FDataTableRowHandle                    EventEntry;                                        // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             SpawnLocation;                                     // 0x0010(0x0060)(ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(TArray<class AActor*>& SpawnedActors, bool bSuccess)> OnRequestFinished;                                 // 0x0070(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x007C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAthenaLivingWorldManager_TrySpawnEvent) == 0x000010, "Wrong alignment on FortAthenaLivingWorldManager_TrySpawnEvent");
static_assert(sizeof(FortAthenaLivingWorldManager_TrySpawnEvent) == 0x000080, "Wrong size on FortAthenaLivingWorldManager_TrySpawnEvent");
static_assert(offsetof(FortAthenaLivingWorldManager_TrySpawnEvent, EventEntry) == 0x000000, "Member 'FortAthenaLivingWorldManager_TrySpawnEvent::EventEntry' has a wrong offset!");
static_assert(offsetof(FortAthenaLivingWorldManager_TrySpawnEvent, SpawnLocation) == 0x000010, "Member 'FortAthenaLivingWorldManager_TrySpawnEvent::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FortAthenaLivingWorldManager_TrySpawnEvent, OnRequestFinished) == 0x000070, "Member 'FortAthenaLivingWorldManager_TrySpawnEvent::OnRequestFinished' has a wrong offset!");
static_assert(offsetof(FortAthenaLivingWorldManager_TrySpawnEvent, ReturnValue) == 0x00007C, "Member 'FortAthenaLivingWorldManager_TrySpawnEvent::ReturnValue' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldManager.UnregisterDensityReservoir
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaLivingWorldManager_UnregisterDensityReservoir final
{
public:
	class AActor*                                 ActorDensityReservoir;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLivingWorldManager_UnregisterDensityReservoir) == 0x000008, "Wrong alignment on FortAthenaLivingWorldManager_UnregisterDensityReservoir");
static_assert(sizeof(FortAthenaLivingWorldManager_UnregisterDensityReservoir) == 0x000008, "Wrong size on FortAthenaLivingWorldManager_UnregisterDensityReservoir");
static_assert(offsetof(FortAthenaLivingWorldManager_UnregisterDensityReservoir, ActorDensityReservoir) == 0x000000, "Member 'FortAthenaLivingWorldManager_UnregisterDensityReservoir::ActorDensityReservoir' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldManager.IsEncounterCategoryActive
// 0x0030 (0x0030 - 0x0000)
struct FortAthenaLivingWorldManager_IsEncounterCategoryActive final
{
public:
	TSoftObjectPtr<class UFortAthenaLivingWorldEncounter> EncounterType;                                     // 0x0000(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAthenaLivingWorldManager_IsEncounterCategoryActive) == 0x000008, "Wrong alignment on FortAthenaLivingWorldManager_IsEncounterCategoryActive");
static_assert(sizeof(FortAthenaLivingWorldManager_IsEncounterCategoryActive) == 0x000030, "Wrong size on FortAthenaLivingWorldManager_IsEncounterCategoryActive");
static_assert(offsetof(FortAthenaLivingWorldManager_IsEncounterCategoryActive, EncounterType) == 0x000000, "Member 'FortAthenaLivingWorldManager_IsEncounterCategoryActive::EncounterType' has a wrong offset!");
static_assert(offsetof(FortAthenaLivingWorldManager_IsEncounterCategoryActive, ReturnValue) == 0x000028, "Member 'FortAthenaLivingWorldManager_IsEncounterCategoryActive::ReturnValue' has a wrong offset!");

// Function LagerRuntime.FortAthenaLinearEncounterAnalyticComponent.OnAttackerSpawned
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaLinearEncounterAnalyticComponent_OnAttackerSpawned final
{
public:
	class AActor*                                 SpawnedAttacker;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLinearEncounterAnalyticComponent_OnAttackerSpawned) == 0x000008, "Wrong alignment on FortAthenaLinearEncounterAnalyticComponent_OnAttackerSpawned");
static_assert(sizeof(FortAthenaLinearEncounterAnalyticComponent_OnAttackerSpawned) == 0x000008, "Wrong size on FortAthenaLinearEncounterAnalyticComponent_OnAttackerSpawned");
static_assert(offsetof(FortAthenaLinearEncounterAnalyticComponent_OnAttackerSpawned, SpawnedAttacker) == 0x000000, "Member 'FortAthenaLinearEncounterAnalyticComponent_OnAttackerSpawned::SpawnedAttacker' has a wrong offset!");

// Function LagerRuntime.FortAthenaLinearEncounterAnalyticComponent.OnDefenderDamaged
// 0x0060 (0x0060 - 0x0000)
struct FortAthenaLinearEncounterAnalyticComponent_OnDefenderDamaged final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLinearEncounterAnalyticComponent_OnDefenderDamaged) == 0x000008, "Wrong alignment on FortAthenaLinearEncounterAnalyticComponent_OnDefenderDamaged");
static_assert(sizeof(FortAthenaLinearEncounterAnalyticComponent_OnDefenderDamaged) == 0x000060, "Wrong size on FortAthenaLinearEncounterAnalyticComponent_OnDefenderDamaged");
static_assert(offsetof(FortAthenaLinearEncounterAnalyticComponent_OnDefenderDamaged, DamagedActor) == 0x000000, "Member 'FortAthenaLinearEncounterAnalyticComponent_OnDefenderDamaged::DamagedActor' has a wrong offset!");
static_assert(offsetof(FortAthenaLinearEncounterAnalyticComponent_OnDefenderDamaged, Damage) == 0x000008, "Member 'FortAthenaLinearEncounterAnalyticComponent_OnDefenderDamaged::Damage' has a wrong offset!");
static_assert(offsetof(FortAthenaLinearEncounterAnalyticComponent_OnDefenderDamaged, InstigatedBy) == 0x000010, "Member 'FortAthenaLinearEncounterAnalyticComponent_OnDefenderDamaged::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortAthenaLinearEncounterAnalyticComponent_OnDefenderDamaged, DamageCauser) == 0x000018, "Member 'FortAthenaLinearEncounterAnalyticComponent_OnDefenderDamaged::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortAthenaLinearEncounterAnalyticComponent_OnDefenderDamaged, HitLocation) == 0x000020, "Member 'FortAthenaLinearEncounterAnalyticComponent_OnDefenderDamaged::HitLocation' has a wrong offset!");
static_assert(offsetof(FortAthenaLinearEncounterAnalyticComponent_OnDefenderDamaged, FHitComponent) == 0x000038, "Member 'FortAthenaLinearEncounterAnalyticComponent_OnDefenderDamaged::FHitComponent' has a wrong offset!");
static_assert(offsetof(FortAthenaLinearEncounterAnalyticComponent_OnDefenderDamaged, BoneName) == 0x000040, "Member 'FortAthenaLinearEncounterAnalyticComponent_OnDefenderDamaged::BoneName' has a wrong offset!");
static_assert(offsetof(FortAthenaLinearEncounterAnalyticComponent_OnDefenderDamaged, Momentum) == 0x000048, "Member 'FortAthenaLinearEncounterAnalyticComponent_OnDefenderDamaged::Momentum' has a wrong offset!");

// Function LagerRuntime.FortAthenaLinearEncounterAnalyticComponent.OnDefenderDidDamage
// 0x0060 (0x0060 - 0x0000)
struct FortAthenaLinearEncounterAnalyticComponent_OnDefenderDidDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLinearEncounterAnalyticComponent_OnDefenderDidDamage) == 0x000008, "Wrong alignment on FortAthenaLinearEncounterAnalyticComponent_OnDefenderDidDamage");
static_assert(sizeof(FortAthenaLinearEncounterAnalyticComponent_OnDefenderDidDamage) == 0x000060, "Wrong size on FortAthenaLinearEncounterAnalyticComponent_OnDefenderDidDamage");
static_assert(offsetof(FortAthenaLinearEncounterAnalyticComponent_OnDefenderDidDamage, DamagedActor) == 0x000000, "Member 'FortAthenaLinearEncounterAnalyticComponent_OnDefenderDidDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(FortAthenaLinearEncounterAnalyticComponent_OnDefenderDidDamage, Damage) == 0x000008, "Member 'FortAthenaLinearEncounterAnalyticComponent_OnDefenderDidDamage::Damage' has a wrong offset!");
static_assert(offsetof(FortAthenaLinearEncounterAnalyticComponent_OnDefenderDidDamage, InstigatedBy) == 0x000010, "Member 'FortAthenaLinearEncounterAnalyticComponent_OnDefenderDidDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortAthenaLinearEncounterAnalyticComponent_OnDefenderDidDamage, DamageCauser) == 0x000018, "Member 'FortAthenaLinearEncounterAnalyticComponent_OnDefenderDidDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortAthenaLinearEncounterAnalyticComponent_OnDefenderDidDamage, HitLocation) == 0x000020, "Member 'FortAthenaLinearEncounterAnalyticComponent_OnDefenderDidDamage::HitLocation' has a wrong offset!");
static_assert(offsetof(FortAthenaLinearEncounterAnalyticComponent_OnDefenderDidDamage, FHitComponent) == 0x000038, "Member 'FortAthenaLinearEncounterAnalyticComponent_OnDefenderDidDamage::FHitComponent' has a wrong offset!");
static_assert(offsetof(FortAthenaLinearEncounterAnalyticComponent_OnDefenderDidDamage, BoneName) == 0x000040, "Member 'FortAthenaLinearEncounterAnalyticComponent_OnDefenderDidDamage::BoneName' has a wrong offset!");
static_assert(offsetof(FortAthenaLinearEncounterAnalyticComponent_OnDefenderDidDamage, Momentum) == 0x000048, "Member 'FortAthenaLinearEncounterAnalyticComponent_OnDefenderDidDamage::Momentum' has a wrong offset!");

// Function LagerRuntime.FortAthenaLinearEncounterAnalyticComponent.OnDefenderDied
// 0x0060 (0x0060 - 0x0000)
struct FortAthenaLinearEncounterAnalyticComponent_OnDefenderDied final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLinearEncounterAnalyticComponent_OnDefenderDied) == 0x000008, "Wrong alignment on FortAthenaLinearEncounterAnalyticComponent_OnDefenderDied");
static_assert(sizeof(FortAthenaLinearEncounterAnalyticComponent_OnDefenderDied) == 0x000060, "Wrong size on FortAthenaLinearEncounterAnalyticComponent_OnDefenderDied");
static_assert(offsetof(FortAthenaLinearEncounterAnalyticComponent_OnDefenderDied, DamagedActor) == 0x000000, "Member 'FortAthenaLinearEncounterAnalyticComponent_OnDefenderDied::DamagedActor' has a wrong offset!");
static_assert(offsetof(FortAthenaLinearEncounterAnalyticComponent_OnDefenderDied, Damage) == 0x000008, "Member 'FortAthenaLinearEncounterAnalyticComponent_OnDefenderDied::Damage' has a wrong offset!");
static_assert(offsetof(FortAthenaLinearEncounterAnalyticComponent_OnDefenderDied, InstigatedBy) == 0x000010, "Member 'FortAthenaLinearEncounterAnalyticComponent_OnDefenderDied::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortAthenaLinearEncounterAnalyticComponent_OnDefenderDied, DamageCauser) == 0x000018, "Member 'FortAthenaLinearEncounterAnalyticComponent_OnDefenderDied::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortAthenaLinearEncounterAnalyticComponent_OnDefenderDied, HitLocation) == 0x000020, "Member 'FortAthenaLinearEncounterAnalyticComponent_OnDefenderDied::HitLocation' has a wrong offset!");
static_assert(offsetof(FortAthenaLinearEncounterAnalyticComponent_OnDefenderDied, FHitComponent) == 0x000038, "Member 'FortAthenaLinearEncounterAnalyticComponent_OnDefenderDied::FHitComponent' has a wrong offset!");
static_assert(offsetof(FortAthenaLinearEncounterAnalyticComponent_OnDefenderDied, BoneName) == 0x000040, "Member 'FortAthenaLinearEncounterAnalyticComponent_OnDefenderDied::BoneName' has a wrong offset!");
static_assert(offsetof(FortAthenaLinearEncounterAnalyticComponent_OnDefenderDied, Momentum) == 0x000048, "Member 'FortAthenaLinearEncounterAnalyticComponent_OnDefenderDied::Momentum' has a wrong offset!");

// Function LagerRuntime.FortAthenaLinearEncounterAnalyticComponent.OnDefenderSpawned
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaLinearEncounterAnalyticComponent_OnDefenderSpawned final
{
public:
	class AActor*                                 SpawnedDefender;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLinearEncounterAnalyticComponent_OnDefenderSpawned) == 0x000008, "Wrong alignment on FortAthenaLinearEncounterAnalyticComponent_OnDefenderSpawned");
static_assert(sizeof(FortAthenaLinearEncounterAnalyticComponent_OnDefenderSpawned) == 0x000008, "Wrong size on FortAthenaLinearEncounterAnalyticComponent_OnDefenderSpawned");
static_assert(offsetof(FortAthenaLinearEncounterAnalyticComponent_OnDefenderSpawned, SpawnedDefender) == 0x000000, "Member 'FortAthenaLinearEncounterAnalyticComponent_OnDefenderSpawned::SpawnedDefender' has a wrong offset!");

// Function LagerRuntime.FortAthenaLinearEncounterAnalyticComponent.OnEncounterStart
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaLinearEncounterAnalyticComponent_OnEncounterStart final
{
public:
	class UFortAthenaLivingWorldEncounterInstance* InAttackerEncounter;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAthenaLivingWorldEncounterInstance* InDefenderEncounter;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLinearEncounterAnalyticComponent_OnEncounterStart) == 0x000008, "Wrong alignment on FortAthenaLinearEncounterAnalyticComponent_OnEncounterStart");
static_assert(sizeof(FortAthenaLinearEncounterAnalyticComponent_OnEncounterStart) == 0x000010, "Wrong size on FortAthenaLinearEncounterAnalyticComponent_OnEncounterStart");
static_assert(offsetof(FortAthenaLinearEncounterAnalyticComponent_OnEncounterStart, InAttackerEncounter) == 0x000000, "Member 'FortAthenaLinearEncounterAnalyticComponent_OnEncounterStart::InAttackerEncounter' has a wrong offset!");
static_assert(offsetof(FortAthenaLinearEncounterAnalyticComponent_OnEncounterStart, InDefenderEncounter) == 0x000008, "Member 'FortAthenaLinearEncounterAnalyticComponent_OnEncounterStart::InDefenderEncounter' has a wrong offset!");

// Function LagerRuntime.FortAthenaLinearEncounterAnalyticComponent.OnStageCompleted
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaLinearEncounterAnalyticComponent_OnStageCompleted final
{
public:
	TArray<class AFortPickup*>                    SpawnedRewards;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLinearEncounterAnalyticComponent_OnStageCompleted) == 0x000008, "Wrong alignment on FortAthenaLinearEncounterAnalyticComponent_OnStageCompleted");
static_assert(sizeof(FortAthenaLinearEncounterAnalyticComponent_OnStageCompleted) == 0x000010, "Wrong size on FortAthenaLinearEncounterAnalyticComponent_OnStageCompleted");
static_assert(offsetof(FortAthenaLinearEncounterAnalyticComponent_OnStageCompleted, SpawnedRewards) == 0x000000, "Member 'FortAthenaLinearEncounterAnalyticComponent_OnStageCompleted::SpawnedRewards' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldPointProviderInterface.GetPointProviderLocation
// 0x0018 (0x0018 - 0x0000)
struct FortAthenaLivingWorldPointProviderInterface_GetPointProviderLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLivingWorldPointProviderInterface_GetPointProviderLocation) == 0x000008, "Wrong alignment on FortAthenaLivingWorldPointProviderInterface_GetPointProviderLocation");
static_assert(sizeof(FortAthenaLivingWorldPointProviderInterface_GetPointProviderLocation) == 0x000018, "Wrong size on FortAthenaLivingWorldPointProviderInterface_GetPointProviderLocation");
static_assert(offsetof(FortAthenaLivingWorldPointProviderInterface_GetPointProviderLocation, ReturnValue) == 0x000000, "Member 'FortAthenaLivingWorldPointProviderInterface_GetPointProviderLocation::ReturnValue' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldPointProviderInterface.OnSpawnedActor
// 0x0020 (0x0020 - 0x0000)
struct FortAthenaLivingWorldPointProviderInterface_OnSpawnedActor final
{
public:
	class AActor*                                 SpawnedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PositionFromProvider;                              // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLivingWorldPointProviderInterface_OnSpawnedActor) == 0x000008, "Wrong alignment on FortAthenaLivingWorldPointProviderInterface_OnSpawnedActor");
static_assert(sizeof(FortAthenaLivingWorldPointProviderInterface_OnSpawnedActor) == 0x000020, "Wrong size on FortAthenaLivingWorldPointProviderInterface_OnSpawnedActor");
static_assert(offsetof(FortAthenaLivingWorldPointProviderInterface_OnSpawnedActor, SpawnedActor) == 0x000000, "Member 'FortAthenaLivingWorldPointProviderInterface_OnSpawnedActor::SpawnedActor' has a wrong offset!");
static_assert(offsetof(FortAthenaLivingWorldPointProviderInterface_OnSpawnedActor, PositionFromProvider) == 0x000008, "Member 'FortAthenaLivingWorldPointProviderInterface_OnSpawnedActor::PositionFromProvider' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldPointProviderInterface.OnSpawnedActorDestroyed
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaLivingWorldPointProviderInterface_OnSpawnedActorDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLivingWorldPointProviderInterface_OnSpawnedActorDestroyed) == 0x000008, "Wrong alignment on FortAthenaLivingWorldPointProviderInterface_OnSpawnedActorDestroyed");
static_assert(sizeof(FortAthenaLivingWorldPointProviderInterface_OnSpawnedActorDestroyed) == 0x000008, "Wrong size on FortAthenaLivingWorldPointProviderInterface_OnSpawnedActorDestroyed");
static_assert(offsetof(FortAthenaLivingWorldPointProviderInterface_OnSpawnedActorDestroyed, DestroyedActor) == 0x000000, "Member 'FortAthenaLivingWorldPointProviderInterface_OnSpawnedActorDestroyed::DestroyedActor' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldPointProviderInterface.GetFiltersTags
// 0x0020 (0x0020 - 0x0000)
struct FortAthenaLivingWorldPointProviderInterface_GetFiltersTags final
{
public:
	struct FGameplayTagContainer                  FilterTags;                                        // 0x0000(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLivingWorldPointProviderInterface_GetFiltersTags) == 0x000008, "Wrong alignment on FortAthenaLivingWorldPointProviderInterface_GetFiltersTags");
static_assert(sizeof(FortAthenaLivingWorldPointProviderInterface_GetFiltersTags) == 0x000020, "Wrong size on FortAthenaLivingWorldPointProviderInterface_GetFiltersTags");
static_assert(offsetof(FortAthenaLivingWorldPointProviderInterface_GetFiltersTags, FilterTags) == 0x000000, "Member 'FortAthenaLivingWorldPointProviderInterface_GetFiltersTags::FilterTags' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldPointProviderInterface.GetValidLocation
// 0x0068 (0x0068 - 0x0000)
struct FortAthenaLivingWorldPointProviderInterface_GetValidLocation final
{
public:
	struct FFortAthenaLivingWorldPointProviderFilterRules PointFilter;                                       // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                OutPosition;                                       // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OutRotation;                                       // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAthenaLivingWorldPointProviderInterface_GetValidLocation) == 0x000008, "Wrong alignment on FortAthenaLivingWorldPointProviderInterface_GetValidLocation");
static_assert(sizeof(FortAthenaLivingWorldPointProviderInterface_GetValidLocation) == 0x000068, "Wrong size on FortAthenaLivingWorldPointProviderInterface_GetValidLocation");
static_assert(offsetof(FortAthenaLivingWorldPointProviderInterface_GetValidLocation, PointFilter) == 0x000000, "Member 'FortAthenaLivingWorldPointProviderInterface_GetValidLocation::PointFilter' has a wrong offset!");
static_assert(offsetof(FortAthenaLivingWorldPointProviderInterface_GetValidLocation, OutPosition) == 0x000030, "Member 'FortAthenaLivingWorldPointProviderInterface_GetValidLocation::OutPosition' has a wrong offset!");
static_assert(offsetof(FortAthenaLivingWorldPointProviderInterface_GetValidLocation, OutRotation) == 0x000048, "Member 'FortAthenaLivingWorldPointProviderInterface_GetValidLocation::OutRotation' has a wrong offset!");
static_assert(offsetof(FortAthenaLivingWorldPointProviderInterface_GetValidLocation, ReturnValue) == 0x000060, "Member 'FortAthenaLivingWorldPointProviderInterface_GetValidLocation::ReturnValue' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldPointProviderInterface.IsEnabled
// 0x0038 (0x0038 - 0x0000)
struct FortAthenaLivingWorldPointProviderInterface_IsEnabled final
{
public:
	struct FFortAthenaLivingWorldPointProviderFilterRules PointFilter;                                       // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAthenaLivingWorldPointProviderInterface_IsEnabled) == 0x000008, "Wrong alignment on FortAthenaLivingWorldPointProviderInterface_IsEnabled");
static_assert(sizeof(FortAthenaLivingWorldPointProviderInterface_IsEnabled) == 0x000038, "Wrong size on FortAthenaLivingWorldPointProviderInterface_IsEnabled");
static_assert(offsetof(FortAthenaLivingWorldPointProviderInterface_IsEnabled, PointFilter) == 0x000000, "Member 'FortAthenaLivingWorldPointProviderInterface_IsEnabled::PointFilter' has a wrong offset!");
static_assert(offsetof(FortAthenaLivingWorldPointProviderInterface_IsEnabled, ReturnValue) == 0x000030, "Member 'FortAthenaLivingWorldPointProviderInterface_IsEnabled::ReturnValue' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldEncounterInstance.StartEncounterStage
// 0x0004 (0x0004 - 0x0000)
struct FortAthenaLivingWorldEncounterInstance_StartEncounterStage final
{
public:
	int32                                         StageIndex;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLivingWorldEncounterInstance_StartEncounterStage) == 0x000004, "Wrong alignment on FortAthenaLivingWorldEncounterInstance_StartEncounterStage");
static_assert(sizeof(FortAthenaLivingWorldEncounterInstance_StartEncounterStage) == 0x000004, "Wrong size on FortAthenaLivingWorldEncounterInstance_StartEncounterStage");
static_assert(offsetof(FortAthenaLivingWorldEncounterInstance_StartEncounterStage, StageIndex) == 0x000000, "Member 'FortAthenaLivingWorldEncounterInstance_StartEncounterStage::StageIndex' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldEncounterInstance.GetTotalActorCount
// 0x0004 (0x0004 - 0x0000)
struct FortAthenaLivingWorldEncounterInstance_GetTotalActorCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLivingWorldEncounterInstance_GetTotalActorCount) == 0x000004, "Wrong alignment on FortAthenaLivingWorldEncounterInstance_GetTotalActorCount");
static_assert(sizeof(FortAthenaLivingWorldEncounterInstance_GetTotalActorCount) == 0x000004, "Wrong size on FortAthenaLivingWorldEncounterInstance_GetTotalActorCount");
static_assert(offsetof(FortAthenaLivingWorldEncounterInstance_GetTotalActorCount, ReturnValue) == 0x000000, "Member 'FortAthenaLivingWorldEncounterInstance_GetTotalActorCount::ReturnValue' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldPointProvidersEnabler.OnCurrentPlaylistLoaded
// 0x0028 (0x0028 - 0x0000)
struct FortAthenaLivingWorldPointProvidersEnabler_OnCurrentPlaylistLoaded final
{
public:
	class FName                                   PlaylistName;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  PlaylistContextTags;                               // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLivingWorldPointProvidersEnabler_OnCurrentPlaylistLoaded) == 0x000008, "Wrong alignment on FortAthenaLivingWorldPointProvidersEnabler_OnCurrentPlaylistLoaded");
static_assert(sizeof(FortAthenaLivingWorldPointProvidersEnabler_OnCurrentPlaylistLoaded) == 0x000028, "Wrong size on FortAthenaLivingWorldPointProvidersEnabler_OnCurrentPlaylistLoaded");
static_assert(offsetof(FortAthenaLivingWorldPointProvidersEnabler_OnCurrentPlaylistLoaded, PlaylistName) == 0x000000, "Member 'FortAthenaLivingWorldPointProvidersEnabler_OnCurrentPlaylistLoaded::PlaylistName' has a wrong offset!");
static_assert(offsetof(FortAthenaLivingWorldPointProvidersEnabler_OnCurrentPlaylistLoaded, PlaylistContextTags) == 0x000008, "Member 'FortAthenaLivingWorldPointProvidersEnabler_OnCurrentPlaylistLoaded::PlaylistContextTags' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldPointProvidersEnabler.RemoveClosestPointProvidersToPoint
// 0x0020 (0x0020 - 0x0000)
struct FortAthenaLivingWorldPointProvidersEnabler_RemoveClosestPointProvidersToPoint final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumDistance;                                   // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PointsToDisable;                                   // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLivingWorldPointProvidersEnabler_RemoveClosestPointProvidersToPoint) == 0x000008, "Wrong alignment on FortAthenaLivingWorldPointProvidersEnabler_RemoveClosestPointProvidersToPoint");
static_assert(sizeof(FortAthenaLivingWorldPointProvidersEnabler_RemoveClosestPointProvidersToPoint) == 0x000020, "Wrong size on FortAthenaLivingWorldPointProvidersEnabler_RemoveClosestPointProvidersToPoint");
static_assert(offsetof(FortAthenaLivingWorldPointProvidersEnabler_RemoveClosestPointProvidersToPoint, Point) == 0x000000, "Member 'FortAthenaLivingWorldPointProvidersEnabler_RemoveClosestPointProvidersToPoint::Point' has a wrong offset!");
static_assert(offsetof(FortAthenaLivingWorldPointProvidersEnabler_RemoveClosestPointProvidersToPoint, MaximumDistance) == 0x000018, "Member 'FortAthenaLivingWorldPointProvidersEnabler_RemoveClosestPointProvidersToPoint::MaximumDistance' has a wrong offset!");
static_assert(offsetof(FortAthenaLivingWorldPointProvidersEnabler_RemoveClosestPointProvidersToPoint, PointsToDisable) == 0x00001C, "Member 'FortAthenaLivingWorldPointProvidersEnabler_RemoveClosestPointProvidersToPoint::PointsToDisable' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldPointProvidersEnabler.DoesStartEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaLivingWorldPointProvidersEnabler_DoesStartEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLivingWorldPointProvidersEnabler_DoesStartEnabled) == 0x000001, "Wrong alignment on FortAthenaLivingWorldPointProvidersEnabler_DoesStartEnabled");
static_assert(sizeof(FortAthenaLivingWorldPointProvidersEnabler_DoesStartEnabled) == 0x000001, "Wrong size on FortAthenaLivingWorldPointProvidersEnabler_DoesStartEnabled");
static_assert(offsetof(FortAthenaLivingWorldPointProvidersEnabler_DoesStartEnabled, ReturnValue) == 0x000000, "Member 'FortAthenaLivingWorldPointProvidersEnabler_DoesStartEnabled::ReturnValue' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldPointProvidersEnabler.GetEnabledLinkedPointProviders
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaLivingWorldPointProvidersEnabler_GetEnabledLinkedPointProviders final
{
public:
	TArray<TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>> ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLivingWorldPointProvidersEnabler_GetEnabledLinkedPointProviders) == 0x000008, "Wrong alignment on FortAthenaLivingWorldPointProvidersEnabler_GetEnabledLinkedPointProviders");
static_assert(sizeof(FortAthenaLivingWorldPointProvidersEnabler_GetEnabledLinkedPointProviders) == 0x000010, "Wrong size on FortAthenaLivingWorldPointProvidersEnabler_GetEnabledLinkedPointProviders");
static_assert(offsetof(FortAthenaLivingWorldPointProvidersEnabler_GetEnabledLinkedPointProviders, ReturnValue) == 0x000000, "Member 'FortAthenaLivingWorldPointProvidersEnabler_GetEnabledLinkedPointProviders::ReturnValue' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldPointProvidersEnabler.GetEnablerTags
// 0x0020 (0x0020 - 0x0000)
struct FortAthenaLivingWorldPointProvidersEnabler_GetEnablerTags final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLivingWorldPointProvidersEnabler_GetEnablerTags) == 0x000008, "Wrong alignment on FortAthenaLivingWorldPointProvidersEnabler_GetEnablerTags");
static_assert(sizeof(FortAthenaLivingWorldPointProvidersEnabler_GetEnablerTags) == 0x000020, "Wrong size on FortAthenaLivingWorldPointProvidersEnabler_GetEnablerTags");
static_assert(offsetof(FortAthenaLivingWorldPointProvidersEnabler_GetEnablerTags, ReturnValue) == 0x000000, "Member 'FortAthenaLivingWorldPointProvidersEnabler_GetEnablerTags::ReturnValue' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldPointProvidersEnabler.HasCompletedEvaluation
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaLivingWorldPointProvidersEnabler_HasCompletedEvaluation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLivingWorldPointProvidersEnabler_HasCompletedEvaluation) == 0x000001, "Wrong alignment on FortAthenaLivingWorldPointProvidersEnabler_HasCompletedEvaluation");
static_assert(sizeof(FortAthenaLivingWorldPointProvidersEnabler_HasCompletedEvaluation) == 0x000001, "Wrong size on FortAthenaLivingWorldPointProvidersEnabler_HasCompletedEvaluation");
static_assert(offsetof(FortAthenaLivingWorldPointProvidersEnabler_HasCompletedEvaluation, ReturnValue) == 0x000000, "Member 'FortAthenaLivingWorldPointProvidersEnabler_HasCompletedEvaluation::ReturnValue' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldSpawnActionBlueprint.K2_OnAllActorSpawned
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaLivingWorldSpawnActionBlueprint_K2_OnAllActorSpawned final
{
public:
	TArray<class AActor*>                         SpawnedActor;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLivingWorldSpawnActionBlueprint_K2_OnAllActorSpawned) == 0x000008, "Wrong alignment on FortAthenaLivingWorldSpawnActionBlueprint_K2_OnAllActorSpawned");
static_assert(sizeof(FortAthenaLivingWorldSpawnActionBlueprint_K2_OnAllActorSpawned) == 0x000010, "Wrong size on FortAthenaLivingWorldSpawnActionBlueprint_K2_OnAllActorSpawned");
static_assert(offsetof(FortAthenaLivingWorldSpawnActionBlueprint_K2_OnAllActorSpawned, SpawnedActor) == 0x000000, "Member 'FortAthenaLivingWorldSpawnActionBlueprint_K2_OnAllActorSpawned::SpawnedActor' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldStaticPointProvider.OnCurrentPlaylistLoaded
// 0x0028 (0x0028 - 0x0000)
struct FortAthenaLivingWorldStaticPointProvider_OnCurrentPlaylistLoaded final
{
public:
	class FName                                   PlaylistName;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  PlaylistContextTags;                               // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLivingWorldStaticPointProvider_OnCurrentPlaylistLoaded) == 0x000008, "Wrong alignment on FortAthenaLivingWorldStaticPointProvider_OnCurrentPlaylistLoaded");
static_assert(sizeof(FortAthenaLivingWorldStaticPointProvider_OnCurrentPlaylistLoaded) == 0x000028, "Wrong size on FortAthenaLivingWorldStaticPointProvider_OnCurrentPlaylistLoaded");
static_assert(offsetof(FortAthenaLivingWorldStaticPointProvider_OnCurrentPlaylistLoaded, PlaylistName) == 0x000000, "Member 'FortAthenaLivingWorldStaticPointProvider_OnCurrentPlaylistLoaded::PlaylistName' has a wrong offset!");
static_assert(offsetof(FortAthenaLivingWorldStaticPointProvider_OnCurrentPlaylistLoaded, PlaylistContextTags) == 0x000008, "Member 'FortAthenaLivingWorldStaticPointProvider_OnCurrentPlaylistLoaded::PlaylistContextTags' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldVolume.OnCurrentPlaylistLoaded
// 0x0028 (0x0028 - 0x0000)
struct FortAthenaLivingWorldVolume_OnCurrentPlaylistLoaded final
{
public:
	class FName                                   PlaylistName;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  PlaylistContextTags;                               // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLivingWorldVolume_OnCurrentPlaylistLoaded) == 0x000008, "Wrong alignment on FortAthenaLivingWorldVolume_OnCurrentPlaylistLoaded");
static_assert(sizeof(FortAthenaLivingWorldVolume_OnCurrentPlaylistLoaded) == 0x000028, "Wrong size on FortAthenaLivingWorldVolume_OnCurrentPlaylistLoaded");
static_assert(offsetof(FortAthenaLivingWorldVolume_OnCurrentPlaylistLoaded, PlaylistName) == 0x000000, "Member 'FortAthenaLivingWorldVolume_OnCurrentPlaylistLoaded::PlaylistName' has a wrong offset!");
static_assert(offsetof(FortAthenaLivingWorldVolume_OnCurrentPlaylistLoaded, PlaylistContextTags) == 0x000008, "Member 'FortAthenaLivingWorldVolume_OnCurrentPlaylistLoaded::PlaylistContextTags' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldVolume.OnWorldFinishedInitialization
// 0x0020 (0x0020 - 0x0000)
struct FortAthenaLivingWorldVolume_OnWorldFinishedInitialization final
{
public:
	struct FGameplayTagContainer                  ContextTags;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLivingWorldVolume_OnWorldFinishedInitialization) == 0x000008, "Wrong alignment on FortAthenaLivingWorldVolume_OnWorldFinishedInitialization");
static_assert(sizeof(FortAthenaLivingWorldVolume_OnWorldFinishedInitialization) == 0x000020, "Wrong size on FortAthenaLivingWorldVolume_OnWorldFinishedInitialization");
static_assert(offsetof(FortAthenaLivingWorldVolume_OnWorldFinishedInitialization, ContextTags) == 0x000000, "Member 'FortAthenaLivingWorldVolume_OnWorldFinishedInitialization::ContextTags' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldVolume.SetEQSQuery
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaLivingWorldVolume_SetEQSQuery final
{
public:
	class UEnvQuery*                              Query;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLivingWorldVolume_SetEQSQuery) == 0x000008, "Wrong alignment on FortAthenaLivingWorldVolume_SetEQSQuery");
static_assert(sizeof(FortAthenaLivingWorldVolume_SetEQSQuery) == 0x000008, "Wrong size on FortAthenaLivingWorldVolume_SetEQSQuery");
static_assert(offsetof(FortAthenaLivingWorldVolume_SetEQSQuery, Query) == 0x000000, "Member 'FortAthenaLivingWorldVolume_SetEQSQuery::Query' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldVolume.SetEQSQueryConfigParam
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaLivingWorldVolume_SetEQSQueryConfigParam final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLivingWorldVolume_SetEQSQueryConfigParam) == 0x000004, "Wrong alignment on FortAthenaLivingWorldVolume_SetEQSQueryConfigParam");
static_assert(sizeof(FortAthenaLivingWorldVolume_SetEQSQueryConfigParam) == 0x000008, "Wrong size on FortAthenaLivingWorldVolume_SetEQSQueryConfigParam");
static_assert(offsetof(FortAthenaLivingWorldVolume_SetEQSQueryConfigParam, ParameterName) == 0x000000, "Member 'FortAthenaLivingWorldVolume_SetEQSQueryConfigParam::ParameterName' has a wrong offset!");
static_assert(offsetof(FortAthenaLivingWorldVolume_SetEQSQueryConfigParam, Value) == 0x000004, "Member 'FortAthenaLivingWorldVolume_SetEQSQueryConfigParam::Value' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldVolume.SetFiltersTags
// 0x0020 (0x0020 - 0x0000)
struct FortAthenaLivingWorldVolume_SetFiltersTags final
{
public:
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLivingWorldVolume_SetFiltersTags) == 0x000008, "Wrong alignment on FortAthenaLivingWorldVolume_SetFiltersTags");
static_assert(sizeof(FortAthenaLivingWorldVolume_SetFiltersTags) == 0x000020, "Wrong size on FortAthenaLivingWorldVolume_SetFiltersTags");
static_assert(offsetof(FortAthenaLivingWorldVolume_SetFiltersTags, TagContainer) == 0x000000, "Member 'FortAthenaLivingWorldVolume_SetFiltersTags::TagContainer' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldVolume.SetSpawnRotation
// 0x0018 (0x0018 - 0x0000)
struct FortAthenaLivingWorldVolume_SetSpawnRotation final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLivingWorldVolume_SetSpawnRotation) == 0x000008, "Wrong alignment on FortAthenaLivingWorldVolume_SetSpawnRotation");
static_assert(sizeof(FortAthenaLivingWorldVolume_SetSpawnRotation) == 0x000018, "Wrong size on FortAthenaLivingWorldVolume_SetSpawnRotation");
static_assert(offsetof(FortAthenaLivingWorldVolume_SetSpawnRotation, Rotation) == 0x000000, "Member 'FortAthenaLivingWorldVolume_SetSpawnRotation::Rotation' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldVolume.DoesStartEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaLivingWorldVolume_DoesStartEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLivingWorldVolume_DoesStartEnabled) == 0x000001, "Wrong alignment on FortAthenaLivingWorldVolume_DoesStartEnabled");
static_assert(sizeof(FortAthenaLivingWorldVolume_DoesStartEnabled) == 0x000001, "Wrong size on FortAthenaLivingWorldVolume_DoesStartEnabled");
static_assert(offsetof(FortAthenaLivingWorldVolume_DoesStartEnabled, ReturnValue) == 0x000000, "Member 'FortAthenaLivingWorldVolume_DoesStartEnabled::ReturnValue' has a wrong offset!");

// Function LagerRuntime.FortAthenaLivingWorldVolume.IsPointProviderEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaLivingWorldVolume_IsPointProviderEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLivingWorldVolume_IsPointProviderEnabled) == 0x000001, "Wrong alignment on FortAthenaLivingWorldVolume_IsPointProviderEnabled");
static_assert(sizeof(FortAthenaLivingWorldVolume_IsPointProviderEnabled) == 0x000001, "Wrong size on FortAthenaLivingWorldVolume_IsPointProviderEnabled");
static_assert(offsetof(FortAthenaLivingWorldVolume_IsPointProviderEnabled, ReturnValue) == 0x000000, "Member 'FortAthenaLivingWorldVolume_IsPointProviderEnabled::ReturnValue' has a wrong offset!");

// Function LagerRuntime.FortAthenaPatrolPathPointProvider.OnCurrentPlaylistLoaded
// 0x0028 (0x0028 - 0x0000)
struct FortAthenaPatrolPathPointProvider_OnCurrentPlaylistLoaded final
{
public:
	class FName                                   PlaylistName;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  PlaylistContextTags;                               // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaPatrolPathPointProvider_OnCurrentPlaylistLoaded) == 0x000008, "Wrong alignment on FortAthenaPatrolPathPointProvider_OnCurrentPlaylistLoaded");
static_assert(sizeof(FortAthenaPatrolPathPointProvider_OnCurrentPlaylistLoaded) == 0x000028, "Wrong size on FortAthenaPatrolPathPointProvider_OnCurrentPlaylistLoaded");
static_assert(offsetof(FortAthenaPatrolPathPointProvider_OnCurrentPlaylistLoaded, PlaylistName) == 0x000000, "Member 'FortAthenaPatrolPathPointProvider_OnCurrentPlaylistLoaded::PlaylistName' has a wrong offset!");
static_assert(offsetof(FortAthenaPatrolPathPointProvider_OnCurrentPlaylistLoaded, PlaylistContextTags) == 0x000008, "Member 'FortAthenaPatrolPathPointProvider_OnCurrentPlaylistLoaded::PlaylistContextTags' has a wrong offset!");

// Function LagerRuntime.FortAthenaPointAroundPlayerProvider.OnCurrentPlaylistLoaded
// 0x0028 (0x0028 - 0x0000)
struct FortAthenaPointAroundPlayerProvider_OnCurrentPlaylistLoaded final
{
public:
	class FName                                   PlaylistName;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  PlaylistContextTags;                               // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaPointAroundPlayerProvider_OnCurrentPlaylistLoaded) == 0x000008, "Wrong alignment on FortAthenaPointAroundPlayerProvider_OnCurrentPlaylistLoaded");
static_assert(sizeof(FortAthenaPointAroundPlayerProvider_OnCurrentPlaylistLoaded) == 0x000028, "Wrong size on FortAthenaPointAroundPlayerProvider_OnCurrentPlaylistLoaded");
static_assert(offsetof(FortAthenaPointAroundPlayerProvider_OnCurrentPlaylistLoaded, PlaylistName) == 0x000000, "Member 'FortAthenaPointAroundPlayerProvider_OnCurrentPlaylistLoaded::PlaylistName' has a wrong offset!");
static_assert(offsetof(FortAthenaPointAroundPlayerProvider_OnCurrentPlaylistLoaded, PlaylistContextTags) == 0x000008, "Member 'FortAthenaPointAroundPlayerProvider_OnCurrentPlaylistLoaded::PlaylistContextTags' has a wrong offset!");

// Function LagerRuntime.FortCheatManager_LivingWorldManager.LivingWorldManagerSpawn
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_LivingWorldManager_LivingWorldManagerSpawn final
{
public:
	class FString                                 EventDataName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_LivingWorldManager_LivingWorldManagerSpawn) == 0x000008, "Wrong alignment on FortCheatManager_LivingWorldManager_LivingWorldManagerSpawn");
static_assert(sizeof(FortCheatManager_LivingWorldManager_LivingWorldManagerSpawn) == 0x000010, "Wrong size on FortCheatManager_LivingWorldManager_LivingWorldManagerSpawn");
static_assert(offsetof(FortCheatManager_LivingWorldManager_LivingWorldManagerSpawn, EventDataName) == 0x000000, "Member 'FortCheatManager_LivingWorldManager_LivingWorldManagerSpawn::EventDataName' has a wrong offset!");

// Function LagerRuntime.FortCheatManager_LivingWorldManager.LivingWorldManagerSpawnAtLocation
// 0x0040 (0x0040 - 0x0000)
struct FortCheatManager_LivingWorldManager_LivingWorldManagerSpawnAtLocation final
{
public:
	class FString                                 EventDataName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0028(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_LivingWorldManager_LivingWorldManagerSpawnAtLocation) == 0x000008, "Wrong alignment on FortCheatManager_LivingWorldManager_LivingWorldManagerSpawnAtLocation");
static_assert(sizeof(FortCheatManager_LivingWorldManager_LivingWorldManagerSpawnAtLocation) == 0x000040, "Wrong size on FortCheatManager_LivingWorldManager_LivingWorldManagerSpawnAtLocation");
static_assert(offsetof(FortCheatManager_LivingWorldManager_LivingWorldManagerSpawnAtLocation, EventDataName) == 0x000000, "Member 'FortCheatManager_LivingWorldManager_LivingWorldManagerSpawnAtLocation::EventDataName' has a wrong offset!");
static_assert(offsetof(FortCheatManager_LivingWorldManager_LivingWorldManagerSpawnAtLocation, Location) == 0x000010, "Member 'FortCheatManager_LivingWorldManager_LivingWorldManagerSpawnAtLocation::Location' has a wrong offset!");
static_assert(offsetof(FortCheatManager_LivingWorldManager_LivingWorldManagerSpawnAtLocation, Rotation) == 0x000028, "Member 'FortCheatManager_LivingWorldManager_LivingWorldManagerSpawnAtLocation::Rotation' has a wrong offset!");

// Function LagerRuntime.FortCheatManager_LivingWorldManager.LivingWorldManagerSpawnEvent
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_LivingWorldManager_LivingWorldManagerSpawnEvent final
{
public:
	class FString                                 EventDataName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_LivingWorldManager_LivingWorldManagerSpawnEvent) == 0x000008, "Wrong alignment on FortCheatManager_LivingWorldManager_LivingWorldManagerSpawnEvent");
static_assert(sizeof(FortCheatManager_LivingWorldManager_LivingWorldManagerSpawnEvent) == 0x000010, "Wrong size on FortCheatManager_LivingWorldManager_LivingWorldManagerSpawnEvent");
static_assert(offsetof(FortCheatManager_LivingWorldManager_LivingWorldManagerSpawnEvent, EventDataName) == 0x000000, "Member 'FortCheatManager_LivingWorldManager_LivingWorldManagerSpawnEvent::EventDataName' has a wrong offset!");

// Function LagerRuntime.FortCheatManager_LivingWorldManager.LivingWorldManagerTeleportTo
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_LivingWorldManager_LivingWorldManagerTeleportTo final
{
public:
	class FString                                 EventDataName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_LivingWorldManager_LivingWorldManagerTeleportTo) == 0x000008, "Wrong alignment on FortCheatManager_LivingWorldManager_LivingWorldManagerTeleportTo");
static_assert(sizeof(FortCheatManager_LivingWorldManager_LivingWorldManagerTeleportTo) == 0x000010, "Wrong size on FortCheatManager_LivingWorldManager_LivingWorldManagerTeleportTo");
static_assert(offsetof(FortCheatManager_LivingWorldManager_LivingWorldManagerTeleportTo, EventDataName) == 0x000000, "Member 'FortCheatManager_LivingWorldManager_LivingWorldManagerTeleportTo::EventDataName' has a wrong offset!");

// Function LagerRuntime.FortCheatManager_LivingWorldManager.LivingWorldManagerTeleportToSpawnPosition
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_LivingWorldManager_LivingWorldManagerTeleportToSpawnPosition final
{
public:
	class FString                                 EventDataName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_LivingWorldManager_LivingWorldManagerTeleportToSpawnPosition) == 0x000008, "Wrong alignment on FortCheatManager_LivingWorldManager_LivingWorldManagerTeleportToSpawnPosition");
static_assert(sizeof(FortCheatManager_LivingWorldManager_LivingWorldManagerTeleportToSpawnPosition) == 0x000010, "Wrong size on FortCheatManager_LivingWorldManager_LivingWorldManagerTeleportToSpawnPosition");
static_assert(offsetof(FortCheatManager_LivingWorldManager_LivingWorldManagerTeleportToSpawnPosition, EventDataName) == 0x000000, "Member 'FortCheatManager_LivingWorldManager_LivingWorldManagerTeleportToSpawnPosition::EventDataName' has a wrong offset!");

}

