#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_StormMeshRotator

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_StormMeshRotator.BP_StormMeshRotator_C
// 0x0048 (0x02B8 - 0x0270)
class ABP_StormMeshRotator_C final : public AFortStormRotator
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0270(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Sphere;                                            // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   stormCircleLowerSheet;                             // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_stormCircleTopRim;                              // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URotatingMovementComponent*             RotatingMovement;                                  // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_stormCircleNew;                                 // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RotationSpeed;                                     // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoundsScale;                                       // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StormProgression;                                  // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TestStorm;                                         // 0x02B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          isMobileStormEnabled;                              // 0x02B5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          areStormEffectsEnabled;                            // 0x02B6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void SetStormProgression(float Progression);
	void setStormMeshVisibility(bool bEnabled);
	void ReceiveBeginPlay();
	void OnStormEffectsEnabled(bool bEnabled);
	void initializeMobileStormSphere();
	void handleCvarChanged(const class FString& CVarName);
	void getSphereEnabled(bool* Enabled);
	void ExecuteUbergraph_BP_StormMeshRotator(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_StormMeshRotator_C">();
	}
	static class ABP_StormMeshRotator_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_StormMeshRotator_C>();
	}
};
static_assert(alignof(ABP_StormMeshRotator_C) == 0x000008, "Wrong alignment on ABP_StormMeshRotator_C");
static_assert(sizeof(ABP_StormMeshRotator_C) == 0x0002B8, "Wrong size on ABP_StormMeshRotator_C");
static_assert(offsetof(ABP_StormMeshRotator_C, UberGraphFrame) == 0x000270, "Member 'ABP_StormMeshRotator_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_StormMeshRotator_C, Sphere) == 0x000278, "Member 'ABP_StormMeshRotator_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_StormMeshRotator_C, stormCircleLowerSheet) == 0x000280, "Member 'ABP_StormMeshRotator_C::stormCircleLowerSheet' has a wrong offset!");
static_assert(offsetof(ABP_StormMeshRotator_C, SM_stormCircleTopRim) == 0x000288, "Member 'ABP_StormMeshRotator_C::SM_stormCircleTopRim' has a wrong offset!");
static_assert(offsetof(ABP_StormMeshRotator_C, RotatingMovement) == 0x000290, "Member 'ABP_StormMeshRotator_C::RotatingMovement' has a wrong offset!");
static_assert(offsetof(ABP_StormMeshRotator_C, SM_stormCircleNew) == 0x000298, "Member 'ABP_StormMeshRotator_C::SM_stormCircleNew' has a wrong offset!");
static_assert(offsetof(ABP_StormMeshRotator_C, DefaultSceneRoot) == 0x0002A0, "Member 'ABP_StormMeshRotator_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_StormMeshRotator_C, RotationSpeed) == 0x0002A8, "Member 'ABP_StormMeshRotator_C::RotationSpeed' has a wrong offset!");
static_assert(offsetof(ABP_StormMeshRotator_C, BoundsScale) == 0x0002AC, "Member 'ABP_StormMeshRotator_C::BoundsScale' has a wrong offset!");
static_assert(offsetof(ABP_StormMeshRotator_C, StormProgression) == 0x0002B0, "Member 'ABP_StormMeshRotator_C::StormProgression' has a wrong offset!");
static_assert(offsetof(ABP_StormMeshRotator_C, TestStorm) == 0x0002B4, "Member 'ABP_StormMeshRotator_C::TestStorm' has a wrong offset!");
static_assert(offsetof(ABP_StormMeshRotator_C, isMobileStormEnabled) == 0x0002B5, "Member 'ABP_StormMeshRotator_C::isMobileStormEnabled' has a wrong offset!");
static_assert(offsetof(ABP_StormMeshRotator_C, areStormEffectsEnabled) == 0x0002B6, "Member 'ABP_StormMeshRotator_C::areStormEffectsEnabled' has a wrong offset!");

}

