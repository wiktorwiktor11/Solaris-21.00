#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MoleGameRuntime

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_0_structs.hpp"
#include "GameplayMessages_structs.hpp"
#include "MoleGameRuntime_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function MoleGameRuntime.MoleTaskLogicSubobject.OnAssociatedTaskActorsAdded
// 0x0010 (0x0010 - 0x0000)
struct MoleTaskLogicSubobject_OnAssociatedTaskActorsAdded final
{
public:
	TArray<class AActor*>                         InNewlyAddedTaskActors;                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskLogicSubobject_OnAssociatedTaskActorsAdded) == 0x000008, "Wrong alignment on MoleTaskLogicSubobject_OnAssociatedTaskActorsAdded");
static_assert(sizeof(MoleTaskLogicSubobject_OnAssociatedTaskActorsAdded) == 0x000010, "Wrong size on MoleTaskLogicSubobject_OnAssociatedTaskActorsAdded");
static_assert(offsetof(MoleTaskLogicSubobject_OnAssociatedTaskActorsAdded, InNewlyAddedTaskActors) == 0x000000, "Member 'MoleTaskLogicSubobject_OnAssociatedTaskActorsAdded::InNewlyAddedTaskActors' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskLogicSubobject.OnAssociatedTaskActorsPendingRemoval
// 0x0010 (0x0010 - 0x0000)
struct MoleTaskLogicSubobject_OnAssociatedTaskActorsPendingRemoval final
{
public:
	TArray<class AActor*>                         InPendingRemovalTaskActors;                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskLogicSubobject_OnAssociatedTaskActorsPendingRemoval) == 0x000008, "Wrong alignment on MoleTaskLogicSubobject_OnAssociatedTaskActorsPendingRemoval");
static_assert(sizeof(MoleTaskLogicSubobject_OnAssociatedTaskActorsPendingRemoval) == 0x000010, "Wrong size on MoleTaskLogicSubobject_OnAssociatedTaskActorsPendingRemoval");
static_assert(offsetof(MoleTaskLogicSubobject_OnAssociatedTaskActorsPendingRemoval, InPendingRemovalTaskActors) == 0x000000, "Member 'MoleTaskLogicSubobject_OnAssociatedTaskActorsPendingRemoval::InPendingRemovalTaskActors' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskLogicSubobject.OnOwningTaskBecomePrimaryActiveTask
// 0x0001 (0x0001 - 0x0000)
struct MoleTaskLogicSubobject_OnOwningTaskBecomePrimaryActiveTask final
{
public:
	bool                                          bIsActivePhase;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskLogicSubobject_OnOwningTaskBecomePrimaryActiveTask) == 0x000001, "Wrong alignment on MoleTaskLogicSubobject_OnOwningTaskBecomePrimaryActiveTask");
static_assert(sizeof(MoleTaskLogicSubobject_OnOwningTaskBecomePrimaryActiveTask) == 0x000001, "Wrong size on MoleTaskLogicSubobject_OnOwningTaskBecomePrimaryActiveTask");
static_assert(offsetof(MoleTaskLogicSubobject_OnOwningTaskBecomePrimaryActiveTask, bIsActivePhase) == 0x000000, "Member 'MoleTaskLogicSubobject_OnOwningTaskBecomePrimaryActiveTask::bIsActivePhase' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskLogicSubobject.OnOwningTaskNoLongerPrimaryActiveTask
// 0x0001 (0x0001 - 0x0000)
struct MoleTaskLogicSubobject_OnOwningTaskNoLongerPrimaryActiveTask final
{
public:
	bool                                          bIsActivePhase;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskLogicSubobject_OnOwningTaskNoLongerPrimaryActiveTask) == 0x000001, "Wrong alignment on MoleTaskLogicSubobject_OnOwningTaskNoLongerPrimaryActiveTask");
static_assert(sizeof(MoleTaskLogicSubobject_OnOwningTaskNoLongerPrimaryActiveTask) == 0x000001, "Wrong size on MoleTaskLogicSubobject_OnOwningTaskNoLongerPrimaryActiveTask");
static_assert(offsetof(MoleTaskLogicSubobject_OnOwningTaskNoLongerPrimaryActiveTask, bIsActivePhase) == 0x000000, "Member 'MoleTaskLogicSubobject_OnOwningTaskNoLongerPrimaryActiveTask::bIsActivePhase' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskLogicSubobject.OnTaskExternalInterruption
// 0x0001 (0x0001 - 0x0000)
struct MoleTaskLogicSubobject_OnTaskExternalInterruption final
{
public:
	EMoleTaskInterruptionType                     InterruptionType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskLogicSubobject_OnTaskExternalInterruption) == 0x000001, "Wrong alignment on MoleTaskLogicSubobject_OnTaskExternalInterruption");
static_assert(sizeof(MoleTaskLogicSubobject_OnTaskExternalInterruption) == 0x000001, "Wrong size on MoleTaskLogicSubobject_OnTaskExternalInterruption");
static_assert(offsetof(MoleTaskLogicSubobject_OnTaskExternalInterruption, InterruptionType) == 0x000000, "Member 'MoleTaskLogicSubobject_OnTaskExternalInterruption::InterruptionType' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskLogicSubobject.GetAssociatedTaskActors
// 0x0010 (0x0010 - 0x0000)
struct MoleTaskLogicSubobject_GetAssociatedTaskActors final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskLogicSubobject_GetAssociatedTaskActors) == 0x000008, "Wrong alignment on MoleTaskLogicSubobject_GetAssociatedTaskActors");
static_assert(sizeof(MoleTaskLogicSubobject_GetAssociatedTaskActors) == 0x000010, "Wrong size on MoleTaskLogicSubobject_GetAssociatedTaskActors");
static_assert(offsetof(MoleTaskLogicSubobject_GetAssociatedTaskActors, ReturnValue) == 0x000000, "Member 'MoleTaskLogicSubobject_GetAssociatedTaskActors::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskLogicSubobject.GetOwnerRole
// 0x0001 (0x0001 - 0x0000)
struct MoleTaskLogicSubobject_GetOwnerRole final
{
public:
	ENetRole                                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskLogicSubobject_GetOwnerRole) == 0x000001, "Wrong alignment on MoleTaskLogicSubobject_GetOwnerRole");
static_assert(sizeof(MoleTaskLogicSubobject_GetOwnerRole) == 0x000001, "Wrong size on MoleTaskLogicSubobject_GetOwnerRole");
static_assert(offsetof(MoleTaskLogicSubobject_GetOwnerRole, ReturnValue) == 0x000000, "Member 'MoleTaskLogicSubobject_GetOwnerRole::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskLogicSubobject.GetOwningController
// 0x0008 (0x0008 - 0x0000)
struct MoleTaskLogicSubobject_GetOwningController final
{
public:
	class AController*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskLogicSubobject_GetOwningController) == 0x000008, "Wrong alignment on MoleTaskLogicSubobject_GetOwningController");
static_assert(sizeof(MoleTaskLogicSubobject_GetOwningController) == 0x000008, "Wrong size on MoleTaskLogicSubobject_GetOwningController");
static_assert(offsetof(MoleTaskLogicSubobject_GetOwningController, ReturnValue) == 0x000000, "Member 'MoleTaskLogicSubobject_GetOwningController::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskLogicSubobject.GetOwningPlayerTaskComponent
// 0x0008 (0x0008 - 0x0000)
struct MoleTaskLogicSubobject_GetOwningPlayerTaskComponent final
{
public:
	class UMolePlayerTaskManagementComponent*     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskLogicSubobject_GetOwningPlayerTaskComponent) == 0x000008, "Wrong alignment on MoleTaskLogicSubobject_GetOwningPlayerTaskComponent");
static_assert(sizeof(MoleTaskLogicSubobject_GetOwningPlayerTaskComponent) == 0x000008, "Wrong size on MoleTaskLogicSubobject_GetOwningPlayerTaskComponent");
static_assert(offsetof(MoleTaskLogicSubobject_GetOwningPlayerTaskComponent, ReturnValue) == 0x000000, "Member 'MoleTaskLogicSubobject_GetOwningPlayerTaskComponent::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskLogicObjective.ApplyCurrentValueDelta
// 0x0004 (0x0004 - 0x0000)
struct MoleTaskLogicObjective_ApplyCurrentValueDelta final
{
public:
	float                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskLogicObjective_ApplyCurrentValueDelta) == 0x000004, "Wrong alignment on MoleTaskLogicObjective_ApplyCurrentValueDelta");
static_assert(sizeof(MoleTaskLogicObjective_ApplyCurrentValueDelta) == 0x000004, "Wrong size on MoleTaskLogicObjective_ApplyCurrentValueDelta");
static_assert(offsetof(MoleTaskLogicObjective_ApplyCurrentValueDelta, Delta) == 0x000000, "Member 'MoleTaskLogicObjective_ApplyCurrentValueDelta::Delta' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskLogicObjective.CaptureInitialValue
// 0x0004 (0x0004 - 0x0000)
struct MoleTaskLogicObjective_CaptureInitialValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskLogicObjective_CaptureInitialValue) == 0x000004, "Wrong alignment on MoleTaskLogicObjective_CaptureInitialValue");
static_assert(sizeof(MoleTaskLogicObjective_CaptureInitialValue) == 0x000004, "Wrong size on MoleTaskLogicObjective_CaptureInitialValue");
static_assert(offsetof(MoleTaskLogicObjective_CaptureInitialValue, ReturnValue) == 0x000000, "Member 'MoleTaskLogicObjective_CaptureInitialValue::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskLogicObjective.CaptureTargetValue
// 0x0004 (0x0004 - 0x0000)
struct MoleTaskLogicObjective_CaptureTargetValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskLogicObjective_CaptureTargetValue) == 0x000004, "Wrong alignment on MoleTaskLogicObjective_CaptureTargetValue");
static_assert(sizeof(MoleTaskLogicObjective_CaptureTargetValue) == 0x000004, "Wrong size on MoleTaskLogicObjective_CaptureTargetValue");
static_assert(offsetof(MoleTaskLogicObjective_CaptureTargetValue, ReturnValue) == 0x000000, "Member 'MoleTaskLogicObjective_CaptureTargetValue::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskLogicObjective.ServerSuggestObjectiveStatus
// 0x0001 (0x0001 - 0x0000)
struct MoleTaskLogicObjective_ServerSuggestObjectiveStatus final
{
public:
	EMoleTaskObjectiveStatus                      InNewSuggestedStatus;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskLogicObjective_ServerSuggestObjectiveStatus) == 0x000001, "Wrong alignment on MoleTaskLogicObjective_ServerSuggestObjectiveStatus");
static_assert(sizeof(MoleTaskLogicObjective_ServerSuggestObjectiveStatus) == 0x000001, "Wrong size on MoleTaskLogicObjective_ServerSuggestObjectiveStatus");
static_assert(offsetof(MoleTaskLogicObjective_ServerSuggestObjectiveStatus, InNewSuggestedStatus) == 0x000000, "Member 'MoleTaskLogicObjective_ServerSuggestObjectiveStatus::InNewSuggestedStatus' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskLogicObjective.SetObjectiveStatus
// 0x0001 (0x0001 - 0x0000)
struct MoleTaskLogicObjective_SetObjectiveStatus final
{
public:
	EMoleTaskObjectiveStatus                      InNewStatus;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskLogicObjective_SetObjectiveStatus) == 0x000001, "Wrong alignment on MoleTaskLogicObjective_SetObjectiveStatus");
static_assert(sizeof(MoleTaskLogicObjective_SetObjectiveStatus) == 0x000001, "Wrong size on MoleTaskLogicObjective_SetObjectiveStatus");
static_assert(offsetof(MoleTaskLogicObjective_SetObjectiveStatus, InNewStatus) == 0x000000, "Member 'MoleTaskLogicObjective_SetObjectiveStatus::InNewStatus' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskLogicObjective.GetCapturedInitialValue
// 0x0004 (0x0004 - 0x0000)
struct MoleTaskLogicObjective_GetCapturedInitialValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskLogicObjective_GetCapturedInitialValue) == 0x000004, "Wrong alignment on MoleTaskLogicObjective_GetCapturedInitialValue");
static_assert(sizeof(MoleTaskLogicObjective_GetCapturedInitialValue) == 0x000004, "Wrong size on MoleTaskLogicObjective_GetCapturedInitialValue");
static_assert(offsetof(MoleTaskLogicObjective_GetCapturedInitialValue, ReturnValue) == 0x000000, "Member 'MoleTaskLogicObjective_GetCapturedInitialValue::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskLogicObjective.GetCapturedTargetValue
// 0x0004 (0x0004 - 0x0000)
struct MoleTaskLogicObjective_GetCapturedTargetValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskLogicObjective_GetCapturedTargetValue) == 0x000004, "Wrong alignment on MoleTaskLogicObjective_GetCapturedTargetValue");
static_assert(sizeof(MoleTaskLogicObjective_GetCapturedTargetValue) == 0x000004, "Wrong size on MoleTaskLogicObjective_GetCapturedTargetValue");
static_assert(offsetof(MoleTaskLogicObjective_GetCapturedTargetValue, ReturnValue) == 0x000000, "Member 'MoleTaskLogicObjective_GetCapturedTargetValue::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskLogicObjective.GetCurrentValue
// 0x0004 (0x0004 - 0x0000)
struct MoleTaskLogicObjective_GetCurrentValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskLogicObjective_GetCurrentValue) == 0x000004, "Wrong alignment on MoleTaskLogicObjective_GetCurrentValue");
static_assert(sizeof(MoleTaskLogicObjective_GetCurrentValue) == 0x000004, "Wrong size on MoleTaskLogicObjective_GetCurrentValue");
static_assert(offsetof(MoleTaskLogicObjective_GetCurrentValue, ReturnValue) == 0x000000, "Member 'MoleTaskLogicObjective_GetCurrentValue::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskLogicObjective.GetObjectiveStatus
// 0x0001 (0x0001 - 0x0000)
struct MoleTaskLogicObjective_GetObjectiveStatus final
{
public:
	EMoleTaskObjectiveStatus                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskLogicObjective_GetObjectiveStatus) == 0x000001, "Wrong alignment on MoleTaskLogicObjective_GetObjectiveStatus");
static_assert(sizeof(MoleTaskLogicObjective_GetObjectiveStatus) == 0x000001, "Wrong size on MoleTaskLogicObjective_GetObjectiveStatus");
static_assert(offsetof(MoleTaskLogicObjective_GetObjectiveStatus, ReturnValue) == 0x000000, "Member 'MoleTaskLogicObjective_GetObjectiveStatus::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskLogicObjective.GetObjectiveText
// 0x0018 (0x0018 - 0x0000)
struct MoleTaskLogicObjective_GetObjectiveText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskLogicObjective_GetObjectiveText) == 0x000008, "Wrong alignment on MoleTaskLogicObjective_GetObjectiveText");
static_assert(sizeof(MoleTaskLogicObjective_GetObjectiveText) == 0x000018, "Wrong size on MoleTaskLogicObjective_GetObjectiveText");
static_assert(offsetof(MoleTaskLogicObjective_GetObjectiveText, ReturnValue) == 0x000000, "Member 'MoleTaskLogicObjective_GetObjectiveText::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MoleEliminationAbility.ValidatePotentialEliminationTarget
// 0x0010 (0x0010 - 0x0000)
struct MoleEliminationAbility_ValidatePotentialEliminationTarget final
{
public:
	class AFortPlayerPawn*                        PotentialTargetPawn;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoleEliminationAbility_ValidatePotentialEliminationTarget) == 0x000008, "Wrong alignment on MoleEliminationAbility_ValidatePotentialEliminationTarget");
static_assert(sizeof(MoleEliminationAbility_ValidatePotentialEliminationTarget) == 0x000010, "Wrong size on MoleEliminationAbility_ValidatePotentialEliminationTarget");
static_assert(offsetof(MoleEliminationAbility_ValidatePotentialEliminationTarget, PotentialTargetPawn) == 0x000000, "Member 'MoleEliminationAbility_ValidatePotentialEliminationTarget::PotentialTargetPawn' has a wrong offset!");
static_assert(offsetof(MoleEliminationAbility_ValidatePotentialEliminationTarget, ReturnValue) == 0x000008, "Member 'MoleEliminationAbility_ValidatePotentialEliminationTarget::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.FortCinematicComponent.FadeFromBlackscreen
// 0x0004 (0x0004 - 0x0000)
struct FortCinematicComponent_FadeFromBlackscreen final
{
public:
	float                                         InFadeTime;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCinematicComponent_FadeFromBlackscreen) == 0x000004, "Wrong alignment on FortCinematicComponent_FadeFromBlackscreen");
static_assert(sizeof(FortCinematicComponent_FadeFromBlackscreen) == 0x000004, "Wrong size on FortCinematicComponent_FadeFromBlackscreen");
static_assert(offsetof(FortCinematicComponent_FadeFromBlackscreen, InFadeTime) == 0x000000, "Member 'FortCinematicComponent_FadeFromBlackscreen::InFadeTime' has a wrong offset!");

// Function MoleGameRuntime.FortCinematicComponent.FadeToBlackscreen
// 0x0008 (0x0008 - 0x0000)
struct FortCinematicComponent_FadeToBlackscreen final
{
public:
	float                                         InFadeTime;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInHold;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCinematicComponent_FadeToBlackscreen) == 0x000004, "Wrong alignment on FortCinematicComponent_FadeToBlackscreen");
static_assert(sizeof(FortCinematicComponent_FadeToBlackscreen) == 0x000008, "Wrong size on FortCinematicComponent_FadeToBlackscreen");
static_assert(offsetof(FortCinematicComponent_FadeToBlackscreen, InFadeTime) == 0x000000, "Member 'FortCinematicComponent_FadeToBlackscreen::InFadeTime' has a wrong offset!");
static_assert(offsetof(FortCinematicComponent_FadeToBlackscreen, bInHold) == 0x000004, "Member 'FortCinematicComponent_FadeToBlackscreen::bInHold' has a wrong offset!");

// Function MoleGameRuntime.FortCinematicComponent.IsCinematicStateActive
// 0x0008 (0x0008 - 0x0000)
struct FortCinematicComponent_IsCinematicStateActive final
{
public:
	struct FGameplayTag                           StateTag;                                          // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCinematicComponent_IsCinematicStateActive) == 0x000004, "Wrong alignment on FortCinematicComponent_IsCinematicStateActive");
static_assert(sizeof(FortCinematicComponent_IsCinematicStateActive) == 0x000008, "Wrong size on FortCinematicComponent_IsCinematicStateActive");
static_assert(offsetof(FortCinematicComponent_IsCinematicStateActive, StateTag) == 0x000000, "Member 'FortCinematicComponent_IsCinematicStateActive::StateTag' has a wrong offset!");
static_assert(offsetof(FortCinematicComponent_IsCinematicStateActive, ReturnValue) == 0x000004, "Member 'FortCinematicComponent_IsCinematicStateActive::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.FortCinematicComponent.PushCinematicState
// 0x0048 (0x0048 - 0x0000)
struct FortCinematicComponent_PushCinematicState final
{
public:
	struct FFortCinematicState                    InState;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCinematicComponent_PushCinematicState) == 0x000008, "Wrong alignment on FortCinematicComponent_PushCinematicState");
static_assert(sizeof(FortCinematicComponent_PushCinematicState) == 0x000048, "Wrong size on FortCinematicComponent_PushCinematicState");
static_assert(offsetof(FortCinematicComponent_PushCinematicState, InState) == 0x000000, "Member 'FortCinematicComponent_PushCinematicState::InState' has a wrong offset!");

// Function MoleGameRuntime.FortCinematicComponent.RemoveCinematicState
// 0x0004 (0x0004 - 0x0000)
struct FortCinematicComponent_RemoveCinematicState final
{
public:
	struct FGameplayTag                           StateId;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCinematicComponent_RemoveCinematicState) == 0x000004, "Wrong alignment on FortCinematicComponent_RemoveCinematicState");
static_assert(sizeof(FortCinematicComponent_RemoveCinematicState) == 0x000004, "Wrong size on FortCinematicComponent_RemoveCinematicState");
static_assert(offsetof(FortCinematicComponent_RemoveCinematicState, StateId) == 0x000000, "Member 'FortCinematicComponent_RemoveCinematicState::StateId' has a wrong offset!");

// Function MoleGameRuntime.MoleAFKComponent.HasEverBeenAFK
// 0x0010 (0x0010 - 0x0000)
struct MoleAFKComponent_HasEverBeenAFK final
{
public:
	const class AFortPlayerController*            FortPC;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoleAFKComponent_HasEverBeenAFK) == 0x000008, "Wrong alignment on MoleAFKComponent_HasEverBeenAFK");
static_assert(sizeof(MoleAFKComponent_HasEverBeenAFK) == 0x000010, "Wrong size on MoleAFKComponent_HasEverBeenAFK");
static_assert(offsetof(MoleAFKComponent_HasEverBeenAFK, FortPC) == 0x000000, "Member 'MoleAFKComponent_HasEverBeenAFK::FortPC' has a wrong offset!");
static_assert(offsetof(MoleAFKComponent_HasEverBeenAFK, ReturnValue) == 0x000008, "Member 'MoleAFKComponent_HasEverBeenAFK::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MoleAFKComponent.HasEverBeenAFKForTooLong
// 0x0010 (0x0010 - 0x0000)
struct MoleAFKComponent_HasEverBeenAFKForTooLong final
{
public:
	const class AFortPlayerController*            FortPC;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoleAFKComponent_HasEverBeenAFKForTooLong) == 0x000008, "Wrong alignment on MoleAFKComponent_HasEverBeenAFKForTooLong");
static_assert(sizeof(MoleAFKComponent_HasEverBeenAFKForTooLong) == 0x000010, "Wrong size on MoleAFKComponent_HasEverBeenAFKForTooLong");
static_assert(offsetof(MoleAFKComponent_HasEverBeenAFKForTooLong, FortPC) == 0x000000, "Member 'MoleAFKComponent_HasEverBeenAFKForTooLong::FortPC' has a wrong offset!");
static_assert(offsetof(MoleAFKComponent_HasEverBeenAFKForTooLong, ReturnValue) == 0x000008, "Member 'MoleAFKComponent_HasEverBeenAFKForTooLong::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MoleAFKComponent.IsControllerAFK
// 0x0010 (0x0010 - 0x0000)
struct MoleAFKComponent_IsControllerAFK final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoleAFKComponent_IsControllerAFK) == 0x000008, "Wrong alignment on MoleAFKComponent_IsControllerAFK");
static_assert(sizeof(MoleAFKComponent_IsControllerAFK) == 0x000010, "Wrong size on MoleAFKComponent_IsControllerAFK");
static_assert(offsetof(MoleAFKComponent_IsControllerAFK, FortPC) == 0x000000, "Member 'MoleAFKComponent_IsControllerAFK::FortPC' has a wrong offset!");
static_assert(offsetof(MoleAFKComponent_IsControllerAFK, ReturnValue) == 0x000008, "Member 'MoleAFKComponent_IsControllerAFK::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MoleAFKComponent.IsPlayerAFK
// 0x0010 (0x0010 - 0x0000)
struct MoleAFKComponent_IsPlayerAFK final
{
public:
	const class APlayerState*                     Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoleAFKComponent_IsPlayerAFK) == 0x000008, "Wrong alignment on MoleAFKComponent_IsPlayerAFK");
static_assert(sizeof(MoleAFKComponent_IsPlayerAFK) == 0x000010, "Wrong size on MoleAFKComponent_IsPlayerAFK");
static_assert(offsetof(MoleAFKComponent_IsPlayerAFK, Player) == 0x000000, "Member 'MoleAFKComponent_IsPlayerAFK::Player' has a wrong offset!");
static_assert(offsetof(MoleAFKComponent_IsPlayerAFK, ReturnValue) == 0x000008, "Member 'MoleAFKComponent_IsPlayerAFK::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MoleAFKComponent.OnPlayerEnteredPOI
// 0x0010 (0x0010 - 0x0000)
struct MoleAFKComponent_OnPlayerEnteredPOI final
{
public:
	class AActor*                                 OverlapingVolume;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EnteringActor;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleAFKComponent_OnPlayerEnteredPOI) == 0x000008, "Wrong alignment on MoleAFKComponent_OnPlayerEnteredPOI");
static_assert(sizeof(MoleAFKComponent_OnPlayerEnteredPOI) == 0x000010, "Wrong size on MoleAFKComponent_OnPlayerEnteredPOI");
static_assert(offsetof(MoleAFKComponent_OnPlayerEnteredPOI, OverlapingVolume) == 0x000000, "Member 'MoleAFKComponent_OnPlayerEnteredPOI::OverlapingVolume' has a wrong offset!");
static_assert(offsetof(MoleAFKComponent_OnPlayerEnteredPOI, EnteringActor) == 0x000008, "Member 'MoleAFKComponent_OnPlayerEnteredPOI::EnteringActor' has a wrong offset!");

// Function MoleGameRuntime.MoleAFKComponent.OnPlayerLeftPOI
// 0x0010 (0x0010 - 0x0000)
struct MoleAFKComponent_OnPlayerLeftPOI final
{
public:
	class AActor*                                 OverlapingVolume;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EnteringActor;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleAFKComponent_OnPlayerLeftPOI) == 0x000008, "Wrong alignment on MoleAFKComponent_OnPlayerLeftPOI");
static_assert(sizeof(MoleAFKComponent_OnPlayerLeftPOI) == 0x000010, "Wrong size on MoleAFKComponent_OnPlayerLeftPOI");
static_assert(offsetof(MoleAFKComponent_OnPlayerLeftPOI, OverlapingVolume) == 0x000000, "Member 'MoleAFKComponent_OnPlayerLeftPOI::OverlapingVolume' has a wrong offset!");
static_assert(offsetof(MoleAFKComponent_OnPlayerLeftPOI, EnteringActor) == 0x000008, "Member 'MoleAFKComponent_OnPlayerLeftPOI::EnteringActor' has a wrong offset!");

// Function MoleGameRuntime.MoleCheatManager.GoToStateGameover
// 0x0004 (0x0004 - 0x0000)
struct MoleCheatManager_GoToStateGameover final
{
public:
	struct FGameplayTag                           InTag;                                             // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleCheatManager_GoToStateGameover) == 0x000004, "Wrong alignment on MoleCheatManager_GoToStateGameover");
static_assert(sizeof(MoleCheatManager_GoToStateGameover) == 0x000004, "Wrong size on MoleCheatManager_GoToStateGameover");
static_assert(offsetof(MoleCheatManager_GoToStateGameover, InTag) == 0x000000, "Member 'MoleCheatManager_GoToStateGameover::InTag' has a wrong offset!");

// Function MoleGameRuntime.MoleCheatManager.GrantTask
// 0x0010 (0x0010 - 0x0000)
struct MoleCheatManager_GrantTask final
{
public:
	class FString                                 TaskAssetName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleCheatManager_GrantTask) == 0x000008, "Wrong alignment on MoleCheatManager_GrantTask");
static_assert(sizeof(MoleCheatManager_GrantTask) == 0x000010, "Wrong size on MoleCheatManager_GrantTask");
static_assert(offsetof(MoleCheatManager_GrantTask, TaskAssetName) == 0x000000, "Member 'MoleCheatManager_GrantTask::TaskAssetName' has a wrong offset!");

// Function MoleGameRuntime.MoleCheatManager.SpawnMoleBots
// 0x0004 (0x0004 - 0x0000)
struct MoleCheatManager_SpawnMoleBots final
{
public:
	int32                                         NumBotsToSpawn;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleCheatManager_SpawnMoleBots) == 0x000004, "Wrong alignment on MoleCheatManager_SpawnMoleBots");
static_assert(sizeof(MoleCheatManager_SpawnMoleBots) == 0x000004, "Wrong size on MoleCheatManager_SpawnMoleBots");
static_assert(offsetof(MoleCheatManager_SpawnMoleBots, NumBotsToSpawn) == 0x000000, "Member 'MoleCheatManager_SpawnMoleBots::NumBotsToSpawn' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskLogicObjective_DamageActors.OnBuildingActorDamaged
// 0x0060 (0x0060 - 0x0000)
struct MoleTaskLogicObjective_DamageActors_OnBuildingActorDamaged final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskLogicObjective_DamageActors_OnBuildingActorDamaged) == 0x000008, "Wrong alignment on MoleTaskLogicObjective_DamageActors_OnBuildingActorDamaged");
static_assert(sizeof(MoleTaskLogicObjective_DamageActors_OnBuildingActorDamaged) == 0x000060, "Wrong size on MoleTaskLogicObjective_DamageActors_OnBuildingActorDamaged");
static_assert(offsetof(MoleTaskLogicObjective_DamageActors_OnBuildingActorDamaged, DamagedActor) == 0x000000, "Member 'MoleTaskLogicObjective_DamageActors_OnBuildingActorDamaged::DamagedActor' has a wrong offset!");
static_assert(offsetof(MoleTaskLogicObjective_DamageActors_OnBuildingActorDamaged, Damage) == 0x000008, "Member 'MoleTaskLogicObjective_DamageActors_OnBuildingActorDamaged::Damage' has a wrong offset!");
static_assert(offsetof(MoleTaskLogicObjective_DamageActors_OnBuildingActorDamaged, InstigatedBy) == 0x000010, "Member 'MoleTaskLogicObjective_DamageActors_OnBuildingActorDamaged::InstigatedBy' has a wrong offset!");
static_assert(offsetof(MoleTaskLogicObjective_DamageActors_OnBuildingActorDamaged, DamageCauser) == 0x000018, "Member 'MoleTaskLogicObjective_DamageActors_OnBuildingActorDamaged::DamageCauser' has a wrong offset!");
static_assert(offsetof(MoleTaskLogicObjective_DamageActors_OnBuildingActorDamaged, HitLocation) == 0x000020, "Member 'MoleTaskLogicObjective_DamageActors_OnBuildingActorDamaged::HitLocation' has a wrong offset!");
static_assert(offsetof(MoleTaskLogicObjective_DamageActors_OnBuildingActorDamaged, FHitComponent) == 0x000038, "Member 'MoleTaskLogicObjective_DamageActors_OnBuildingActorDamaged::FHitComponent' has a wrong offset!");
static_assert(offsetof(MoleTaskLogicObjective_DamageActors_OnBuildingActorDamaged, BoneName) == 0x000040, "Member 'MoleTaskLogicObjective_DamageActors_OnBuildingActorDamaged::BoneName' has a wrong offset!");
static_assert(offsetof(MoleTaskLogicObjective_DamageActors_OnBuildingActorDamaged, Momentum) == 0x000048, "Member 'MoleTaskLogicObjective_DamageActors_OnBuildingActorDamaged::Momentum' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskLogicObjective_DamageActors.OnPawnDamaged
// 0x0060 (0x0060 - 0x0000)
struct MoleTaskLogicObjective_DamageActors_OnPawnDamaged final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskLogicObjective_DamageActors_OnPawnDamaged) == 0x000008, "Wrong alignment on MoleTaskLogicObjective_DamageActors_OnPawnDamaged");
static_assert(sizeof(MoleTaskLogicObjective_DamageActors_OnPawnDamaged) == 0x000060, "Wrong size on MoleTaskLogicObjective_DamageActors_OnPawnDamaged");
static_assert(offsetof(MoleTaskLogicObjective_DamageActors_OnPawnDamaged, DamagedActor) == 0x000000, "Member 'MoleTaskLogicObjective_DamageActors_OnPawnDamaged::DamagedActor' has a wrong offset!");
static_assert(offsetof(MoleTaskLogicObjective_DamageActors_OnPawnDamaged, Damage) == 0x000008, "Member 'MoleTaskLogicObjective_DamageActors_OnPawnDamaged::Damage' has a wrong offset!");
static_assert(offsetof(MoleTaskLogicObjective_DamageActors_OnPawnDamaged, InstigatedBy) == 0x000010, "Member 'MoleTaskLogicObjective_DamageActors_OnPawnDamaged::InstigatedBy' has a wrong offset!");
static_assert(offsetof(MoleTaskLogicObjective_DamageActors_OnPawnDamaged, DamageCauser) == 0x000018, "Member 'MoleTaskLogicObjective_DamageActors_OnPawnDamaged::DamageCauser' has a wrong offset!");
static_assert(offsetof(MoleTaskLogicObjective_DamageActors_OnPawnDamaged, HitLocation) == 0x000020, "Member 'MoleTaskLogicObjective_DamageActors_OnPawnDamaged::HitLocation' has a wrong offset!");
static_assert(offsetof(MoleTaskLogicObjective_DamageActors_OnPawnDamaged, FHitComponent) == 0x000038, "Member 'MoleTaskLogicObjective_DamageActors_OnPawnDamaged::FHitComponent' has a wrong offset!");
static_assert(offsetof(MoleTaskLogicObjective_DamageActors_OnPawnDamaged, BoneName) == 0x000040, "Member 'MoleTaskLogicObjective_DamageActors_OnPawnDamaged::BoneName' has a wrong offset!");
static_assert(offsetof(MoleTaskLogicObjective_DamageActors_OnPawnDamaged, Momentum) == 0x000048, "Member 'MoleTaskLogicObjective_DamageActors_OnPawnDamaged::Momentum' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskLogicObjective_DestroyActors.OnBuildingActorDied
// 0x0060 (0x0060 - 0x0000)
struct MoleTaskLogicObjective_DestroyActors_OnBuildingActorDied final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskLogicObjective_DestroyActors_OnBuildingActorDied) == 0x000008, "Wrong alignment on MoleTaskLogicObjective_DestroyActors_OnBuildingActorDied");
static_assert(sizeof(MoleTaskLogicObjective_DestroyActors_OnBuildingActorDied) == 0x000060, "Wrong size on MoleTaskLogicObjective_DestroyActors_OnBuildingActorDied");
static_assert(offsetof(MoleTaskLogicObjective_DestroyActors_OnBuildingActorDied, DamagedActor) == 0x000000, "Member 'MoleTaskLogicObjective_DestroyActors_OnBuildingActorDied::DamagedActor' has a wrong offset!");
static_assert(offsetof(MoleTaskLogicObjective_DestroyActors_OnBuildingActorDied, Damage) == 0x000008, "Member 'MoleTaskLogicObjective_DestroyActors_OnBuildingActorDied::Damage' has a wrong offset!");
static_assert(offsetof(MoleTaskLogicObjective_DestroyActors_OnBuildingActorDied, InstigatedBy) == 0x000010, "Member 'MoleTaskLogicObjective_DestroyActors_OnBuildingActorDied::InstigatedBy' has a wrong offset!");
static_assert(offsetof(MoleTaskLogicObjective_DestroyActors_OnBuildingActorDied, DamageCauser) == 0x000018, "Member 'MoleTaskLogicObjective_DestroyActors_OnBuildingActorDied::DamageCauser' has a wrong offset!");
static_assert(offsetof(MoleTaskLogicObjective_DestroyActors_OnBuildingActorDied, HitLocation) == 0x000020, "Member 'MoleTaskLogicObjective_DestroyActors_OnBuildingActorDied::HitLocation' has a wrong offset!");
static_assert(offsetof(MoleTaskLogicObjective_DestroyActors_OnBuildingActorDied, FHitComponent) == 0x000038, "Member 'MoleTaskLogicObjective_DestroyActors_OnBuildingActorDied::FHitComponent' has a wrong offset!");
static_assert(offsetof(MoleTaskLogicObjective_DestroyActors_OnBuildingActorDied, BoneName) == 0x000040, "Member 'MoleTaskLogicObjective_DestroyActors_OnBuildingActorDied::BoneName' has a wrong offset!");
static_assert(offsetof(MoleTaskLogicObjective_DestroyActors_OnBuildingActorDied, Momentum) == 0x000048, "Member 'MoleTaskLogicObjective_DestroyActors_OnBuildingActorDied::Momentum' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskLogicObjective_DestroyActors.OnGenericActorDestroyed
// 0x0008 (0x0008 - 0x0000)
struct MoleTaskLogicObjective_DestroyActors_OnGenericActorDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskLogicObjective_DestroyActors_OnGenericActorDestroyed) == 0x000008, "Wrong alignment on MoleTaskLogicObjective_DestroyActors_OnGenericActorDestroyed");
static_assert(sizeof(MoleTaskLogicObjective_DestroyActors_OnGenericActorDestroyed) == 0x000008, "Wrong size on MoleTaskLogicObjective_DestroyActors_OnGenericActorDestroyed");
static_assert(offsetof(MoleTaskLogicObjective_DestroyActors_OnGenericActorDestroyed, DestroyedActor) == 0x000000, "Member 'MoleTaskLogicObjective_DestroyActors_OnGenericActorDestroyed::DestroyedActor' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskLogicObjective_DestroyActors.OnPawnDied
// 0x0060 (0x0060 - 0x0000)
struct MoleTaskLogicObjective_DestroyActors_OnPawnDied final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskLogicObjective_DestroyActors_OnPawnDied) == 0x000008, "Wrong alignment on MoleTaskLogicObjective_DestroyActors_OnPawnDied");
static_assert(sizeof(MoleTaskLogicObjective_DestroyActors_OnPawnDied) == 0x000060, "Wrong size on MoleTaskLogicObjective_DestroyActors_OnPawnDied");
static_assert(offsetof(MoleTaskLogicObjective_DestroyActors_OnPawnDied, DamagedActor) == 0x000000, "Member 'MoleTaskLogicObjective_DestroyActors_OnPawnDied::DamagedActor' has a wrong offset!");
static_assert(offsetof(MoleTaskLogicObjective_DestroyActors_OnPawnDied, Damage) == 0x000008, "Member 'MoleTaskLogicObjective_DestroyActors_OnPawnDied::Damage' has a wrong offset!");
static_assert(offsetof(MoleTaskLogicObjective_DestroyActors_OnPawnDied, InstigatedBy) == 0x000010, "Member 'MoleTaskLogicObjective_DestroyActors_OnPawnDied::InstigatedBy' has a wrong offset!");
static_assert(offsetof(MoleTaskLogicObjective_DestroyActors_OnPawnDied, DamageCauser) == 0x000018, "Member 'MoleTaskLogicObjective_DestroyActors_OnPawnDied::DamageCauser' has a wrong offset!");
static_assert(offsetof(MoleTaskLogicObjective_DestroyActors_OnPawnDied, HitLocation) == 0x000020, "Member 'MoleTaskLogicObjective_DestroyActors_OnPawnDied::HitLocation' has a wrong offset!");
static_assert(offsetof(MoleTaskLogicObjective_DestroyActors_OnPawnDied, FHitComponent) == 0x000038, "Member 'MoleTaskLogicObjective_DestroyActors_OnPawnDied::FHitComponent' has a wrong offset!");
static_assert(offsetof(MoleTaskLogicObjective_DestroyActors_OnPawnDied, BoneName) == 0x000040, "Member 'MoleTaskLogicObjective_DestroyActors_OnPawnDied::BoneName' has a wrong offset!");
static_assert(offsetof(MoleTaskLogicObjective_DestroyActors_OnPawnDied, Momentum) == 0x000048, "Member 'MoleTaskLogicObjective_DestroyActors_OnPawnDied::Momentum' has a wrong offset!");

// Function MoleGameRuntime.MoleGameplayAbility_Voting.OnVotingTargetChanged
// 0x0008 (0x0008 - 0x0000)
struct MoleGameplayAbility_Voting_OnVotingTargetChanged final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleGameplayAbility_Voting_OnVotingTargetChanged) == 0x000008, "Wrong alignment on MoleGameplayAbility_Voting_OnVotingTargetChanged");
static_assert(sizeof(MoleGameplayAbility_Voting_OnVotingTargetChanged) == 0x000008, "Wrong size on MoleGameplayAbility_Voting_OnVotingTargetChanged");
static_assert(offsetof(MoleGameplayAbility_Voting_OnVotingTargetChanged, Target) == 0x000000, "Member 'MoleGameplayAbility_Voting_OnVotingTargetChanged::Target' has a wrong offset!");

// Function MoleGameRuntime.MoleGhostMannequin.OnRepresentedPlayerSet
// 0x0008 (0x0008 - 0x0000)
struct MoleGhostMannequin_OnRepresentedPlayerSet final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleGhostMannequin_OnRepresentedPlayerSet) == 0x000008, "Wrong alignment on MoleGhostMannequin_OnRepresentedPlayerSet");
static_assert(sizeof(MoleGhostMannequin_OnRepresentedPlayerSet) == 0x000008, "Wrong size on MoleGhostMannequin_OnRepresentedPlayerSet");
static_assert(offsetof(MoleGhostMannequin_OnRepresentedPlayerSet, PlayerState) == 0x000000, "Member 'MoleGhostMannequin_OnRepresentedPlayerSet::PlayerState' has a wrong offset!");

// Function MoleGameRuntime.MoleGhostMannequin.GetRepresentedPlayer
// 0x0008 (0x0008 - 0x0000)
struct MoleGhostMannequin_GetRepresentedPlayer final
{
public:
	class APlayerState*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleGhostMannequin_GetRepresentedPlayer) == 0x000008, "Wrong alignment on MoleGhostMannequin_GetRepresentedPlayer");
static_assert(sizeof(MoleGhostMannequin_GetRepresentedPlayer) == 0x000008, "Wrong size on MoleGhostMannequin_GetRepresentedPlayer");
static_assert(offsetof(MoleGhostMannequin_GetRepresentedPlayer, ReturnValue) == 0x000000, "Member 'MoleGhostMannequin_GetRepresentedPlayer::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MoleImpostorBiasComponent.IsImpostorBiasEnabled
// 0x0001 (0x0001 - 0x0000)
struct MoleImpostorBiasComponent_IsImpostorBiasEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleImpostorBiasComponent_IsImpostorBiasEnabled) == 0x000001, "Wrong alignment on MoleImpostorBiasComponent_IsImpostorBiasEnabled");
static_assert(sizeof(MoleImpostorBiasComponent_IsImpostorBiasEnabled) == 0x000001, "Wrong size on MoleImpostorBiasComponent_IsImpostorBiasEnabled");
static_assert(offsetof(MoleImpostorBiasComponent_IsImpostorBiasEnabled, ReturnValue) == 0x000000, "Member 'MoleImpostorBiasComponent_IsImpostorBiasEnabled::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MoleImpostorBiasComponent.SetRolePreference
// 0x0010 (0x0010 - 0x0000)
struct MoleImpostorBiasComponent_SetRolePreference final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMoleRole                                     InRolePreference;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoleImpostorBiasComponent_SetRolePreference) == 0x000008, "Wrong alignment on MoleImpostorBiasComponent_SetRolePreference");
static_assert(sizeof(MoleImpostorBiasComponent_SetRolePreference) == 0x000010, "Wrong size on MoleImpostorBiasComponent_SetRolePreference");
static_assert(offsetof(MoleImpostorBiasComponent_SetRolePreference, FortPC) == 0x000000, "Member 'MoleImpostorBiasComponent_SetRolePreference::FortPC' has a wrong offset!");
static_assert(offsetof(MoleImpostorBiasComponent_SetRolePreference, InRolePreference) == 0x000008, "Member 'MoleImpostorBiasComponent_SetRolePreference::InRolePreference' has a wrong offset!");

// Function MoleGameRuntime.MolePawnComponent.HandlePawnCustomizationComplete
// 0x0008 (0x0008 - 0x0000)
struct MolePawnComponent_HandlePawnCustomizationComplete final
{
public:
	class AFortPlayerPawn*                        Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MolePawnComponent_HandlePawnCustomizationComplete) == 0x000008, "Wrong alignment on MolePawnComponent_HandlePawnCustomizationComplete");
static_assert(sizeof(MolePawnComponent_HandlePawnCustomizationComplete) == 0x000008, "Wrong size on MolePawnComponent_HandlePawnCustomizationComplete");
static_assert(offsetof(MolePawnComponent_HandlePawnCustomizationComplete, Pawn) == 0x000000, "Member 'MolePawnComponent_HandlePawnCustomizationComplete::Pawn' has a wrong offset!");

// Function MoleGameRuntime.MolePlayerStateComponent.BlueprintSetIsPlayerGhost
// 0x0010 (0x0010 - 0x0000)
struct MolePlayerStateComponent_BlueprintSetIsPlayerGhost final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPlayerGhost;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MolePlayerStateComponent_BlueprintSetIsPlayerGhost) == 0x000008, "Wrong alignment on MolePlayerStateComponent_BlueprintSetIsPlayerGhost");
static_assert(sizeof(MolePlayerStateComponent_BlueprintSetIsPlayerGhost) == 0x000010, "Wrong size on MolePlayerStateComponent_BlueprintSetIsPlayerGhost");
static_assert(offsetof(MolePlayerStateComponent_BlueprintSetIsPlayerGhost, PlayerState) == 0x000000, "Member 'MolePlayerStateComponent_BlueprintSetIsPlayerGhost::PlayerState' has a wrong offset!");
static_assert(offsetof(MolePlayerStateComponent_BlueprintSetIsPlayerGhost, bIsPlayerGhost) == 0x000008, "Member 'MolePlayerStateComponent_BlueprintSetIsPlayerGhost::bIsPlayerGhost' has a wrong offset!");

// Function MoleGameRuntime.MolePlayerStateComponent.GetMolePlayerCosmeticData
// 0x0028 (0x0028 - 0x0000)
struct MolePlayerStateComponent_GetMolePlayerCosmeticData final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMolePlayerCosmeticData                OutPlayerCosmeticData;                             // 0x0008(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MolePlayerStateComponent_GetMolePlayerCosmeticData) == 0x000008, "Wrong alignment on MolePlayerStateComponent_GetMolePlayerCosmeticData");
static_assert(sizeof(MolePlayerStateComponent_GetMolePlayerCosmeticData) == 0x000028, "Wrong size on MolePlayerStateComponent_GetMolePlayerCosmeticData");
static_assert(offsetof(MolePlayerStateComponent_GetMolePlayerCosmeticData, PlayerState) == 0x000000, "Member 'MolePlayerStateComponent_GetMolePlayerCosmeticData::PlayerState' has a wrong offset!");
static_assert(offsetof(MolePlayerStateComponent_GetMolePlayerCosmeticData, OutPlayerCosmeticData) == 0x000008, "Member 'MolePlayerStateComponent_GetMolePlayerCosmeticData::OutPlayerCosmeticData' has a wrong offset!");

// Function MoleGameRuntime.MolePlayerStateComponent.GetMolePlayerItemDefinition
// 0x0010 (0x0010 - 0x0000)
struct MolePlayerStateComponent_GetMolePlayerItemDefinition final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortItemDefinition*              ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MolePlayerStateComponent_GetMolePlayerItemDefinition) == 0x000008, "Wrong alignment on MolePlayerStateComponent_GetMolePlayerItemDefinition");
static_assert(sizeof(MolePlayerStateComponent_GetMolePlayerItemDefinition) == 0x000010, "Wrong size on MolePlayerStateComponent_GetMolePlayerItemDefinition");
static_assert(offsetof(MolePlayerStateComponent_GetMolePlayerItemDefinition, PlayerState) == 0x000000, "Member 'MolePlayerStateComponent_GetMolePlayerItemDefinition::PlayerState' has a wrong offset!");
static_assert(offsetof(MolePlayerStateComponent_GetMolePlayerItemDefinition, ReturnValue) == 0x000008, "Member 'MolePlayerStateComponent_GetMolePlayerItemDefinition::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MolePlayerStateComponent.GetMoleRole
// 0x0010 (0x0010 - 0x0000)
struct MolePlayerStateComponent_GetMoleRole final
{
public:
	class AController*                            User;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMoleRole                                     ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MolePlayerStateComponent_GetMoleRole) == 0x000008, "Wrong alignment on MolePlayerStateComponent_GetMoleRole");
static_assert(sizeof(MolePlayerStateComponent_GetMoleRole) == 0x000010, "Wrong size on MolePlayerStateComponent_GetMoleRole");
static_assert(offsetof(MolePlayerStateComponent_GetMoleRole, User) == 0x000000, "Member 'MolePlayerStateComponent_GetMoleRole::User' has a wrong offset!");
static_assert(offsetof(MolePlayerStateComponent_GetMoleRole, ReturnValue) == 0x000008, "Member 'MolePlayerStateComponent_GetMoleRole::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MolePlayerStateComponent.IsMoleEliminated
// 0x0010 (0x0010 - 0x0000)
struct MolePlayerStateComponent_IsMoleEliminated final
{
public:
	const class APlayerState*                     PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MolePlayerStateComponent_IsMoleEliminated) == 0x000008, "Wrong alignment on MolePlayerStateComponent_IsMoleEliminated");
static_assert(sizeof(MolePlayerStateComponent_IsMoleEliminated) == 0x000010, "Wrong size on MolePlayerStateComponent_IsMoleEliminated");
static_assert(offsetof(MolePlayerStateComponent_IsMoleEliminated, PlayerState) == 0x000000, "Member 'MolePlayerStateComponent_IsMoleEliminated::PlayerState' has a wrong offset!");
static_assert(offsetof(MolePlayerStateComponent_IsMoleEliminated, ReturnValue) == 0x000008, "Member 'MolePlayerStateComponent_IsMoleEliminated::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MolePlayerStateComponent.IsMoleEnemy
// 0x0010 (0x0010 - 0x0000)
struct MolePlayerStateComponent_IsMoleEnemy final
{
public:
	const class AActor*                           InActor;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MolePlayerStateComponent_IsMoleEnemy) == 0x000008, "Wrong alignment on MolePlayerStateComponent_IsMoleEnemy");
static_assert(sizeof(MolePlayerStateComponent_IsMoleEnemy) == 0x000010, "Wrong size on MolePlayerStateComponent_IsMoleEnemy");
static_assert(offsetof(MolePlayerStateComponent_IsMoleEnemy, InActor) == 0x000000, "Member 'MolePlayerStateComponent_IsMoleEnemy::InActor' has a wrong offset!");
static_assert(offsetof(MolePlayerStateComponent_IsMoleEnemy, ReturnValue) == 0x000008, "Member 'MolePlayerStateComponent_IsMoleEnemy::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MolePlayerStateComponent.IsMoleEnemyFor
// 0x0018 (0x0018 - 0x0000)
struct MolePlayerStateComponent_IsMoleEnemyFor final
{
public:
	const class APlayerState*                     PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class APlayerState*                     TargetPlayerState;                                 // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MolePlayerStateComponent_IsMoleEnemyFor) == 0x000008, "Wrong alignment on MolePlayerStateComponent_IsMoleEnemyFor");
static_assert(sizeof(MolePlayerStateComponent_IsMoleEnemyFor) == 0x000018, "Wrong size on MolePlayerStateComponent_IsMoleEnemyFor");
static_assert(offsetof(MolePlayerStateComponent_IsMoleEnemyFor, PlayerState) == 0x000000, "Member 'MolePlayerStateComponent_IsMoleEnemyFor::PlayerState' has a wrong offset!");
static_assert(offsetof(MolePlayerStateComponent_IsMoleEnemyFor, TargetPlayerState) == 0x000008, "Member 'MolePlayerStateComponent_IsMoleEnemyFor::TargetPlayerState' has a wrong offset!");
static_assert(offsetof(MolePlayerStateComponent_IsMoleEnemyFor, ReturnValue) == 0x000010, "Member 'MolePlayerStateComponent_IsMoleEnemyFor::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MolePlayerStateComponent.IsMoleGhost
// 0x0010 (0x0010 - 0x0000)
struct MolePlayerStateComponent_IsMoleGhost final
{
public:
	const class APlayerState*                     PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MolePlayerStateComponent_IsMoleGhost) == 0x000008, "Wrong alignment on MolePlayerStateComponent_IsMoleGhost");
static_assert(sizeof(MolePlayerStateComponent_IsMoleGhost) == 0x000010, "Wrong size on MolePlayerStateComponent_IsMoleGhost");
static_assert(offsetof(MolePlayerStateComponent_IsMoleGhost, PlayerState) == 0x000000, "Member 'MolePlayerStateComponent_IsMoleGhost::PlayerState' has a wrong offset!");
static_assert(offsetof(MolePlayerStateComponent_IsMoleGhost, ReturnValue) == 0x000008, "Member 'MolePlayerStateComponent_IsMoleGhost::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MolePlayerStateComponent.IsMolePlayerDisconnected
// 0x0010 (0x0010 - 0x0000)
struct MolePlayerStateComponent_IsMolePlayerDisconnected final
{
public:
	const class APlayerState*                     PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MolePlayerStateComponent_IsMolePlayerDisconnected) == 0x000008, "Wrong alignment on MolePlayerStateComponent_IsMolePlayerDisconnected");
static_assert(sizeof(MolePlayerStateComponent_IsMolePlayerDisconnected) == 0x000010, "Wrong size on MolePlayerStateComponent_IsMolePlayerDisconnected");
static_assert(offsetof(MolePlayerStateComponent_IsMolePlayerDisconnected, PlayerState) == 0x000000, "Member 'MolePlayerStateComponent_IsMolePlayerDisconnected::PlayerState' has a wrong offset!");
static_assert(offsetof(MolePlayerStateComponent_IsMolePlayerDisconnected, ReturnValue) == 0x000008, "Member 'MolePlayerStateComponent_IsMolePlayerDisconnected::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MolePlayerStateComponent.SetMoleKiller
// 0x0010 (0x0010 - 0x0000)
struct MolePlayerStateComponent_SetMoleKiller final
{
public:
	class APlayerState*                           Victim;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           Killer;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MolePlayerStateComponent_SetMoleKiller) == 0x000008, "Wrong alignment on MolePlayerStateComponent_SetMoleKiller");
static_assert(sizeof(MolePlayerStateComponent_SetMoleKiller) == 0x000010, "Wrong size on MolePlayerStateComponent_SetMoleKiller");
static_assert(offsetof(MolePlayerStateComponent_SetMoleKiller, Victim) == 0x000000, "Member 'MolePlayerStateComponent_SetMoleKiller::Victim' has a wrong offset!");
static_assert(offsetof(MolePlayerStateComponent_SetMoleKiller, Killer) == 0x000008, "Member 'MolePlayerStateComponent_SetMoleKiller::Killer' has a wrong offset!");

// Function MoleGameRuntime.MolePlayerStateComponent.GetPlayerNumber
// 0x0004 (0x0004 - 0x0000)
struct MolePlayerStateComponent_GetPlayerNumber final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MolePlayerStateComponent_GetPlayerNumber) == 0x000004, "Wrong alignment on MolePlayerStateComponent_GetPlayerNumber");
static_assert(sizeof(MolePlayerStateComponent_GetPlayerNumber) == 0x000004, "Wrong size on MolePlayerStateComponent_GetPlayerNumber");
static_assert(offsetof(MolePlayerStateComponent_GetPlayerNumber, ReturnValue) == 0x000000, "Member 'MolePlayerStateComponent_GetPlayerNumber::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MolePlayerTaskManagementComponent.BlueprintServerTaskObjectInteractEvent
// 0x0050 (0x0050 - 0x0000)
struct MolePlayerTaskManagementComponent_BlueprintServerTaskObjectInteractEvent final
{
public:
	class AController*                            User;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEventMessageTag                       EventMessageTag;                                   // 0x0008(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTaskGenericPayload                    Payload;                                           // 0x0010(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MolePlayerTaskManagementComponent_BlueprintServerTaskObjectInteractEvent) == 0x000008, "Wrong alignment on MolePlayerTaskManagementComponent_BlueprintServerTaskObjectInteractEvent");
static_assert(sizeof(MolePlayerTaskManagementComponent_BlueprintServerTaskObjectInteractEvent) == 0x000050, "Wrong size on MolePlayerTaskManagementComponent_BlueprintServerTaskObjectInteractEvent");
static_assert(offsetof(MolePlayerTaskManagementComponent_BlueprintServerTaskObjectInteractEvent, User) == 0x000000, "Member 'MolePlayerTaskManagementComponent_BlueprintServerTaskObjectInteractEvent::User' has a wrong offset!");
static_assert(offsetof(MolePlayerTaskManagementComponent_BlueprintServerTaskObjectInteractEvent, EventMessageTag) == 0x000008, "Member 'MolePlayerTaskManagementComponent_BlueprintServerTaskObjectInteractEvent::EventMessageTag' has a wrong offset!");
static_assert(offsetof(MolePlayerTaskManagementComponent_BlueprintServerTaskObjectInteractEvent, Payload) == 0x000010, "Member 'MolePlayerTaskManagementComponent_BlueprintServerTaskObjectInteractEvent::Payload' has a wrong offset!");
static_assert(offsetof(MolePlayerTaskManagementComponent_BlueprintServerTaskObjectInteractEvent, ReturnValue) == 0x000048, "Member 'MolePlayerTaskManagementComponent_BlueprintServerTaskObjectInteractEvent::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MolePlayerTaskManagementComponent.CompleteTaskForGameplayState
// 0x0008 (0x0008 - 0x0000)
struct MolePlayerTaskManagementComponent_CompleteTaskForGameplayState final
{
public:
	class UGameplayState*                         State;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MolePlayerTaskManagementComponent_CompleteTaskForGameplayState) == 0x000008, "Wrong alignment on MolePlayerTaskManagementComponent_CompleteTaskForGameplayState");
static_assert(sizeof(MolePlayerTaskManagementComponent_CompleteTaskForGameplayState) == 0x000008, "Wrong size on MolePlayerTaskManagementComponent_CompleteTaskForGameplayState");
static_assert(offsetof(MolePlayerTaskManagementComponent_CompleteTaskForGameplayState, State) == 0x000000, "Member 'MolePlayerTaskManagementComponent_CompleteTaskForGameplayState::State' has a wrong offset!");

// Function MoleGameRuntime.MolePlayerTaskManagementComponent.ClientAdvanceLogicThroughPhases
// 0x0018 (0x0018 - 0x0000)
struct MolePlayerTaskManagementComponent_ClientAdvanceLogicThroughPhases final
{
public:
	class UMoleTaskLogic*                         Logic;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 AdvancedPhases;                                    // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MolePlayerTaskManagementComponent_ClientAdvanceLogicThroughPhases) == 0x000008, "Wrong alignment on MolePlayerTaskManagementComponent_ClientAdvanceLogicThroughPhases");
static_assert(sizeof(MolePlayerTaskManagementComponent_ClientAdvanceLogicThroughPhases) == 0x000018, "Wrong size on MolePlayerTaskManagementComponent_ClientAdvanceLogicThroughPhases");
static_assert(offsetof(MolePlayerTaskManagementComponent_ClientAdvanceLogicThroughPhases, Logic) == 0x000000, "Member 'MolePlayerTaskManagementComponent_ClientAdvanceLogicThroughPhases::Logic' has a wrong offset!");
static_assert(offsetof(MolePlayerTaskManagementComponent_ClientAdvanceLogicThroughPhases, AdvancedPhases) == 0x000008, "Member 'MolePlayerTaskManagementComponent_ClientAdvanceLogicThroughPhases::AdvancedPhases' has a wrong offset!");

// Function MoleGameRuntime.MolePlayerTaskManagementComponent.ClientAllTasksInterrupted
// 0x0001 (0x0001 - 0x0000)
struct MolePlayerTaskManagementComponent_ClientAllTasksInterrupted final
{
public:
	EMoleTaskInterruptionType                     InterruptionType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MolePlayerTaskManagementComponent_ClientAllTasksInterrupted) == 0x000001, "Wrong alignment on MolePlayerTaskManagementComponent_ClientAllTasksInterrupted");
static_assert(sizeof(MolePlayerTaskManagementComponent_ClientAllTasksInterrupted) == 0x000001, "Wrong size on MolePlayerTaskManagementComponent_ClientAllTasksInterrupted");
static_assert(offsetof(MolePlayerTaskManagementComponent_ClientAllTasksInterrupted, InterruptionType) == 0x000000, "Member 'MolePlayerTaskManagementComponent_ClientAllTasksInterrupted::InterruptionType' has a wrong offset!");

// Function MoleGameRuntime.MolePlayerTaskManagementComponent.ClientSetPrimaryActiveTask
// 0x0004 (0x0004 - 0x0000)
struct MolePlayerTaskManagementComponent_ClientSetPrimaryActiveTask final
{
public:
	struct FMoleActiveTaskStateHandle             NewPrimaryHandle;                                  // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MolePlayerTaskManagementComponent_ClientSetPrimaryActiveTask) == 0x000004, "Wrong alignment on MolePlayerTaskManagementComponent_ClientSetPrimaryActiveTask");
static_assert(sizeof(MolePlayerTaskManagementComponent_ClientSetPrimaryActiveTask) == 0x000004, "Wrong size on MolePlayerTaskManagementComponent_ClientSetPrimaryActiveTask");
static_assert(offsetof(MolePlayerTaskManagementComponent_ClientSetPrimaryActiveTask, NewPrimaryHandle) == 0x000000, "Member 'MolePlayerTaskManagementComponent_ClientSetPrimaryActiveTask::NewPrimaryHandle' has a wrong offset!");

// Function MoleGameRuntime.MolePlayerTaskManagementComponent.ClientTasksInterrupted
// 0x0018 (0x0018 - 0x0000)
struct MolePlayerTaskManagementComponent_ClientTasksInterrupted final
{
public:
	TArray<class UMoleTaskDataAsset*>             TasksInterrupted;                                  // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EMoleTaskInterruptionType                     InterruptionType;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MolePlayerTaskManagementComponent_ClientTasksInterrupted) == 0x000008, "Wrong alignment on MolePlayerTaskManagementComponent_ClientTasksInterrupted");
static_assert(sizeof(MolePlayerTaskManagementComponent_ClientTasksInterrupted) == 0x000018, "Wrong size on MolePlayerTaskManagementComponent_ClientTasksInterrupted");
static_assert(offsetof(MolePlayerTaskManagementComponent_ClientTasksInterrupted, TasksInterrupted) == 0x000000, "Member 'MolePlayerTaskManagementComponent_ClientTasksInterrupted::TasksInterrupted' has a wrong offset!");
static_assert(offsetof(MolePlayerTaskManagementComponent_ClientTasksInterrupted, InterruptionType) == 0x000010, "Member 'MolePlayerTaskManagementComponent_ClientTasksInterrupted::InterruptionType' has a wrong offset!");

// Function MoleGameRuntime.MolePlayerTaskManagementComponent.OnCompletedTaskAdded
// 0x0020 (0x0020 - 0x0000)
struct MolePlayerTaskManagementComponent_OnCompletedTaskAdded final
{
public:
	struct FMoleCompletedTask                     InAddedCompletedTask;                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MolePlayerTaskManagementComponent_OnCompletedTaskAdded) == 0x000008, "Wrong alignment on MolePlayerTaskManagementComponent_OnCompletedTaskAdded");
static_assert(sizeof(MolePlayerTaskManagementComponent_OnCompletedTaskAdded) == 0x000020, "Wrong size on MolePlayerTaskManagementComponent_OnCompletedTaskAdded");
static_assert(offsetof(MolePlayerTaskManagementComponent_OnCompletedTaskAdded, InAddedCompletedTask) == 0x000000, "Member 'MolePlayerTaskManagementComponent_OnCompletedTaskAdded::InAddedCompletedTask' has a wrong offset!");

// Function MoleGameRuntime.MolePlayerTaskManagementComponent.OnLeashActorEndOverlap
// 0x0010 (0x0010 - 0x0000)
struct MolePlayerTaskManagementComponent_OnLeashActorEndOverlap final
{
public:
	class AActor*                                 OriginatingActor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ActorEndingOverlap;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MolePlayerTaskManagementComponent_OnLeashActorEndOverlap) == 0x000008, "Wrong alignment on MolePlayerTaskManagementComponent_OnLeashActorEndOverlap");
static_assert(sizeof(MolePlayerTaskManagementComponent_OnLeashActorEndOverlap) == 0x000010, "Wrong size on MolePlayerTaskManagementComponent_OnLeashActorEndOverlap");
static_assert(offsetof(MolePlayerTaskManagementComponent_OnLeashActorEndOverlap, OriginatingActor) == 0x000000, "Member 'MolePlayerTaskManagementComponent_OnLeashActorEndOverlap::OriginatingActor' has a wrong offset!");
static_assert(offsetof(MolePlayerTaskManagementComponent_OnLeashActorEndOverlap, ActorEndingOverlap) == 0x000008, "Member 'MolePlayerTaskManagementComponent_OnLeashActorEndOverlap::ActorEndingOverlap' has a wrong offset!");

// Function MoleGameRuntime.MolePlayerTaskManagementComponent.ServerTaskObjectInteractEvent
// 0x0040 (0x0040 - 0x0000)
struct MolePlayerTaskManagementComponent_ServerTaskObjectInteractEvent final
{
public:
	struct FEventMessageTag                       EventMessageTag;                                   // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTaskGenericPayload                    Payload;                                           // 0x0008(0x0038)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MolePlayerTaskManagementComponent_ServerTaskObjectInteractEvent) == 0x000008, "Wrong alignment on MolePlayerTaskManagementComponent_ServerTaskObjectInteractEvent");
static_assert(sizeof(MolePlayerTaskManagementComponent_ServerTaskObjectInteractEvent) == 0x000040, "Wrong size on MolePlayerTaskManagementComponent_ServerTaskObjectInteractEvent");
static_assert(offsetof(MolePlayerTaskManagementComponent_ServerTaskObjectInteractEvent, EventMessageTag) == 0x000000, "Member 'MolePlayerTaskManagementComponent_ServerTaskObjectInteractEvent::EventMessageTag' has a wrong offset!");
static_assert(offsetof(MolePlayerTaskManagementComponent_ServerTaskObjectInteractEvent, Payload) == 0x000008, "Member 'MolePlayerTaskManagementComponent_ServerTaskObjectInteractEvent::Payload' has a wrong offset!");

// Function MoleGameRuntime.MolePlayerTaskManagementComponent.GetNumCompletedTasks
// 0x0004 (0x0004 - 0x0000)
struct MolePlayerTaskManagementComponent_GetNumCompletedTasks final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MolePlayerTaskManagementComponent_GetNumCompletedTasks) == 0x000004, "Wrong alignment on MolePlayerTaskManagementComponent_GetNumCompletedTasks");
static_assert(sizeof(MolePlayerTaskManagementComponent_GetNumCompletedTasks) == 0x000004, "Wrong size on MolePlayerTaskManagementComponent_GetNumCompletedTasks");
static_assert(offsetof(MolePlayerTaskManagementComponent_GetNumCompletedTasks, ReturnValue) == 0x000000, "Member 'MolePlayerTaskManagementComponent_GetNumCompletedTasks::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MoleQuickChatComponent.ServerSendMessage
// 0x0040 (0x0040 - 0x0000)
struct MoleQuickChatComponent_ServerSendMessage final
{
public:
	struct FMoleQuickChatMessageInfo              Message;                                           // 0x0000(0x0040)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleQuickChatComponent_ServerSendMessage) == 0x000008, "Wrong alignment on MoleQuickChatComponent_ServerSendMessage");
static_assert(sizeof(MoleQuickChatComponent_ServerSendMessage) == 0x000040, "Wrong size on MoleQuickChatComponent_ServerSendMessage");
static_assert(offsetof(MoleQuickChatComponent_ServerSendMessage, Message) == 0x000000, "Member 'MoleQuickChatComponent_ServerSendMessage::Message' has a wrong offset!");

// Function MoleGameRuntime.MoleSabotageAbility.RevertSabotageForPlayer
// 0x0008 (0x0008 - 0x0000)
struct MoleSabotageAbility_RevertSabotageForPlayer final
{
public:
	class APlayerState*                           Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleSabotageAbility_RevertSabotageForPlayer) == 0x000008, "Wrong alignment on MoleSabotageAbility_RevertSabotageForPlayer");
static_assert(sizeof(MoleSabotageAbility_RevertSabotageForPlayer) == 0x000008, "Wrong size on MoleSabotageAbility_RevertSabotageForPlayer");
static_assert(offsetof(MoleSabotageAbility_RevertSabotageForPlayer, Player) == 0x000000, "Member 'MoleSabotageAbility_RevertSabotageForPlayer::Player' has a wrong offset!");

// Function MoleGameRuntime.MoleSabotageAbility.GetAllSaboteurs
// 0x0010 (0x0010 - 0x0000)
struct MoleSabotageAbility_GetAllSaboteurs final
{
public:
	TArray<class APlayerState*>                   OutAllSaboteurs;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleSabotageAbility_GetAllSaboteurs) == 0x000008, "Wrong alignment on MoleSabotageAbility_GetAllSaboteurs");
static_assert(sizeof(MoleSabotageAbility_GetAllSaboteurs) == 0x000010, "Wrong size on MoleSabotageAbility_GetAllSaboteurs");
static_assert(offsetof(MoleSabotageAbility_GetAllSaboteurs, OutAllSaboteurs) == 0x000000, "Member 'MoleSabotageAbility_GetAllSaboteurs::OutAllSaboteurs' has a wrong offset!");

// Function MoleGameRuntime.MoleSabotageAbility.GetAllValidSabotageTargets
// 0x0010 (0x0010 - 0x0000)
struct MoleSabotageAbility_GetAllValidSabotageTargets final
{
public:
	TArray<class APlayerState*>                   OutValidTargets;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleSabotageAbility_GetAllValidSabotageTargets) == 0x000008, "Wrong alignment on MoleSabotageAbility_GetAllValidSabotageTargets");
static_assert(sizeof(MoleSabotageAbility_GetAllValidSabotageTargets) == 0x000010, "Wrong size on MoleSabotageAbility_GetAllValidSabotageTargets");
static_assert(offsetof(MoleSabotageAbility_GetAllValidSabotageTargets, OutValidTargets) == 0x000000, "Member 'MoleSabotageAbility_GetAllValidSabotageTargets::OutValidTargets' has a wrong offset!");

// Function MoleGameRuntime.MoleSabotageAbility.GetInterruptionType
// 0x0001 (0x0001 - 0x0000)
struct MoleSabotageAbility_GetInterruptionType final
{
public:
	EMoleSabotageInterruptionType                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleSabotageAbility_GetInterruptionType) == 0x000001, "Wrong alignment on MoleSabotageAbility_GetInterruptionType");
static_assert(sizeof(MoleSabotageAbility_GetInterruptionType) == 0x000001, "Wrong size on MoleSabotageAbility_GetInterruptionType");
static_assert(offsetof(MoleSabotageAbility_GetInterruptionType, ReturnValue) == 0x000000, "Member 'MoleSabotageAbility_GetInterruptionType::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MoleSabotageManagerComponent.SendMoleLightingModeChangeEvent
// 0x0010 (0x0010 - 0x0000)
struct MoleSabotageManagerComponent_SendMoleLightingModeChangeEvent final
{
public:
	const class UMoleSabotageAbility*             SabotageAbility;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMoleLightingMode                      LightingMode;                                      // 0x0008(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoleSabotageManagerComponent_SendMoleLightingModeChangeEvent) == 0x000008, "Wrong alignment on MoleSabotageManagerComponent_SendMoleLightingModeChangeEvent");
static_assert(sizeof(MoleSabotageManagerComponent_SendMoleLightingModeChangeEvent) == 0x000010, "Wrong size on MoleSabotageManagerComponent_SendMoleLightingModeChangeEvent");
static_assert(offsetof(MoleSabotageManagerComponent_SendMoleLightingModeChangeEvent, SabotageAbility) == 0x000000, "Member 'MoleSabotageManagerComponent_SendMoleLightingModeChangeEvent::SabotageAbility' has a wrong offset!");
static_assert(offsetof(MoleSabotageManagerComponent_SendMoleLightingModeChangeEvent, LightingMode) == 0x000008, "Member 'MoleSabotageManagerComponent_SendMoleLightingModeChangeEvent::LightingMode' has a wrong offset!");

// Function MoleGameRuntime.MoleSabotageManagerComponent.SendMoleSabotageTimerStartedEvent
// 0x0010 (0x0010 - 0x0000)
struct MoleSabotageManagerComponent_SendMoleSabotageTimerStartedEvent final
{
public:
	const class UMoleSabotageAbility*             SabotageAbility;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMoleTimerInfo                         TimerInfo;                                         // 0x0008(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoleSabotageManagerComponent_SendMoleSabotageTimerStartedEvent) == 0x000008, "Wrong alignment on MoleSabotageManagerComponent_SendMoleSabotageTimerStartedEvent");
static_assert(sizeof(MoleSabotageManagerComponent_SendMoleSabotageTimerStartedEvent) == 0x000010, "Wrong size on MoleSabotageManagerComponent_SendMoleSabotageTimerStartedEvent");
static_assert(offsetof(MoleSabotageManagerComponent_SendMoleSabotageTimerStartedEvent, SabotageAbility) == 0x000000, "Member 'MoleSabotageManagerComponent_SendMoleSabotageTimerStartedEvent::SabotageAbility' has a wrong offset!");
static_assert(offsetof(MoleSabotageManagerComponent_SendMoleSabotageTimerStartedEvent, TimerInfo) == 0x000008, "Member 'MoleSabotageManagerComponent_SendMoleSabotageTimerStartedEvent::TimerInfo' has a wrong offset!");

// Function MoleGameRuntime.MoleStateMachine.GetMoleRemainingSaboteurCount
// 0x0010 (0x0010 - 0x0000)
struct MoleStateMachine_GetMoleRemainingSaboteurCount final
{
public:
	class APlayerController*                      ContextPlayer;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoleStateMachine_GetMoleRemainingSaboteurCount) == 0x000008, "Wrong alignment on MoleStateMachine_GetMoleRemainingSaboteurCount");
static_assert(sizeof(MoleStateMachine_GetMoleRemainingSaboteurCount) == 0x000010, "Wrong size on MoleStateMachine_GetMoleRemainingSaboteurCount");
static_assert(offsetof(MoleStateMachine_GetMoleRemainingSaboteurCount, ContextPlayer) == 0x000000, "Member 'MoleStateMachine_GetMoleRemainingSaboteurCount::ContextPlayer' has a wrong offset!");
static_assert(offsetof(MoleStateMachine_GetMoleRemainingSaboteurCount, ReturnValue) == 0x000008, "Member 'MoleStateMachine_GetMoleRemainingSaboteurCount::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MoleStateMachine.GetMoleStartOfMatchPlayerCount
// 0x0010 (0x0010 - 0x0000)
struct MoleStateMachine_GetMoleStartOfMatchPlayerCount final
{
public:
	class APlayerController*                      ContextPlayer;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoleStateMachine_GetMoleStartOfMatchPlayerCount) == 0x000008, "Wrong alignment on MoleStateMachine_GetMoleStartOfMatchPlayerCount");
static_assert(sizeof(MoleStateMachine_GetMoleStartOfMatchPlayerCount) == 0x000010, "Wrong size on MoleStateMachine_GetMoleStartOfMatchPlayerCount");
static_assert(offsetof(MoleStateMachine_GetMoleStartOfMatchPlayerCount, ContextPlayer) == 0x000000, "Member 'MoleStateMachine_GetMoleStartOfMatchPlayerCount::ContextPlayer' has a wrong offset!");
static_assert(offsetof(MoleStateMachine_GetMoleStartOfMatchPlayerCount, ReturnValue) == 0x000008, "Member 'MoleStateMachine_GetMoleStartOfMatchPlayerCount::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MoleStateMachine.GetMoleStartOfMatchPlayerCountForPlayspace
// 0x0010 (0x0010 - 0x0000)
struct MoleStateMachine_GetMoleStartOfMatchPlayerCountForPlayspace final
{
public:
	class AMoleGamePlayspace*                     PlayspaceContext;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoleStateMachine_GetMoleStartOfMatchPlayerCountForPlayspace) == 0x000008, "Wrong alignment on MoleStateMachine_GetMoleStartOfMatchPlayerCountForPlayspace");
static_assert(sizeof(MoleStateMachine_GetMoleStartOfMatchPlayerCountForPlayspace) == 0x000010, "Wrong size on MoleStateMachine_GetMoleStartOfMatchPlayerCountForPlayspace");
static_assert(offsetof(MoleStateMachine_GetMoleStartOfMatchPlayerCountForPlayspace, PlayspaceContext) == 0x000000, "Member 'MoleStateMachine_GetMoleStartOfMatchPlayerCountForPlayspace::PlayspaceContext' has a wrong offset!");
static_assert(offsetof(MoleStateMachine_GetMoleStartOfMatchPlayerCountForPlayspace, ReturnValue) == 0x000008, "Member 'MoleStateMachine_GetMoleStartOfMatchPlayerCountForPlayspace::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MoleState_Gameplay.GetAllMoleFreshlyKilledGhosts
// 0x0018 (0x0018 - 0x0000)
struct MoleState_Gameplay_GetAllMoleFreshlyKilledGhosts final
{
public:
	class APlayerController*                      PlayerContext;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class APlayerState*>                   OutFreshlyKilledGhosts;                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleState_Gameplay_GetAllMoleFreshlyKilledGhosts) == 0x000008, "Wrong alignment on MoleState_Gameplay_GetAllMoleFreshlyKilledGhosts");
static_assert(sizeof(MoleState_Gameplay_GetAllMoleFreshlyKilledGhosts) == 0x000018, "Wrong size on MoleState_Gameplay_GetAllMoleFreshlyKilledGhosts");
static_assert(offsetof(MoleState_Gameplay_GetAllMoleFreshlyKilledGhosts, PlayerContext) == 0x000000, "Member 'MoleState_Gameplay_GetAllMoleFreshlyKilledGhosts::PlayerContext' has a wrong offset!");
static_assert(offsetof(MoleState_Gameplay_GetAllMoleFreshlyKilledGhosts, OutFreshlyKilledGhosts) == 0x000008, "Member 'MoleState_Gameplay_GetAllMoleFreshlyKilledGhosts::OutFreshlyKilledGhosts' has a wrong offset!");

// Function MoleGameRuntime.MoleState_Gameplay.RequestEmergencyMeeting
// 0x0030 (0x0030 - 0x0000)
struct MoleState_Gameplay_RequestEmergencyMeeting final
{
public:
	class AActor*                                 ActorContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMoleEmergencyMeetingData              MeetingData;                                       // 0x0008(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoleState_Gameplay_RequestEmergencyMeeting) == 0x000008, "Wrong alignment on MoleState_Gameplay_RequestEmergencyMeeting");
static_assert(sizeof(MoleState_Gameplay_RequestEmergencyMeeting) == 0x000030, "Wrong size on MoleState_Gameplay_RequestEmergencyMeeting");
static_assert(offsetof(MoleState_Gameplay_RequestEmergencyMeeting, ActorContext) == 0x000000, "Member 'MoleState_Gameplay_RequestEmergencyMeeting::ActorContext' has a wrong offset!");
static_assert(offsetof(MoleState_Gameplay_RequestEmergencyMeeting, MeetingData) == 0x000008, "Member 'MoleState_Gameplay_RequestEmergencyMeeting::MeetingData' has a wrong offset!");
static_assert(offsetof(MoleState_Gameplay_RequestEmergencyMeeting, ReturnValue) == 0x000028, "Member 'MoleState_Gameplay_RequestEmergencyMeeting::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MoleState_Gameplay.HandlePlayerStateDied
// 0x0008 (0x0008 - 0x0000)
struct MoleState_Gameplay_HandlePlayerStateDied final
{
public:
	class APlayerState*                           GhostPlayerState;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleState_Gameplay_HandlePlayerStateDied) == 0x000008, "Wrong alignment on MoleState_Gameplay_HandlePlayerStateDied");
static_assert(sizeof(MoleState_Gameplay_HandlePlayerStateDied) == 0x000008, "Wrong size on MoleState_Gameplay_HandlePlayerStateDied");
static_assert(offsetof(MoleState_Gameplay_HandlePlayerStateDied, GhostPlayerState) == 0x000000, "Member 'MoleState_Gameplay_HandlePlayerStateDied::GhostPlayerState' has a wrong offset!");

// Function MoleGameRuntime.MoleState_Gameplay.HandleScoreChanged
// 0x000C (0x000C - 0x0000)
struct MoleState_Gameplay_HandleScoreChanged final
{
public:
	struct FEventMessageTag                       EventChannel;                                      // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMoleTaskScoreEventData                ScoreEventData;                                    // 0x0004(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleState_Gameplay_HandleScoreChanged) == 0x000004, "Wrong alignment on MoleState_Gameplay_HandleScoreChanged");
static_assert(sizeof(MoleState_Gameplay_HandleScoreChanged) == 0x00000C, "Wrong size on MoleState_Gameplay_HandleScoreChanged");
static_assert(offsetof(MoleState_Gameplay_HandleScoreChanged, EventChannel) == 0x000000, "Member 'MoleState_Gameplay_HandleScoreChanged::EventChannel' has a wrong offset!");
static_assert(offsetof(MoleState_Gameplay_HandleScoreChanged, ScoreEventData) == 0x000004, "Member 'MoleState_Gameplay_HandleScoreChanged::ScoreEventData' has a wrong offset!");

// Function MoleGameRuntime.MoleSupplyDropSabotageAbility.HandleFixPointInteracted
// 0x0018 (0x0018 - 0x0000)
struct MoleSupplyDropSabotageAbility_HandleFixPointInteracted final
{
public:
	class UMoleTaskLinkComponent*                 TaskLinkComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AFortPawn*                        InteractingPawn;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInteractionBeingAttempted                    InteractionType;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoleSupplyDropSabotageAbility_HandleFixPointInteracted) == 0x000008, "Wrong alignment on MoleSupplyDropSabotageAbility_HandleFixPointInteracted");
static_assert(sizeof(MoleSupplyDropSabotageAbility_HandleFixPointInteracted) == 0x000018, "Wrong size on MoleSupplyDropSabotageAbility_HandleFixPointInteracted");
static_assert(offsetof(MoleSupplyDropSabotageAbility_HandleFixPointInteracted, TaskLinkComponent) == 0x000000, "Member 'MoleSupplyDropSabotageAbility_HandleFixPointInteracted::TaskLinkComponent' has a wrong offset!");
static_assert(offsetof(MoleSupplyDropSabotageAbility_HandleFixPointInteracted, InteractingPawn) == 0x000008, "Member 'MoleSupplyDropSabotageAbility_HandleFixPointInteracted::InteractingPawn' has a wrong offset!");
static_assert(offsetof(MoleSupplyDropSabotageAbility_HandleFixPointInteracted, InteractionType) == 0x000010, "Member 'MoleSupplyDropSabotageAbility_HandleFixPointInteracted::InteractionType' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskLinkComponent.GetTaskComponent
// 0x0010 (0x0010 - 0x0000)
struct MoleTaskLinkComponent_GetTaskComponent final
{
public:
	class AActor*                                 TaskActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMoleTaskLinkComponent*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskLinkComponent_GetTaskComponent) == 0x000008, "Wrong alignment on MoleTaskLinkComponent_GetTaskComponent");
static_assert(sizeof(MoleTaskLinkComponent_GetTaskComponent) == 0x000010, "Wrong size on MoleTaskLinkComponent_GetTaskComponent");
static_assert(offsetof(MoleTaskLinkComponent_GetTaskComponent, TaskActor) == 0x000000, "Member 'MoleTaskLinkComponent_GetTaskComponent::TaskActor' has a wrong offset!");
static_assert(offsetof(MoleTaskLinkComponent_GetTaskComponent, ReturnValue) == 0x000008, "Member 'MoleTaskLinkComponent_GetTaskComponent::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskLinkComponent.AddPlayerInteractionData
// 0x0010 (0x0010 - 0x0000)
struct MoleTaskLinkComponent_AddPlayerInteractionData final
{
public:
	class AController*                            User;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InteractionInfoRowName;                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGivePermission;                                   // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoleTaskLinkComponent_AddPlayerInteractionData) == 0x000008, "Wrong alignment on MoleTaskLinkComponent_AddPlayerInteractionData");
static_assert(sizeof(MoleTaskLinkComponent_AddPlayerInteractionData) == 0x000010, "Wrong size on MoleTaskLinkComponent_AddPlayerInteractionData");
static_assert(offsetof(MoleTaskLinkComponent_AddPlayerInteractionData, User) == 0x000000, "Member 'MoleTaskLinkComponent_AddPlayerInteractionData::User' has a wrong offset!");
static_assert(offsetof(MoleTaskLinkComponent_AddPlayerInteractionData, InteractionInfoRowName) == 0x000008, "Member 'MoleTaskLinkComponent_AddPlayerInteractionData::InteractionInfoRowName' has a wrong offset!");
static_assert(offsetof(MoleTaskLinkComponent_AddPlayerInteractionData, bGivePermission) == 0x00000C, "Member 'MoleTaskLinkComponent_AddPlayerInteractionData::bGivePermission' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskLinkComponent.CanInteract
// 0x0010 (0x0010 - 0x0000)
struct MoleTaskLinkComponent_CanInteract final
{
public:
	const class AFortPawn*                        InteractingPawn;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInteractionBeingAttempted                    InteractionBeingAttempted;                         // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETInteractionType                             InteractionType;                                   // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoleTaskLinkComponent_CanInteract) == 0x000008, "Wrong alignment on MoleTaskLinkComponent_CanInteract");
static_assert(sizeof(MoleTaskLinkComponent_CanInteract) == 0x000010, "Wrong size on MoleTaskLinkComponent_CanInteract");
static_assert(offsetof(MoleTaskLinkComponent_CanInteract, InteractingPawn) == 0x000000, "Member 'MoleTaskLinkComponent_CanInteract::InteractingPawn' has a wrong offset!");
static_assert(offsetof(MoleTaskLinkComponent_CanInteract, InteractionBeingAttempted) == 0x000008, "Member 'MoleTaskLinkComponent_CanInteract::InteractionBeingAttempted' has a wrong offset!");
static_assert(offsetof(MoleTaskLinkComponent_CanInteract, InteractionType) == 0x000009, "Member 'MoleTaskLinkComponent_CanInteract::InteractionType' has a wrong offset!");
static_assert(offsetof(MoleTaskLinkComponent_CanInteract, ReturnValue) == 0x00000A, "Member 'MoleTaskLinkComponent_CanInteract::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskLinkComponent.GivePlayerPermission
// 0x0008 (0x0008 - 0x0000)
struct MoleTaskLinkComponent_GivePlayerPermission final
{
public:
	class AController*                            User;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskLinkComponent_GivePlayerPermission) == 0x000008, "Wrong alignment on MoleTaskLinkComponent_GivePlayerPermission");
static_assert(sizeof(MoleTaskLinkComponent_GivePlayerPermission) == 0x000008, "Wrong size on MoleTaskLinkComponent_GivePlayerPermission");
static_assert(offsetof(MoleTaskLinkComponent_GivePlayerPermission, User) == 0x000000, "Member 'MoleTaskLinkComponent_GivePlayerPermission::User' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskLinkComponent.OnOwnerActorInteract
// 0x0010 (0x0010 - 0x0000)
struct MoleTaskLinkComponent_OnOwnerActorInteract final
{
public:
	const class AFortPawn*                        InteractingPawn;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInteractionBeingAttempted                    Interaction;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoleTaskLinkComponent_OnOwnerActorInteract) == 0x000008, "Wrong alignment on MoleTaskLinkComponent_OnOwnerActorInteract");
static_assert(sizeof(MoleTaskLinkComponent_OnOwnerActorInteract) == 0x000010, "Wrong size on MoleTaskLinkComponent_OnOwnerActorInteract");
static_assert(offsetof(MoleTaskLinkComponent_OnOwnerActorInteract, InteractingPawn) == 0x000000, "Member 'MoleTaskLinkComponent_OnOwnerActorInteract::InteractingPawn' has a wrong offset!");
static_assert(offsetof(MoleTaskLinkComponent_OnOwnerActorInteract, Interaction) == 0x000008, "Member 'MoleTaskLinkComponent_OnOwnerActorInteract::Interaction' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskLinkComponent.RemovePlayerInteractionData
// 0x0010 (0x0010 - 0x0000)
struct MoleTaskLinkComponent_RemovePlayerInteractionData final
{
public:
	class AController*                            User;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlsoRemovePermission;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoleTaskLinkComponent_RemovePlayerInteractionData) == 0x000008, "Wrong alignment on MoleTaskLinkComponent_RemovePlayerInteractionData");
static_assert(sizeof(MoleTaskLinkComponent_RemovePlayerInteractionData) == 0x000010, "Wrong size on MoleTaskLinkComponent_RemovePlayerInteractionData");
static_assert(offsetof(MoleTaskLinkComponent_RemovePlayerInteractionData, User) == 0x000000, "Member 'MoleTaskLinkComponent_RemovePlayerInteractionData::User' has a wrong offset!");
static_assert(offsetof(MoleTaskLinkComponent_RemovePlayerInteractionData, bAlsoRemovePermission) == 0x000008, "Member 'MoleTaskLinkComponent_RemovePlayerInteractionData::bAlsoRemovePermission' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskLinkComponent.RemovePlayerPermission
// 0x0008 (0x0008 - 0x0000)
struct MoleTaskLinkComponent_RemovePlayerPermission final
{
public:
	class AController*                            User;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskLinkComponent_RemovePlayerPermission) == 0x000008, "Wrong alignment on MoleTaskLinkComponent_RemovePlayerPermission");
static_assert(sizeof(MoleTaskLinkComponent_RemovePlayerPermission) == 0x000008, "Wrong size on MoleTaskLinkComponent_RemovePlayerPermission");
static_assert(offsetof(MoleTaskLinkComponent_RemovePlayerPermission, User) == 0x000000, "Member 'MoleTaskLinkComponent_RemovePlayerPermission::User' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskLinkComponent.SendGenericObjectiveStatUpdate
// 0x0010 (0x0010 - 0x0000)
struct MoleTaskLinkComponent_SendGenericObjectiveStatUpdate final
{
public:
	class AController*                            User;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ObjectiveStatTag;                                  // 0x0008(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ObjectiveStatDelta;                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskLinkComponent_SendGenericObjectiveStatUpdate) == 0x000008, "Wrong alignment on MoleTaskLinkComponent_SendGenericObjectiveStatUpdate");
static_assert(sizeof(MoleTaskLinkComponent_SendGenericObjectiveStatUpdate) == 0x000010, "Wrong size on MoleTaskLinkComponent_SendGenericObjectiveStatUpdate");
static_assert(offsetof(MoleTaskLinkComponent_SendGenericObjectiveStatUpdate, User) == 0x000000, "Member 'MoleTaskLinkComponent_SendGenericObjectiveStatUpdate::User' has a wrong offset!");
static_assert(offsetof(MoleTaskLinkComponent_SendGenericObjectiveStatUpdate, ObjectiveStatTag) == 0x000008, "Member 'MoleTaskLinkComponent_SendGenericObjectiveStatUpdate::ObjectiveStatTag' has a wrong offset!");
static_assert(offsetof(MoleTaskLinkComponent_SendGenericObjectiveStatUpdate, ObjectiveStatDelta) == 0x00000C, "Member 'MoleTaskLinkComponent_SendGenericObjectiveStatUpdate::ObjectiveStatDelta' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskLinkComponent.UpdatePlayerInteractionData
// 0x0010 (0x0010 - 0x0000)
struct MoleTaskLinkComponent_UpdatePlayerInteractionData final
{
public:
	class AController*                            User;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InteractionInfoRowName;                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoleTaskLinkComponent_UpdatePlayerInteractionData) == 0x000008, "Wrong alignment on MoleTaskLinkComponent_UpdatePlayerInteractionData");
static_assert(sizeof(MoleTaskLinkComponent_UpdatePlayerInteractionData) == 0x000010, "Wrong size on MoleTaskLinkComponent_UpdatePlayerInteractionData");
static_assert(offsetof(MoleTaskLinkComponent_UpdatePlayerInteractionData, User) == 0x000000, "Member 'MoleTaskLinkComponent_UpdatePlayerInteractionData::User' has a wrong offset!");
static_assert(offsetof(MoleTaskLinkComponent_UpdatePlayerInteractionData, InteractionInfoRowName) == 0x000008, "Member 'MoleTaskLinkComponent_UpdatePlayerInteractionData::InteractionInfoRowName' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskLinkComponent.GetInteractionString
// 0x0028 (0x0028 - 0x0000)
struct MoleTaskLinkComponent_GetInteractionString final
{
public:
	const class AFortPawn*                        InteractingPawn;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInteractionBeingAttempted                    InteractionBeingAttempted;                         // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskLinkComponent_GetInteractionString) == 0x000008, "Wrong alignment on MoleTaskLinkComponent_GetInteractionString");
static_assert(sizeof(MoleTaskLinkComponent_GetInteractionString) == 0x000028, "Wrong size on MoleTaskLinkComponent_GetInteractionString");
static_assert(offsetof(MoleTaskLinkComponent_GetInteractionString, InteractingPawn) == 0x000000, "Member 'MoleTaskLinkComponent_GetInteractionString::InteractingPawn' has a wrong offset!");
static_assert(offsetof(MoleTaskLinkComponent_GetInteractionString, InteractionBeingAttempted) == 0x000008, "Member 'MoleTaskLinkComponent_GetInteractionString::InteractionBeingAttempted' has a wrong offset!");
static_assert(offsetof(MoleTaskLinkComponent_GetInteractionString, ReturnValue) == 0x000010, "Member 'MoleTaskLinkComponent_GetInteractionString::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskLinkComponent.GetInteractionTime
// 0x0010 (0x0010 - 0x0000)
struct MoleTaskLinkComponent_GetInteractionTime final
{
public:
	const class AFortPawn*                        InteractingPawn;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInteractionBeingAttempted                    InteractionBeingAttempted;                         // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskLinkComponent_GetInteractionTime) == 0x000008, "Wrong alignment on MoleTaskLinkComponent_GetInteractionTime");
static_assert(sizeof(MoleTaskLinkComponent_GetInteractionTime) == 0x000010, "Wrong size on MoleTaskLinkComponent_GetInteractionTime");
static_assert(offsetof(MoleTaskLinkComponent_GetInteractionTime, InteractingPawn) == 0x000000, "Member 'MoleTaskLinkComponent_GetInteractionTime::InteractingPawn' has a wrong offset!");
static_assert(offsetof(MoleTaskLinkComponent_GetInteractionTime, InteractionBeingAttempted) == 0x000008, "Member 'MoleTaskLinkComponent_GetInteractionTime::InteractionBeingAttempted' has a wrong offset!");
static_assert(offsetof(MoleTaskLinkComponent_GetInteractionTime, ReturnValue) == 0x00000C, "Member 'MoleTaskLinkComponent_GetInteractionTime::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskLinkComponent.GetTaskTag
// 0x0004 (0x0004 - 0x0000)
struct MoleTaskLinkComponent_GetTaskTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskLinkComponent_GetTaskTag) == 0x000004, "Wrong alignment on MoleTaskLinkComponent_GetTaskTag");
static_assert(sizeof(MoleTaskLinkComponent_GetTaskTag) == 0x000004, "Wrong size on MoleTaskLinkComponent_GetTaskTag");
static_assert(offsetof(MoleTaskLinkComponent_GetTaskTag, ReturnValue) == 0x000000, "Member 'MoleTaskLinkComponent_GetTaskTag::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskLinkComponent.HasPlayerPermission
// 0x0010 (0x0010 - 0x0000)
struct MoleTaskLinkComponent_HasPlayerPermission final
{
public:
	class AController*                            User;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoleTaskLinkComponent_HasPlayerPermission) == 0x000008, "Wrong alignment on MoleTaskLinkComponent_HasPlayerPermission");
static_assert(sizeof(MoleTaskLinkComponent_HasPlayerPermission) == 0x000010, "Wrong size on MoleTaskLinkComponent_HasPlayerPermission");
static_assert(offsetof(MoleTaskLinkComponent_HasPlayerPermission, User) == 0x000000, "Member 'MoleTaskLinkComponent_HasPlayerPermission::User' has a wrong offset!");
static_assert(offsetof(MoleTaskLinkComponent_HasPlayerPermission, ReturnValue) == 0x000008, "Member 'MoleTaskLinkComponent_HasPlayerPermission::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskLinkComponent.IsTaskLinkDisabled
// 0x0001 (0x0001 - 0x0000)
struct MoleTaskLinkComponent_IsTaskLinkDisabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskLinkComponent_IsTaskLinkDisabled) == 0x000001, "Wrong alignment on MoleTaskLinkComponent_IsTaskLinkDisabled");
static_assert(sizeof(MoleTaskLinkComponent_IsTaskLinkDisabled) == 0x000001, "Wrong size on MoleTaskLinkComponent_IsTaskLinkDisabled");
static_assert(offsetof(MoleTaskLinkComponent_IsTaskLinkDisabled, ReturnValue) == 0x000000, "Member 'MoleTaskLinkComponent_IsTaskLinkDisabled::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskLogicObjective_GenericStat.OnTaskLinkComponentGenericStatChanged
// 0x0018 (0x0018 - 0x0000)
struct MoleTaskLogicObjective_GenericStat_OnTaskLinkComponentGenericStatChanged final
{
public:
	class UMoleTaskLinkComponent*                 InTaskLinkComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InUser;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InObjectiveStatTag;                                // 0x0010(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InObjectiveStatDelta;                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskLogicObjective_GenericStat_OnTaskLinkComponentGenericStatChanged) == 0x000008, "Wrong alignment on MoleTaskLogicObjective_GenericStat_OnTaskLinkComponentGenericStatChanged");
static_assert(sizeof(MoleTaskLogicObjective_GenericStat_OnTaskLinkComponentGenericStatChanged) == 0x000018, "Wrong size on MoleTaskLogicObjective_GenericStat_OnTaskLinkComponentGenericStatChanged");
static_assert(offsetof(MoleTaskLogicObjective_GenericStat_OnTaskLinkComponentGenericStatChanged, InTaskLinkComponent) == 0x000000, "Member 'MoleTaskLogicObjective_GenericStat_OnTaskLinkComponentGenericStatChanged::InTaskLinkComponent' has a wrong offset!");
static_assert(offsetof(MoleTaskLogicObjective_GenericStat_OnTaskLinkComponentGenericStatChanged, InUser) == 0x000008, "Member 'MoleTaskLogicObjective_GenericStat_OnTaskLinkComponentGenericStatChanged::InUser' has a wrong offset!");
static_assert(offsetof(MoleTaskLogicObjective_GenericStat_OnTaskLinkComponentGenericStatChanged, InObjectiveStatTag) == 0x000010, "Member 'MoleTaskLogicObjective_GenericStat_OnTaskLinkComponentGenericStatChanged::InObjectiveStatTag' has a wrong offset!");
static_assert(offsetof(MoleTaskLogicObjective_GenericStat_OnTaskLinkComponentGenericStatChanged, InObjectiveStatDelta) == 0x000014, "Member 'MoleTaskLogicObjective_GenericStat_OnTaskLinkComponentGenericStatChanged::InObjectiveStatDelta' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskLogicObjective_Interact.OnTaskLinkComponentInteract
// 0x0018 (0x0018 - 0x0000)
struct MoleTaskLogicObjective_Interact_OnTaskLinkComponentInteract final
{
public:
	class UMoleTaskLinkComponent*                 TaskLinkComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AFortPawn*                        InteractingPawn;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInteractionBeingAttempted                    InteractionType;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoleTaskLogicObjective_Interact_OnTaskLinkComponentInteract) == 0x000008, "Wrong alignment on MoleTaskLogicObjective_Interact_OnTaskLinkComponentInteract");
static_assert(sizeof(MoleTaskLogicObjective_Interact_OnTaskLinkComponentInteract) == 0x000018, "Wrong size on MoleTaskLogicObjective_Interact_OnTaskLinkComponentInteract");
static_assert(offsetof(MoleTaskLogicObjective_Interact_OnTaskLinkComponentInteract, TaskLinkComponent) == 0x000000, "Member 'MoleTaskLogicObjective_Interact_OnTaskLinkComponentInteract::TaskLinkComponent' has a wrong offset!");
static_assert(offsetof(MoleTaskLogicObjective_Interact_OnTaskLinkComponentInteract, InteractingPawn) == 0x000008, "Member 'MoleTaskLogicObjective_Interact_OnTaskLinkComponentInteract::InteractingPawn' has a wrong offset!");
static_assert(offsetof(MoleTaskLogicObjective_Interact_OnTaskLinkComponentInteract, InteractionType) == 0x000010, "Member 'MoleTaskLogicObjective_Interact_OnTaskLinkComponentInteract::InteractionType' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskManagerComponent.GetMoleCurrentScore
// 0x0010 (0x0010 - 0x0000)
struct MoleTaskManagerComponent_GetMoleCurrentScore final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoleTaskManagerComponent_GetMoleCurrentScore) == 0x000008, "Wrong alignment on MoleTaskManagerComponent_GetMoleCurrentScore");
static_assert(sizeof(MoleTaskManagerComponent_GetMoleCurrentScore) == 0x000010, "Wrong size on MoleTaskManagerComponent_GetMoleCurrentScore");
static_assert(offsetof(MoleTaskManagerComponent_GetMoleCurrentScore, WorldContextObject) == 0x000000, "Member 'MoleTaskManagerComponent_GetMoleCurrentScore::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MoleTaskManagerComponent_GetMoleCurrentScore, ReturnValue) == 0x000008, "Member 'MoleTaskManagerComponent_GetMoleCurrentScore::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskManagerComponent.GetMoleScoreGoal
// 0x0010 (0x0010 - 0x0000)
struct MoleTaskManagerComponent_GetMoleScoreGoal final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoleTaskManagerComponent_GetMoleScoreGoal) == 0x000008, "Wrong alignment on MoleTaskManagerComponent_GetMoleScoreGoal");
static_assert(sizeof(MoleTaskManagerComponent_GetMoleScoreGoal) == 0x000010, "Wrong size on MoleTaskManagerComponent_GetMoleScoreGoal");
static_assert(offsetof(MoleTaskManagerComponent_GetMoleScoreGoal, WorldContextObject) == 0x000000, "Member 'MoleTaskManagerComponent_GetMoleScoreGoal::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MoleTaskManagerComponent_GetMoleScoreGoal, ReturnValue) == 0x000008, "Member 'MoleTaskManagerComponent_GetMoleScoreGoal::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskManagerComponent.GetTaskActorComponentForGameplayTag
// 0x0018 (0x0018 - 0x0000)
struct MoleTaskManagerComponent_GetTaskActorComponentForGameplayTag final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TaskTag;                                           // 0x0008(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMoleTaskLinkComponent*                 ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskManagerComponent_GetTaskActorComponentForGameplayTag) == 0x000008, "Wrong alignment on MoleTaskManagerComponent_GetTaskActorComponentForGameplayTag");
static_assert(sizeof(MoleTaskManagerComponent_GetTaskActorComponentForGameplayTag) == 0x000018, "Wrong size on MoleTaskManagerComponent_GetTaskActorComponentForGameplayTag");
static_assert(offsetof(MoleTaskManagerComponent_GetTaskActorComponentForGameplayTag, WorldContextObject) == 0x000000, "Member 'MoleTaskManagerComponent_GetTaskActorComponentForGameplayTag::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MoleTaskManagerComponent_GetTaskActorComponentForGameplayTag, TaskTag) == 0x000008, "Member 'MoleTaskManagerComponent_GetTaskActorComponentForGameplayTag::TaskTag' has a wrong offset!");
static_assert(offsetof(MoleTaskManagerComponent_GetTaskActorComponentForGameplayTag, ReturnValue) == 0x000010, "Member 'MoleTaskManagerComponent_GetTaskActorComponentForGameplayTag::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskManagerComponent.GetTaskActorComponentsMatchingGameplayTag
// 0x0020 (0x0020 - 0x0000)
struct MoleTaskManagerComponent_GetTaskActorComponentsMatchingGameplayTag final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TaskRootTag;                                       // 0x0008(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMoleTaskLinkComponent*>         ReturnValue;                                       // 0x0010(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskManagerComponent_GetTaskActorComponentsMatchingGameplayTag) == 0x000008, "Wrong alignment on MoleTaskManagerComponent_GetTaskActorComponentsMatchingGameplayTag");
static_assert(sizeof(MoleTaskManagerComponent_GetTaskActorComponentsMatchingGameplayTag) == 0x000020, "Wrong size on MoleTaskManagerComponent_GetTaskActorComponentsMatchingGameplayTag");
static_assert(offsetof(MoleTaskManagerComponent_GetTaskActorComponentsMatchingGameplayTag, WorldContextObject) == 0x000000, "Member 'MoleTaskManagerComponent_GetTaskActorComponentsMatchingGameplayTag::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MoleTaskManagerComponent_GetTaskActorComponentsMatchingGameplayTag, TaskRootTag) == 0x000008, "Member 'MoleTaskManagerComponent_GetTaskActorComponentsMatchingGameplayTag::TaskRootTag' has a wrong offset!");
static_assert(offsetof(MoleTaskManagerComponent_GetTaskActorComponentsMatchingGameplayTag, ReturnValue) == 0x000010, "Member 'MoleTaskManagerComponent_GetTaskActorComponentsMatchingGameplayTag::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskManagerComponent.GetTaskActorComponentsMatchingGameplayTagContainer
// 0x0038 (0x0038 - 0x0000)
struct MoleTaskManagerComponent_GetTaskActorComponentsMatchingGameplayTagContainer final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TaskTagContainer;                                  // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
	TArray<class UMoleTaskLinkComponent*>         ReturnValue;                                       // 0x0028(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskManagerComponent_GetTaskActorComponentsMatchingGameplayTagContainer) == 0x000008, "Wrong alignment on MoleTaskManagerComponent_GetTaskActorComponentsMatchingGameplayTagContainer");
static_assert(sizeof(MoleTaskManagerComponent_GetTaskActorComponentsMatchingGameplayTagContainer) == 0x000038, "Wrong size on MoleTaskManagerComponent_GetTaskActorComponentsMatchingGameplayTagContainer");
static_assert(offsetof(MoleTaskManagerComponent_GetTaskActorComponentsMatchingGameplayTagContainer, WorldContextObject) == 0x000000, "Member 'MoleTaskManagerComponent_GetTaskActorComponentsMatchingGameplayTagContainer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MoleTaskManagerComponent_GetTaskActorComponentsMatchingGameplayTagContainer, TaskTagContainer) == 0x000008, "Member 'MoleTaskManagerComponent_GetTaskActorComponentsMatchingGameplayTagContainer::TaskTagContainer' has a wrong offset!");
static_assert(offsetof(MoleTaskManagerComponent_GetTaskActorComponentsMatchingGameplayTagContainer, ReturnValue) == 0x000028, "Member 'MoleTaskManagerComponent_GetTaskActorComponentsMatchingGameplayTagContainer::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskManagerComponent.GetTaskActorForGameplayTag
// 0x0018 (0x0018 - 0x0000)
struct MoleTaskManagerComponent_GetTaskActorForGameplayTag final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TaskTag;                                           // 0x0008(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskManagerComponent_GetTaskActorForGameplayTag) == 0x000008, "Wrong alignment on MoleTaskManagerComponent_GetTaskActorForGameplayTag");
static_assert(sizeof(MoleTaskManagerComponent_GetTaskActorForGameplayTag) == 0x000018, "Wrong size on MoleTaskManagerComponent_GetTaskActorForGameplayTag");
static_assert(offsetof(MoleTaskManagerComponent_GetTaskActorForGameplayTag, WorldContextObject) == 0x000000, "Member 'MoleTaskManagerComponent_GetTaskActorForGameplayTag::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MoleTaskManagerComponent_GetTaskActorForGameplayTag, TaskTag) == 0x000008, "Member 'MoleTaskManagerComponent_GetTaskActorForGameplayTag::TaskTag' has a wrong offset!");
static_assert(offsetof(MoleTaskManagerComponent_GetTaskActorForGameplayTag, ReturnValue) == 0x000010, "Member 'MoleTaskManagerComponent_GetTaskActorForGameplayTag::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskManagerComponent.GetTaskActorsMatchingGameplayTag
// 0x0020 (0x0020 - 0x0000)
struct MoleTaskManagerComponent_GetTaskActorsMatchingGameplayTag final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TaskRootTag;                                       // 0x0008(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskManagerComponent_GetTaskActorsMatchingGameplayTag) == 0x000008, "Wrong alignment on MoleTaskManagerComponent_GetTaskActorsMatchingGameplayTag");
static_assert(sizeof(MoleTaskManagerComponent_GetTaskActorsMatchingGameplayTag) == 0x000020, "Wrong size on MoleTaskManagerComponent_GetTaskActorsMatchingGameplayTag");
static_assert(offsetof(MoleTaskManagerComponent_GetTaskActorsMatchingGameplayTag, WorldContextObject) == 0x000000, "Member 'MoleTaskManagerComponent_GetTaskActorsMatchingGameplayTag::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MoleTaskManagerComponent_GetTaskActorsMatchingGameplayTag, TaskRootTag) == 0x000008, "Member 'MoleTaskManagerComponent_GetTaskActorsMatchingGameplayTag::TaskRootTag' has a wrong offset!");
static_assert(offsetof(MoleTaskManagerComponent_GetTaskActorsMatchingGameplayTag, ReturnValue) == 0x000010, "Member 'MoleTaskManagerComponent_GetTaskActorsMatchingGameplayTag::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskManagerComponent.GetTaskActorsMatchingGameplayTagContainer
// 0x0038 (0x0038 - 0x0000)
struct MoleTaskManagerComponent_GetTaskActorsMatchingGameplayTagContainer final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TaskTagContainer;                                  // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskManagerComponent_GetTaskActorsMatchingGameplayTagContainer) == 0x000008, "Wrong alignment on MoleTaskManagerComponent_GetTaskActorsMatchingGameplayTagContainer");
static_assert(sizeof(MoleTaskManagerComponent_GetTaskActorsMatchingGameplayTagContainer) == 0x000038, "Wrong size on MoleTaskManagerComponent_GetTaskActorsMatchingGameplayTagContainer");
static_assert(offsetof(MoleTaskManagerComponent_GetTaskActorsMatchingGameplayTagContainer, WorldContextObject) == 0x000000, "Member 'MoleTaskManagerComponent_GetTaskActorsMatchingGameplayTagContainer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MoleTaskManagerComponent_GetTaskActorsMatchingGameplayTagContainer, TaskTagContainer) == 0x000008, "Member 'MoleTaskManagerComponent_GetTaskActorsMatchingGameplayTagContainer::TaskTagContainer' has a wrong offset!");
static_assert(offsetof(MoleTaskManagerComponent_GetTaskActorsMatchingGameplayTagContainer, ReturnValue) == 0x000028, "Member 'MoleTaskManagerComponent_GetTaskActorsMatchingGameplayTagContainer::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MoleTaskPoint.GetMoleTaskLinkComponent
// 0x0008 (0x0008 - 0x0000)
struct MoleTaskPoint_GetMoleTaskLinkComponent final
{
public:
	class UMoleTaskLinkComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskPoint_GetMoleTaskLinkComponent) == 0x000008, "Wrong alignment on MoleTaskPoint_GetMoleTaskLinkComponent");
static_assert(sizeof(MoleTaskPoint_GetMoleTaskLinkComponent) == 0x000008, "Wrong size on MoleTaskPoint_GetMoleTaskLinkComponent");
static_assert(offsetof(MoleTaskPoint_GetMoleTaskLinkComponent, ReturnValue) == 0x000000, "Member 'MoleTaskPoint_GetMoleTaskLinkComponent::ReturnValue' has a wrong offset!");

// Function MoleGameRuntime.MoleTeleportAllSabotageAbility.OnPlayerTeleported
// 0x0008 (0x0008 - 0x0000)
struct MoleTeleportAllSabotageAbility_OnPlayerTeleported final
{
public:
	class APlayerState*                           TeleportedPlayer;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTeleportAllSabotageAbility_OnPlayerTeleported) == 0x000008, "Wrong alignment on MoleTeleportAllSabotageAbility_OnPlayerTeleported");
static_assert(sizeof(MoleTeleportAllSabotageAbility_OnPlayerTeleported) == 0x000008, "Wrong size on MoleTeleportAllSabotageAbility_OnPlayerTeleported");
static_assert(offsetof(MoleTeleportAllSabotageAbility_OnPlayerTeleported, TeleportedPlayer) == 0x000000, "Member 'MoleTeleportAllSabotageAbility_OnPlayerTeleported::TeleportedPlayer' has a wrong offset!");

}

