#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RealitySeedGameplayRuntime

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_0_structs.hpp"
#include "RealitySeedGameplayRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// Class RealitySeedGameplayRuntime.FortQueryTest_RealitySaplingsInRadius
// 0x0070 (0x0268 - 0x01F8)
class UFortQueryTest_RealitySaplingsInRadius final : public UEnvQueryTest
{
public:
	struct FAIDataProviderFloatValue              Radius;                                            // 0x01F8(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FAIDataProviderIntValue                MaxNumSaplingsInRadius;                            // 0x0230(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortQueryTest_RealitySaplingsInRadius">();
	}
	static class UFortQueryTest_RealitySaplingsInRadius* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortQueryTest_RealitySaplingsInRadius>();
	}
};
static_assert(alignof(UFortQueryTest_RealitySaplingsInRadius) == 0x000008, "Wrong alignment on UFortQueryTest_RealitySaplingsInRadius");
static_assert(sizeof(UFortQueryTest_RealitySaplingsInRadius) == 0x000268, "Wrong size on UFortQueryTest_RealitySaplingsInRadius");
static_assert(offsetof(UFortQueryTest_RealitySaplingsInRadius, Radius) == 0x0001F8, "Member 'UFortQueryTest_RealitySaplingsInRadius::Radius' has a wrong offset!");
static_assert(offsetof(UFortQueryTest_RealitySaplingsInRadius, MaxNumSaplingsInRadius) == 0x000230, "Member 'UFortQueryTest_RealitySaplingsInRadius::MaxNumSaplingsInRadius' has a wrong offset!");

// Class RealitySeedGameplayRuntime.BuildingRealitySapling
// 0x0128 (0x0E80 - 0x0D58)
class ABuildingRealitySapling final : public ABuildingSMActor
{
public:
	uint8                                         Pad_D58[0x8];                                      // 0x0D58(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRealitySaplingPersistentData          PersistentSaplingData;                             // 0x0D60(0x0060)(BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         bCanBeMarked : 1;                                  // 0x0DC0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bBlockMarking : 1;                                 // 0x0DC0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_DC1[0x7];                                      // 0x0DC1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarkedActorDisplayInfo                MarkerDisplay;                                     // 0x0DC8(0x0098)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVector                                MarkerPositionOffset;                              // 0x0E60(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPerfCulledSapling;                              // 0x0E78(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E79[0x7];                                      // 0x0E79(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EnterGhostState();
	void ForceSpawnWeeds();
	void OnSaplingRegistered();
	void OverrideMarkerDisplayInfo(const struct FMarkedActorDisplayInfo& NewDisplayInfo);
	void SetShouldEnterGhostStateOnDeath(const bool bShouldEnterGhostState);

	struct FDateTime GetEventManagerCalendarTime() const;
	bool WillEnterGhostStateOnDeath() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BuildingRealitySapling">();
	}
	static class ABuildingRealitySapling* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABuildingRealitySapling>();
	}
};
static_assert(alignof(ABuildingRealitySapling) == 0x000008, "Wrong alignment on ABuildingRealitySapling");
static_assert(sizeof(ABuildingRealitySapling) == 0x000E80, "Wrong size on ABuildingRealitySapling");
static_assert(offsetof(ABuildingRealitySapling, PersistentSaplingData) == 0x000D60, "Member 'ABuildingRealitySapling::PersistentSaplingData' has a wrong offset!");
static_assert(offsetof(ABuildingRealitySapling, MarkerDisplay) == 0x000DC8, "Member 'ABuildingRealitySapling::MarkerDisplay' has a wrong offset!");
static_assert(offsetof(ABuildingRealitySapling, MarkerPositionOffset) == 0x000E60, "Member 'ABuildingRealitySapling::MarkerPositionOffset' has a wrong offset!");
static_assert(offsetof(ABuildingRealitySapling, bIsPerfCulledSapling) == 0x000E78, "Member 'ABuildingRealitySapling::bIsPerfCulledSapling' has a wrong offset!");

// Class RealitySeedGameplayRuntime.BuildingRealitySeedPod
// 0x00C0 (0x0E18 - 0x0D58)
class ABuildingRealitySeedPod final : public ABuildingSMActor
{
public:
	uint8                                         Pad_D58[0x8];                                      // 0x0D58(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bCanBeMarked : 1;                                  // 0x0D60(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bBlockMarking : 1;                                 // 0x0D60(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D61[0x7];                                      // 0x0D61(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarkedActorDisplayInfo                MarkerDisplay;                                     // 0x0D68(0x0098)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVector                                MarkerPositionOffset;                              // 0x0E00(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BuildingRealitySeedPod">();
	}
	static class ABuildingRealitySeedPod* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABuildingRealitySeedPod>();
	}
};
static_assert(alignof(ABuildingRealitySeedPod) == 0x000008, "Wrong alignment on ABuildingRealitySeedPod");
static_assert(sizeof(ABuildingRealitySeedPod) == 0x000E18, "Wrong size on ABuildingRealitySeedPod");
static_assert(offsetof(ABuildingRealitySeedPod, MarkerDisplay) == 0x000D68, "Member 'ABuildingRealitySeedPod::MarkerDisplay' has a wrong offset!");
static_assert(offsetof(ABuildingRealitySeedPod, MarkerPositionOffset) == 0x000E00, "Member 'ABuildingRealitySeedPod::MarkerPositionOffset' has a wrong offset!");

// Class RealitySeedGameplayRuntime.FortCheatManager_RealitySeed
// 0x0000 (0x0028 - 0x0028)
class UFortCheatManager_RealitySeed final : public UChildCheatManager
{
public:
	void RealitySaplingDestroyOwned() const;
	void RealitySaplingLevelUpAndRespawn() const;
	void RealitySaplingLogSaplingData(const bool bOnlyForCallingPlayer) const;
	void RealitySaplingQueueToSpawnAtLocation(const float X, const float Y, const float Z, const int32 MaturityLevelOverride, const int32 NurturingLevelOverride, const bool bSetOwningController) const;
	void RealitySaplingQueueToSpawnAtPlayerLocation(const int32 MaturityLevelOverride, const int32 NurturingLevelOverride, const bool bSetOwningController) const;
	void RealitySaplingSendToGhostState(const bool bOnlyForCallingPlayer) const;
	void RealitySaplingSpawnAtLocation(const float X, const float Y, const float Z, const int32 NumSaplings, const int32 MaturityLevelOverride, const int32 NurturingLevelOverride, const float GridHalfSizeOverride, const float GridSpaceBetweenOverride, const bool bSetOwningController) const;
	void RealitySaplingSpawnAtPlayerLocation(const int32 NumSaplings, const int32 MaturityLevelOverride, const int32 NurturingLevelOverride, const float GridHalfSizeOverride, const float GridSpaceBetweenOverride, const bool bSetOwningController) const;
	void RealitySaplingSpawnInRadiusAtLocation(const float X, const float Y, const float Z, const float Radius, const int32 NumSaplings, const int32 MaturityLevelOverride, const int32 NurturingLevelOverride, const float GridHalfSizeOverride, const float GridSpaceBetweenOverride, const bool bSetOwningController) const;
	void RealitySaplingSpawnInRadiusAtPlayerLocation(const float Radius, const int32 NumSaplings, const int32 MaturityLevelOverride, const int32 NurturingLevelOverride, const float GridHalfSizeOverride, const float GridSpaceBetweenOverride, const bool bSetOwningController) const;
	void RealitySaplingSpawnOwnedAtPlayerLocation(const int32 MaturityLevelOverride, const int32 NurturingLevelOverride) const;
	void RealitySaplingSpawnQueued() const;
	void RealitySaplingSpawnWeeds(const bool bOnlyForCallingPlayer) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCheatManager_RealitySeed">();
	}
	static class UFortCheatManager_RealitySeed* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCheatManager_RealitySeed>();
	}
};
static_assert(alignof(UFortCheatManager_RealitySeed) == 0x000008, "Wrong alignment on UFortCheatManager_RealitySeed");
static_assert(sizeof(UFortCheatManager_RealitySeed) == 0x000028, "Wrong size on UFortCheatManager_RealitySeed");

// Class RealitySeedGameplayRuntime.FortControllerComponent_RealitySapling
// 0x0160 (0x0200 - 0x00A0)
class UFortControllerComponent_RealitySapling final : public UFortControllerComponent
{
public:
	TMulticastInlineDelegate<void()>              OnOwnedSaplingsChanged;                            // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FOwnedRealitySaplingData>       OwnedSaplings;                                     // 0x00B0(0x0010)(Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate)
	TArray<class UFortMiniMapIndicator*>          OwnedIndicators;                                   // 0x00C0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	class URealitySaplingAccountItemDefinition*   RealitySaplingAccountItemDefinition;               // 0x00D0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            MiniMapIconBrush;                                  // 0x00E0(0x00C0)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FVector2D                              MobileMinimapIconBrushSize;                        // 0x01A0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTag                           SaplingPlantedGameplayEventTag;                    // 0x01B0(0x0004)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B4[0x4];                                      // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRealitySaplingPersistentData>  StoredRealitySaplings;                             // 0x01B8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C8[0x8];                                      // 0x01C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         bUpdateSaplingPersistentLocationEachMatch;         // 0x01D0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1F8[0x8];                                      // 0x01F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static int32 GetMaxSaplingsPerPlayer();

	void CacheAccountItemData();
	void ClientRegisterPlantedSapling(bool bIsNewSapling);
	void HandleSaplingDestroyedDirectly(class AActor* DestroyedActor);
	void OnAthenaProfileInitialized();
	void OnRep_OwnedSaplings();
	void RegisterPlantedSapling(class ABuildingRealitySapling* RealitySapling, const bool bIsNewSapling);
	void SetFirstOwnedSaplingData(const struct FOwnedRealitySaplingData& InSaplingData);

	class ABuildingRealitySapling* GetFirstOwnedSapling() const;
	bool GetFirstOwnedSaplingData(struct FOwnedRealitySaplingData* OutSaplingData) const;
	TArray<struct FOwnedRealitySaplingData> GetOwnedSaplings() const;
	bool HasActiveSapling() const;
	bool HasPersistentSapling() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortControllerComponent_RealitySapling">();
	}
	static class UFortControllerComponent_RealitySapling* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortControllerComponent_RealitySapling>();
	}
};
static_assert(alignof(UFortControllerComponent_RealitySapling) == 0x000010, "Wrong alignment on UFortControllerComponent_RealitySapling");
static_assert(sizeof(UFortControllerComponent_RealitySapling) == 0x000200, "Wrong size on UFortControllerComponent_RealitySapling");
static_assert(offsetof(UFortControllerComponent_RealitySapling, OnOwnedSaplingsChanged) == 0x0000A0, "Member 'UFortControllerComponent_RealitySapling::OnOwnedSaplingsChanged' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_RealitySapling, OwnedSaplings) == 0x0000B0, "Member 'UFortControllerComponent_RealitySapling::OwnedSaplings' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_RealitySapling, OwnedIndicators) == 0x0000C0, "Member 'UFortControllerComponent_RealitySapling::OwnedIndicators' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_RealitySapling, RealitySaplingAccountItemDefinition) == 0x0000D0, "Member 'UFortControllerComponent_RealitySapling::RealitySaplingAccountItemDefinition' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_RealitySapling, MiniMapIconBrush) == 0x0000E0, "Member 'UFortControllerComponent_RealitySapling::MiniMapIconBrush' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_RealitySapling, MobileMinimapIconBrushSize) == 0x0001A0, "Member 'UFortControllerComponent_RealitySapling::MobileMinimapIconBrushSize' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_RealitySapling, SaplingPlantedGameplayEventTag) == 0x0001B0, "Member 'UFortControllerComponent_RealitySapling::SaplingPlantedGameplayEventTag' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_RealitySapling, StoredRealitySaplings) == 0x0001B8, "Member 'UFortControllerComponent_RealitySapling::StoredRealitySaplings' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_RealitySapling, bUpdateSaplingPersistentLocationEachMatch) == 0x0001D0, "Member 'UFortControllerComponent_RealitySapling::bUpdateSaplingPersistentLocationEachMatch' has a wrong offset!");

// Class RealitySeedGameplayRuntime.FortGameStateComponent_RealitySapling
// 0x0180 (0x0220 - 0x00A0)
class UFortGameStateComponent_RealitySapling final : public UFortGameStateComponent
{
public:
	EAthenaGamePhaseStep                          StartSpawningSaplingsGamePhaseStep;                // 0x00A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         bPersistentRealitySaplingsEnabled;                 // 0x00A8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   SaplingAsset;                                      // 0x00D0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FScalableFloat                         bUsePerfCulledSaplingAssetOnSpawnFailed;           // 0x00F8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   PerfCulledSaplingAsset;                            // 0x0120(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UEnvQuery>               SaplingSpawnEnvQuery;                              // 0x0148(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FName, struct FScalableFloat>      SaplingSpawnEnvQueryFloatParamMap;                 // 0x0170(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TArray<struct FRealitySaplingEnvQueryParam>   SaplingSpawnEnvQueryParams;                        // 0x01C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<TSoftClassPtr<class UClass>>           SaplingSpawnEnvQueryActorClassesToAvoidByBounds;   // 0x01D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<struct FRealitySaplingPersistentData>  SaplingDataToSpawn;                                // 0x01E0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1F0[0x10];                                     // 0x01F0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABuildingRealitySapling*>        SpawnedSaplings;                                   // 0x0200(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class AActor*>                         SaplingSpawnEnvQueryActorsToAvoidByBounds;         // 0x0210(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

public:
	void HandleCurrentPlaylistLoaded(class FName PlaylistName, const struct FGameplayTagContainer& PlaylistContextTags);
	void HandleGamePhaseStepChanged(const TScriptInterface<class IFortSafeZoneInterface>& SafeZoneInterface, const EAthenaGamePhaseStep GamePhaseStep);

	int32 GetNumSaplingsInRadius(const struct FVector& Location, const float Radius) const;
	const TArray<class AActor*> GetSaplingSpawnEnvQueryActorsToAvoidByBounds() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGameStateComponent_RealitySapling">();
	}
	static class UFortGameStateComponent_RealitySapling* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGameStateComponent_RealitySapling>();
	}
};
static_assert(alignof(UFortGameStateComponent_RealitySapling) == 0x000008, "Wrong alignment on UFortGameStateComponent_RealitySapling");
static_assert(sizeof(UFortGameStateComponent_RealitySapling) == 0x000220, "Wrong size on UFortGameStateComponent_RealitySapling");
static_assert(offsetof(UFortGameStateComponent_RealitySapling, StartSpawningSaplingsGamePhaseStep) == 0x0000A0, "Member 'UFortGameStateComponent_RealitySapling::StartSpawningSaplingsGamePhaseStep' has a wrong offset!");
static_assert(offsetof(UFortGameStateComponent_RealitySapling, bPersistentRealitySaplingsEnabled) == 0x0000A8, "Member 'UFortGameStateComponent_RealitySapling::bPersistentRealitySaplingsEnabled' has a wrong offset!");
static_assert(offsetof(UFortGameStateComponent_RealitySapling, SaplingAsset) == 0x0000D0, "Member 'UFortGameStateComponent_RealitySapling::SaplingAsset' has a wrong offset!");
static_assert(offsetof(UFortGameStateComponent_RealitySapling, bUsePerfCulledSaplingAssetOnSpawnFailed) == 0x0000F8, "Member 'UFortGameStateComponent_RealitySapling::bUsePerfCulledSaplingAssetOnSpawnFailed' has a wrong offset!");
static_assert(offsetof(UFortGameStateComponent_RealitySapling, PerfCulledSaplingAsset) == 0x000120, "Member 'UFortGameStateComponent_RealitySapling::PerfCulledSaplingAsset' has a wrong offset!");
static_assert(offsetof(UFortGameStateComponent_RealitySapling, SaplingSpawnEnvQuery) == 0x000148, "Member 'UFortGameStateComponent_RealitySapling::SaplingSpawnEnvQuery' has a wrong offset!");
static_assert(offsetof(UFortGameStateComponent_RealitySapling, SaplingSpawnEnvQueryFloatParamMap) == 0x000170, "Member 'UFortGameStateComponent_RealitySapling::SaplingSpawnEnvQueryFloatParamMap' has a wrong offset!");
static_assert(offsetof(UFortGameStateComponent_RealitySapling, SaplingSpawnEnvQueryParams) == 0x0001C0, "Member 'UFortGameStateComponent_RealitySapling::SaplingSpawnEnvQueryParams' has a wrong offset!");
static_assert(offsetof(UFortGameStateComponent_RealitySapling, SaplingSpawnEnvQueryActorClassesToAvoidByBounds) == 0x0001D0, "Member 'UFortGameStateComponent_RealitySapling::SaplingSpawnEnvQueryActorClassesToAvoidByBounds' has a wrong offset!");
static_assert(offsetof(UFortGameStateComponent_RealitySapling, SaplingDataToSpawn) == 0x0001E0, "Member 'UFortGameStateComponent_RealitySapling::SaplingDataToSpawn' has a wrong offset!");
static_assert(offsetof(UFortGameStateComponent_RealitySapling, SpawnedSaplings) == 0x000200, "Member 'UFortGameStateComponent_RealitySapling::SpawnedSaplings' has a wrong offset!");
static_assert(offsetof(UFortGameStateComponent_RealitySapling, SaplingSpawnEnvQueryActorsToAvoidByBounds) == 0x000210, "Member 'UFortGameStateComponent_RealitySapling::SaplingSpawnEnvQueryActorsToAvoidByBounds' has a wrong offset!");

// Class RealitySeedGameplayRuntime.FortQueryContext_RealitySaplingLocations
// 0x0000 (0x0028 - 0x0028)
class UFortQueryContext_RealitySaplingLocations final : public UEnvQueryContext
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortQueryContext_RealitySaplingLocations">();
	}
	static class UFortQueryContext_RealitySaplingLocations* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortQueryContext_RealitySaplingLocations>();
	}
};
static_assert(alignof(UFortQueryContext_RealitySaplingLocations) == 0x000008, "Wrong alignment on UFortQueryContext_RealitySaplingLocations");
static_assert(sizeof(UFortQueryContext_RealitySaplingLocations) == 0x000028, "Wrong size on UFortQueryContext_RealitySaplingLocations");

// Class RealitySeedGameplayRuntime.FortQueryTest_RealitySaplingObstructed
// 0x0098 (0x0290 - 0x01F8)
class UFortQueryTest_RealitySaplingObstructed final : public UEnvQueryTest
{
public:
	struct FAIDataProviderFloatValue              SphereOverlapRadius;                               // 0x01F8(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FAIDataProviderFloatValue              SphereOverlapZOffset;                              // 0x0230(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         bOnlyBlockingHits : 1;                             // 0x0268(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverlapComplex : 1;                               // 0x0268(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_269[0x7];                                      // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ECollisionChannel>                     ObjectTypesToQuery;                                // 0x0270(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           IgnoreActorClasses;                                // 0x0280(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortQueryTest_RealitySaplingObstructed">();
	}
	static class UFortQueryTest_RealitySaplingObstructed* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortQueryTest_RealitySaplingObstructed>();
	}
};
static_assert(alignof(UFortQueryTest_RealitySaplingObstructed) == 0x000008, "Wrong alignment on UFortQueryTest_RealitySaplingObstructed");
static_assert(sizeof(UFortQueryTest_RealitySaplingObstructed) == 0x000290, "Wrong size on UFortQueryTest_RealitySaplingObstructed");
static_assert(offsetof(UFortQueryTest_RealitySaplingObstructed, SphereOverlapRadius) == 0x0001F8, "Member 'UFortQueryTest_RealitySaplingObstructed::SphereOverlapRadius' has a wrong offset!");
static_assert(offsetof(UFortQueryTest_RealitySaplingObstructed, SphereOverlapZOffset) == 0x000230, "Member 'UFortQueryTest_RealitySaplingObstructed::SphereOverlapZOffset' has a wrong offset!");
static_assert(offsetof(UFortQueryTest_RealitySaplingObstructed, ObjectTypesToQuery) == 0x000270, "Member 'UFortQueryTest_RealitySaplingObstructed::ObjectTypesToQuery' has a wrong offset!");
static_assert(offsetof(UFortQueryTest_RealitySaplingObstructed, IgnoreActorClasses) == 0x000280, "Member 'UFortQueryTest_RealitySaplingObstructed::IgnoreActorClasses' has a wrong offset!");

}

