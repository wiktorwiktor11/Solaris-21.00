#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Toy_SoccerBall_Base

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function B_Toy_SoccerBall_Base.B_Toy_SoccerBall_Base_C.BndEvt__WaterInteractionComponent_K2Node_ComponentBoundEvent_0_WaterInteractionOnEnterWater__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct B_Toy_SoccerBall_Base_C_BndEvt__WaterInteractionComponent_K2Node_ComponentBoundEvent_0_WaterInteractionOnEnterWater__DelegateSignature final
{
public:
	class AFortWaterBodyActor*                    WaterBody;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortWaterInteractionComponent*         WaterInteractionComponent_0;                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsFirstBody;                                      // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Toy_SoccerBall_Base_C_BndEvt__WaterInteractionComponent_K2Node_ComponentBoundEvent_0_WaterInteractionOnEnterWater__DelegateSignature) == 0x000008, "Wrong alignment on B_Toy_SoccerBall_Base_C_BndEvt__WaterInteractionComponent_K2Node_ComponentBoundEvent_0_WaterInteractionOnEnterWater__DelegateSignature");
static_assert(sizeof(B_Toy_SoccerBall_Base_C_BndEvt__WaterInteractionComponent_K2Node_ComponentBoundEvent_0_WaterInteractionOnEnterWater__DelegateSignature) == 0x000018, "Wrong size on B_Toy_SoccerBall_Base_C_BndEvt__WaterInteractionComponent_K2Node_ComponentBoundEvent_0_WaterInteractionOnEnterWater__DelegateSignature");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_BndEvt__WaterInteractionComponent_K2Node_ComponentBoundEvent_0_WaterInteractionOnEnterWater__DelegateSignature, WaterBody) == 0x000000, "Member 'B_Toy_SoccerBall_Base_C_BndEvt__WaterInteractionComponent_K2Node_ComponentBoundEvent_0_WaterInteractionOnEnterWater__DelegateSignature::WaterBody' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_BndEvt__WaterInteractionComponent_K2Node_ComponentBoundEvent_0_WaterInteractionOnEnterWater__DelegateSignature, WaterInteractionComponent_0) == 0x000008, "Member 'B_Toy_SoccerBall_Base_C_BndEvt__WaterInteractionComponent_K2Node_ComponentBoundEvent_0_WaterInteractionOnEnterWater__DelegateSignature::WaterInteractionComponent_0' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_BndEvt__WaterInteractionComponent_K2Node_ComponentBoundEvent_0_WaterInteractionOnEnterWater__DelegateSignature, bIsFirstBody) == 0x000010, "Member 'B_Toy_SoccerBall_Base_C_BndEvt__WaterInteractionComponent_K2Node_ComponentBoundEvent_0_WaterInteractionOnEnterWater__DelegateSignature::bIsFirstBody' has a wrong offset!");

// Function B_Toy_SoccerBall_Base.B_Toy_SoccerBall_Base_C.CalcRawDistanceTraveled
// 0x0020 (0x0020 - 0x0000)
struct B_Toy_SoccerBall_Base_C_CalcRawDistanceTraveled final
{
public:
	struct FVector                                FinalPosition;                                     // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RawDistance;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Vector_Distance2D_ReturnValue;            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Toy_SoccerBall_Base_C_CalcRawDistanceTraveled) == 0x000008, "Wrong alignment on B_Toy_SoccerBall_Base_C_CalcRawDistanceTraveled");
static_assert(sizeof(B_Toy_SoccerBall_Base_C_CalcRawDistanceTraveled) == 0x000020, "Wrong size on B_Toy_SoccerBall_Base_C_CalcRawDistanceTraveled");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_CalcRawDistanceTraveled, FinalPosition) == 0x000000, "Member 'B_Toy_SoccerBall_Base_C_CalcRawDistanceTraveled::FinalPosition' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_CalcRawDistanceTraveled, RawDistance) == 0x000018, "Member 'B_Toy_SoccerBall_Base_C_CalcRawDistanceTraveled::RawDistance' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_CalcRawDistanceTraveled, CallFunc_Vector_Distance2D_ReturnValue) == 0x00001C, "Member 'B_Toy_SoccerBall_Base_C_CalcRawDistanceTraveled::CallFunc_Vector_Distance2D_ReturnValue' has a wrong offset!");

// Function B_Toy_SoccerBall_Base.B_Toy_SoccerBall_Base_C.ConvertDistanceToMetersRounded
// 0x0010 (0x0010 - 0x0000)
struct B_Toy_SoccerBall_Base_C_ConvertDistanceToMetersRounded final
{
public:
	float                                         RawDistance;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DistanceInMeters;                                  // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Toy_SoccerBall_Base_C_ConvertDistanceToMetersRounded) == 0x000004, "Wrong alignment on B_Toy_SoccerBall_Base_C_ConvertDistanceToMetersRounded");
static_assert(sizeof(B_Toy_SoccerBall_Base_C_ConvertDistanceToMetersRounded) == 0x000010, "Wrong size on B_Toy_SoccerBall_Base_C_ConvertDistanceToMetersRounded");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_ConvertDistanceToMetersRounded, RawDistance) == 0x000000, "Member 'B_Toy_SoccerBall_Base_C_ConvertDistanceToMetersRounded::RawDistance' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_ConvertDistanceToMetersRounded, DistanceInMeters) == 0x000004, "Member 'B_Toy_SoccerBall_Base_C_ConvertDistanceToMetersRounded::DistanceInMeters' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_ConvertDistanceToMetersRounded, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000008, "Member 'B_Toy_SoccerBall_Base_C_ConvertDistanceToMetersRounded::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_ConvertDistanceToMetersRounded, CallFunc_Round_ReturnValue) == 0x00000C, "Member 'B_Toy_SoccerBall_Base_C_ConvertDistanceToMetersRounded::CallFunc_Round_ReturnValue' has a wrong offset!");

// Function B_Toy_SoccerBall_Base.B_Toy_SoccerBall_Base_C.DisplayDistanceMessage
// 0x0138 (0x0138 - 0x0000)
struct B_Toy_SoccerBall_Base_C_DisplayDistanceMessage final
{
public:
	int32                                         Distance;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortToyContext*                        CallFunc_GetContext_ReturnValue;                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0020(0x0050)(HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerState*                       K2Node_DynamicCast_AsFort_Player_State;            // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_FormatPlayerNameForDisplay_ReturnValue;   // 0x00A0(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00B8(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0108(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0118(0x0018)()
	bool                                          CallFunc_ConditionalPrintToMessageFeed_ReturnValue; // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Toy_SoccerBall_Base_C_DisplayDistanceMessage) == 0x000008, "Wrong alignment on B_Toy_SoccerBall_Base_C_DisplayDistanceMessage");
static_assert(sizeof(B_Toy_SoccerBall_Base_C_DisplayDistanceMessage) == 0x000138, "Wrong size on B_Toy_SoccerBall_Base_C_DisplayDistanceMessage");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_DisplayDistanceMessage, Distance) == 0x000000, "Member 'B_Toy_SoccerBall_Base_C_DisplayDistanceMessage::Distance' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_DisplayDistanceMessage, CallFunc_GetContext_ReturnValue) == 0x000008, "Member 'B_Toy_SoccerBall_Base_C_DisplayDistanceMessage::CallFunc_GetContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_DisplayDistanceMessage, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000010, "Member 'B_Toy_SoccerBall_Base_C_DisplayDistanceMessage::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_DisplayDistanceMessage, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'B_Toy_SoccerBall_Base_C_DisplayDistanceMessage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_DisplayDistanceMessage, K2Node_MakeStruct_FormatArgumentData) == 0x000020, "Member 'B_Toy_SoccerBall_Base_C_DisplayDistanceMessage::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_DisplayDistanceMessage, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000070, "Member 'B_Toy_SoccerBall_Base_C_DisplayDistanceMessage::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_DisplayDistanceMessage, CallFunc_GetOwner_ReturnValue) == 0x000088, "Member 'B_Toy_SoccerBall_Base_C_DisplayDistanceMessage::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_DisplayDistanceMessage, K2Node_DynamicCast_AsFort_Player_State) == 0x000090, "Member 'B_Toy_SoccerBall_Base_C_DisplayDistanceMessage::K2Node_DynamicCast_AsFort_Player_State' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_DisplayDistanceMessage, K2Node_DynamicCast_bSuccess) == 0x000098, "Member 'B_Toy_SoccerBall_Base_C_DisplayDistanceMessage::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_DisplayDistanceMessage, CallFunc_FormatPlayerNameForDisplay_ReturnValue) == 0x0000A0, "Member 'B_Toy_SoccerBall_Base_C_DisplayDistanceMessage::CallFunc_FormatPlayerNameForDisplay_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_DisplayDistanceMessage, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000B8, "Member 'B_Toy_SoccerBall_Base_C_DisplayDistanceMessage::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_DisplayDistanceMessage, K2Node_MakeArray_Array) == 0x000108, "Member 'B_Toy_SoccerBall_Base_C_DisplayDistanceMessage::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_DisplayDistanceMessage, CallFunc_Format_ReturnValue) == 0x000118, "Member 'B_Toy_SoccerBall_Base_C_DisplayDistanceMessage::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_DisplayDistanceMessage, CallFunc_ConditionalPrintToMessageFeed_ReturnValue) == 0x000130, "Member 'B_Toy_SoccerBall_Base_C_DisplayDistanceMessage::CallFunc_ConditionalPrintToMessageFeed_ReturnValue' has a wrong offset!");

// Function B_Toy_SoccerBall_Base.B_Toy_SoccerBall_Base_C.ExecuteUbergraph_B_Toy_SoccerBall_Base
// 0x01A8 (0x01A8 - 0x0000)
struct B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcRawDistanceTraveled_RawDistance;      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsServer_ReturnValue;                     // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27[0x1];                                       // 0x0027(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_Event_MyComp;                               // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Other;                                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_Event_OtherComp;                            // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bSelfMoved;                           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_HitLocation;                          // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_HitNormal;                            // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_NormalImpulse;                        // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_Hit;                                  // 0x0090(0x00E0)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_ConvertDistanceToMetersRounded_DistanceInMeters; // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  CallFunc_GetFortPlayerControllerFromActor_ReturnValue; // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortQuestManager*                      CallFunc_GetQuestManager_ReturnValue;              // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortWaterBodyActor*                    K2Node_ComponentBoundEvent_WaterBody;              // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortWaterInteractionComponent*         K2Node_ComponentBoundEvent_WaterInteractionComponent; // 0x0198(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bIsFirstBody;           // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base) == 0x000008, "Wrong alignment on B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base");
static_assert(sizeof(B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base) == 0x0001A8, "Wrong size on B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base, EntryPoint) == 0x000000, "Member 'B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base::EntryPoint' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000008, "Member 'B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base, CallFunc_CalcRawDistanceTraveled_RawDistance) == 0x000020, "Member 'B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base::CallFunc_CalcRawDistanceTraveled_RawDistance' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base, Temp_bool_Has_Been_Initd_Variable) == 0x000024, "Member 'B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base, Temp_bool_IsClosed_Variable) == 0x000025, "Member 'B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base, CallFunc_IsServer_ReturnValue) == 0x000026, "Member 'B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base::CallFunc_IsServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base, K2Node_Event_MyComp) == 0x000028, "Member 'B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base::K2Node_Event_MyComp' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base, K2Node_Event_Other) == 0x000030, "Member 'B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base::K2Node_Event_Other' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base, K2Node_Event_OtherComp) == 0x000038, "Member 'B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base::K2Node_Event_OtherComp' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base, K2Node_Event_bSelfMoved) == 0x000040, "Member 'B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base::K2Node_Event_bSelfMoved' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base, K2Node_Event_HitLocation) == 0x000048, "Member 'B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base::K2Node_Event_HitLocation' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base, K2Node_Event_HitNormal) == 0x000060, "Member 'B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base::K2Node_Event_HitNormal' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base, K2Node_Event_NormalImpulse) == 0x000078, "Member 'B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base::K2Node_Event_NormalImpulse' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base, K2Node_Event_Hit) == 0x000090, "Member 'B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base::K2Node_Event_Hit' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base, CallFunc_GetOwner_ReturnValue) == 0x000170, "Member 'B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base, CallFunc_ConvertDistanceToMetersRounded_DistanceInMeters) == 0x000178, "Member 'B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base::CallFunc_ConvertDistanceToMetersRounded_DistanceInMeters' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base, CallFunc_GetFortPlayerControllerFromActor_ReturnValue) == 0x000180, "Member 'B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base::CallFunc_GetFortPlayerControllerFromActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base, CallFunc_GetQuestManager_ReturnValue) == 0x000188, "Member 'B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base::CallFunc_GetQuestManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base, K2Node_ComponentBoundEvent_WaterBody) == 0x000190, "Member 'B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base::K2Node_ComponentBoundEvent_WaterBody' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base, K2Node_ComponentBoundEvent_WaterInteractionComponent) == 0x000198, "Member 'B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base::K2Node_ComponentBoundEvent_WaterInteractionComponent' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base, K2Node_ComponentBoundEvent_bIsFirstBody) == 0x0001A0, "Member 'B_Toy_SoccerBall_Base_C_ExecuteUbergraph_B_Toy_SoccerBall_Base::K2Node_ComponentBoundEvent_bIsFirstBody' has a wrong offset!");

// Function B_Toy_SoccerBall_Base.B_Toy_SoccerBall_Base_C.OnRep_DistanceTraveledInMeters
// 0x0001 (0x0001 - 0x0000)
struct B_Toy_SoccerBall_Base_C_OnRep_DistanceTraveledInMeters final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Toy_SoccerBall_Base_C_OnRep_DistanceTraveledInMeters) == 0x000001, "Wrong alignment on B_Toy_SoccerBall_Base_C_OnRep_DistanceTraveledInMeters");
static_assert(sizeof(B_Toy_SoccerBall_Base_C_OnRep_DistanceTraveledInMeters) == 0x000001, "Wrong size on B_Toy_SoccerBall_Base_C_OnRep_DistanceTraveledInMeters");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_OnRep_DistanceTraveledInMeters, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'B_Toy_SoccerBall_Base_C_OnRep_DistanceTraveledInMeters::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

// Function B_Toy_SoccerBall_Base.B_Toy_SoccerBall_Base_C.PlayScoringCueAndDestroy
// 0x0008 (0x0008 - 0x0000)
struct B_Toy_SoccerBall_Base_C_PlayScoringCueAndDestroy final
{
public:
	bool                                          bHitTarget;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Select_Default;                             // 0x0004(0x0004)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Toy_SoccerBall_Base_C_PlayScoringCueAndDestroy) == 0x000004, "Wrong alignment on B_Toy_SoccerBall_Base_C_PlayScoringCueAndDestroy");
static_assert(sizeof(B_Toy_SoccerBall_Base_C_PlayScoringCueAndDestroy) == 0x000008, "Wrong size on B_Toy_SoccerBall_Base_C_PlayScoringCueAndDestroy");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_PlayScoringCueAndDestroy, bHitTarget) == 0x000000, "Member 'B_Toy_SoccerBall_Base_C_PlayScoringCueAndDestroy::bHitTarget' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_PlayScoringCueAndDestroy, Temp_bool_Variable) == 0x000001, "Member 'B_Toy_SoccerBall_Base_C_PlayScoringCueAndDestroy::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_PlayScoringCueAndDestroy, K2Node_Select_Default) == 0x000004, "Member 'B_Toy_SoccerBall_Base_C_PlayScoringCueAndDestroy::K2Node_Select_Default' has a wrong offset!");

// Function B_Toy_SoccerBall_Base.B_Toy_SoccerBall_Base_C.ReceiveHit
// 0x0148 (0x0148 - 0x0000)
struct B_Toy_SoccerBall_Base_C_ReceiveHit final
{
public:
	class UPrimitiveComponent*                    MyComp;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSelfMoved;                                        // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitNormal;                                         // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalImpulse;                                     // 0x0050(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0068(0x00E0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(B_Toy_SoccerBall_Base_C_ReceiveHit) == 0x000008, "Wrong alignment on B_Toy_SoccerBall_Base_C_ReceiveHit");
static_assert(sizeof(B_Toy_SoccerBall_Base_C_ReceiveHit) == 0x000148, "Wrong size on B_Toy_SoccerBall_Base_C_ReceiveHit");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_ReceiveHit, MyComp) == 0x000000, "Member 'B_Toy_SoccerBall_Base_C_ReceiveHit::MyComp' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_ReceiveHit, Other) == 0x000008, "Member 'B_Toy_SoccerBall_Base_C_ReceiveHit::Other' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_ReceiveHit, OtherComp) == 0x000010, "Member 'B_Toy_SoccerBall_Base_C_ReceiveHit::OtherComp' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_ReceiveHit, bSelfMoved) == 0x000018, "Member 'B_Toy_SoccerBall_Base_C_ReceiveHit::bSelfMoved' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_ReceiveHit, HitLocation) == 0x000020, "Member 'B_Toy_SoccerBall_Base_C_ReceiveHit::HitLocation' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_ReceiveHit, HitNormal) == 0x000038, "Member 'B_Toy_SoccerBall_Base_C_ReceiveHit::HitNormal' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_ReceiveHit, NormalImpulse) == 0x000050, "Member 'B_Toy_SoccerBall_Base_C_ReceiveHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(B_Toy_SoccerBall_Base_C_ReceiveHit, Hit) == 0x000068, "Member 'B_Toy_SoccerBall_Base_C_ReceiveHit::Hit' has a wrong offset!");

}

