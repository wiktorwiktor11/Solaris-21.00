#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TrackStormDamageComponent

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "ModularGameplay_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass TrackStormDamageComponent.TrackStormDamageComponent_C
// 0x00A8 (0x0148 - 0x00A0)
class UTrackStormDamageComponent_C final : public UPlayerStateComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FGameplayTag                           OutsideSafeZoneDamageTag;                          // 0x00A8(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         fCummulativeStormDamageForMatch;                   // 0x00AC(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         fStormSicknessWarningLevel;                        // 0x00B0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         fStormSicknessInflictionThreshold;                 // 0x00D8(0x0028)(Edit, BlueprintVisible)
	bool                                          bPlayerWarned;                                     // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        FortPlayerPawn;                                    // 0x0108(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSubclassOf<class UGameplayEffect>            GE_StormSickness;                                  // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          bPlayerHasStormSickness;                           // 0x0118(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         fStormSicknessKillThreshold;                       // 0x0120(0x0028)(Edit, BlueprintVisible)

public:
	void SendStormSicknessGameplayEvent(const struct FGameplayEventData& Gameplay_Event_Data);
	void ReceiveBeginPlay();
	void OnRep_fCummulativeStormDamageForMatch();
	void KillSwitch();
	void FailedToActivatePassiveAbility_1();
	void ExecuteUbergraph_TrackStormDamageComponent(int32 EntryPoint);
	void EventReceived_C6BD086B4F38F4C74BBEAAA52D6D6ABB(const struct FGameplayEventData& Payload);
	void DisplayStormSicknessWarning();
	void CheckStormSicknessWarning();
	void CheckAddStormSickness();
	void ApplyStormSickness();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TrackStormDamageComponent_C">();
	}
	static class UTrackStormDamageComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTrackStormDamageComponent_C>();
	}
};
static_assert(alignof(UTrackStormDamageComponent_C) == 0x000008, "Wrong alignment on UTrackStormDamageComponent_C");
static_assert(sizeof(UTrackStormDamageComponent_C) == 0x000148, "Wrong size on UTrackStormDamageComponent_C");
static_assert(offsetof(UTrackStormDamageComponent_C, UberGraphFrame) == 0x0000A0, "Member 'UTrackStormDamageComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UTrackStormDamageComponent_C, OutsideSafeZoneDamageTag) == 0x0000A8, "Member 'UTrackStormDamageComponent_C::OutsideSafeZoneDamageTag' has a wrong offset!");
static_assert(offsetof(UTrackStormDamageComponent_C, fCummulativeStormDamageForMatch) == 0x0000AC, "Member 'UTrackStormDamageComponent_C::fCummulativeStormDamageForMatch' has a wrong offset!");
static_assert(offsetof(UTrackStormDamageComponent_C, fStormSicknessWarningLevel) == 0x0000B0, "Member 'UTrackStormDamageComponent_C::fStormSicknessWarningLevel' has a wrong offset!");
static_assert(offsetof(UTrackStormDamageComponent_C, fStormSicknessInflictionThreshold) == 0x0000D8, "Member 'UTrackStormDamageComponent_C::fStormSicknessInflictionThreshold' has a wrong offset!");
static_assert(offsetof(UTrackStormDamageComponent_C, bPlayerWarned) == 0x000100, "Member 'UTrackStormDamageComponent_C::bPlayerWarned' has a wrong offset!");
static_assert(offsetof(UTrackStormDamageComponent_C, FortPlayerPawn) == 0x000108, "Member 'UTrackStormDamageComponent_C::FortPlayerPawn' has a wrong offset!");
static_assert(offsetof(UTrackStormDamageComponent_C, GE_StormSickness) == 0x000110, "Member 'UTrackStormDamageComponent_C::GE_StormSickness' has a wrong offset!");
static_assert(offsetof(UTrackStormDamageComponent_C, bPlayerHasStormSickness) == 0x000118, "Member 'UTrackStormDamageComponent_C::bPlayerHasStormSickness' has a wrong offset!");
static_assert(offsetof(UTrackStormDamageComponent_C, fStormSicknessKillThreshold) == 0x000120, "Member 'UTrackStormDamageComponent_C::fStormSicknessKillThreshold' has a wrong offset!");

}

