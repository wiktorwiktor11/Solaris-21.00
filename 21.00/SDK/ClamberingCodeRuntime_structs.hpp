#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ClamberingCodeRuntime

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum ClamberingCodeRuntime.EClamberingType
// NumValues: 0x0004
enum class EClamberingType : uint8
{
	Invalid                                  = 0,
	Ledge                                    = 1,
	Window                                   = 2,
	EClamberingType_MAX                      = 3,
};

// Enum ClamberingCodeRuntime.EClamberingState
// NumValues: 0x0007
enum class EClamberingState : uint8
{
	Inactive                                 = 0,
	Targeting                                = 1,
	Ledge_Moving                             = 2,
	Ledge_Failed                             = 3,
	Window_Moving                            = 4,
	Window_Failed                            = 5,
	EClamberingState_MAX                     = 6,
};

// Enum ClamberingCodeRuntime.EClamberingFailedReason
// NumValues: 0x000D
enum class EClamberingFailedReason : uint8
{
	None                                     = 0,
	Unknown                                  = 1,
	DebugForced                              = 2,
	OwnerDied                                = 3,
	OwnerDBNO                                = 4,
	OwnerLaunched                            = 5,
	SynchedActionNotStarted                  = 6,
	Ledge_PlayerTooFar                       = 7,
	Ledge_TargetLocationInvalid              = 8,
	Ledge_TargetActorInvalid                 = 9,
	Ledge_TargetActorDestroyed               = 10,
	Ledge_BlockerEncountered                 = 11,
	EClamberingFailedReason_MAX              = 12,
};

// Enum ClamberingCodeRuntime.EClamberingActivationMode
// NumValues: 0x0004
enum class EClamberingActivationMode : uint8
{
	ClientPreference                         = 0,
	ForceAutoClambering                      = 1,
	ForceManualClambering                    = 2,
	EClamberingActivationMode_MAX            = 3,
};

// Enum ClamberingCodeRuntime.EClamberingDebugTextAlign
// NumValues: 0x0004
enum class EClamberingDebugTextAlign : uint8
{
	Left                                     = 0,
	Right                                    = 1,
	Center                                   = 2,
	EClamberingDebugTextAlign_MAX            = 3,
};

// ScriptStruct ClamberingCodeRuntime.ClamberingInputConfig
// 0x0210 (0x0210 - 0x0000)
struct FClamberingInputConfig final
{
public:
	struct FScalableFloat                         ClamberActivationHorizontalRange;                  // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         ClamberActivationVerticalRange;                    // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         EnableInputDelay;                                  // 0x0050(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         QueuedInputWindow;                                 // 0x0078(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         HeldInputDuration;                                 // 0x00A0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EClamberingActivationMode                     ActivationMode;                                    // 0x00C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         AutoStartMovementThreshold;                        // 0x00D0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         AutoStartLookAtThreshold;                          // 0x00F8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         AutoStartWallCheckCastRadius;                      // 0x0120(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         AutoStartWallCheckHorizontalRange;                 // 0x0148(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         AutoStartWallCheckLookAtThresholdMultiplier;       // 0x0170(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         TargetInvalidateDistance;                          // 0x0198(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         TargetAimInvalidateAngle;                          // 0x01C0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         TargetActorMovementInvalidateDistance;             // 0x01E8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClamberingInputConfig) == 0x000008, "Wrong alignment on FClamberingInputConfig");
static_assert(sizeof(FClamberingInputConfig) == 0x000210, "Wrong size on FClamberingInputConfig");
static_assert(offsetof(FClamberingInputConfig, ClamberActivationHorizontalRange) == 0x000000, "Member 'FClamberingInputConfig::ClamberActivationHorizontalRange' has a wrong offset!");
static_assert(offsetof(FClamberingInputConfig, ClamberActivationVerticalRange) == 0x000028, "Member 'FClamberingInputConfig::ClamberActivationVerticalRange' has a wrong offset!");
static_assert(offsetof(FClamberingInputConfig, EnableInputDelay) == 0x000050, "Member 'FClamberingInputConfig::EnableInputDelay' has a wrong offset!");
static_assert(offsetof(FClamberingInputConfig, QueuedInputWindow) == 0x000078, "Member 'FClamberingInputConfig::QueuedInputWindow' has a wrong offset!");
static_assert(offsetof(FClamberingInputConfig, HeldInputDuration) == 0x0000A0, "Member 'FClamberingInputConfig::HeldInputDuration' has a wrong offset!");
static_assert(offsetof(FClamberingInputConfig, ActivationMode) == 0x0000C8, "Member 'FClamberingInputConfig::ActivationMode' has a wrong offset!");
static_assert(offsetof(FClamberingInputConfig, AutoStartMovementThreshold) == 0x0000D0, "Member 'FClamberingInputConfig::AutoStartMovementThreshold' has a wrong offset!");
static_assert(offsetof(FClamberingInputConfig, AutoStartLookAtThreshold) == 0x0000F8, "Member 'FClamberingInputConfig::AutoStartLookAtThreshold' has a wrong offset!");
static_assert(offsetof(FClamberingInputConfig, AutoStartWallCheckCastRadius) == 0x000120, "Member 'FClamberingInputConfig::AutoStartWallCheckCastRadius' has a wrong offset!");
static_assert(offsetof(FClamberingInputConfig, AutoStartWallCheckHorizontalRange) == 0x000148, "Member 'FClamberingInputConfig::AutoStartWallCheckHorizontalRange' has a wrong offset!");
static_assert(offsetof(FClamberingInputConfig, AutoStartWallCheckLookAtThresholdMultiplier) == 0x000170, "Member 'FClamberingInputConfig::AutoStartWallCheckLookAtThresholdMultiplier' has a wrong offset!");
static_assert(offsetof(FClamberingInputConfig, TargetInvalidateDistance) == 0x000198, "Member 'FClamberingInputConfig::TargetInvalidateDistance' has a wrong offset!");
static_assert(offsetof(FClamberingInputConfig, TargetAimInvalidateAngle) == 0x0001C0, "Member 'FClamberingInputConfig::TargetAimInvalidateAngle' has a wrong offset!");
static_assert(offsetof(FClamberingInputConfig, TargetActorMovementInvalidateDistance) == 0x0001E8, "Member 'FClamberingInputConfig::TargetActorMovementInvalidateDistance' has a wrong offset!");

// ScriptStruct ClamberingCodeRuntime.ClamberingTargetingConfig_Ledge
// 0x02A8 (0x02A8 - 0x0000)
struct FClamberingTargetingConfig_Ledge final
{
public:
	struct FScalableFloat                         ForwardCastDistance;                               // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         ForwardCastRadius;                                 // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         FowardCast2D;                                      // 0x0050(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         VerticalSurfaceThreshold;                          // 0x0078(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         HorizontalSurfaceThreshold;                        // 0x00A0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         UpwardDistanceCapsuleHeightMultiplier;             // 0x00C8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         UpwardStartDistanceCapsuleHeightMultiplier;        // 0x00F0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         DownwardDistanceCapsuleHeightMultiplier;           // 0x0118(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MinimumLedgeHeight;                                // 0x0140(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MinimumLedgeHeightWater;                           // 0x0168(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         ForwardSphereCastRadius;                           // 0x0190(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         DownwardSphereCastRadius;                          // 0x01B8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         AllowNonWalkableSurfaces;                          // 0x01E0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         TargetValidationEnabled;                           // 0x0208(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         TargetValidationCapsuleRadiusModifier;             // 0x0230(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         TargetValidationCapsuleHalfHeightModifier;         // 0x0258(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         TargetValidationCapsuleBottomVerticalOffset;       // 0x0280(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClamberingTargetingConfig_Ledge) == 0x000008, "Wrong alignment on FClamberingTargetingConfig_Ledge");
static_assert(sizeof(FClamberingTargetingConfig_Ledge) == 0x0002A8, "Wrong size on FClamberingTargetingConfig_Ledge");
static_assert(offsetof(FClamberingTargetingConfig_Ledge, ForwardCastDistance) == 0x000000, "Member 'FClamberingTargetingConfig_Ledge::ForwardCastDistance' has a wrong offset!");
static_assert(offsetof(FClamberingTargetingConfig_Ledge, ForwardCastRadius) == 0x000028, "Member 'FClamberingTargetingConfig_Ledge::ForwardCastRadius' has a wrong offset!");
static_assert(offsetof(FClamberingTargetingConfig_Ledge, FowardCast2D) == 0x000050, "Member 'FClamberingTargetingConfig_Ledge::FowardCast2D' has a wrong offset!");
static_assert(offsetof(FClamberingTargetingConfig_Ledge, VerticalSurfaceThreshold) == 0x000078, "Member 'FClamberingTargetingConfig_Ledge::VerticalSurfaceThreshold' has a wrong offset!");
static_assert(offsetof(FClamberingTargetingConfig_Ledge, HorizontalSurfaceThreshold) == 0x0000A0, "Member 'FClamberingTargetingConfig_Ledge::HorizontalSurfaceThreshold' has a wrong offset!");
static_assert(offsetof(FClamberingTargetingConfig_Ledge, UpwardDistanceCapsuleHeightMultiplier) == 0x0000C8, "Member 'FClamberingTargetingConfig_Ledge::UpwardDistanceCapsuleHeightMultiplier' has a wrong offset!");
static_assert(offsetof(FClamberingTargetingConfig_Ledge, UpwardStartDistanceCapsuleHeightMultiplier) == 0x0000F0, "Member 'FClamberingTargetingConfig_Ledge::UpwardStartDistanceCapsuleHeightMultiplier' has a wrong offset!");
static_assert(offsetof(FClamberingTargetingConfig_Ledge, DownwardDistanceCapsuleHeightMultiplier) == 0x000118, "Member 'FClamberingTargetingConfig_Ledge::DownwardDistanceCapsuleHeightMultiplier' has a wrong offset!");
static_assert(offsetof(FClamberingTargetingConfig_Ledge, MinimumLedgeHeight) == 0x000140, "Member 'FClamberingTargetingConfig_Ledge::MinimumLedgeHeight' has a wrong offset!");
static_assert(offsetof(FClamberingTargetingConfig_Ledge, MinimumLedgeHeightWater) == 0x000168, "Member 'FClamberingTargetingConfig_Ledge::MinimumLedgeHeightWater' has a wrong offset!");
static_assert(offsetof(FClamberingTargetingConfig_Ledge, ForwardSphereCastRadius) == 0x000190, "Member 'FClamberingTargetingConfig_Ledge::ForwardSphereCastRadius' has a wrong offset!");
static_assert(offsetof(FClamberingTargetingConfig_Ledge, DownwardSphereCastRadius) == 0x0001B8, "Member 'FClamberingTargetingConfig_Ledge::DownwardSphereCastRadius' has a wrong offset!");
static_assert(offsetof(FClamberingTargetingConfig_Ledge, AllowNonWalkableSurfaces) == 0x0001E0, "Member 'FClamberingTargetingConfig_Ledge::AllowNonWalkableSurfaces' has a wrong offset!");
static_assert(offsetof(FClamberingTargetingConfig_Ledge, TargetValidationEnabled) == 0x000208, "Member 'FClamberingTargetingConfig_Ledge::TargetValidationEnabled' has a wrong offset!");
static_assert(offsetof(FClamberingTargetingConfig_Ledge, TargetValidationCapsuleRadiusModifier) == 0x000230, "Member 'FClamberingTargetingConfig_Ledge::TargetValidationCapsuleRadiusModifier' has a wrong offset!");
static_assert(offsetof(FClamberingTargetingConfig_Ledge, TargetValidationCapsuleHalfHeightModifier) == 0x000258, "Member 'FClamberingTargetingConfig_Ledge::TargetValidationCapsuleHalfHeightModifier' has a wrong offset!");
static_assert(offsetof(FClamberingTargetingConfig_Ledge, TargetValidationCapsuleBottomVerticalOffset) == 0x000280, "Member 'FClamberingTargetingConfig_Ledge::TargetValidationCapsuleBottomVerticalOffset' has a wrong offset!");

// ScriptStruct ClamberingCodeRuntime.ClamberingTargetingDebugDrawData
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FClamberingTargetingDebugDrawData
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClamberingTargetingDebugDrawData) == 0x000008, "Wrong alignment on FClamberingTargetingDebugDrawData");
static_assert(sizeof(FClamberingTargetingDebugDrawData) == 0x000028, "Wrong size on FClamberingTargetingDebugDrawData");

// ScriptStruct ClamberingCodeRuntime.ClamberingTargetingDebugDrawData_Capsule
// 0x0028 (0x0050 - 0x0028)
struct alignas(0x10) FClamberingTargetingDebugDrawData_Capsule : public FClamberingTargetingDebugDrawData
{
public:
	uint8                                         Pad_28[0x28];                                      // 0x0028(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClamberingTargetingDebugDrawData_Capsule) == 0x000010, "Wrong alignment on FClamberingTargetingDebugDrawData_Capsule");
static_assert(sizeof(FClamberingTargetingDebugDrawData_Capsule) == 0x000050, "Wrong size on FClamberingTargetingDebugDrawData_Capsule");

// ScriptStruct ClamberingCodeRuntime.ClamberingTargetingDebugDrawData_Line
// 0x0018 (0x0040 - 0x0028)
struct FClamberingTargetingDebugDrawData_Line final : public FClamberingTargetingDebugDrawData
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClamberingTargetingDebugDrawData_Line) == 0x000008, "Wrong alignment on FClamberingTargetingDebugDrawData_Line");
static_assert(sizeof(FClamberingTargetingDebugDrawData_Line) == 0x000040, "Wrong size on FClamberingTargetingDebugDrawData_Line");

// ScriptStruct ClamberingCodeRuntime.ClamberingTargetingDebugDrawData_Sphere
// 0x0008 (0x0030 - 0x0028)
struct FClamberingTargetingDebugDrawData_Sphere : public FClamberingTargetingDebugDrawData
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClamberingTargetingDebugDrawData_Sphere) == 0x000008, "Wrong alignment on FClamberingTargetingDebugDrawData_Sphere");
static_assert(sizeof(FClamberingTargetingDebugDrawData_Sphere) == 0x000030, "Wrong size on FClamberingTargetingDebugDrawData_Sphere");

// ScriptStruct ClamberingCodeRuntime.ClamberingTargetingDebugDrawData_DirectionalArrow
// 0x0020 (0x0048 - 0x0028)
struct FClamberingTargetingDebugDrawData_DirectionalArrow final : public FClamberingTargetingDebugDrawData
{
public:
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClamberingTargetingDebugDrawData_DirectionalArrow) == 0x000008, "Wrong alignment on FClamberingTargetingDebugDrawData_DirectionalArrow");
static_assert(sizeof(FClamberingTargetingDebugDrawData_DirectionalArrow) == 0x000048, "Wrong size on FClamberingTargetingDebugDrawData_DirectionalArrow");

// ScriptStruct ClamberingCodeRuntime.ClamberingTargetingDebugDrawData_CapsuleCast
// 0x0020 (0x0070 - 0x0050)
struct FClamberingTargetingDebugDrawData_CapsuleCast final : public FClamberingTargetingDebugDrawData_Capsule
{
public:
	uint8                                         Pad_50[0x20];                                      // 0x0050(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClamberingTargetingDebugDrawData_CapsuleCast) == 0x000010, "Wrong alignment on FClamberingTargetingDebugDrawData_CapsuleCast");
static_assert(sizeof(FClamberingTargetingDebugDrawData_CapsuleCast) == 0x000070, "Wrong size on FClamberingTargetingDebugDrawData_CapsuleCast");

// ScriptStruct ClamberingCodeRuntime.ClamberingTargetingDebugDrawData_SphereCast
// 0x0018 (0x0048 - 0x0030)
struct FClamberingTargetingDebugDrawData_SphereCast final : public FClamberingTargetingDebugDrawData_Sphere
{
public:
	uint8                                         Pad_30[0x18];                                      // 0x0030(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClamberingTargetingDebugDrawData_SphereCast) == 0x000008, "Wrong alignment on FClamberingTargetingDebugDrawData_SphereCast");
static_assert(sizeof(FClamberingTargetingDebugDrawData_SphereCast) == 0x000048, "Wrong size on FClamberingTargetingDebugDrawData_SphereCast");

// ScriptStruct ClamberingCodeRuntime.ClamberingTargetingDebugData
// 0x0001 (0x0001 - 0x0000)
struct FClamberingTargetingDebugData
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClamberingTargetingDebugData) == 0x000001, "Wrong alignment on FClamberingTargetingDebugData");
static_assert(sizeof(FClamberingTargetingDebugData) == 0x000001, "Wrong size on FClamberingTargetingDebugData");

// ScriptStruct ClamberingCodeRuntime.ClamberingTargetingDebugData_Ledge
// 0x0000 (0x0001 - 0x0001)
struct FClamberingTargetingDebugData_Ledge final : public FClamberingTargetingDebugData
{
};
static_assert(alignof(FClamberingTargetingDebugData_Ledge) == 0x000001, "Wrong alignment on FClamberingTargetingDebugData_Ledge");
static_assert(sizeof(FClamberingTargetingDebugData_Ledge) == 0x000001, "Wrong size on FClamberingTargetingDebugData_Ledge");

// ScriptStruct ClamberingCodeRuntime.ClamberingTargetingData
// 0x00D0 (0x00D0 - 0x0000)
struct FClamberingTargetingData final
{
public:
	EClamberingType                               Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bValid : 1;                                        // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 SourceActor;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SourceLocation;                                    // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SourceAim;                                         // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WallLocation;                                      // 0x0040(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WallNormal;                                        // 0x0058(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0070(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetNormal;                                      // 0x0088(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x00A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                        TargetActorComponent;                              // 0x00A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetActorComponentLocation;                      // 0x00B0(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetActorBoneName;                               // 0x00C8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClamberingTargetingData) == 0x000008, "Wrong alignment on FClamberingTargetingData");
static_assert(sizeof(FClamberingTargetingData) == 0x0000D0, "Wrong size on FClamberingTargetingData");
static_assert(offsetof(FClamberingTargetingData, Type) == 0x000000, "Member 'FClamberingTargetingData::Type' has a wrong offset!");
static_assert(offsetof(FClamberingTargetingData, SourceActor) == 0x000008, "Member 'FClamberingTargetingData::SourceActor' has a wrong offset!");
static_assert(offsetof(FClamberingTargetingData, SourceLocation) == 0x000010, "Member 'FClamberingTargetingData::SourceLocation' has a wrong offset!");
static_assert(offsetof(FClamberingTargetingData, SourceAim) == 0x000028, "Member 'FClamberingTargetingData::SourceAim' has a wrong offset!");
static_assert(offsetof(FClamberingTargetingData, WallLocation) == 0x000040, "Member 'FClamberingTargetingData::WallLocation' has a wrong offset!");
static_assert(offsetof(FClamberingTargetingData, WallNormal) == 0x000058, "Member 'FClamberingTargetingData::WallNormal' has a wrong offset!");
static_assert(offsetof(FClamberingTargetingData, TargetLocation) == 0x000070, "Member 'FClamberingTargetingData::TargetLocation' has a wrong offset!");
static_assert(offsetof(FClamberingTargetingData, TargetNormal) == 0x000088, "Member 'FClamberingTargetingData::TargetNormal' has a wrong offset!");
static_assert(offsetof(FClamberingTargetingData, TargetActor) == 0x0000A0, "Member 'FClamberingTargetingData::TargetActor' has a wrong offset!");
static_assert(offsetof(FClamberingTargetingData, TargetActorComponent) == 0x0000A8, "Member 'FClamberingTargetingData::TargetActorComponent' has a wrong offset!");
static_assert(offsetof(FClamberingTargetingData, TargetActorComponentLocation) == 0x0000B0, "Member 'FClamberingTargetingData::TargetActorComponentLocation' has a wrong offset!");
static_assert(offsetof(FClamberingTargetingData, TargetActorBoneName) == 0x0000C8, "Member 'FClamberingTargetingData::TargetActorBoneName' has a wrong offset!");

// ScriptStruct ClamberingCodeRuntime.ReplicatedClamberingTargetingData
// 0x0078 (0x0078 - 0x0000)
struct FReplicatedClamberingTargetingData final
{
public:
	EClamberingType                               Type;                                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize10                  SourceLocation;                                    // 0x0008(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize100                 WallLocation;                                      // 0x0020(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        WallNormalYawQuantized;                            // 0x0038(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        WallNormalPitchQuantized;                          // 0x003A(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize100                 TargetLocation;                                    // 0x0040(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        TargetNormalYawQuantized;                          // 0x0058(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        TargetNormalPitchQuantized;                        // 0x005A(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetActor;                                       // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                        TargetActorComponent;                              // 0x0068(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetActorBoneName;                               // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReplicatedClamberingTargetingData) == 0x000008, "Wrong alignment on FReplicatedClamberingTargetingData");
static_assert(sizeof(FReplicatedClamberingTargetingData) == 0x000078, "Wrong size on FReplicatedClamberingTargetingData");
static_assert(offsetof(FReplicatedClamberingTargetingData, Type) == 0x000000, "Member 'FReplicatedClamberingTargetingData::Type' has a wrong offset!");
static_assert(offsetof(FReplicatedClamberingTargetingData, SourceLocation) == 0x000008, "Member 'FReplicatedClamberingTargetingData::SourceLocation' has a wrong offset!");
static_assert(offsetof(FReplicatedClamberingTargetingData, WallLocation) == 0x000020, "Member 'FReplicatedClamberingTargetingData::WallLocation' has a wrong offset!");
static_assert(offsetof(FReplicatedClamberingTargetingData, WallNormalYawQuantized) == 0x000038, "Member 'FReplicatedClamberingTargetingData::WallNormalYawQuantized' has a wrong offset!");
static_assert(offsetof(FReplicatedClamberingTargetingData, WallNormalPitchQuantized) == 0x00003A, "Member 'FReplicatedClamberingTargetingData::WallNormalPitchQuantized' has a wrong offset!");
static_assert(offsetof(FReplicatedClamberingTargetingData, TargetLocation) == 0x000040, "Member 'FReplicatedClamberingTargetingData::TargetLocation' has a wrong offset!");
static_assert(offsetof(FReplicatedClamberingTargetingData, TargetNormalYawQuantized) == 0x000058, "Member 'FReplicatedClamberingTargetingData::TargetNormalYawQuantized' has a wrong offset!");
static_assert(offsetof(FReplicatedClamberingTargetingData, TargetNormalPitchQuantized) == 0x00005A, "Member 'FReplicatedClamberingTargetingData::TargetNormalPitchQuantized' has a wrong offset!");
static_assert(offsetof(FReplicatedClamberingTargetingData, TargetActor) == 0x000060, "Member 'FReplicatedClamberingTargetingData::TargetActor' has a wrong offset!");
static_assert(offsetof(FReplicatedClamberingTargetingData, TargetActorComponent) == 0x000068, "Member 'FReplicatedClamberingTargetingData::TargetActorComponent' has a wrong offset!");
static_assert(offsetof(FReplicatedClamberingTargetingData, TargetActorBoneName) == 0x000070, "Member 'FReplicatedClamberingTargetingData::TargetActorBoneName' has a wrong offset!");

// ScriptStruct ClamberingCodeRuntime.ReplicatedClamberingTargetingData_SimClient
// 0x0038 (0x0038 - 0x0000)
struct FReplicatedClamberingTargetingData_SimClient final
{
public:
	EClamberingType                               Type;                                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x1];                                        // 0x0001(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint16                                        WallNormalYawQuantized;                            // 0x0002(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize100                 TargetLocation;                                    // 0x0008(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                        TargetActorComponent;                              // 0x0028(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetActorBoneName;                               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReplicatedClamberingTargetingData_SimClient) == 0x000008, "Wrong alignment on FReplicatedClamberingTargetingData_SimClient");
static_assert(sizeof(FReplicatedClamberingTargetingData_SimClient) == 0x000038, "Wrong size on FReplicatedClamberingTargetingData_SimClient");
static_assert(offsetof(FReplicatedClamberingTargetingData_SimClient, Type) == 0x000000, "Member 'FReplicatedClamberingTargetingData_SimClient::Type' has a wrong offset!");
static_assert(offsetof(FReplicatedClamberingTargetingData_SimClient, WallNormalYawQuantized) == 0x000002, "Member 'FReplicatedClamberingTargetingData_SimClient::WallNormalYawQuantized' has a wrong offset!");
static_assert(offsetof(FReplicatedClamberingTargetingData_SimClient, TargetLocation) == 0x000008, "Member 'FReplicatedClamberingTargetingData_SimClient::TargetLocation' has a wrong offset!");
static_assert(offsetof(FReplicatedClamberingTargetingData_SimClient, TargetActor) == 0x000020, "Member 'FReplicatedClamberingTargetingData_SimClient::TargetActor' has a wrong offset!");
static_assert(offsetof(FReplicatedClamberingTargetingData_SimClient, TargetActorComponent) == 0x000028, "Member 'FReplicatedClamberingTargetingData_SimClient::TargetActorComponent' has a wrong offset!");
static_assert(offsetof(FReplicatedClamberingTargetingData_SimClient, TargetActorBoneName) == 0x000030, "Member 'FReplicatedClamberingTargetingData_SimClient::TargetActorBoneName' has a wrong offset!");

// ScriptStruct ClamberingCodeRuntime.ClamberingMovementConfig_Ledge
// 0x0050 (0x0050 - 0x0000)
struct FClamberingMovementConfig_Ledge final
{
public:
	struct FScalableFloat                         Duration;                                          // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         BlockCheckTickRate;                                // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClamberingMovementConfig_Ledge) == 0x000008, "Wrong alignment on FClamberingMovementConfig_Ledge");
static_assert(sizeof(FClamberingMovementConfig_Ledge) == 0x000050, "Wrong size on FClamberingMovementConfig_Ledge");
static_assert(offsetof(FClamberingMovementConfig_Ledge, Duration) == 0x000000, "Member 'FClamberingMovementConfig_Ledge::Duration' has a wrong offset!");
static_assert(offsetof(FClamberingMovementConfig_Ledge, BlockCheckTickRate) == 0x000028, "Member 'FClamberingMovementConfig_Ledge::BlockCheckTickRate' has a wrong offset!");

// ScriptStruct ClamberingCodeRuntime.ClamberingAnalytics_ClamberEvent
// 0x0028 (0x0028 - 0x0000)
struct FClamberingAnalytics_ClamberEvent final
{
public:
	int32                                         MatchTime;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EClamberingType                               ClamberType;                                       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ClamberLocation;                                   // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EClamberingFailedReason                       FailureReason;                                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClamberingAnalytics_ClamberEvent) == 0x000008, "Wrong alignment on FClamberingAnalytics_ClamberEvent");
static_assert(sizeof(FClamberingAnalytics_ClamberEvent) == 0x000028, "Wrong size on FClamberingAnalytics_ClamberEvent");
static_assert(offsetof(FClamberingAnalytics_ClamberEvent, MatchTime) == 0x000000, "Member 'FClamberingAnalytics_ClamberEvent::MatchTime' has a wrong offset!");
static_assert(offsetof(FClamberingAnalytics_ClamberEvent, ClamberType) == 0x000004, "Member 'FClamberingAnalytics_ClamberEvent::ClamberType' has a wrong offset!");
static_assert(offsetof(FClamberingAnalytics_ClamberEvent, ClamberLocation) == 0x000008, "Member 'FClamberingAnalytics_ClamberEvent::ClamberLocation' has a wrong offset!");
static_assert(offsetof(FClamberingAnalytics_ClamberEvent, FailureReason) == 0x000020, "Member 'FClamberingAnalytics_ClamberEvent::FailureReason' has a wrong offset!");

}

