#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CreatureBaseNonRidableComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass CreatureBaseNonRidableComponent.CreatureBaseNonRidableComponent_C
// 0x0018 (0x00B8 - 0x00A0)
class UCreatureBaseNonRidableComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         Jump_Attach_Ground_Height_Min;                     // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Jump_Attach_Ground_Height_Buffer;                  // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Uses_Alt_Riding_Message;                           // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          KillOnRideAttempt;                                 // 0x00B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AlternateRidingEvent();
	void ExecuteUbergraph_CreatureBaseNonRidableComponent(int32 EntryPoint);
	void GetRidingInfoFromTarget(float* JumpAttachGroundHeightMin, float* JumpAttachGroundHeightBuffer, bool* UsesAltRidingMessage);
	void ToggleRidingAlternative();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CreatureBaseNonRidableComponent_C">();
	}
	static class UCreatureBaseNonRidableComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCreatureBaseNonRidableComponent_C>();
	}
};
static_assert(alignof(UCreatureBaseNonRidableComponent_C) == 0x000008, "Wrong alignment on UCreatureBaseNonRidableComponent_C");
static_assert(sizeof(UCreatureBaseNonRidableComponent_C) == 0x0000B8, "Wrong size on UCreatureBaseNonRidableComponent_C");
static_assert(offsetof(UCreatureBaseNonRidableComponent_C, UberGraphFrame) == 0x0000A0, "Member 'UCreatureBaseNonRidableComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCreatureBaseNonRidableComponent_C, Jump_Attach_Ground_Height_Min) == 0x0000A8, "Member 'UCreatureBaseNonRidableComponent_C::Jump_Attach_Ground_Height_Min' has a wrong offset!");
static_assert(offsetof(UCreatureBaseNonRidableComponent_C, Jump_Attach_Ground_Height_Buffer) == 0x0000AC, "Member 'UCreatureBaseNonRidableComponent_C::Jump_Attach_Ground_Height_Buffer' has a wrong offset!");
static_assert(offsetof(UCreatureBaseNonRidableComponent_C, Uses_Alt_Riding_Message) == 0x0000B0, "Member 'UCreatureBaseNonRidableComponent_C::Uses_Alt_Riding_Message' has a wrong offset!");
static_assert(offsetof(UCreatureBaseNonRidableComponent_C, KillOnRideAttempt) == 0x0000B1, "Member 'UCreatureBaseNonRidableComponent_C::KillOnRideAttempt' has a wrong offset!");

}

