#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Parent_StopLight

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "StopLight_Struct_structs.hpp"
#include "DayPhaseFloats_structs.hpp"
#include "Parent_BuildingPropActor_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Parent_StopLight.Parent_StopLight_C
// 0x0178 (0x10F0 - 0x0F78)
class AParent_StopLight_C : public AParent_BuildingPropActor_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Parent_StopLight_C;                 // 0x0F78(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          DebugWind_0;                                       // 0x0F80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F81[0x7];                                      // 0x0F81(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             OriginalMaterials_0;                               // 0x0F88(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UMaterialInterface*>             IntenseWindMaterialsForPreview_0;                  // 0x0F98(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UStaticMeshComponent*                   Wind_Intensity_Debug_Mesh_0;                       // 0x0FA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Debug_TempMaterial_0;                              // 0x0FB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Debug_Wind_Intensity_0;                            // 0x0FB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DebugWindYaw_0;                                    // 0x0FBC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDayPhaseFloats                        Light_Intensity_Over_Time_of_Day__0;               // 0x0FC0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FDayPhaseFloats                        Emissive_Intensity_Over_Time_of_Day_0;             // 0x0FD0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CodeControlled_NumberOfMaterials_0;                // 0x0FE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FE4[0x4];                                      // 0x0FE4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   CodeControlled_EmissiveColor_0;                    // 0x0FE8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<float>                                 CodeControlled_LightConeOpacity_0;                 // 0x0FF8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Animate_Emissive_and_Lights_Over_Time_0;           // 0x1008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_1009[0x3];                                     // 0x1009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Day_Phase_Transition_Length_0;                     // 0x100C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewVar_0;                                          // 0x1010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1011[0x3];                                     // 0x1011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Last_successful_index;                             // 0x1014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        Light_Vector;                                      // 0x1018(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FStopLight_Struct>              LightArrays;                                       // 0x1028(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class ULightComponent*>                TempLightArray;                                    // 0x1038(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<int32>                                 IncrementingNumber;                                // 0x1048(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Mod_Number;                                        // 0x1058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewVar_1;                                          // 0x105C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         light_intensity;                                   // 0x1060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         IntersectionID;                                    // 0x1064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         RandomIntersectionTimeOffset;                      // 0x1068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_106C[0x4];                                     // 0x106C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStopLight_Struct                      Temp_Variable;                                     // 0x1070(0x0038)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewVar_2;                                          // 0x10A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Light_has_run_once;                                // 0x10AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10AD[0x3];                                     // 0x10AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStopLight_Struct                      NewVar_3;                                          // 0x10B0(0x0038)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time_Per_Light_Phase;                              // 0x10E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Begin_Working();
	void ExecuteUbergraph_Parent_StopLight(int32 EntryPoint);
	void ReceiveBeginPlay();
	void Switchlights();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Parent_StopLight_C">();
	}
	static class AParent_StopLight_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AParent_StopLight_C>();
	}
};
static_assert(alignof(AParent_StopLight_C) == 0x000008, "Wrong alignment on AParent_StopLight_C");
static_assert(sizeof(AParent_StopLight_C) == 0x0010F0, "Wrong size on AParent_StopLight_C");
static_assert(offsetof(AParent_StopLight_C, UberGraphFrame_Parent_StopLight_C) == 0x000F78, "Member 'AParent_StopLight_C::UberGraphFrame_Parent_StopLight_C' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, DebugWind_0) == 0x000F80, "Member 'AParent_StopLight_C::DebugWind_0' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, OriginalMaterials_0) == 0x000F88, "Member 'AParent_StopLight_C::OriginalMaterials_0' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, IntenseWindMaterialsForPreview_0) == 0x000F98, "Member 'AParent_StopLight_C::IntenseWindMaterialsForPreview_0' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, Wind_Intensity_Debug_Mesh_0) == 0x000FA8, "Member 'AParent_StopLight_C::Wind_Intensity_Debug_Mesh_0' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, Debug_TempMaterial_0) == 0x000FB0, "Member 'AParent_StopLight_C::Debug_TempMaterial_0' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, Debug_Wind_Intensity_0) == 0x000FB8, "Member 'AParent_StopLight_C::Debug_Wind_Intensity_0' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, DebugWindYaw_0) == 0x000FBC, "Member 'AParent_StopLight_C::DebugWindYaw_0' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, Light_Intensity_Over_Time_of_Day__0) == 0x000FC0, "Member 'AParent_StopLight_C::Light_Intensity_Over_Time_of_Day__0' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, Emissive_Intensity_Over_Time_of_Day_0) == 0x000FD0, "Member 'AParent_StopLight_C::Emissive_Intensity_Over_Time_of_Day_0' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, CodeControlled_NumberOfMaterials_0) == 0x000FE0, "Member 'AParent_StopLight_C::CodeControlled_NumberOfMaterials_0' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, CodeControlled_EmissiveColor_0) == 0x000FE8, "Member 'AParent_StopLight_C::CodeControlled_EmissiveColor_0' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, CodeControlled_LightConeOpacity_0) == 0x000FF8, "Member 'AParent_StopLight_C::CodeControlled_LightConeOpacity_0' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, Animate_Emissive_and_Lights_Over_Time_0) == 0x001008, "Member 'AParent_StopLight_C::Animate_Emissive_and_Lights_Over_Time_0' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, Day_Phase_Transition_Length_0) == 0x00100C, "Member 'AParent_StopLight_C::Day_Phase_Transition_Length_0' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, NewVar_0) == 0x001010, "Member 'AParent_StopLight_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, Last_successful_index) == 0x001014, "Member 'AParent_StopLight_C::Last_successful_index' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, Light_Vector) == 0x001018, "Member 'AParent_StopLight_C::Light_Vector' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, LightArrays) == 0x001028, "Member 'AParent_StopLight_C::LightArrays' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, TempLightArray) == 0x001038, "Member 'AParent_StopLight_C::TempLightArray' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, IncrementingNumber) == 0x001048, "Member 'AParent_StopLight_C::IncrementingNumber' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, Mod_Number) == 0x001058, "Member 'AParent_StopLight_C::Mod_Number' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, NewVar_1) == 0x00105C, "Member 'AParent_StopLight_C::NewVar_1' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, light_intensity) == 0x001060, "Member 'AParent_StopLight_C::light_intensity' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, IntersectionID) == 0x001064, "Member 'AParent_StopLight_C::IntersectionID' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, RandomIntersectionTimeOffset) == 0x001068, "Member 'AParent_StopLight_C::RandomIntersectionTimeOffset' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, Temp_Variable) == 0x001070, "Member 'AParent_StopLight_C::Temp_Variable' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, NewVar_2) == 0x0010A8, "Member 'AParent_StopLight_C::NewVar_2' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, Light_has_run_once) == 0x0010AC, "Member 'AParent_StopLight_C::Light_has_run_once' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, NewVar_3) == 0x0010B0, "Member 'AParent_StopLight_C::NewVar_3' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, Time_Per_Light_Phase) == 0x0010E8, "Member 'AParent_StopLight_C::Time_Per_Light_Phase' has a wrong offset!");

}

