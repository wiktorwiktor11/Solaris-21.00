#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_MeleeManager_Variant_Template_Parent

#include "Basic.hpp"

#include "B_MeleeManager_Variant_Template_Parent_classes.hpp"
#include "B_MeleeManager_Variant_Template_Parent_parameters.hpp"


namespace SDK
{

// Function B_MeleeManager_Variant_Template_Parent.B_MeleeManager_Variant_Template_Parent_C.Valid for Actor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_MeleeManager_Variant_Template_Parent_C::Valid_for_Actor(class AActor* Actor, bool* Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MeleeManager_Variant_Template_Parent_C", "Valid for Actor");

	Params::B_MeleeManager_Variant_Template_Parent_C_Valid_for_Actor Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (Valid != nullptr)
		*Valid = Parms.Valid;
}


// Function B_MeleeManager_Variant_Template_Parent.B_MeleeManager_Variant_Template_Parent_C.Priority Check And Set
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ModifierRank                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_MeleeManager_Variant_Template_Parent_C::Priority_Check_And_Set(int32 ModifierRank)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MeleeManager_Variant_Template_Parent_C", "Priority Check And Set");

	Params::B_MeleeManager_Variant_Template_Parent_C_Priority_Check_And_Set Parms{};

	Parms.ModifierRank = ModifierRank;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_MeleeManager_Variant_Template_Parent.B_MeleeManager_Variant_Template_Parent_C.IsValidTeam
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_MeleeManager_Variant_Template_Parent_C::IsValidTeam(const class AActor* Actor, bool* Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MeleeManager_Variant_Template_Parent_C", "IsValidTeam");

	Params::B_MeleeManager_Variant_Template_Parent_C_IsValidTeam Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (Valid != nullptr)
		*Valid = Parms.Valid;
}


// Function B_MeleeManager_Variant_Template_Parent.B_MeleeManager_Variant_Template_Parent_C.IsValidClass
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_MeleeManager_Variant_Template_Parent_C::IsValidClass(class AActor* Actor, bool* Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MeleeManager_Variant_Template_Parent_C", "IsValidClass");

	Params::B_MeleeManager_Variant_Template_Parent_C_IsValidClass Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (Valid != nullptr)
		*Valid = Parms.Valid;
}


// Function B_MeleeManager_Variant_Template_Parent.B_MeleeManager_Variant_Template_Parent_C.GetCannonballImpactRadius
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   CannonballImpactRadius_0                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_MeleeManager_Variant_Template_Parent_C::GetCannonballImpactRadius(float* CannonballImpactRadius_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MeleeManager_Variant_Template_Parent_C", "GetCannonballImpactRadius");

	Params::B_MeleeManager_Variant_Template_Parent_C_GetCannonballImpactRadius Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CannonballImpactRadius_0 != nullptr)
		*CannonballImpactRadius_0 = Parms.CannonballImpactRadius_0;
}


// Function B_MeleeManager_Variant_Template_Parent.B_MeleeManager_Variant_Template_Parent_C.FindPerHitOptions
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FGameplayTag                     HitTag                                                 (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FCreativeMeleeHitOptions         MeleeHitOptions                                        (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_MeleeManager_Variant_Template_Parent_C::FindPerHitOptions(const struct FGameplayTag& HitTag, struct FCreativeMeleeHitOptions* MeleeHitOptions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MeleeManager_Variant_Template_Parent_C", "FindPerHitOptions");

	Params::B_MeleeManager_Variant_Template_Parent_C_FindPerHitOptions Parms{};

	Parms.HitTag = std::move(HitTag);

	UObject::ProcessEvent(Func, &Parms);

	if (MeleeHitOptions != nullptr)
		*MeleeHitOptions = std::move(Parms.MeleeHitOptions);
}


// Function B_MeleeManager_Variant_Template_Parent.B_MeleeManager_Variant_Template_Parent_C.Accumulate
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCreativeMeleeOptions            AccumulatedState                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// class AActor*                           Target_Actor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_MeleeManager_Variant_Template_Parent_C::Accumulate(struct FCreativeMeleeOptions& AccumulatedState, class AActor* Target_Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MeleeManager_Variant_Template_Parent_C", "Accumulate");

	Params::B_MeleeManager_Variant_Template_Parent_C_Accumulate Parms{};

	Parms.AccumulatedState = std::move(AccumulatedState);
	Parms.Target_Actor = Target_Actor;

	UObject::ProcessEvent(Func, &Parms);

	AccumulatedState = std::move(Parms.AccumulatedState);
}

}

