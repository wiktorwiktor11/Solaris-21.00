#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IKRig

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum IKRig.EIKRigGoalSpace
// NumValues: 0x0004
enum class EIKRigGoalSpace : uint8
{
	Component                                = 0,
	Additive                                 = 1,
	World                                    = 2,
	EIKRigGoalSpace_MAX                      = 3,
};

// Enum IKRig.EIKRigGoalTransformSource
// NumValues: 0x0004
enum class EIKRigGoalTransformSource : uint8
{
	Manual                                   = 0,
	Bone                                     = 1,
	ActorComponent                           = 2,
	EIKRigGoalTransformSource_MAX            = 3,
};

// ScriptStruct IKRig.IKRigGoal
// 0x0090 (0x0090 - 0x0000)
struct FIKRigGoal final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIKRigGoalTransformSource                     TransformSource;                                   // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OptionalSourceBone;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PositionAlpha;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationAlpha;                                     // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIKRigGoalSpace                               PositionSpace;                                     // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIKRigGoalSpace                               RotationSpace;                                     // 0x0049(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FinalBlendedPosition;                              // 0x0050(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  FinalBlendedRotation;                              // 0x0070(0x0020)(Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIKRigGoal) == 0x000010, "Wrong alignment on FIKRigGoal");
static_assert(sizeof(FIKRigGoal) == 0x000090, "Wrong size on FIKRigGoal");
static_assert(offsetof(FIKRigGoal, Name) == 0x000000, "Member 'FIKRigGoal::Name' has a wrong offset!");
static_assert(offsetof(FIKRigGoal, TransformSource) == 0x000004, "Member 'FIKRigGoal::TransformSource' has a wrong offset!");
static_assert(offsetof(FIKRigGoal, OptionalSourceBone) == 0x000008, "Member 'FIKRigGoal::OptionalSourceBone' has a wrong offset!");
static_assert(offsetof(FIKRigGoal, Position) == 0x000010, "Member 'FIKRigGoal::Position' has a wrong offset!");
static_assert(offsetof(FIKRigGoal, Rotation) == 0x000028, "Member 'FIKRigGoal::Rotation' has a wrong offset!");
static_assert(offsetof(FIKRigGoal, PositionAlpha) == 0x000040, "Member 'FIKRigGoal::PositionAlpha' has a wrong offset!");
static_assert(offsetof(FIKRigGoal, RotationAlpha) == 0x000044, "Member 'FIKRigGoal::RotationAlpha' has a wrong offset!");
static_assert(offsetof(FIKRigGoal, PositionSpace) == 0x000048, "Member 'FIKRigGoal::PositionSpace' has a wrong offset!");
static_assert(offsetof(FIKRigGoal, RotationSpace) == 0x000049, "Member 'FIKRigGoal::RotationSpace' has a wrong offset!");
static_assert(offsetof(FIKRigGoal, FinalBlendedPosition) == 0x000050, "Member 'FIKRigGoal::FinalBlendedPosition' has a wrong offset!");
static_assert(offsetof(FIKRigGoal, FinalBlendedRotation) == 0x000070, "Member 'FIKRigGoal::FinalBlendedRotation' has a wrong offset!");

// ScriptStruct IKRig.AnimNode_IKRig
// 0x00E8 (0x00F8 - 0x0010)
struct FAnimNode_IKRig final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Source;                                            // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class UIKRigDefinition*                       RigDefinitionAsset;                                // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FIKRigGoal>                     Goals;                                             // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bStartFromRefPose;                                 // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UIKRigProcessor*                        IKRigProcessor;                                    // 0x0040(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_48[0xB0];                                      // 0x0048(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_IKRig) == 0x000008, "Wrong alignment on FAnimNode_IKRig");
static_assert(sizeof(FAnimNode_IKRig) == 0x0000F8, "Wrong size on FAnimNode_IKRig");
static_assert(offsetof(FAnimNode_IKRig, Source) == 0x000010, "Member 'FAnimNode_IKRig::Source' has a wrong offset!");
static_assert(offsetof(FAnimNode_IKRig, RigDefinitionAsset) == 0x000020, "Member 'FAnimNode_IKRig::RigDefinitionAsset' has a wrong offset!");
static_assert(offsetof(FAnimNode_IKRig, Goals) == 0x000028, "Member 'FAnimNode_IKRig::Goals' has a wrong offset!");
static_assert(offsetof(FAnimNode_IKRig, bStartFromRefPose) == 0x000038, "Member 'FAnimNode_IKRig::bStartFromRefPose' has a wrong offset!");
static_assert(offsetof(FAnimNode_IKRig, IKRigProcessor) == 0x000040, "Member 'FAnimNode_IKRig::IKRigProcessor' has a wrong offset!");

// ScriptStruct IKRig.AnimNode_RetargetPoseFromMesh
// 0x0040 (0x0050 - 0x0010)
struct FAnimNode_RetargetPoseFromMesh final : public FAnimNode_Base
{
public:
	TWeakObjectPtr<class USkeletalMeshComponent>  SourceMeshComponent;                               // 0x0010(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAttachedParent;                                // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UIKRetargeter*                          IKRetargeterAsset;                                 // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UIKRetargetProcessor*                   Processor;                                         // 0x0038(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_RetargetPoseFromMesh) == 0x000008, "Wrong alignment on FAnimNode_RetargetPoseFromMesh");
static_assert(sizeof(FAnimNode_RetargetPoseFromMesh) == 0x000050, "Wrong size on FAnimNode_RetargetPoseFromMesh");
static_assert(offsetof(FAnimNode_RetargetPoseFromMesh, SourceMeshComponent) == 0x000010, "Member 'FAnimNode_RetargetPoseFromMesh::SourceMeshComponent' has a wrong offset!");
static_assert(offsetof(FAnimNode_RetargetPoseFromMesh, bUseAttachedParent) == 0x000018, "Member 'FAnimNode_RetargetPoseFromMesh::bUseAttachedParent' has a wrong offset!");
static_assert(offsetof(FAnimNode_RetargetPoseFromMesh, IKRetargeterAsset) == 0x000020, "Member 'FAnimNode_RetargetPoseFromMesh::IKRetargeterAsset' has a wrong offset!");
static_assert(offsetof(FAnimNode_RetargetPoseFromMesh, Processor) == 0x000038, "Member 'FAnimNode_RetargetPoseFromMesh::Processor' has a wrong offset!");

// ScriptStruct IKRig.RetargetChainMap
// 0x000C (0x000C - 0x0000)
struct FRetargetChainMap final
{
public:
	class FName                                   SourceChain;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetChain;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Extension;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRetargetChainMap) == 0x000004, "Wrong alignment on FRetargetChainMap");
static_assert(sizeof(FRetargetChainMap) == 0x00000C, "Wrong size on FRetargetChainMap");
static_assert(offsetof(FRetargetChainMap, SourceChain) == 0x000000, "Member 'FRetargetChainMap::SourceChain' has a wrong offset!");
static_assert(offsetof(FRetargetChainMap, TargetChain) == 0x000004, "Member 'FRetargetChainMap::TargetChain' has a wrong offset!");
static_assert(offsetof(FRetargetChainMap, Extension) == 0x000008, "Member 'FRetargetChainMap::Extension' has a wrong offset!");

// ScriptStruct IKRig.IKRetargetPose
// 0x0068 (0x0068 - 0x0000)
struct FIKRetargetPose final
{
public:
	struct FVector                                RootTranslationOffset;                             // 0x0000(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FQuat>               BoneRotationOffsets;                               // 0x0018(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIKRetargetPose) == 0x000008, "Wrong alignment on FIKRetargetPose");
static_assert(sizeof(FIKRetargetPose) == 0x000068, "Wrong size on FIKRetargetPose");
static_assert(offsetof(FIKRetargetPose, RootTranslationOffset) == 0x000000, "Member 'FIKRetargetPose::RootTranslationOffset' has a wrong offset!");
static_assert(offsetof(FIKRetargetPose, BoneRotationOffsets) == 0x000018, "Member 'FIKRetargetPose::BoneRotationOffsets' has a wrong offset!");

// ScriptStruct IKRig.IKRigGoalContainer
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FIKRigGoalContainer final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FIKRigGoalContainer) == 0x000008, "Wrong alignment on FIKRigGoalContainer");
static_assert(sizeof(FIKRigGoalContainer) == 0x000010, "Wrong size on FIKRigGoalContainer");

// ScriptStruct IKRig.BoneChain
// 0x0010 (0x0010 - 0x0000)
struct FBoneChain final
{
public:
	class FName                                   ChainName;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartBone;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndBone;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IKGoalName;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBoneChain) == 0x000004, "Wrong alignment on FBoneChain");
static_assert(sizeof(FBoneChain) == 0x000010, "Wrong size on FBoneChain");
static_assert(offsetof(FBoneChain, ChainName) == 0x000000, "Member 'FBoneChain::ChainName' has a wrong offset!");
static_assert(offsetof(FBoneChain, StartBone) == 0x000004, "Member 'FBoneChain::StartBone' has a wrong offset!");
static_assert(offsetof(FBoneChain, EndBone) == 0x000008, "Member 'FBoneChain::EndBone' has a wrong offset!");
static_assert(offsetof(FBoneChain, IKGoalName) == 0x00000C, "Member 'FBoneChain::IKGoalName' has a wrong offset!");

// ScriptStruct IKRig.RetargetDefinition
// 0x0018 (0x0018 - 0x0000)
struct FRetargetDefinition final
{
public:
	class FName                                   RootBone;                                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBoneChain>                     BoneChains;                                        // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FRetargetDefinition) == 0x000008, "Wrong alignment on FRetargetDefinition");
static_assert(sizeof(FRetargetDefinition) == 0x000018, "Wrong size on FRetargetDefinition");
static_assert(offsetof(FRetargetDefinition, RootBone) == 0x000000, "Member 'FRetargetDefinition::RootBone' has a wrong offset!");
static_assert(offsetof(FRetargetDefinition, BoneChains) == 0x000008, "Member 'FRetargetDefinition::BoneChains' has a wrong offset!");

// ScriptStruct IKRig.GoalBone
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FGoalBone final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGoalBone) == 0x000004, "Wrong alignment on FGoalBone");
static_assert(sizeof(FGoalBone) == 0x000008, "Wrong size on FGoalBone");

// ScriptStruct IKRig.IKRigSkeletonChain
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FIKRigSkeletonChain final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FIKRigSkeletonChain) == 0x000004, "Wrong alignment on FIKRigSkeletonChain");
static_assert(sizeof(FIKRigSkeletonChain) == 0x000008, "Wrong size on FIKRigSkeletonChain");

// ScriptStruct IKRig.IKRigInputSkeleton
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FIKRigInputSkeleton final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FIKRigInputSkeleton) == 0x000008, "Wrong alignment on FIKRigInputSkeleton");
static_assert(sizeof(FIKRigInputSkeleton) == 0x000030, "Wrong size on FIKRigInputSkeleton");

// ScriptStruct IKRig.IKRigSkeleton
// 0x0070 (0x0070 - 0x0000)
struct FIKRigSkeleton final
{
public:
	TArray<class FName>                           BoneNames;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<int32>                                 ParentIndices;                                     // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class FName>                           ExcludedBones;                                     // 0x0020(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     CurrentPoseGlobal;                                 // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     CurrentPoseLocal;                                  // 0x0040(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     RefPoseGlobal;                                     // 0x0050(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x10];                                      // 0x0060(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FIKRigSkeleton) == 0x000008, "Wrong alignment on FIKRigSkeleton");
static_assert(sizeof(FIKRigSkeleton) == 0x000070, "Wrong size on FIKRigSkeleton");
static_assert(offsetof(FIKRigSkeleton, BoneNames) == 0x000000, "Member 'FIKRigSkeleton::BoneNames' has a wrong offset!");
static_assert(offsetof(FIKRigSkeleton, ParentIndices) == 0x000010, "Member 'FIKRigSkeleton::ParentIndices' has a wrong offset!");
static_assert(offsetof(FIKRigSkeleton, ExcludedBones) == 0x000020, "Member 'FIKRigSkeleton::ExcludedBones' has a wrong offset!");
static_assert(offsetof(FIKRigSkeleton, CurrentPoseGlobal) == 0x000030, "Member 'FIKRigSkeleton::CurrentPoseGlobal' has a wrong offset!");
static_assert(offsetof(FIKRigSkeleton, CurrentPoseLocal) == 0x000040, "Member 'FIKRigSkeleton::CurrentPoseLocal' has a wrong offset!");
static_assert(offsetof(FIKRigSkeleton, RefPoseGlobal) == 0x000050, "Member 'FIKRigSkeleton::RefPoseGlobal' has a wrong offset!");

// ScriptStruct IKRig.LimbSolverSettings
// 0x0024 (0x0024 - 0x0000)
struct FLimbSolverSettings final
{
public:
	float                                         ReachPrecision;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         HingeRotationAxis;                                 // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxIterations;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableLimit;                                      // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinRotationAngle;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAveragePull;                                      // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PullDistribution;                                  // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReachStepAlpha;                                    // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableTwistCorrection;                            // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         EndBoneForwardAxis;                                // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLimbSolverSettings) == 0x000004, "Wrong alignment on FLimbSolverSettings");
static_assert(sizeof(FLimbSolverSettings) == 0x000024, "Wrong size on FLimbSolverSettings");
static_assert(offsetof(FLimbSolverSettings, ReachPrecision) == 0x000000, "Member 'FLimbSolverSettings::ReachPrecision' has a wrong offset!");
static_assert(offsetof(FLimbSolverSettings, HingeRotationAxis) == 0x000004, "Member 'FLimbSolverSettings::HingeRotationAxis' has a wrong offset!");
static_assert(offsetof(FLimbSolverSettings, MaxIterations) == 0x000008, "Member 'FLimbSolverSettings::MaxIterations' has a wrong offset!");
static_assert(offsetof(FLimbSolverSettings, bEnableLimit) == 0x00000C, "Member 'FLimbSolverSettings::bEnableLimit' has a wrong offset!");
static_assert(offsetof(FLimbSolverSettings, MinRotationAngle) == 0x000010, "Member 'FLimbSolverSettings::MinRotationAngle' has a wrong offset!");
static_assert(offsetof(FLimbSolverSettings, bAveragePull) == 0x000014, "Member 'FLimbSolverSettings::bAveragePull' has a wrong offset!");
static_assert(offsetof(FLimbSolverSettings, PullDistribution) == 0x000018, "Member 'FLimbSolverSettings::PullDistribution' has a wrong offset!");
static_assert(offsetof(FLimbSolverSettings, ReachStepAlpha) == 0x00001C, "Member 'FLimbSolverSettings::ReachStepAlpha' has a wrong offset!");
static_assert(offsetof(FLimbSolverSettings, bEnableTwistCorrection) == 0x000020, "Member 'FLimbSolverSettings::bEnableTwistCorrection' has a wrong offset!");
static_assert(offsetof(FLimbSolverSettings, EndBoneForwardAxis) == 0x000021, "Member 'FLimbSolverSettings::EndBoneForwardAxis' has a wrong offset!");

// ScriptStruct IKRig.LimbLink
// 0x0068 (0x0068 - 0x0000)
struct alignas(0x08) FLimbLink final
{
public:
	uint8                                         Pad_0[0x68];                                       // 0x0000(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLimbLink) == 0x000008, "Wrong alignment on FLimbLink");
static_assert(sizeof(FLimbLink) == 0x000068, "Wrong size on FLimbLink");

// ScriptStruct IKRig.LimbSolver
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FLimbSolver final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLimbSolver) == 0x000008, "Wrong alignment on FLimbSolver");
static_assert(sizeof(FLimbSolver) == 0x000018, "Wrong size on FLimbSolver");

}

