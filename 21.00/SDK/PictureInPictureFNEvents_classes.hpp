#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PictureInPictureFNEvents

#include "Basic.hpp"

#include "PictureInPictureDescriptors_structs.hpp"
#include "UMG_classes.hpp"
#include "FortniteGame_classes.hpp"
#include "PictureInPictureCore_classes.hpp"


namespace SDK
{

// Class PictureInPictureFNEvents.LiveEventHUDAd
// 0x0000 (0x02B8 - 0x02B8)
class ULiveEventHUDAd final : public UUserWidget
{
public:
	void ShowAdvertisement(bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LiveEventHUDAd">();
	}
	static class ULiveEventHUDAd* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULiveEventHUDAd>();
	}
};
static_assert(alignof(ULiveEventHUDAd) == 0x000008, "Wrong alignment on ULiveEventHUDAd");
static_assert(sizeof(ULiveEventHUDAd) == 0x0002B8, "Wrong size on ULiveEventHUDAd");

// Class PictureInPictureFNEvents.PictureInPictureFNEventsCheatManager
// 0x0000 (0x0028 - 0x0028)
class UPictureInPictureFNEventsCheatManager final : public UChildCheatManager
{
public:
	void AddPiPEvent(const class FString& EventName, const class FString& VUID);
	void ListAllPiPEvents();
	void ListPiPEvents();
	void RemovePiPEvent(const class FString& EventName);
	void SelectPiPEvent(const class FString& EventName);
	void StartPiPBouncingLlama();
	void StopPiPBouncingLlama();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PictureInPictureFNEventsCheatManager">();
	}
	static class UPictureInPictureFNEventsCheatManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPictureInPictureFNEventsCheatManager>();
	}
};
static_assert(alignof(UPictureInPictureFNEventsCheatManager) == 0x000008, "Wrong alignment on UPictureInPictureFNEventsCheatManager");
static_assert(sizeof(UPictureInPictureFNEventsCheatManager) == 0x000028, "Wrong size on UPictureInPictureFNEventsCheatManager");

// Class PictureInPictureFNEvents.PictureInPictureFNEventsClient
// 0x0000 (0x00A8 - 0x00A8)
class UPictureInPictureFNEventsClient final : public UPictureInPictureClient
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PictureInPictureFNEventsClient">();
	}
	static class UPictureInPictureFNEventsClient* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPictureInPictureFNEventsClient>();
	}
};
static_assert(alignof(UPictureInPictureFNEventsClient) == 0x000008, "Wrong alignment on UPictureInPictureFNEventsClient");
static_assert(sizeof(UPictureInPictureFNEventsClient) == 0x0000A8, "Wrong size on UPictureInPictureFNEventsClient");

// Class PictureInPictureFNEvents.PictureInPictureFNEventsController
// 0x0030 (0x0588 - 0x0558)
class UPictureInPictureFNEventsController final : public UPictureInPictureMediaController
{
public:
	class UPictureInPictureFNEventsClient*        FNEventsClient;                                    // 0x0558(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULiveEventHUDAd*                        HUDAdvertWidget;                                   // 0x0560(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_568[0x20];                                     // 0x0568(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddPartnerActionAnalytics(const class FString& InPartnerName, EPictureInPictureAction InActionType);
	void ExitEvent();
	void HandleFNMediaEventsStreams(const struct FFortMediaEventsStreamAssets& VideoStreamAssets);
	void HandleFNMediaRemoveEventsStream(const class FString& InEventName);
	void OnClientLoginSuccess();
	void OnClientLogoutSuccess();
	void UpdateClientLoginState(const TArray<struct FPiPPartnerSource>& UpdatedSources);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PictureInPictureFNEventsController">();
	}
	static class UPictureInPictureFNEventsController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPictureInPictureFNEventsController>();
	}
};
static_assert(alignof(UPictureInPictureFNEventsController) == 0x000008, "Wrong alignment on UPictureInPictureFNEventsController");
static_assert(sizeof(UPictureInPictureFNEventsController) == 0x000588, "Wrong size on UPictureInPictureFNEventsController");
static_assert(offsetof(UPictureInPictureFNEventsController, FNEventsClient) == 0x000558, "Member 'UPictureInPictureFNEventsController::FNEventsClient' has a wrong offset!");
static_assert(offsetof(UPictureInPictureFNEventsController, HUDAdvertWidget) == 0x000560, "Member 'UPictureInPictureFNEventsController::HUDAdvertWidget' has a wrong offset!");

}

