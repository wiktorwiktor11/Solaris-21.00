#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WrapPreview

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass WrapPreview.WrapPreview_C
// 0x00B0 (0x05B0 - 0x0500)
class AWrapPreview_C final : public AAthenaWrapPreviewActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0500(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USkyLightComponent*                     SkyLightPC;                                        // 0x0508(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 AssaultRiflePreview;                               // 0x0510(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 MechPreview;                                       // 0x0518(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyLightComponent*                     SkyLightLowMobile;                                 // 0x0520(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x0528(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             DirectionalLightMobile;                            // 0x0530(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    KeyLight_StandaloneForSwitch;                      // 0x0538(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    KeyLigh4;                                          // 0x0540(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    KeyLight7;                                         // 0x0548(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    KeyLight8;                                         // 0x0550(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    KeyLight3;                                         // 0x0558(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    RimLowerRight2;                                    // 0x0560(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    RimLeft2;                                          // 0x0568(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    Bounce2;                                           // 0x0570(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    BounceRear2;                                       // 0x0578(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    RimTopRight2;                                      // 0x0580(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    RimBottomLeft2;                                    // 0x0588(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        LightingPivot;                                     // 0x0590(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Plane;                                             // 0x0598(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          bLightsScaledForVehicle;                           // 0x05A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A1[0x3];                                      // 0x05A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaScale;                                        // 0x05A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActive;                                          // 0x05A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AlwaysOn;                                          // 0x05A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FloorEverAllowed;                                  // 0x05AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          debugConstructionLighting;                         // 0x05AB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UpdateSettings();
	void UpdateLightingScale();
	void UpdateFloorVisibility();
	void SwitchPCLighting(bool Visibility);
	void SwitchMobileLighting(bool NewParam);
	void SwitchErebusLighting(bool Visibility);
	void SetFloorEnabled(bool Floor_Enabled);
	void OnUpdateFloorMaterial(bool bEnableAutotestBackground);
	void OnSetFloorMaterial(class UMaterialInterface* InMaterialInstance);
	void OnPreviewVisualsSpawned(const bool bUseSecondaryTransitionEffects, const bool bShowFloor);
	void LightControl(bool Active);
	void HandleLightingScale();
	void ExecuteUbergraph_WrapPreview(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WrapPreview_C">();
	}
	static class AWrapPreview_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWrapPreview_C>();
	}
};
static_assert(alignof(AWrapPreview_C) == 0x000010, "Wrong alignment on AWrapPreview_C");
static_assert(sizeof(AWrapPreview_C) == 0x0005B0, "Wrong size on AWrapPreview_C");
static_assert(offsetof(AWrapPreview_C, UberGraphFrame) == 0x000500, "Member 'AWrapPreview_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, SkyLightPC) == 0x000508, "Member 'AWrapPreview_C::SkyLightPC' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, AssaultRiflePreview) == 0x000510, "Member 'AWrapPreview_C::AssaultRiflePreview' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, MechPreview) == 0x000518, "Member 'AWrapPreview_C::MechPreview' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, SkyLightLowMobile) == 0x000520, "Member 'AWrapPreview_C::SkyLightLowMobile' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, Arrow) == 0x000528, "Member 'AWrapPreview_C::Arrow' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, DirectionalLightMobile) == 0x000530, "Member 'AWrapPreview_C::DirectionalLightMobile' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, KeyLight_StandaloneForSwitch) == 0x000538, "Member 'AWrapPreview_C::KeyLight_StandaloneForSwitch' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, KeyLigh4) == 0x000540, "Member 'AWrapPreview_C::KeyLigh4' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, KeyLight7) == 0x000548, "Member 'AWrapPreview_C::KeyLight7' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, KeyLight8) == 0x000550, "Member 'AWrapPreview_C::KeyLight8' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, KeyLight3) == 0x000558, "Member 'AWrapPreview_C::KeyLight3' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, RimLowerRight2) == 0x000560, "Member 'AWrapPreview_C::RimLowerRight2' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, RimLeft2) == 0x000568, "Member 'AWrapPreview_C::RimLeft2' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, Bounce2) == 0x000570, "Member 'AWrapPreview_C::Bounce2' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, BounceRear2) == 0x000578, "Member 'AWrapPreview_C::BounceRear2' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, RimTopRight2) == 0x000580, "Member 'AWrapPreview_C::RimTopRight2' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, RimBottomLeft2) == 0x000588, "Member 'AWrapPreview_C::RimBottomLeft2' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, LightingPivot) == 0x000590, "Member 'AWrapPreview_C::LightingPivot' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, Plane) == 0x000598, "Member 'AWrapPreview_C::Plane' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, bLightsScaledForVehicle) == 0x0005A0, "Member 'AWrapPreview_C::bLightsScaledForVehicle' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, DeltaScale) == 0x0005A4, "Member 'AWrapPreview_C::DeltaScale' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, IsActive) == 0x0005A8, "Member 'AWrapPreview_C::IsActive' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, AlwaysOn) == 0x0005A9, "Member 'AWrapPreview_C::AlwaysOn' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, FloorEverAllowed) == 0x0005AA, "Member 'AWrapPreview_C::FloorEverAllowed' has a wrong offset!");
static_assert(offsetof(AWrapPreview_C, debugConstructionLighting) == 0x0005AB, "Member 'AWrapPreview_C::debugConstructionLighting' has a wrong offset!");

}

