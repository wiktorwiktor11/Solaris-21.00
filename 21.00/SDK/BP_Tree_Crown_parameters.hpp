#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Tree_Crown

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_Tree_Crown.BP_Tree_Crown_C.ExecuteUbergraph_BP_Tree_Crown
// 0x0028 (0x0028 - 0x0000)
struct BP_Tree_Crown_C_ExecuteUbergraph_BP_Tree_Crown final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Tree_Crown_C_ExecuteUbergraph_BP_Tree_Crown) == 0x000008, "Wrong alignment on BP_Tree_Crown_C_ExecuteUbergraph_BP_Tree_Crown");
static_assert(sizeof(BP_Tree_Crown_C_ExecuteUbergraph_BP_Tree_Crown) == 0x000028, "Wrong size on BP_Tree_Crown_C_ExecuteUbergraph_BP_Tree_Crown");
static_assert(offsetof(BP_Tree_Crown_C_ExecuteUbergraph_BP_Tree_Crown, EntryPoint) == 0x000000, "Member 'BP_Tree_Crown_C_ExecuteUbergraph_BP_Tree_Crown::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Tree_Crown_C_ExecuteUbergraph_BP_Tree_Crown, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000008, "Member 'BP_Tree_Crown_C_ExecuteUbergraph_BP_Tree_Crown::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Tree_Crown_C_ExecuteUbergraph_BP_Tree_Crown, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_Tree_Crown_C_ExecuteUbergraph_BP_Tree_Crown::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Tree_Crown_C_ExecuteUbergraph_BP_Tree_Crown, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000024, "Member 'BP_Tree_Crown_C_ExecuteUbergraph_BP_Tree_Crown::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function BP_Tree_Crown.BP_Tree_Crown_C.Set NSTree Info
// 0x0028 (0x0028 - 0x0000)
struct BP_Tree_Crown_C_Set_NSTree_Info final
{
public:
	float                                         AxisRotationAngle_0;                               // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinHeight_0;                                       // 0x0004(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxHeight_0;                                       // 0x0008(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BendAngle_0;                                       // 0x000C(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FallVector_0;                                      // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Tree_Crown_C_Set_NSTree_Info) == 0x000008, "Wrong alignment on BP_Tree_Crown_C_Set_NSTree_Info");
static_assert(sizeof(BP_Tree_Crown_C_Set_NSTree_Info) == 0x000028, "Wrong size on BP_Tree_Crown_C_Set_NSTree_Info");
static_assert(offsetof(BP_Tree_Crown_C_Set_NSTree_Info, AxisRotationAngle_0) == 0x000000, "Member 'BP_Tree_Crown_C_Set_NSTree_Info::AxisRotationAngle_0' has a wrong offset!");
static_assert(offsetof(BP_Tree_Crown_C_Set_NSTree_Info, MinHeight_0) == 0x000004, "Member 'BP_Tree_Crown_C_Set_NSTree_Info::MinHeight_0' has a wrong offset!");
static_assert(offsetof(BP_Tree_Crown_C_Set_NSTree_Info, MaxHeight_0) == 0x000008, "Member 'BP_Tree_Crown_C_Set_NSTree_Info::MaxHeight_0' has a wrong offset!");
static_assert(offsetof(BP_Tree_Crown_C_Set_NSTree_Info, BendAngle_0) == 0x00000C, "Member 'BP_Tree_Crown_C_Set_NSTree_Info::BendAngle_0' has a wrong offset!");
static_assert(offsetof(BP_Tree_Crown_C_Set_NSTree_Info, FallVector_0) == 0x000010, "Member 'BP_Tree_Crown_C_Set_NSTree_Info::FallVector_0' has a wrong offset!");

}

