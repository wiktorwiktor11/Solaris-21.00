#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RealitySeedFunctionLibrary

#include "Basic.hpp"

#include "RealitySeedFunctionLibrary_classes.hpp"
#include "RealitySeedFunctionLibrary_parameters.hpp"


namespace SDK
{

// Function RealitySeedFunctionLibrary.RealitySeedFunctionLibrary_C.DoesPlayerHaveSapling
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           TargetActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HasSapling                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void URealitySeedFunctionLibrary_C::DoesPlayerHaveSapling(class AActor* TargetActor, class UObject* __WorldContext, bool* HasSapling)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealitySeedFunctionLibrary_C", "DoesPlayerHaveSapling");

	Params::RealitySeedFunctionLibrary_C_DoesPlayerHaveSapling Parms{};

	Parms.TargetActor = TargetActor;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (HasSapling != nullptr)
		*HasSapling = Parms.HasSapling;
}


// Function RealitySeedFunctionLibrary.RealitySeedFunctionLibrary_C.GetNearbySaplings
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SaplingsNearby_                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void URealitySeedFunctionLibrary_C::GetNearbySaplings(const struct FVector& Location, class UObject* __WorldContext, bool* SaplingsNearby_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealitySeedFunctionLibrary_C", "GetNearbySaplings");

	Params::RealitySeedFunctionLibrary_C_GetNearbySaplings Parms{};

	Parms.Location = std::move(Location);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (SaplingsNearby_ != nullptr)
		*SaplingsNearby_ = Parms.SaplingsNearby_;
}


// Function RealitySeedFunctionLibrary.RealitySeedFunctionLibrary_C.GetRealitySaplingControllerComponent
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           PlayerTarget                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UFortControllerComponent_RealitySapling*RealitySaplingController                               (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void URealitySeedFunctionLibrary_C::GetRealitySaplingControllerComponent(class AActor* PlayerTarget, class UObject* __WorldContext, class UFortControllerComponent_RealitySapling** RealitySaplingController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealitySeedFunctionLibrary_C", "GetRealitySaplingControllerComponent");

	Params::RealitySeedFunctionLibrary_C_GetRealitySaplingControllerComponent Parms{};

	Parms.PlayerTarget = PlayerTarget;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (RealitySaplingController != nullptr)
		*RealitySaplingController = Parms.RealitySaplingController;
}


// Function RealitySeedFunctionLibrary.RealitySeedFunctionLibrary_C.IsValidSurface
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           HitActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    validSurface                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void URealitySeedFunctionLibrary_C::IsValidSurface(class AActor* HitActor, class UObject* __WorldContext, bool* validSurface)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealitySeedFunctionLibrary_C", "IsValidSurface");

	Params::RealitySeedFunctionLibrary_C_IsValidSurface Parms{};

	Parms.HitActor = HitActor;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (validSurface != nullptr)
		*validSurface = Parms.validSurface;
}


// Function RealitySeedFunctionLibrary.RealitySeedFunctionLibrary_C.RotatorFacingTargetAlongNormal
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Start                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Target                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          RotationAxis                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Xdirection                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

struct FRotator URealitySeedFunctionLibrary_C::RotatorFacingTargetAlongNormal(const struct FVector& Start, const struct FVector& Target, const struct FVector& RotationAxis, float Xdirection, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealitySeedFunctionLibrary_C", "RotatorFacingTargetAlongNormal");

	Params::RealitySeedFunctionLibrary_C_RotatorFacingTargetAlongNormal Parms{};

	Parms.Start = std::move(Start);
	Parms.Target = std::move(Target);
	Parms.RotationAxis = std::move(RotationAxis);
	Parms.Xdirection = Xdirection;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RealitySeedFunctionLibrary.RealitySeedFunctionLibrary_C.SaplingBouncePlayerOnHit
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AFortPlayerPawn*                  HitPlayerPawn                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Tent                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     Bounce_GC                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Hit_Location                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Hit_Normal                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class AFortPlayerPawn*>          Recently_Launched                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AFortPlayerPawn*                  Launched_Pawn                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void URealitySeedFunctionLibrary_C::SaplingBouncePlayerOnHit(class AFortPlayerPawn* HitPlayerPawn, class AActor* Tent, const struct FGameplayTag& Bounce_GC, const struct FVector& Hit_Location, const struct FVector& Hit_Normal, const TArray<class AFortPlayerPawn*>& Recently_Launched, class UObject* __WorldContext, class AFortPlayerPawn** Launched_Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealitySeedFunctionLibrary_C", "SaplingBouncePlayerOnHit");

	Params::RealitySeedFunctionLibrary_C_SaplingBouncePlayerOnHit Parms{};

	Parms.HitPlayerPawn = HitPlayerPawn;
	Parms.Tent = Tent;
	Parms.Bounce_GC = std::move(Bounce_GC);
	Parms.Hit_Location = std::move(Hit_Location);
	Parms.Hit_Normal = std::move(Hit_Normal);
	Parms.Recently_Launched = std::move(Recently_Launched);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Launched_Pawn != nullptr)
		*Launched_Pawn = Parms.Launched_Pawn;
}


// Function RealitySeedFunctionLibrary.RealitySeedFunctionLibrary_C.Surface Supports Sapling Deployment?
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// float                                   MinDistanceFromObstacles                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         ProjRotation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CheckSpecificSurfaces                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ValidLocationOutcome                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void URealitySeedFunctionLibrary_C::Surface_Supports_Sapling_Deployment_(const struct FHitResult& Hit, float MinDistanceFromObstacles, const struct FRotator& ProjRotation, bool CheckSpecificSurfaces, class UObject* __WorldContext, int32* ValidLocationOutcome)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RealitySeedFunctionLibrary_C", "Surface Supports Sapling Deployment?");

	Params::RealitySeedFunctionLibrary_C_Surface_Supports_Sapling_Deployment_ Parms{};

	Parms.Hit = std::move(Hit);
	Parms.MinDistanceFromObstacles = MinDistanceFromObstacles;
	Parms.ProjRotation = std::move(ProjRotation);
	Parms.CheckSpecificSurfaces = CheckSpecificSurfaces;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (ValidLocationOutcome != nullptr)
		*ValidLocationOutcome = Parms.ValidLocationOutcome;
}

}

