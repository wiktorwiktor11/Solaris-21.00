#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UIEmitter

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UIEmitter.UIEmitter_C
// 0x0098 (0x0350 - 0x02B8)
class UUIEmitter_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UOverlay*                               Overlay_Emitter;                                   // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUIEmitterElement_C*                    UIEmmitterElement;                                 // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TArray<class UMaterialInstance*>              Materials;                                         // 0x02D0(0x0010)(Edit, BlueprintVisible)
	int32                                         MaxElements;                                       // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E4[0x4];                                      // 0x02E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              AngleRange;                                        // 0x02E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              DistanceRange;                                     // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ParticleLifeRange;                                 // 0x0308(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              SpinSpeedRange;                                    // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              SizeRange;                                         // 0x0328(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              EmitterLifeRange;                                  // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RunOnce;                                           // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartAutomatically;                                // 0x0349(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EmitterExpired;                                    // 0x034A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Construct();
	void CreateEmitterElement();
	void ExecuteUbergraph_UIEmitter(int32 EntryPoint);
	void PreConstruct(bool IsDesignTime);
	void SetImage(class UUIEmitterElement_C* EmitterElement);
	void StartEmitter();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UIEmitter_C">();
	}
	static class UUIEmitter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIEmitter_C>();
	}
};
static_assert(alignof(UUIEmitter_C) == 0x000008, "Wrong alignment on UUIEmitter_C");
static_assert(sizeof(UUIEmitter_C) == 0x000350, "Wrong size on UUIEmitter_C");
static_assert(offsetof(UUIEmitter_C, UberGraphFrame) == 0x0002B8, "Member 'UUIEmitter_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUIEmitter_C, Overlay_Emitter) == 0x0002C0, "Member 'UUIEmitter_C::Overlay_Emitter' has a wrong offset!");
static_assert(offsetof(UUIEmitter_C, UIEmmitterElement) == 0x0002C8, "Member 'UUIEmitter_C::UIEmmitterElement' has a wrong offset!");
static_assert(offsetof(UUIEmitter_C, Materials) == 0x0002D0, "Member 'UUIEmitter_C::Materials' has a wrong offset!");
static_assert(offsetof(UUIEmitter_C, MaxElements) == 0x0002E0, "Member 'UUIEmitter_C::MaxElements' has a wrong offset!");
static_assert(offsetof(UUIEmitter_C, AngleRange) == 0x0002E8, "Member 'UUIEmitter_C::AngleRange' has a wrong offset!");
static_assert(offsetof(UUIEmitter_C, DistanceRange) == 0x0002F8, "Member 'UUIEmitter_C::DistanceRange' has a wrong offset!");
static_assert(offsetof(UUIEmitter_C, ParticleLifeRange) == 0x000308, "Member 'UUIEmitter_C::ParticleLifeRange' has a wrong offset!");
static_assert(offsetof(UUIEmitter_C, SpinSpeedRange) == 0x000318, "Member 'UUIEmitter_C::SpinSpeedRange' has a wrong offset!");
static_assert(offsetof(UUIEmitter_C, SizeRange) == 0x000328, "Member 'UUIEmitter_C::SizeRange' has a wrong offset!");
static_assert(offsetof(UUIEmitter_C, EmitterLifeRange) == 0x000338, "Member 'UUIEmitter_C::EmitterLifeRange' has a wrong offset!");
static_assert(offsetof(UUIEmitter_C, RunOnce) == 0x000348, "Member 'UUIEmitter_C::RunOnce' has a wrong offset!");
static_assert(offsetof(UUIEmitter_C, StartAutomatically) == 0x000349, "Member 'UUIEmitter_C::StartAutomatically' has a wrong offset!");
static_assert(offsetof(UUIEmitter_C, EmitterExpired) == 0x00034A, "Member 'UUIEmitter_C::EmitterExpired' has a wrong offset!");

}

