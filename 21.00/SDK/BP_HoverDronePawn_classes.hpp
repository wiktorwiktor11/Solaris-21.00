#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HoverDronePawn

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HoverDronePawn.BP_HoverDronePawn_C
// 0x0050 (0x0470 - 0x0420)
class ABP_HoverDronePawn_C final : public AHoverDronePawn
{
public:
	uint8                                         Pad_418[0x8];                                      // 0x0418(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0420(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          WindAudioEnabled;                                  // 0x0428(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_429[0x7];                                      // 0x0429(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        AltitudeWindAudioComp;                             // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WindAudioAltMin;                                   // 0x0438(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WindAudioAltMax;                                   // 0x043C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WindAudioVolMin;                                   // 0x0440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WindAudioVolMax;                                   // 0x0444(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             SoundWindMovementLoop;                             // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             SoundWindAltitudeLoop;                             // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentAltitudeWindVolume;                         // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x045C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        MovementWindAudioComp;                             // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentMovementWindVolume;                         // 0x0468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Update_Wind_Audio();
	void SetWindAudioEnabled(bool Enabled);
	void ReceiveUnpossessed(class AController* OldController);
	void ReceiveTick(float DeltaSeconds);
	void ReceivePossessed(class AController* NewController);
	void ReceiveBeginPlay();
	void GetWindVolumeFromAltitude(float Altitude, float* Volume);
	void ExecuteUbergraph_BP_HoverDronePawn(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HoverDronePawn_C">();
	}
	static class ABP_HoverDronePawn_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_HoverDronePawn_C>();
	}
};
static_assert(alignof(ABP_HoverDronePawn_C) == 0x000010, "Wrong alignment on ABP_HoverDronePawn_C");
static_assert(sizeof(ABP_HoverDronePawn_C) == 0x000470, "Wrong size on ABP_HoverDronePawn_C");
static_assert(offsetof(ABP_HoverDronePawn_C, UberGraphFrame) == 0x000420, "Member 'ABP_HoverDronePawn_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_HoverDronePawn_C, WindAudioEnabled) == 0x000428, "Member 'ABP_HoverDronePawn_C::WindAudioEnabled' has a wrong offset!");
static_assert(offsetof(ABP_HoverDronePawn_C, AltitudeWindAudioComp) == 0x000430, "Member 'ABP_HoverDronePawn_C::AltitudeWindAudioComp' has a wrong offset!");
static_assert(offsetof(ABP_HoverDronePawn_C, WindAudioAltMin) == 0x000438, "Member 'ABP_HoverDronePawn_C::WindAudioAltMin' has a wrong offset!");
static_assert(offsetof(ABP_HoverDronePawn_C, WindAudioAltMax) == 0x00043C, "Member 'ABP_HoverDronePawn_C::WindAudioAltMax' has a wrong offset!");
static_assert(offsetof(ABP_HoverDronePawn_C, WindAudioVolMin) == 0x000440, "Member 'ABP_HoverDronePawn_C::WindAudioVolMin' has a wrong offset!");
static_assert(offsetof(ABP_HoverDronePawn_C, WindAudioVolMax) == 0x000444, "Member 'ABP_HoverDronePawn_C::WindAudioVolMax' has a wrong offset!");
static_assert(offsetof(ABP_HoverDronePawn_C, SoundWindMovementLoop) == 0x000448, "Member 'ABP_HoverDronePawn_C::SoundWindMovementLoop' has a wrong offset!");
static_assert(offsetof(ABP_HoverDronePawn_C, SoundWindAltitudeLoop) == 0x000450, "Member 'ABP_HoverDronePawn_C::SoundWindAltitudeLoop' has a wrong offset!");
static_assert(offsetof(ABP_HoverDronePawn_C, CurrentAltitudeWindVolume) == 0x000458, "Member 'ABP_HoverDronePawn_C::CurrentAltitudeWindVolume' has a wrong offset!");
static_assert(offsetof(ABP_HoverDronePawn_C, Speed) == 0x00045C, "Member 'ABP_HoverDronePawn_C::Speed' has a wrong offset!");
static_assert(offsetof(ABP_HoverDronePawn_C, MovementWindAudioComp) == 0x000460, "Member 'ABP_HoverDronePawn_C::MovementWindAudioComp' has a wrong offset!");
static_assert(offsetof(ABP_HoverDronePawn_C, CurrentMovementWindVolume) == 0x000468, "Member 'ABP_HoverDronePawn_C::CurrentMovementWindVolume' has a wrong offset!");

}

