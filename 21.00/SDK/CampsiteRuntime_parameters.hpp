#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CampsiteRuntime

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function CampsiteRuntime.AbandonedCampsiteManager.OnGamePhaseStepChanged
// 0x0018 (0x0018 - 0x0000)
struct AbandonedCampsiteManager_OnGamePhaseStepChanged final
{
public:
	TScriptInterface<class IFortSafeZoneInterface> SafeZoneInterface;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAthenaGamePhaseStep                          GamePhaseStep;                                     // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbandonedCampsiteManager_OnGamePhaseStepChanged) == 0x000008, "Wrong alignment on AbandonedCampsiteManager_OnGamePhaseStepChanged");
static_assert(sizeof(AbandonedCampsiteManager_OnGamePhaseStepChanged) == 0x000018, "Wrong size on AbandonedCampsiteManager_OnGamePhaseStepChanged");
static_assert(offsetof(AbandonedCampsiteManager_OnGamePhaseStepChanged, SafeZoneInterface) == 0x000000, "Member 'AbandonedCampsiteManager_OnGamePhaseStepChanged::SafeZoneInterface' has a wrong offset!");
static_assert(offsetof(AbandonedCampsiteManager_OnGamePhaseStepChanged, GamePhaseStep) == 0x000010, "Member 'AbandonedCampsiteManager_OnGamePhaseStepChanged::GamePhaseStep' has a wrong offset!");

// Function CampsiteRuntime.CampsiteConversationComponent.StartConversation
// 0x0008 (0x0008 - 0x0000)
struct CampsiteConversationComponent_StartConversation final
{
public:
	class AFortPlayerController*                  InstigatingController;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CampsiteConversationComponent_StartConversation) == 0x000008, "Wrong alignment on CampsiteConversationComponent_StartConversation");
static_assert(sizeof(CampsiteConversationComponent_StartConversation) == 0x000008, "Wrong size on CampsiteConversationComponent_StartConversation");
static_assert(offsetof(CampsiteConversationComponent_StartConversation, InstigatingController) == 0x000000, "Member 'CampsiteConversationComponent_StartConversation::InstigatingController' has a wrong offset!");

// Function CampsiteRuntime.CampsiteFunctionLibraryNative.GetItemEntryCopyFromWeapon
// 0x01A8 (0x01A8 - 0x0000)
struct CampsiteFunctionLibraryNative_GetItemEntryCopyFromWeapon final
{
public:
	const class AFortWeapon*                      Weapon;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemEntry                         ReturnValue;                                       // 0x0008(0x01A0)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CampsiteFunctionLibraryNative_GetItemEntryCopyFromWeapon) == 0x000008, "Wrong alignment on CampsiteFunctionLibraryNative_GetItemEntryCopyFromWeapon");
static_assert(sizeof(CampsiteFunctionLibraryNative_GetItemEntryCopyFromWeapon) == 0x0001A8, "Wrong size on CampsiteFunctionLibraryNative_GetItemEntryCopyFromWeapon");
static_assert(offsetof(CampsiteFunctionLibraryNative_GetItemEntryCopyFromWeapon, Weapon) == 0x000000, "Member 'CampsiteFunctionLibraryNative_GetItemEntryCopyFromWeapon::Weapon' has a wrong offset!");
static_assert(offsetof(CampsiteFunctionLibraryNative_GetItemEntryCopyFromWeapon, ReturnValue) == 0x000008, "Member 'CampsiteFunctionLibraryNative_GetItemEntryCopyFromWeapon::ReturnValue' has a wrong offset!");

// Function CampsiteRuntime.CampsiteFunctionLibraryNative.IsItemAvailable
// 0x0018 (0x0018 - 0x0000)
struct CampsiteFunctionLibraryNative_IsItemAvailable final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortItem*                        FortItem;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CampsiteFunctionLibraryNative_IsItemAvailable) == 0x000008, "Wrong alignment on CampsiteFunctionLibraryNative_IsItemAvailable");
static_assert(sizeof(CampsiteFunctionLibraryNative_IsItemAvailable) == 0x000018, "Wrong size on CampsiteFunctionLibraryNative_IsItemAvailable");
static_assert(offsetof(CampsiteFunctionLibraryNative_IsItemAvailable, WorldContextObject) == 0x000000, "Member 'CampsiteFunctionLibraryNative_IsItemAvailable::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CampsiteFunctionLibraryNative_IsItemAvailable, FortItem) == 0x000008, "Member 'CampsiteFunctionLibraryNative_IsItemAvailable::FortItem' has a wrong offset!");
static_assert(offsetof(CampsiteFunctionLibraryNative_IsItemAvailable, ReturnValue) == 0x000010, "Member 'CampsiteFunctionLibraryNative_IsItemAvailable::ReturnValue' has a wrong offset!");

// Function CampsiteRuntime.CampsiteFunctionLibraryNative.IsItemDefinitionAvailable
// 0x0018 (0x0018 - 0x0000)
struct CampsiteFunctionLibraryNative_IsItemDefinitionAvailable final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortItemDefinition*              FortItem;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CampsiteFunctionLibraryNative_IsItemDefinitionAvailable) == 0x000008, "Wrong alignment on CampsiteFunctionLibraryNative_IsItemDefinitionAvailable");
static_assert(sizeof(CampsiteFunctionLibraryNative_IsItemDefinitionAvailable) == 0x000018, "Wrong size on CampsiteFunctionLibraryNative_IsItemDefinitionAvailable");
static_assert(offsetof(CampsiteFunctionLibraryNative_IsItemDefinitionAvailable, WorldContextObject) == 0x000000, "Member 'CampsiteFunctionLibraryNative_IsItemDefinitionAvailable::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CampsiteFunctionLibraryNative_IsItemDefinitionAvailable, FortItem) == 0x000008, "Member 'CampsiteFunctionLibraryNative_IsItemDefinitionAvailable::FortItem' has a wrong offset!");
static_assert(offsetof(CampsiteFunctionLibraryNative_IsItemDefinitionAvailable, ReturnValue) == 0x000010, "Member 'CampsiteFunctionLibraryNative_IsItemDefinitionAvailable::ReturnValue' has a wrong offset!");

// Function CampsiteRuntime.CampsiteFunctionLibraryNative.IsItemEntryAvailable
// 0x01B0 (0x01B0 - 0x0000)
struct CampsiteFunctionLibraryNative_IsItemEntryAvailable final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemEntry                         FortItem;                                          // 0x0008(0x01A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x01A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CampsiteFunctionLibraryNative_IsItemEntryAvailable) == 0x000008, "Wrong alignment on CampsiteFunctionLibraryNative_IsItemEntryAvailable");
static_assert(sizeof(CampsiteFunctionLibraryNative_IsItemEntryAvailable) == 0x0001B0, "Wrong size on CampsiteFunctionLibraryNative_IsItemEntryAvailable");
static_assert(offsetof(CampsiteFunctionLibraryNative_IsItemEntryAvailable, WorldContextObject) == 0x000000, "Member 'CampsiteFunctionLibraryNative_IsItemEntryAvailable::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CampsiteFunctionLibraryNative_IsItemEntryAvailable, FortItem) == 0x000008, "Member 'CampsiteFunctionLibraryNative_IsItemEntryAvailable::FortItem' has a wrong offset!");
static_assert(offsetof(CampsiteFunctionLibraryNative_IsItemEntryAvailable, ReturnValue) == 0x0001A8, "Member 'CampsiteFunctionLibraryNative_IsItemEntryAvailable::ReturnValue' has a wrong offset!");

// Function CampsiteRuntime.CampsiteFunctionLibraryNative.SetHealthOnPropFromItemEntry
// 0x01A8 (0x01A8 - 0x0000)
struct CampsiteFunctionLibraryNative_SetHealthOnPropFromItemEntry final
{
public:
	struct FFortItemEntry                         FortItem;                                          // 0x0000(0x01A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class ABuildingProp*                          BuildingProp;                                      // 0x01A0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CampsiteFunctionLibraryNative_SetHealthOnPropFromItemEntry) == 0x000008, "Wrong alignment on CampsiteFunctionLibraryNative_SetHealthOnPropFromItemEntry");
static_assert(sizeof(CampsiteFunctionLibraryNative_SetHealthOnPropFromItemEntry) == 0x0001A8, "Wrong size on CampsiteFunctionLibraryNative_SetHealthOnPropFromItemEntry");
static_assert(offsetof(CampsiteFunctionLibraryNative_SetHealthOnPropFromItemEntry, FortItem) == 0x000000, "Member 'CampsiteFunctionLibraryNative_SetHealthOnPropFromItemEntry::FortItem' has a wrong offset!");
static_assert(offsetof(CampsiteFunctionLibraryNative_SetHealthOnPropFromItemEntry, BuildingProp) == 0x0001A0, "Member 'CampsiteFunctionLibraryNative_SetHealthOnPropFromItemEntry::BuildingProp' has a wrong offset!");

// Function CampsiteRuntime.CampsiteFunctionLibraryNative.StoreHealthOnPickupFromProp
// 0x0010 (0x0010 - 0x0000)
struct CampsiteFunctionLibraryNative_StoreHealthOnPickupFromProp final
{
public:
	const class ABuildingProp*                    BuildingProp;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPickup*                            PickUp;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CampsiteFunctionLibraryNative_StoreHealthOnPickupFromProp) == 0x000008, "Wrong alignment on CampsiteFunctionLibraryNative_StoreHealthOnPickupFromProp");
static_assert(sizeof(CampsiteFunctionLibraryNative_StoreHealthOnPickupFromProp) == 0x000010, "Wrong size on CampsiteFunctionLibraryNative_StoreHealthOnPickupFromProp");
static_assert(offsetof(CampsiteFunctionLibraryNative_StoreHealthOnPickupFromProp, BuildingProp) == 0x000000, "Member 'CampsiteFunctionLibraryNative_StoreHealthOnPickupFromProp::BuildingProp' has a wrong offset!");
static_assert(offsetof(CampsiteFunctionLibraryNative_StoreHealthOnPickupFromProp, PickUp) == 0x000008, "Member 'CampsiteFunctionLibraryNative_StoreHealthOnPickupFromProp::PickUp' has a wrong offset!");

// Function CampsiteRuntime.CampsiteImprovementComponent.SetImprovementOwnerSquadId
// 0x0004 (0x0004 - 0x0000)
struct CampsiteImprovementComponent_SetImprovementOwnerSquadId final
{
public:
	int32                                         SquadId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CampsiteImprovementComponent_SetImprovementOwnerSquadId) == 0x000004, "Wrong alignment on CampsiteImprovementComponent_SetImprovementOwnerSquadId");
static_assert(sizeof(CampsiteImprovementComponent_SetImprovementOwnerSquadId) == 0x000004, "Wrong size on CampsiteImprovementComponent_SetImprovementOwnerSquadId");
static_assert(offsetof(CampsiteImprovementComponent_SetImprovementOwnerSquadId, SquadId) == 0x000000, "Member 'CampsiteImprovementComponent_SetImprovementOwnerSquadId::SquadId' has a wrong offset!");

// Function CampsiteRuntime.FortControllerComponent_CampsiteAccountItem.ClearStashedItem
// 0x0004 (0x0004 - 0x0000)
struct FortControllerComponent_CampsiteAccountItem_ClearStashedItem final
{
public:
	int32                                         StashedItemIndex;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_CampsiteAccountItem_ClearStashedItem) == 0x000004, "Wrong alignment on FortControllerComponent_CampsiteAccountItem_ClearStashedItem");
static_assert(sizeof(FortControllerComponent_CampsiteAccountItem_ClearStashedItem) == 0x000004, "Wrong size on FortControllerComponent_CampsiteAccountItem_ClearStashedItem");
static_assert(offsetof(FortControllerComponent_CampsiteAccountItem_ClearStashedItem, StashedItemIndex) == 0x000000, "Member 'FortControllerComponent_CampsiteAccountItem_ClearStashedItem::StashedItemIndex' has a wrong offset!");

// Function CampsiteRuntime.FortControllerComponent_CampsiteAccountItem.ClearStashedItemAndGiveToPlayer
// 0x0010 (0x0010 - 0x0000)
struct FortControllerComponent_CampsiteAccountItem_ClearStashedItemAndGiveToPlayer final
{
public:
	const class AActor*                           SourceActor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StashedItemIndex;                                  // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortControllerComponent_CampsiteAccountItem_ClearStashedItemAndGiveToPlayer) == 0x000008, "Wrong alignment on FortControllerComponent_CampsiteAccountItem_ClearStashedItemAndGiveToPlayer");
static_assert(sizeof(FortControllerComponent_CampsiteAccountItem_ClearStashedItemAndGiveToPlayer) == 0x000010, "Wrong size on FortControllerComponent_CampsiteAccountItem_ClearStashedItemAndGiveToPlayer");
static_assert(offsetof(FortControllerComponent_CampsiteAccountItem_ClearStashedItemAndGiveToPlayer, SourceActor) == 0x000000, "Member 'FortControllerComponent_CampsiteAccountItem_ClearStashedItemAndGiveToPlayer::SourceActor' has a wrong offset!");
static_assert(offsetof(FortControllerComponent_CampsiteAccountItem_ClearStashedItemAndGiveToPlayer, StashedItemIndex) == 0x000008, "Member 'FortControllerComponent_CampsiteAccountItem_ClearStashedItemAndGiveToPlayer::StashedItemIndex' has a wrong offset!");
static_assert(offsetof(FortControllerComponent_CampsiteAccountItem_ClearStashedItemAndGiveToPlayer, ReturnValue) == 0x00000C, "Member 'FortControllerComponent_CampsiteAccountItem_ClearStashedItemAndGiveToPlayer::ReturnValue' has a wrong offset!");

// Function CampsiteRuntime.FortControllerComponent_CampsiteAccountItem.StashCurrentlyHeldItemAndRemoveFromInventory
// 0x0008 (0x0008 - 0x0000)
struct FortControllerComponent_CampsiteAccountItem_StashCurrentlyHeldItemAndRemoveFromInventory final
{
public:
	int32                                         StashedItemIndex;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortControllerComponent_CampsiteAccountItem_StashCurrentlyHeldItemAndRemoveFromInventory) == 0x000004, "Wrong alignment on FortControllerComponent_CampsiteAccountItem_StashCurrentlyHeldItemAndRemoveFromInventory");
static_assert(sizeof(FortControllerComponent_CampsiteAccountItem_StashCurrentlyHeldItemAndRemoveFromInventory) == 0x000008, "Wrong size on FortControllerComponent_CampsiteAccountItem_StashCurrentlyHeldItemAndRemoveFromInventory");
static_assert(offsetof(FortControllerComponent_CampsiteAccountItem_StashCurrentlyHeldItemAndRemoveFromInventory, StashedItemIndex) == 0x000000, "Member 'FortControllerComponent_CampsiteAccountItem_StashCurrentlyHeldItemAndRemoveFromInventory::StashedItemIndex' has a wrong offset!");
static_assert(offsetof(FortControllerComponent_CampsiteAccountItem_StashCurrentlyHeldItemAndRemoveFromInventory, ReturnValue) == 0x000004, "Member 'FortControllerComponent_CampsiteAccountItem_StashCurrentlyHeldItemAndRemoveFromInventory::ReturnValue' has a wrong offset!");

// Function CampsiteRuntime.FortControllerComponent_CampsiteAccountItem.SwapStashedItem
// 0x0010 (0x0010 - 0x0000)
struct FortControllerComponent_CampsiteAccountItem_SwapStashedItem final
{
public:
	const class AActor*                           SourceActor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StashedItemIndex;                                  // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortControllerComponent_CampsiteAccountItem_SwapStashedItem) == 0x000008, "Wrong alignment on FortControllerComponent_CampsiteAccountItem_SwapStashedItem");
static_assert(sizeof(FortControllerComponent_CampsiteAccountItem_SwapStashedItem) == 0x000010, "Wrong size on FortControllerComponent_CampsiteAccountItem_SwapStashedItem");
static_assert(offsetof(FortControllerComponent_CampsiteAccountItem_SwapStashedItem, SourceActor) == 0x000000, "Member 'FortControllerComponent_CampsiteAccountItem_SwapStashedItem::SourceActor' has a wrong offset!");
static_assert(offsetof(FortControllerComponent_CampsiteAccountItem_SwapStashedItem, StashedItemIndex) == 0x000008, "Member 'FortControllerComponent_CampsiteAccountItem_SwapStashedItem::StashedItemIndex' has a wrong offset!");
static_assert(offsetof(FortControllerComponent_CampsiteAccountItem_SwapStashedItem, ReturnValue) == 0x00000C, "Member 'FortControllerComponent_CampsiteAccountItem_SwapStashedItem::ReturnValue' has a wrong offset!");

// Function CampsiteRuntime.FortControllerComponent_CampsiteAccountItem.WriteStashedItem
// 0x0018 (0x0018 - 0x0000)
struct FortControllerComponent_CampsiteAccountItem_WriteStashedItem final
{
public:
	class AFortPlayerControllerAthena*            PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortWorldItem*                   Item;                                              // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StashedItemIndex;                                  // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortControllerComponent_CampsiteAccountItem_WriteStashedItem) == 0x000008, "Wrong alignment on FortControllerComponent_CampsiteAccountItem_WriteStashedItem");
static_assert(sizeof(FortControllerComponent_CampsiteAccountItem_WriteStashedItem) == 0x000018, "Wrong size on FortControllerComponent_CampsiteAccountItem_WriteStashedItem");
static_assert(offsetof(FortControllerComponent_CampsiteAccountItem_WriteStashedItem, PlayerController) == 0x000000, "Member 'FortControllerComponent_CampsiteAccountItem_WriteStashedItem::PlayerController' has a wrong offset!");
static_assert(offsetof(FortControllerComponent_CampsiteAccountItem_WriteStashedItem, Item) == 0x000008, "Member 'FortControllerComponent_CampsiteAccountItem_WriteStashedItem::Item' has a wrong offset!");
static_assert(offsetof(FortControllerComponent_CampsiteAccountItem_WriteStashedItem, StashedItemIndex) == 0x000010, "Member 'FortControllerComponent_CampsiteAccountItem_WriteStashedItem::StashedItemIndex' has a wrong offset!");

// Function CampsiteRuntime.FortControllerComponent_CampsiteAccountItem.WriteStashedItemFromEntry
// 0x01B0 (0x01B0 - 0x0000)
struct FortControllerComponent_CampsiteAccountItem_WriteStashedItemFromEntry final
{
public:
	class AFortPlayerControllerAthena*            PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemEntry                         ItemEntry;                                         // 0x0008(0x01A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         StashedItemIndex;                                  // 0x01A8(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortControllerComponent_CampsiteAccountItem_WriteStashedItemFromEntry) == 0x000008, "Wrong alignment on FortControllerComponent_CampsiteAccountItem_WriteStashedItemFromEntry");
static_assert(sizeof(FortControllerComponent_CampsiteAccountItem_WriteStashedItemFromEntry) == 0x0001B0, "Wrong size on FortControllerComponent_CampsiteAccountItem_WriteStashedItemFromEntry");
static_assert(offsetof(FortControllerComponent_CampsiteAccountItem_WriteStashedItemFromEntry, PlayerController) == 0x000000, "Member 'FortControllerComponent_CampsiteAccountItem_WriteStashedItemFromEntry::PlayerController' has a wrong offset!");
static_assert(offsetof(FortControllerComponent_CampsiteAccountItem_WriteStashedItemFromEntry, ItemEntry) == 0x000008, "Member 'FortControllerComponent_CampsiteAccountItem_WriteStashedItemFromEntry::ItemEntry' has a wrong offset!");
static_assert(offsetof(FortControllerComponent_CampsiteAccountItem_WriteStashedItemFromEntry, StashedItemIndex) == 0x0001A8, "Member 'FortControllerComponent_CampsiteAccountItem_WriteStashedItemFromEntry::StashedItemIndex' has a wrong offset!");

// Function CampsiteRuntime.FortControllerComponent_CampsiteAccountItem.GetCurrentlyStashedItemAsItemEntry
// 0x01A8 (0x01A8 - 0x0000)
struct FortControllerComponent_CampsiteAccountItem_GetCurrentlyStashedItemAsItemEntry final
{
public:
	int32                                         StashedItemIndex;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortItemEntry                         ReturnValue;                                       // 0x0008(0x01A0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_CampsiteAccountItem_GetCurrentlyStashedItemAsItemEntry) == 0x000008, "Wrong alignment on FortControllerComponent_CampsiteAccountItem_GetCurrentlyStashedItemAsItemEntry");
static_assert(sizeof(FortControllerComponent_CampsiteAccountItem_GetCurrentlyStashedItemAsItemEntry) == 0x0001A8, "Wrong size on FortControllerComponent_CampsiteAccountItem_GetCurrentlyStashedItemAsItemEntry");
static_assert(offsetof(FortControllerComponent_CampsiteAccountItem_GetCurrentlyStashedItemAsItemEntry, StashedItemIndex) == 0x000000, "Member 'FortControllerComponent_CampsiteAccountItem_GetCurrentlyStashedItemAsItemEntry::StashedItemIndex' has a wrong offset!");
static_assert(offsetof(FortControllerComponent_CampsiteAccountItem_GetCurrentlyStashedItemAsItemEntry, ReturnValue) == 0x000008, "Member 'FortControllerComponent_CampsiteAccountItem_GetCurrentlyStashedItemAsItemEntry::ReturnValue' has a wrong offset!");

// Function CampsiteRuntime.FortControllerComponent_CampsiteAccountItem.HasCurrentlyStashedItem
// 0x0008 (0x0008 - 0x0000)
struct FortControllerComponent_CampsiteAccountItem_HasCurrentlyStashedItem final
{
public:
	int32                                         StashedItemIndex;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortControllerComponent_CampsiteAccountItem_HasCurrentlyStashedItem) == 0x000004, "Wrong alignment on FortControllerComponent_CampsiteAccountItem_HasCurrentlyStashedItem");
static_assert(sizeof(FortControllerComponent_CampsiteAccountItem_HasCurrentlyStashedItem) == 0x000008, "Wrong size on FortControllerComponent_CampsiteAccountItem_HasCurrentlyStashedItem");
static_assert(offsetof(FortControllerComponent_CampsiteAccountItem_HasCurrentlyStashedItem, StashedItemIndex) == 0x000000, "Member 'FortControllerComponent_CampsiteAccountItem_HasCurrentlyStashedItem::StashedItemIndex' has a wrong offset!");
static_assert(offsetof(FortControllerComponent_CampsiteAccountItem_HasCurrentlyStashedItem, ReturnValue) == 0x000004, "Member 'FortControllerComponent_CampsiteAccountItem_HasCurrentlyStashedItem::ReturnValue' has a wrong offset!");

// Function CampsiteRuntime.FortGameStateComponent_Campsite.ClaimUnusedBotName
// 0x0010 (0x0010 - 0x0000)
struct FortGameStateComponent_Campsite_ClaimUnusedBotName final
{
public:
	class FString                                 OutBotName;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateComponent_Campsite_ClaimUnusedBotName) == 0x000008, "Wrong alignment on FortGameStateComponent_Campsite_ClaimUnusedBotName");
static_assert(sizeof(FortGameStateComponent_Campsite_ClaimUnusedBotName) == 0x000010, "Wrong size on FortGameStateComponent_Campsite_ClaimUnusedBotName");
static_assert(offsetof(FortGameStateComponent_Campsite_ClaimUnusedBotName, OutBotName) == 0x000000, "Member 'FortGameStateComponent_Campsite_ClaimUnusedBotName::OutBotName' has a wrong offset!");

// Function CampsiteRuntime.FortGameStateComponent_Campsite.RegisterCampsiteLocation
// 0x0018 (0x0018 - 0x0000)
struct FortGameStateComponent_Campsite_RegisterCampsiteLocation final
{
public:
	struct FVector                                NewCampsiteLocation;                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateComponent_Campsite_RegisterCampsiteLocation) == 0x000008, "Wrong alignment on FortGameStateComponent_Campsite_RegisterCampsiteLocation");
static_assert(sizeof(FortGameStateComponent_Campsite_RegisterCampsiteLocation) == 0x000018, "Wrong size on FortGameStateComponent_Campsite_RegisterCampsiteLocation");
static_assert(offsetof(FortGameStateComponent_Campsite_RegisterCampsiteLocation, NewCampsiteLocation) == 0x000000, "Member 'FortGameStateComponent_Campsite_RegisterCampsiteLocation::NewCampsiteLocation' has a wrong offset!");

// Function CampsiteRuntime.FortGameStateComponent_Campsite.RegisterPreplacedCampsite
// 0x0008 (0x0008 - 0x0000)
struct FortGameStateComponent_Campsite_RegisterPreplacedCampsite final
{
public:
	class AAbandonedCampsitePlacedSpawner*        PreplacedCampsiteSpawnPoint;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateComponent_Campsite_RegisterPreplacedCampsite) == 0x000008, "Wrong alignment on FortGameStateComponent_Campsite_RegisterPreplacedCampsite");
static_assert(sizeof(FortGameStateComponent_Campsite_RegisterPreplacedCampsite) == 0x000008, "Wrong size on FortGameStateComponent_Campsite_RegisterPreplacedCampsite");
static_assert(offsetof(FortGameStateComponent_Campsite_RegisterPreplacedCampsite, PreplacedCampsiteSpawnPoint) == 0x000000, "Member 'FortGameStateComponent_Campsite_RegisterPreplacedCampsite::PreplacedCampsiteSpawnPoint' has a wrong offset!");

}

