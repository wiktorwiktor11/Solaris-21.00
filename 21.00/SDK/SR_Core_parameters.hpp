#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SR_Core

#include "Basic.hpp"

#include "SrirachaRanch_structs.hpp"


namespace SDK::Params
{

// Function SR_Core.SR_Core_C.ExecuteUbergraph_SR_Core
// 0x0048 (0x0048 - 0x0000)
struct SR_Core_C_ExecuteUbergraph_SR_Core final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IFortVehicleInterface> K2Node_Event_Vehicle;                              // 0x0008(0x0010)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class AFortPawn*                              K2Node_Event_PlayerPawn;                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_SeatIndex;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IFortVehicleInterface> K2Node_Event_Vehicle_1;                            // 0x0028(0x0010)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class AFortPawn*                              K2Node_Event_PlayerPawn_1;                         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_SeatIndex_1;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SR_Core_C_ExecuteUbergraph_SR_Core) == 0x000008, "Wrong alignment on SR_Core_C_ExecuteUbergraph_SR_Core");
static_assert(sizeof(SR_Core_C_ExecuteUbergraph_SR_Core) == 0x000048, "Wrong size on SR_Core_C_ExecuteUbergraph_SR_Core");
static_assert(offsetof(SR_Core_C_ExecuteUbergraph_SR_Core, EntryPoint) == 0x000000, "Member 'SR_Core_C_ExecuteUbergraph_SR_Core::EntryPoint' has a wrong offset!");
static_assert(offsetof(SR_Core_C_ExecuteUbergraph_SR_Core, K2Node_Event_Vehicle) == 0x000008, "Member 'SR_Core_C_ExecuteUbergraph_SR_Core::K2Node_Event_Vehicle' has a wrong offset!");
static_assert(offsetof(SR_Core_C_ExecuteUbergraph_SR_Core, K2Node_Event_PlayerPawn) == 0x000018, "Member 'SR_Core_C_ExecuteUbergraph_SR_Core::K2Node_Event_PlayerPawn' has a wrong offset!");
static_assert(offsetof(SR_Core_C_ExecuteUbergraph_SR_Core, K2Node_Event_SeatIndex) == 0x000020, "Member 'SR_Core_C_ExecuteUbergraph_SR_Core::K2Node_Event_SeatIndex' has a wrong offset!");
static_assert(offsetof(SR_Core_C_ExecuteUbergraph_SR_Core, K2Node_Event_Vehicle_1) == 0x000028, "Member 'SR_Core_C_ExecuteUbergraph_SR_Core::K2Node_Event_Vehicle_1' has a wrong offset!");
static_assert(offsetof(SR_Core_C_ExecuteUbergraph_SR_Core, K2Node_Event_PlayerPawn_1) == 0x000038, "Member 'SR_Core_C_ExecuteUbergraph_SR_Core::K2Node_Event_PlayerPawn_1' has a wrong offset!");
static_assert(offsetof(SR_Core_C_ExecuteUbergraph_SR_Core, K2Node_Event_SeatIndex_1) == 0x000040, "Member 'SR_Core_C_ExecuteUbergraph_SR_Core::K2Node_Event_SeatIndex_1' has a wrong offset!");

// Function SR_Core.SR_Core_C.GetIsMixAllowed
// 0x0005 (0x0005 - 0x0000)
struct SR_Core_C_GetIsMixAllowed final
{
public:
	bool                                          MixAllowed;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayingLiveFeed_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SR_Core_C_GetIsMixAllowed) == 0x000001, "Wrong alignment on SR_Core_C_GetIsMixAllowed");
static_assert(sizeof(SR_Core_C_GetIsMixAllowed) == 0x000005, "Wrong size on SR_Core_C_GetIsMixAllowed");
static_assert(offsetof(SR_Core_C_GetIsMixAllowed, MixAllowed) == 0x000000, "Member 'SR_Core_C_GetIsMixAllowed::MixAllowed' has a wrong offset!");
static_assert(offsetof(SR_Core_C_GetIsMixAllowed, CallFunc_IsPlayingLiveFeed_ReturnValue) == 0x000001, "Member 'SR_Core_C_GetIsMixAllowed::CallFunc_IsPlayingLiveFeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(SR_Core_C_GetIsMixAllowed, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'SR_Core_C_GetIsMixAllowed::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(SR_Core_C_GetIsMixAllowed, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'SR_Core_C_GetIsMixAllowed::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(SR_Core_C_GetIsMixAllowed, CallFunc_BooleanAND_ReturnValue_1) == 0x000004, "Member 'SR_Core_C_GetIsMixAllowed::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function SR_Core.SR_Core_C.HandleADSStateUpdated
// 0x0001 (0x0001 - 0x0000)
struct SR_Core_C_HandleADSStateUpdated final
{
public:
	bool                                          Is_Targeting;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SR_Core_C_HandleADSStateUpdated) == 0x000001, "Wrong alignment on SR_Core_C_HandleADSStateUpdated");
static_assert(sizeof(SR_Core_C_HandleADSStateUpdated) == 0x000001, "Wrong size on SR_Core_C_HandleADSStateUpdated");
static_assert(offsetof(SR_Core_C_HandleADSStateUpdated, Is_Targeting) == 0x000000, "Member 'SR_Core_C_HandleADSStateUpdated::Is_Targeting' has a wrong offset!");

// Function SR_Core.SR_Core_C.HandleOnSourcePlayed
// 0x0040 (0x0040 - 0x0000)
struct SR_Core_C_HandleOnSourcePlayed final
{
public:
	class UStreamingRadioPlayerComponent*         Component;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAthenaRadioStation                    AffectedSource;                                    // 0x0008(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(SR_Core_C_HandleOnSourcePlayed) == 0x000008, "Wrong alignment on SR_Core_C_HandleOnSourcePlayed");
static_assert(sizeof(SR_Core_C_HandleOnSourcePlayed) == 0x000040, "Wrong size on SR_Core_C_HandleOnSourcePlayed");
static_assert(offsetof(SR_Core_C_HandleOnSourcePlayed, Component) == 0x000000, "Member 'SR_Core_C_HandleOnSourcePlayed::Component' has a wrong offset!");
static_assert(offsetof(SR_Core_C_HandleOnSourcePlayed, AffectedSource) == 0x000008, "Member 'SR_Core_C_HandleOnSourcePlayed::AffectedSource' has a wrong offset!");

// Function SR_Core.SR_Core_C.HandleSeatStateUpdated
// 0x0030 (0x0030 - 0x0000)
struct SR_Core_C_HandleSeatStateUpdated final
{
public:
	class AFortPawn*                              Pawn;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Entering;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SeatIdx;                                           // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsExternalSeat_ReturnValue;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UStreamingRadioPlayerComponent* Component, const struct FAthenaRadioStation& AffectedSource)> K2Node_CreateDelegate_OutputDelegate;              // 0x0018(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AFortWeapon* NewWeapon, class AFortWeapon* PrevWeapon)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0024(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SR_Core_C_HandleSeatStateUpdated) == 0x000008, "Wrong alignment on SR_Core_C_HandleSeatStateUpdated");
static_assert(sizeof(SR_Core_C_HandleSeatStateUpdated) == 0x000030, "Wrong size on SR_Core_C_HandleSeatStateUpdated");
static_assert(offsetof(SR_Core_C_HandleSeatStateUpdated, Pawn) == 0x000000, "Member 'SR_Core_C_HandleSeatStateUpdated::Pawn' has a wrong offset!");
static_assert(offsetof(SR_Core_C_HandleSeatStateUpdated, Entering) == 0x000008, "Member 'SR_Core_C_HandleSeatStateUpdated::Entering' has a wrong offset!");
static_assert(offsetof(SR_Core_C_HandleSeatStateUpdated, SeatIdx) == 0x00000C, "Member 'SR_Core_C_HandleSeatStateUpdated::SeatIdx' has a wrong offset!");
static_assert(offsetof(SR_Core_C_HandleSeatStateUpdated, CallFunc_IsExternalSeat_ReturnValue) == 0x000010, "Member 'SR_Core_C_HandleSeatStateUpdated::CallFunc_IsExternalSeat_ReturnValue' has a wrong offset!");
static_assert(offsetof(SR_Core_C_HandleSeatStateUpdated, CallFunc_IsLocallyControlled_ReturnValue) == 0x000011, "Member 'SR_Core_C_HandleSeatStateUpdated::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(SR_Core_C_HandleSeatStateUpdated, CallFunc_Not_PreBool_ReturnValue) == 0x000012, "Member 'SR_Core_C_HandleSeatStateUpdated::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(SR_Core_C_HandleSeatStateUpdated, CallFunc_BooleanAND_ReturnValue) == 0x000013, "Member 'SR_Core_C_HandleSeatStateUpdated::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(SR_Core_C_HandleSeatStateUpdated, CallFunc_BooleanAND_ReturnValue_1) == 0x000014, "Member 'SR_Core_C_HandleSeatStateUpdated::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(SR_Core_C_HandleSeatStateUpdated, K2Node_CreateDelegate_OutputDelegate) == 0x000018, "Member 'SR_Core_C_HandleSeatStateUpdated::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(SR_Core_C_HandleSeatStateUpdated, K2Node_CreateDelegate_OutputDelegate_1) == 0x000024, "Member 'SR_Core_C_HandleSeatStateUpdated::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");

// Function SR_Core.SR_Core_C.HandleWeaponStateUpdated
// 0x0020 (0x0020 - 0x0000)
struct SR_Core_C_HandleWeaponStateUpdated final
{
public:
	class AFortWeapon*                            NewWeapon;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortWeapon*                            PrevWeapon;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool bIsTargeting)>            K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SR_Core_C_HandleWeaponStateUpdated) == 0x000008, "Wrong alignment on SR_Core_C_HandleWeaponStateUpdated");
static_assert(sizeof(SR_Core_C_HandleWeaponStateUpdated) == 0x000020, "Wrong size on SR_Core_C_HandleWeaponStateUpdated");
static_assert(offsetof(SR_Core_C_HandleWeaponStateUpdated, NewWeapon) == 0x000000, "Member 'SR_Core_C_HandleWeaponStateUpdated::NewWeapon' has a wrong offset!");
static_assert(offsetof(SR_Core_C_HandleWeaponStateUpdated, PrevWeapon) == 0x000008, "Member 'SR_Core_C_HandleWeaponStateUpdated::PrevWeapon' has a wrong offset!");
static_assert(offsetof(SR_Core_C_HandleWeaponStateUpdated, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'SR_Core_C_HandleWeaponStateUpdated::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function SR_Core.SR_Core_C.OnPawnEnterSeat
// 0x0020 (0x0020 - 0x0000)
struct SR_Core_C_OnPawnEnterSeat final
{
public:
	TScriptInterface<class IFortVehicleInterface> Vehicle;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class AFortPawn*                              PlayerPawn;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SeatIndex;                                         // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SR_Core_C_OnPawnEnterSeat) == 0x000008, "Wrong alignment on SR_Core_C_OnPawnEnterSeat");
static_assert(sizeof(SR_Core_C_OnPawnEnterSeat) == 0x000020, "Wrong size on SR_Core_C_OnPawnEnterSeat");
static_assert(offsetof(SR_Core_C_OnPawnEnterSeat, Vehicle) == 0x000000, "Member 'SR_Core_C_OnPawnEnterSeat::Vehicle' has a wrong offset!");
static_assert(offsetof(SR_Core_C_OnPawnEnterSeat, PlayerPawn) == 0x000010, "Member 'SR_Core_C_OnPawnEnterSeat::PlayerPawn' has a wrong offset!");
static_assert(offsetof(SR_Core_C_OnPawnEnterSeat, SeatIndex) == 0x000018, "Member 'SR_Core_C_OnPawnEnterSeat::SeatIndex' has a wrong offset!");

// Function SR_Core.SR_Core_C.OnPawnExitSeat
// 0x0020 (0x0020 - 0x0000)
struct SR_Core_C_OnPawnExitSeat final
{
public:
	TScriptInterface<class IFortVehicleInterface> Vehicle;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class AFortPawn*                              PlayerPawn;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SeatIndex;                                         // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SR_Core_C_OnPawnExitSeat) == 0x000008, "Wrong alignment on SR_Core_C_OnPawnExitSeat");
static_assert(sizeof(SR_Core_C_OnPawnExitSeat) == 0x000020, "Wrong size on SR_Core_C_OnPawnExitSeat");
static_assert(offsetof(SR_Core_C_OnPawnExitSeat, Vehicle) == 0x000000, "Member 'SR_Core_C_OnPawnExitSeat::Vehicle' has a wrong offset!");
static_assert(offsetof(SR_Core_C_OnPawnExitSeat, PlayerPawn) == 0x000010, "Member 'SR_Core_C_OnPawnExitSeat::PlayerPawn' has a wrong offset!");
static_assert(offsetof(SR_Core_C_OnPawnExitSeat, SeatIndex) == 0x000018, "Member 'SR_Core_C_OnPawnExitSeat::SeatIndex' has a wrong offset!");

// Function SR_Core.SR_Core_C.UpdateMixState
// 0x0001 (0x0001 - 0x0000)
struct SR_Core_C_UpdateMixState final
{
public:
	bool                                          CallFunc_GetIsMixAllowed_MixAllowed;               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SR_Core_C_UpdateMixState) == 0x000001, "Wrong alignment on SR_Core_C_UpdateMixState");
static_assert(sizeof(SR_Core_C_UpdateMixState) == 0x000001, "Wrong size on SR_Core_C_UpdateMixState");
static_assert(offsetof(SR_Core_C_UpdateMixState, CallFunc_GetIsMixAllowed_MixAllowed) == 0x000000, "Member 'SR_Core_C_UpdateMixState::CallFunc_GetIsMixAllowed_MixAllowed' has a wrong offset!");

}

