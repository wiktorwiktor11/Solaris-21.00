#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ItemCostWidget

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass ItemCostWidget.ItemCostWidget_C
// 0x0038 (0x02F0 - 0x02B8)
class UItemCostWidget_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBorder*                                RarityBorder;                                      // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         ResourceWidgetsContainer;                          // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TArray<class UResourceCountWidget_C*>         ResourceWidgets;                                   // 0x02D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UMaterialInstanceDynamic*               RarityMID;                                         // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowRarityData;                                    // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseBackgroundForAffordabilityFeedback;            // 0x02E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AreCostsValid(const TMap<EFortResourceType, int32>& Costs, bool* CostsAreValid);
	void ExecuteUbergraph_ItemCostWidget(int32 EntryPoint);
	void FindWidget(EFortResourceType Resource, class UResourceCountWidget_C** Widget);
	void GetValidatedCost(const TMap<EFortResourceType, int32>& Costs, const EFortResourceType& Resource, bool* CostIsValid, int32* Cost);
	void PopulateWidgets();
	void PreConstruct(bool IsDesignTime);
	void SetItemCost(class AActor* Actor, class UClass* SpecifiedItemCostComponent);
	void SetRarityData(const struct FFortRarityItemData& RarityData);
	void UpdateResource(const TMap<EFortResourceType, int32>& Costs, class UResourceCountWidget_C* ResourceWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ItemCostWidget_C">();
	}
	static class UItemCostWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItemCostWidget_C>();
	}
};
static_assert(alignof(UItemCostWidget_C) == 0x000008, "Wrong alignment on UItemCostWidget_C");
static_assert(sizeof(UItemCostWidget_C) == 0x0002F0, "Wrong size on UItemCostWidget_C");
static_assert(offsetof(UItemCostWidget_C, UberGraphFrame) == 0x0002B8, "Member 'UItemCostWidget_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UItemCostWidget_C, RarityBorder) == 0x0002C0, "Member 'UItemCostWidget_C::RarityBorder' has a wrong offset!");
static_assert(offsetof(UItemCostWidget_C, ResourceWidgetsContainer) == 0x0002C8, "Member 'UItemCostWidget_C::ResourceWidgetsContainer' has a wrong offset!");
static_assert(offsetof(UItemCostWidget_C, ResourceWidgets) == 0x0002D0, "Member 'UItemCostWidget_C::ResourceWidgets' has a wrong offset!");
static_assert(offsetof(UItemCostWidget_C, RarityMID) == 0x0002E0, "Member 'UItemCostWidget_C::RarityMID' has a wrong offset!");
static_assert(offsetof(UItemCostWidget_C, ShowRarityData) == 0x0002E8, "Member 'UItemCostWidget_C::ShowRarityData' has a wrong offset!");
static_assert(offsetof(UItemCostWidget_C, bUseBackgroundForAffordabilityFeedback) == 0x0002E9, "Member 'UItemCostWidget_C::bUseBackgroundForAffordabilityFeedback' has a wrong offset!");

}

