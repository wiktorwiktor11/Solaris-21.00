#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SquadLock

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "SquadLockScannerRay_structs.hpp"
#include "PawnsInSquadLockVolume_structs.hpp"
#include "BGA_Athena_Lock_Parent_classes.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass SquadLock.SquadLock_C
// 0x04F8 (0x1040 - 0x0B48)
class ASquadLock_C final : public ABGA_Athena_Lock_Parent_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_SquadLock_C;                        // 0x0B48(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFortSoundIndicatorComponent*           FortSoundIndicator;                                // 0x0B50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sm_Camera_ScannerRay_Volume;                       // 0x0B58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       CollisionSphereForDisableTeamupBehaviorTag;        // 0x0B60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_SquadLock_ScanVolume;                           // 0x0B68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          CollisionBoxForPlayerStandingInFrontOfScanner;     // 0x0B70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sm_Camera_ScannerRay4;                             // 0x0B78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sm_Camera_ScannerRay3;                             // 0x0B80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sm_Camera_ScannerRay_ForPawns;                     // 0x0B88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        ScanSound;                                         // 0x0B90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x0B98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x0BA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio;                                             // 0x0BA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       LockScreenWidget;                                  // 0x0BB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                UnAim_Eye_AdjustEyeRings_E87FFA704A35D3FF143D87A06DFAC623; // 0x0BB8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UnAim_Eye_ObjectScale_E87FFA704A35D3FF143D87A06DFAC623; // 0x0BD0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UnAim_Eye_StareIntent_E87FFA704A35D3FF143D87A06DFAC623; // 0x0BD4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UnAim_Eye_EyeLerp_E87FFA704A35D3FF143D87A06DFAC623; // 0x0BD8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            UnAim_Eye__Direction_E87FFA704A35D3FF143D87A06DFAC623; // 0x0BDC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BDD[0x3];                                      // 0x0BDD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     UnAim_Eye;                                         // 0x0BE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Aim_eye_AdjustEyeRings_2C319EC149BB9F38AEB3AF8F7804BC9B; // 0x0BE8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Aim_eye_LerpEyeColor_2C319EC149BB9F38AEB3AF8F7804BC9B; // 0x0C00(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Aim_eye_ObjectScale_2C319EC149BB9F38AEB3AF8F7804BC9B; // 0x0C04(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Aim_eye_StareIntent_2C319EC149BB9F38AEB3AF8F7804BC9B; // 0x0C08(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Aim_eye_EyeLerp_2C319EC149BB9F38AEB3AF8F7804BC9B;  // 0x0C0C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Aim_eye__Direction_2C319EC149BB9F38AEB3AF8F7804BC9B; // 0x0C10(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C11[0x7];                                      // 0x0C11(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Aim_Eye;                                           // 0x0C18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortGameModeAthena*                    As_Game_Mode_Athena;                               // 0x0C20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AFortPawn*>                      As_Fort_Pawn;                                      // 0x0C28(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance, RepNotify)
	bool                                          AllPawnsWithinRange;                               // 0x0C38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C39[0x3];                                      // 0x0C39(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumPlayersRequiredToUnlock;                        // 0x0C3C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USquadLock_HoloUI_C*                    LockScreenUI;                                      // 0x0C40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumPlayersInRange;                                 // 0x0C48(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	int32                                         PrevNumPlayersInRange;                             // 0x0C4C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumPendingPlayersInRange;                          // 0x0C50(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	int32                                         PrevNumPendingPlayersInRange;                      // 0x0C54(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             EnterRangeSound;                                   // 0x0C58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             UnlockedSound;                                     // 0x0C60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             ExitRangeSound;                                    // 0x0C68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             RegisteredPlayerSound;                             // 0x0C70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsUnlocked;                                       // 0x0C78(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          HasPinged;                                         // 0x0C79(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C7A[0x6];                                      // 0x0C7A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Timer_UnAimEye;                                    // 0x0C80(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ColorUnlock;                                       // 0x0C88(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ScannerColor;                                      // 0x0C98(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ColorLock;                                         // 0x0CA8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Lock_Mat_Direction;                                // 0x0CB8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EndType;                                           // 0x0CD0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	int32                                         ScannerRayIndex;                                   // 0x0CD4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FSquadLockScannerRay>           ScannerRays;                                       // 0x0CD8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	int32                                         ActiveScannerCount;                                // 0x0CE8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsScanning;                                        // 0x0CEC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CED[0x3];                                      // 0x0CED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPawnsInSquadLockVolume>        PawnsInVolume;                                     // 0x0CF0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          FoundScannerForPawn;                               // 0x0D00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D01[0x7];                                      // 0x0D01(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AFortPawn*>                      QuedForUnScanFortPawns;                            // 0x0D08(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         ScanTime;                                          // 0x0D18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExitScanTime;                                      // 0x0D1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentPawnInVolumeIndex;                          // 0x0D20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AimInterpolationAlpha;                             // 0x0D24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CurrentRot;                                        // 0x0D28(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               PrimaryDesiredRot;                                 // 0x0D40(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               StartingtRot;                                      // 0x0D58(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         ScannerRayAngleLimitFactor_MinDot;                 // 0x0D70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           PawnExitScannerColor;                              // 0x0D74(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           PawnEnterScannerColor;                             // 0x0D84(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           StartColor;                                        // 0x0D94(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CurrentColor;                                      // 0x0DA4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DesiredColor;                                      // 0x0DB4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PawnScannerWidthEnd;                               // 0x0DC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PawnScannerWidthBase;                              // 0x0DC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VolumeScannerWidthEnd;                             // 0x0DCC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VolumeScannerWidthBase;                            // 0x0DD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VolumeScannerAngle;                                // 0x0DD4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PawnScannerAngle;                                  // 0x0DD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UnlockFlashOnDelaySeconds;                         // 0x0DDC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UnlockFlashOffDelaySeconds;                        // 0x0DE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PendingUnlock;                                     // 0x0DE4(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DE5[0x3];                                      // 0x0DE5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FlashCount;                                        // 0x0DE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DEC[0x4];                                      // 0x0DEC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             PendingUnlockFlashSound;                           // 0x0DF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AdjustedNumPlayersRequiredToUnlock;                // 0x0DF8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxRequiredPlayers;                                // 0x0DFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CVAR_MinRequiredPlayers;                           // 0x0E00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SecondsForPendingPawnToBecomeScanned;              // 0x0E04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DisablingScanner;                                  // 0x0E08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DrawDebuglinesToScannedPawns;                      // 0x0E09(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLockScreenInitialized;                           // 0x0E0A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E0B[0x5];                                      // 0x0E0B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  UnlockQuestSourceTag;                              // 0x0E10(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class USoundBase*                             ScannerOnSound;                                    // 0x0E30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             ScannerOffSound;                                   // 0x0E38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             FinalLockVisualFlashSound;                         // 0x0E40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasBeenDistabled;                                  // 0x0E48(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E49[0x7];                                      // 0x0E49(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         ScalableFloatFor_Enabled;                          // 0x0E50(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSubclassOf<class UGameplayEffect>            Gameplay_Effect_Apply_AC_DisableTeamupCheckTag;    // 0x0E78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	int32                                         FlashBeepCount;                                    // 0x0E80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E84[0x4];                                      // 0x0E84(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  PlaylistTag_Solos;                                 // 0x0E88(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         ScalableFloatForNumRequiredOverride_Solos;         // 0x0EA8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         ScalableFloatForNumRequiredOverride_Duos;          // 0x0ED0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         ScalableFloatForNumRequiredOverride_Trios;         // 0x0EF8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         ScalableFloatForNumRequiredOverride_Squads;        // 0x0F20(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  PlaylistTag_Duos;                                  // 0x0F48(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  PlaylistTag_Trios;                                 // 0x0F68(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  PlaylistTag_Squad;                                 // 0x0F88(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  PlaylistTag_LargeTeam;                             // 0x0FA8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         ScalableFloatForNumRequiredOverride_LargeTeam;     // 0x0FC8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         ScalableFloatUseSquadSizeForNumRequiredPlayers;    // 0x0FF0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bAllowRequirePlayerCountOverrideFromPlaylist;      // 0x1018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUnlockedHoldingChicken;                           // 0x1019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_101A[0x6];                                     // 0x101A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  UnlockStatusGameplayTags;                          // 0x1020(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void Activate_Scan_Volume_NS();
	void Aim_Eye__FinishedFunc();
	void Aim_Eye__UpdateFunc();
	void BlueprintOnInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted);
	void CE_AimEye(class AFortPawn* Interacting_Pawn, int32 Index_0);
	void CE_EndAimEye(int32 Index_0, class AFortPawn* InFortPawn);
	void CountActiveScanners();
	void Deactivate_Scan_Volume_NS();
	void DoneWithScan();
	void DrawDebugToQuedPawns();
	void EndScan(bool canceled);
	void ExecuteUbergraph_SquadLock(int32 EntryPoint);
	void ExitScanTimerExpired();
	void Find_Scanner_Slot_For_Pawn(class AFortPawn* InFortPawn, bool Exiting, bool* Success, int32* ScannerIndex);
	void FinishedAllEyeAims();
	void FlashScanner();
	void FrameUpdateAimInterpolation();
	void Get_Next_Unscanned_PawnInVolume_Index(int32* RetIndex);
	void Get_Pawns_In_Volume_Index_By_Pawn(class AFortPawn* FortPawn, int32* RetIndex);
	void Get_Scanner_Forward_Rot(struct FRotator* NewParam);
	void Init_Lock_Screen_Widget();
	void Initialize_Scanner_Ray(class UStaticMeshComponent* ScannerRayStaticMesh, const struct FLinearColor& ScannerColor_0, float BaseWidth, float EndWidth, float Angle, const float ScanRotAnim);
	void IsLocked(bool* bIsLocked);
	void OneTime_SetAdjustedNumPlayersRequiredToUnlock(const struct FGameplayTagContainer& PlaylistTags, class UFortPlaylist* FortPlaylist);
	void OnReady_0BAB31FB47344C6E04082EA0DFE1C899(class AFortGameStateAthena* GameState, const class UFortPlaylist* Playlist, const struct FGameplayTagContainer& PlaylistContextTags);
	void OnRep_AdjustedNumPlayersRequiredToUnlock();
	void OnRep_As_Fort_Pawn();
	void OnRep_bIsUnlocked();
	void OnRep_EndType();
	void OnRep_HasBeenDistabled();
	void OnRep_NumPendingPlayersInRange();
	void OnRep_NumPlayersInRange();
	void OnRep_PendingUnlock();
	void OnUnLocked();
	void Ping_if_Needed();
	void ReceiveBeginPlay();
	void ReinitializeCollisionBoxForPlayerStandingInFrontOfScanner();
	void ReinitializeCollisionSphereForDisableTeamupBehaviorTag();
	void ResetDoOnce();
	void Scanner_Collis_End_Overlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void Scanner_Collis_Overlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void SendQuestUpdateForPlayers();
	void SetPrimaryAimToCurrent();
	void SetScannerColor(class UStaticMeshComponent* ScannerRayStaticMesh, const struct FLinearColor& InScannerColor);
	void SetScannerPower(bool On);
	void SetScanningActive(bool Active);
	void SetupAndStartScannerAimInterpolation(const struct FRotator& InAimRot, const struct FLinearColor& LinearColor, bool IsExit);
	void SpawnScannedPawnParticles(class AFortPawn* InFortPawn, const float& InScannedTime, bool NewParam);
	void Start_Scanner_Aim_Interpolation();
	void StartAllEyeAimScanning();
	void StartScanningAll();
	void StartUnlock();
	void TeamupVolumeEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void TeamupVolumeStartOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void UnAim_Eye__FinishedFunc();
	void UnAim_Eye__UpdateFunc();
	void UnaimEyeAll();
	void Update_Scanning_Ques();
	void UpdatePawnCounts();
	void UserConstructionScript();

	bool BlueprintCanInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted, const ETInteractionType InteractionType) const;
	class FText BlueprintGetFailedInteractionString(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted) const;
	class FText BlueprintGetInteractionString(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted) const;
	void Get_Num_Required_Players(int32* GetNumRequiredPlayers) const;
	void Get_Players_In_Range_and_Total_Required_To_Unlock(int32* NumPlayersnRange, int32* NumPlayersRequired, int32* NumUnscannedPlayersInRange) const;
	void Get_Present_Pawn_Counts(float CurrentTime, int32* RetVal_ScannedPawnCount, int32* RetVal_PendingScannedPawnCount) const;
	class FName GetMarkerDetailsId() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SquadLock_C">();
	}
	static class ASquadLock_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASquadLock_C>();
	}
};
static_assert(alignof(ASquadLock_C) == 0x000008, "Wrong alignment on ASquadLock_C");
static_assert(sizeof(ASquadLock_C) == 0x001040, "Wrong size on ASquadLock_C");
static_assert(offsetof(ASquadLock_C, UberGraphFrame_SquadLock_C) == 0x000B48, "Member 'ASquadLock_C::UberGraphFrame_SquadLock_C' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, FortSoundIndicator) == 0x000B50, "Member 'ASquadLock_C::FortSoundIndicator' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, Sm_Camera_ScannerRay_Volume) == 0x000B58, "Member 'ASquadLock_C::Sm_Camera_ScannerRay_Volume' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, CollisionSphereForDisableTeamupBehaviorTag) == 0x000B60, "Member 'ASquadLock_C::CollisionSphereForDisableTeamupBehaviorTag' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, NS_SquadLock_ScanVolume) == 0x000B68, "Member 'ASquadLock_C::NS_SquadLock_ScanVolume' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, CollisionBoxForPlayerStandingInFrontOfScanner) == 0x000B70, "Member 'ASquadLock_C::CollisionBoxForPlayerStandingInFrontOfScanner' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, Sm_Camera_ScannerRay4) == 0x000B78, "Member 'ASquadLock_C::Sm_Camera_ScannerRay4' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, Sm_Camera_ScannerRay3) == 0x000B80, "Member 'ASquadLock_C::Sm_Camera_ScannerRay3' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, Sm_Camera_ScannerRay_ForPawns) == 0x000B88, "Member 'ASquadLock_C::Sm_Camera_ScannerRay_ForPawns' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, ScanSound) == 0x000B90, "Member 'ASquadLock_C::ScanSound' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, PointLight) == 0x000B98, "Member 'ASquadLock_C::PointLight' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, SpotLight) == 0x000BA0, "Member 'ASquadLock_C::SpotLight' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, Audio) == 0x000BA8, "Member 'ASquadLock_C::Audio' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, LockScreenWidget) == 0x000BB0, "Member 'ASquadLock_C::LockScreenWidget' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, UnAim_Eye_AdjustEyeRings_E87FFA704A35D3FF143D87A06DFAC623) == 0x000BB8, "Member 'ASquadLock_C::UnAim_Eye_AdjustEyeRings_E87FFA704A35D3FF143D87A06DFAC623' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, UnAim_Eye_ObjectScale_E87FFA704A35D3FF143D87A06DFAC623) == 0x000BD0, "Member 'ASquadLock_C::UnAim_Eye_ObjectScale_E87FFA704A35D3FF143D87A06DFAC623' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, UnAim_Eye_StareIntent_E87FFA704A35D3FF143D87A06DFAC623) == 0x000BD4, "Member 'ASquadLock_C::UnAim_Eye_StareIntent_E87FFA704A35D3FF143D87A06DFAC623' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, UnAim_Eye_EyeLerp_E87FFA704A35D3FF143D87A06DFAC623) == 0x000BD8, "Member 'ASquadLock_C::UnAim_Eye_EyeLerp_E87FFA704A35D3FF143D87A06DFAC623' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, UnAim_Eye__Direction_E87FFA704A35D3FF143D87A06DFAC623) == 0x000BDC, "Member 'ASquadLock_C::UnAim_Eye__Direction_E87FFA704A35D3FF143D87A06DFAC623' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, UnAim_Eye) == 0x000BE0, "Member 'ASquadLock_C::UnAim_Eye' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, Aim_eye_AdjustEyeRings_2C319EC149BB9F38AEB3AF8F7804BC9B) == 0x000BE8, "Member 'ASquadLock_C::Aim_eye_AdjustEyeRings_2C319EC149BB9F38AEB3AF8F7804BC9B' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, Aim_eye_LerpEyeColor_2C319EC149BB9F38AEB3AF8F7804BC9B) == 0x000C00, "Member 'ASquadLock_C::Aim_eye_LerpEyeColor_2C319EC149BB9F38AEB3AF8F7804BC9B' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, Aim_eye_ObjectScale_2C319EC149BB9F38AEB3AF8F7804BC9B) == 0x000C04, "Member 'ASquadLock_C::Aim_eye_ObjectScale_2C319EC149BB9F38AEB3AF8F7804BC9B' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, Aim_eye_StareIntent_2C319EC149BB9F38AEB3AF8F7804BC9B) == 0x000C08, "Member 'ASquadLock_C::Aim_eye_StareIntent_2C319EC149BB9F38AEB3AF8F7804BC9B' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, Aim_eye_EyeLerp_2C319EC149BB9F38AEB3AF8F7804BC9B) == 0x000C0C, "Member 'ASquadLock_C::Aim_eye_EyeLerp_2C319EC149BB9F38AEB3AF8F7804BC9B' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, Aim_eye__Direction_2C319EC149BB9F38AEB3AF8F7804BC9B) == 0x000C10, "Member 'ASquadLock_C::Aim_eye__Direction_2C319EC149BB9F38AEB3AF8F7804BC9B' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, Aim_Eye) == 0x000C18, "Member 'ASquadLock_C::Aim_Eye' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, As_Game_Mode_Athena) == 0x000C20, "Member 'ASquadLock_C::As_Game_Mode_Athena' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, As_Fort_Pawn) == 0x000C28, "Member 'ASquadLock_C::As_Fort_Pawn' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, AllPawnsWithinRange) == 0x000C38, "Member 'ASquadLock_C::AllPawnsWithinRange' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, NumPlayersRequiredToUnlock) == 0x000C3C, "Member 'ASquadLock_C::NumPlayersRequiredToUnlock' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, LockScreenUI) == 0x000C40, "Member 'ASquadLock_C::LockScreenUI' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, NumPlayersInRange) == 0x000C48, "Member 'ASquadLock_C::NumPlayersInRange' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, PrevNumPlayersInRange) == 0x000C4C, "Member 'ASquadLock_C::PrevNumPlayersInRange' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, NumPendingPlayersInRange) == 0x000C50, "Member 'ASquadLock_C::NumPendingPlayersInRange' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, PrevNumPendingPlayersInRange) == 0x000C54, "Member 'ASquadLock_C::PrevNumPendingPlayersInRange' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, EnterRangeSound) == 0x000C58, "Member 'ASquadLock_C::EnterRangeSound' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, UnlockedSound) == 0x000C60, "Member 'ASquadLock_C::UnlockedSound' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, ExitRangeSound) == 0x000C68, "Member 'ASquadLock_C::ExitRangeSound' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, RegisteredPlayerSound) == 0x000C70, "Member 'ASquadLock_C::RegisteredPlayerSound' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, bIsUnlocked) == 0x000C78, "Member 'ASquadLock_C::bIsUnlocked' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, HasPinged) == 0x000C79, "Member 'ASquadLock_C::HasPinged' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, Timer_UnAimEye) == 0x000C80, "Member 'ASquadLock_C::Timer_UnAimEye' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, ColorUnlock) == 0x000C88, "Member 'ASquadLock_C::ColorUnlock' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, ScannerColor) == 0x000C98, "Member 'ASquadLock_C::ScannerColor' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, ColorLock) == 0x000CA8, "Member 'ASquadLock_C::ColorLock' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, Lock_Mat_Direction) == 0x000CB8, "Member 'ASquadLock_C::Lock_Mat_Direction' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, EndType) == 0x000CD0, "Member 'ASquadLock_C::EndType' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, ScannerRayIndex) == 0x000CD4, "Member 'ASquadLock_C::ScannerRayIndex' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, ScannerRays) == 0x000CD8, "Member 'ASquadLock_C::ScannerRays' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, ActiveScannerCount) == 0x000CE8, "Member 'ASquadLock_C::ActiveScannerCount' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, IsScanning) == 0x000CEC, "Member 'ASquadLock_C::IsScanning' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, PawnsInVolume) == 0x000CF0, "Member 'ASquadLock_C::PawnsInVolume' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, FoundScannerForPawn) == 0x000D00, "Member 'ASquadLock_C::FoundScannerForPawn' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, QuedForUnScanFortPawns) == 0x000D08, "Member 'ASquadLock_C::QuedForUnScanFortPawns' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, ScanTime) == 0x000D18, "Member 'ASquadLock_C::ScanTime' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, ExitScanTime) == 0x000D1C, "Member 'ASquadLock_C::ExitScanTime' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, CurrentPawnInVolumeIndex) == 0x000D20, "Member 'ASquadLock_C::CurrentPawnInVolumeIndex' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, AimInterpolationAlpha) == 0x000D24, "Member 'ASquadLock_C::AimInterpolationAlpha' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, CurrentRot) == 0x000D28, "Member 'ASquadLock_C::CurrentRot' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, PrimaryDesiredRot) == 0x000D40, "Member 'ASquadLock_C::PrimaryDesiredRot' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, StartingtRot) == 0x000D58, "Member 'ASquadLock_C::StartingtRot' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, ScannerRayAngleLimitFactor_MinDot) == 0x000D70, "Member 'ASquadLock_C::ScannerRayAngleLimitFactor_MinDot' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, PawnExitScannerColor) == 0x000D74, "Member 'ASquadLock_C::PawnExitScannerColor' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, PawnEnterScannerColor) == 0x000D84, "Member 'ASquadLock_C::PawnEnterScannerColor' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, StartColor) == 0x000D94, "Member 'ASquadLock_C::StartColor' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, CurrentColor) == 0x000DA4, "Member 'ASquadLock_C::CurrentColor' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, DesiredColor) == 0x000DB4, "Member 'ASquadLock_C::DesiredColor' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, PawnScannerWidthEnd) == 0x000DC4, "Member 'ASquadLock_C::PawnScannerWidthEnd' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, PawnScannerWidthBase) == 0x000DC8, "Member 'ASquadLock_C::PawnScannerWidthBase' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, VolumeScannerWidthEnd) == 0x000DCC, "Member 'ASquadLock_C::VolumeScannerWidthEnd' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, VolumeScannerWidthBase) == 0x000DD0, "Member 'ASquadLock_C::VolumeScannerWidthBase' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, VolumeScannerAngle) == 0x000DD4, "Member 'ASquadLock_C::VolumeScannerAngle' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, PawnScannerAngle) == 0x000DD8, "Member 'ASquadLock_C::PawnScannerAngle' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, UnlockFlashOnDelaySeconds) == 0x000DDC, "Member 'ASquadLock_C::UnlockFlashOnDelaySeconds' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, UnlockFlashOffDelaySeconds) == 0x000DE0, "Member 'ASquadLock_C::UnlockFlashOffDelaySeconds' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, PendingUnlock) == 0x000DE4, "Member 'ASquadLock_C::PendingUnlock' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, FlashCount) == 0x000DE8, "Member 'ASquadLock_C::FlashCount' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, PendingUnlockFlashSound) == 0x000DF0, "Member 'ASquadLock_C::PendingUnlockFlashSound' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, AdjustedNumPlayersRequiredToUnlock) == 0x000DF8, "Member 'ASquadLock_C::AdjustedNumPlayersRequiredToUnlock' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, MaxRequiredPlayers) == 0x000DFC, "Member 'ASquadLock_C::MaxRequiredPlayers' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, CVAR_MinRequiredPlayers) == 0x000E00, "Member 'ASquadLock_C::CVAR_MinRequiredPlayers' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, SecondsForPendingPawnToBecomeScanned) == 0x000E04, "Member 'ASquadLock_C::SecondsForPendingPawnToBecomeScanned' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, DisablingScanner) == 0x000E08, "Member 'ASquadLock_C::DisablingScanner' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, DrawDebuglinesToScannedPawns) == 0x000E09, "Member 'ASquadLock_C::DrawDebuglinesToScannedPawns' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, IsLockScreenInitialized) == 0x000E0A, "Member 'ASquadLock_C::IsLockScreenInitialized' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, UnlockQuestSourceTag) == 0x000E10, "Member 'ASquadLock_C::UnlockQuestSourceTag' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, ScannerOnSound) == 0x000E30, "Member 'ASquadLock_C::ScannerOnSound' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, ScannerOffSound) == 0x000E38, "Member 'ASquadLock_C::ScannerOffSound' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, FinalLockVisualFlashSound) == 0x000E40, "Member 'ASquadLock_C::FinalLockVisualFlashSound' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, HasBeenDistabled) == 0x000E48, "Member 'ASquadLock_C::HasBeenDistabled' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, ScalableFloatFor_Enabled) == 0x000E50, "Member 'ASquadLock_C::ScalableFloatFor_Enabled' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, Gameplay_Effect_Apply_AC_DisableTeamupCheckTag) == 0x000E78, "Member 'ASquadLock_C::Gameplay_Effect_Apply_AC_DisableTeamupCheckTag' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, FlashBeepCount) == 0x000E80, "Member 'ASquadLock_C::FlashBeepCount' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, PlaylistTag_Solos) == 0x000E88, "Member 'ASquadLock_C::PlaylistTag_Solos' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, ScalableFloatForNumRequiredOverride_Solos) == 0x000EA8, "Member 'ASquadLock_C::ScalableFloatForNumRequiredOverride_Solos' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, ScalableFloatForNumRequiredOverride_Duos) == 0x000ED0, "Member 'ASquadLock_C::ScalableFloatForNumRequiredOverride_Duos' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, ScalableFloatForNumRequiredOverride_Trios) == 0x000EF8, "Member 'ASquadLock_C::ScalableFloatForNumRequiredOverride_Trios' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, ScalableFloatForNumRequiredOverride_Squads) == 0x000F20, "Member 'ASquadLock_C::ScalableFloatForNumRequiredOverride_Squads' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, PlaylistTag_Duos) == 0x000F48, "Member 'ASquadLock_C::PlaylistTag_Duos' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, PlaylistTag_Trios) == 0x000F68, "Member 'ASquadLock_C::PlaylistTag_Trios' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, PlaylistTag_Squad) == 0x000F88, "Member 'ASquadLock_C::PlaylistTag_Squad' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, PlaylistTag_LargeTeam) == 0x000FA8, "Member 'ASquadLock_C::PlaylistTag_LargeTeam' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, ScalableFloatForNumRequiredOverride_LargeTeam) == 0x000FC8, "Member 'ASquadLock_C::ScalableFloatForNumRequiredOverride_LargeTeam' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, ScalableFloatUseSquadSizeForNumRequiredPlayers) == 0x000FF0, "Member 'ASquadLock_C::ScalableFloatUseSquadSizeForNumRequiredPlayers' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, bAllowRequirePlayerCountOverrideFromPlaylist) == 0x001018, "Member 'ASquadLock_C::bAllowRequirePlayerCountOverrideFromPlaylist' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, bUnlockedHoldingChicken) == 0x001019, "Member 'ASquadLock_C::bUnlockedHoldingChicken' has a wrong offset!");
static_assert(offsetof(ASquadLock_C, UnlockStatusGameplayTags) == 0x001020, "Member 'ASquadLock_C::UnlockStatusGameplayTags' has a wrong offset!");

}

