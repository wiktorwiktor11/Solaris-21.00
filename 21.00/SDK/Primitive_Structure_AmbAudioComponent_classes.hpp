#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Primitive_Structure_AmbAudioComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Primitive_Structure_AmbAudioComponent.Primitive_Structure_AmbAudioComponent_C
// 0x0028 (0x00C8 - 0x00A0)
class UPrimitive_Structure_AmbAudioComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class USoundBase*>                     SoundToPlay;                                       // 0x00A8(0x0010)(Edit, BlueprintVisible)
	float                                         RandomTimeMin;                                     // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RandomTimeMax;                                     // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TimerHandle;                                       // 0x00C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Primitive_Structure_AmbAudioComponent(int32 EntryPoint);
	void Play_Ambient_Audio();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Primitive_Structure_AmbAudioComponent_C">();
	}
	static class UPrimitive_Structure_AmbAudioComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrimitive_Structure_AmbAudioComponent_C>();
	}
};
static_assert(alignof(UPrimitive_Structure_AmbAudioComponent_C) == 0x000008, "Wrong alignment on UPrimitive_Structure_AmbAudioComponent_C");
static_assert(sizeof(UPrimitive_Structure_AmbAudioComponent_C) == 0x0000C8, "Wrong size on UPrimitive_Structure_AmbAudioComponent_C");
static_assert(offsetof(UPrimitive_Structure_AmbAudioComponent_C, UberGraphFrame) == 0x0000A0, "Member 'UPrimitive_Structure_AmbAudioComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UPrimitive_Structure_AmbAudioComponent_C, SoundToPlay) == 0x0000A8, "Member 'UPrimitive_Structure_AmbAudioComponent_C::SoundToPlay' has a wrong offset!");
static_assert(offsetof(UPrimitive_Structure_AmbAudioComponent_C, RandomTimeMin) == 0x0000B8, "Member 'UPrimitive_Structure_AmbAudioComponent_C::RandomTimeMin' has a wrong offset!");
static_assert(offsetof(UPrimitive_Structure_AmbAudioComponent_C, RandomTimeMax) == 0x0000BC, "Member 'UPrimitive_Structure_AmbAudioComponent_C::RandomTimeMax' has a wrong offset!");
static_assert(offsetof(UPrimitive_Structure_AmbAudioComponent_C, TimerHandle) == 0x0000C0, "Member 'UPrimitive_Structure_AmbAudioComponent_C::TimerHandle' has a wrong offset!");

}

