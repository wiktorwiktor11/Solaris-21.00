#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Athena_HappyGhost_Fire

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"


namespace SDK::Params
{

// Function GA_Athena_HappyGhost_Fire.GA_Athena_HappyGhost_Fire_C.K2_CommitExecute
// 0x0090 (0x0090 - 0x0000)
struct GA_Athena_HappyGhost_Fire_C_K2_CommitExecute final
{
public:
	TDelegate<void(class UFortWorldItem* ItemDropped)> K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilityActorInfo              CallFunc_GetActorInfo_ReturnValue;                 // 0x0010(0x0048)(ContainsInstancedReference)
	class AFortPawn*                              K2Node_DynamicCast_AsFort_Pawn;                    // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_HappyGhost_Athena_C*                 K2Node_DynamicCast_AsB_Happy_Ghost_Athena;         // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  CallFunc_GetFortPlayerControllerFromActor_ReturnValue; // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerControllerAthena*            K2Node_DynamicCast_AsFort_Player_Controller_Athena; // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Athena_HappyGhost_Fire_C_K2_CommitExecute) == 0x000008, "Wrong alignment on GA_Athena_HappyGhost_Fire_C_K2_CommitExecute");
static_assert(sizeof(GA_Athena_HappyGhost_Fire_C_K2_CommitExecute) == 0x000090, "Wrong size on GA_Athena_HappyGhost_Fire_C_K2_CommitExecute");
static_assert(offsetof(GA_Athena_HappyGhost_Fire_C_K2_CommitExecute, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'GA_Athena_HappyGhost_Fire_C_K2_CommitExecute::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GA_Athena_HappyGhost_Fire_C_K2_CommitExecute, CallFunc_GetActorInfo_ReturnValue) == 0x000010, "Member 'GA_Athena_HappyGhost_Fire_C_K2_CommitExecute::CallFunc_GetActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Athena_HappyGhost_Fire_C_K2_CommitExecute, K2Node_DynamicCast_AsFort_Pawn) == 0x000058, "Member 'GA_Athena_HappyGhost_Fire_C_K2_CommitExecute::K2Node_DynamicCast_AsFort_Pawn' has a wrong offset!");
static_assert(offsetof(GA_Athena_HappyGhost_Fire_C_K2_CommitExecute, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'GA_Athena_HappyGhost_Fire_C_K2_CommitExecute::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_Athena_HappyGhost_Fire_C_K2_CommitExecute, CallFunc_IsValid_ReturnValue) == 0x000061, "Member 'GA_Athena_HappyGhost_Fire_C_K2_CommitExecute::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Athena_HappyGhost_Fire_C_K2_CommitExecute, K2Node_DynamicCast_AsB_Happy_Ghost_Athena) == 0x000068, "Member 'GA_Athena_HappyGhost_Fire_C_K2_CommitExecute::K2Node_DynamicCast_AsB_Happy_Ghost_Athena' has a wrong offset!");
static_assert(offsetof(GA_Athena_HappyGhost_Fire_C_K2_CommitExecute, K2Node_DynamicCast_bSuccess_1) == 0x000070, "Member 'GA_Athena_HappyGhost_Fire_C_K2_CommitExecute::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(GA_Athena_HappyGhost_Fire_C_K2_CommitExecute, CallFunc_GetFortPlayerControllerFromActor_ReturnValue) == 0x000078, "Member 'GA_Athena_HappyGhost_Fire_C_K2_CommitExecute::CallFunc_GetFortPlayerControllerFromActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Athena_HappyGhost_Fire_C_K2_CommitExecute, K2Node_DynamicCast_AsFort_Player_Controller_Athena) == 0x000080, "Member 'GA_Athena_HappyGhost_Fire_C_K2_CommitExecute::K2Node_DynamicCast_AsFort_Player_Controller_Athena' has a wrong offset!");
static_assert(offsetof(GA_Athena_HappyGhost_Fire_C_K2_CommitExecute, K2Node_DynamicCast_bSuccess_2) == 0x000088, "Member 'GA_Athena_HappyGhost_Fire_C_K2_CommitExecute::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");

// Function GA_Athena_HappyGhost_Fire.GA_Athena_HappyGhost_Fire_C.K2_OnEndAbility
// 0x0001 (0x0001 - 0x0000)
struct GA_Athena_HappyGhost_Fire_C_K2_OnEndAbility final
{
public:
	bool                                          bWasCancelled;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Athena_HappyGhost_Fire_C_K2_OnEndAbility) == 0x000001, "Wrong alignment on GA_Athena_HappyGhost_Fire_C_K2_OnEndAbility");
static_assert(sizeof(GA_Athena_HappyGhost_Fire_C_K2_OnEndAbility) == 0x000001, "Wrong size on GA_Athena_HappyGhost_Fire_C_K2_OnEndAbility");
static_assert(offsetof(GA_Athena_HappyGhost_Fire_C_K2_OnEndAbility, bWasCancelled) == 0x000000, "Member 'GA_Athena_HappyGhost_Fire_C_K2_OnEndAbility::bWasCancelled' has a wrong offset!");

// Function GA_Athena_HappyGhost_Fire.GA_Athena_HappyGhost_Fire_C.Overflow
// 0x0008 (0x0008 - 0x0000)
struct GA_Athena_HappyGhost_Fire_C_Overflow final
{
public:
	class UFortWorldItem*                         Item_Dropped;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Athena_HappyGhost_Fire_C_Overflow) == 0x000008, "Wrong alignment on GA_Athena_HappyGhost_Fire_C_Overflow");
static_assert(sizeof(GA_Athena_HappyGhost_Fire_C_Overflow) == 0x000008, "Wrong size on GA_Athena_HappyGhost_Fire_C_Overflow");
static_assert(offsetof(GA_Athena_HappyGhost_Fire_C_Overflow, Item_Dropped) == 0x000000, "Member 'GA_Athena_HappyGhost_Fire_C_Overflow::Item_Dropped' has a wrong offset!");

}

