#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TankRuntime

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "TankRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// Class TankRuntime.FortTankVehicleConfigs
// 0x0058 (0x0868 - 0x0810)
class UFortTankVehicleConfigs final : public UFortTreadVehicleConfigs
{
public:
	TArray<struct FTankWeaponAimingData>          TankWeaponAimingData;                              // 0x0810(0x0010)(Edit, ZeroConstructor, Config, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   SecondInteractText;                                // 0x0820(0x0018)(Edit, Config, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	ETInteractionType                             SecondInteractType;                                // 0x0838(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_839[0x7];                                      // 0x0839(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         SecondInteractDuration;                            // 0x0840(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTankVehicleConfigs">();
	}
	static class UFortTankVehicleConfigs* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTankVehicleConfigs>();
	}
};
static_assert(alignof(UFortTankVehicleConfigs) == 0x000008, "Wrong alignment on UFortTankVehicleConfigs");
static_assert(sizeof(UFortTankVehicleConfigs) == 0x000868, "Wrong size on UFortTankVehicleConfigs");
static_assert(offsetof(UFortTankVehicleConfigs, TankWeaponAimingData) == 0x000810, "Member 'UFortTankVehicleConfigs::TankWeaponAimingData' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleConfigs, SecondInteractText) == 0x000820, "Member 'UFortTankVehicleConfigs::SecondInteractText' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleConfigs, SecondInteractType) == 0x000838, "Member 'UFortTankVehicleConfigs::SecondInteractType' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleConfigs, SecondInteractDuration) == 0x000840, "Member 'UFortTankVehicleConfigs::SecondInteractDuration' has a wrong offset!");

// Class TankRuntime.FortTankAnimFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UFortTankAnimFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTankAnimFunctionLibrary">();
	}
	static class UFortTankAnimFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTankAnimFunctionLibrary>();
	}
};
static_assert(alignof(UFortTankAnimFunctionLibrary) == 0x000008, "Wrong alignment on UFortTankAnimFunctionLibrary");
static_assert(sizeof(UFortTankAnimFunctionLibrary) == 0x000028, "Wrong size on UFortTankAnimFunctionLibrary");

// Class TankRuntime.FortTankVehicle
// 0x0240 (0x1AF0 - 0x18B0)
class AFortTankVehicle final : public AFortTreadVehicle
{
public:
	uint8                                         Pad_18B0[0x78];                                    // 0x18B0(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnTankRepairedDelegate;                            // 0x1928(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	class FName                                   BarrelSocketName;                                  // 0x1938(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_193C[0x4];                                     // 0x193C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCapsuleComponent*                      BarrelCollision;                                   // 0x1940(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMeshComponent*                   UnderVehicleCollision;                             // 0x1948(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FServerSocketTransformOverride> SocketOverrideArray;                               // 0x1950(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, struct FTransform>          SocketTransformOverrideMap;                        // 0x1960(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                 CachedSkeletalMeshComponent;                       // 0x19B0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AFortVehicleAudioController*            CachedVehicleAudioController;                      // 0x19B8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVisibilityBasedAnimTickOption                DefaultServerVisibilityBasedAnimTickOption;        // 0x19C0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          DefaultServerSkeletalMeshTickEnabled;              // 0x19C1(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19C2[0x2];                                     // 0x19C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   YawPivotSocketName;                                // 0x19C4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   PitchPivotSocketName;                              // 0x19C8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19CC[0x4];                                     // 0x19CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMatineeCameraShake*                    DriverCameraShakeInstance;                         // 0x19D0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMatineeCameraShake*                    AcceleratingCameraShakeInstance;                   // 0x19D8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19E0[0x8];                                     // 0x19E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      CachedNiagaraComponentRoadAndExhaust;              // 0x19E8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 RoadAndExhaustNiagaraComponentName;                // 0x19F0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 RoadAndExhaustPeelOutLeftName;                     // 0x1A00(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 RoadAndExhaustPeelOutRightName;                    // 0x1A10(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 RoadAndExhaustVehicleSpeedName;                    // 0x1A20(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 RoadAndExhaustSlideDirectionName;                  // 0x1A30(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RoadAndExhaustMinSpeedForDust;                     // 0x1A40(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A44[0x4];                                     // 0x1A44(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RoadAndExhaustDustColorLerpName;                   // 0x1A48(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RoadAndExhaustDustColorLerpOffRoad;                // 0x1A58(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RoadAndExhaustDustColorLerpOnRoad;                 // 0x1A5C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 RoadAndExhaustDustAlphaMultiplierName;             // 0x1A60(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RoadAndExhaustDustAlphaMultiplierOffRoad;          // 0x1A70(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RoadAndExhaustDustAlphaMultiplierOnRoad;           // 0x1A74(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 RoadAndExhaustDustFrontLeftName;                   // 0x1A78(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 RoadAndExhaustDustFrontRightName;                  // 0x1A88(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 RoadAndExhaustDustMiddleLeftName;                  // 0x1A98(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 RoadAndExhaustDustMiddleRightName;                 // 0x1AA8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 RoadAndExhaustDustRearLeftName;                    // 0x1AB8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 RoadAndExhaustDustRearRightName;                   // 0x1AC8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 RoadAndExhaustIsOnDirtName;                        // 0x1AD8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1AE8[0x8];                                     // 0x1AE8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTankVehicle">();
	}
	static class AFortTankVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortTankVehicle>();
	}
};
static_assert(alignof(AFortTankVehicle) == 0x000010, "Wrong alignment on AFortTankVehicle");
static_assert(sizeof(AFortTankVehicle) == 0x001AF0, "Wrong size on AFortTankVehicle");
static_assert(offsetof(AFortTankVehicle, OnTankRepairedDelegate) == 0x001928, "Member 'AFortTankVehicle::OnTankRepairedDelegate' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, BarrelSocketName) == 0x001938, "Member 'AFortTankVehicle::BarrelSocketName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, BarrelCollision) == 0x001940, "Member 'AFortTankVehicle::BarrelCollision' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, UnderVehicleCollision) == 0x001948, "Member 'AFortTankVehicle::UnderVehicleCollision' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, SocketOverrideArray) == 0x001950, "Member 'AFortTankVehicle::SocketOverrideArray' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, SocketTransformOverrideMap) == 0x001960, "Member 'AFortTankVehicle::SocketTransformOverrideMap' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, CachedSkeletalMeshComponent) == 0x0019B0, "Member 'AFortTankVehicle::CachedSkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, CachedVehicleAudioController) == 0x0019B8, "Member 'AFortTankVehicle::CachedVehicleAudioController' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, DefaultServerVisibilityBasedAnimTickOption) == 0x0019C0, "Member 'AFortTankVehicle::DefaultServerVisibilityBasedAnimTickOption' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, DefaultServerSkeletalMeshTickEnabled) == 0x0019C1, "Member 'AFortTankVehicle::DefaultServerSkeletalMeshTickEnabled' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, YawPivotSocketName) == 0x0019C4, "Member 'AFortTankVehicle::YawPivotSocketName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, PitchPivotSocketName) == 0x0019C8, "Member 'AFortTankVehicle::PitchPivotSocketName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, DriverCameraShakeInstance) == 0x0019D0, "Member 'AFortTankVehicle::DriverCameraShakeInstance' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, AcceleratingCameraShakeInstance) == 0x0019D8, "Member 'AFortTankVehicle::AcceleratingCameraShakeInstance' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, CachedNiagaraComponentRoadAndExhaust) == 0x0019E8, "Member 'AFortTankVehicle::CachedNiagaraComponentRoadAndExhaust' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustNiagaraComponentName) == 0x0019F0, "Member 'AFortTankVehicle::RoadAndExhaustNiagaraComponentName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustPeelOutLeftName) == 0x001A00, "Member 'AFortTankVehicle::RoadAndExhaustPeelOutLeftName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustPeelOutRightName) == 0x001A10, "Member 'AFortTankVehicle::RoadAndExhaustPeelOutRightName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustVehicleSpeedName) == 0x001A20, "Member 'AFortTankVehicle::RoadAndExhaustVehicleSpeedName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustSlideDirectionName) == 0x001A30, "Member 'AFortTankVehicle::RoadAndExhaustSlideDirectionName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustMinSpeedForDust) == 0x001A40, "Member 'AFortTankVehicle::RoadAndExhaustMinSpeedForDust' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustDustColorLerpName) == 0x001A48, "Member 'AFortTankVehicle::RoadAndExhaustDustColorLerpName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustDustColorLerpOffRoad) == 0x001A58, "Member 'AFortTankVehicle::RoadAndExhaustDustColorLerpOffRoad' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustDustColorLerpOnRoad) == 0x001A5C, "Member 'AFortTankVehicle::RoadAndExhaustDustColorLerpOnRoad' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustDustAlphaMultiplierName) == 0x001A60, "Member 'AFortTankVehicle::RoadAndExhaustDustAlphaMultiplierName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustDustAlphaMultiplierOffRoad) == 0x001A70, "Member 'AFortTankVehicle::RoadAndExhaustDustAlphaMultiplierOffRoad' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustDustAlphaMultiplierOnRoad) == 0x001A74, "Member 'AFortTankVehicle::RoadAndExhaustDustAlphaMultiplierOnRoad' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustDustFrontLeftName) == 0x001A78, "Member 'AFortTankVehicle::RoadAndExhaustDustFrontLeftName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustDustFrontRightName) == 0x001A88, "Member 'AFortTankVehicle::RoadAndExhaustDustFrontRightName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustDustMiddleLeftName) == 0x001A98, "Member 'AFortTankVehicle::RoadAndExhaustDustMiddleLeftName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustDustMiddleRightName) == 0x001AA8, "Member 'AFortTankVehicle::RoadAndExhaustDustMiddleRightName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustDustRearLeftName) == 0x001AB8, "Member 'AFortTankVehicle::RoadAndExhaustDustRearLeftName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustDustRearRightName) == 0x001AC8, "Member 'AFortTankVehicle::RoadAndExhaustDustRearRightName' has a wrong offset!");
static_assert(offsetof(AFortTankVehicle, RoadAndExhaustIsOnDirtName) == 0x001AD8, "Member 'AFortTankVehicle::RoadAndExhaustIsOnDirtName' has a wrong offset!");

// Class TankRuntime.FortTankVehicleAnimInstance
// 0x0120 (0x0790 - 0x0670)
class UFortTankVehicleAnimInstance final : public UFortTreadVehicleAnimInstance
{
public:
	class AFortTankVehicle*                       TankVehicle;                                       // 0x0670(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               CurrentAimRotation;                                // 0x0678(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               CurrentTurretAimRotation;                          // 0x0690(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               SmoothedTurretDeltaRotation;                       // 0x06A8(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         InterpolationRate;                                 // 0x06C0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEngineOverheated;                                 // 0x06C4(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasPassenger;                                     // 0x06C5(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsFired;                                          // 0x06C6(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsReady;                                          // 0x06C7(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDriverCoverOnCooldown;                            // 0x06C8(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6C9[0x3];                                      // 0x06C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LeftTreadPower;                                    // 0x06CC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RightTreadPower;                                   // 0x06D0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TurretYawAlpha;                                    // 0x06D4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TurretYawAlphaSmoothingRate;                       // 0x06D8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CannonYaw;                                         // 0x06DC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CannonPitch;                                       // 0x06E0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TurretYaw;                                         // 0x06E4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TurretPitch;                                       // 0x06E8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           MIDTreadPositionColor;                             // 0x06EC(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MIDTreadDamageLeft;                                // 0x06FC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MIDTreadDamageRight;                               // 0x0700(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MIDExhaustShakeSpeed;                              // 0x0704(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MIDExhaustShakeAmp;                                // 0x0708(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MIDEngineBoostGlow;                                // 0x070C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MIDEngineHealthRatio;                              // 0x0710(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_714[0x4];                                      // 0x0714(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EVehicleSeats, struct FTankAnimAimingData> AimingData;                                        // 0x0718(0x0050)(Transient, NativeAccessSpecifierPrivate)
	struct FRotator                               PreviousTurretAimRotation;                         // 0x0768(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_780[0x10];                                     // 0x0780(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void UpdateMIDEngineProperties(const float DeltaSeconds, const float EngineHealthRatio);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTankVehicleAnimInstance">();
	}
	static class UFortTankVehicleAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTankVehicleAnimInstance>();
	}
};
static_assert(alignof(UFortTankVehicleAnimInstance) == 0x000010, "Wrong alignment on UFortTankVehicleAnimInstance");
static_assert(sizeof(UFortTankVehicleAnimInstance) == 0x000790, "Wrong size on UFortTankVehicleAnimInstance");
static_assert(offsetof(UFortTankVehicleAnimInstance, TankVehicle) == 0x000670, "Member 'UFortTankVehicleAnimInstance::TankVehicle' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, CurrentAimRotation) == 0x000678, "Member 'UFortTankVehicleAnimInstance::CurrentAimRotation' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, CurrentTurretAimRotation) == 0x000690, "Member 'UFortTankVehicleAnimInstance::CurrentTurretAimRotation' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, SmoothedTurretDeltaRotation) == 0x0006A8, "Member 'UFortTankVehicleAnimInstance::SmoothedTurretDeltaRotation' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, InterpolationRate) == 0x0006C0, "Member 'UFortTankVehicleAnimInstance::InterpolationRate' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, bEngineOverheated) == 0x0006C4, "Member 'UFortTankVehicleAnimInstance::bEngineOverheated' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, bHasPassenger) == 0x0006C5, "Member 'UFortTankVehicleAnimInstance::bHasPassenger' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, bIsFired) == 0x0006C6, "Member 'UFortTankVehicleAnimInstance::bIsFired' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, bIsReady) == 0x0006C7, "Member 'UFortTankVehicleAnimInstance::bIsReady' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, bDriverCoverOnCooldown) == 0x0006C8, "Member 'UFortTankVehicleAnimInstance::bDriverCoverOnCooldown' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, LeftTreadPower) == 0x0006CC, "Member 'UFortTankVehicleAnimInstance::LeftTreadPower' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, RightTreadPower) == 0x0006D0, "Member 'UFortTankVehicleAnimInstance::RightTreadPower' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, TurretYawAlpha) == 0x0006D4, "Member 'UFortTankVehicleAnimInstance::TurretYawAlpha' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, TurretYawAlphaSmoothingRate) == 0x0006D8, "Member 'UFortTankVehicleAnimInstance::TurretYawAlphaSmoothingRate' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, CannonYaw) == 0x0006DC, "Member 'UFortTankVehicleAnimInstance::CannonYaw' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, CannonPitch) == 0x0006E0, "Member 'UFortTankVehicleAnimInstance::CannonPitch' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, TurretYaw) == 0x0006E4, "Member 'UFortTankVehicleAnimInstance::TurretYaw' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, TurretPitch) == 0x0006E8, "Member 'UFortTankVehicleAnimInstance::TurretPitch' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, MIDTreadPositionColor) == 0x0006EC, "Member 'UFortTankVehicleAnimInstance::MIDTreadPositionColor' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, MIDTreadDamageLeft) == 0x0006FC, "Member 'UFortTankVehicleAnimInstance::MIDTreadDamageLeft' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, MIDTreadDamageRight) == 0x000700, "Member 'UFortTankVehicleAnimInstance::MIDTreadDamageRight' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, MIDExhaustShakeSpeed) == 0x000704, "Member 'UFortTankVehicleAnimInstance::MIDExhaustShakeSpeed' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, MIDExhaustShakeAmp) == 0x000708, "Member 'UFortTankVehicleAnimInstance::MIDExhaustShakeAmp' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, MIDEngineBoostGlow) == 0x00070C, "Member 'UFortTankVehicleAnimInstance::MIDEngineBoostGlow' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, MIDEngineHealthRatio) == 0x000710, "Member 'UFortTankVehicleAnimInstance::MIDEngineHealthRatio' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, AimingData) == 0x000718, "Member 'UFortTankVehicleAnimInstance::AimingData' has a wrong offset!");
static_assert(offsetof(UFortTankVehicleAnimInstance, PreviousTurretAimRotation) == 0x000768, "Member 'UFortTankVehicleAnimInstance::PreviousTurretAimRotation' has a wrong offset!");

// Class TankRuntime.FortTankVehicleAudioController
// 0x0318 (0x05A0 - 0x0288)
class AFortTankVehicleAudioController final : public AFortVehicleAudioController
{
public:
	class AFortTankVehicle*                       TankVehicle;                                       // 0x0288(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameterMapping        SpeedParam;                                        // 0x0290(0x0028)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameterMapping        TurnPowerParam;                                    // 0x02B8(0x0028)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameterMapping        OutOfFuelParam;                                    // 0x02E0(0x0028)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameterMapping        IdleParam;                                         // 0x0308(0x0028)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameterMapping        TurningParam;                                      // 0x0330(0x0028)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameterMapping        ForwardParam;                                      // 0x0358(0x0028)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameterMapping        ReverseParam;                                      // 0x0380(0x0028)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameterMapping        SurfaceParam;                                      // 0x03A8(0x0028)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameterMapping        IsInWaterParam;                                    // 0x03D0(0x0028)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameterMapping        IsInAirParam;                                      // 0x03F8(0x0028)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameterMapping        BoostParam;                                        // 0x0420(0x0028)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameterMapping        CannonHorizontalMovementParam;                     // 0x0448(0x0028)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameterMapping        CannonVerticalMovementParam;                       // 0x0470(0x0028)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameterMapping        TurretHorizontalMovementParam;                     // 0x0498(0x0028)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortAudioFloatParameterMapping        TurretVerticalMovementParam;                       // 0x04C0(0x0028)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FTankAudioUpdateContext                Context;                                           // 0x04E8(0x00B8)(Edit, BlueprintVisible, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void PlayAccelOneShot();
	void PlayDecelOneShot();
	void PlayTurningOneShot();

	class AFortTankVehicle* GetTankVehicleActor() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTankVehicleAudioController">();
	}
	static class AFortTankVehicleAudioController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortTankVehicleAudioController>();
	}
};
static_assert(alignof(AFortTankVehicleAudioController) == 0x000008, "Wrong alignment on AFortTankVehicleAudioController");
static_assert(sizeof(AFortTankVehicleAudioController) == 0x0005A0, "Wrong size on AFortTankVehicleAudioController");
static_assert(offsetof(AFortTankVehicleAudioController, TankVehicle) == 0x000288, "Member 'AFortTankVehicleAudioController::TankVehicle' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, SpeedParam) == 0x000290, "Member 'AFortTankVehicleAudioController::SpeedParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, TurnPowerParam) == 0x0002B8, "Member 'AFortTankVehicleAudioController::TurnPowerParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, OutOfFuelParam) == 0x0002E0, "Member 'AFortTankVehicleAudioController::OutOfFuelParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, IdleParam) == 0x000308, "Member 'AFortTankVehicleAudioController::IdleParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, TurningParam) == 0x000330, "Member 'AFortTankVehicleAudioController::TurningParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, ForwardParam) == 0x000358, "Member 'AFortTankVehicleAudioController::ForwardParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, ReverseParam) == 0x000380, "Member 'AFortTankVehicleAudioController::ReverseParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, SurfaceParam) == 0x0003A8, "Member 'AFortTankVehicleAudioController::SurfaceParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, IsInWaterParam) == 0x0003D0, "Member 'AFortTankVehicleAudioController::IsInWaterParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, IsInAirParam) == 0x0003F8, "Member 'AFortTankVehicleAudioController::IsInAirParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, BoostParam) == 0x000420, "Member 'AFortTankVehicleAudioController::BoostParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, CannonHorizontalMovementParam) == 0x000448, "Member 'AFortTankVehicleAudioController::CannonHorizontalMovementParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, CannonVerticalMovementParam) == 0x000470, "Member 'AFortTankVehicleAudioController::CannonVerticalMovementParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, TurretHorizontalMovementParam) == 0x000498, "Member 'AFortTankVehicleAudioController::TurretHorizontalMovementParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, TurretVerticalMovementParam) == 0x0004C0, "Member 'AFortTankVehicleAudioController::TurretVerticalMovementParam' has a wrong offset!");
static_assert(offsetof(AFortTankVehicleAudioController, Context) == 0x0004E8, "Member 'AFortTankVehicleAudioController::Context' has a wrong offset!");

}

