#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BallerV2Reticle

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BallerV2Reticle.BallerV2Reticle_C
// 0x0160 (0x0418 - 0x02B8)
class UBallerV2Reticle_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       SwingingNew_NoLock;                                // 0x02C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Intro;                                             // 0x02C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       CantUseNew;                                        // 0x02D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       SwingingNew;                                       // 0x02D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       LockedOnNew;                                       // 0x02E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Cooldown_Intro;                                    // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       LockedOn;                                          // 0x02F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       CantUse;                                           // 0x02F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Swinging;                                          // 0x0300(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UOverlay*                               Bracket;                                           // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 CooldownRing;                                      // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Reticle_Spinners_AttachedFast;                     // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Reticle_Surrounding;                               // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Reticle_Surrounding_BaseDarken;                    // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Reticle_Surrounding_Disabled;                      // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Reticle_Surrounding_Shadow;                        // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class URE_WestSausage_Targeting_C*            TargetWidget;                                      // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FVector                                TargetPosition;                                    // 0x0348(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Locked_On;                                         // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Attached;                                          // 0x0361(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_362[0x6];                                      // 0x0362(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Player;                                            // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AbleToUse;                                         // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CooldownAnimPlayed;                                // 0x0371(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasPlayedCantUseAnim;                              // 0x0372(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasPlayedAttachedAnim;                             // 0x0373(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasPlayedLockedOnAnim;                             // 0x0374(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_375[0x3];                                      // 0x0375(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CoolDownTime;                                      // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OnCooldown;                                        // 0x037C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37D[0x3];                                      // 0x037D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffectHandle            Cooldown_GE;                                       // 0x0380(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         FullCooldownTime;                                  // 0x0388(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTimerHandle                           CooldownTimerHandle;                               // 0x03B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         TotalCooldownDuration;                             // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentCooldownDuration;                           // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CooldownInterval;                                  // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C4[0x4];                                      // 0x03C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CooldownRingDynamicMaterial;                       // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCooldownPlaying;                                 // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D1[0x3];                                      // 0x03D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FullCooldown;                                      // 0x03D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CooldownStartTime;                                 // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DC[0x4];                                      // 0x03DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortOctopusVehicle*                    Baller;                                            // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortWeaponRangedOctopusTowhook*        TowhookWeapon;                                     // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Cooldown_Percent_Parameter_Name;                   // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           OutOfFuelReticleColor;                             // 0x03F4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           OutOfFuelTargetWidgetColor;                        // 0x0404(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OutOfFuel;                                         // 0x0414(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BindTo(class UObject* AssociatedObject);
	void BindToWeapon(class AFortWeaponRanged* Weapon);
	void Construct();
	void CooldownTick();
	void ExecuteUbergraph_BallerV2Reticle(int32 EntryPoint);
	void OnOutOfFuelDelegate_Event();
	void SetLockedOnState(bool LockedOn_0, bool Attached_0);
	void TargetUpdated(const struct FVector& TargetLocation);
	void TowhookAttached();
	void TowhookDetached();
	void UnbindFrom(class UObject* AssociatedObject);
	void UnbindFromWeapon();
	void Update(const struct FVector& Position, bool AbleToUse_0);
	void Update_Lock_on_Visibility();
	void WeaponEquipped(class AFortWeaponRanged* EquippedMountedWeapon);
	void WorldToScreen(const struct FVector& WorldLocation, struct FVector2D* ScreenLocation);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BallerV2Reticle_C">();
	}
	static class UBallerV2Reticle_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBallerV2Reticle_C>();
	}
};
static_assert(alignof(UBallerV2Reticle_C) == 0x000008, "Wrong alignment on UBallerV2Reticle_C");
static_assert(sizeof(UBallerV2Reticle_C) == 0x000418, "Wrong size on UBallerV2Reticle_C");
static_assert(offsetof(UBallerV2Reticle_C, UberGraphFrame) == 0x0002B8, "Member 'UBallerV2Reticle_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, SwingingNew_NoLock) == 0x0002C0, "Member 'UBallerV2Reticle_C::SwingingNew_NoLock' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, Intro) == 0x0002C8, "Member 'UBallerV2Reticle_C::Intro' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, CantUseNew) == 0x0002D0, "Member 'UBallerV2Reticle_C::CantUseNew' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, SwingingNew) == 0x0002D8, "Member 'UBallerV2Reticle_C::SwingingNew' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, LockedOnNew) == 0x0002E0, "Member 'UBallerV2Reticle_C::LockedOnNew' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, Cooldown_Intro) == 0x0002E8, "Member 'UBallerV2Reticle_C::Cooldown_Intro' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, LockedOn) == 0x0002F0, "Member 'UBallerV2Reticle_C::LockedOn' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, CantUse) == 0x0002F8, "Member 'UBallerV2Reticle_C::CantUse' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, Swinging) == 0x000300, "Member 'UBallerV2Reticle_C::Swinging' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, Bracket) == 0x000308, "Member 'UBallerV2Reticle_C::Bracket' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, CooldownRing) == 0x000310, "Member 'UBallerV2Reticle_C::CooldownRing' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, Reticle_Spinners_AttachedFast) == 0x000318, "Member 'UBallerV2Reticle_C::Reticle_Spinners_AttachedFast' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, Reticle_Surrounding) == 0x000320, "Member 'UBallerV2Reticle_C::Reticle_Surrounding' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, Reticle_Surrounding_BaseDarken) == 0x000328, "Member 'UBallerV2Reticle_C::Reticle_Surrounding_BaseDarken' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, Reticle_Surrounding_Disabled) == 0x000330, "Member 'UBallerV2Reticle_C::Reticle_Surrounding_Disabled' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, Reticle_Surrounding_Shadow) == 0x000338, "Member 'UBallerV2Reticle_C::Reticle_Surrounding_Shadow' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, TargetWidget) == 0x000340, "Member 'UBallerV2Reticle_C::TargetWidget' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, TargetPosition) == 0x000348, "Member 'UBallerV2Reticle_C::TargetPosition' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, Locked_On) == 0x000360, "Member 'UBallerV2Reticle_C::Locked_On' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, Attached) == 0x000361, "Member 'UBallerV2Reticle_C::Attached' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, Player) == 0x000368, "Member 'UBallerV2Reticle_C::Player' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, AbleToUse) == 0x000370, "Member 'UBallerV2Reticle_C::AbleToUse' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, CooldownAnimPlayed) == 0x000371, "Member 'UBallerV2Reticle_C::CooldownAnimPlayed' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, HasPlayedCantUseAnim) == 0x000372, "Member 'UBallerV2Reticle_C::HasPlayedCantUseAnim' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, HasPlayedAttachedAnim) == 0x000373, "Member 'UBallerV2Reticle_C::HasPlayedAttachedAnim' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, HasPlayedLockedOnAnim) == 0x000374, "Member 'UBallerV2Reticle_C::HasPlayedLockedOnAnim' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, CoolDownTime) == 0x000378, "Member 'UBallerV2Reticle_C::CoolDownTime' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, OnCooldown) == 0x00037C, "Member 'UBallerV2Reticle_C::OnCooldown' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, Cooldown_GE) == 0x000380, "Member 'UBallerV2Reticle_C::Cooldown_GE' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, FullCooldownTime) == 0x000388, "Member 'UBallerV2Reticle_C::FullCooldownTime' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, CooldownTimerHandle) == 0x0003B0, "Member 'UBallerV2Reticle_C::CooldownTimerHandle' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, TotalCooldownDuration) == 0x0003B8, "Member 'UBallerV2Reticle_C::TotalCooldownDuration' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, CurrentCooldownDuration) == 0x0003BC, "Member 'UBallerV2Reticle_C::CurrentCooldownDuration' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, CooldownInterval) == 0x0003C0, "Member 'UBallerV2Reticle_C::CooldownInterval' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, CooldownRingDynamicMaterial) == 0x0003C8, "Member 'UBallerV2Reticle_C::CooldownRingDynamicMaterial' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, IsCooldownPlaying) == 0x0003D0, "Member 'UBallerV2Reticle_C::IsCooldownPlaying' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, FullCooldown) == 0x0003D4, "Member 'UBallerV2Reticle_C::FullCooldown' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, CooldownStartTime) == 0x0003D8, "Member 'UBallerV2Reticle_C::CooldownStartTime' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, Baller) == 0x0003E0, "Member 'UBallerV2Reticle_C::Baller' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, TowhookWeapon) == 0x0003E8, "Member 'UBallerV2Reticle_C::TowhookWeapon' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, Cooldown_Percent_Parameter_Name) == 0x0003F0, "Member 'UBallerV2Reticle_C::Cooldown_Percent_Parameter_Name' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, OutOfFuelReticleColor) == 0x0003F4, "Member 'UBallerV2Reticle_C::OutOfFuelReticleColor' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, OutOfFuelTargetWidgetColor) == 0x000404, "Member 'UBallerV2Reticle_C::OutOfFuelTargetWidgetColor' has a wrong offset!");
static_assert(offsetof(UBallerV2Reticle_C, OutOfFuel) == 0x000414, "Member 'UBallerV2Reticle_C::OutOfFuel' has a wrong offset!");

}

