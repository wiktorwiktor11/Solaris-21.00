#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SuperstormRuntime

#include "Basic.hpp"

#include "SuperstormRuntime_structs.hpp"
#include "TargetingSystem_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_0_structs.hpp"
#include "ModularGameplay_classes.hpp"
#include "FieldSystemEngine_classes.hpp"


namespace SDK
{

// Class SuperstormRuntime.TempestLightningComponent
// 0x0378 (0x0418 - 0x00A0)
class UTempestLightningComponent final : public UGameFrameworkComponent
{
public:
	TSubclassOf<class AFortGameplayEffectDeliveryActor> LightningBoltClass;                                // 0x00A0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FTempestLightningBoltEffectContainer> LightningBoltTargetEffectContainers;               // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class UTargetingPreset*                       LightningBoltTargetingPreset;                      // 0x00B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UEnvQuery*                              FindTargetablePawnsQuery;                          // 0x00C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UEnvQuery*                              FindTargetableLocationQuery;                       // 0x00C8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   EnvironmentQueryParamName_LightningRadius;         // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   EnvironmentQueryParamName_MinLightningTargetDistance; // 0x00D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         LightningCloudHeight;                              // 0x00D8(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         LightningRadius;                                   // 0x0100(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MinLightningTargetDistance;                        // 0x0128(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         LightningFrequencyMin;                             // 0x0150(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         LightningFrequencyMax;                             // 0x0178(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         LightningBoltsMin;                                 // 0x01A0(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         LightningBoltsMax;                                 // 0x01C8(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         LightningBoltIntervalMin;                          // 0x01F0(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         LightningBoltIntervalMax;                          // 0x0218(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         LightningBoltSeparationDistance;                   // 0x0240(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         LightningStruckPawnReselectionInterval;            // 0x0268(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         LightningBoltTelegraphDuration;                    // 0x0290(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         LightningBoltImpactIgnitionRadius;                 // 0x02B8(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         LightningBoltGrassIgnitionRadius;                  // 0x02E0(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         LightningBoltGrassFirePropagationFuel;             // 0x0308(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FGameplayTag                           LightningAreaTargetTelegraphCue;                   // 0x0330(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTag                           LightningBoltTargetTelegraphCue;                   // 0x0334(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FTempestLightningBoltData>      LightningBoltData;                                 // 0x0338(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_348[0xD0];                                     // 0x0348(0x00D0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetCloudHeight() const;
	float GetLightningRadius() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TempestLightningComponent">();
	}
	static class UTempestLightningComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTempestLightningComponent>();
	}
};
static_assert(alignof(UTempestLightningComponent) == 0x000008, "Wrong alignment on UTempestLightningComponent");
static_assert(sizeof(UTempestLightningComponent) == 0x000418, "Wrong size on UTempestLightningComponent");
static_assert(offsetof(UTempestLightningComponent, LightningBoltClass) == 0x0000A0, "Member 'UTempestLightningComponent::LightningBoltClass' has a wrong offset!");
static_assert(offsetof(UTempestLightningComponent, LightningBoltTargetEffectContainers) == 0x0000A8, "Member 'UTempestLightningComponent::LightningBoltTargetEffectContainers' has a wrong offset!");
static_assert(offsetof(UTempestLightningComponent, LightningBoltTargetingPreset) == 0x0000B8, "Member 'UTempestLightningComponent::LightningBoltTargetingPreset' has a wrong offset!");
static_assert(offsetof(UTempestLightningComponent, FindTargetablePawnsQuery) == 0x0000C0, "Member 'UTempestLightningComponent::FindTargetablePawnsQuery' has a wrong offset!");
static_assert(offsetof(UTempestLightningComponent, FindTargetableLocationQuery) == 0x0000C8, "Member 'UTempestLightningComponent::FindTargetableLocationQuery' has a wrong offset!");
static_assert(offsetof(UTempestLightningComponent, EnvironmentQueryParamName_LightningRadius) == 0x0000D0, "Member 'UTempestLightningComponent::EnvironmentQueryParamName_LightningRadius' has a wrong offset!");
static_assert(offsetof(UTempestLightningComponent, EnvironmentQueryParamName_MinLightningTargetDistance) == 0x0000D4, "Member 'UTempestLightningComponent::EnvironmentQueryParamName_MinLightningTargetDistance' has a wrong offset!");
static_assert(offsetof(UTempestLightningComponent, LightningCloudHeight) == 0x0000D8, "Member 'UTempestLightningComponent::LightningCloudHeight' has a wrong offset!");
static_assert(offsetof(UTempestLightningComponent, LightningRadius) == 0x000100, "Member 'UTempestLightningComponent::LightningRadius' has a wrong offset!");
static_assert(offsetof(UTempestLightningComponent, MinLightningTargetDistance) == 0x000128, "Member 'UTempestLightningComponent::MinLightningTargetDistance' has a wrong offset!");
static_assert(offsetof(UTempestLightningComponent, LightningFrequencyMin) == 0x000150, "Member 'UTempestLightningComponent::LightningFrequencyMin' has a wrong offset!");
static_assert(offsetof(UTempestLightningComponent, LightningFrequencyMax) == 0x000178, "Member 'UTempestLightningComponent::LightningFrequencyMax' has a wrong offset!");
static_assert(offsetof(UTempestLightningComponent, LightningBoltsMin) == 0x0001A0, "Member 'UTempestLightningComponent::LightningBoltsMin' has a wrong offset!");
static_assert(offsetof(UTempestLightningComponent, LightningBoltsMax) == 0x0001C8, "Member 'UTempestLightningComponent::LightningBoltsMax' has a wrong offset!");
static_assert(offsetof(UTempestLightningComponent, LightningBoltIntervalMin) == 0x0001F0, "Member 'UTempestLightningComponent::LightningBoltIntervalMin' has a wrong offset!");
static_assert(offsetof(UTempestLightningComponent, LightningBoltIntervalMax) == 0x000218, "Member 'UTempestLightningComponent::LightningBoltIntervalMax' has a wrong offset!");
static_assert(offsetof(UTempestLightningComponent, LightningBoltSeparationDistance) == 0x000240, "Member 'UTempestLightningComponent::LightningBoltSeparationDistance' has a wrong offset!");
static_assert(offsetof(UTempestLightningComponent, LightningStruckPawnReselectionInterval) == 0x000268, "Member 'UTempestLightningComponent::LightningStruckPawnReselectionInterval' has a wrong offset!");
static_assert(offsetof(UTempestLightningComponent, LightningBoltTelegraphDuration) == 0x000290, "Member 'UTempestLightningComponent::LightningBoltTelegraphDuration' has a wrong offset!");
static_assert(offsetof(UTempestLightningComponent, LightningBoltImpactIgnitionRadius) == 0x0002B8, "Member 'UTempestLightningComponent::LightningBoltImpactIgnitionRadius' has a wrong offset!");
static_assert(offsetof(UTempestLightningComponent, LightningBoltGrassIgnitionRadius) == 0x0002E0, "Member 'UTempestLightningComponent::LightningBoltGrassIgnitionRadius' has a wrong offset!");
static_assert(offsetof(UTempestLightningComponent, LightningBoltGrassFirePropagationFuel) == 0x000308, "Member 'UTempestLightningComponent::LightningBoltGrassFirePropagationFuel' has a wrong offset!");
static_assert(offsetof(UTempestLightningComponent, LightningAreaTargetTelegraphCue) == 0x000330, "Member 'UTempestLightningComponent::LightningAreaTargetTelegraphCue' has a wrong offset!");
static_assert(offsetof(UTempestLightningComponent, LightningBoltTargetTelegraphCue) == 0x000334, "Member 'UTempestLightningComponent::LightningBoltTargetTelegraphCue' has a wrong offset!");
static_assert(offsetof(UTempestLightningComponent, LightningBoltData) == 0x000338, "Member 'UTempestLightningComponent::LightningBoltData' has a wrong offset!");

// Class SuperstormRuntime.TempestTornadoForcesComponent
// 0x0468 (0x0508 - 0x00A0)
class UTempestTornadoForcesComponent final : public UGameFrameworkComponent
{
public:
	struct FDataTableRowHandle                    ConfigHandle;                                      // 0x00A0(0x0010)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FGameplayTag>                   PhysicsPresetTagsAngularDampingToOverride;         // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         AngularDampingOverride;                            // 0x00C0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            PawnInGE;                                          // 0x00E8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<ETornadoObjectType, struct FScalableFloat> ObjectTypeToMaxCapCount;                           // 0x00F0(0x0050)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  TagsToIgnore;                                      // 0x0140(0x0020)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            RecentlyRemovedGE;                                 // 0x0160(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTargetingPreset*                       TargetingPreset;                                   // 0x0168(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           DamageSetByCallerTag;                              // 0x0170(0x0004)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            PeriodicDamageGE;                                  // 0x0178(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            BurstDamageGE;                                     // 0x0180(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           TornadoActiveCue;                                  // 0x0188(0x0004)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           PlayerNearCue;                                     // 0x018C(0x0004)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           PawnInCue;                                         // 0x0190(0x0004)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_194[0x4];                                      // 0x0194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         PlayerNearRange;                                   // 0x0198(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  BlockAbilitiesWithTag;                             // 0x01C0(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FTornadoClientSimulationArray          ActorsToClientSimulate;                            // 0x01E0(0x0118)(Net, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2F8[0x110];                                    // 0x02F8(0x0110)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTargetingRequestHandle                AsyncTargetingHandle;                              // 0x0408(0x0004)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40C[0x4];                                      // 0x040C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class AFortPlayerPawn*>                  PreviouslyNearPlayers;                             // 0x0410(0x0050)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_460[0xA8];                                     // 0x0460(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsActorInTornado(class AActor* Actor) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TempestTornadoForcesComponent">();
	}
	static class UTempestTornadoForcesComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTempestTornadoForcesComponent>();
	}
};
static_assert(alignof(UTempestTornadoForcesComponent) == 0x000008, "Wrong alignment on UTempestTornadoForcesComponent");
static_assert(sizeof(UTempestTornadoForcesComponent) == 0x000508, "Wrong size on UTempestTornadoForcesComponent");
static_assert(offsetof(UTempestTornadoForcesComponent, ConfigHandle) == 0x0000A0, "Member 'UTempestTornadoForcesComponent::ConfigHandle' has a wrong offset!");
static_assert(offsetof(UTempestTornadoForcesComponent, PhysicsPresetTagsAngularDampingToOverride) == 0x0000B0, "Member 'UTempestTornadoForcesComponent::PhysicsPresetTagsAngularDampingToOverride' has a wrong offset!");
static_assert(offsetof(UTempestTornadoForcesComponent, AngularDampingOverride) == 0x0000C0, "Member 'UTempestTornadoForcesComponent::AngularDampingOverride' has a wrong offset!");
static_assert(offsetof(UTempestTornadoForcesComponent, PawnInGE) == 0x0000E8, "Member 'UTempestTornadoForcesComponent::PawnInGE' has a wrong offset!");
static_assert(offsetof(UTempestTornadoForcesComponent, ObjectTypeToMaxCapCount) == 0x0000F0, "Member 'UTempestTornadoForcesComponent::ObjectTypeToMaxCapCount' has a wrong offset!");
static_assert(offsetof(UTempestTornadoForcesComponent, TagsToIgnore) == 0x000140, "Member 'UTempestTornadoForcesComponent::TagsToIgnore' has a wrong offset!");
static_assert(offsetof(UTempestTornadoForcesComponent, RecentlyRemovedGE) == 0x000160, "Member 'UTempestTornadoForcesComponent::RecentlyRemovedGE' has a wrong offset!");
static_assert(offsetof(UTempestTornadoForcesComponent, TargetingPreset) == 0x000168, "Member 'UTempestTornadoForcesComponent::TargetingPreset' has a wrong offset!");
static_assert(offsetof(UTempestTornadoForcesComponent, DamageSetByCallerTag) == 0x000170, "Member 'UTempestTornadoForcesComponent::DamageSetByCallerTag' has a wrong offset!");
static_assert(offsetof(UTempestTornadoForcesComponent, PeriodicDamageGE) == 0x000178, "Member 'UTempestTornadoForcesComponent::PeriodicDamageGE' has a wrong offset!");
static_assert(offsetof(UTempestTornadoForcesComponent, BurstDamageGE) == 0x000180, "Member 'UTempestTornadoForcesComponent::BurstDamageGE' has a wrong offset!");
static_assert(offsetof(UTempestTornadoForcesComponent, TornadoActiveCue) == 0x000188, "Member 'UTempestTornadoForcesComponent::TornadoActiveCue' has a wrong offset!");
static_assert(offsetof(UTempestTornadoForcesComponent, PlayerNearCue) == 0x00018C, "Member 'UTempestTornadoForcesComponent::PlayerNearCue' has a wrong offset!");
static_assert(offsetof(UTempestTornadoForcesComponent, PawnInCue) == 0x000190, "Member 'UTempestTornadoForcesComponent::PawnInCue' has a wrong offset!");
static_assert(offsetof(UTempestTornadoForcesComponent, PlayerNearRange) == 0x000198, "Member 'UTempestTornadoForcesComponent::PlayerNearRange' has a wrong offset!");
static_assert(offsetof(UTempestTornadoForcesComponent, BlockAbilitiesWithTag) == 0x0001C0, "Member 'UTempestTornadoForcesComponent::BlockAbilitiesWithTag' has a wrong offset!");
static_assert(offsetof(UTempestTornadoForcesComponent, ActorsToClientSimulate) == 0x0001E0, "Member 'UTempestTornadoForcesComponent::ActorsToClientSimulate' has a wrong offset!");
static_assert(offsetof(UTempestTornadoForcesComponent, AsyncTargetingHandle) == 0x000408, "Member 'UTempestTornadoForcesComponent::AsyncTargetingHandle' has a wrong offset!");
static_assert(offsetof(UTempestTornadoForcesComponent, PreviouslyNearPlayers) == 0x000410, "Member 'UTempestTornadoForcesComponent::PreviouslyNearPlayers' has a wrong offset!");

// Class SuperstormRuntime.TornadoRadialForce
// 0x0038 (0x02B0 - 0x0278)
class ATornadoRadialForce final : public AFieldSystemActor
{
public:
	float                                         Radius;                                            // 0x0278(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x027C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0280(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopTime;                                          // 0x0284(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IncomingDuration;                                  // 0x0288(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutgoingDuration;                                  // 0x028C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_290[0x8];                                      // 0x0290(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class URadialVector*                          RadialVector;                                      // 0x0298(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URadialFalloff*                         RadialFalloff;                                     // 0x02A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UOperatorField*                         OperatorField;                                     // 0x02A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TornadoRadialForce">();
	}
	static class ATornadoRadialForce* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATornadoRadialForce>();
	}
};
static_assert(alignof(ATornadoRadialForce) == 0x000008, "Wrong alignment on ATornadoRadialForce");
static_assert(sizeof(ATornadoRadialForce) == 0x0002B0, "Wrong size on ATornadoRadialForce");
static_assert(offsetof(ATornadoRadialForce, Radius) == 0x000278, "Member 'ATornadoRadialForce::Radius' has a wrong offset!");
static_assert(offsetof(ATornadoRadialForce, Strength) == 0x00027C, "Member 'ATornadoRadialForce::Strength' has a wrong offset!");
static_assert(offsetof(ATornadoRadialForce, StartTime) == 0x000280, "Member 'ATornadoRadialForce::StartTime' has a wrong offset!");
static_assert(offsetof(ATornadoRadialForce, StopTime) == 0x000284, "Member 'ATornadoRadialForce::StopTime' has a wrong offset!");
static_assert(offsetof(ATornadoRadialForce, IncomingDuration) == 0x000288, "Member 'ATornadoRadialForce::IncomingDuration' has a wrong offset!");
static_assert(offsetof(ATornadoRadialForce, OutgoingDuration) == 0x00028C, "Member 'ATornadoRadialForce::OutgoingDuration' has a wrong offset!");
static_assert(offsetof(ATornadoRadialForce, RadialVector) == 0x000298, "Member 'ATornadoRadialForce::RadialVector' has a wrong offset!");
static_assert(offsetof(ATornadoRadialForce, RadialFalloff) == 0x0002A0, "Member 'ATornadoRadialForce::RadialFalloff' has a wrong offset!");
static_assert(offsetof(ATornadoRadialForce, OperatorField) == 0x0002A8, "Member 'ATornadoRadialForce::OperatorField' has a wrong offset!");

}

