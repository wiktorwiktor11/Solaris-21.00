#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VerseEngine_0

#include "Basic.hpp"

#include "Verse_0_structs.hpp"
#include "Verse_structs.hpp"


namespace SDK
{

// SolarisGeneratedEnum VerseEngine.diagnostics_log_level
// NumValues: 0x0006
enum class Ediagnostics_log_level : uint8
{
	Debug                                    = 0,
	Verbose                                  = 1,
	Normal                                   = 2,
	Warning                                  = 3,
	Error                                    = 4,
	Fatal                                    = 5,
};

// SolarisGeneratedEnum VerseEngine.draw_duration_policy
// NumValues: 0x0003
enum class Edraw_duration_policy : uint8
{
	SingleFrame                              = 0,
	FiniteDuration                           = 1,
	Persistent                               = 2,
};

// SolarisGeneratedStruct VerseEngine.arrow_draw_params
// 0x0048 (0x0048 - 0x0000)
struct Farrow_draw_params final
{
public:
	double                                        __verse_0xF97B0595_ArrowSize;                      // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct Fcolor_v                               __verse_0x65678AC7_Color;                          // 0x0008(0x0020)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	double                                        __verse_0x6C915C14_Thickness;                      // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Edraw_duration_policy                         __verse_0x0DBBEBBF_DrawDurationPolicy;             // 0x0030(0x0001)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FOptionProperty_                              __verse_0xFC2FBF02_Duration;                       // 0x0038(0x0009)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Farrow_draw_params) == 0x000008, "Wrong alignment on Farrow_draw_params");
static_assert(sizeof(Farrow_draw_params) == 0x000048, "Wrong size on Farrow_draw_params");
static_assert(offsetof(Farrow_draw_params, __verse_0xF97B0595_ArrowSize) == 0x000000, "Member 'Farrow_draw_params::__verse_0xF97B0595_ArrowSize' has a wrong offset!");
static_assert(offsetof(Farrow_draw_params, __verse_0x65678AC7_Color) == 0x000008, "Member 'Farrow_draw_params::__verse_0x65678AC7_Color' has a wrong offset!");
static_assert(offsetof(Farrow_draw_params, __verse_0x6C915C14_Thickness) == 0x000028, "Member 'Farrow_draw_params::__verse_0x6C915C14_Thickness' has a wrong offset!");
static_assert(offsetof(Farrow_draw_params, __verse_0x0DBBEBBF_DrawDurationPolicy) == 0x000030, "Member 'Farrow_draw_params::__verse_0x0DBBEBBF_DrawDurationPolicy' has a wrong offset!");
static_assert(offsetof(Farrow_draw_params, __verse_0xFC2FBF02_Duration) == 0x000038, "Member 'Farrow_draw_params::__verse_0xFC2FBF02_Duration' has a wrong offset!");

// SolarisGeneratedStruct VerseEngine.box_draw_params
// 0x0058 (0x0058 - 0x0000)
struct Fbox_draw_params final
{
public:
	struct Fvector3                               __verse_0xA327BDA5_Extent;                         // 0x0000(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	struct Fcolor_v                               __verse_0x65678AC7_Color;                          // 0x0018(0x0020)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	double                                        __verse_0x6C915C14_Thickness;                      // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Edraw_duration_policy                         __verse_0x0DBBEBBF_DrawDurationPolicy;             // 0x0040(0x0001)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FOptionProperty_                              __verse_0xFC2FBF02_Duration;                       // 0x0048(0x0009)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Fbox_draw_params) == 0x000008, "Wrong alignment on Fbox_draw_params");
static_assert(sizeof(Fbox_draw_params) == 0x000058, "Wrong size on Fbox_draw_params");
static_assert(offsetof(Fbox_draw_params, __verse_0xA327BDA5_Extent) == 0x000000, "Member 'Fbox_draw_params::__verse_0xA327BDA5_Extent' has a wrong offset!");
static_assert(offsetof(Fbox_draw_params, __verse_0x65678AC7_Color) == 0x000018, "Member 'Fbox_draw_params::__verse_0x65678AC7_Color' has a wrong offset!");
static_assert(offsetof(Fbox_draw_params, __verse_0x6C915C14_Thickness) == 0x000038, "Member 'Fbox_draw_params::__verse_0x6C915C14_Thickness' has a wrong offset!");
static_assert(offsetof(Fbox_draw_params, __verse_0x0DBBEBBF_DrawDurationPolicy) == 0x000040, "Member 'Fbox_draw_params::__verse_0x0DBBEBBF_DrawDurationPolicy' has a wrong offset!");
static_assert(offsetof(Fbox_draw_params, __verse_0xFC2FBF02_Duration) == 0x000048, "Member 'Fbox_draw_params::__verse_0xFC2FBF02_Duration' has a wrong offset!");

// SolarisGeneratedStruct VerseEngine.capsule_draw_params
// 0x0050 (0x0050 - 0x0000)
struct Fcapsule_draw_params final
{
public:
	double                                        __verse_0x32A63D0C_Height;                         // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __verse_0xE34F9FAC_Radius;                         // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct Fcolor_v                               __verse_0x65678AC7_Color;                          // 0x0010(0x0020)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	double                                        __verse_0x6C915C14_Thickness;                      // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Edraw_duration_policy                         __verse_0x0DBBEBBF_DrawDurationPolicy;             // 0x0038(0x0001)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FOptionProperty_                              __verse_0xFC2FBF02_Duration;                       // 0x0040(0x0009)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Fcapsule_draw_params) == 0x000008, "Wrong alignment on Fcapsule_draw_params");
static_assert(sizeof(Fcapsule_draw_params) == 0x000050, "Wrong size on Fcapsule_draw_params");
static_assert(offsetof(Fcapsule_draw_params, __verse_0x32A63D0C_Height) == 0x000000, "Member 'Fcapsule_draw_params::__verse_0x32A63D0C_Height' has a wrong offset!");
static_assert(offsetof(Fcapsule_draw_params, __verse_0xE34F9FAC_Radius) == 0x000008, "Member 'Fcapsule_draw_params::__verse_0xE34F9FAC_Radius' has a wrong offset!");
static_assert(offsetof(Fcapsule_draw_params, __verse_0x65678AC7_Color) == 0x000010, "Member 'Fcapsule_draw_params::__verse_0x65678AC7_Color' has a wrong offset!");
static_assert(offsetof(Fcapsule_draw_params, __verse_0x6C915C14_Thickness) == 0x000030, "Member 'Fcapsule_draw_params::__verse_0x6C915C14_Thickness' has a wrong offset!");
static_assert(offsetof(Fcapsule_draw_params, __verse_0x0DBBEBBF_DrawDurationPolicy) == 0x000038, "Member 'Fcapsule_draw_params::__verse_0x0DBBEBBF_DrawDurationPolicy' has a wrong offset!");
static_assert(offsetof(Fcapsule_draw_params, __verse_0xFC2FBF02_Duration) == 0x000040, "Member 'Fcapsule_draw_params::__verse_0xFC2FBF02_Duration' has a wrong offset!");

// SolarisGeneratedStruct VerseEngine.cone_draw_params
// 0x0060 (0x0060 - 0x0000)
struct Fcone_draw_params final
{
public:
	double                                        __verse_0x5B0C19A9_Length;                         // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __verse_0x48019537_NumSides;                       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __verse_0x75E7ED0A_AngleWidth;                     // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __verse_0xA92ED403_AngleHeight;                    // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct Fcolor_v                               __verse_0x65678AC7_Color;                          // 0x0020(0x0020)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	double                                        __verse_0x6C915C14_Thickness;                      // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Edraw_duration_policy                         __verse_0x0DBBEBBF_DrawDurationPolicy;             // 0x0048(0x0001)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FOptionProperty_                              __verse_0xFC2FBF02_Duration;                       // 0x0050(0x0009)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Fcone_draw_params) == 0x000008, "Wrong alignment on Fcone_draw_params");
static_assert(sizeof(Fcone_draw_params) == 0x000060, "Wrong size on Fcone_draw_params");
static_assert(offsetof(Fcone_draw_params, __verse_0x5B0C19A9_Length) == 0x000000, "Member 'Fcone_draw_params::__verse_0x5B0C19A9_Length' has a wrong offset!");
static_assert(offsetof(Fcone_draw_params, __verse_0x48019537_NumSides) == 0x000008, "Member 'Fcone_draw_params::__verse_0x48019537_NumSides' has a wrong offset!");
static_assert(offsetof(Fcone_draw_params, __verse_0x75E7ED0A_AngleWidth) == 0x000010, "Member 'Fcone_draw_params::__verse_0x75E7ED0A_AngleWidth' has a wrong offset!");
static_assert(offsetof(Fcone_draw_params, __verse_0xA92ED403_AngleHeight) == 0x000018, "Member 'Fcone_draw_params::__verse_0xA92ED403_AngleHeight' has a wrong offset!");
static_assert(offsetof(Fcone_draw_params, __verse_0x65678AC7_Color) == 0x000020, "Member 'Fcone_draw_params::__verse_0x65678AC7_Color' has a wrong offset!");
static_assert(offsetof(Fcone_draw_params, __verse_0x6C915C14_Thickness) == 0x000040, "Member 'Fcone_draw_params::__verse_0x6C915C14_Thickness' has a wrong offset!");
static_assert(offsetof(Fcone_draw_params, __verse_0x0DBBEBBF_DrawDurationPolicy) == 0x000048, "Member 'Fcone_draw_params::__verse_0x0DBBEBBF_DrawDurationPolicy' has a wrong offset!");
static_assert(offsetof(Fcone_draw_params, __verse_0xFC2FBF02_Duration) == 0x000050, "Member 'Fcone_draw_params::__verse_0xFC2FBF02_Duration' has a wrong offset!");

// SolarisGeneratedStruct VerseEngine.cylinder_draw_params
// 0x0060 (0x0060 - 0x0000)
struct Fcylinder_draw_params final
{
public:
	double                                        __verse_0x652D1E0A_NumSegments;                    // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __verse_0xE34F9FAC_Radius;                         // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct Fcolor_v                               __verse_0x65678AC7_Color;                          // 0x0010(0x0020)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	double                                        __verse_0x6C915C14_Thickness;                      // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Edraw_duration_policy                         __verse_0x0DBBEBBF_DrawDurationPolicy;             // 0x0038(0x0001)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FOptionProperty_                              __verse_0xFC2FBF02_Duration;                       // 0x0040(0x0009)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x17];                                      // 0x0049(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Fcylinder_draw_params) == 0x000008, "Wrong alignment on Fcylinder_draw_params");
static_assert(sizeof(Fcylinder_draw_params) == 0x000060, "Wrong size on Fcylinder_draw_params");
static_assert(offsetof(Fcylinder_draw_params, __verse_0x652D1E0A_NumSegments) == 0x000000, "Member 'Fcylinder_draw_params::__verse_0x652D1E0A_NumSegments' has a wrong offset!");
static_assert(offsetof(Fcylinder_draw_params, __verse_0xE34F9FAC_Radius) == 0x000008, "Member 'Fcylinder_draw_params::__verse_0xE34F9FAC_Radius' has a wrong offset!");
static_assert(offsetof(Fcylinder_draw_params, __verse_0x65678AC7_Color) == 0x000010, "Member 'Fcylinder_draw_params::__verse_0x65678AC7_Color' has a wrong offset!");
static_assert(offsetof(Fcylinder_draw_params, __verse_0x6C915C14_Thickness) == 0x000030, "Member 'Fcylinder_draw_params::__verse_0x6C915C14_Thickness' has a wrong offset!");
static_assert(offsetof(Fcylinder_draw_params, __verse_0x0DBBEBBF_DrawDurationPolicy) == 0x000038, "Member 'Fcylinder_draw_params::__verse_0x0DBBEBBF_DrawDurationPolicy' has a wrong offset!");
static_assert(offsetof(Fcylinder_draw_params, __verse_0xFC2FBF02_Duration) == 0x000040, "Member 'Fcylinder_draw_params::__verse_0xFC2FBF02_Duration' has a wrong offset!");

// SolarisGeneratedStruct VerseEngine.delegate_handle
// 0x0010 (0x0010 - 0x0000)
struct Fdelegate_handle final
{
public:
	int64                                         __verse_0x22F40465_InternalID;                     // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class Umulticast_delegate_base*               __verse_0xC5BA7E5B_InternalDelegate;               // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Fdelegate_handle) == 0x000008, "Wrong alignment on Fdelegate_handle");
static_assert(sizeof(Fdelegate_handle) == 0x000010, "Wrong size on Fdelegate_handle");
static_assert(offsetof(Fdelegate_handle, __verse_0x22F40465_InternalID) == 0x000000, "Member 'Fdelegate_handle::__verse_0x22F40465_InternalID' has a wrong offset!");
static_assert(offsetof(Fdelegate_handle, __verse_0xC5BA7E5B_InternalDelegate) == 0x000008, "Member 'Fdelegate_handle::__verse_0xC5BA7E5B_InternalDelegate' has a wrong offset!");

// SolarisGeneratedStruct VerseEngine.line_draw_params
// 0x0040 (0x0040 - 0x0000)
struct Fline_draw_params final
{
public:
	struct Fcolor_v                               __verse_0x65678AC7_Color;                          // 0x0000(0x0020)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	double                                        __verse_0x6C915C14_Thickness;                      // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Edraw_duration_policy                         __verse_0x0DBBEBBF_DrawDurationPolicy;             // 0x0028(0x0001)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FOptionProperty_                              __verse_0xFC2FBF02_Duration;                       // 0x0030(0x0009)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Fline_draw_params) == 0x000008, "Wrong alignment on Fline_draw_params");
static_assert(sizeof(Fline_draw_params) == 0x000040, "Wrong size on Fline_draw_params");
static_assert(offsetof(Fline_draw_params, __verse_0x65678AC7_Color) == 0x000000, "Member 'Fline_draw_params::__verse_0x65678AC7_Color' has a wrong offset!");
static_assert(offsetof(Fline_draw_params, __verse_0x6C915C14_Thickness) == 0x000020, "Member 'Fline_draw_params::__verse_0x6C915C14_Thickness' has a wrong offset!");
static_assert(offsetof(Fline_draw_params, __verse_0x0DBBEBBF_DrawDurationPolicy) == 0x000028, "Member 'Fline_draw_params::__verse_0x0DBBEBBF_DrawDurationPolicy' has a wrong offset!");
static_assert(offsetof(Fline_draw_params, __verse_0xFC2FBF02_Duration) == 0x000030, "Member 'Fline_draw_params::__verse_0xFC2FBF02_Duration' has a wrong offset!");

// SolarisGeneratedStruct VerseEngine.log_channel_handle
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) Flog_channel_handle final
{
public:
	FVerseStringProperty_                         __verse_0x65E67365_ChannelName;                    // 0x0000(0x0010)(InstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(Flog_channel_handle) == 0x000008, "Wrong alignment on Flog_channel_handle");
static_assert(sizeof(Flog_channel_handle) == 0x000010, "Wrong size on Flog_channel_handle");
static_assert(offsetof(Flog_channel_handle, __verse_0x65E67365_ChannelName) == 0x000000, "Member 'Flog_channel_handle::__verse_0x65E67365_ChannelName' has a wrong offset!");

// SolarisGeneratedStruct VerseEngine.log_params
// 0x0018 (0x0018 - 0x0000)
struct Flog_params final
{
public:
	struct Flog_channel_handle                    __verse_0xFAE6EE9E_Channel;                        // 0x0000(0x0010)(InstancedReference)
	Ediagnostics_log_level                        __verse_0x91948F88_Level;                          // 0x0010(0x0001)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Flog_params) == 0x000008, "Wrong alignment on Flog_params");
static_assert(sizeof(Flog_params) == 0x000018, "Wrong size on Flog_params");
static_assert(offsetof(Flog_params, __verse_0xFAE6EE9E_Channel) == 0x000000, "Member 'Flog_params::__verse_0xFAE6EE9E_Channel' has a wrong offset!");
static_assert(offsetof(Flog_params, __verse_0x91948F88_Level) == 0x000010, "Member 'Flog_params::__verse_0x91948F88_Level' has a wrong offset!");

// SolarisGeneratedStruct VerseEngine.log_screen_params
// 0x0040 (0x0040 - 0x0000)
struct Flog_screen_params final
{
public:
	struct Flog_channel_handle                    __verse_0xFAE6EE9E_Channel;                        // 0x0000(0x0010)(InstancedReference)
	Ediagnostics_log_level                        __verse_0x91948F88_Level;                          // 0x0010(0x0001)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct Fcolor_v                               __verse_0x65678AC7_Color;                          // 0x0018(0x0020)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	double                                        __verse_0xFC2FBF02_Duration;                       // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Flog_screen_params) == 0x000008, "Wrong alignment on Flog_screen_params");
static_assert(sizeof(Flog_screen_params) == 0x000040, "Wrong size on Flog_screen_params");
static_assert(offsetof(Flog_screen_params, __verse_0xFAE6EE9E_Channel) == 0x000000, "Member 'Flog_screen_params::__verse_0xFAE6EE9E_Channel' has a wrong offset!");
static_assert(offsetof(Flog_screen_params, __verse_0x91948F88_Level) == 0x000010, "Member 'Flog_screen_params::__verse_0x91948F88_Level' has a wrong offset!");
static_assert(offsetof(Flog_screen_params, __verse_0x65678AC7_Color) == 0x000018, "Member 'Flog_screen_params::__verse_0x65678AC7_Color' has a wrong offset!");
static_assert(offsetof(Flog_screen_params, __verse_0xFC2FBF02_Duration) == 0x000038, "Member 'Flog_screen_params::__verse_0xFC2FBF02_Duration' has a wrong offset!");

// SolarisGeneratedStruct VerseEngine.point_draw_params
// 0x0040 (0x0040 - 0x0000)
struct Fpoint_draw_params final
{
public:
	struct Fcolor_v                               __verse_0x65678AC7_Color;                          // 0x0000(0x0020)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	double                                        __verse_0x6C915C14_Thickness;                      // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Edraw_duration_policy                         __verse_0x0DBBEBBF_DrawDurationPolicy;             // 0x0028(0x0001)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FOptionProperty_                              __verse_0xFC2FBF02_Duration;                       // 0x0030(0x0009)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Fpoint_draw_params) == 0x000008, "Wrong alignment on Fpoint_draw_params");
static_assert(sizeof(Fpoint_draw_params) == 0x000040, "Wrong size on Fpoint_draw_params");
static_assert(offsetof(Fpoint_draw_params, __verse_0x65678AC7_Color) == 0x000000, "Member 'Fpoint_draw_params::__verse_0x65678AC7_Color' has a wrong offset!");
static_assert(offsetof(Fpoint_draw_params, __verse_0x6C915C14_Thickness) == 0x000020, "Member 'Fpoint_draw_params::__verse_0x6C915C14_Thickness' has a wrong offset!");
static_assert(offsetof(Fpoint_draw_params, __verse_0x0DBBEBBF_DrawDurationPolicy) == 0x000028, "Member 'Fpoint_draw_params::__verse_0x0DBBEBBF_DrawDurationPolicy' has a wrong offset!");
static_assert(offsetof(Fpoint_draw_params, __verse_0xFC2FBF02_Duration) == 0x000030, "Member 'Fpoint_draw_params::__verse_0xFC2FBF02_Duration' has a wrong offset!");

// SolarisGeneratedStruct VerseEngine.sphere_draw_params
// 0x0050 (0x0050 - 0x0000)
struct Fsphere_draw_params final
{
public:
	double                                        __verse_0xE34F9FAC_Radius;                         // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __verse_0x652D1E0A_NumSegments;                    // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct Fcolor_v                               __verse_0x65678AC7_Color;                          // 0x0010(0x0020)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	double                                        __verse_0x6C915C14_Thickness;                      // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Edraw_duration_policy                         __verse_0x0DBBEBBF_DrawDurationPolicy;             // 0x0038(0x0001)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FOptionProperty_                              __verse_0xFC2FBF02_Duration;                       // 0x0040(0x0009)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Fsphere_draw_params) == 0x000008, "Wrong alignment on Fsphere_draw_params");
static_assert(sizeof(Fsphere_draw_params) == 0x000050, "Wrong size on Fsphere_draw_params");
static_assert(offsetof(Fsphere_draw_params, __verse_0xE34F9FAC_Radius) == 0x000000, "Member 'Fsphere_draw_params::__verse_0xE34F9FAC_Radius' has a wrong offset!");
static_assert(offsetof(Fsphere_draw_params, __verse_0x652D1E0A_NumSegments) == 0x000008, "Member 'Fsphere_draw_params::__verse_0x652D1E0A_NumSegments' has a wrong offset!");
static_assert(offsetof(Fsphere_draw_params, __verse_0x65678AC7_Color) == 0x000010, "Member 'Fsphere_draw_params::__verse_0x65678AC7_Color' has a wrong offset!");
static_assert(offsetof(Fsphere_draw_params, __verse_0x6C915C14_Thickness) == 0x000030, "Member 'Fsphere_draw_params::__verse_0x6C915C14_Thickness' has a wrong offset!");
static_assert(offsetof(Fsphere_draw_params, __verse_0x0DBBEBBF_DrawDurationPolicy) == 0x000038, "Member 'Fsphere_draw_params::__verse_0x0DBBEBBF_DrawDurationPolicy' has a wrong offset!");
static_assert(offsetof(Fsphere_draw_params, __verse_0xFC2FBF02_Duration) == 0x000040, "Member 'Fsphere_draw_params::__verse_0xFC2FBF02_Duration' has a wrong offset!");

// SolarisGeneratedStruct VerseEngine.tuple_L_Kchar_Mlog__params_R
// 0x0028 (0x0028 - 0x0000)
struct Ftuple_L_Kchar_Mlog__params_R final
{
public:
	FVerseStringProperty_                         __verse_0x18E3F084_Elem0;                          // 0x0000(0x0010)(InstancedReference, HasGetValueTypeHash)
	struct Flog_params                            __verse_0x7D844C3C_Elem1;                          // 0x0010(0x0018)(InstancedReference)
};
static_assert(alignof(Ftuple_L_Kchar_Mlog__params_R) == 0x000008, "Wrong alignment on Ftuple_L_Kchar_Mlog__params_R");
static_assert(sizeof(Ftuple_L_Kchar_Mlog__params_R) == 0x000028, "Wrong size on Ftuple_L_Kchar_Mlog__params_R");
static_assert(offsetof(Ftuple_L_Kchar_Mlog__params_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_L_Kchar_Mlog__params_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_L_Kchar_Mlog__params_R, __verse_0x7D844C3C_Elem1) == 0x000010, "Member 'Ftuple_L_Kchar_Mlog__params_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// SolarisGeneratedStruct VerseEngine.tuple_L_Kchar_Mlog__screen__params_R
// 0x0050 (0x0050 - 0x0000)
struct Ftuple_L_Kchar_Mlog__screen__params_R final
{
public:
	FVerseStringProperty_                         __verse_0x18E3F084_Elem0;                          // 0x0000(0x0010)(InstancedReference, HasGetValueTypeHash)
	struct Flog_screen_params                     __verse_0x7D844C3C_Elem1;                          // 0x0010(0x0040)(InstancedReference)
};
static_assert(alignof(Ftuple_L_Kchar_Mlog__screen__params_R) == 0x000008, "Wrong alignment on Ftuple_L_Kchar_Mlog__screen__params_R");
static_assert(sizeof(Ftuple_L_Kchar_Mlog__screen__params_R) == 0x000050, "Wrong size on Ftuple_L_Kchar_Mlog__screen__params_R");
static_assert(offsetof(Ftuple_L_Kchar_Mlog__screen__params_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_L_Kchar_Mlog__screen__params_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_L_Kchar_Mlog__screen__params_R, __verse_0x7D844C3C_Elem1) == 0x000010, "Member 'Ftuple_L_Kchar_Mlog__screen__params_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// SolarisGeneratedStruct VerseEngine.tuple_L_R
// 0x0001 (0x0001 - 0x0000)
struct VerseEngine_0::Ftuple_L_R final
{
public:
	uint8                                         _StructPaddingDummy;                               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VerseEngine_0::Ftuple_L_R) == 0x000001, "Wrong alignment on VerseEngine_0::Ftuple_L_R");
static_assert(sizeof(VerseEngine_0::Ftuple_L_R) == 0x000001, "Wrong size on VerseEngine_0::Ftuple_L_R");
static_assert(offsetof(VerseEngine_0::Ftuple_L_R, _StructPaddingDummy) == 0x000000, "Member 'VerseEngine_0::Ftuple_L_R::_StructPaddingDummy' has a wrong offset!");

// SolarisGeneratedStruct VerseEngine.tuple_Lcomponent_Mtype_R
// 0x0010 (0x0010 - 0x0000)
struct VerseEngine_0::Ftuple_Lcomponent_Mtype_R final
{
public:
	class UEntityComponent*                       __verse_0x18E3F084_Elem0;                          // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 __verse_0x7D844C3C_Elem1;                          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VerseEngine_0::Ftuple_Lcomponent_Mtype_R) == 0x000008, "Wrong alignment on VerseEngine_0::Ftuple_Lcomponent_Mtype_R");
static_assert(sizeof(VerseEngine_0::Ftuple_Lcomponent_Mtype_R) == 0x000010, "Wrong size on VerseEngine_0::Ftuple_Lcomponent_Mtype_R");
static_assert(offsetof(VerseEngine_0::Ftuple_Lcomponent_Mtype_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'VerseEngine_0::Ftuple_Lcomponent_Mtype_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(VerseEngine_0::Ftuple_Lcomponent_Mtype_R, __verse_0x7D844C3C_Elem1) == 0x000008, "Member 'VerseEngine_0::Ftuple_Lcomponent_Mtype_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// SolarisGeneratedStruct VerseEngine.tuple_Ltransform__v_M_Kchar_R
// 0x0060 (0x0060 - 0x0000)
struct VerseEngine_0::Ftuple_Ltransform__v_M_Kchar_R final
{
public:
	struct Ftransform_v                           __verse_0x18E3F084_Elem0;                          // 0x0000(0x0050)(InstancedReference, NoDestructor)
	FVerseStringProperty_                         __verse_0x7D844C3C_Elem1;                          // 0x0050(0x0010)(InstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(VerseEngine_0::Ftuple_Ltransform__v_M_Kchar_R) == 0x000010, "Wrong alignment on VerseEngine_0::Ftuple_Ltransform__v_M_Kchar_R");
static_assert(sizeof(VerseEngine_0::Ftuple_Ltransform__v_M_Kchar_R) == 0x000060, "Wrong size on VerseEngine_0::Ftuple_Ltransform__v_M_Kchar_R");
static_assert(offsetof(VerseEngine_0::Ftuple_Ltransform__v_M_Kchar_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'VerseEngine_0::Ftuple_Ltransform__v_M_Kchar_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(VerseEngine_0::Ftuple_Ltransform__v_M_Kchar_R, __verse_0x7D844C3C_Elem1) == 0x000050, "Member 'VerseEngine_0::Ftuple_Ltransform__v_M_Kchar_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// SolarisGeneratedStruct VerseEngine.tuple_Lvector3_M_Kchar_R
// 0x0028 (0x0028 - 0x0000)
struct VerseEngine_0::Ftuple_Lvector3_M_Kchar_R final
{
public:
	struct Fvector3                               __verse_0x18E3F084_Elem0;                          // 0x0000(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	FVerseStringProperty_                         __verse_0x7D844C3C_Elem1;                          // 0x0018(0x0010)(InstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(VerseEngine_0::Ftuple_Lvector3_M_Kchar_R) == 0x000008, "Wrong alignment on VerseEngine_0::Ftuple_Lvector3_M_Kchar_R");
static_assert(sizeof(VerseEngine_0::Ftuple_Lvector3_M_Kchar_R) == 0x000028, "Wrong size on VerseEngine_0::Ftuple_Lvector3_M_Kchar_R");
static_assert(offsetof(VerseEngine_0::Ftuple_Lvector3_M_Kchar_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'VerseEngine_0::Ftuple_Lvector3_M_Kchar_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(VerseEngine_0::Ftuple_Lvector3_M_Kchar_R, __verse_0x7D844C3C_Elem1) == 0x000018, "Member 'VerseEngine_0::Ftuple_Lvector3_M_Kchar_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// SolarisGeneratedStruct VerseEngine.tuple_Lvector3_Mpoint__draw__params_R
// 0x0058 (0x0058 - 0x0000)
struct Ftuple_Lvector3_Mpoint__draw__params_R final
{
public:
	struct Fvector3                               __verse_0x18E3F084_Elem0;                          // 0x0000(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	struct Fpoint_draw_params                     __verse_0x7D844C3C_Elem1;                          // 0x0018(0x0040)(InstancedReference)
};
static_assert(alignof(Ftuple_Lvector3_Mpoint__draw__params_R) == 0x000008, "Wrong alignment on Ftuple_Lvector3_Mpoint__draw__params_R");
static_assert(sizeof(Ftuple_Lvector3_Mpoint__draw__params_R) == 0x000058, "Wrong size on Ftuple_Lvector3_Mpoint__draw__params_R");
static_assert(offsetof(Ftuple_Lvector3_Mpoint__draw__params_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lvector3_Mpoint__draw__params_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lvector3_Mpoint__draw__params_R, __verse_0x7D844C3C_Elem1) == 0x000018, "Member 'Ftuple_Lvector3_Mpoint__draw__params_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// SolarisGeneratedStruct VerseEngine.tuple_Lvector3_Mrotation_Mbox__draw__params_R
// 0x00A0 (0x00A0 - 0x0000)
struct Ftuple_Lvector3_Mrotation_Mbox__draw__params_R final
{
public:
	struct Fvector3                               __verse_0x18E3F084_Elem0;                          // 0x0000(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVerseRotation                         __verse_0x7D844C3C_Elem1;                          // 0x0020(0x0020)(InstancedReference, NoDestructor)
	struct Fbox_draw_params                       __verse_0x932BF92E_Elem2;                          // 0x0040(0x0058)(InstancedReference)
};
static_assert(alignof(Ftuple_Lvector3_Mrotation_Mbox__draw__params_R) == 0x000010, "Wrong alignment on Ftuple_Lvector3_Mrotation_Mbox__draw__params_R");
static_assert(sizeof(Ftuple_Lvector3_Mrotation_Mbox__draw__params_R) == 0x0000A0, "Wrong size on Ftuple_Lvector3_Mrotation_Mbox__draw__params_R");
static_assert(offsetof(Ftuple_Lvector3_Mrotation_Mbox__draw__params_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lvector3_Mrotation_Mbox__draw__params_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lvector3_Mrotation_Mbox__draw__params_R, __verse_0x7D844C3C_Elem1) == 0x000020, "Member 'Ftuple_Lvector3_Mrotation_Mbox__draw__params_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");
static_assert(offsetof(Ftuple_Lvector3_Mrotation_Mbox__draw__params_R, __verse_0x932BF92E_Elem2) == 0x000040, "Member 'Ftuple_Lvector3_Mrotation_Mbox__draw__params_R::__verse_0x932BF92E_Elem2' has a wrong offset!");

// SolarisGeneratedStruct VerseEngine.tuple_Lvector3_Mrotation_Mcapsule__draw__params_R
// 0x0090 (0x0090 - 0x0000)
struct Ftuple_Lvector3_Mrotation_Mcapsule__draw__params_R final
{
public:
	struct Fvector3                               __verse_0x18E3F084_Elem0;                          // 0x0000(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVerseRotation                         __verse_0x7D844C3C_Elem1;                          // 0x0020(0x0020)(InstancedReference, NoDestructor)
	struct Fcapsule_draw_params                   __verse_0x932BF92E_Elem2;                          // 0x0040(0x0050)(InstancedReference)
};
static_assert(alignof(Ftuple_Lvector3_Mrotation_Mcapsule__draw__params_R) == 0x000010, "Wrong alignment on Ftuple_Lvector3_Mrotation_Mcapsule__draw__params_R");
static_assert(sizeof(Ftuple_Lvector3_Mrotation_Mcapsule__draw__params_R) == 0x000090, "Wrong size on Ftuple_Lvector3_Mrotation_Mcapsule__draw__params_R");
static_assert(offsetof(Ftuple_Lvector3_Mrotation_Mcapsule__draw__params_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lvector3_Mrotation_Mcapsule__draw__params_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lvector3_Mrotation_Mcapsule__draw__params_R, __verse_0x7D844C3C_Elem1) == 0x000020, "Member 'Ftuple_Lvector3_Mrotation_Mcapsule__draw__params_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");
static_assert(offsetof(Ftuple_Lvector3_Mrotation_Mcapsule__draw__params_R, __verse_0x932BF92E_Elem2) == 0x000040, "Member 'Ftuple_Lvector3_Mrotation_Mcapsule__draw__params_R::__verse_0x932BF92E_Elem2' has a wrong offset!");

// SolarisGeneratedStruct VerseEngine.tuple_Lvector3_Msphere__draw__params_R
// 0x0068 (0x0068 - 0x0000)
struct Ftuple_Lvector3_Msphere__draw__params_R final
{
public:
	struct Fvector3                               __verse_0x18E3F084_Elem0;                          // 0x0000(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	struct Fsphere_draw_params                    __verse_0x7D844C3C_Elem1;                          // 0x0018(0x0050)(InstancedReference)
};
static_assert(alignof(Ftuple_Lvector3_Msphere__draw__params_R) == 0x000008, "Wrong alignment on Ftuple_Lvector3_Msphere__draw__params_R");
static_assert(sizeof(Ftuple_Lvector3_Msphere__draw__params_R) == 0x000068, "Wrong size on Ftuple_Lvector3_Msphere__draw__params_R");
static_assert(offsetof(Ftuple_Lvector3_Msphere__draw__params_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lvector3_Msphere__draw__params_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lvector3_Msphere__draw__params_R, __verse_0x7D844C3C_Elem1) == 0x000018, "Member 'Ftuple_Lvector3_Msphere__draw__params_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// SolarisGeneratedStruct VerseEngine.tuple_Lvector3_Mvector3_Marrow__draw__params_R
// 0x0078 (0x0078 - 0x0000)
struct Ftuple_Lvector3_Mvector3_Marrow__draw__params_R final
{
public:
	struct Fvector3                               __verse_0x18E3F084_Elem0;                          // 0x0000(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	struct Fvector3                               __verse_0x7D844C3C_Elem1;                          // 0x0018(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	struct Farrow_draw_params                     __verse_0x932BF92E_Elem2;                          // 0x0030(0x0048)(InstancedReference)
};
static_assert(alignof(Ftuple_Lvector3_Mvector3_Marrow__draw__params_R) == 0x000008, "Wrong alignment on Ftuple_Lvector3_Mvector3_Marrow__draw__params_R");
static_assert(sizeof(Ftuple_Lvector3_Mvector3_Marrow__draw__params_R) == 0x000078, "Wrong size on Ftuple_Lvector3_Mvector3_Marrow__draw__params_R");
static_assert(offsetof(Ftuple_Lvector3_Mvector3_Marrow__draw__params_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lvector3_Mvector3_Marrow__draw__params_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lvector3_Mvector3_Marrow__draw__params_R, __verse_0x7D844C3C_Elem1) == 0x000018, "Member 'Ftuple_Lvector3_Mvector3_Marrow__draw__params_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");
static_assert(offsetof(Ftuple_Lvector3_Mvector3_Marrow__draw__params_R, __verse_0x932BF92E_Elem2) == 0x000030, "Member 'Ftuple_Lvector3_Mvector3_Marrow__draw__params_R::__verse_0x932BF92E_Elem2' has a wrong offset!");

// SolarisGeneratedStruct VerseEngine.tuple_Lvector3_Mvector3_Mcone__draw__params_R
// 0x0090 (0x0090 - 0x0000)
struct Ftuple_Lvector3_Mvector3_Mcone__draw__params_R final
{
public:
	struct Fvector3                               __verse_0x18E3F084_Elem0;                          // 0x0000(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	struct Fvector3                               __verse_0x7D844C3C_Elem1;                          // 0x0018(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	struct Fcone_draw_params                      __verse_0x932BF92E_Elem2;                          // 0x0030(0x0060)(InstancedReference)
};
static_assert(alignof(Ftuple_Lvector3_Mvector3_Mcone__draw__params_R) == 0x000008, "Wrong alignment on Ftuple_Lvector3_Mvector3_Mcone__draw__params_R");
static_assert(sizeof(Ftuple_Lvector3_Mvector3_Mcone__draw__params_R) == 0x000090, "Wrong size on Ftuple_Lvector3_Mvector3_Mcone__draw__params_R");
static_assert(offsetof(Ftuple_Lvector3_Mvector3_Mcone__draw__params_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lvector3_Mvector3_Mcone__draw__params_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lvector3_Mvector3_Mcone__draw__params_R, __verse_0x7D844C3C_Elem1) == 0x000018, "Member 'Ftuple_Lvector3_Mvector3_Mcone__draw__params_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");
static_assert(offsetof(Ftuple_Lvector3_Mvector3_Mcone__draw__params_R, __verse_0x932BF92E_Elem2) == 0x000030, "Member 'Ftuple_Lvector3_Mvector3_Mcone__draw__params_R::__verse_0x932BF92E_Elem2' has a wrong offset!");

// SolarisGeneratedStruct VerseEngine.tuple_Lvector3_Mvector3_Mcylinder__draw__params_R
// 0x0090 (0x0090 - 0x0000)
struct Ftuple_Lvector3_Mvector3_Mcylinder__draw__params_R final
{
public:
	struct Fvector3                               __verse_0x18E3F084_Elem0;                          // 0x0000(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	struct Fvector3                               __verse_0x7D844C3C_Elem1;                          // 0x0018(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	struct Fcylinder_draw_params                  __verse_0x932BF92E_Elem2;                          // 0x0030(0x0060)(InstancedReference)
};
static_assert(alignof(Ftuple_Lvector3_Mvector3_Mcylinder__draw__params_R) == 0x000008, "Wrong alignment on Ftuple_Lvector3_Mvector3_Mcylinder__draw__params_R");
static_assert(sizeof(Ftuple_Lvector3_Mvector3_Mcylinder__draw__params_R) == 0x000090, "Wrong size on Ftuple_Lvector3_Mvector3_Mcylinder__draw__params_R");
static_assert(offsetof(Ftuple_Lvector3_Mvector3_Mcylinder__draw__params_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lvector3_Mvector3_Mcylinder__draw__params_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lvector3_Mvector3_Mcylinder__draw__params_R, __verse_0x7D844C3C_Elem1) == 0x000018, "Member 'Ftuple_Lvector3_Mvector3_Mcylinder__draw__params_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");
static_assert(offsetof(Ftuple_Lvector3_Mvector3_Mcylinder__draw__params_R, __verse_0x932BF92E_Elem2) == 0x000030, "Member 'Ftuple_Lvector3_Mvector3_Mcylinder__draw__params_R::__verse_0x932BF92E_Elem2' has a wrong offset!");

// SolarisGeneratedStruct VerseEngine.tuple_Lvector3_Mvector3_Mline__draw__params_R
// 0x0070 (0x0070 - 0x0000)
struct Ftuple_Lvector3_Mvector3_Mline__draw__params_R final
{
public:
	struct Fvector3                               __verse_0x18E3F084_Elem0;                          // 0x0000(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	struct Fvector3                               __verse_0x7D844C3C_Elem1;                          // 0x0018(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	struct Fline_draw_params                      __verse_0x932BF92E_Elem2;                          // 0x0030(0x0040)(InstancedReference)
};
static_assert(alignof(Ftuple_Lvector3_Mvector3_Mline__draw__params_R) == 0x000008, "Wrong alignment on Ftuple_Lvector3_Mvector3_Mline__draw__params_R");
static_assert(sizeof(Ftuple_Lvector3_Mvector3_Mline__draw__params_R) == 0x000070, "Wrong size on Ftuple_Lvector3_Mvector3_Mline__draw__params_R");
static_assert(offsetof(Ftuple_Lvector3_Mvector3_Mline__draw__params_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lvector3_Mvector3_Mline__draw__params_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lvector3_Mvector3_Mline__draw__params_R, __verse_0x7D844C3C_Elem1) == 0x000018, "Member 'Ftuple_Lvector3_Mvector3_Mline__draw__params_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");
static_assert(offsetof(Ftuple_Lvector3_Mvector3_Mline__draw__params_R, __verse_0x932BF92E_Elem2) == 0x000030, "Member 'Ftuple_Lvector3_Mvector3_Mline__draw__params_R::__verse_0x932BF92E_Elem2' has a wrong offset!");

// SolarisGeneratedStruct VerseEngine.tuple_Lvector3_Mvector3_Mvector3_M_Kchar_R
// 0x0058 (0x0058 - 0x0000)
struct Ftuple_Lvector3_Mvector3_Mvector3_M_Kchar_R final
{
public:
	struct Fvector3                               __verse_0x18E3F084_Elem0;                          // 0x0000(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	struct Fvector3                               __verse_0x7D844C3C_Elem1;                          // 0x0018(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	struct Fvector3                               __verse_0x932BF92E_Elem2;                          // 0x0030(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	FVerseStringProperty_                         __verse_0xF64C4596_Elem3;                          // 0x0048(0x0010)(InstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(Ftuple_Lvector3_Mvector3_Mvector3_M_Kchar_R) == 0x000008, "Wrong alignment on Ftuple_Lvector3_Mvector3_Mvector3_M_Kchar_R");
static_assert(sizeof(Ftuple_Lvector3_Mvector3_Mvector3_M_Kchar_R) == 0x000058, "Wrong size on Ftuple_Lvector3_Mvector3_Mvector3_M_Kchar_R");
static_assert(offsetof(Ftuple_Lvector3_Mvector3_Mvector3_M_Kchar_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lvector3_Mvector3_Mvector3_M_Kchar_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lvector3_Mvector3_Mvector3_M_Kchar_R, __verse_0x7D844C3C_Elem1) == 0x000018, "Member 'Ftuple_Lvector3_Mvector3_Mvector3_M_Kchar_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");
static_assert(offsetof(Ftuple_Lvector3_Mvector3_Mvector3_M_Kchar_R, __verse_0x932BF92E_Elem2) == 0x000030, "Member 'Ftuple_Lvector3_Mvector3_Mvector3_M_Kchar_R::__verse_0x932BF92E_Elem2' has a wrong offset!");
static_assert(offsetof(Ftuple_Lvector3_Mvector3_Mvector3_M_Kchar_R, __verse_0xF64C4596_Elem3) == 0x000048, "Member 'Ftuple_Lvector3_Mvector3_Mvector3_M_Kchar_R::__verse_0xF64C4596_Elem3' has a wrong offset!");

}

