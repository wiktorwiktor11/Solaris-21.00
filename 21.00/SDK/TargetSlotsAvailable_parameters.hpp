#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TargetSlotsAvailable

#include "Basic.hpp"

#include "Enum_NPC_TargetSlots_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK::Params
{

// Function TargetSlotsAvailable.TargetSlotsAvailable_C.PerformConditionCheckAI
// 0x00C0 (0x00C0 - 0x0000)
struct TargetSlotsAvailable_C_PerformConditionCheckAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ANPC_Pawn_Parent_C*                     K2Node_DynamicCast_AsNPC_Pawn_Parent;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetBlackboardValueAsActor_ReturnValue;    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_NPC_TargetSlotInfo_TargetSlotCount;       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_NPC_TargetSlotInfo_TargetSlotMax;         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_NPC_TargetSlotInfo_NPC_TargetSlotsRequired; // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NPC_TargetSlotInfo_TargetSlotsMaxOrMore;  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NPC_TargetSlotInfo_TargetSlotCountIsExactlyMax; // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NPC_TargetSlotInfo_NPC_IsTargetSlotOwner; // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NPC_TargetSlotInfo_NPC_HasSpaceToSlotOnTarget; // 0x003F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_NPC_TargetSlots                          CallFunc_NPC_TargetSlotInfo_TargetSlotTypeOut;     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_NPC_TargetSlotInfo_TargetSlotCountingGE;  // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         CallFunc_NPC_TargetSlotInfo_AI_TargetSlotSizeHF;   // 0x0050(0x0028)()
	struct FScalableFloat                         CallFunc_NPC_TargetSlotInfo_AI_TargetSlotDurationHF; // 0x0078(0x0028)()
	class UClass*                                 CallFunc_NPC_TargetSlotInfo_TargetSlotOverrideGE;  // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_NPC_TargetSlotInfo_TargetSlotOwnerGE;     // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_NPC_TargetSlotInfo_TargetSlotCountingMaxedGE; // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TargetSlotsAvailable_C_PerformConditionCheckAI) == 0x000008, "Wrong alignment on TargetSlotsAvailable_C_PerformConditionCheckAI");
static_assert(sizeof(TargetSlotsAvailable_C_PerformConditionCheckAI) == 0x0000C0, "Wrong size on TargetSlotsAvailable_C_PerformConditionCheckAI");
static_assert(offsetof(TargetSlotsAvailable_C_PerformConditionCheckAI, OwnerController) == 0x000000, "Member 'TargetSlotsAvailable_C_PerformConditionCheckAI::OwnerController' has a wrong offset!");
static_assert(offsetof(TargetSlotsAvailable_C_PerformConditionCheckAI, ControlledPawn) == 0x000008, "Member 'TargetSlotsAvailable_C_PerformConditionCheckAI::ControlledPawn' has a wrong offset!");
static_assert(offsetof(TargetSlotsAvailable_C_PerformConditionCheckAI, ReturnValue) == 0x000010, "Member 'TargetSlotsAvailable_C_PerformConditionCheckAI::ReturnValue' has a wrong offset!");
static_assert(offsetof(TargetSlotsAvailable_C_PerformConditionCheckAI, K2Node_DynamicCast_AsNPC_Pawn_Parent) == 0x000018, "Member 'TargetSlotsAvailable_C_PerformConditionCheckAI::K2Node_DynamicCast_AsNPC_Pawn_Parent' has a wrong offset!");
static_assert(offsetof(TargetSlotsAvailable_C_PerformConditionCheckAI, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'TargetSlotsAvailable_C_PerformConditionCheckAI::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(TargetSlotsAvailable_C_PerformConditionCheckAI, CallFunc_GetBlackboardValueAsActor_ReturnValue) == 0x000028, "Member 'TargetSlotsAvailable_C_PerformConditionCheckAI::CallFunc_GetBlackboardValueAsActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(TargetSlotsAvailable_C_PerformConditionCheckAI, CallFunc_NPC_TargetSlotInfo_TargetSlotCount) == 0x000030, "Member 'TargetSlotsAvailable_C_PerformConditionCheckAI::CallFunc_NPC_TargetSlotInfo_TargetSlotCount' has a wrong offset!");
static_assert(offsetof(TargetSlotsAvailable_C_PerformConditionCheckAI, CallFunc_NPC_TargetSlotInfo_TargetSlotMax) == 0x000034, "Member 'TargetSlotsAvailable_C_PerformConditionCheckAI::CallFunc_NPC_TargetSlotInfo_TargetSlotMax' has a wrong offset!");
static_assert(offsetof(TargetSlotsAvailable_C_PerformConditionCheckAI, CallFunc_NPC_TargetSlotInfo_NPC_TargetSlotsRequired) == 0x000038, "Member 'TargetSlotsAvailable_C_PerformConditionCheckAI::CallFunc_NPC_TargetSlotInfo_NPC_TargetSlotsRequired' has a wrong offset!");
static_assert(offsetof(TargetSlotsAvailable_C_PerformConditionCheckAI, CallFunc_NPC_TargetSlotInfo_TargetSlotsMaxOrMore) == 0x00003C, "Member 'TargetSlotsAvailable_C_PerformConditionCheckAI::CallFunc_NPC_TargetSlotInfo_TargetSlotsMaxOrMore' has a wrong offset!");
static_assert(offsetof(TargetSlotsAvailable_C_PerformConditionCheckAI, CallFunc_NPC_TargetSlotInfo_TargetSlotCountIsExactlyMax) == 0x00003D, "Member 'TargetSlotsAvailable_C_PerformConditionCheckAI::CallFunc_NPC_TargetSlotInfo_TargetSlotCountIsExactlyMax' has a wrong offset!");
static_assert(offsetof(TargetSlotsAvailable_C_PerformConditionCheckAI, CallFunc_NPC_TargetSlotInfo_NPC_IsTargetSlotOwner) == 0x00003E, "Member 'TargetSlotsAvailable_C_PerformConditionCheckAI::CallFunc_NPC_TargetSlotInfo_NPC_IsTargetSlotOwner' has a wrong offset!");
static_assert(offsetof(TargetSlotsAvailable_C_PerformConditionCheckAI, CallFunc_NPC_TargetSlotInfo_NPC_HasSpaceToSlotOnTarget) == 0x00003F, "Member 'TargetSlotsAvailable_C_PerformConditionCheckAI::CallFunc_NPC_TargetSlotInfo_NPC_HasSpaceToSlotOnTarget' has a wrong offset!");
static_assert(offsetof(TargetSlotsAvailable_C_PerformConditionCheckAI, CallFunc_NPC_TargetSlotInfo_TargetSlotTypeOut) == 0x000040, "Member 'TargetSlotsAvailable_C_PerformConditionCheckAI::CallFunc_NPC_TargetSlotInfo_TargetSlotTypeOut' has a wrong offset!");
static_assert(offsetof(TargetSlotsAvailable_C_PerformConditionCheckAI, CallFunc_NPC_TargetSlotInfo_TargetSlotCountingGE) == 0x000048, "Member 'TargetSlotsAvailable_C_PerformConditionCheckAI::CallFunc_NPC_TargetSlotInfo_TargetSlotCountingGE' has a wrong offset!");
static_assert(offsetof(TargetSlotsAvailable_C_PerformConditionCheckAI, CallFunc_NPC_TargetSlotInfo_AI_TargetSlotSizeHF) == 0x000050, "Member 'TargetSlotsAvailable_C_PerformConditionCheckAI::CallFunc_NPC_TargetSlotInfo_AI_TargetSlotSizeHF' has a wrong offset!");
static_assert(offsetof(TargetSlotsAvailable_C_PerformConditionCheckAI, CallFunc_NPC_TargetSlotInfo_AI_TargetSlotDurationHF) == 0x000078, "Member 'TargetSlotsAvailable_C_PerformConditionCheckAI::CallFunc_NPC_TargetSlotInfo_AI_TargetSlotDurationHF' has a wrong offset!");
static_assert(offsetof(TargetSlotsAvailable_C_PerformConditionCheckAI, CallFunc_NPC_TargetSlotInfo_TargetSlotOverrideGE) == 0x0000A0, "Member 'TargetSlotsAvailable_C_PerformConditionCheckAI::CallFunc_NPC_TargetSlotInfo_TargetSlotOverrideGE' has a wrong offset!");
static_assert(offsetof(TargetSlotsAvailable_C_PerformConditionCheckAI, CallFunc_NPC_TargetSlotInfo_TargetSlotOwnerGE) == 0x0000A8, "Member 'TargetSlotsAvailable_C_PerformConditionCheckAI::CallFunc_NPC_TargetSlotInfo_TargetSlotOwnerGE' has a wrong offset!");
static_assert(offsetof(TargetSlotsAvailable_C_PerformConditionCheckAI, CallFunc_NPC_TargetSlotInfo_TargetSlotCountingMaxedGE) == 0x0000B0, "Member 'TargetSlotsAvailable_C_PerformConditionCheckAI::CallFunc_NPC_TargetSlotInfo_TargetSlotCountingMaxedGE' has a wrong offset!");
static_assert(offsetof(TargetSlotsAvailable_C_PerformConditionCheckAI, CallFunc_IsValid_ReturnValue) == 0x0000B8, "Member 'TargetSlotsAvailable_C_PerformConditionCheckAI::CallFunc_IsValid_ReturnValue' has a wrong offset!");

}

