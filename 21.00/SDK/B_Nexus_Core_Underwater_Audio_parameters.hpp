#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Nexus_Core_Underwater_Audio

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function B_Nexus_Core_Underwater_Audio.B_Nexus_Core_Underwater_Audio_C.AssignLocalPC
// 0x0010 (0x0010 - 0x0000)
struct B_Nexus_Core_Underwater_Audio_C_AssignLocalPC final
{
public:
	class AFortPlayerController*                  CallFunc_GetFirstLocalFortPlayerController_ReturnValue; // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Nexus_Core_Underwater_Audio_C_AssignLocalPC) == 0x000008, "Wrong alignment on B_Nexus_Core_Underwater_Audio_C_AssignLocalPC");
static_assert(sizeof(B_Nexus_Core_Underwater_Audio_C_AssignLocalPC) == 0x000010, "Wrong size on B_Nexus_Core_Underwater_Audio_C_AssignLocalPC");
static_assert(offsetof(B_Nexus_Core_Underwater_Audio_C_AssignLocalPC, CallFunc_GetFirstLocalFortPlayerController_ReturnValue) == 0x000000, "Member 'B_Nexus_Core_Underwater_Audio_C_AssignLocalPC::CallFunc_GetFirstLocalFortPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Nexus_Core_Underwater_Audio_C_AssignLocalPC, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'B_Nexus_Core_Underwater_Audio_C_AssignLocalPC::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function B_Nexus_Core_Underwater_Audio.B_Nexus_Core_Underwater_Audio_C.BndEvt__B_Nexus_Core_Underwater_Audio_AudioBelowHaptics_K2Node_ComponentBoundEvent_0_OnAudioMultiEnvelopeValue__DelegateSignature
// 0x000C (0x000C - 0x0000)
struct B_Nexus_Core_Underwater_Audio_C_BndEvt__B_Nexus_Core_Underwater_Audio_AudioBelowHaptics_K2Node_ComponentBoundEvent_0_OnAudioMultiEnvelopeValue__DelegateSignature final
{
public:
	float                                         AverageEnvelopeValue;                              // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxEnvelope;                                       // 0x0004(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumWaveInstances;                                  // 0x0008(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Nexus_Core_Underwater_Audio_C_BndEvt__B_Nexus_Core_Underwater_Audio_AudioBelowHaptics_K2Node_ComponentBoundEvent_0_OnAudioMultiEnvelopeValue__DelegateSignature) == 0x000004, "Wrong alignment on B_Nexus_Core_Underwater_Audio_C_BndEvt__B_Nexus_Core_Underwater_Audio_AudioBelowHaptics_K2Node_ComponentBoundEvent_0_OnAudioMultiEnvelopeValue__DelegateSignature");
static_assert(sizeof(B_Nexus_Core_Underwater_Audio_C_BndEvt__B_Nexus_Core_Underwater_Audio_AudioBelowHaptics_K2Node_ComponentBoundEvent_0_OnAudioMultiEnvelopeValue__DelegateSignature) == 0x00000C, "Wrong size on B_Nexus_Core_Underwater_Audio_C_BndEvt__B_Nexus_Core_Underwater_Audio_AudioBelowHaptics_K2Node_ComponentBoundEvent_0_OnAudioMultiEnvelopeValue__DelegateSignature");
static_assert(offsetof(B_Nexus_Core_Underwater_Audio_C_BndEvt__B_Nexus_Core_Underwater_Audio_AudioBelowHaptics_K2Node_ComponentBoundEvent_0_OnAudioMultiEnvelopeValue__DelegateSignature, AverageEnvelopeValue) == 0x000000, "Member 'B_Nexus_Core_Underwater_Audio_C_BndEvt__B_Nexus_Core_Underwater_Audio_AudioBelowHaptics_K2Node_ComponentBoundEvent_0_OnAudioMultiEnvelopeValue__DelegateSignature::AverageEnvelopeValue' has a wrong offset!");
static_assert(offsetof(B_Nexus_Core_Underwater_Audio_C_BndEvt__B_Nexus_Core_Underwater_Audio_AudioBelowHaptics_K2Node_ComponentBoundEvent_0_OnAudioMultiEnvelopeValue__DelegateSignature, MaxEnvelope) == 0x000004, "Member 'B_Nexus_Core_Underwater_Audio_C_BndEvt__B_Nexus_Core_Underwater_Audio_AudioBelowHaptics_K2Node_ComponentBoundEvent_0_OnAudioMultiEnvelopeValue__DelegateSignature::MaxEnvelope' has a wrong offset!");
static_assert(offsetof(B_Nexus_Core_Underwater_Audio_C_BndEvt__B_Nexus_Core_Underwater_Audio_AudioBelowHaptics_K2Node_ComponentBoundEvent_0_OnAudioMultiEnvelopeValue__DelegateSignature, NumWaveInstances) == 0x000008, "Member 'B_Nexus_Core_Underwater_Audio_C_BndEvt__B_Nexus_Core_Underwater_Audio_AudioBelowHaptics_K2Node_ComponentBoundEvent_0_OnAudioMultiEnvelopeValue__DelegateSignature::NumWaveInstances' has a wrong offset!");

// Function B_Nexus_Core_Underwater_Audio.B_Nexus_Core_Underwater_Audio_C.ExecuteUbergraph_B_Nexus_Core_Underwater_Audio
// 0x0080 (0x0080 - 0x0000)
struct B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDynamicForceFeedbackAction                   Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetClosestListenerLocation_ListenerPosition; // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetClosestListenerLocation_ReturnValue;   // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Vector_Distance_ReturnValue;              // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_ComponentBoundEvent_AverageEnvelopeValue;   // 0x004C(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_ComponentBoundEvent_MaxEnvelope;            // 0x0050(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_NumWaveInstances;       // 0x0054(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue_1;            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IAudioParameterControllerInterface> CallFunc_SetFloatParameter_self_CastInput;         // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio) == 0x000008, "Wrong alignment on B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio");
static_assert(sizeof(B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio) == 0x000080, "Wrong size on B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio");
static_assert(offsetof(B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio, EntryPoint) == 0x000000, "Member 'B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio::EntryPoint' has a wrong offset!");
static_assert(offsetof(B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio, Temp_byte_Variable) == 0x000004, "Member 'B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000008, "Member 'B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000020, "Member 'B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio, CallFunc_MapRangeClamped_ReturnValue) == 0x000024, "Member 'B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio, CallFunc_GetClosestListenerLocation_ListenerPosition) == 0x000028, "Member 'B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio::CallFunc_GetClosestListenerLocation_ListenerPosition' has a wrong offset!");
static_assert(offsetof(B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio, CallFunc_GetClosestListenerLocation_ReturnValue) == 0x000040, "Member 'B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio::CallFunc_GetClosestListenerLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio, CallFunc_Vector_Distance_ReturnValue) == 0x000044, "Member 'B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000048, "Member 'B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio, K2Node_ComponentBoundEvent_AverageEnvelopeValue) == 0x00004C, "Member 'B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio::K2Node_ComponentBoundEvent_AverageEnvelopeValue' has a wrong offset!");
static_assert(offsetof(B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio, K2Node_ComponentBoundEvent_MaxEnvelope) == 0x000050, "Member 'B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio::K2Node_ComponentBoundEvent_MaxEnvelope' has a wrong offset!");
static_assert(offsetof(B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio, K2Node_ComponentBoundEvent_NumWaveInstances) == 0x000054, "Member 'B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio::K2Node_ComponentBoundEvent_NumWaveInstances' has a wrong offset!");
static_assert(offsetof(B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio, CallFunc_MapRangeClamped_ReturnValue_1) == 0x000058, "Member 'B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00005C, "Member 'B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio, CallFunc_SetFloatParameter_self_CastInput) == 0x000060, "Member 'B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio::CallFunc_SetFloatParameter_self_CastInput' has a wrong offset!");
static_assert(offsetof(B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio, CallFunc_RandomFloatInRange_ReturnValue) == 0x000070, "Member 'B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000074, "Member 'B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio, CallFunc_Less_FloatFloat_ReturnValue) == 0x000078, "Member 'B_Nexus_Core_Underwater_Audio_C_ExecuteUbergraph_B_Nexus_Core_Underwater_Audio::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");

// Function B_Nexus_Core_Underwater_Audio.B_Nexus_Core_Underwater_Audio_C.ConditionMet
// 0x0018 (0x0018 - 0x0000)
struct B_Nexus_Core_Underwater_Audio_C_ConditionMet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWaterSubsystem*                        CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCameraUnderwaterDepth_ReturnValue;     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Nexus_Core_Underwater_Audio_C_ConditionMet) == 0x000008, "Wrong alignment on B_Nexus_Core_Underwater_Audio_C_ConditionMet");
static_assert(sizeof(B_Nexus_Core_Underwater_Audio_C_ConditionMet) == 0x000018, "Wrong size on B_Nexus_Core_Underwater_Audio_C_ConditionMet");
static_assert(offsetof(B_Nexus_Core_Underwater_Audio_C_ConditionMet, ReturnValue) == 0x000000, "Member 'B_Nexus_Core_Underwater_Audio_C_ConditionMet::ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Nexus_Core_Underwater_Audio_C_ConditionMet, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000008, "Member 'B_Nexus_Core_Underwater_Audio_C_ConditionMet::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Nexus_Core_Underwater_Audio_C_ConditionMet, CallFunc_GetCameraUnderwaterDepth_ReturnValue) == 0x000010, "Member 'B_Nexus_Core_Underwater_Audio_C_ConditionMet::CallFunc_GetCameraUnderwaterDepth_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Nexus_Core_Underwater_Audio_C_ConditionMet, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000014, "Member 'B_Nexus_Core_Underwater_Audio_C_ConditionMet::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function B_Nexus_Core_Underwater_Audio.B_Nexus_Core_Underwater_Audio_C.ConditionMet_Position
// 0x0020 (0x0020 - 0x0000)
struct B_Nexus_Core_Underwater_Audio_C_ConditionMet_Position final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Nexus_Core_Underwater_Audio_C_ConditionMet_Position) == 0x000008, "Wrong alignment on B_Nexus_Core_Underwater_Audio_C_ConditionMet_Position");
static_assert(sizeof(B_Nexus_Core_Underwater_Audio_C_ConditionMet_Position) == 0x000020, "Wrong size on B_Nexus_Core_Underwater_Audio_C_ConditionMet_Position");
static_assert(offsetof(B_Nexus_Core_Underwater_Audio_C_ConditionMet_Position, Position) == 0x000000, "Member 'B_Nexus_Core_Underwater_Audio_C_ConditionMet_Position::Position' has a wrong offset!");
static_assert(offsetof(B_Nexus_Core_Underwater_Audio_C_ConditionMet_Position, ReturnValue) == 0x000018, "Member 'B_Nexus_Core_Underwater_Audio_C_ConditionMet_Position::ReturnValue' has a wrong offset!");

}

