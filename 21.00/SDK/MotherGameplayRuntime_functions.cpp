#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MotherGameplayRuntime

#include "Basic.hpp"

#include "MotherGameplayRuntime_classes.hpp"
#include "MotherGameplayRuntime_parameters.hpp"


namespace SDK
{

// Function MotherGameplayRuntime.ReactorGradeGameplayCue_ChargeUp.OnEndPointUpdated
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          FoundPoint                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AReactorGradeGameplayCue_ChargeUp::OnEndPointUpdated(const struct FVector& FoundPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReactorGradeGameplayCue_ChargeUp", "OnEndPointUpdated");

	Params::ReactorGradeGameplayCue_ChargeUp_OnEndPointUpdated Parms{};

	Parms.FoundPoint = std::move(FoundPoint);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MotherGameplayRuntime.ReactorGradeGameplayCue_ChargeUp.UpdateAimEndPoint
// (Final, Native, Public, BlueprintCallable)

void AReactorGradeGameplayCue_ChargeUp::UpdateAimEndPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReactorGradeGameplayCue_ChargeUp", "UpdateAimEndPoint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MotherGameplayRuntime.ReactorGradeGameplayCue_ChargeUp.GetFoundEndPoint
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector AReactorGradeGameplayCue_ChargeUp::GetFoundEndPoint() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReactorGradeGameplayCue_ChargeUp", "GetFoundEndPoint");

	Params::ReactorGradeGameplayCue_ChargeUp_GetFoundEndPoint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MotherGameplayRuntime.GravityGunTargetTrackingComponent.FindTargetActor
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           OwningPlayer                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TraceStart                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TraceEnd                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGravityGunTargetTrackingComponent::FindTargetActor(class AActor* OwningPlayer, const struct FVector& TraceStart, const struct FVector& TraceEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GravityGunTargetTrackingComponent", "FindTargetActor");

	Params::GravityGunTargetTrackingComponent_FindTargetActor Parms{};

	Parms.OwningPlayer = OwningPlayer;
	Parms.TraceStart = std::move(TraceStart);
	Parms.TraceEnd = std::move(TraceEnd);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MotherGameplayRuntime.GravityGunTargetTrackingComponent.FindTargetProjectile
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           OwningPlayer                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TraceStart                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TraceEnd                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TargetingRadius                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGravityGunTargetTrackingComponent::FindTargetProjectile(class AActor* OwningPlayer, const struct FVector& TraceStart, const struct FVector& TraceEnd, float TargetingRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GravityGunTargetTrackingComponent", "FindTargetProjectile");

	Params::GravityGunTargetTrackingComponent_FindTargetProjectile Parms{};

	Parms.OwningPlayer = OwningPlayer;
	Parms.TraceStart = std::move(TraceStart);
	Parms.TraceEnd = std::move(TraceEnd);
	Parms.TargetingRadius = TargetingRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MotherGameplayRuntime.GravityGunTargetTrackingComponent.IsValidTarget
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           OwningPlayer                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           PotentialTarget                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            ReasonForFailure                                       (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGravityGunTargetTrackingComponent::IsValidTarget(class AActor* OwningPlayer, class AActor* PotentialTarget, struct FGameplayTagContainer* ReasonForFailure)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GravityGunTargetTrackingComponent", "IsValidTarget");

	Params::GravityGunTargetTrackingComponent_IsValidTarget Parms{};

	Parms.OwningPlayer = OwningPlayer;
	Parms.PotentialTarget = PotentialTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ReasonForFailure != nullptr)
		*ReasonForFailure = std::move(Parms.ReasonForFailure);

	return Parms.ReturnValue;
}


// Function MotherGameplayRuntime.PropGunFunctionLibrary.UpdatePropPreviewPosition
// (Final, Native, Static, Private, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class USceneComponent*                  PropPreviewComponent                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortPawn*                        AttachPawn                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             AttachSocket                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMeshComponent*           WeaponMesh                                             (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          DesiredRelativeTransform                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinimumZOffset                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         RelativeRotation                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          CachedScale                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InterpSpeed                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPropGunFunctionLibrary::UpdatePropPreviewPosition(class USceneComponent* PropPreviewComponent, const float DeltaTime, const class AFortPawn* AttachPawn, const class FName AttachSocket, const class USkeletalMeshComponent* WeaponMesh, const struct FVector& DesiredRelativeTransform, const float MinimumZOffset, const struct FRotator& RelativeRotation, const struct FVector& CachedScale, const float InterpSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PropGunFunctionLibrary", "UpdatePropPreviewPosition");

	Params::PropGunFunctionLibrary_UpdatePropPreviewPosition Parms{};

	Parms.PropPreviewComponent = PropPreviewComponent;
	Parms.DeltaTime = DeltaTime;
	Parms.AttachPawn = AttachPawn;
	Parms.AttachSocket = AttachSocket;
	Parms.WeaponMesh = WeaponMesh;
	Parms.DesiredRelativeTransform = std::move(DesiredRelativeTransform);
	Parms.MinimumZOffset = MinimumZOffset;
	Parms.RelativeRotation = std::move(RelativeRotation);
	Parms.CachedScale = std::move(CachedScale);
	Parms.InterpSpeed = InterpSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

