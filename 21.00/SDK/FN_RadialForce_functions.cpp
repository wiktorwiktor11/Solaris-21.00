#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FN_RadialForce

#include "Basic.hpp"

#include "FN_RadialForce_classes.hpp"
#include "FN_RadialForce_parameters.hpp"


namespace SDK
{

// Function FN_RadialForce.FN_RadialForce_C.ExecuteUbergraph_FN_RadialForce
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AFN_RadialForce_C::ExecuteUbergraph_FN_RadialForce(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FN_RadialForce_C", "ExecuteUbergraph_FN_RadialForce");

	Params::FN_RadialForce_C_ExecuteUbergraph_FN_RadialForce Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FN_RadialForce.FN_RadialForce_C.NewFunction_0
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Roll                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Scale_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor)

struct FTransform AFN_RadialForce_C::NewFunction_0(float Roll, float Scale_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FN_RadialForce_C", "NewFunction_0");

	Params::FN_RadialForce_C_NewFunction_0 Parms{};

	Parms.Roll = Roll;
	Parms.Scale_0 = Scale_0;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FN_RadialForce.FN_RadialForce_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AFN_RadialForce_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FN_RadialForce_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FN_RadialForce.FN_RadialForce_C.Timeline_0__FinishedFunc
// (BlueprintEvent)

void AFN_RadialForce_C::Timeline_0__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FN_RadialForce_C", "Timeline_0__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FN_RadialForce.FN_RadialForce_C.Timeline_0__UpdateFunc
// (BlueprintEvent)

void AFN_RadialForce_C::Timeline_0__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FN_RadialForce_C", "Timeline_0__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}

}

