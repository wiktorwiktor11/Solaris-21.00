#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UnderwaterAudioComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function UnderwaterAudioComponent.UnderwaterAudioComponent_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct UnderwaterAudioComponent_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UnderwaterAudioComponent_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on UnderwaterAudioComponent_C_ReceiveEndPlay");
static_assert(sizeof(UnderwaterAudioComponent_C_ReceiveEndPlay) == 0x000001, "Wrong size on UnderwaterAudioComponent_C_ReceiveEndPlay");
static_assert(offsetof(UnderwaterAudioComponent_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'UnderwaterAudioComponent_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function UnderwaterAudioComponent.UnderwaterAudioComponent_C.On Camera Underwater State Changed
// 0x0008 (0x0008 - 0x0000)
struct UnderwaterAudioComponent_C_On_Camera_Underwater_State_Changed final
{
public:
	bool                                          bIsUnderWater;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DepthUnderwater;                                   // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UnderwaterAudioComponent_C_On_Camera_Underwater_State_Changed) == 0x000004, "Wrong alignment on UnderwaterAudioComponent_C_On_Camera_Underwater_State_Changed");
static_assert(sizeof(UnderwaterAudioComponent_C_On_Camera_Underwater_State_Changed) == 0x000008, "Wrong size on UnderwaterAudioComponent_C_On_Camera_Underwater_State_Changed");
static_assert(offsetof(UnderwaterAudioComponent_C_On_Camera_Underwater_State_Changed, bIsUnderWater) == 0x000000, "Member 'UnderwaterAudioComponent_C_On_Camera_Underwater_State_Changed::bIsUnderWater' has a wrong offset!");
static_assert(offsetof(UnderwaterAudioComponent_C_On_Camera_Underwater_State_Changed, DepthUnderwater) == 0x000004, "Member 'UnderwaterAudioComponent_C_On_Camera_Underwater_State_Changed::DepthUnderwater' has a wrong offset!");

// Function UnderwaterAudioComponent.UnderwaterAudioComponent_C.ExecuteUbergraph_UnderwaterAudioComponent
// 0x0040 (0x0040 - 0x0000)
struct UnderwaterAudioComponent_C_ExecuteUbergraph_UnderwaterAudioComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasMultipleLocalPlayers_ReturnValue;      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool bIsUnderWater, float DepthUnderwater)> K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bIsUnderWater;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_DepthUnderwater;                // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        CallFunc_SpawnSound2D_ReturnValue;                 // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWaterSubsystem*                        CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAudioComponentPlayState                      CallFunc_GetPlayState_ReturnValue;                 // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UnderwaterAudioComponent_C_ExecuteUbergraph_UnderwaterAudioComponent) == 0x000008, "Wrong alignment on UnderwaterAudioComponent_C_ExecuteUbergraph_UnderwaterAudioComponent");
static_assert(sizeof(UnderwaterAudioComponent_C_ExecuteUbergraph_UnderwaterAudioComponent) == 0x000040, "Wrong size on UnderwaterAudioComponent_C_ExecuteUbergraph_UnderwaterAudioComponent");
static_assert(offsetof(UnderwaterAudioComponent_C_ExecuteUbergraph_UnderwaterAudioComponent, EntryPoint) == 0x000000, "Member 'UnderwaterAudioComponent_C_ExecuteUbergraph_UnderwaterAudioComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(UnderwaterAudioComponent_C_ExecuteUbergraph_UnderwaterAudioComponent, CallFunc_HasMultipleLocalPlayers_ReturnValue) == 0x000004, "Member 'UnderwaterAudioComponent_C_ExecuteUbergraph_UnderwaterAudioComponent::CallFunc_HasMultipleLocalPlayers_ReturnValue' has a wrong offset!");
static_assert(offsetof(UnderwaterAudioComponent_C_ExecuteUbergraph_UnderwaterAudioComponent, CallFunc_IsValid_ReturnValue) == 0x000005, "Member 'UnderwaterAudioComponent_C_ExecuteUbergraph_UnderwaterAudioComponent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(UnderwaterAudioComponent_C_ExecuteUbergraph_UnderwaterAudioComponent, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'UnderwaterAudioComponent_C_ExecuteUbergraph_UnderwaterAudioComponent::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(UnderwaterAudioComponent_C_ExecuteUbergraph_UnderwaterAudioComponent, K2Node_CustomEvent_bIsUnderWater) == 0x000014, "Member 'UnderwaterAudioComponent_C_ExecuteUbergraph_UnderwaterAudioComponent::K2Node_CustomEvent_bIsUnderWater' has a wrong offset!");
static_assert(offsetof(UnderwaterAudioComponent_C_ExecuteUbergraph_UnderwaterAudioComponent, K2Node_CustomEvent_DepthUnderwater) == 0x000018, "Member 'UnderwaterAudioComponent_C_ExecuteUbergraph_UnderwaterAudioComponent::K2Node_CustomEvent_DepthUnderwater' has a wrong offset!");
static_assert(offsetof(UnderwaterAudioComponent_C_ExecuteUbergraph_UnderwaterAudioComponent, CallFunc_SpawnSound2D_ReturnValue) == 0x000020, "Member 'UnderwaterAudioComponent_C_ExecuteUbergraph_UnderwaterAudioComponent::CallFunc_SpawnSound2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(UnderwaterAudioComponent_C_ExecuteUbergraph_UnderwaterAudioComponent, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000028, "Member 'UnderwaterAudioComponent_C_ExecuteUbergraph_UnderwaterAudioComponent::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(UnderwaterAudioComponent_C_ExecuteUbergraph_UnderwaterAudioComponent, CallFunc_IsValid_ReturnValue_1) == 0x000030, "Member 'UnderwaterAudioComponent_C_ExecuteUbergraph_UnderwaterAudioComponent::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UnderwaterAudioComponent_C_ExecuteUbergraph_UnderwaterAudioComponent, CallFunc_GetPlayState_ReturnValue) == 0x000031, "Member 'UnderwaterAudioComponent_C_ExecuteUbergraph_UnderwaterAudioComponent::CallFunc_GetPlayState_ReturnValue' has a wrong offset!");
static_assert(offsetof(UnderwaterAudioComponent_C_ExecuteUbergraph_UnderwaterAudioComponent, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000032, "Member 'UnderwaterAudioComponent_C_ExecuteUbergraph_UnderwaterAudioComponent::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(UnderwaterAudioComponent_C_ExecuteUbergraph_UnderwaterAudioComponent, CallFunc_RandomFloatInRange_ReturnValue) == 0x000034, "Member 'UnderwaterAudioComponent_C_ExecuteUbergraph_UnderwaterAudioComponent::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(UnderwaterAudioComponent_C_ExecuteUbergraph_UnderwaterAudioComponent, K2Node_Event_EndPlayReason) == 0x000038, "Member 'UnderwaterAudioComponent_C_ExecuteUbergraph_UnderwaterAudioComponent::K2Node_Event_EndPlayReason' has a wrong offset!");

}

