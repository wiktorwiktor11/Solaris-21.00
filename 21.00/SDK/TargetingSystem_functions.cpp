#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TargetingSystem

#include "Basic.hpp"

#include "TargetingSystem_classes.hpp"
#include "TargetingSystem_parameters.hpp"


namespace SDK
{

// Function TargetingSystem.AsyncAction_PerformTargeting.PerformFilteringRequest
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           SourceActor_0                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTargetingPreset*                 TargetingPreset_0                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseAsyncTargeting_0                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   InTargets                                              (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class UAsyncAction_PerformTargeting*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAsyncAction_PerformTargeting* UAsyncAction_PerformTargeting::PerformFilteringRequest(class AActor* SourceActor_0, class UTargetingPreset* TargetingPreset_0, bool bUseAsyncTargeting_0, const TArray<class AActor*>& InTargets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AsyncAction_PerformTargeting", "PerformFilteringRequest");

	Params::AsyncAction_PerformTargeting_PerformFilteringRequest Parms{};

	Parms.SourceActor_0 = SourceActor_0;
	Parms.TargetingPreset_0 = TargetingPreset_0;
	Parms.bUseAsyncTargeting_0 = bUseAsyncTargeting_0;
	Parms.InTargets = std::move(InTargets);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TargetingSystem.AsyncAction_PerformTargeting.PerformTargetingRequest
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           SourceActor_0                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTargetingPreset*                 TargetingPreset_0                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseAsyncTargeting_0                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAsyncAction_PerformTargeting*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAsyncAction_PerformTargeting* UAsyncAction_PerformTargeting::PerformTargetingRequest(class AActor* SourceActor_0, class UTargetingPreset* TargetingPreset_0, bool bUseAsyncTargeting_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AsyncAction_PerformTargeting", "PerformTargetingRequest");

	Params::AsyncAction_PerformTargeting_PerformTargetingRequest Parms{};

	Parms.SourceActor_0 = SourceActor_0;
	Parms.TargetingPreset_0 = TargetingPreset_0;
	Parms.bUseAsyncTargeting_0 = bUseAsyncTargeting_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TargetingSystem.TargetingSelectionTask_Trace.GetAdditionalActorsToIgnore
// (Native, Event, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// struct FTargetingRequestHandle          TargetingHandle                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   OutAdditionalActorsToIgnore                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UTargetingSelectionTask_Trace::GetAdditionalActorsToIgnore(const struct FTargetingRequestHandle& TargetingHandle, TArray<class AActor*>* OutAdditionalActorsToIgnore) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetingSelectionTask_Trace", "GetAdditionalActorsToIgnore");

	Params::TargetingSelectionTask_Trace_GetAdditionalActorsToIgnore Parms{};

	Parms.TargetingHandle = std::move(TargetingHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAdditionalActorsToIgnore != nullptr)
		*OutAdditionalActorsToIgnore = std::move(Parms.OutAdditionalActorsToIgnore);
}


// Function TargetingSystem.TargetingSelectionTask_Trace.GetSourceLocation
// (Native, Event, Protected, HasOutParams, HasDefaults, BlueprintEvent, Const)
// Parameters:
// struct FTargetingRequestHandle          TargetingHandle                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UTargetingSelectionTask_Trace::GetSourceLocation(const struct FTargetingRequestHandle& TargetingHandle) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetingSelectionTask_Trace", "GetSourceLocation");

	Params::TargetingSelectionTask_Trace_GetSourceLocation Parms{};

	Parms.TargetingHandle = std::move(TargetingHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TargetingSystem.TargetingSelectionTask_Trace.GetSourceOffset
// (Native, Event, Protected, HasOutParams, HasDefaults, BlueprintEvent, Const)
// Parameters:
// struct FTargetingRequestHandle          TargetingHandle                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UTargetingSelectionTask_Trace::GetSourceOffset(const struct FTargetingRequestHandle& TargetingHandle) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetingSelectionTask_Trace", "GetSourceOffset");

	Params::TargetingSelectionTask_Trace_GetSourceOffset Parms{};

	Parms.TargetingHandle = std::move(TargetingHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TargetingSystem.TargetingSelectionTask_Trace.GetSweptTraceRadius
// (Native, Event, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// struct FTargetingRequestHandle          TargetingHandle                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTargetingSelectionTask_Trace::GetSweptTraceRadius(const struct FTargetingRequestHandle& TargetingHandle) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetingSelectionTask_Trace", "GetSweptTraceRadius");

	Params::TargetingSelectionTask_Trace_GetSweptTraceRadius Parms{};

	Parms.TargetingHandle = std::move(TargetingHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TargetingSystem.TargetingSelectionTask_Trace.GetTraceDirection
// (Native, Event, Protected, HasOutParams, HasDefaults, BlueprintEvent, Const)
// Parameters:
// struct FTargetingRequestHandle          TargetingHandle                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UTargetingSelectionTask_Trace::GetTraceDirection(const struct FTargetingRequestHandle& TargetingHandle) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetingSelectionTask_Trace", "GetTraceDirection");

	Params::TargetingSelectionTask_Trace_GetTraceDirection Parms{};

	Parms.TargetingHandle = std::move(TargetingHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TargetingSystem.TargetingSelectionTask_Trace.GetTraceLength
// (Native, Event, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// struct FTargetingRequestHandle          TargetingHandle                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTargetingSelectionTask_Trace::GetTraceLength(const struct FTargetingRequestHandle& TargetingHandle) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetingSelectionTask_Trace", "GetTraceLength");

	Params::TargetingSelectionTask_Trace_GetTraceLength Parms{};

	Parms.TargetingHandle = std::move(TargetingHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TargetingSystem.TargetingSelectionTask_AOE.GetSourceLocation
// (Native, Event, Protected, HasOutParams, HasDefaults, BlueprintEvent, Const)
// Parameters:
// struct FTargetingRequestHandle          TargetingHandle                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UTargetingSelectionTask_AOE::GetSourceLocation(const struct FTargetingRequestHandle& TargetingHandle) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetingSelectionTask_AOE", "GetSourceLocation");

	Params::TargetingSelectionTask_AOE_GetSourceLocation Parms{};

	Parms.TargetingHandle = std::move(TargetingHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TargetingSystem.TargetingSelectionTask_AOE.GetSourceOffset
// (Native, Event, Protected, HasOutParams, HasDefaults, BlueprintEvent, Const)
// Parameters:
// struct FTargetingRequestHandle          TargetingHandle                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UTargetingSelectionTask_AOE::GetSourceOffset(const struct FTargetingRequestHandle& TargetingHandle) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetingSelectionTask_AOE", "GetSourceOffset");

	Params::TargetingSelectionTask_AOE_GetSourceOffset Parms{};

	Parms.TargetingHandle = std::move(TargetingHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TargetingSystem.TargetingSubsystem.GetTargetingResults
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FTargetingRequestHandle          TargetingHandle                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)
// TArray<struct FHitResult>               OutTargets                                             (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UTargetingSubsystem::GetTargetingResults(const struct FTargetingRequestHandle& TargetingHandle, TArray<struct FHitResult>* OutTargets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetingSubsystem", "GetTargetingResults");

	Params::TargetingSubsystem_GetTargetingResults Parms{};

	Parms.TargetingHandle = std::move(TargetingHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTargets != nullptr)
		*OutTargets = std::move(Parms.OutTargets);
}


// Function TargetingSystem.TargetingSubsystem.GetTargetingResultsActors
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FTargetingRequestHandle          TargetingHandle                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   Targets                                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UTargetingSubsystem::GetTargetingResultsActors(const struct FTargetingRequestHandle& TargetingHandle, TArray<class AActor*>* Targets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetingSubsystem", "GetTargetingResultsActors");

	Params::TargetingSubsystem_GetTargetingResultsActors Parms{};

	Parms.TargetingHandle = std::move(TargetingHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Targets != nullptr)
		*Targets = std::move(Parms.Targets);
}


// Function TargetingSystem.TargetingSubsystem.GetTargetingSourceContext
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FTargetingRequestHandle          TargetingHandle                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FTargetingSourceContext          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FTargetingSourceContext UTargetingSubsystem::GetTargetingSourceContext(const struct FTargetingRequestHandle& TargetingHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetingSubsystem", "GetTargetingSourceContext");

	Params::TargetingSubsystem_GetTargetingSourceContext Parms{};

	Parms.TargetingHandle = std::move(TargetingHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TargetingSystem.TargetingSubsystem.StartAsyncTargetingRequest
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UTargetingPreset*                 TargetingPreset                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTargetingSourceContext          InSourceContext                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FTargetingRequestHandle& TargetingRequestHandle)>CompletionDynamicDelegate                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTargetingSubsystem::StartAsyncTargetingRequest(const class UTargetingPreset* TargetingPreset, const struct FTargetingSourceContext& InSourceContext, TDelegate<void(const struct FTargetingRequestHandle& TargetingRequestHandle)> CompletionDynamicDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetingSubsystem", "StartAsyncTargetingRequest");

	Params::TargetingSubsystem_StartAsyncTargetingRequest Parms{};

	Parms.TargetingPreset = TargetingPreset;
	Parms.InSourceContext = std::move(InSourceContext);
	Parms.CompletionDynamicDelegate = CompletionDynamicDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TargetingSystem.TargetingSubsystem.ExecuteTargetingRequest
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// class UTargetingPreset*                 TargetingPreset                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTargetingSourceContext          InSourceContext                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FTargetingRequestHandle& TargetingRequestHandle)>CompletionDynamicDelegate                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTargetingSubsystem::ExecuteTargetingRequest(const class UTargetingPreset* TargetingPreset, const struct FTargetingSourceContext& InSourceContext, TDelegate<void(const struct FTargetingRequestHandle& TargetingRequestHandle)> CompletionDynamicDelegate) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetingSubsystem", "ExecuteTargetingRequest");

	Params::TargetingSubsystem_ExecuteTargetingRequest Parms{};

	Parms.TargetingPreset = TargetingPreset;
	Parms.InSourceContext = std::move(InSourceContext);
	Parms.CompletionDynamicDelegate = CompletionDynamicDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

