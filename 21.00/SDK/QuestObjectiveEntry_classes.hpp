#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: QuestObjectiveEntry

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteUI_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass QuestObjectiveEntry.QuestObjectiveEntry_C
// 0x0060 (0x0360 - 0x0300)
class UQuestObjectiveEntry_C final : public UFortQuestObjectiveEntry
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0300(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Appear;                                            // 0x0308(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UProgressBar*                           _ProgressBar__Quest_Progress;                      // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               BulletOverlay;                                     // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 CheckMark;                                         // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       ProgressValue;                                     // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 QuestHudIcon;                                      // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       TaskName;                                          // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UFortQuestObjectiveInfo*                TrackedObjective;                                  // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LerpStartTime;                                     // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LerpTime;                                          // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DisplayTime;                                       // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AchievedCount;                                     // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LastNotifiedCount;                                 // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AppearAnimationFinished();
	void ExecuteUbergraph_QuestObjectiveEntry(int32 EntryPoint);
	void LerpProgress();
	void ObjectiveInfoSet(const class UFortQuestObjectiveInfo* ObjectiveInfo, bool IsAnnouncement, bool bQuestCompleted);
	void SetData(class UObject* InData);
	void StartDisplayingObjective();
	void UpdateLerp();
	void UpdateProgress();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"QuestObjectiveEntry_C">();
	}
	static class UQuestObjectiveEntry_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestObjectiveEntry_C>();
	}
};
static_assert(alignof(UQuestObjectiveEntry_C) == 0x000008, "Wrong alignment on UQuestObjectiveEntry_C");
static_assert(sizeof(UQuestObjectiveEntry_C) == 0x000360, "Wrong size on UQuestObjectiveEntry_C");
static_assert(offsetof(UQuestObjectiveEntry_C, UberGraphFrame) == 0x000300, "Member 'UQuestObjectiveEntry_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UQuestObjectiveEntry_C, Appear) == 0x000308, "Member 'UQuestObjectiveEntry_C::Appear' has a wrong offset!");
static_assert(offsetof(UQuestObjectiveEntry_C, _ProgressBar__Quest_Progress) == 0x000310, "Member 'UQuestObjectiveEntry_C::_ProgressBar__Quest_Progress' has a wrong offset!");
static_assert(offsetof(UQuestObjectiveEntry_C, BulletOverlay) == 0x000318, "Member 'UQuestObjectiveEntry_C::BulletOverlay' has a wrong offset!");
static_assert(offsetof(UQuestObjectiveEntry_C, CheckMark) == 0x000320, "Member 'UQuestObjectiveEntry_C::CheckMark' has a wrong offset!");
static_assert(offsetof(UQuestObjectiveEntry_C, ProgressValue) == 0x000328, "Member 'UQuestObjectiveEntry_C::ProgressValue' has a wrong offset!");
static_assert(offsetof(UQuestObjectiveEntry_C, QuestHudIcon) == 0x000330, "Member 'UQuestObjectiveEntry_C::QuestHudIcon' has a wrong offset!");
static_assert(offsetof(UQuestObjectiveEntry_C, TaskName) == 0x000338, "Member 'UQuestObjectiveEntry_C::TaskName' has a wrong offset!");
static_assert(offsetof(UQuestObjectiveEntry_C, TrackedObjective) == 0x000340, "Member 'UQuestObjectiveEntry_C::TrackedObjective' has a wrong offset!");
static_assert(offsetof(UQuestObjectiveEntry_C, LerpStartTime) == 0x000348, "Member 'UQuestObjectiveEntry_C::LerpStartTime' has a wrong offset!");
static_assert(offsetof(UQuestObjectiveEntry_C, LerpTime) == 0x00034C, "Member 'UQuestObjectiveEntry_C::LerpTime' has a wrong offset!");
static_assert(offsetof(UQuestObjectiveEntry_C, DisplayTime) == 0x000350, "Member 'UQuestObjectiveEntry_C::DisplayTime' has a wrong offset!");
static_assert(offsetof(UQuestObjectiveEntry_C, AchievedCount) == 0x000354, "Member 'UQuestObjectiveEntry_C::AchievedCount' has a wrong offset!");
static_assert(offsetof(UQuestObjectiveEntry_C, LastNotifiedCount) == 0x000358, "Member 'UQuestObjectiveEntry_C::LastNotifiedCount' has a wrong offset!");

}

