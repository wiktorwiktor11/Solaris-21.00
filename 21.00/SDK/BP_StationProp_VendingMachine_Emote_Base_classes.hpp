#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_StationProp_VendingMachine_Emote_Base

#include "Basic.hpp"

#include "BP_StationProp_Parent_classes.hpp"
#include "Engine_structs.hpp"
#include "VendingMachineMaterialStyle_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "VendingDamageResponse_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_StationProp_VendingMachine_Emote_Base.BP_StationProp_VendingMachine_Emote_Base_C
// 0x03E0 (0x12C0 - 0x0EE0)
class ABP_StationProp_VendingMachine_Emote_Base_C : public ABP_StationProp_Parent_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_StationProp_VendingMachine_Emote_Base_C; // 0x0EE0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        InteractSoundComponent;                            // 0x0EE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortMaterialStyleComponent*            FortMaterialStyleComponent;                        // 0x0EF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Loot_Effect_Vending;                             // 0x0EF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RevealEmoteScreen_TransientDistortion_C06CACA84B2AB600B2D6E582391384F0; // 0x0F00(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RevealEmoteScreen_EmoteVisibility_C06CACA84B2AB600B2D6E582391384F0; // 0x0F04(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            RevealEmoteScreen__Direction_C06CACA84B2AB600B2D6E582391384F0; // 0x0F08(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F09[0x7];                                      // 0x0F09(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     RevealEmoteScreen;                                 // 0x0F10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         From_B_to_A_Cloud_and_Rainbow_C58D9A5D4B1B50B8A61AFCA95C864749; // 0x0F18(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         From_B_to_A_Background_Change_C58D9A5D4B1B50B8A61AFCA95C864749; // 0x0F1C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         From_B_to_A_Emote_Swap_C58D9A5D4B1B50B8A61AFCA95C864749; // 0x0F20(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         From_B_to_A_Distortion_C58D9A5D4B1B50B8A61AFCA95C864749; // 0x0F24(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            From_B_to_A__Direction_C58D9A5D4B1B50B8A61AFCA95C864749; // 0x0F28(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F29[0x7];                                      // 0x0F29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     From_B_to_A;                                       // 0x0F30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         From_A_to_B_Clour_and_Rainbow_E243CD0148F122049BB5E2A73F3AA7B6; // 0x0F38(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         From_A_to_B_Background_Change_E243CD0148F122049BB5E2A73F3AA7B6; // 0x0F3C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         From_A_to_B_Emote_Swap_E243CD0148F122049BB5E2A73F3AA7B6; // 0x0F40(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         From_A_to_B_Distortion_E243CD0148F122049BB5E2A73F3AA7B6; // 0x0F44(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            From_A_to_B__Direction_E243CD0148F122049BB5E2A73F3AA7B6; // 0x0F48(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F49[0x7];                                      // 0x0F49(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     From_A_to_B;                                       // 0x0F50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WobbleTimeline_Flash_1BFFBC54438F80E9D6B6739417BC29F3; // 0x0F58(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WobbleTimeline_WobbleOverTime_1BFFBC54438F80E9D6B6739417BC29F3; // 0x0F5C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            WobbleTimeline__Direction_1BFFBC54438F80E9D6B6739417BC29F3; // 0x0F60(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F61[0x7];                                      // 0x0F61(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     WobbleTimeline;                                    // 0x0F68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Vend_Succeeded_Sound;                              // 0x0F70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Ambient_Sound_0;                                   // 0x0F78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               InitialRelativeRotation;                           // 0x0F80(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               Monitor_Mat;                                       // 0x0F98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   MonitorMaterialParamName;                          // 0x0FA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MaterialEffectsEnabled;                            // 0x0FA4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FA5[0x3];                                      // 0x0FA5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortMaterialStyleSet*                  MaterialStyleSet;                                  // 0x0FA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           StyleSwitchDurationHandle;                         // 0x0FB0(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVendingMachineMaterialStyle           MaterialStyleA;                                    // 0x0FB8(0x0050)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVendingMachineMaterialStyle           MaterialStyleB;                                    // 0x1008(0x0050)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         TriggerSpeechOnTakeDamage;                         // 0x1058(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         TriggerSpeechOnLocalPlayerDance;                   // 0x1080(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         TriggerEmoteOnLocalPlayerDance;                    // 0x10A8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         TriggerEmoteOnTakeDamage;                          // 0x10D0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         RequiredPlayerDanceDurationToReact;                // 0x10F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistortionMultiplier;                              // 0x10FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           PlayerDanceReactionTimerHandle;                    // 0x1100(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FText                                   OnPlayerDanceMessage;                              // 0x1108(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         DamageMessageCooldown;                             // 0x1120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   PlayerDanceMatStyleName;                           // 0x1124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         TriggerAudioOnScreenTransition;                    // 0x1128(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         TriggerAudioOnEmote;                               // 0x1150(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         LastDamageMessageTime;                             // 0x1178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_117C[0x4];                                     // 0x117C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   LastDisplayedTakeDamageMessage;                    // 0x1180(0x0018)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	EDialogMarkerInteractionState                 LastDialogMarkerInteractionState;                  // 0x1198(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1199[0x3];                                     // 0x1199(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LastRequestedDamageStyle;                          // 0x119C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             OnRevealScreenSound;                               // 0x11A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             OnHideScreenSound;                                 // 0x11A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             LastPlayedEmoteAudio;                              // 0x11B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EmoteScreenRevealed;                               // 0x11B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11B9[0x7];                                     // 0x11B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             OnPlayerInteractSound;                             // 0x11C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<TSoftObjectPtr<class UFortMontageItemDefinitionBase>, class FName> SpecificPlayerDanceMatStyleNames;                  // 0x11C8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<TSoftObjectPtr<class UFortMontageItemDefinitionBase>, class FText> SpecificOnPlayerDanceMessages;                     // 0x1218(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AFortPlayerController*                  LastInteractingPlayerController;                   // 0x1268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Current_Reaction_Audio;                            // 0x1270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        OnRevealAudio;                                     // 0x1278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        OnHideAudio;                                       // 0x1280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVendingDamageResponse>         DamageResponses_Light;                             // 0x1288(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVendingDamageResponse>         DamageResponses_Med;                               // 0x1298(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVendingDamageResponse>         DamageResponses_Heavy;                             // 0x12A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         LastDamageResponseThreshold;                       // 0x12B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Added_CA0C20DD44E949E0334456BD7493231A();
	bool BlueprintOnLocalInteract(class AFortPlayerPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted);
	void ChangeEmote(const struct FVendingMachineMaterialStyle& DesiredStyle);
	void ChangeEmoteScreenRevealed(bool Revealed);
	void Event_On_Dialog_Marker_Interaction_State_Changed(const EDialogMarkerInteractionState CurrentInteractionState, const class AFortPlayerController* InteractingController);
	void Event_On_Receive_Conversation_Message(const class AFortPlayerController* LocalPlayerController, const struct FClientConversationMessagePayload& Message);
	void Event_Player_Dance_For_Required_Duration();
	void ExecuteUbergraph_BP_StationProp_VendingMachine_Emote_Base(int32 EntryPoint);
	void From_A_to_B__FinishedFunc();
	void From_A_to_B__UpdateFunc();
	void From_B_to_A__FinishedFunc();
	void From_B_to_A__UpdateFunc();
	void HandleLocalPlayerInteract();
	void HandleReceiveConversationMessage(const struct FClientConversationMessagePayload& ClientConversationMessagePayload);
	void HandleReceiveDamage(class AFortPawn* InstigatingPawn);
	void OnDamagePlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void PlayServiceUsedEffects(class AFortPlayerController* PlayerController);
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void Reset_A_Defaults();
	void ResetADefaults();
	void RevealEmoteScreen__FinishedFunc();
	void RevealEmoteScreen__UpdateFunc();
	void SetMaterialTextureParameters();
	void StopReactionAudio(float FadeOutDuration);
	void TriggerChangeMaterialStyle(const struct FVendingMachineMaterialStyle& MaterialStyleData);
	void TriggerDanceReaction();
	void TriggerVendEffects();
	void UpdateMaterialTransition(float Distortion, float EmoteSwap, float BackgroundChange, float Cloud_and_Rainbow);
	void WobbleTimeline__FinishedFunc();
	void WobbleTimeline__UpdateFunc();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_StationProp_VendingMachine_Emote_Base_C">();
	}
	static class ABP_StationProp_VendingMachine_Emote_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_StationProp_VendingMachine_Emote_Base_C>();
	}
};
static_assert(alignof(ABP_StationProp_VendingMachine_Emote_Base_C) == 0x000008, "Wrong alignment on ABP_StationProp_VendingMachine_Emote_Base_C");
static_assert(sizeof(ABP_StationProp_VendingMachine_Emote_Base_C) == 0x0012C0, "Wrong size on ABP_StationProp_VendingMachine_Emote_Base_C");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, UberGraphFrame_BP_StationProp_VendingMachine_Emote_Base_C) == 0x000EE0, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::UberGraphFrame_BP_StationProp_VendingMachine_Emote_Base_C' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, InteractSoundComponent) == 0x000EE8, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::InteractSoundComponent' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, FortMaterialStyleComponent) == 0x000EF0, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::FortMaterialStyleComponent' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, P_Loot_Effect_Vending) == 0x000EF8, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::P_Loot_Effect_Vending' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, RevealEmoteScreen_TransientDistortion_C06CACA84B2AB600B2D6E582391384F0) == 0x000F00, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::RevealEmoteScreen_TransientDistortion_C06CACA84B2AB600B2D6E582391384F0' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, RevealEmoteScreen_EmoteVisibility_C06CACA84B2AB600B2D6E582391384F0) == 0x000F04, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::RevealEmoteScreen_EmoteVisibility_C06CACA84B2AB600B2D6E582391384F0' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, RevealEmoteScreen__Direction_C06CACA84B2AB600B2D6E582391384F0) == 0x000F08, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::RevealEmoteScreen__Direction_C06CACA84B2AB600B2D6E582391384F0' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, RevealEmoteScreen) == 0x000F10, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::RevealEmoteScreen' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, From_B_to_A_Cloud_and_Rainbow_C58D9A5D4B1B50B8A61AFCA95C864749) == 0x000F18, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::From_B_to_A_Cloud_and_Rainbow_C58D9A5D4B1B50B8A61AFCA95C864749' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, From_B_to_A_Background_Change_C58D9A5D4B1B50B8A61AFCA95C864749) == 0x000F1C, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::From_B_to_A_Background_Change_C58D9A5D4B1B50B8A61AFCA95C864749' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, From_B_to_A_Emote_Swap_C58D9A5D4B1B50B8A61AFCA95C864749) == 0x000F20, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::From_B_to_A_Emote_Swap_C58D9A5D4B1B50B8A61AFCA95C864749' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, From_B_to_A_Distortion_C58D9A5D4B1B50B8A61AFCA95C864749) == 0x000F24, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::From_B_to_A_Distortion_C58D9A5D4B1B50B8A61AFCA95C864749' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, From_B_to_A__Direction_C58D9A5D4B1B50B8A61AFCA95C864749) == 0x000F28, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::From_B_to_A__Direction_C58D9A5D4B1B50B8A61AFCA95C864749' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, From_B_to_A) == 0x000F30, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::From_B_to_A' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, From_A_to_B_Clour_and_Rainbow_E243CD0148F122049BB5E2A73F3AA7B6) == 0x000F38, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::From_A_to_B_Clour_and_Rainbow_E243CD0148F122049BB5E2A73F3AA7B6' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, From_A_to_B_Background_Change_E243CD0148F122049BB5E2A73F3AA7B6) == 0x000F3C, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::From_A_to_B_Background_Change_E243CD0148F122049BB5E2A73F3AA7B6' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, From_A_to_B_Emote_Swap_E243CD0148F122049BB5E2A73F3AA7B6) == 0x000F40, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::From_A_to_B_Emote_Swap_E243CD0148F122049BB5E2A73F3AA7B6' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, From_A_to_B_Distortion_E243CD0148F122049BB5E2A73F3AA7B6) == 0x000F44, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::From_A_to_B_Distortion_E243CD0148F122049BB5E2A73F3AA7B6' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, From_A_to_B__Direction_E243CD0148F122049BB5E2A73F3AA7B6) == 0x000F48, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::From_A_to_B__Direction_E243CD0148F122049BB5E2A73F3AA7B6' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, From_A_to_B) == 0x000F50, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::From_A_to_B' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, WobbleTimeline_Flash_1BFFBC54438F80E9D6B6739417BC29F3) == 0x000F58, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::WobbleTimeline_Flash_1BFFBC54438F80E9D6B6739417BC29F3' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, WobbleTimeline_WobbleOverTime_1BFFBC54438F80E9D6B6739417BC29F3) == 0x000F5C, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::WobbleTimeline_WobbleOverTime_1BFFBC54438F80E9D6B6739417BC29F3' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, WobbleTimeline__Direction_1BFFBC54438F80E9D6B6739417BC29F3) == 0x000F60, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::WobbleTimeline__Direction_1BFFBC54438F80E9D6B6739417BC29F3' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, WobbleTimeline) == 0x000F68, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::WobbleTimeline' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, Vend_Succeeded_Sound) == 0x000F70, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::Vend_Succeeded_Sound' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, Ambient_Sound_0) == 0x000F78, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::Ambient_Sound_0' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, InitialRelativeRotation) == 0x000F80, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::InitialRelativeRotation' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, Monitor_Mat) == 0x000F98, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::Monitor_Mat' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, MonitorMaterialParamName) == 0x000FA0, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::MonitorMaterialParamName' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, MaterialEffectsEnabled) == 0x000FA4, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::MaterialEffectsEnabled' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, MaterialStyleSet) == 0x000FA8, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::MaterialStyleSet' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, StyleSwitchDurationHandle) == 0x000FB0, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::StyleSwitchDurationHandle' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, MaterialStyleA) == 0x000FB8, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::MaterialStyleA' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, MaterialStyleB) == 0x001008, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::MaterialStyleB' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, TriggerSpeechOnTakeDamage) == 0x001058, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::TriggerSpeechOnTakeDamage' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, TriggerSpeechOnLocalPlayerDance) == 0x001080, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::TriggerSpeechOnLocalPlayerDance' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, TriggerEmoteOnLocalPlayerDance) == 0x0010A8, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::TriggerEmoteOnLocalPlayerDance' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, TriggerEmoteOnTakeDamage) == 0x0010D0, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::TriggerEmoteOnTakeDamage' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, RequiredPlayerDanceDurationToReact) == 0x0010F8, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::RequiredPlayerDanceDurationToReact' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, DistortionMultiplier) == 0x0010FC, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::DistortionMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, PlayerDanceReactionTimerHandle) == 0x001100, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::PlayerDanceReactionTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, OnPlayerDanceMessage) == 0x001108, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::OnPlayerDanceMessage' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, DamageMessageCooldown) == 0x001120, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::DamageMessageCooldown' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, PlayerDanceMatStyleName) == 0x001124, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::PlayerDanceMatStyleName' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, TriggerAudioOnScreenTransition) == 0x001128, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::TriggerAudioOnScreenTransition' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, TriggerAudioOnEmote) == 0x001150, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::TriggerAudioOnEmote' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, LastDamageMessageTime) == 0x001178, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::LastDamageMessageTime' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, LastDisplayedTakeDamageMessage) == 0x001180, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::LastDisplayedTakeDamageMessage' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, LastDialogMarkerInteractionState) == 0x001198, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::LastDialogMarkerInteractionState' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, LastRequestedDamageStyle) == 0x00119C, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::LastRequestedDamageStyle' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, OnRevealScreenSound) == 0x0011A0, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::OnRevealScreenSound' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, OnHideScreenSound) == 0x0011A8, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::OnHideScreenSound' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, LastPlayedEmoteAudio) == 0x0011B0, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::LastPlayedEmoteAudio' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, EmoteScreenRevealed) == 0x0011B8, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::EmoteScreenRevealed' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, OnPlayerInteractSound) == 0x0011C0, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::OnPlayerInteractSound' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, SpecificPlayerDanceMatStyleNames) == 0x0011C8, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::SpecificPlayerDanceMatStyleNames' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, SpecificOnPlayerDanceMessages) == 0x001218, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::SpecificOnPlayerDanceMessages' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, LastInteractingPlayerController) == 0x001268, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::LastInteractingPlayerController' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, Current_Reaction_Audio) == 0x001270, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::Current_Reaction_Audio' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, OnRevealAudio) == 0x001278, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::OnRevealAudio' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, OnHideAudio) == 0x001280, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::OnHideAudio' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, DamageResponses_Light) == 0x001288, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::DamageResponses_Light' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, DamageResponses_Med) == 0x001298, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::DamageResponses_Med' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, DamageResponses_Heavy) == 0x0012A8, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::DamageResponses_Heavy' has a wrong offset!");
static_assert(offsetof(ABP_StationProp_VendingMachine_Emote_Base_C, LastDamageResponseThreshold) == 0x0012B8, "Member 'ABP_StationProp_VendingMachine_Emote_Base_C::LastDamageResponseThreshold' has a wrong offset!");

}

