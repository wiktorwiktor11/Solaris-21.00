#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MoleGameRuntime

#include "Basic.hpp"

#include "MoleGameRuntime_classes.hpp"
#include "MoleGameRuntime_parameters.hpp"


namespace SDK
{

// Function MoleGameRuntime.MoleTaskLogicSubobject.OnAssociatedTaskActorsAdded
// (Native, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   InNewlyAddedTaskActors                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UMoleTaskLogicSubobject::OnAssociatedTaskActorsAdded(const TArray<class AActor*>& InNewlyAddedTaskActors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLogicSubobject", "OnAssociatedTaskActorsAdded");

	Params::MoleTaskLogicSubobject_OnAssociatedTaskActorsAdded Parms{};

	Parms.InNewlyAddedTaskActors = std::move(InNewlyAddedTaskActors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleTaskLogicSubobject.OnAssociatedTaskActorsPendingRemoval
// (Native, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   InPendingRemovalTaskActors                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UMoleTaskLogicSubobject::OnAssociatedTaskActorsPendingRemoval(const TArray<class AActor*>& InPendingRemovalTaskActors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLogicSubobject", "OnAssociatedTaskActorsPendingRemoval");

	Params::MoleTaskLogicSubobject_OnAssociatedTaskActorsPendingRemoval Parms{};

	Parms.InPendingRemovalTaskActors = std::move(InPendingRemovalTaskActors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleTaskLogicSubobject.OnEnterOwningPhase
// (Native, Event, Public, BlueprintEvent)

void UMoleTaskLogicSubobject::OnEnterOwningPhase()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLogicSubobject", "OnEnterOwningPhase");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleTaskLogicSubobject.OnExitOwningPhase
// (Native, Event, Public, BlueprintEvent)

void UMoleTaskLogicSubobject::OnExitOwningPhase()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLogicSubobject", "OnExitOwningPhase");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleTaskLogicSubobject.OnOwningTaskBecomePrimaryActiveTask
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bIsActivePhase                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMoleTaskLogicSubobject::OnOwningTaskBecomePrimaryActiveTask(bool bIsActivePhase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLogicSubobject", "OnOwningTaskBecomePrimaryActiveTask");

	Params::MoleTaskLogicSubobject_OnOwningTaskBecomePrimaryActiveTask Parms{};

	Parms.bIsActivePhase = bIsActivePhase;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleTaskLogicSubobject.OnOwningTaskNoLongerPrimaryActiveTask
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bIsActivePhase                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMoleTaskLogicSubobject::OnOwningTaskNoLongerPrimaryActiveTask(bool bIsActivePhase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLogicSubobject", "OnOwningTaskNoLongerPrimaryActiveTask");

	Params::MoleTaskLogicSubobject_OnOwningTaskNoLongerPrimaryActiveTask Parms{};

	Parms.bIsActivePhase = bIsActivePhase;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleTaskLogicSubobject.OnTaskExternalInterruption
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// EMoleTaskInterruptionType               InterruptionType                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMoleTaskLogicSubobject::OnTaskExternalInterruption(EMoleTaskInterruptionType InterruptionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLogicSubobject", "OnTaskExternalInterruption");

	Params::MoleTaskLogicSubobject_OnTaskExternalInterruption Parms{};

	Parms.InterruptionType = InterruptionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleTaskLogicSubobject.OnTaskRemoved
// (Native, Event, Public, BlueprintEvent)

void UMoleTaskLogicSubobject::OnTaskRemoved()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLogicSubobject", "OnTaskRemoved");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleTaskLogicSubobject.GetAssociatedTaskActors
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class AActor*>             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class AActor*> UMoleTaskLogicSubobject::GetAssociatedTaskActors() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLogicSubobject", "GetAssociatedTaskActors");

	Params::MoleTaskLogicSubobject_GetAssociatedTaskActors Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleTaskLogicSubobject.GetOwnerRole
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ENetRole                                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ENetRole UMoleTaskLogicSubobject::GetOwnerRole() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLogicSubobject", "GetOwnerRole");

	Params::MoleTaskLogicSubobject_GetOwnerRole Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleTaskLogicSubobject.GetOwningController
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AController*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AController* UMoleTaskLogicSubobject::GetOwningController() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLogicSubobject", "GetOwningController");

	Params::MoleTaskLogicSubobject_GetOwningController Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleTaskLogicSubobject.GetOwningPlayerTaskComponent
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMolePlayerTaskManagementComponent*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMolePlayerTaskManagementComponent* UMoleTaskLogicSubobject::GetOwningPlayerTaskComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLogicSubobject", "GetOwningPlayerTaskComponent");

	Params::MoleTaskLogicSubobject_GetOwningPlayerTaskComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleTaskLogicObjective.ApplyCurrentValueDelta
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   Delta                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMoleTaskLogicObjective::ApplyCurrentValueDelta(float Delta)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLogicObjective", "ApplyCurrentValueDelta");

	Params::MoleTaskLogicObjective_ApplyCurrentValueDelta Parms{};

	Parms.Delta = Delta;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleTaskLogicObjective.CaptureInitialValue
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMoleTaskLogicObjective::CaptureInitialValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLogicObjective", "CaptureInitialValue");

	Params::MoleTaskLogicObjective_CaptureInitialValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleTaskLogicObjective.CaptureTargetValue
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMoleTaskLogicObjective::CaptureTargetValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLogicObjective", "CaptureTargetValue");

	Params::MoleTaskLogicObjective_CaptureTargetValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleTaskLogicObjective.CheckObjectiveStatus
// (Native, Protected, BlueprintCallable)

void UMoleTaskLogicObjective::CheckObjectiveStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLogicObjective", "CheckObjectiveStatus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleTaskLogicObjective.OnRep_CapturedInitialValue
// (Native, Protected)

void UMoleTaskLogicObjective::OnRep_CapturedInitialValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLogicObjective", "OnRep_CapturedInitialValue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleTaskLogicObjective.OnRep_CapturedTargetValue
// (Native, Protected)

void UMoleTaskLogicObjective::OnRep_CapturedTargetValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLogicObjective", "OnRep_CapturedTargetValue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleTaskLogicObjective.OnRep_CurrentStatus
// (Native, Protected)

void UMoleTaskLogicObjective::OnRep_CurrentStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLogicObjective", "OnRep_CurrentStatus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleTaskLogicObjective.OnRep_CurrentValue
// (Native, Protected)

void UMoleTaskLogicObjective::OnRep_CurrentValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLogicObjective", "OnRep_CurrentValue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleTaskLogicObjective.ServerSetAsPrimaryActiveTask
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void UMoleTaskLogicObjective::ServerSetAsPrimaryActiveTask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLogicObjective", "ServerSetAsPrimaryActiveTask");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleTaskLogicObjective.ServerSuggestObjectiveStatus
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// EMoleTaskObjectiveStatus                InNewSuggestedStatus                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMoleTaskLogicObjective::ServerSuggestObjectiveStatus(EMoleTaskObjectiveStatus InNewSuggestedStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLogicObjective", "ServerSuggestObjectiveStatus");

	Params::MoleTaskLogicObjective_ServerSuggestObjectiveStatus Parms{};

	Parms.InNewSuggestedStatus = InNewSuggestedStatus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleTaskLogicObjective.SetObjectiveStatus
// (Native, Protected, BlueprintCallable)
// Parameters:
// EMoleTaskObjectiveStatus                InNewStatus                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMoleTaskLogicObjective::SetObjectiveStatus(EMoleTaskObjectiveStatus InNewStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLogicObjective", "SetObjectiveStatus");

	Params::MoleTaskLogicObjective_SetObjectiveStatus Parms{};

	Parms.InNewStatus = InNewStatus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleTaskLogicObjective.GetCapturedInitialValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMoleTaskLogicObjective::GetCapturedInitialValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLogicObjective", "GetCapturedInitialValue");

	Params::MoleTaskLogicObjective_GetCapturedInitialValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleTaskLogicObjective.GetCapturedTargetValue
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMoleTaskLogicObjective::GetCapturedTargetValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLogicObjective", "GetCapturedTargetValue");

	Params::MoleTaskLogicObjective_GetCapturedTargetValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleTaskLogicObjective.GetCurrentValue
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMoleTaskLogicObjective::GetCurrentValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLogicObjective", "GetCurrentValue");

	Params::MoleTaskLogicObjective_GetCurrentValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleTaskLogicObjective.GetObjectiveStatus
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMoleTaskObjectiveStatus                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMoleTaskObjectiveStatus UMoleTaskLogicObjective::GetObjectiveStatus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLogicObjective", "GetObjectiveStatus");

	Params::MoleTaskLogicObjective_GetObjectiveStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleTaskLogicObjective.GetObjectiveText
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UMoleTaskLogicObjective::GetObjectiveText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLogicObjective", "GetObjectiveText");

	Params::MoleTaskLogicObjective_GetObjectiveText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleEliminationAbility.ValidatePotentialEliminationTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AFortPlayerPawn*                  PotentialTargetPawn                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMoleEliminationAbility::ValidatePotentialEliminationTarget(class AFortPlayerPawn* PotentialTargetPawn) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleEliminationAbility", "ValidatePotentialEliminationTarget");

	Params::MoleEliminationAbility_ValidatePotentialEliminationTarget Parms{};

	Parms.PotentialTargetPawn = PotentialTargetPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleTaskLogicAction.OnActionRemovalPolicyInvoked
// (Native, Event, Protected, BlueprintEvent)

void UMoleTaskLogicAction::OnActionRemovalPolicyInvoked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLogicAction", "OnActionRemovalPolicyInvoked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.FortCinematicComponent.CancelBlackscreen
// (Final, Native, Public, BlueprintCallable)

void UFortCinematicComponent::CancelBlackscreen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCinematicComponent", "CancelBlackscreen");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.FortCinematicComponent.FadeFromBlackscreen
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InFadeTime                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCinematicComponent::FadeFromBlackscreen(float InFadeTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCinematicComponent", "FadeFromBlackscreen");

	Params::FortCinematicComponent_FadeFromBlackscreen Parms{};

	Parms.InFadeTime = InFadeTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.FortCinematicComponent.FadeToBlackscreen
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InFadeTime                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInHold                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCinematicComponent::FadeToBlackscreen(float InFadeTime, bool bInHold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCinematicComponent", "FadeToBlackscreen");

	Params::FortCinematicComponent_FadeToBlackscreen Parms{};

	Parms.InFadeTime = InFadeTime;
	Parms.bInHold = bInHold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.FortCinematicComponent.IsCinematicStateActive
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     StateTag                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortCinematicComponent::IsCinematicStateActive(const struct FGameplayTag& StateTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCinematicComponent", "IsCinematicStateActive");

	Params::FortCinematicComponent_IsCinematicStateActive Parms{};

	Parms.StateTag = std::move(StateTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.FortCinematicComponent.PushCinematicState
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFortCinematicState              InState                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortCinematicComponent::PushCinematicState(const struct FFortCinematicState& InState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCinematicComponent", "PushCinematicState");

	Params::FortCinematicComponent_PushCinematicState Parms{};

	Parms.InState = std::move(InState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.FortCinematicComponent.RemoveCinematicState
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     StateId                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCinematicComponent::RemoveCinematicState(const struct FGameplayTag& StateId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCinematicComponent", "RemoveCinematicState");

	Params::FortCinematicComponent_RemoveCinematicState Parms{};

	Parms.StateId = std::move(StateId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleAFKComponent.HasEverBeenAFK
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AFortPlayerController*            FortPC                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMoleAFKComponent::HasEverBeenAFK(const class AFortPlayerController* FortPC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoleAFKComponent", "HasEverBeenAFK");

	Params::MoleAFKComponent_HasEverBeenAFK Parms{};

	Parms.FortPC = FortPC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleAFKComponent.HasEverBeenAFKForTooLong
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AFortPlayerController*            FortPC                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMoleAFKComponent::HasEverBeenAFKForTooLong(const class AFortPlayerController* FortPC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoleAFKComponent", "HasEverBeenAFKForTooLong");

	Params::MoleAFKComponent_HasEverBeenAFKForTooLong Parms{};

	Parms.FortPC = FortPC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleAFKComponent.IsControllerAFK
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AFortPlayerController*            FortPC                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMoleAFKComponent::IsControllerAFK(class AFortPlayerController* FortPC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoleAFKComponent", "IsControllerAFK");

	Params::MoleAFKComponent_IsControllerAFK Parms{};

	Parms.FortPC = FortPC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleAFKComponent.IsPlayerAFK
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerState*                     Player                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMoleAFKComponent::IsPlayerAFK(const class APlayerState* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoleAFKComponent", "IsPlayerAFK");

	Params::MoleAFKComponent_IsPlayerAFK Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleAFKComponent.OnPlayerEnteredPOI
// (Final, Native, Protected)
// Parameters:
// class AActor*                           OverlapingVolume                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           EnteringActor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMoleAFKComponent::OnPlayerEnteredPOI(class AActor* OverlapingVolume, class AActor* EnteringActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleAFKComponent", "OnPlayerEnteredPOI");

	Params::MoleAFKComponent_OnPlayerEnteredPOI Parms{};

	Parms.OverlapingVolume = OverlapingVolume;
	Parms.EnteringActor = EnteringActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleAFKComponent.OnPlayerLeftPOI
// (Final, Native, Protected)
// Parameters:
// class AActor*                           OverlapingVolume                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           EnteringActor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMoleAFKComponent::OnPlayerLeftPOI(class AActor* OverlapingVolume, class AActor* EnteringActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleAFKComponent", "OnPlayerLeftPOI");

	Params::MoleAFKComponent_OnPlayerLeftPOI Parms{};

	Parms.OverlapingVolume = OverlapingVolume;
	Parms.EnteringActor = EnteringActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleCheatManager.GoToStateGameover
// (Final, BlueprintAuthorityOnly, Exec, Native, Public, HasOutParams)
// Parameters:
// struct FGameplayTag                     InTag                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMoleCheatManager::GoToStateGameover(const struct FGameplayTag& InTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleCheatManager", "GoToStateGameover");

	Params::MoleCheatManager_GoToStateGameover Parms{};

	Parms.InTag = std::move(InTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleCheatManager.GoToStateGameplay
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UMoleCheatManager::GoToStateGameplay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleCheatManager", "GoToStateGameplay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleCheatManager.GoToStateLobby
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UMoleCheatManager::GoToStateLobby()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleCheatManager", "GoToStateLobby");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleCheatManager.GoToStateVoting
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UMoleCheatManager::GoToStateVoting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleCheatManager", "GoToStateVoting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleCheatManager.GrantTask
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FString                           TaskAssetName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMoleCheatManager::GrantTask(const class FString& TaskAssetName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleCheatManager", "GrantTask");

	Params::MoleCheatManager_GrantTask Parms{};

	Parms.TaskAssetName = std::move(TaskAssetName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleCheatManager.MakeSelfMoleGhost
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UMoleCheatManager::MakeSelfMoleGhost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleCheatManager", "MakeSelfMoleGhost");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleCheatManager.MakeTargetMoleGhost
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UMoleCheatManager::MakeTargetMoleGhost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleCheatManager", "MakeTargetMoleGhost");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleCheatManager.MoleClearRequestSaboteur
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UMoleCheatManager::MoleClearRequestSaboteur()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleCheatManager", "MoleClearRequestSaboteur");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleCheatManager.MoleDisableAllTasks
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UMoleCheatManager::MoleDisableAllTasks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleCheatManager", "MoleDisableAllTasks");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleCheatManager.MoleDisableSelfTasks
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UMoleCheatManager::MoleDisableSelfTasks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleCheatManager", "MoleDisableSelfTasks");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleCheatManager.MoleEnableAllTasks
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UMoleCheatManager::MoleEnableAllTasks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleCheatManager", "MoleEnableAllTasks");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleCheatManager.MoleEnableSelfTasks
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UMoleCheatManager::MoleEnableSelfTasks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleCheatManager", "MoleEnableSelfTasks");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleCheatManager.MoleInterruptAllTasks
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UMoleCheatManager::MoleInterruptAllTasks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleCheatManager", "MoleInterruptAllTasks");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleCheatManager.MoleInterruptSelfTasks
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UMoleCheatManager::MoleInterruptSelfTasks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleCheatManager", "MoleInterruptSelfTasks");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleCheatManager.MoleRecoverFromAFK
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UMoleCheatManager::MoleRecoverFromAFK()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleCheatManager", "MoleRecoverFromAFK");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleCheatManager.MoleRequestSaboteur
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UMoleCheatManager::MoleRequestSaboteur()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleCheatManager", "MoleRequestSaboteur");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleCheatManager.MoleShowImpostorBias
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UMoleCheatManager::MoleShowImpostorBias()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleCheatManager", "MoleShowImpostorBias");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleCheatManager.SkipLobbyBackfillLogic
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UMoleCheatManager::SkipLobbyBackfillLogic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleCheatManager", "SkipLobbyBackfillLogic");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleCheatManager.SpawnMoleBots
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// int32                                   NumBotsToSpawn                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMoleCheatManager::SpawnMoleBots(int32 NumBotsToSpawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleCheatManager", "SpawnMoleBots");

	Params::MoleCheatManager_SpawnMoleBots Parms{};

	Parms.NumBotsToSpawn = NumBotsToSpawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleTaskLogicObjective_DamageActors.OnBuildingActorDamaged
// (Final, Native, Protected, HasDefaults)
// Parameters:
// class AActor*                           DamagedActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              FHitComponent                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Momentum                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMoleTaskLogicObjective_DamageActors::OnBuildingActorDamaged(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLogicObjective_DamageActors", "OnBuildingActorDamaged");

	Params::MoleTaskLogicObjective_DamageActors_OnBuildingActorDamaged Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.Damage = Damage;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;
	Parms.HitLocation = std::move(HitLocation);
	Parms.FHitComponent = FHitComponent;
	Parms.BoneName = BoneName;
	Parms.Momentum = std::move(Momentum);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleTaskLogicObjective_DamageActors.OnPawnDamaged
// (Final, Native, Protected, HasDefaults)
// Parameters:
// class AActor*                           DamagedActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              FHitComponent                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Momentum                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMoleTaskLogicObjective_DamageActors::OnPawnDamaged(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLogicObjective_DamageActors", "OnPawnDamaged");

	Params::MoleTaskLogicObjective_DamageActors_OnPawnDamaged Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.Damage = Damage;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;
	Parms.HitLocation = std::move(HitLocation);
	Parms.FHitComponent = FHitComponent;
	Parms.BoneName = BoneName;
	Parms.Momentum = std::move(Momentum);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleEliminationMarker.OnRep_RepresentedPlayer
// (Final, Native, Protected)

void AMoleEliminationMarker::OnRep_RepresentedPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleEliminationMarker", "OnRep_RepresentedPlayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleEliminationMarker.OnRepresentedPlayerSet
// (Event, Public, BlueprintEvent)

void AMoleEliminationMarker::OnRepresentedPlayerSet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleEliminationMarker", "OnRepresentedPlayerSet");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MoleGameRuntime.MoleTaskLogicObjective_DestroyActors.OnBuildingActorDied
// (Final, Native, Protected, HasDefaults)
// Parameters:
// class AActor*                           DamagedActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              FHitComponent                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Momentum                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMoleTaskLogicObjective_DestroyActors::OnBuildingActorDied(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLogicObjective_DestroyActors", "OnBuildingActorDied");

	Params::MoleTaskLogicObjective_DestroyActors_OnBuildingActorDied Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.Damage = Damage;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;
	Parms.HitLocation = std::move(HitLocation);
	Parms.FHitComponent = FHitComponent;
	Parms.BoneName = BoneName;
	Parms.Momentum = std::move(Momentum);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleTaskLogicObjective_DestroyActors.OnGenericActorDestroyed
// (Final, Native, Protected)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMoleTaskLogicObjective_DestroyActors::OnGenericActorDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLogicObjective_DestroyActors", "OnGenericActorDestroyed");

	Params::MoleTaskLogicObjective_DestroyActors_OnGenericActorDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleTaskLogicObjective_DestroyActors.OnPawnDied
// (Final, Native, Protected, HasDefaults)
// Parameters:
// class AActor*                           DamagedActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              FHitComponent                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Momentum                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMoleTaskLogicObjective_DestroyActors::OnPawnDied(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLogicObjective_DestroyActors", "OnPawnDied");

	Params::MoleTaskLogicObjective_DestroyActors_OnPawnDied Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.Damage = Damage;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;
	Parms.HitLocation = std::move(HitLocation);
	Parms.FHitComponent = FHitComponent;
	Parms.BoneName = BoneName;
	Parms.Momentum = std::move(Momentum);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleGameplayAbility_Voting.OnVotingTargetChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMoleGameplayAbility_Voting::OnVotingTargetChanged(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleGameplayAbility_Voting", "OnVotingTargetChanged");

	Params::MoleGameplayAbility_Voting_OnVotingTargetChanged Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MoleGameRuntime.MoleGhostControllerComponent.ClientRevertGhost
// (Net, NetReliable, Native, Event, Public, NetClient)

void UMoleGhostControllerComponent::ClientRevertGhost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleGhostControllerComponent", "ClientRevertGhost");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleGhostControllerComponent.CLientSetupGhost
// (Net, NetReliable, Native, Event, Public, NetClient)

void UMoleGhostControllerComponent::CLientSetupGhost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleGhostControllerComponent", "CLientSetupGhost");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleGhostControllerComponent.OnPlayerBecameGhost
// (Event, Protected, BlueprintEvent)

void UMoleGhostControllerComponent::OnPlayerBecameGhost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleGhostControllerComponent", "OnPlayerBecameGhost");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MoleGameRuntime.MoleGhostMannequin.OnRepresentedPlayerSet
// (Event, Protected, BlueprintEvent)
// Parameters:
// class APlayerState*                     PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMoleGhostMannequin::OnRepresentedPlayerSet(class APlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleGhostMannequin", "OnRepresentedPlayerSet");

	Params::MoleGhostMannequin_OnRepresentedPlayerSet Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MoleGameRuntime.MoleGhostMannequin.GetRepresentedPlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APlayerState*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APlayerState* AMoleGhostMannequin::GetRepresentedPlayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleGhostMannequin", "GetRepresentedPlayer");

	Params::MoleGhostMannequin_GetRepresentedPlayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleImpostorBiasComponent.IsImpostorBiasEnabled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMoleImpostorBiasComponent::IsImpostorBiasEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoleImpostorBiasComponent", "IsImpostorBiasEnabled");

	Params::MoleImpostorBiasComponent_IsImpostorBiasEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleImpostorBiasComponent.SetRolePreference
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AFortPlayerController*            FortPC                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMoleRole                               InRolePreference                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMoleImpostorBiasComponent::SetRolePreference(class AFortPlayerController* FortPC, EMoleRole InRolePreference)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoleImpostorBiasComponent", "SetRolePreference");

	Params::MoleImpostorBiasComponent_SetRolePreference Parms{};

	Parms.FortPC = FortPC;
	Parms.InRolePreference = InRolePreference;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleImpostorBiasComponent.OnRep_RolePreference
// (Final, Native, Protected)

void UMoleImpostorBiasComponent::OnRep_RolePreference()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleImpostorBiasComponent", "OnRep_RolePreference");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleLobbyState_Countdown.OnRep_LobbyTransitionServerTime
// (Final, Native, Protected)

void UMoleLobbyState_Countdown::OnRep_LobbyTransitionServerTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleLobbyState_Countdown", "OnRep_LobbyTransitionServerTime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleLobbyState_Matchmake.OnAcquiringMorePlayersCompleted
// (Final, Native, Protected)

void UMoleLobbyState_Matchmake::OnAcquiringMorePlayersCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleLobbyState_Matchmake", "OnAcquiringMorePlayersCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MolePawnComponent.HandlePawnCustomizationComplete
// (Final, Native, Protected)
// Parameters:
// class AFortPlayerPawn*                  Pawn                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMolePawnComponent::HandlePawnCustomizationComplete(class AFortPlayerPawn* Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MolePawnComponent", "HandlePawnCustomizationComplete");

	Params::MolePawnComponent_HandlePawnCustomizationComplete Parms{};

	Parms.Pawn = Pawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MolePawnComponent.OnBecameGhost
// (Event, Protected, BlueprintEvent)

void UMolePawnComponent::OnBecameGhost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MolePawnComponent", "OnBecameGhost");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MoleGameRuntime.MolePawnComponent.OnBecameHuman
// (Event, Protected, BlueprintEvent)

void UMolePawnComponent::OnBecameHuman()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MolePawnComponent", "OnBecameHuman");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MoleGameRuntime.MolePawnComponent.OnRep_bIsGhost
// (Final, Native, Protected)

void UMolePawnComponent::OnRep_bIsGhost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MolePawnComponent", "OnRep_bIsGhost");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MolePlayerStateComponent.BlueprintSetIsPlayerGhost
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerState*                     PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsPlayerGhost                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMolePlayerStateComponent::BlueprintSetIsPlayerGhost(class APlayerState* PlayerState, bool bIsPlayerGhost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MolePlayerStateComponent", "BlueprintSetIsPlayerGhost");

	Params::MolePlayerStateComponent_BlueprintSetIsPlayerGhost Parms{};

	Parms.PlayerState = PlayerState;
	Parms.bIsPlayerGhost = bIsPlayerGhost;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MolePlayerStateComponent.GetMolePlayerCosmeticData
// (Final, RequiredAPI, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class APlayerState*                     PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMolePlayerCosmeticData          OutPlayerCosmeticData                                  (Parm, OutParm, NativeAccessSpecifierPublic)

void UMolePlayerStateComponent::GetMolePlayerCosmeticData(class APlayerState* PlayerState, struct FMolePlayerCosmeticData* OutPlayerCosmeticData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MolePlayerStateComponent", "GetMolePlayerCosmeticData");

	Params::MolePlayerStateComponent_GetMolePlayerCosmeticData Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPlayerCosmeticData != nullptr)
		*OutPlayerCosmeticData = std::move(Parms.OutPlayerCosmeticData);
}


// Function MoleGameRuntime.MolePlayerStateComponent.GetMolePlayerItemDefinition
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerState*                     PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UFortItemDefinition*        ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UFortItemDefinition* UMolePlayerStateComponent::GetMolePlayerItemDefinition(class APlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MolePlayerStateComponent", "GetMolePlayerItemDefinition");

	Params::MolePlayerStateComponent_GetMolePlayerItemDefinition Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MolePlayerStateComponent.GetMoleRole
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AController*                      User                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMoleRole                               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMoleRole UMolePlayerStateComponent::GetMoleRole(class AController* User)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MolePlayerStateComponent", "GetMoleRole");

	Params::MolePlayerStateComponent_GetMoleRole Parms{};

	Parms.User = User;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MolePlayerStateComponent.IsMoleEliminated
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerState*                     PlayerState                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMolePlayerStateComponent::IsMoleEliminated(const class APlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MolePlayerStateComponent", "IsMoleEliminated");

	Params::MolePlayerStateComponent_IsMoleEliminated Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MolePlayerStateComponent.IsMoleEnemy
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           InActor                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMolePlayerStateComponent::IsMoleEnemy(const class AActor* InActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MolePlayerStateComponent", "IsMoleEnemy");

	Params::MolePlayerStateComponent_IsMoleEnemy Parms{};

	Parms.InActor = InActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MolePlayerStateComponent.IsMoleEnemyFor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerState*                     PlayerState                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerState*                     TargetPlayerState                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMolePlayerStateComponent::IsMoleEnemyFor(const class APlayerState* PlayerState, const class APlayerState* TargetPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MolePlayerStateComponent", "IsMoleEnemyFor");

	Params::MolePlayerStateComponent_IsMoleEnemyFor Parms{};

	Parms.PlayerState = PlayerState;
	Parms.TargetPlayerState = TargetPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MolePlayerStateComponent.IsMoleGhost
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerState*                     PlayerState                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMolePlayerStateComponent::IsMoleGhost(const class APlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MolePlayerStateComponent", "IsMoleGhost");

	Params::MolePlayerStateComponent_IsMoleGhost Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MolePlayerStateComponent.IsMolePlayerDisconnected
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerState*                     PlayerState                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMolePlayerStateComponent::IsMolePlayerDisconnected(const class APlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MolePlayerStateComponent", "IsMolePlayerDisconnected");

	Params::MolePlayerStateComponent_IsMolePlayerDisconnected Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MolePlayerStateComponent.SetMoleKiller
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerState*                     Victim                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerState*                     Killer                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMolePlayerStateComponent::SetMoleKiller(class APlayerState* Victim, class APlayerState* Killer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MolePlayerStateComponent", "SetMoleKiller");

	Params::MolePlayerStateComponent_SetMoleKiller Parms{};

	Parms.Victim = Victim;
	Parms.Killer = Killer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MolePlayerStateComponent.OnRep_bHasLeftGame
// (Final, Native, Protected)

void UMolePlayerStateComponent::OnRep_bHasLeftGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MolePlayerStateComponent", "OnRep_bHasLeftGame");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MolePlayerStateComponent.OnRep_bIsRevealedEnemy
// (Final, Native, Protected)

void UMolePlayerStateComponent::OnRep_bIsRevealedEnemy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MolePlayerStateComponent", "OnRep_bIsRevealedEnemy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MolePlayerStateComponent.OnRep_DeathInfo
// (Final, Native, Protected)

void UMolePlayerStateComponent::OnRep_DeathInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MolePlayerStateComponent", "OnRep_DeathInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MolePlayerStateComponent.OnRep_EnemyPlayerStates
// (Final, Native, Protected)

void UMolePlayerStateComponent::OnRep_EnemyPlayerStates()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MolePlayerStateComponent", "OnRep_EnemyPlayerStates");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MolePlayerStateComponent.OnRep_KillerPlayerState
// (Final, Native, Protected)

void UMolePlayerStateComponent::OnRep_KillerPlayerState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MolePlayerStateComponent", "OnRep_KillerPlayerState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MolePlayerStateComponent.OnRep_PlayerNumber
// (Final, Native, Protected)

void UMolePlayerStateComponent::OnRep_PlayerNumber()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MolePlayerStateComponent", "OnRep_PlayerNumber");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MolePlayerStateComponent.OnRep_PlayerTeleportedData
// (Final, Native, Protected)

void UMolePlayerStateComponent::OnRep_PlayerTeleportedData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MolePlayerStateComponent", "OnRep_PlayerTeleportedData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MolePlayerStateComponent.OnRep_Role
// (Final, Native, Protected)

void UMolePlayerStateComponent::OnRep_Role()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MolePlayerStateComponent", "OnRep_Role");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MolePlayerStateComponent.GetPlayerNumber
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMolePlayerStateComponent::GetPlayerNumber() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MolePlayerStateComponent", "GetPlayerNumber");

	Params::MolePlayerStateComponent_GetPlayerNumber Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MolePlayerTaskManagementComponent.BlueprintServerTaskObjectInteractEvent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AController*                      User                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FEventMessageTag                 EventMessageTag                                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTaskGenericPayload              Payload                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMolePlayerTaskManagementComponent::BlueprintServerTaskObjectInteractEvent(class AController* User, const struct FEventMessageTag& EventMessageTag, const struct FTaskGenericPayload& Payload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MolePlayerTaskManagementComponent", "BlueprintServerTaskObjectInteractEvent");

	Params::MolePlayerTaskManagementComponent_BlueprintServerTaskObjectInteractEvent Parms{};

	Parms.User = User;
	Parms.EventMessageTag = std::move(EventMessageTag);
	Parms.Payload = std::move(Payload);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MolePlayerTaskManagementComponent.CompleteTaskForGameplayState
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayState*                   State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMolePlayerTaskManagementComponent::CompleteTaskForGameplayState(class UGameplayState* State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MolePlayerTaskManagementComponent", "CompleteTaskForGameplayState");

	Params::MolePlayerTaskManagementComponent_CompleteTaskForGameplayState Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MolePlayerTaskManagementComponent.ClientAdvanceLogicThroughPhases
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// class UMoleTaskLogic*                   Logic                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           AdvancedPhases                                         (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UMolePlayerTaskManagementComponent::ClientAdvanceLogicThroughPhases(class UMoleTaskLogic* Logic, const TArray<int32>& AdvancedPhases)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MolePlayerTaskManagementComponent", "ClientAdvanceLogicThroughPhases");

	Params::MolePlayerTaskManagementComponent_ClientAdvanceLogicThroughPhases Parms{};

	Parms.Logic = Logic;
	Parms.AdvancedPhases = std::move(AdvancedPhases);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MolePlayerTaskManagementComponent.ClientAllTasksEnabled
// (Final, Net, NetReliable, Native, Event, Private, NetClient)

void UMolePlayerTaskManagementComponent::ClientAllTasksEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MolePlayerTaskManagementComponent", "ClientAllTasksEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MolePlayerTaskManagementComponent.ClientAllTasksInterrupted
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// EMoleTaskInterruptionType               InterruptionType                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMolePlayerTaskManagementComponent::ClientAllTasksInterrupted(EMoleTaskInterruptionType InterruptionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MolePlayerTaskManagementComponent", "ClientAllTasksInterrupted");

	Params::MolePlayerTaskManagementComponent_ClientAllTasksInterrupted Parms{};

	Parms.InterruptionType = InterruptionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MolePlayerTaskManagementComponent.ClientSetPrimaryActiveTask
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// struct FMoleActiveTaskStateHandle       NewPrimaryHandle                                       (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMolePlayerTaskManagementComponent::ClientSetPrimaryActiveTask(const struct FMoleActiveTaskStateHandle& NewPrimaryHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MolePlayerTaskManagementComponent", "ClientSetPrimaryActiveTask");

	Params::MolePlayerTaskManagementComponent_ClientSetPrimaryActiveTask Parms{};

	Parms.NewPrimaryHandle = std::move(NewPrimaryHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MolePlayerTaskManagementComponent.ClientTasksInterrupted
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// TArray<class UMoleTaskDataAsset*>       TasksInterrupted                                       (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// EMoleTaskInterruptionType               InterruptionType                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMolePlayerTaskManagementComponent::ClientTasksInterrupted(const TArray<class UMoleTaskDataAsset*>& TasksInterrupted, EMoleTaskInterruptionType InterruptionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MolePlayerTaskManagementComponent", "ClientTasksInterrupted");

	Params::MolePlayerTaskManagementComponent_ClientTasksInterrupted Parms{};

	Parms.TasksInterrupted = std::move(TasksInterrupted);
	Parms.InterruptionType = InterruptionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MolePlayerTaskManagementComponent.OnCompletedTaskAdded
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FMoleCompletedTask               InAddedCompletedTask                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UMolePlayerTaskManagementComponent::OnCompletedTaskAdded(const struct FMoleCompletedTask& InAddedCompletedTask)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MolePlayerTaskManagementComponent", "OnCompletedTaskAdded");

	Params::MolePlayerTaskManagementComponent_OnCompletedTaskAdded Parms{};

	Parms.InAddedCompletedTask = std::move(InAddedCompletedTask);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MolePlayerTaskManagementComponent.OnLeashActorEndOverlap
// (Final, Native, Private)
// Parameters:
// class AActor*                           OriginatingActor                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ActorEndingOverlap                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMolePlayerTaskManagementComponent::OnLeashActorEndOverlap(class AActor* OriginatingActor, class AActor* ActorEndingOverlap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MolePlayerTaskManagementComponent", "OnLeashActorEndOverlap");

	Params::MolePlayerTaskManagementComponent_OnLeashActorEndOverlap Parms{};

	Parms.OriginatingActor = OriginatingActor;
	Parms.ActorEndingOverlap = ActorEndingOverlap;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MolePlayerTaskManagementComponent.ServerRequestCancelPrimaryActiveTask
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)

void UMolePlayerTaskManagementComponent::ServerRequestCancelPrimaryActiveTask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MolePlayerTaskManagementComponent", "ServerRequestCancelPrimaryActiveTask");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MolePlayerTaskManagementComponent.ServerTaskObjectInteractEvent
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// struct FEventMessageTag                 EventMessageTag                                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTaskGenericPayload              Payload                                                (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void UMolePlayerTaskManagementComponent::ServerTaskObjectInteractEvent(const struct FEventMessageTag& EventMessageTag, const struct FTaskGenericPayload& Payload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MolePlayerTaskManagementComponent", "ServerTaskObjectInteractEvent");

	Params::MolePlayerTaskManagementComponent_ServerTaskObjectInteractEvent Parms{};

	Parms.EventMessageTag = std::move(EventMessageTag);
	Parms.Payload = std::move(Payload);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MolePlayerTaskManagementComponent.GetNumCompletedTasks
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMolePlayerTaskManagementComponent::GetNumCompletedTasks() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MolePlayerTaskManagementComponent", "GetNumCompletedTasks");

	Params::MolePlayerTaskManagementComponent_GetNumCompletedTasks Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleQuickChatComponent.OnRep_MessageInfo
// (Final, Native, Private)

void UMoleQuickChatComponent::OnRep_MessageInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleQuickChatComponent", "OnRep_MessageInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleQuickChatComponent.ServerSendMessage
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// struct FMoleQuickChatMessageInfo        Message                                                (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMoleQuickChatComponent::ServerSendMessage(const struct FMoleQuickChatMessageInfo& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleQuickChatComponent", "ServerSendMessage");

	Params::MoleQuickChatComponent_ServerSendMessage Parms{};

	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleSabotageAbility.OnSabotageInterruptedEvent
// (Event, Public, BlueprintEvent)

void UMoleSabotageAbility::OnSabotageInterruptedEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleSabotageAbility", "OnSabotageInterruptedEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MoleGameRuntime.MoleSabotageAbility.OnSabotageResumedEvent
// (Event, Public, BlueprintEvent)

void UMoleSabotageAbility::OnSabotageResumedEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleSabotageAbility", "OnSabotageResumedEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MoleGameRuntime.MoleSabotageAbility.RevertSabotageForPlayer
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerState*                     Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMoleSabotageAbility::RevertSabotageForPlayer(class APlayerState* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleSabotageAbility", "RevertSabotageForPlayer");

	Params::MoleSabotageAbility_RevertSabotageForPlayer Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MoleGameRuntime.MoleSabotageAbility.GetAllSaboteurs
// (Final, Native, Protected, HasOutParams, BlueprintCallable, Const)
// Parameters:
// TArray<class APlayerState*>             OutAllSaboteurs                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UMoleSabotageAbility::GetAllSaboteurs(TArray<class APlayerState*>* OutAllSaboteurs) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleSabotageAbility", "GetAllSaboteurs");

	Params::MoleSabotageAbility_GetAllSaboteurs Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAllSaboteurs != nullptr)
		*OutAllSaboteurs = std::move(Parms.OutAllSaboteurs);
}


// Function MoleGameRuntime.MoleSabotageAbility.GetAllValidSabotageTargets
// (Native, Protected, HasOutParams, BlueprintCallable, Const)
// Parameters:
// TArray<class APlayerState*>             OutValidTargets                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UMoleSabotageAbility::GetAllValidSabotageTargets(TArray<class APlayerState*>* OutValidTargets) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleSabotageAbility", "GetAllValidSabotageTargets");

	Params::MoleSabotageAbility_GetAllValidSabotageTargets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValidTargets != nullptr)
		*OutValidTargets = std::move(Parms.OutValidTargets);
}


// Function MoleGameRuntime.MoleSabotageAbility.GetInterruptionType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMoleSabotageInterruptionType           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMoleSabotageInterruptionType UMoleSabotageAbility::GetInterruptionType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleSabotageAbility", "GetInterruptionType");

	Params::MoleSabotageAbility_GetInterruptionType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleSabotageManagerComponent.SendMoleLightingModeChangeEvent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UMoleSabotageAbility*             SabotageAbility                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMoleLightingMode                LightingMode                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UMoleSabotageManagerComponent::SendMoleLightingModeChangeEvent(const class UMoleSabotageAbility* SabotageAbility, const struct FMoleLightingMode& LightingMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoleSabotageManagerComponent", "SendMoleLightingModeChangeEvent");

	Params::MoleSabotageManagerComponent_SendMoleLightingModeChangeEvent Parms{};

	Parms.SabotageAbility = SabotageAbility;
	Parms.LightingMode = std::move(LightingMode);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleSabotageManagerComponent.SendMoleSabotageTimerStartedEvent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UMoleSabotageAbility*             SabotageAbility                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMoleTimerInfo                   TimerInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UMoleSabotageManagerComponent::SendMoleSabotageTimerStartedEvent(const class UMoleSabotageAbility* SabotageAbility, const struct FMoleTimerInfo& TimerInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoleSabotageManagerComponent", "SendMoleSabotageTimerStartedEvent");

	Params::MoleSabotageManagerComponent_SendMoleSabotageTimerStartedEvent Parms{};

	Parms.SabotageAbility = SabotageAbility;
	Parms.TimerInfo = std::move(TimerInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleSabotageManagerComponent.OnRep_ActiveSabotageTimerInfo
// (Final, Native, Private)

void UMoleSabotageManagerComponent::OnRep_ActiveSabotageTimerInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleSabotageManagerComponent", "OnRep_ActiveSabotageTimerInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleSabotageManagerComponent.OnRep_CurrentLightingMode
// (Final, Native, Private)

void UMoleSabotageManagerComponent::OnRep_CurrentLightingMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleSabotageManagerComponent", "OnRep_CurrentLightingMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleSabotageManagerComponent.OnRep_CurrentSabotageStatus
// (Final, Native, Private)

void UMoleSabotageManagerComponent::OnRep_CurrentSabotageStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleSabotageManagerComponent", "OnRep_CurrentSabotageStatus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleStateMachine.GetMoleRemainingSaboteurCount
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                ContextPlayer                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMoleStateMachine::GetMoleRemainingSaboteurCount(class APlayerController* ContextPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoleStateMachine", "GetMoleRemainingSaboteurCount");

	Params::MoleStateMachine_GetMoleRemainingSaboteurCount Parms{};

	Parms.ContextPlayer = ContextPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleStateMachine.GetMoleStartOfMatchPlayerCount
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                ContextPlayer                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMoleStateMachine::GetMoleStartOfMatchPlayerCount(class APlayerController* ContextPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoleStateMachine", "GetMoleStartOfMatchPlayerCount");

	Params::MoleStateMachine_GetMoleStartOfMatchPlayerCount Parms{};

	Parms.ContextPlayer = ContextPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleStateMachine.GetMoleStartOfMatchPlayerCountForPlayspace
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AMoleGamePlayspace*               PlayspaceContext                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMoleStateMachine::GetMoleStartOfMatchPlayerCountForPlayspace(class AMoleGamePlayspace* PlayspaceContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoleStateMachine", "GetMoleStartOfMatchPlayerCountForPlayspace");

	Params::MoleStateMachine_GetMoleStartOfMatchPlayerCountForPlayspace Parms{};

	Parms.PlayspaceContext = PlayspaceContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleState_Gameover.OnRep_ImposterPlayerStates
// (Final, Native, Private)

void UMoleState_Gameover::OnRep_ImposterPlayerStates()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleState_Gameover", "OnRep_ImposterPlayerStates");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleState_Gameover.OnRep_MoleStateGameOverEventData
// (Final, Native, Private)

void UMoleState_Gameover::OnRep_MoleStateGameOverEventData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleState_Gameover", "OnRep_MoleStateGameOverEventData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleState_Gameplay.GetAllMoleFreshlyKilledGhosts
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerContext                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class APlayerState*>             OutFreshlyKilledGhosts                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UMoleState_Gameplay::GetAllMoleFreshlyKilledGhosts(class APlayerController* PlayerContext, TArray<class APlayerState*>* OutFreshlyKilledGhosts)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoleState_Gameplay", "GetAllMoleFreshlyKilledGhosts");

	Params::MoleState_Gameplay_GetAllMoleFreshlyKilledGhosts Parms{};

	Parms.PlayerContext = PlayerContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutFreshlyKilledGhosts != nullptr)
		*OutFreshlyKilledGhosts = std::move(Parms.OutFreshlyKilledGhosts);
}


// Function MoleGameRuntime.MoleState_Gameplay.RequestEmergencyMeeting
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           ActorContext                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMoleEmergencyMeetingData        MeetingData                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMoleState_Gameplay::RequestEmergencyMeeting(class AActor* ActorContext, const struct FMoleEmergencyMeetingData& MeetingData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoleState_Gameplay", "RequestEmergencyMeeting");

	Params::MoleState_Gameplay_RequestEmergencyMeeting Parms{};

	Parms.ActorContext = ActorContext;
	Parms.MeetingData = std::move(MeetingData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleState_Gameplay.HandlePlayerStateDied
// (Final, Native, Protected)
// Parameters:
// class APlayerState*                     GhostPlayerState                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMoleState_Gameplay::HandlePlayerStateDied(class APlayerState* GhostPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleState_Gameplay", "HandlePlayerStateDied");

	Params::MoleState_Gameplay_HandlePlayerStateDied Parms{};

	Parms.GhostPlayerState = GhostPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleState_Gameplay.HandleScoreChanged
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FEventMessageTag                 EventChannel                                           (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMoleTaskScoreEventData          ScoreEventData                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UMoleState_Gameplay::HandleScoreChanged(const struct FEventMessageTag& EventChannel, const struct FMoleTaskScoreEventData& ScoreEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleState_Gameplay", "HandleScoreChanged");

	Params::MoleState_Gameplay_HandleScoreChanged Parms{};

	Parms.EventChannel = std::move(EventChannel);
	Parms.ScoreEventData = std::move(ScoreEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleState_Gameplay.OnRep_LastSummonedEmergencyMeetingData
// (Final, Native, Protected)

void UMoleState_Gameplay::OnRep_LastSummonedEmergencyMeetingData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleState_Gameplay", "OnRep_LastSummonedEmergencyMeetingData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleSupplyDropSabotageAbility.HandleFixPointInteracted
// (Final, Native, Public)
// Parameters:
// class UMoleTaskLinkComponent*           TaskLinkComponent                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortPawn*                        InteractingPawn                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInteractionBeingAttempted              InteractionType                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMoleSupplyDropSabotageAbility::HandleFixPointInteracted(class UMoleTaskLinkComponent* TaskLinkComponent, const class AFortPawn* InteractingPawn, EInteractionBeingAttempted InteractionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleSupplyDropSabotageAbility", "HandleFixPointInteracted");

	Params::MoleSupplyDropSabotageAbility_HandleFixPointInteracted Parms{};

	Parms.TaskLinkComponent = TaskLinkComponent;
	Parms.InteractingPawn = InteractingPawn;
	Parms.InteractionType = InteractionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleTaskLinkComponent.GetTaskComponent
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           TaskActor                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMoleTaskLinkComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMoleTaskLinkComponent* UMoleTaskLinkComponent::GetTaskComponent(class AActor* TaskActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoleTaskLinkComponent", "GetTaskComponent");

	Params::MoleTaskLinkComponent_GetTaskComponent Parms{};

	Parms.TaskActor = TaskActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleTaskLinkComponent.AddPlayerInteractionData
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AController*                      User                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             InteractionInfoRowName                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bGivePermission                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMoleTaskLinkComponent::AddPlayerInteractionData(class AController* User, const class FName InteractionInfoRowName, bool bGivePermission)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLinkComponent", "AddPlayerInteractionData");

	Params::MoleTaskLinkComponent_AddPlayerInteractionData Parms{};

	Parms.User = User;
	Parms.InteractionInfoRowName = InteractionInfoRowName;
	Parms.bGivePermission = bGivePermission;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleTaskLinkComponent.CanInteract
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AFortPawn*                        InteractingPawn                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInteractionBeingAttempted              InteractionBeingAttempted                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETInteractionType                       InteractionType                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMoleTaskLinkComponent::CanInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted, const ETInteractionType InteractionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLinkComponent", "CanInteract");

	Params::MoleTaskLinkComponent_CanInteract Parms{};

	Parms.InteractingPawn = InteractingPawn;
	Parms.InteractionBeingAttempted = InteractionBeingAttempted;
	Parms.InteractionType = InteractionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleTaskLinkComponent.DisableTaskLink
// (Final, BlueprintAuthorityOnly, Native, Private, BlueprintCallable)

void UMoleTaskLinkComponent::DisableTaskLink()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLinkComponent", "DisableTaskLink");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleTaskLinkComponent.GivePlayerPermission
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AController*                      User                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMoleTaskLinkComponent::GivePlayerPermission(class AController* User)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLinkComponent", "GivePlayerPermission");

	Params::MoleTaskLinkComponent_GivePlayerPermission Parms{};

	Parms.User = User;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleTaskLinkComponent.OnOwnerActorInteract
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AFortPawn*                        InteractingPawn                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInteractionBeingAttempted              Interaction                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMoleTaskLinkComponent::OnOwnerActorInteract(const class AFortPawn* InteractingPawn, EInteractionBeingAttempted Interaction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLinkComponent", "OnOwnerActorInteract");

	Params::MoleTaskLinkComponent_OnOwnerActorInteract Parms{};

	Parms.InteractingPawn = InteractingPawn;
	Parms.Interaction = Interaction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleTaskLinkComponent.OnRep_bTaskLinkDisabled
// (Final, Native, Private)

void UMoleTaskLinkComponent::OnRep_bTaskLinkDisabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLinkComponent", "OnRep_bTaskLinkDisabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleTaskLinkComponent.RemovePlayerInteractionData
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AController*                      User                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAlsoRemovePermission                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMoleTaskLinkComponent::RemovePlayerInteractionData(class AController* User, bool bAlsoRemovePermission)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLinkComponent", "RemovePlayerInteractionData");

	Params::MoleTaskLinkComponent_RemovePlayerInteractionData Parms{};

	Parms.User = User;
	Parms.bAlsoRemovePermission = bAlsoRemovePermission;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleTaskLinkComponent.RemovePlayerPermission
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AController*                      User                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMoleTaskLinkComponent::RemovePlayerPermission(class AController* User)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLinkComponent", "RemovePlayerPermission");

	Params::MoleTaskLinkComponent_RemovePlayerPermission Parms{};

	Parms.User = User;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleTaskLinkComponent.SendGenericObjectiveStatUpdate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AController*                      User                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ObjectiveStatTag                                       (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ObjectiveStatDelta                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMoleTaskLinkComponent::SendGenericObjectiveStatUpdate(class AController* User, const struct FGameplayTag& ObjectiveStatTag, float ObjectiveStatDelta)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLinkComponent", "SendGenericObjectiveStatUpdate");

	Params::MoleTaskLinkComponent_SendGenericObjectiveStatUpdate Parms{};

	Parms.User = User;
	Parms.ObjectiveStatTag = std::move(ObjectiveStatTag);
	Parms.ObjectiveStatDelta = ObjectiveStatDelta;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleTaskLinkComponent.UpdatePlayerInteractionData
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AController*                      User                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             InteractionInfoRowName                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMoleTaskLinkComponent::UpdatePlayerInteractionData(class AController* User, const class FName InteractionInfoRowName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLinkComponent", "UpdatePlayerInteractionData");

	Params::MoleTaskLinkComponent_UpdatePlayerInteractionData Parms{};

	Parms.User = User;
	Parms.InteractionInfoRowName = InteractionInfoRowName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleTaskLinkComponent.GetInteractionString
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class AFortPawn*                        InteractingPawn                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInteractionBeingAttempted              InteractionBeingAttempted                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UMoleTaskLinkComponent::GetInteractionString(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLinkComponent", "GetInteractionString");

	Params::MoleTaskLinkComponent_GetInteractionString Parms{};

	Parms.InteractingPawn = InteractingPawn;
	Parms.InteractionBeingAttempted = InteractionBeingAttempted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleTaskLinkComponent.GetInteractionTime
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class AFortPawn*                        InteractingPawn                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInteractionBeingAttempted              InteractionBeingAttempted                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMoleTaskLinkComponent::GetInteractionTime(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLinkComponent", "GetInteractionTime");

	Params::MoleTaskLinkComponent_GetInteractionTime Parms{};

	Parms.InteractingPawn = InteractingPawn;
	Parms.InteractionBeingAttempted = InteractionBeingAttempted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleTaskLinkComponent.GetTaskTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UMoleTaskLinkComponent::GetTaskTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLinkComponent", "GetTaskTag");

	Params::MoleTaskLinkComponent_GetTaskTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleTaskLinkComponent.HasPlayerPermission
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AController*                      User                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMoleTaskLinkComponent::HasPlayerPermission(class AController* User) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLinkComponent", "HasPlayerPermission");

	Params::MoleTaskLinkComponent_HasPlayerPermission Parms{};

	Parms.User = User;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleTaskLinkComponent.IsTaskLinkDisabled
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMoleTaskLinkComponent::IsTaskLinkDisabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLinkComponent", "IsTaskLinkDisabled");

	Params::MoleTaskLinkComponent_IsTaskLinkDisabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleTaskLogic.OnRep_ParentTaskAsset
// (Native, Protected)

void UMoleTaskLogic::OnRep_ParentTaskAsset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLogic", "OnRep_ParentTaskAsset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleTaskLogic.OnRep_ParentTaskHandle
// (Native, Protected)

void UMoleTaskLogic::OnRep_ParentTaskHandle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLogic", "OnRep_ParentTaskHandle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleTaskLogicObjective_GenericStat.OnTaskLinkComponentGenericStatChanged
// (Native, Protected)
// Parameters:
// class UMoleTaskLinkComponent*           InTaskLinkComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InUser                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     InObjectiveStatTag                                     (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InObjectiveStatDelta                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMoleTaskLogicObjective_GenericStat::OnTaskLinkComponentGenericStatChanged(class UMoleTaskLinkComponent* InTaskLinkComponent, class AController* InUser, const struct FGameplayTag& InObjectiveStatTag, float InObjectiveStatDelta)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLogicObjective_GenericStat", "OnTaskLinkComponentGenericStatChanged");

	Params::MoleTaskLogicObjective_GenericStat_OnTaskLinkComponentGenericStatChanged Parms{};

	Parms.InTaskLinkComponent = InTaskLinkComponent;
	Parms.InUser = InUser;
	Parms.InObjectiveStatTag = std::move(InObjectiveStatTag);
	Parms.InObjectiveStatDelta = InObjectiveStatDelta;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleTaskLogicObjective_Interact.OnTaskLinkComponentInteract
// (Native, Protected)
// Parameters:
// class UMoleTaskLinkComponent*           TaskLinkComponent                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortPawn*                        InteractingPawn                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInteractionBeingAttempted              InteractionType                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMoleTaskLogicObjective_Interact::OnTaskLinkComponentInteract(class UMoleTaskLinkComponent* TaskLinkComponent, const class AFortPawn* InteractingPawn, EInteractionBeingAttempted InteractionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskLogicObjective_Interact", "OnTaskLinkComponentInteract");

	Params::MoleTaskLogicObjective_Interact_OnTaskLinkComponentInteract Parms{};

	Parms.TaskLinkComponent = TaskLinkComponent;
	Parms.InteractingPawn = InteractingPawn;
	Parms.InteractionType = InteractionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleTaskManagerComponent.GetMoleCurrentScore
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMoleTaskManagerComponent::GetMoleCurrentScore(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoleTaskManagerComponent", "GetMoleCurrentScore");

	Params::MoleTaskManagerComponent_GetMoleCurrentScore Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleTaskManagerComponent.GetMoleScoreGoal
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMoleTaskManagerComponent::GetMoleScoreGoal(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoleTaskManagerComponent", "GetMoleScoreGoal");

	Params::MoleTaskManagerComponent_GetMoleScoreGoal Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleTaskManagerComponent.GetTaskActorComponentForGameplayTag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     TaskTag                                                (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMoleTaskLinkComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMoleTaskLinkComponent* UMoleTaskManagerComponent::GetTaskActorComponentForGameplayTag(const class UObject* WorldContextObject, const struct FGameplayTag& TaskTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoleTaskManagerComponent", "GetTaskActorComponentForGameplayTag");

	Params::MoleTaskManagerComponent_GetTaskActorComponentForGameplayTag Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.TaskTag = std::move(TaskTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleTaskManagerComponent.GetTaskActorComponentsMatchingGameplayTag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     TaskRootTag                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UMoleTaskLinkComponent*>   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UMoleTaskLinkComponent*> UMoleTaskManagerComponent::GetTaskActorComponentsMatchingGameplayTag(const class UObject* WorldContextObject, const struct FGameplayTag& TaskRootTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoleTaskManagerComponent", "GetTaskActorComponentsMatchingGameplayTag");

	Params::MoleTaskManagerComponent_GetTaskActorComponentsMatchingGameplayTag Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.TaskRootTag = std::move(TaskRootTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleTaskManagerComponent.GetTaskActorComponentsMatchingGameplayTagContainer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            TaskTagContainer                                       (Parm, NativeAccessSpecifierPublic)
// TArray<class UMoleTaskLinkComponent*>   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UMoleTaskLinkComponent*> UMoleTaskManagerComponent::GetTaskActorComponentsMatchingGameplayTagContainer(const class UObject* WorldContextObject, const struct FGameplayTagContainer& TaskTagContainer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoleTaskManagerComponent", "GetTaskActorComponentsMatchingGameplayTagContainer");

	Params::MoleTaskManagerComponent_GetTaskActorComponentsMatchingGameplayTagContainer Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.TaskTagContainer = std::move(TaskTagContainer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleTaskManagerComponent.GetTaskActorForGameplayTag
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     TaskTag                                                (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UMoleTaskManagerComponent::GetTaskActorForGameplayTag(const class UObject* WorldContextObject, const struct FGameplayTag& TaskTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoleTaskManagerComponent", "GetTaskActorForGameplayTag");

	Params::MoleTaskManagerComponent_GetTaskActorForGameplayTag Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.TaskTag = std::move(TaskTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleTaskManagerComponent.GetTaskActorsMatchingGameplayTag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     TaskRootTag                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AActor*> UMoleTaskManagerComponent::GetTaskActorsMatchingGameplayTag(const class UObject* WorldContextObject, const struct FGameplayTag& TaskRootTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoleTaskManagerComponent", "GetTaskActorsMatchingGameplayTag");

	Params::MoleTaskManagerComponent_GetTaskActorsMatchingGameplayTag Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.TaskRootTag = std::move(TaskRootTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleTaskManagerComponent.GetTaskActorsMatchingGameplayTagContainer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            TaskTagContainer                                       (Parm, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AActor*> UMoleTaskManagerComponent::GetTaskActorsMatchingGameplayTagContainer(const class UObject* WorldContextObject, const struct FGameplayTagContainer& TaskTagContainer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoleTaskManagerComponent", "GetTaskActorsMatchingGameplayTagContainer");

	Params::MoleTaskManagerComponent_GetTaskActorsMatchingGameplayTagContainer Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.TaskTagContainer = std::move(TaskTagContainer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleTaskManagerComponent.OnRep_AvailableTaskList
// (Final, Native, Protected)

void UMoleTaskManagerComponent::OnRep_AvailableTaskList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskManagerComponent", "OnRep_AvailableTaskList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleTaskManagerComponent.OnRep_ScoreData
// (Final, Native, Private)

void UMoleTaskManagerComponent::OnRep_ScoreData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskManagerComponent", "OnRep_ScoreData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleTaskPoint.GetMoleTaskLinkComponent
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMoleTaskLinkComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMoleTaskLinkComponent* AMoleTaskPoint::GetMoleTaskLinkComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskPoint", "GetMoleTaskLinkComponent");

	Params::MoleTaskPoint_GetMoleTaskLinkComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function MoleGameRuntime.MoleTaskPointManagerComponent.ResetTaskPointManager
// (Event, Public, BlueprintEvent)

void UMoleTaskPointManagerComponent::ResetTaskPointManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTaskPointManagerComponent", "ResetTaskPointManager");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MoleGameRuntime.MoleTeleportAllSabotageAbility.OnPlayerTeleported
// (Event, Protected, BlueprintEvent)
// Parameters:
// class APlayerState*                     TeleportedPlayer                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMoleTeleportAllSabotageAbility::OnPlayerTeleported(class APlayerState* TeleportedPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleTeleportAllSabotageAbility", "OnPlayerTeleported");

	Params::MoleTeleportAllSabotageAbility_OnPlayerTeleported Parms{};

	Parms.TeleportedPlayer = TeleportedPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MoleGameRuntime.MoleVotingComponent.ServerSkipVote
// (Net, NetReliable, Native, Event, Public, NetServer)

void UMoleVotingComponent::ServerSkipVote()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleVotingComponent", "ServerSkipVote");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleVotingComponent.ServerVote
// (Net, NetReliable, Native, Event, Protected, NetServer)

void UMoleVotingComponent::ServerVote()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleVotingComponent", "ServerVote");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleVotingStateMachine.OnRep_VoteList
// (Native, Protected)

void UMoleVotingStateMachine::OnRep_VoteList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleVotingStateMachine", "OnRep_VoteList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleVotingState_Discussion.OnRep_DiscussionFinishServerTime
// (Final, Native, Protected)

void UMoleVotingState_Discussion::OnRep_DiscussionFinishServerTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleVotingState_Discussion", "OnRep_DiscussionFinishServerTime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleVotingState_ResultDisplay.OnRep_VotingResolutionData
// (Final, Native, Protected)

void UMoleVotingState_ResultDisplay::OnRep_VotingResolutionData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleVotingState_ResultDisplay", "OnRep_VotingResolutionData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MoleGameRuntime.MoleVotingState_VoteCasting.OnRep_ServerFinishTime
// (Final, Native, Private)

void UMoleVotingState_VoteCasting::OnRep_ServerFinishTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoleVotingState_VoteCasting", "OnRep_ServerFinishTime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

