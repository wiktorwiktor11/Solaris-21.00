#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PlayerRiderComponent

#include "Basic.hpp"

#include "GameplayTags_0_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "RidingCodeRuntime_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass PlayerRiderComponent.PlayerRiderComponent_C
// 0x00D8 (0x06B8 - 0x05E0)
class UPlayerRiderComponent_C final : public UControllingRiderComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x05E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FGameplayTagContainer                  T_PlayerIsRiding;                                  // 0x05E8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_PlayerIsRiding;                                 // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        FortPlayerRef;                                     // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         JumpOnMountDistanceCheck;                          // 0x0618(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61C[0x4];                                      // 0x061C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class FText Name, const struct FSlateBrush& Icon, class AActor* RidableActor)> RiderUINewStats;                                   // 0x0620(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class AActor* RidableActor)> RiderUIEnd;                                        // 0x0630(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         targetEnergy;                                      // 0x0640(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         targetHealth;                                      // 0x0644(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  T_CannotRideBucket;                                // 0x0648(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(float Energy)>  RiderUIUpdateEnergy;                               // 0x0668(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(float Health)>  RiderUIUpdateHealth;                               // 0x0678(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class AActor*                                 CachedRidableActor;                                // 0x0688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  Cannot_Ride_Rider_Bucket;                          // 0x0690(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          ShouldTriggerStopOnEvents;                         // 0x06B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Added_42EF586645CCFF06FFA4D9A5D59B1298();
	void Added_A83C775344FE0F6BDAAC4B971F57425E();
	void EventReceived_3DA19BC649FB853BA2CC0FADFF8D08F6(const struct FGameplayEventData& Payload);
	void EventReceived_E5B5FB5340DB5660002329825657B406(const struct FGameplayEventData& Payload);
	void ExecuteUbergraph_PlayerRiderComponent(int32 EntryPoint);
	void GetJumpInfo(class AActor* TargetActor, class UActorComponent** TargetActorComponent, float* JumpAttach_GroundHeightMin, float* JumpAttach_GroundHeightBuffer, bool* UseAltRidingMessage);
	void GetRidingInfoFromTarget(float* JumpAttachGroundHeightMin, float* JumpAttachGroundHeightBuffer, bool* UsesAltRidingMessage);
	void HandleStartedRiding(class URidableComponent* Ridable);
	void HandleStoppedRiding(class URidableComponent* Ridable);
	void HandleTrackingRidables();
	void MovementModeChanged(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode);
	void OnRep_targetEnergy();
	void OnRep_targetHealth();
	void ReceiveBeginPlay();
	void RiderUIEndClient(class AActor* Ridable);
	void RiderUIStartClient(const class FText& Name_0, const struct FSlateBrush& Icon, class AActor* Ridable);
	void SetTargetHealth(float targetHealth_0);
	void TestIfValidForRidingAttempt(class UObject* Object, bool* Success, class UObject** TargetObject, bool* UseAltRidingMessage);
	void ToggleRiding(class AActor* PlayerPawn, class AActor* Target, bool ShouldRide, bool* bChangedRiding);
	void ToggleRidingAlternative();
	void ToggleRidingOnServer(class UObject* TargetObject, bool UseAltRidingMessage);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PlayerRiderComponent_C">();
	}
	static class UPlayerRiderComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerRiderComponent_C>();
	}
};
static_assert(alignof(UPlayerRiderComponent_C) == 0x000008, "Wrong alignment on UPlayerRiderComponent_C");
static_assert(sizeof(UPlayerRiderComponent_C) == 0x0006B8, "Wrong size on UPlayerRiderComponent_C");
static_assert(offsetof(UPlayerRiderComponent_C, UberGraphFrame) == 0x0005E0, "Member 'UPlayerRiderComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UPlayerRiderComponent_C, T_PlayerIsRiding) == 0x0005E8, "Member 'UPlayerRiderComponent_C::T_PlayerIsRiding' has a wrong offset!");
static_assert(offsetof(UPlayerRiderComponent_C, GE_PlayerIsRiding) == 0x000608, "Member 'UPlayerRiderComponent_C::GE_PlayerIsRiding' has a wrong offset!");
static_assert(offsetof(UPlayerRiderComponent_C, FortPlayerRef) == 0x000610, "Member 'UPlayerRiderComponent_C::FortPlayerRef' has a wrong offset!");
static_assert(offsetof(UPlayerRiderComponent_C, JumpOnMountDistanceCheck) == 0x000618, "Member 'UPlayerRiderComponent_C::JumpOnMountDistanceCheck' has a wrong offset!");
static_assert(offsetof(UPlayerRiderComponent_C, RiderUINewStats) == 0x000620, "Member 'UPlayerRiderComponent_C::RiderUINewStats' has a wrong offset!");
static_assert(offsetof(UPlayerRiderComponent_C, RiderUIEnd) == 0x000630, "Member 'UPlayerRiderComponent_C::RiderUIEnd' has a wrong offset!");
static_assert(offsetof(UPlayerRiderComponent_C, targetEnergy) == 0x000640, "Member 'UPlayerRiderComponent_C::targetEnergy' has a wrong offset!");
static_assert(offsetof(UPlayerRiderComponent_C, targetHealth) == 0x000644, "Member 'UPlayerRiderComponent_C::targetHealth' has a wrong offset!");
static_assert(offsetof(UPlayerRiderComponent_C, T_CannotRideBucket) == 0x000648, "Member 'UPlayerRiderComponent_C::T_CannotRideBucket' has a wrong offset!");
static_assert(offsetof(UPlayerRiderComponent_C, RiderUIUpdateEnergy) == 0x000668, "Member 'UPlayerRiderComponent_C::RiderUIUpdateEnergy' has a wrong offset!");
static_assert(offsetof(UPlayerRiderComponent_C, RiderUIUpdateHealth) == 0x000678, "Member 'UPlayerRiderComponent_C::RiderUIUpdateHealth' has a wrong offset!");
static_assert(offsetof(UPlayerRiderComponent_C, CachedRidableActor) == 0x000688, "Member 'UPlayerRiderComponent_C::CachedRidableActor' has a wrong offset!");
static_assert(offsetof(UPlayerRiderComponent_C, Cannot_Ride_Rider_Bucket) == 0x000690, "Member 'UPlayerRiderComponent_C::Cannot_Ride_Rider_Bucket' has a wrong offset!");
static_assert(offsetof(UPlayerRiderComponent_C, ShouldTriggerStopOnEvents) == 0x0006B0, "Member 'UPlayerRiderComponent_C::ShouldTriggerStopOnEvents' has a wrong offset!");

}

