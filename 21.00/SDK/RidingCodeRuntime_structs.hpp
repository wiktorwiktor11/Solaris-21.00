#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RidingCodeRuntime

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_0_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// Enum RidingCodeRuntime.ERidingControlInputStyle
// NumValues: 0x0003
enum class ERidingControlInputStyle : uint8
{
	SteeringControl                          = 0,
	DirectControl                            = 1,
	ERidingControlInputStyle_MAX             = 2,
};

// ScriptStruct RidingCodeRuntime.RidingAttachmentBoundsOverride
// 0x0038 (0x0038 - 0x0000)
struct FRidingAttachmentBoundsOverride final
{
public:
	bool                                          bUseOverride;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AttachSoftBounds;                                  // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AttachHardBounds;                                  // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRidingAttachmentBoundsOverride) == 0x000008, "Wrong alignment on FRidingAttachmentBoundsOverride");
static_assert(sizeof(FRidingAttachmentBoundsOverride) == 0x000038, "Wrong size on FRidingAttachmentBoundsOverride");
static_assert(offsetof(FRidingAttachmentBoundsOverride, bUseOverride) == 0x000000, "Member 'FRidingAttachmentBoundsOverride::bUseOverride' has a wrong offset!");
static_assert(offsetof(FRidingAttachmentBoundsOverride, AttachSoftBounds) == 0x000008, "Member 'FRidingAttachmentBoundsOverride::AttachSoftBounds' has a wrong offset!");
static_assert(offsetof(FRidingAttachmentBoundsOverride, AttachHardBounds) == 0x000020, "Member 'FRidingAttachmentBoundsOverride::AttachHardBounds' has a wrong offset!");

// ScriptStruct RidingCodeRuntime.RidingControlInputStateReliable
// 0x0001 (0x0001 - 0x0000)
struct FRidingControlInputStateReliable final
{
public:
	uint8                                         bIsJumping : 1;                                    // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsUsingAbility : 1;                               // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
};
static_assert(alignof(FRidingControlInputStateReliable) == 0x000001, "Wrong alignment on FRidingControlInputStateReliable");
static_assert(sizeof(FRidingControlInputStateReliable) == 0x000001, "Wrong size on FRidingControlInputStateReliable");

// ScriptStruct RidingCodeRuntime.RiderDismountLaunchVelocity
// 0x00A0 (0x00A0 - 0x0000)
struct FRiderDismountLaunchVelocity final
{
public:
	struct FScalableFloat                         DismountVelocityMultiplier;                        // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         DismountVelocityBaseForwardVelocity;               // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         DismountVelocityBaseRightVelocity;                 // 0x0050(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         DismountVelocityBaseUpVelocity;                    // 0x0078(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRiderDismountLaunchVelocity) == 0x000008, "Wrong alignment on FRiderDismountLaunchVelocity");
static_assert(sizeof(FRiderDismountLaunchVelocity) == 0x0000A0, "Wrong size on FRiderDismountLaunchVelocity");
static_assert(offsetof(FRiderDismountLaunchVelocity, DismountVelocityMultiplier) == 0x000000, "Member 'FRiderDismountLaunchVelocity::DismountVelocityMultiplier' has a wrong offset!");
static_assert(offsetof(FRiderDismountLaunchVelocity, DismountVelocityBaseForwardVelocity) == 0x000028, "Member 'FRiderDismountLaunchVelocity::DismountVelocityBaseForwardVelocity' has a wrong offset!");
static_assert(offsetof(FRiderDismountLaunchVelocity, DismountVelocityBaseRightVelocity) == 0x000050, "Member 'FRiderDismountLaunchVelocity::DismountVelocityBaseRightVelocity' has a wrong offset!");
static_assert(offsetof(FRiderDismountLaunchVelocity, DismountVelocityBaseUpVelocity) == 0x000078, "Member 'FRiderDismountLaunchVelocity::DismountVelocityBaseUpVelocity' has a wrong offset!");

// ScriptStruct RidingCodeRuntime.RidingControlInputStateUnreliable
// 0x0004 (0x0004 - 0x0000)
struct FRidingControlInputStateUnreliable final
{
public:
	uint8                                         RightAlphaQuantized;                               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ForwardAlphaQuantized;                             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SteerAlphaQuantized;                               // 0x0002(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRidingControlInputStateUnreliable) == 0x000002, "Wrong alignment on FRidingControlInputStateUnreliable");
static_assert(sizeof(FRidingControlInputStateUnreliable) == 0x000004, "Wrong size on FRidingControlInputStateUnreliable");
static_assert(offsetof(FRidingControlInputStateUnreliable, RightAlphaQuantized) == 0x000000, "Member 'FRidingControlInputStateUnreliable::RightAlphaQuantized' has a wrong offset!");
static_assert(offsetof(FRidingControlInputStateUnreliable, ForwardAlphaQuantized) == 0x000001, "Member 'FRidingControlInputStateUnreliable::ForwardAlphaQuantized' has a wrong offset!");
static_assert(offsetof(FRidingControlInputStateUnreliable, SteerAlphaQuantized) == 0x000002, "Member 'FRidingControlInputStateUnreliable::SteerAlphaQuantized' has a wrong offset!");

// ScriptStruct RidingCodeRuntime.RidingControlInputState
// 0x0010 (0x0010 - 0x0000)
struct FRidingControlInputState final
{
public:
	float                                         RightAlpha;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardAlpha;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteerAlpha;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsJumping : 1;                                    // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_C_1 : 1;                                    // 0x000C(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bIsUsingAbility : 1;                               // 0x000C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRidingControlInputState) == 0x000004, "Wrong alignment on FRidingControlInputState");
static_assert(sizeof(FRidingControlInputState) == 0x000010, "Wrong size on FRidingControlInputState");
static_assert(offsetof(FRidingControlInputState, RightAlpha) == 0x000000, "Member 'FRidingControlInputState::RightAlpha' has a wrong offset!");
static_assert(offsetof(FRidingControlInputState, ForwardAlpha) == 0x000004, "Member 'FRidingControlInputState::ForwardAlpha' has a wrong offset!");
static_assert(offsetof(FRidingControlInputState, SteerAlpha) == 0x000008, "Member 'FRidingControlInputState::SteerAlpha' has a wrong offset!");

// ScriptStruct RidingCodeRuntime.RidingPlaylistBlacklistTableRow
// 0x0020 (0x0028 - 0x0008)
struct FRidingPlaylistBlacklistTableRow final : public FTableRowBase
{
public:
	struct FGameplayTagContainer                  PlaylistTags;                                      // 0x0008(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRidingPlaylistBlacklistTableRow) == 0x000008, "Wrong alignment on FRidingPlaylistBlacklistTableRow");
static_assert(sizeof(FRidingPlaylistBlacklistTableRow) == 0x000028, "Wrong size on FRidingPlaylistBlacklistTableRow");
static_assert(offsetof(FRidingPlaylistBlacklistTableRow, PlaylistTags) == 0x000008, "Member 'FRidingPlaylistBlacklistTableRow::PlaylistTags' has a wrong offset!");

// ScriptStruct RidingCodeRuntime.PrimaryFireAnimMontageAnimCoreTypeOverride
// 0x0060 (0x0060 - 0x0000)
struct FPrimaryFireAnimMontageAnimCoreTypeOverride final
{
public:
	EFortWeaponCoreAnimation                      CoreTypeToOverride;                                // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortGameplayAbilityMontageInfo        OverridingMontageInfo;                             // 0x0008(0x0058)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPrimaryFireAnimMontageAnimCoreTypeOverride) == 0x000008, "Wrong alignment on FPrimaryFireAnimMontageAnimCoreTypeOverride");
static_assert(sizeof(FPrimaryFireAnimMontageAnimCoreTypeOverride) == 0x000060, "Wrong size on FPrimaryFireAnimMontageAnimCoreTypeOverride");
static_assert(offsetof(FPrimaryFireAnimMontageAnimCoreTypeOverride, CoreTypeToOverride) == 0x000000, "Member 'FPrimaryFireAnimMontageAnimCoreTypeOverride::CoreTypeToOverride' has a wrong offset!");
static_assert(offsetof(FPrimaryFireAnimMontageAnimCoreTypeOverride, OverridingMontageInfo) == 0x000008, "Member 'FPrimaryFireAnimMontageAnimCoreTypeOverride::OverridingMontageInfo' has a wrong offset!");

// ScriptStruct RidingCodeRuntime.PrimaryFireAnimMontageTagOverride
// 0x0060 (0x0060 - 0x0000)
struct FPrimaryFireAnimMontageTagOverride final
{
public:
	struct FGameplayTag                           TagOverride;                                       // 0x0000(0x0004)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortGameplayAbilityMontageInfo        OverridingMontageInfo;                             // 0x0008(0x0058)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPrimaryFireAnimMontageTagOverride) == 0x000008, "Wrong alignment on FPrimaryFireAnimMontageTagOverride");
static_assert(sizeof(FPrimaryFireAnimMontageTagOverride) == 0x000060, "Wrong size on FPrimaryFireAnimMontageTagOverride");
static_assert(offsetof(FPrimaryFireAnimMontageTagOverride, TagOverride) == 0x000000, "Member 'FPrimaryFireAnimMontageTagOverride::TagOverride' has a wrong offset!");
static_assert(offsetof(FPrimaryFireAnimMontageTagOverride, OverridingMontageInfo) == 0x000008, "Member 'FPrimaryFireAnimMontageTagOverride::OverridingMontageInfo' has a wrong offset!");

// ScriptStruct RidingCodeRuntime.RidingAnalyticsData_Base
// 0x0058 (0x0058 - 0x0000)
struct FRidingAnalyticsData_Base
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class URiderComponent>         Rider;                                             // 0x0008(0x0028)(ExportObject, InstancedReference, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class URidableComponent>       Ridable;                                           // 0x0030(0x0028)(ExportObject, InstancedReference, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRidingAnalyticsData_Base) == 0x000008, "Wrong alignment on FRidingAnalyticsData_Base");
static_assert(sizeof(FRidingAnalyticsData_Base) == 0x000058, "Wrong size on FRidingAnalyticsData_Base");
static_assert(offsetof(FRidingAnalyticsData_Base, Rider) == 0x000008, "Member 'FRidingAnalyticsData_Base::Rider' has a wrong offset!");
static_assert(offsetof(FRidingAnalyticsData_Base, Ridable) == 0x000030, "Member 'FRidingAnalyticsData_Base::Ridable' has a wrong offset!");

// ScriptStruct RidingCodeRuntime.RidingAnalyticsData_Started
// 0x0000 (0x0058 - 0x0058)
struct FRidingAnalyticsData_Started final : public FRidingAnalyticsData_Base
{
};
static_assert(alignof(FRidingAnalyticsData_Started) == 0x000008, "Wrong alignment on FRidingAnalyticsData_Started");
static_assert(sizeof(FRidingAnalyticsData_Started) == 0x000058, "Wrong size on FRidingAnalyticsData_Started");

// ScriptStruct RidingCodeRuntime.RidingAnalyticsData_Stopped
// 0x0038 (0x0090 - 0x0058)
struct FRidingAnalyticsData_Stopped final : public FRidingAnalyticsData_Base
{
public:
	float                                         TotalRidingTime;                                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RiderStartHealth;                                  // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RiderStartShield;                                  // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RiderEndHealth;                                    // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RiderEndShield;                                    // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalDistanceTraveled;                             // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         JumpUseCount;                                      // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityUseCount;                                   // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RiderDamageDealt;                                  // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RiderDamageTaken;                                  // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RiderHealingReceived;                              // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RiderShieldGained;                                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bRidableEliminated : 1;                            // 0x0088(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRidableExhausted : 1;                             // 0x0088(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRidingAnalyticsData_Stopped) == 0x000008, "Wrong alignment on FRidingAnalyticsData_Stopped");
static_assert(sizeof(FRidingAnalyticsData_Stopped) == 0x000090, "Wrong size on FRidingAnalyticsData_Stopped");
static_assert(offsetof(FRidingAnalyticsData_Stopped, TotalRidingTime) == 0x000058, "Member 'FRidingAnalyticsData_Stopped::TotalRidingTime' has a wrong offset!");
static_assert(offsetof(FRidingAnalyticsData_Stopped, RiderStartHealth) == 0x00005C, "Member 'FRidingAnalyticsData_Stopped::RiderStartHealth' has a wrong offset!");
static_assert(offsetof(FRidingAnalyticsData_Stopped, RiderStartShield) == 0x000060, "Member 'FRidingAnalyticsData_Stopped::RiderStartShield' has a wrong offset!");
static_assert(offsetof(FRidingAnalyticsData_Stopped, RiderEndHealth) == 0x000064, "Member 'FRidingAnalyticsData_Stopped::RiderEndHealth' has a wrong offset!");
static_assert(offsetof(FRidingAnalyticsData_Stopped, RiderEndShield) == 0x000068, "Member 'FRidingAnalyticsData_Stopped::RiderEndShield' has a wrong offset!");
static_assert(offsetof(FRidingAnalyticsData_Stopped, TotalDistanceTraveled) == 0x00006C, "Member 'FRidingAnalyticsData_Stopped::TotalDistanceTraveled' has a wrong offset!");
static_assert(offsetof(FRidingAnalyticsData_Stopped, JumpUseCount) == 0x000070, "Member 'FRidingAnalyticsData_Stopped::JumpUseCount' has a wrong offset!");
static_assert(offsetof(FRidingAnalyticsData_Stopped, AbilityUseCount) == 0x000074, "Member 'FRidingAnalyticsData_Stopped::AbilityUseCount' has a wrong offset!");
static_assert(offsetof(FRidingAnalyticsData_Stopped, RiderDamageDealt) == 0x000078, "Member 'FRidingAnalyticsData_Stopped::RiderDamageDealt' has a wrong offset!");
static_assert(offsetof(FRidingAnalyticsData_Stopped, RiderDamageTaken) == 0x00007C, "Member 'FRidingAnalyticsData_Stopped::RiderDamageTaken' has a wrong offset!");
static_assert(offsetof(FRidingAnalyticsData_Stopped, RiderHealingReceived) == 0x000080, "Member 'FRidingAnalyticsData_Stopped::RiderHealingReceived' has a wrong offset!");
static_assert(offsetof(FRidingAnalyticsData_Stopped, RiderShieldGained) == 0x000084, "Member 'FRidingAnalyticsData_Stopped::RiderShieldGained' has a wrong offset!");

}

