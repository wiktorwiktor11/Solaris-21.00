#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RotatorSelectorReplaySettings

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function RotatorSelectorReplaySettings.RotatorSelectorReplaySettings_C.BndEvt__ButtonLeft_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct RotatorSelectorReplaySettings_C_BndEvt__ButtonLeft_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature final
{
public:
	class UCommonButtonLegacy*                    Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RotatorSelectorReplaySettings_C_BndEvt__ButtonLeft_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong alignment on RotatorSelectorReplaySettings_C_BndEvt__ButtonLeft_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature");
static_assert(sizeof(RotatorSelectorReplaySettings_C_BndEvt__ButtonLeft_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong size on RotatorSelectorReplaySettings_C_BndEvt__ButtonLeft_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature");
static_assert(offsetof(RotatorSelectorReplaySettings_C_BndEvt__ButtonLeft_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature, Button) == 0x000000, "Member 'RotatorSelectorReplaySettings_C_BndEvt__ButtonLeft_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature::Button' has a wrong offset!");

// Function RotatorSelectorReplaySettings.RotatorSelectorReplaySettings_C.BndEvt__ButtonRight_K2Node_ComponentBoundEvent_15_CommonButtonClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct RotatorSelectorReplaySettings_C_BndEvt__ButtonRight_K2Node_ComponentBoundEvent_15_CommonButtonClicked__DelegateSignature final
{
public:
	class UCommonButtonLegacy*                    Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RotatorSelectorReplaySettings_C_BndEvt__ButtonRight_K2Node_ComponentBoundEvent_15_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong alignment on RotatorSelectorReplaySettings_C_BndEvt__ButtonRight_K2Node_ComponentBoundEvent_15_CommonButtonClicked__DelegateSignature");
static_assert(sizeof(RotatorSelectorReplaySettings_C_BndEvt__ButtonRight_K2Node_ComponentBoundEvent_15_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong size on RotatorSelectorReplaySettings_C_BndEvt__ButtonRight_K2Node_ComponentBoundEvent_15_CommonButtonClicked__DelegateSignature");
static_assert(offsetof(RotatorSelectorReplaySettings_C_BndEvt__ButtonRight_K2Node_ComponentBoundEvent_15_CommonButtonClicked__DelegateSignature, Button) == 0x000000, "Member 'RotatorSelectorReplaySettings_C_BndEvt__ButtonRight_K2Node_ComponentBoundEvent_15_CommonButtonClicked__DelegateSignature::Button' has a wrong offset!");

// Function RotatorSelectorReplaySettings.RotatorSelectorReplaySettings_C.BndEvt__TextRotator_K2Node_ComponentBoundEvent_5_OnRotated__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct RotatorSelectorReplaySettings_C_BndEvt__TextRotator_K2Node_ComponentBoundEvent_5_OnRotated__DelegateSignature final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RotatorSelectorReplaySettings_C_BndEvt__TextRotator_K2Node_ComponentBoundEvent_5_OnRotated__DelegateSignature) == 0x000004, "Wrong alignment on RotatorSelectorReplaySettings_C_BndEvt__TextRotator_K2Node_ComponentBoundEvent_5_OnRotated__DelegateSignature");
static_assert(sizeof(RotatorSelectorReplaySettings_C_BndEvt__TextRotator_K2Node_ComponentBoundEvent_5_OnRotated__DelegateSignature) == 0x000004, "Wrong size on RotatorSelectorReplaySettings_C_BndEvt__TextRotator_K2Node_ComponentBoundEvent_5_OnRotated__DelegateSignature");
static_assert(offsetof(RotatorSelectorReplaySettings_C_BndEvt__TextRotator_K2Node_ComponentBoundEvent_5_OnRotated__DelegateSignature, Value) == 0x000000, "Member 'RotatorSelectorReplaySettings_C_BndEvt__TextRotator_K2Node_ComponentBoundEvent_5_OnRotated__DelegateSignature::Value' has a wrong offset!");

// Function RotatorSelectorReplaySettings.RotatorSelectorReplaySettings_C.ExecuteUbergraph_RotatorSelectorReplaySettings
// 0x0188 (0x0188 - 0x0000)
struct RotatorSelectorReplaySettings_C_ExecuteUbergraph_RotatorSelectorReplaySettings final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerEvent                          K2Node_Event_MouseEvent_1;                         // 0x0008(0x0090)(ConstParm)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0098(0x0040)(IsPlainOldData, NoDestructor)
	struct FPointerEvent                          K2Node_Event_MouseEvent;                           // 0x00D8(0x0090)(ConstParm)
	int32                                         K2Node_ComponentBoundEvent_Value;                  // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonLegacy*                    K2Node_ComponentBoundEvent_Button_1;               // 0x0170(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCommonButtonLegacy*                    K2Node_ComponentBoundEvent_Button;                 // 0x0178(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RotatorSelectorReplaySettings_C_ExecuteUbergraph_RotatorSelectorReplaySettings) == 0x000008, "Wrong alignment on RotatorSelectorReplaySettings_C_ExecuteUbergraph_RotatorSelectorReplaySettings");
static_assert(sizeof(RotatorSelectorReplaySettings_C_ExecuteUbergraph_RotatorSelectorReplaySettings) == 0x000188, "Wrong size on RotatorSelectorReplaySettings_C_ExecuteUbergraph_RotatorSelectorReplaySettings");
static_assert(offsetof(RotatorSelectorReplaySettings_C_ExecuteUbergraph_RotatorSelectorReplaySettings, EntryPoint) == 0x000000, "Member 'RotatorSelectorReplaySettings_C_ExecuteUbergraph_RotatorSelectorReplaySettings::EntryPoint' has a wrong offset!");
static_assert(offsetof(RotatorSelectorReplaySettings_C_ExecuteUbergraph_RotatorSelectorReplaySettings, K2Node_Event_MouseEvent_1) == 0x000008, "Member 'RotatorSelectorReplaySettings_C_ExecuteUbergraph_RotatorSelectorReplaySettings::K2Node_Event_MouseEvent_1' has a wrong offset!");
static_assert(offsetof(RotatorSelectorReplaySettings_C_ExecuteUbergraph_RotatorSelectorReplaySettings, K2Node_Event_MyGeometry) == 0x000098, "Member 'RotatorSelectorReplaySettings_C_ExecuteUbergraph_RotatorSelectorReplaySettings::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(RotatorSelectorReplaySettings_C_ExecuteUbergraph_RotatorSelectorReplaySettings, K2Node_Event_MouseEvent) == 0x0000D8, "Member 'RotatorSelectorReplaySettings_C_ExecuteUbergraph_RotatorSelectorReplaySettings::K2Node_Event_MouseEvent' has a wrong offset!");
static_assert(offsetof(RotatorSelectorReplaySettings_C_ExecuteUbergraph_RotatorSelectorReplaySettings, K2Node_ComponentBoundEvent_Value) == 0x000168, "Member 'RotatorSelectorReplaySettings_C_ExecuteUbergraph_RotatorSelectorReplaySettings::K2Node_ComponentBoundEvent_Value' has a wrong offset!");
static_assert(offsetof(RotatorSelectorReplaySettings_C_ExecuteUbergraph_RotatorSelectorReplaySettings, K2Node_ComponentBoundEvent_Button_1) == 0x000170, "Member 'RotatorSelectorReplaySettings_C_ExecuteUbergraph_RotatorSelectorReplaySettings::K2Node_ComponentBoundEvent_Button_1' has a wrong offset!");
static_assert(offsetof(RotatorSelectorReplaySettings_C_ExecuteUbergraph_RotatorSelectorReplaySettings, K2Node_ComponentBoundEvent_Button) == 0x000178, "Member 'RotatorSelectorReplaySettings_C_ExecuteUbergraph_RotatorSelectorReplaySettings::K2Node_ComponentBoundEvent_Button' has a wrong offset!");
static_assert(offsetof(RotatorSelectorReplaySettings_C_ExecuteUbergraph_RotatorSelectorReplaySettings, K2Node_Event_IsDesignTime) == 0x000180, "Member 'RotatorSelectorReplaySettings_C_ExecuteUbergraph_RotatorSelectorReplaySettings::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function RotatorSelectorReplaySettings.RotatorSelectorReplaySettings_C.Initialize
// 0x0048 (0x0048 - 0x0000)
struct RotatorSelectorReplaySettings_C_Initialize final
{
public:
	class FText                                   Display_Text;                                      // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	TArray<class FText>                           Options;                                           // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   Hover_Text;                                        // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UCommonTextBlock*                       Tab_Tooltip;                                       // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RotatorSelectorReplaySettings_C_Initialize) == 0x000008, "Wrong alignment on RotatorSelectorReplaySettings_C_Initialize");
static_assert(sizeof(RotatorSelectorReplaySettings_C_Initialize) == 0x000048, "Wrong size on RotatorSelectorReplaySettings_C_Initialize");
static_assert(offsetof(RotatorSelectorReplaySettings_C_Initialize, Display_Text) == 0x000000, "Member 'RotatorSelectorReplaySettings_C_Initialize::Display_Text' has a wrong offset!");
static_assert(offsetof(RotatorSelectorReplaySettings_C_Initialize, Options) == 0x000018, "Member 'RotatorSelectorReplaySettings_C_Initialize::Options' has a wrong offset!");
static_assert(offsetof(RotatorSelectorReplaySettings_C_Initialize, Hover_Text) == 0x000028, "Member 'RotatorSelectorReplaySettings_C_Initialize::Hover_Text' has a wrong offset!");
static_assert(offsetof(RotatorSelectorReplaySettings_C_Initialize, Tab_Tooltip) == 0x000040, "Member 'RotatorSelectorReplaySettings_C_Initialize::Tab_Tooltip' has a wrong offset!");

// Function RotatorSelectorReplaySettings.RotatorSelectorReplaySettings_C.OnFocusReceived
// 0x01B8 (0x01B8 - 0x0000)
struct RotatorSelectorReplaySettings_C_OnFocusReceived final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FFocusEvent                            InFocusEvent;                                      // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FEventReply                            ReturnValue;                                       // 0x0048(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0100(0x00B8)()
};
static_assert(alignof(RotatorSelectorReplaySettings_C_OnFocusReceived) == 0x000008, "Wrong alignment on RotatorSelectorReplaySettings_C_OnFocusReceived");
static_assert(sizeof(RotatorSelectorReplaySettings_C_OnFocusReceived) == 0x0001B8, "Wrong size on RotatorSelectorReplaySettings_C_OnFocusReceived");
static_assert(offsetof(RotatorSelectorReplaySettings_C_OnFocusReceived, MyGeometry) == 0x000000, "Member 'RotatorSelectorReplaySettings_C_OnFocusReceived::MyGeometry' has a wrong offset!");
static_assert(offsetof(RotatorSelectorReplaySettings_C_OnFocusReceived, InFocusEvent) == 0x000040, "Member 'RotatorSelectorReplaySettings_C_OnFocusReceived::InFocusEvent' has a wrong offset!");
static_assert(offsetof(RotatorSelectorReplaySettings_C_OnFocusReceived, ReturnValue) == 0x000048, "Member 'RotatorSelectorReplaySettings_C_OnFocusReceived::ReturnValue' has a wrong offset!");
static_assert(offsetof(RotatorSelectorReplaySettings_C_OnFocusReceived, CallFunc_Unhandled_ReturnValue) == 0x000100, "Member 'RotatorSelectorReplaySettings_C_OnFocusReceived::CallFunc_Unhandled_ReturnValue' has a wrong offset!");

// Function RotatorSelectorReplaySettings.RotatorSelectorReplaySettings_C.OnMouseEnter
// 0x00D0 (0x00D0 - 0x0000)
struct RotatorSelectorReplaySettings_C_OnMouseEnter final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0040(0x0090)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(RotatorSelectorReplaySettings_C_OnMouseEnter) == 0x000008, "Wrong alignment on RotatorSelectorReplaySettings_C_OnMouseEnter");
static_assert(sizeof(RotatorSelectorReplaySettings_C_OnMouseEnter) == 0x0000D0, "Wrong size on RotatorSelectorReplaySettings_C_OnMouseEnter");
static_assert(offsetof(RotatorSelectorReplaySettings_C_OnMouseEnter, MyGeometry) == 0x000000, "Member 'RotatorSelectorReplaySettings_C_OnMouseEnter::MyGeometry' has a wrong offset!");
static_assert(offsetof(RotatorSelectorReplaySettings_C_OnMouseEnter, MouseEvent) == 0x000040, "Member 'RotatorSelectorReplaySettings_C_OnMouseEnter::MouseEvent' has a wrong offset!");

// Function RotatorSelectorReplaySettings.RotatorSelectorReplaySettings_C.OnMouseLeave
// 0x0090 (0x0090 - 0x0000)
struct RotatorSelectorReplaySettings_C_OnMouseLeave final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0090)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(RotatorSelectorReplaySettings_C_OnMouseLeave) == 0x000008, "Wrong alignment on RotatorSelectorReplaySettings_C_OnMouseLeave");
static_assert(sizeof(RotatorSelectorReplaySettings_C_OnMouseLeave) == 0x000090, "Wrong size on RotatorSelectorReplaySettings_C_OnMouseLeave");
static_assert(offsetof(RotatorSelectorReplaySettings_C_OnMouseLeave, MouseEvent) == 0x000000, "Member 'RotatorSelectorReplaySettings_C_OnMouseLeave::MouseEvent' has a wrong offset!");

// Function RotatorSelectorReplaySettings.RotatorSelectorReplaySettings_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct RotatorSelectorReplaySettings_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RotatorSelectorReplaySettings_C_PreConstruct) == 0x000001, "Wrong alignment on RotatorSelectorReplaySettings_C_PreConstruct");
static_assert(sizeof(RotatorSelectorReplaySettings_C_PreConstruct) == 0x000001, "Wrong size on RotatorSelectorReplaySettings_C_PreConstruct");
static_assert(offsetof(RotatorSelectorReplaySettings_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'RotatorSelectorReplaySettings_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function RotatorSelectorReplaySettings.RotatorSelectorReplaySettings_C.Update Options
// 0x0010 (0x0010 - 0x0000)
struct RotatorSelectorReplaySettings_C_Update_Options final
{
public:
	TArray<class FText>                           Options;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(RotatorSelectorReplaySettings_C_Update_Options) == 0x000008, "Wrong alignment on RotatorSelectorReplaySettings_C_Update_Options");
static_assert(sizeof(RotatorSelectorReplaySettings_C_Update_Options) == 0x000010, "Wrong size on RotatorSelectorReplaySettings_C_Update_Options");
static_assert(offsetof(RotatorSelectorReplaySettings_C_Update_Options, Options) == 0x000000, "Member 'RotatorSelectorReplaySettings_C_Update_Options::Options' has a wrong offset!");

// Function RotatorSelectorReplaySettings.RotatorSelectorReplaySettings_C.Update Row Selector
// 0x0004 (0x0004 - 0x0000)
struct RotatorSelectorReplaySettings_C_Update_Row_Selector final
{
public:
	int32                                         Currently_Selected;                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RotatorSelectorReplaySettings_C_Update_Row_Selector) == 0x000004, "Wrong alignment on RotatorSelectorReplaySettings_C_Update_Row_Selector");
static_assert(sizeof(RotatorSelectorReplaySettings_C_Update_Row_Selector) == 0x000004, "Wrong size on RotatorSelectorReplaySettings_C_Update_Row_Selector");
static_assert(offsetof(RotatorSelectorReplaySettings_C_Update_Row_Selector, Currently_Selected) == 0x000000, "Member 'RotatorSelectorReplaySettings_C_Update_Row_Selector::Currently_Selected' has a wrong offset!");

}

