#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NPCStatusWidget

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteUI_classes.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass NPCStatusWidget.NPCStatusWidget_C
// 0x0058 (0x03E8 - 0x0390)
class UNPCStatusWidget_C final : public UNPCStatusWidgetBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0390(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNPCStatusWidgetBar_C*                  Bar_Health;                                        // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UNPCStatusWidgetBar_C*                  Bar_Shield;                                        // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_BarsPrefix;                                // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VerticalBox_BarExtensions;                         // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FTimerHandle                           VisibiltyTimer;                                    // 0x03B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(bool bVisible)> VisibilityChanged;                                 // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         StatusWidgetVisibleDuration;                       // 0x03D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentHealthPercent;                              // 0x03D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentShieldPercent;                              // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          KeepVisibilityOn;                                  // 0x03DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DD[0x3];                                      // 0x03DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPawn*                              FortPawn;                                          // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BP_HandlePlaylistExtensionWidgetCreated(class UUserWidget* Widget, EUIExtensionSlot SlotType);
	void ChangeWidgetVisibleDuration(float StatusWidgetVisibleDuration_0);
	void Construct();
	void EventHideStatus();
	void EventUpdateStatus(float Health, float Shield, bool ShowShield);
	void ExecuteUbergraph_NPCStatusWidget(int32 EntryPoint);
	void OnPawnFocused();
	void SetKeepVisibilityOn(bool KeepVisibilityOn_0);
	void TryCallEventHideByTimer();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"NPCStatusWidget_C">();
	}
	static class UNPCStatusWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNPCStatusWidget_C>();
	}
};
static_assert(alignof(UNPCStatusWidget_C) == 0x000008, "Wrong alignment on UNPCStatusWidget_C");
static_assert(sizeof(UNPCStatusWidget_C) == 0x0003E8, "Wrong size on UNPCStatusWidget_C");
static_assert(offsetof(UNPCStatusWidget_C, UberGraphFrame) == 0x000390, "Member 'UNPCStatusWidget_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UNPCStatusWidget_C, Bar_Health) == 0x000398, "Member 'UNPCStatusWidget_C::Bar_Health' has a wrong offset!");
static_assert(offsetof(UNPCStatusWidget_C, Bar_Shield) == 0x0003A0, "Member 'UNPCStatusWidget_C::Bar_Shield' has a wrong offset!");
static_assert(offsetof(UNPCStatusWidget_C, Overlay_BarsPrefix) == 0x0003A8, "Member 'UNPCStatusWidget_C::Overlay_BarsPrefix' has a wrong offset!");
static_assert(offsetof(UNPCStatusWidget_C, VerticalBox_BarExtensions) == 0x0003B0, "Member 'UNPCStatusWidget_C::VerticalBox_BarExtensions' has a wrong offset!");
static_assert(offsetof(UNPCStatusWidget_C, VisibiltyTimer) == 0x0003B8, "Member 'UNPCStatusWidget_C::VisibiltyTimer' has a wrong offset!");
static_assert(offsetof(UNPCStatusWidget_C, VisibilityChanged) == 0x0003C0, "Member 'UNPCStatusWidget_C::VisibilityChanged' has a wrong offset!");
static_assert(offsetof(UNPCStatusWidget_C, StatusWidgetVisibleDuration) == 0x0003D0, "Member 'UNPCStatusWidget_C::StatusWidgetVisibleDuration' has a wrong offset!");
static_assert(offsetof(UNPCStatusWidget_C, CurrentHealthPercent) == 0x0003D4, "Member 'UNPCStatusWidget_C::CurrentHealthPercent' has a wrong offset!");
static_assert(offsetof(UNPCStatusWidget_C, CurrentShieldPercent) == 0x0003D8, "Member 'UNPCStatusWidget_C::CurrentShieldPercent' has a wrong offset!");
static_assert(offsetof(UNPCStatusWidget_C, KeepVisibilityOn) == 0x0003DC, "Member 'UNPCStatusWidget_C::KeepVisibilityOn' has a wrong offset!");
static_assert(offsetof(UNPCStatusWidget_C, FortPawn) == 0x0003E0, "Member 'UNPCStatusWidget_C::FortPawn' has a wrong offset!");

}

