#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: XpEverywhereUI

#include "Basic.hpp"

#include "XpEverywhereUI_classes.hpp"
#include "XpEverywhereUI_parameters.hpp"


namespace SDK
{

// Function XpEverywhereUI.XpEverywhereAccoladesWidget.CloseWidget
// (Final, Native, Protected, BlueprintCallable)

void UXpEverywhereAccoladesWidget::CloseWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XpEverywhereAccoladesWidget", "CloseWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function XpEverywhereUI.XpEverywhereAccoladesWidget.OnEventAdded
// (Event, Protected, BlueprintEvent)

void UXpEverywhereAccoladesWidget::OnEventAdded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XpEverywhereAccoladesWidget", "OnEventAdded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function XpEverywhereUI.XpEverywhereAccoladesWidget.OnStompedByOtherWidget
// (Event, Protected, BlueprintEvent)

void UXpEverywhereAccoladesWidget::OnStompedByOtherWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XpEverywhereAccoladesWidget", "OnStompedByOtherWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function XpEverywhereUI.XpEverywhereAccoladesWidget.OpenWidget
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class UFortAccoladeItemDefinition*      AccoladeDef                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   XPValue                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             DisplayName                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UTexture2D>        AccoladeLargePreviewImageOverride                      (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             SimulatedName                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             SimulatedText                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EFortSimulatedXPSize                    SimulatedXpSize                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXpEverywhereAccoladesWidget::OpenWidget(const class UFortAccoladeItemDefinition* AccoladeDef, const int32 XPValue, const class FText& DisplayName, const TSoftObjectPtr<class UTexture2D>& AccoladeLargePreviewImageOverride, const class FText& SimulatedName, const class FText& SimulatedText, const EFortSimulatedXPSize SimulatedXpSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XpEverywhereAccoladesWidget", "OpenWidget");

	Params::XpEverywhereAccoladesWidget_OpenWidget Parms{};

	Parms.AccoladeDef = AccoladeDef;
	Parms.XPValue = XPValue;
	Parms.DisplayName = std::move(DisplayName);
	Parms.AccoladeLargePreviewImageOverride = AccoladeLargePreviewImageOverride;
	Parms.SimulatedName = std::move(SimulatedName);
	Parms.SimulatedText = std::move(SimulatedText);
	Parms.SimulatedXpSize = SimulatedXpSize;

	UObject::ProcessEvent(Func, &Parms);
}


// Function XpEverywhereUI.XpEverywhereAccoladesWidget.HasMoreXPEvents
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UXpEverywhereAccoladesWidget::HasMoreXPEvents() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XpEverywhereAccoladesWidget", "HasMoreXPEvents");

	Params::XpEverywhereAccoladesWidget_HasMoreXPEvents Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function XpEverywhereUI.XpEverywhereBar.DoneUpdatingXpBar
// (Final, Native, Protected, BlueprintCallable)

void UXpEverywhereBar::DoneUpdatingXpBar()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XpEverywhereBar", "DoneUpdatingXpBar");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function XpEverywhereUI.XpEverywhereBar.OnXpBarInitialized
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   CurrentXp                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CurrentLevel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CurrentRemainingRestXP                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXpEverywhereBar::OnXpBarInitialized(int32 CurrentXp, int32 CurrentLevel, int32 CurrentRemainingRestXP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XpEverywhereBar", "OnXpBarInitialized");

	Params::XpEverywhereBar_OnXpBarInitialized Parms{};

	Parms.CurrentXp = CurrentXp;
	Parms.CurrentLevel = CurrentLevel;
	Parms.CurrentRemainingRestXP = CurrentRemainingRestXP;

	UObject::ProcessEvent(Func, &Parms);
}


// Function XpEverywhereUI.XpEverywhereBar.OnXpBarUpdated
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   ShownXP                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ShownLevel                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewDesiredXP                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewDesiredLevel                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewRemainingRestXP                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXpEverywhereBar::OnXpBarUpdated(int32 ShownXP, int32 ShownLevel, int32 NewDesiredXP, int32 NewDesiredLevel, int32 NewRemainingRestXP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XpEverywhereBar", "OnXpBarUpdated");

	Params::XpEverywhereBar_OnXpBarUpdated Parms{};

	Parms.ShownXP = ShownXP;
	Parms.ShownLevel = ShownLevel;
	Parms.NewDesiredXP = NewDesiredXP;
	Parms.NewDesiredLevel = NewDesiredLevel;
	Parms.NewRemainingRestXP = NewRemainingRestXP;

	UObject::ProcessEvent(Func, &Parms);
}


// Function XpEverywhereUI.XpEverywhereBar.GetTotalXpRequiredForLevel
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   InLevel                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UXpEverywhereBar::GetTotalXpRequiredForLevel(const int32 InLevel) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XpEverywhereBar", "GetTotalXpRequiredForLevel");

	Params::XpEverywhereBar_GetTotalXpRequiredForLevel Parms{};

	Parms.InLevel = InLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function XpEverywhereUI.XpEverywhereLevelUpWidget.DoneLevelingUp
// (Final, Native, Protected, BlueprintCallable)

void UXpEverywhereLevelUpWidget::DoneLevelingUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XpEverywhereLevelUpWidget", "DoneLevelingUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function XpEverywhereUI.XpEverywhereLevelUpWidget.OnShowWidget
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   NewLevel                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXpEverywhereLevelUpWidget::OnShowWidget(const int32 NewLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XpEverywhereLevelUpWidget", "OnShowWidget");

	Params::XpEverywhereLevelUpWidget_OnShowWidget Parms{};

	Parms.NewLevel = NewLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function XpEverywhereUI.XpEverywhereLevelUpWidget.DisplayLevelUpRewards
// (Final, Native, Protected, BlueprintCallable, Const)

void UXpEverywhereLevelUpWidget::DisplayLevelUpRewards() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XpEverywhereLevelUpWidget", "DisplayLevelUpRewards");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function XpEverywhereUI.XpEverywhereReticleWidget.ForwardEvents
// (Final, Native, Protected, BlueprintCallable)

void UXpEverywhereReticleWidget::ForwardEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XpEverywhereReticleWidget", "ForwardEvents");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function XpEverywhereUI.XpEverywhereReticleWidget.HandleProfileUpdated
// (Final, Native, Protected)

void UXpEverywhereReticleWidget::HandleProfileUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XpEverywhereReticleWidget", "HandleProfileUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function XpEverywhereUI.XpEverywhereReticleWidget.UpdateRestXP
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   RestXpRemaining                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXpEverywhereReticleWidget::UpdateRestXP(int32 RestXpRemaining)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XpEverywhereReticleWidget", "UpdateRestXP");

	Params::XpEverywhereReticleWidget_UpdateRestXP Parms{};

	Parms.RestXpRemaining = RestXpRemaining;

	UObject::ProcessEvent(Func, &Parms);
}


// Function XpEverywhereUI.XpEverywhereReticleWidget.UpdateXPAmount
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   NewAmount                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundCue*                        Cue                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFortSimulatedXPSize                    SimulatedXpSize                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UXpEverywhereReticleWidget::UpdateXPAmount(int32 NewAmount, class USoundCue* Cue, const EFortSimulatedXPSize SimulatedXpSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XpEverywhereReticleWidget", "UpdateXPAmount");

	Params::XpEverywhereReticleWidget_UpdateXPAmount Parms{};

	Parms.NewAmount = NewAmount;
	Parms.Cue = Cue;
	Parms.SimulatedXpSize = SimulatedXpSize;

	UObject::ProcessEvent(Func, &Parms);
}


// Function XpEverywhereUI.XpEverywhereReticleWidget.UpdateXPSource
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             NewSourceText                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UXpEverywhereReticleWidget::UpdateXPSource(const class FText& NewSourceText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XpEverywhereReticleWidget", "UpdateXPSource");

	Params::XpEverywhereReticleWidget_UpdateXPSource Parms{};

	Parms.NewSourceText = std::move(NewSourceText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function XpEverywhereUI.XpEverywhereRewardWidget.HandleNotificationUpdateFinished
// (Final, Native, Protected)

void UXpEverywhereRewardWidget::HandleNotificationUpdateFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XpEverywhereRewardWidget", "HandleNotificationUpdateFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

