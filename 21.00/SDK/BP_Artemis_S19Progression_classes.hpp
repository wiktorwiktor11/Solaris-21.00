#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Artemis_S19Progression

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "BP_Artemis_S19_Progression_Struct_structs.hpp"
#include "Bp_E_Artemis_S19_Progression_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Artemis_S19Progression.BP_Artemis_S19Progression_C
// 0x0148 (0x03B8 - 0x0270)
class ABP_Artemis_S19Progression_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0270(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector2D>                      SnowmaskOffsets;                                   // 0x0280(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                LandscapeBias;                                     // 0x0290(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LandscapeSize;                                     // 0x02A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 SnowRT_BitArray;                                   // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              RenderTargetResolution;                            // 0x02C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     RTMaterial;                                        // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CoverageThreshold;                                 // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E4[0x4];                                      // 0x02E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, EBp_E_Artemis_S19_Progression> SnowProgressionServer;                             // 0x02E8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         DebugDrawBitArrayDuration;                         // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowBitArrayPopulation;                           // 0x033C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Release_ClearRenderTargetBitArrayOnCompletion;     // 0x033D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33E[0x2];                                      // 0x033E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              s19BitArrayPopulated;                              // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          BitArraySuccesfullyPopulated;                      // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_351[0x7];                                      // 0x0351(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 SnowRT_DiskAsset;                                  // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBP_Artemis_S19_Progression_Struct     SnowProgressionState;                              // 0x0360(0x0008)(Edit, BlueprintVisible, Net, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	TMap<class FString, EBp_E_Artemis_S19_Progression> SnowProgressionClient;                             // 0x0368(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void CallClearRenderTargetOnDisk();
	void ClearRenderTargetOnDisk();
	void ExecuteUbergraph_BP_Artemis_S19Progression(int32 EntryPoint);
	void FindAndSetSnowProgressionPhase(const TMap<class FString, EBp_E_Artemis_S19_Progression>& SnowProgressionEvents);
	void GetSnowProgressionPhase(EBp_E_Artemis_S19_Progression* SnowProgressionPhase);
	void IgnoreCalendarEventsWarningLog();
	void OnReady_60D0298240509AEB035A67BBB4E888A1();
	void OnRep_SnowProgression();
	void OnRep_SnowProgressionState();
	void PopulateBitArray();
	void QuerySnowCalendarEvents(const TMap<class FString, EBp_E_Artemis_S19_Progression>& Events, bool* EventFound, class FString* FoundEventName, float* EventTimespanRatio);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void Release_ClearRenderTarget();
	void RemoveSnowOnClient();
	void SetAllowBitArrayPopulation(bool AllowBitArrayPopulation_0);
	void SetSnowProgressionPhase(int32 Index_0);
	void SetupRT();
	void UpdateSnowProgressionMPC();
	void UpdateSnowVisualsOnClient();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Artemis_S19Progression_C">();
	}
	static class ABP_Artemis_S19Progression_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Artemis_S19Progression_C>();
	}
};
static_assert(alignof(ABP_Artemis_S19Progression_C) == 0x000008, "Wrong alignment on ABP_Artemis_S19Progression_C");
static_assert(sizeof(ABP_Artemis_S19Progression_C) == 0x0003B8, "Wrong size on ABP_Artemis_S19Progression_C");
static_assert(offsetof(ABP_Artemis_S19Progression_C, UberGraphFrame) == 0x000270, "Member 'ABP_Artemis_S19Progression_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Artemis_S19Progression_C, DefaultSceneRoot) == 0x000278, "Member 'ABP_Artemis_S19Progression_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Artemis_S19Progression_C, SnowmaskOffsets) == 0x000280, "Member 'ABP_Artemis_S19Progression_C::SnowmaskOffsets' has a wrong offset!");
static_assert(offsetof(ABP_Artemis_S19Progression_C, LandscapeBias) == 0x000290, "Member 'ABP_Artemis_S19Progression_C::LandscapeBias' has a wrong offset!");
static_assert(offsetof(ABP_Artemis_S19Progression_C, LandscapeSize) == 0x0002A8, "Member 'ABP_Artemis_S19Progression_C::LandscapeSize' has a wrong offset!");
static_assert(offsetof(ABP_Artemis_S19Progression_C, SnowRT_BitArray) == 0x0002C0, "Member 'ABP_Artemis_S19Progression_C::SnowRT_BitArray' has a wrong offset!");
static_assert(offsetof(ABP_Artemis_S19Progression_C, RenderTargetResolution) == 0x0002C8, "Member 'ABP_Artemis_S19Progression_C::RenderTargetResolution' has a wrong offset!");
static_assert(offsetof(ABP_Artemis_S19Progression_C, RTMaterial) == 0x0002D8, "Member 'ABP_Artemis_S19Progression_C::RTMaterial' has a wrong offset!");
static_assert(offsetof(ABP_Artemis_S19Progression_C, CoverageThreshold) == 0x0002E0, "Member 'ABP_Artemis_S19Progression_C::CoverageThreshold' has a wrong offset!");
static_assert(offsetof(ABP_Artemis_S19Progression_C, SnowProgressionServer) == 0x0002E8, "Member 'ABP_Artemis_S19Progression_C::SnowProgressionServer' has a wrong offset!");
static_assert(offsetof(ABP_Artemis_S19Progression_C, DebugDrawBitArrayDuration) == 0x000338, "Member 'ABP_Artemis_S19Progression_C::DebugDrawBitArrayDuration' has a wrong offset!");
static_assert(offsetof(ABP_Artemis_S19Progression_C, AllowBitArrayPopulation) == 0x00033C, "Member 'ABP_Artemis_S19Progression_C::AllowBitArrayPopulation' has a wrong offset!");
static_assert(offsetof(ABP_Artemis_S19Progression_C, Release_ClearRenderTargetBitArrayOnCompletion) == 0x00033D, "Member 'ABP_Artemis_S19Progression_C::Release_ClearRenderTargetBitArrayOnCompletion' has a wrong offset!");
static_assert(offsetof(ABP_Artemis_S19Progression_C, s19BitArrayPopulated) == 0x000340, "Member 'ABP_Artemis_S19Progression_C::s19BitArrayPopulated' has a wrong offset!");
static_assert(offsetof(ABP_Artemis_S19Progression_C, BitArraySuccesfullyPopulated) == 0x000350, "Member 'ABP_Artemis_S19Progression_C::BitArraySuccesfullyPopulated' has a wrong offset!");
static_assert(offsetof(ABP_Artemis_S19Progression_C, SnowRT_DiskAsset) == 0x000358, "Member 'ABP_Artemis_S19Progression_C::SnowRT_DiskAsset' has a wrong offset!");
static_assert(offsetof(ABP_Artemis_S19Progression_C, SnowProgressionState) == 0x000360, "Member 'ABP_Artemis_S19Progression_C::SnowProgressionState' has a wrong offset!");
static_assert(offsetof(ABP_Artemis_S19Progression_C, SnowProgressionClient) == 0x000368, "Member 'ABP_Artemis_S19Progression_C::SnowProgressionClient' has a wrong offset!");

}

