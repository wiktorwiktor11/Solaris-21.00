#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Athena_BuildingProp_Explosive

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Athena_DamageStateParticles_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Athena_BuildingProp_Explosive.Athena_BuildingProp_Explosive_C
// 0x0198 (0x1008 - 0x0E70)
class AAthena_BuildingProp_Explosive_C : public ABuildingProp
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0E70(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        PreExplodeAudioComponent;                          // 0x0E78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FAthena_DamageStateParticles>   DamageStateParticleSystems;                        // 0x0E80(0x0010)(Edit, BlueprintVisible)
	TArray<class UParticleSystemComponent*>       SpawnedDamageStateEmitters;                        // 0x0E90(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	float                                         KnockbackAmount;                                   // 0x0EA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EA4[0x4];                                      // 0x0EA4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CurrentPlayerToLaunch;                             // 0x0EA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_Explode;                                        // 0x0EB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ExplosionCUE;                                      // 0x0EB8(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          HealthIsZero;                                      // 0x0EBC(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanGenerateResources;                              // 0x0EBD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EBE[0x2];                                      // 0x0EBE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Radius;                                            // 0x0EC0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         KnockbackStrength;                                 // 0x0EE8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	class USoundBase*                             PreExplodeSound;                                   // 0x0F10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OnFireThreshold;                                   // 0x0F18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           FireCue;                                           // 0x0F1C(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldDie;                                        // 0x0F20(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F21[0x7];                                      // 0x0F21(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  LastDamageInstigator;                              // 0x0F28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         VehicleDamage;                                     // 0x0F30(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         VehicleImpulseStrength;                            // 0x0F58(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         VehicleImpulseStrengthZ;                           // 0x0F80(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          DestroyedByPickAxe;                                // 0x0FA8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FA9[0x7];                                      // 0x0FA9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         TargetedActors;                                    // 0x0FB0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          ExplosiveFxRepNotify;                              // 0x0FC0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC1[0x7];                                      // 0x0FC1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 FireInstigator;                                    // 0x0FC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  ExplosiveDamageTag;                                // 0x0FD0(0x0020)(Edit, BlueprintVisible)
	struct FVector                                ExplosionTraceOffset;                              // 0x0FF0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ApplyDamageToActor(class AActor* Actor_to_Damage);
	void DeactivateEmitter();
	void DestroyHitActors(class AActor* HitActor);
	void ExecuteExplosionOnActor(class AActor* ActorToExplode);
	void ExecuteFireApplicationInRadiusIfCurieEnabled(class AActor* FireApplicationTarget);
	void ExecuteUbergraph_Athena_BuildingProp_Explosive(int32 EntryPoint);
	void ExplodeAndDie();
	void ExplodeAndDieStaggered();
	void ExplosionTrace();
	void FastExplodeAndDie();
	void GrowTimeline();
	void LaunchActor(class AActor* Actor_To_Launch);
	void ManuallyTriggerFuse();
	void MinigameIsInProgress(bool IgnoreWarmUp, bool* HasValidMinigame, bool* IsRunning);
	void OnCompletion(bool WasCancelled);
	void OnCurieElementInteract_BP(const struct FCurieContainerHandle& CurieContainerHandle, const struct FGameplayTag& ElementTag, const struct FCurieInteractParamsHandle& InteractParamsHandle);
	void OnCurieElementInteractBegun_BP(const struct FCurieContainerHandle& CurieContainerHandle, const struct FGameplayTag& ElementTag, const struct FCurieInteractParamsHandle& InteractParamsHandle);
	void OnDamageServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnDeathPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnDeathServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnFireFx();
	void OnRep_DamageStateNotify();
	void OnRep_ExplosiveFxRepNotify();
	void ReceiveBeginPlay();
	void ShouldCancelExplosion(bool* Return);
	bool ShouldDie(float Damage, class AController* EventInstigator, class AActor* DamageCauser);
	void StartDetonation();
	void StopGrowAudio();
	void TriggeredByGasPump();

	bool BlueprintCanAttemptGenerateResources(const struct FGameplayTagContainer& InTags, class AController* InstigatorController) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Athena_BuildingProp_Explosive_C">();
	}
	static class AAthena_BuildingProp_Explosive_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAthena_BuildingProp_Explosive_C>();
	}
};
static_assert(alignof(AAthena_BuildingProp_Explosive_C) == 0x000008, "Wrong alignment on AAthena_BuildingProp_Explosive_C");
static_assert(sizeof(AAthena_BuildingProp_Explosive_C) == 0x001008, "Wrong size on AAthena_BuildingProp_Explosive_C");
static_assert(offsetof(AAthena_BuildingProp_Explosive_C, UberGraphFrame) == 0x000E70, "Member 'AAthena_BuildingProp_Explosive_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AAthena_BuildingProp_Explosive_C, PreExplodeAudioComponent) == 0x000E78, "Member 'AAthena_BuildingProp_Explosive_C::PreExplodeAudioComponent' has a wrong offset!");
static_assert(offsetof(AAthena_BuildingProp_Explosive_C, DamageStateParticleSystems) == 0x000E80, "Member 'AAthena_BuildingProp_Explosive_C::DamageStateParticleSystems' has a wrong offset!");
static_assert(offsetof(AAthena_BuildingProp_Explosive_C, SpawnedDamageStateEmitters) == 0x000E90, "Member 'AAthena_BuildingProp_Explosive_C::SpawnedDamageStateEmitters' has a wrong offset!");
static_assert(offsetof(AAthena_BuildingProp_Explosive_C, KnockbackAmount) == 0x000EA0, "Member 'AAthena_BuildingProp_Explosive_C::KnockbackAmount' has a wrong offset!");
static_assert(offsetof(AAthena_BuildingProp_Explosive_C, CurrentPlayerToLaunch) == 0x000EA8, "Member 'AAthena_BuildingProp_Explosive_C::CurrentPlayerToLaunch' has a wrong offset!");
static_assert(offsetof(AAthena_BuildingProp_Explosive_C, GE_Explode) == 0x000EB0, "Member 'AAthena_BuildingProp_Explosive_C::GE_Explode' has a wrong offset!");
static_assert(offsetof(AAthena_BuildingProp_Explosive_C, ExplosionCUE) == 0x000EB8, "Member 'AAthena_BuildingProp_Explosive_C::ExplosionCUE' has a wrong offset!");
static_assert(offsetof(AAthena_BuildingProp_Explosive_C, HealthIsZero) == 0x000EBC, "Member 'AAthena_BuildingProp_Explosive_C::HealthIsZero' has a wrong offset!");
static_assert(offsetof(AAthena_BuildingProp_Explosive_C, CanGenerateResources) == 0x000EBD, "Member 'AAthena_BuildingProp_Explosive_C::CanGenerateResources' has a wrong offset!");
static_assert(offsetof(AAthena_BuildingProp_Explosive_C, Radius) == 0x000EC0, "Member 'AAthena_BuildingProp_Explosive_C::Radius' has a wrong offset!");
static_assert(offsetof(AAthena_BuildingProp_Explosive_C, KnockbackStrength) == 0x000EE8, "Member 'AAthena_BuildingProp_Explosive_C::KnockbackStrength' has a wrong offset!");
static_assert(offsetof(AAthena_BuildingProp_Explosive_C, PreExplodeSound) == 0x000F10, "Member 'AAthena_BuildingProp_Explosive_C::PreExplodeSound' has a wrong offset!");
static_assert(offsetof(AAthena_BuildingProp_Explosive_C, OnFireThreshold) == 0x000F18, "Member 'AAthena_BuildingProp_Explosive_C::OnFireThreshold' has a wrong offset!");
static_assert(offsetof(AAthena_BuildingProp_Explosive_C, FireCue) == 0x000F1C, "Member 'AAthena_BuildingProp_Explosive_C::FireCue' has a wrong offset!");
static_assert(offsetof(AAthena_BuildingProp_Explosive_C, bShouldDie) == 0x000F20, "Member 'AAthena_BuildingProp_Explosive_C::bShouldDie' has a wrong offset!");
static_assert(offsetof(AAthena_BuildingProp_Explosive_C, LastDamageInstigator) == 0x000F28, "Member 'AAthena_BuildingProp_Explosive_C::LastDamageInstigator' has a wrong offset!");
static_assert(offsetof(AAthena_BuildingProp_Explosive_C, VehicleDamage) == 0x000F30, "Member 'AAthena_BuildingProp_Explosive_C::VehicleDamage' has a wrong offset!");
static_assert(offsetof(AAthena_BuildingProp_Explosive_C, VehicleImpulseStrength) == 0x000F58, "Member 'AAthena_BuildingProp_Explosive_C::VehicleImpulseStrength' has a wrong offset!");
static_assert(offsetof(AAthena_BuildingProp_Explosive_C, VehicleImpulseStrengthZ) == 0x000F80, "Member 'AAthena_BuildingProp_Explosive_C::VehicleImpulseStrengthZ' has a wrong offset!");
static_assert(offsetof(AAthena_BuildingProp_Explosive_C, DestroyedByPickAxe) == 0x000FA8, "Member 'AAthena_BuildingProp_Explosive_C::DestroyedByPickAxe' has a wrong offset!");
static_assert(offsetof(AAthena_BuildingProp_Explosive_C, TargetedActors) == 0x000FB0, "Member 'AAthena_BuildingProp_Explosive_C::TargetedActors' has a wrong offset!");
static_assert(offsetof(AAthena_BuildingProp_Explosive_C, ExplosiveFxRepNotify) == 0x000FC0, "Member 'AAthena_BuildingProp_Explosive_C::ExplosiveFxRepNotify' has a wrong offset!");
static_assert(offsetof(AAthena_BuildingProp_Explosive_C, FireInstigator) == 0x000FC8, "Member 'AAthena_BuildingProp_Explosive_C::FireInstigator' has a wrong offset!");
static_assert(offsetof(AAthena_BuildingProp_Explosive_C, ExplosiveDamageTag) == 0x000FD0, "Member 'AAthena_BuildingProp_Explosive_C::ExplosiveDamageTag' has a wrong offset!");
static_assert(offsetof(AAthena_BuildingProp_Explosive_C, ExplosionTraceOffset) == 0x000FF0, "Member 'AAthena_BuildingProp_Explosive_C::ExplosionTraceOffset' has a wrong offset!");

}

