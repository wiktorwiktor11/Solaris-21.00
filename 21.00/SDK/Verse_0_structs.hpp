#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Verse_0

#include "Basic.hpp"

#include "Verse_structs.hpp"
#include "SolarisInterop_structs.hpp"


namespace SDK
{

// SolarisGeneratedEnum Verse.named_color
// NumValues: 0x0093
enum class Enamed_color : uint8
{
	AliceBlue                                = 0,
	AntiqueWhite                             = 1,
	Aqua                                     = 2,
	Aquamarine                               = 3,
	Azure                                    = 4,
	Beige                                    = 5,
	Bisque                                   = 6,
	Black                                    = 7,
	BlanchedAlmond                           = 8,
	Blue                                     = 9,
	BlueViolet                               = 10,
	Brown                                    = 11,
	Burlywood                                = 12,
	CadetBlue                                = 13,
	Chartreuse                               = 14,
	Chocolate                                = 15,
	Coral                                    = 16,
	CornflowerBlue                           = 17,
	Cornsilk                                 = 18,
	Crimson                                  = 19,
	Cyan                                     = 20,
	DarkBlue                                 = 21,
	DarkCyan                                 = 22,
	DarkGoldenrod                            = 23,
	DarkGray                                 = 24,
	DarkGreen                                = 25,
	DarkGrey                                 = 26,
	DarkKhaki                                = 27,
	DarkMagenta                              = 28,
	DarkOliveGreen                           = 29,
	DarkOrange                               = 30,
	DarkOrchid                               = 31,
	DarkRed                                  = 32,
	DarkSalmon                               = 33,
	DarkSeaGreen                             = 34,
	DarkSlateBlue                            = 35,
	DarkSlateGray                            = 36,
	DarkSlateGrey                            = 37,
	DarkTurquoise                            = 38,
	DarkViolet                               = 39,
	DeepPink                                 = 40,
	DeepSkyBlue                              = 41,
	DimGray                                  = 42,
	DimGrey                                  = 43,
	DodgerBlue                               = 44,
	Firebrick                                = 45,
	FloralWhite                              = 46,
	ForestGreen                              = 47,
	Fuchsia                                  = 48,
	Gainsboro                                = 49,
	GhostWhite                               = 50,
	Gold                                     = 51,
	Goldenrod                                = 52,
	Gray                                     = 53,
	Green                                    = 54,
	GreenYellow                              = 55,
	Grey                                     = 56,
	HoneyDew                                 = 57,
	Hotpink                                  = 58,
	IndianRed                                = 59,
	Indigo                                   = 60,
	Ivory                                    = 61,
	Khaki                                    = 62,
	Lavender                                 = 63,
	LavenderBlush                            = 64,
	LawnGreen                                = 65,
	LemonChiffon                             = 66,
	LightBlue                                = 67,
	LightCoral                               = 68,
	LightCyan                                = 69,
	LightGoldenrodYellow                     = 70,
	LightGray                                = 71,
	LightGreen                               = 72,
	LightGrey                                = 73,
	LightPink                                = 74,
	LightSalmon                              = 75,
	LightSeaGreen                            = 76,
	LightSkyBlue                             = 77,
	LightSlateGray                           = 78,
	LightSlateGrey                           = 79,
	LightSteelBlue                           = 80,
	LightYellow                              = 81,
	Lime                                     = 82,
	LimeGreen                                = 83,
	Linen                                    = 84,
	Magenta                                  = 85,
	Maroon                                   = 86,
	MediumAquamarine                         = 87,
	MediumBlue                               = 88,
	MediumOrchid                             = 89,
	MediumPurple                             = 90,
	MediumSeaGreen                           = 91,
	MediumSlateBlue                          = 92,
	MediumSpringGreen                        = 93,
	MediumTurquoise                          = 94,
	MediumVioletRed                          = 95,
	MidnightBlue                             = 96,
	MintCream                                = 97,
	MistyRose                                = 98,
	Moccasin                                 = 99,
	NavajoWhite                              = 100,
	Navy                                     = 101,
	OldLace                                  = 102,
	Olive                                    = 103,
	OliveDrab                                = 104,
	Orange                                   = 105,
	OrangeRed                                = 106,
	Orchid                                   = 107,
	PaleGoldenrod                            = 108,
	PaleGreen                                = 109,
	PaleTurquoise                            = 110,
	PaleVioletred                            = 111,
	PapayaWhip                               = 112,
	PeachPuff                                = 113,
	Peru                                     = 114,
	Pink                                     = 115,
	Plum                                     = 116,
	PowderBlue                               = 117,
	Purple                                   = 118,
	Red                                      = 119,
	RosyBrown                                = 120,
	RoyalBlue                                = 121,
	SaddleBrown                              = 122,
	Salmon                                   = 123,
	SandyBrown                               = 124,
	SeaGreen                                 = 125,
	SeaShell                                 = 126,
	Sienna                                   = 127,
	Silver                                   = 128,
	SkyBlue                                  = 129,
	SlateBlue                                = 130,
	SlateGray                                = 131,
	SlateGrey                                = 132,
	Snow                                     = 133,
	SpringGreen                              = 134,
	SteelBlue                                = 135,
	Tan                                      = 136,
	Teal                                     = 137,
	Thistle                                  = 138,
	Tomato                                   = 139,
	Turquoise                                = 140,
	Violet                                   = 141,
	Wheat                                    = 142,
	White                                    = 143,
	WhiteSmoke                               = 144,
	Yellow                                   = 145,
	YellowGreen                              = 146,
};

// SolarisGeneratedStruct Verse.color_v
// 0x0020 (0x0020 - 0x0000)
struct Fcolor_v final
{
public:
	double                                        __verse_0x44E0EC02_A;                              // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __verse_0x35184040_R;                              // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __verse_0x98BF8727_G;                              // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __verse_0xAA4F5910_B;                              // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Fcolor_v) == 0x000008, "Wrong alignment on Fcolor_v");
static_assert(sizeof(Fcolor_v) == 0x000020, "Wrong size on Fcolor_v");
static_assert(offsetof(Fcolor_v, __verse_0x44E0EC02_A) == 0x000000, "Member 'Fcolor_v::__verse_0x44E0EC02_A' has a wrong offset!");
static_assert(offsetof(Fcolor_v, __verse_0x35184040_R) == 0x000008, "Member 'Fcolor_v::__verse_0x35184040_R' has a wrong offset!");
static_assert(offsetof(Fcolor_v, __verse_0x98BF8727_G) == 0x000010, "Member 'Fcolor_v::__verse_0x98BF8727_G' has a wrong offset!");
static_assert(offsetof(Fcolor_v, __verse_0xAA4F5910_B) == 0x000018, "Member 'Fcolor_v::__verse_0xAA4F5910_B' has a wrong offset!");

// SolarisGeneratedStruct Verse.vector3
// 0x0018 (0x0018 - 0x0000)
struct Fvector3 final
{
public:
	double                                        __verse_0x51F8FD2F_X;                              // 0x0000(0x0008)(Edit, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __verse_0x349F4197_Y;                              // 0x0008(0x0008)(Edit, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __verse_0xDA30F485_Z;                              // 0x0010(0x0008)(Edit, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Fvector3) == 0x000008, "Wrong alignment on Fvector3");
static_assert(sizeof(Fvector3) == 0x000018, "Wrong size on Fvector3");
static_assert(offsetof(Fvector3, __verse_0x51F8FD2F_X) == 0x000000, "Member 'Fvector3::__verse_0x51F8FD2F_X' has a wrong offset!");
static_assert(offsetof(Fvector3, __verse_0x349F4197_Y) == 0x000008, "Member 'Fvector3::__verse_0x349F4197_Y' has a wrong offset!");
static_assert(offsetof(Fvector3, __verse_0xDA30F485_Z) == 0x000010, "Member 'Fvector3::__verse_0xDA30F485_Z' has a wrong offset!");

// SolarisGeneratedStruct Verse.plane4
// 0x0030 (0x0030 - 0x0000)
struct Fplane4 final
{
public:
	struct Fvector3                               __verse_0xE929B5D8_Base;                           // 0x0000(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	struct Fvector3                               __verse_0x45CD3C37_Normal;                         // 0x0018(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Fplane4) == 0x000008, "Wrong alignment on Fplane4");
static_assert(sizeof(Fplane4) == 0x000030, "Wrong size on Fplane4");
static_assert(offsetof(Fplane4, __verse_0xE929B5D8_Base) == 0x000000, "Member 'Fplane4::__verse_0xE929B5D8_Base' has a wrong offset!");
static_assert(offsetof(Fplane4, __verse_0x45CD3C37_Normal) == 0x000018, "Member 'Fplane4::__verse_0x45CD3C37_Normal' has a wrong offset!");

// SolarisGeneratedStruct Verse.transform_v
// 0x0050 (0x0050 - 0x0000)
struct Ftransform_v final
{
public:
	struct Fvector3                               __verse_0xA376805D_Scale;                          // 0x0000(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVerseRotation                         __verse_0x78C70FF3_Rotation;                       // 0x0020(0x0020)(InstancedReference, NoDestructor)
	struct Fvector3                               __verse_0x4E05BF15_Translation;                    // 0x0040(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Ftransform_v) == 0x000010, "Wrong alignment on Ftransform_v");
static_assert(sizeof(Ftransform_v) == 0x000050, "Wrong size on Ftransform_v");
static_assert(offsetof(Ftransform_v, __verse_0xA376805D_Scale) == 0x000000, "Member 'Ftransform_v::__verse_0xA376805D_Scale' has a wrong offset!");
static_assert(offsetof(Ftransform_v, __verse_0x78C70FF3_Rotation) == 0x000020, "Member 'Ftransform_v::__verse_0x78C70FF3_Rotation' has a wrong offset!");
static_assert(offsetof(Ftransform_v, __verse_0x4E05BF15_Translation) == 0x000040, "Member 'Ftransform_v::__verse_0x4E05BF15_Translation' has a wrong offset!");

// SolarisGeneratedStruct Verse.tuple_L_R
// 0x0001 (0x0001 - 0x0000)
struct Verse_0::Ftuple_L_R final
{
public:
	uint8                                         _StructPaddingDummy;                               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Verse_0::Ftuple_L_R) == 0x000001, "Wrong alignment on Verse_0::Ftuple_L_R");
static_assert(sizeof(Verse_0::Ftuple_L_R) == 0x000001, "Wrong size on Verse_0::Ftuple_L_R");
static_assert(offsetof(Verse_0::Ftuple_L_R, _StructPaddingDummy) == 0x000000, "Member 'Verse_0::Ftuple_L_R::_StructPaddingDummy' has a wrong offset!");

// SolarisGeneratedStruct Verse.tuple_Lcolor__v_Mfloat_R
// 0x0028 (0x0028 - 0x0000)
struct Ftuple_Lcolor__v_Mfloat_R final
{
public:
	struct Fcolor_v                               __verse_0x18E3F084_Elem0;                          // 0x0000(0x0020)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	double                                        __verse_0x7D844C3C_Elem1;                          // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ftuple_Lcolor__v_Mfloat_R) == 0x000008, "Wrong alignment on Ftuple_Lcolor__v_Mfloat_R");
static_assert(sizeof(Ftuple_Lcolor__v_Mfloat_R) == 0x000028, "Wrong size on Ftuple_Lcolor__v_Mfloat_R");
static_assert(offsetof(Ftuple_Lcolor__v_Mfloat_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lcolor__v_Mfloat_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lcolor__v_Mfloat_R, __verse_0x7D844C3C_Elem1) == 0x000020, "Member 'Ftuple_Lcolor__v_Mfloat_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// SolarisGeneratedStruct Verse.tuple_Lfloat_Mfloat_Mfloat_Mfloat_R
// 0x0020 (0x0020 - 0x0000)
struct Ftuple_Lfloat_Mfloat_Mfloat_Mfloat_R final
{
public:
	double                                        __verse_0x18E3F084_Elem0;                          // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __verse_0x7D844C3C_Elem1;                          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __verse_0x932BF92E_Elem2;                          // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __verse_0xF64C4596_Elem3;                          // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ftuple_Lfloat_Mfloat_Mfloat_Mfloat_R) == 0x000008, "Wrong alignment on Ftuple_Lfloat_Mfloat_Mfloat_Mfloat_R");
static_assert(sizeof(Ftuple_Lfloat_Mfloat_Mfloat_Mfloat_R) == 0x000020, "Wrong size on Ftuple_Lfloat_Mfloat_Mfloat_Mfloat_R");
static_assert(offsetof(Ftuple_Lfloat_Mfloat_Mfloat_Mfloat_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lfloat_Mfloat_Mfloat_Mfloat_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lfloat_Mfloat_Mfloat_Mfloat_R, __verse_0x7D844C3C_Elem1) == 0x000008, "Member 'Ftuple_Lfloat_Mfloat_Mfloat_Mfloat_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");
static_assert(offsetof(Ftuple_Lfloat_Mfloat_Mfloat_Mfloat_R, __verse_0x932BF92E_Elem2) == 0x000010, "Member 'Ftuple_Lfloat_Mfloat_Mfloat_Mfloat_R::__verse_0x932BF92E_Elem2' has a wrong offset!");
static_assert(offsetof(Ftuple_Lfloat_Mfloat_Mfloat_Mfloat_R, __verse_0xF64C4596_Elem3) == 0x000018, "Member 'Ftuple_Lfloat_Mfloat_Mfloat_Mfloat_R::__verse_0xF64C4596_Elem3' has a wrong offset!");

// SolarisGeneratedStruct Verse.tuple_Lfloat_Mfloat_Mfloat_R
// 0x0018 (0x0018 - 0x0000)
struct Ftuple_Lfloat_Mfloat_Mfloat_R final
{
public:
	double                                        __verse_0x18E3F084_Elem0;                          // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __verse_0x7D844C3C_Elem1;                          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __verse_0x932BF92E_Elem2;                          // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ftuple_Lfloat_Mfloat_Mfloat_R) == 0x000008, "Wrong alignment on Ftuple_Lfloat_Mfloat_Mfloat_R");
static_assert(sizeof(Ftuple_Lfloat_Mfloat_Mfloat_R) == 0x000018, "Wrong size on Ftuple_Lfloat_Mfloat_Mfloat_R");
static_assert(offsetof(Ftuple_Lfloat_Mfloat_Mfloat_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lfloat_Mfloat_Mfloat_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lfloat_Mfloat_Mfloat_R, __verse_0x7D844C3C_Elem1) == 0x000008, "Member 'Ftuple_Lfloat_Mfloat_Mfloat_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");
static_assert(offsetof(Ftuple_Lfloat_Mfloat_Mfloat_R, __verse_0x932BF92E_Elem2) == 0x000010, "Member 'Ftuple_Lfloat_Mfloat_Mfloat_R::__verse_0x932BF92E_Elem2' has a wrong offset!");

// SolarisGeneratedStruct Verse.tuple_Lfloat_Mfloat_R
// 0x0010 (0x0010 - 0x0000)
struct Verse_0::Ftuple_Lfloat_Mfloat_R final
{
public:
	double                                        __verse_0x18E3F084_Elem0;                          // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __verse_0x7D844C3C_Elem1;                          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Verse_0::Ftuple_Lfloat_Mfloat_R) == 0x000008, "Wrong alignment on Verse_0::Ftuple_Lfloat_Mfloat_R");
static_assert(sizeof(Verse_0::Ftuple_Lfloat_Mfloat_R) == 0x000010, "Wrong size on Verse_0::Ftuple_Lfloat_Mfloat_R");
static_assert(offsetof(Verse_0::Ftuple_Lfloat_Mfloat_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Verse_0::Ftuple_Lfloat_Mfloat_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Verse_0::Ftuple_Lfloat_Mfloat_R, __verse_0x7D844C3C_Elem1) == 0x000008, "Member 'Verse_0::Ftuple_Lfloat_Mfloat_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// SolarisGeneratedStruct Verse.vector2
// 0x0010 (0x0010 - 0x0000)
struct Fvector2 final
{
public:
	double                                        __verse_0x51F8FD2F_X;                              // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __verse_0x349F4197_Y;                              // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Fvector2) == 0x000008, "Wrong alignment on Fvector2");
static_assert(sizeof(Fvector2) == 0x000010, "Wrong size on Fvector2");
static_assert(offsetof(Fvector2, __verse_0x51F8FD2F_X) == 0x000000, "Member 'Fvector2::__verse_0x51F8FD2F_X' has a wrong offset!");
static_assert(offsetof(Fvector2, __verse_0x349F4197_Y) == 0x000008, "Member 'Fvector2::__verse_0x349F4197_Y' has a wrong offset!");

// SolarisGeneratedStruct Verse.tuple_Lfloat_Mvector2_R
// 0x0018 (0x0018 - 0x0000)
struct Ftuple_Lfloat_Mvector2_R final
{
public:
	double                                        __verse_0x18E3F084_Elem0;                          // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct Fvector2                               __verse_0x7D844C3C_Elem1;                          // 0x0008(0x0010)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Ftuple_Lfloat_Mvector2_R) == 0x000008, "Wrong alignment on Ftuple_Lfloat_Mvector2_R");
static_assert(sizeof(Ftuple_Lfloat_Mvector2_R) == 0x000018, "Wrong size on Ftuple_Lfloat_Mvector2_R");
static_assert(offsetof(Ftuple_Lfloat_Mvector2_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lfloat_Mvector2_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lfloat_Mvector2_R, __verse_0x7D844C3C_Elem1) == 0x000008, "Member 'Ftuple_Lfloat_Mvector2_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// SolarisGeneratedStruct Verse.tuple_Lfloat_Mvector3_R
// 0x0020 (0x0020 - 0x0000)
struct Ftuple_Lfloat_Mvector3_R final
{
public:
	double                                        __verse_0x18E3F084_Elem0;                          // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct Fvector3                               __verse_0x7D844C3C_Elem1;                          // 0x0008(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Ftuple_Lfloat_Mvector3_R) == 0x000008, "Wrong alignment on Ftuple_Lfloat_Mvector3_R");
static_assert(sizeof(Ftuple_Lfloat_Mvector3_R) == 0x000020, "Wrong size on Ftuple_Lfloat_Mvector3_R");
static_assert(offsetof(Ftuple_Lfloat_Mvector3_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lfloat_Mvector3_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lfloat_Mvector3_R, __verse_0x7D844C3C_Elem1) == 0x000008, "Member 'Ftuple_Lfloat_Mvector3_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// SolarisGeneratedStruct Verse.vector4_v
// 0x0028 (0x0028 - 0x0000)
struct Fvector4_v final
{
public:
	double                                        __verse_0x51F8FD2F_X;                              // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __verse_0x349F4197_Y;                              // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __verse_0xDA30F485_Z;                              // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __verse_0x07E89E77_W;                              // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Fvector4_v) == 0x000008, "Wrong alignment on Fvector4_v");
static_assert(sizeof(Fvector4_v) == 0x000028, "Wrong size on Fvector4_v");
static_assert(offsetof(Fvector4_v, __verse_0x51F8FD2F_X) == 0x000000, "Member 'Fvector4_v::__verse_0x51F8FD2F_X' has a wrong offset!");
static_assert(offsetof(Fvector4_v, __verse_0x349F4197_Y) == 0x000008, "Member 'Fvector4_v::__verse_0x349F4197_Y' has a wrong offset!");
static_assert(offsetof(Fvector4_v, __verse_0xDA30F485_Z) == 0x000010, "Member 'Fvector4_v::__verse_0xDA30F485_Z' has a wrong offset!");
static_assert(offsetof(Fvector4_v, __verse_0x07E89E77_W) == 0x000018, "Member 'Fvector4_v::__verse_0x07E89E77_W' has a wrong offset!");

// SolarisGeneratedStruct Verse.tuple_Lfloat_Mvector4__v_R
// 0x0030 (0x0030 - 0x0000)
struct Ftuple_Lfloat_Mvector4__v_R final
{
public:
	double                                        __verse_0x18E3F084_Elem0;                          // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct Fvector4_v                             __verse_0x7D844C3C_Elem1;                          // 0x0008(0x0028)(InstancedReference, NoDestructor)
};
static_assert(alignof(Ftuple_Lfloat_Mvector4__v_R) == 0x000008, "Wrong alignment on Ftuple_Lfloat_Mvector4__v_R");
static_assert(sizeof(Ftuple_Lfloat_Mvector4__v_R) == 0x000030, "Wrong size on Ftuple_Lfloat_Mvector4__v_R");
static_assert(offsetof(Ftuple_Lfloat_Mvector4__v_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lfloat_Mvector4__v_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lfloat_Mvector4__v_R, __verse_0x7D844C3C_Elem1) == 0x000008, "Member 'Ftuple_Lfloat_Mvector4__v_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// SolarisGeneratedStruct Verse.tuple_Lint_Mint_Mint_Mint_R
// 0x0020 (0x0020 - 0x0000)
struct Ftuple_Lint_Mint_Mint_Mint_R final
{
public:
	int64                                         __verse_0x18E3F084_Elem0;                          // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         __verse_0x7D844C3C_Elem1;                          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         __verse_0x932BF92E_Elem2;                          // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         __verse_0xF64C4596_Elem3;                          // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ftuple_Lint_Mint_Mint_Mint_R) == 0x000008, "Wrong alignment on Ftuple_Lint_Mint_Mint_Mint_R");
static_assert(sizeof(Ftuple_Lint_Mint_Mint_Mint_R) == 0x000020, "Wrong size on Ftuple_Lint_Mint_Mint_Mint_R");
static_assert(offsetof(Ftuple_Lint_Mint_Mint_Mint_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lint_Mint_Mint_Mint_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lint_Mint_Mint_Mint_R, __verse_0x7D844C3C_Elem1) == 0x000008, "Member 'Ftuple_Lint_Mint_Mint_Mint_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");
static_assert(offsetof(Ftuple_Lint_Mint_Mint_Mint_R, __verse_0x932BF92E_Elem2) == 0x000010, "Member 'Ftuple_Lint_Mint_Mint_Mint_R::__verse_0x932BF92E_Elem2' has a wrong offset!");
static_assert(offsetof(Ftuple_Lint_Mint_Mint_Mint_R, __verse_0xF64C4596_Elem3) == 0x000018, "Member 'Ftuple_Lint_Mint_Mint_Mint_R::__verse_0xF64C4596_Elem3' has a wrong offset!");

// SolarisGeneratedStruct Verse.tuple_Lint_Mint_Mint_R
// 0x0018 (0x0018 - 0x0000)
struct Verse_0::Ftuple_Lint_Mint_Mint_R final
{
public:
	int64                                         __verse_0x18E3F084_Elem0;                          // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         __verse_0x7D844C3C_Elem1;                          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         __verse_0x932BF92E_Elem2;                          // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Verse_0::Ftuple_Lint_Mint_Mint_R) == 0x000008, "Wrong alignment on Verse_0::Ftuple_Lint_Mint_Mint_R");
static_assert(sizeof(Verse_0::Ftuple_Lint_Mint_Mint_R) == 0x000018, "Wrong size on Verse_0::Ftuple_Lint_Mint_Mint_R");
static_assert(offsetof(Verse_0::Ftuple_Lint_Mint_Mint_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Verse_0::Ftuple_Lint_Mint_Mint_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Verse_0::Ftuple_Lint_Mint_Mint_R, __verse_0x7D844C3C_Elem1) == 0x000008, "Member 'Verse_0::Ftuple_Lint_Mint_Mint_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");
static_assert(offsetof(Verse_0::Ftuple_Lint_Mint_Mint_R, __verse_0x932BF92E_Elem2) == 0x000010, "Member 'Verse_0::Ftuple_Lint_Mint_Mint_R::__verse_0x932BF92E_Elem2' has a wrong offset!");

// SolarisGeneratedStruct Verse.tuple_Lint_Mint_R
// 0x0010 (0x0010 - 0x0000)
struct Verse_0::Ftuple_Lint_Mint_R final
{
public:
	int64                                         __verse_0x18E3F084_Elem0;                          // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         __verse_0x7D844C3C_Elem1;                          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Verse_0::Ftuple_Lint_Mint_R) == 0x000008, "Wrong alignment on Verse_0::Ftuple_Lint_Mint_R");
static_assert(sizeof(Verse_0::Ftuple_Lint_Mint_R) == 0x000010, "Wrong size on Verse_0::Ftuple_Lint_Mint_R");
static_assert(offsetof(Verse_0::Ftuple_Lint_Mint_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Verse_0::Ftuple_Lint_Mint_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Verse_0::Ftuple_Lint_Mint_R, __verse_0x7D844C3C_Elem1) == 0x000008, "Member 'Verse_0::Ftuple_Lint_Mint_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// SolarisGeneratedStruct Verse.vector2i
// 0x0010 (0x0010 - 0x0000)
struct Fvector2i final
{
public:
	int64                                         __verse_0x51F8FD2F_X;                              // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         __verse_0x349F4197_Y;                              // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Fvector2i) == 0x000008, "Wrong alignment on Fvector2i");
static_assert(sizeof(Fvector2i) == 0x000010, "Wrong size on Fvector2i");
static_assert(offsetof(Fvector2i, __verse_0x51F8FD2F_X) == 0x000000, "Member 'Fvector2i::__verse_0x51F8FD2F_X' has a wrong offset!");
static_assert(offsetof(Fvector2i, __verse_0x349F4197_Y) == 0x000008, "Member 'Fvector2i::__verse_0x349F4197_Y' has a wrong offset!");

// SolarisGeneratedStruct Verse.tuple_Lint_Mvector2i_R
// 0x0018 (0x0018 - 0x0000)
struct Ftuple_Lint_Mvector2i_R final
{
public:
	int64                                         __verse_0x18E3F084_Elem0;                          // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct Fvector2i                              __verse_0x7D844C3C_Elem1;                          // 0x0008(0x0010)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Ftuple_Lint_Mvector2i_R) == 0x000008, "Wrong alignment on Ftuple_Lint_Mvector2i_R");
static_assert(sizeof(Ftuple_Lint_Mvector2i_R) == 0x000018, "Wrong size on Ftuple_Lint_Mvector2i_R");
static_assert(offsetof(Ftuple_Lint_Mvector2i_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lint_Mvector2i_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lint_Mvector2i_R, __verse_0x7D844C3C_Elem1) == 0x000008, "Member 'Ftuple_Lint_Mvector2i_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// SolarisGeneratedStruct Verse.tuple_Lplane4_Mvector3_Mvector3_R
// 0x0060 (0x0060 - 0x0000)
struct Ftuple_Lplane4_Mvector3_Mvector3_R final
{
public:
	struct Fplane4                                __verse_0x18E3F084_Elem0;                          // 0x0000(0x0030)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	struct Fvector3                               __verse_0x7D844C3C_Elem1;                          // 0x0030(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	struct Fvector3                               __verse_0x932BF92E_Elem2;                          // 0x0048(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Ftuple_Lplane4_Mvector3_Mvector3_R) == 0x000008, "Wrong alignment on Ftuple_Lplane4_Mvector3_Mvector3_R");
static_assert(sizeof(Ftuple_Lplane4_Mvector3_Mvector3_R) == 0x000060, "Wrong size on Ftuple_Lplane4_Mvector3_Mvector3_R");
static_assert(offsetof(Ftuple_Lplane4_Mvector3_Mvector3_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lplane4_Mvector3_Mvector3_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lplane4_Mvector3_Mvector3_R, __verse_0x7D844C3C_Elem1) == 0x000030, "Member 'Ftuple_Lplane4_Mvector3_Mvector3_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");
static_assert(offsetof(Ftuple_Lplane4_Mvector3_Mvector3_R, __verse_0x932BF92E_Elem2) == 0x000048, "Member 'Ftuple_Lplane4_Mvector3_Mvector3_R::__verse_0x932BF92E_Elem2' has a wrong offset!");

// SolarisGeneratedStruct Verse.tuple_Lrotation_Mfloat_R
// 0x0030 (0x0030 - 0x0000)
struct Ftuple_Lrotation_Mfloat_R final
{
public:
	struct FVerseRotation                         __verse_0x18E3F084_Elem0;                          // 0x0000(0x0020)(InstancedReference, NoDestructor)
	double                                        __verse_0x7D844C3C_Elem1;                          // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ftuple_Lrotation_Mfloat_R) == 0x000010, "Wrong alignment on Ftuple_Lrotation_Mfloat_R");
static_assert(sizeof(Ftuple_Lrotation_Mfloat_R) == 0x000030, "Wrong size on Ftuple_Lrotation_Mfloat_R");
static_assert(offsetof(Ftuple_Lrotation_Mfloat_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lrotation_Mfloat_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lrotation_Mfloat_R, __verse_0x7D844C3C_Elem1) == 0x000020, "Member 'Ftuple_Lrotation_Mfloat_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// SolarisGeneratedStruct Verse.tuple_Lrotation_Mrotation_Mfloat_R
// 0x0050 (0x0050 - 0x0000)
struct Ftuple_Lrotation_Mrotation_Mfloat_R final
{
public:
	struct FVerseRotation                         __verse_0x18E3F084_Elem0;                          // 0x0000(0x0020)(InstancedReference, NoDestructor)
	struct FVerseRotation                         __verse_0x7D844C3C_Elem1;                          // 0x0020(0x0020)(InstancedReference, NoDestructor)
	double                                        __verse_0x932BF92E_Elem2;                          // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ftuple_Lrotation_Mrotation_Mfloat_R) == 0x000010, "Wrong alignment on Ftuple_Lrotation_Mrotation_Mfloat_R");
static_assert(sizeof(Ftuple_Lrotation_Mrotation_Mfloat_R) == 0x000050, "Wrong size on Ftuple_Lrotation_Mrotation_Mfloat_R");
static_assert(offsetof(Ftuple_Lrotation_Mrotation_Mfloat_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lrotation_Mrotation_Mfloat_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lrotation_Mrotation_Mfloat_R, __verse_0x7D844C3C_Elem1) == 0x000020, "Member 'Ftuple_Lrotation_Mrotation_Mfloat_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");
static_assert(offsetof(Ftuple_Lrotation_Mrotation_Mfloat_R, __verse_0x932BF92E_Elem2) == 0x000040, "Member 'Ftuple_Lrotation_Mrotation_Mfloat_R::__verse_0x932BF92E_Elem2' has a wrong offset!");

// SolarisGeneratedStruct Verse.tuple_Lrotation_Mrotation_R
// 0x0040 (0x0040 - 0x0000)
struct Ftuple_Lrotation_Mrotation_R final
{
public:
	struct FVerseRotation                         __verse_0x18E3F084_Elem0;                          // 0x0000(0x0020)(InstancedReference, NoDestructor)
	struct FVerseRotation                         __verse_0x7D844C3C_Elem1;                          // 0x0020(0x0020)(InstancedReference, NoDestructor)
};
static_assert(alignof(Ftuple_Lrotation_Mrotation_R) == 0x000010, "Wrong alignment on Ftuple_Lrotation_Mrotation_R");
static_assert(sizeof(Ftuple_Lrotation_Mrotation_R) == 0x000040, "Wrong size on Ftuple_Lrotation_Mrotation_R");
static_assert(offsetof(Ftuple_Lrotation_Mrotation_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lrotation_Mrotation_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lrotation_Mrotation_R, __verse_0x7D844C3C_Elem1) == 0x000020, "Member 'Ftuple_Lrotation_Mrotation_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// SolarisGeneratedStruct Verse.tuple_Lrotation_Mvector3_R
// 0x0040 (0x0040 - 0x0000)
struct Ftuple_Lrotation_Mvector3_R final
{
public:
	struct FVerseRotation                         __verse_0x18E3F084_Elem0;                          // 0x0000(0x0020)(InstancedReference, NoDestructor)
	struct Fvector3                               __verse_0x7D844C3C_Elem1;                          // 0x0020(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Ftuple_Lrotation_Mvector3_R) == 0x000010, "Wrong alignment on Ftuple_Lrotation_Mvector3_R");
static_assert(sizeof(Ftuple_Lrotation_Mvector3_R) == 0x000040, "Wrong size on Ftuple_Lrotation_Mvector3_R");
static_assert(offsetof(Ftuple_Lrotation_Mvector3_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lrotation_Mvector3_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lrotation_Mvector3_R, __verse_0x7D844C3C_Elem1) == 0x000020, "Member 'Ftuple_Lrotation_Mvector3_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// SolarisGeneratedStruct Verse.tuple_Lvector2_Mfloat_R
// 0x0018 (0x0018 - 0x0000)
struct Ftuple_Lvector2_Mfloat_R final
{
public:
	struct Fvector2                               __verse_0x18E3F084_Elem0;                          // 0x0000(0x0010)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	double                                        __verse_0x7D844C3C_Elem1;                          // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ftuple_Lvector2_Mfloat_R) == 0x000008, "Wrong alignment on Ftuple_Lvector2_Mfloat_R");
static_assert(sizeof(Ftuple_Lvector2_Mfloat_R) == 0x000018, "Wrong size on Ftuple_Lvector2_Mfloat_R");
static_assert(offsetof(Ftuple_Lvector2_Mfloat_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lvector2_Mfloat_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lvector2_Mfloat_R, __verse_0x7D844C3C_Elem1) == 0x000010, "Member 'Ftuple_Lvector2_Mfloat_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// SolarisGeneratedStruct Verse.tuple_Lvector2_Mvector2_Mfloat_R
// 0x0028 (0x0028 - 0x0000)
struct Ftuple_Lvector2_Mvector2_Mfloat_R final
{
public:
	struct Fvector2                               __verse_0x18E3F084_Elem0;                          // 0x0000(0x0010)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	struct Fvector2                               __verse_0x7D844C3C_Elem1;                          // 0x0010(0x0010)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	double                                        __verse_0x932BF92E_Elem2;                          // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ftuple_Lvector2_Mvector2_Mfloat_R) == 0x000008, "Wrong alignment on Ftuple_Lvector2_Mvector2_Mfloat_R");
static_assert(sizeof(Ftuple_Lvector2_Mvector2_Mfloat_R) == 0x000028, "Wrong size on Ftuple_Lvector2_Mvector2_Mfloat_R");
static_assert(offsetof(Ftuple_Lvector2_Mvector2_Mfloat_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lvector2_Mvector2_Mfloat_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lvector2_Mvector2_Mfloat_R, __verse_0x7D844C3C_Elem1) == 0x000010, "Member 'Ftuple_Lvector2_Mvector2_Mfloat_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");
static_assert(offsetof(Ftuple_Lvector2_Mvector2_Mfloat_R, __verse_0x932BF92E_Elem2) == 0x000020, "Member 'Ftuple_Lvector2_Mvector2_Mfloat_R::__verse_0x932BF92E_Elem2' has a wrong offset!");

// SolarisGeneratedStruct Verse.tuple_Lvector2_Mvector2_R
// 0x0020 (0x0020 - 0x0000)
struct Ftuple_Lvector2_Mvector2_R final
{
public:
	struct Fvector2                               __verse_0x18E3F084_Elem0;                          // 0x0000(0x0010)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	struct Fvector2                               __verse_0x7D844C3C_Elem1;                          // 0x0010(0x0010)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Ftuple_Lvector2_Mvector2_R) == 0x000008, "Wrong alignment on Ftuple_Lvector2_Mvector2_R");
static_assert(sizeof(Ftuple_Lvector2_Mvector2_R) == 0x000020, "Wrong size on Ftuple_Lvector2_Mvector2_R");
static_assert(offsetof(Ftuple_Lvector2_Mvector2_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lvector2_Mvector2_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lvector2_Mvector2_R, __verse_0x7D844C3C_Elem1) == 0x000010, "Member 'Ftuple_Lvector2_Mvector2_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// SolarisGeneratedStruct Verse.tuple_Lvector2i_Mint_R
// 0x0018 (0x0018 - 0x0000)
struct Ftuple_Lvector2i_Mint_R final
{
public:
	struct Fvector2i                              __verse_0x18E3F084_Elem0;                          // 0x0000(0x0010)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	int64                                         __verse_0x7D844C3C_Elem1;                          // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ftuple_Lvector2i_Mint_R) == 0x000008, "Wrong alignment on Ftuple_Lvector2i_Mint_R");
static_assert(sizeof(Ftuple_Lvector2i_Mint_R) == 0x000018, "Wrong size on Ftuple_Lvector2i_Mint_R");
static_assert(offsetof(Ftuple_Lvector2i_Mint_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lvector2i_Mint_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lvector2i_Mint_R, __verse_0x7D844C3C_Elem1) == 0x000010, "Member 'Ftuple_Lvector2i_Mint_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// SolarisGeneratedStruct Verse.tuple_Lvector2i_Mvector2i_R
// 0x0020 (0x0020 - 0x0000)
struct Ftuple_Lvector2i_Mvector2i_R final
{
public:
	struct Fvector2i                              __verse_0x18E3F084_Elem0;                          // 0x0000(0x0010)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	struct Fvector2i                              __verse_0x7D844C3C_Elem1;                          // 0x0010(0x0010)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Ftuple_Lvector2i_Mvector2i_R) == 0x000008, "Wrong alignment on Ftuple_Lvector2i_Mvector2i_R");
static_assert(sizeof(Ftuple_Lvector2i_Mvector2i_R) == 0x000020, "Wrong size on Ftuple_Lvector2i_Mvector2i_R");
static_assert(offsetof(Ftuple_Lvector2i_Mvector2i_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lvector2i_Mvector2i_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lvector2i_Mvector2i_R, __verse_0x7D844C3C_Elem1) == 0x000010, "Member 'Ftuple_Lvector2i_Mvector2i_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// SolarisGeneratedStruct Verse.tuple_Lvector3_Mfloat_R
// 0x0020 (0x0020 - 0x0000)
struct Ftuple_Lvector3_Mfloat_R final
{
public:
	struct Fvector3                               __verse_0x18E3F084_Elem0;                          // 0x0000(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	double                                        __verse_0x7D844C3C_Elem1;                          // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ftuple_Lvector3_Mfloat_R) == 0x000008, "Wrong alignment on Ftuple_Lvector3_Mfloat_R");
static_assert(sizeof(Ftuple_Lvector3_Mfloat_R) == 0x000020, "Wrong size on Ftuple_Lvector3_Mfloat_R");
static_assert(offsetof(Ftuple_Lvector3_Mfloat_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lvector3_Mfloat_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lvector3_Mfloat_R, __verse_0x7D844C3C_Elem1) == 0x000018, "Member 'Ftuple_Lvector3_Mfloat_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// SolarisGeneratedStruct Verse.tuple_Lvector3_Mplane4_R
// 0x0048 (0x0048 - 0x0000)
struct Ftuple_Lvector3_Mplane4_R final
{
public:
	struct Fvector3                               __verse_0x18E3F084_Elem0;                          // 0x0000(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	struct Fplane4                                __verse_0x7D844C3C_Elem1;                          // 0x0018(0x0030)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Ftuple_Lvector3_Mplane4_R) == 0x000008, "Wrong alignment on Ftuple_Lvector3_Mplane4_R");
static_assert(sizeof(Ftuple_Lvector3_Mplane4_R) == 0x000048, "Wrong size on Ftuple_Lvector3_Mplane4_R");
static_assert(offsetof(Ftuple_Lvector3_Mplane4_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lvector3_Mplane4_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lvector3_Mplane4_R, __verse_0x7D844C3C_Elem1) == 0x000018, "Member 'Ftuple_Lvector3_Mplane4_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// SolarisGeneratedStruct Verse.tuple_Lvector3_Mvector3_Mfloat_R
// 0x0038 (0x0038 - 0x0000)
struct Ftuple_Lvector3_Mvector3_Mfloat_R final
{
public:
	struct Fvector3                               __verse_0x18E3F084_Elem0;                          // 0x0000(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	struct Fvector3                               __verse_0x7D844C3C_Elem1;                          // 0x0018(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	double                                        __verse_0x932BF92E_Elem2;                          // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ftuple_Lvector3_Mvector3_Mfloat_R) == 0x000008, "Wrong alignment on Ftuple_Lvector3_Mvector3_Mfloat_R");
static_assert(sizeof(Ftuple_Lvector3_Mvector3_Mfloat_R) == 0x000038, "Wrong size on Ftuple_Lvector3_Mvector3_Mfloat_R");
static_assert(offsetof(Ftuple_Lvector3_Mvector3_Mfloat_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lvector3_Mvector3_Mfloat_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lvector3_Mvector3_Mfloat_R, __verse_0x7D844C3C_Elem1) == 0x000018, "Member 'Ftuple_Lvector3_Mvector3_Mfloat_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");
static_assert(offsetof(Ftuple_Lvector3_Mvector3_Mfloat_R, __verse_0x932BF92E_Elem2) == 0x000030, "Member 'Ftuple_Lvector3_Mvector3_Mfloat_R::__verse_0x932BF92E_Elem2' has a wrong offset!");

// SolarisGeneratedStruct Verse.tuple_Lvector3_Mvector3_Mvector3_Mvector3_R
// 0x0060 (0x0060 - 0x0000)
struct Ftuple_Lvector3_Mvector3_Mvector3_Mvector3_R final
{
public:
	struct Fvector3                               __verse_0x18E3F084_Elem0;                          // 0x0000(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	struct Fvector3                               __verse_0x7D844C3C_Elem1;                          // 0x0018(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	struct Fvector3                               __verse_0x932BF92E_Elem2;                          // 0x0030(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	struct Fvector3                               __verse_0xF64C4596_Elem3;                          // 0x0048(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Ftuple_Lvector3_Mvector3_Mvector3_Mvector3_R) == 0x000008, "Wrong alignment on Ftuple_Lvector3_Mvector3_Mvector3_Mvector3_R");
static_assert(sizeof(Ftuple_Lvector3_Mvector3_Mvector3_Mvector3_R) == 0x000060, "Wrong size on Ftuple_Lvector3_Mvector3_Mvector3_Mvector3_R");
static_assert(offsetof(Ftuple_Lvector3_Mvector3_Mvector3_Mvector3_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lvector3_Mvector3_Mvector3_Mvector3_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lvector3_Mvector3_Mvector3_Mvector3_R, __verse_0x7D844C3C_Elem1) == 0x000018, "Member 'Ftuple_Lvector3_Mvector3_Mvector3_Mvector3_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");
static_assert(offsetof(Ftuple_Lvector3_Mvector3_Mvector3_Mvector3_R, __verse_0x932BF92E_Elem2) == 0x000030, "Member 'Ftuple_Lvector3_Mvector3_Mvector3_Mvector3_R::__verse_0x932BF92E_Elem2' has a wrong offset!");
static_assert(offsetof(Ftuple_Lvector3_Mvector3_Mvector3_Mvector3_R, __verse_0xF64C4596_Elem3) == 0x000048, "Member 'Ftuple_Lvector3_Mvector3_Mvector3_Mvector3_R::__verse_0xF64C4596_Elem3' has a wrong offset!");

// SolarisGeneratedStruct Verse.tuple_Lvector3_Mvector3_Mvector3_R
// 0x0048 (0x0048 - 0x0000)
struct Ftuple_Lvector3_Mvector3_Mvector3_R final
{
public:
	struct Fvector3                               __verse_0x18E3F084_Elem0;                          // 0x0000(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	struct Fvector3                               __verse_0x7D844C3C_Elem1;                          // 0x0018(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	struct Fvector3                               __verse_0x932BF92E_Elem2;                          // 0x0030(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Ftuple_Lvector3_Mvector3_Mvector3_R) == 0x000008, "Wrong alignment on Ftuple_Lvector3_Mvector3_Mvector3_R");
static_assert(sizeof(Ftuple_Lvector3_Mvector3_Mvector3_R) == 0x000048, "Wrong size on Ftuple_Lvector3_Mvector3_Mvector3_R");
static_assert(offsetof(Ftuple_Lvector3_Mvector3_Mvector3_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lvector3_Mvector3_Mvector3_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lvector3_Mvector3_Mvector3_R, __verse_0x7D844C3C_Elem1) == 0x000018, "Member 'Ftuple_Lvector3_Mvector3_Mvector3_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");
static_assert(offsetof(Ftuple_Lvector3_Mvector3_Mvector3_R, __verse_0x932BF92E_Elem2) == 0x000030, "Member 'Ftuple_Lvector3_Mvector3_Mvector3_R::__verse_0x932BF92E_Elem2' has a wrong offset!");

// SolarisGeneratedStruct Verse.tuple_Lvector3_Mvector3_R
// 0x0030 (0x0030 - 0x0000)
struct Verse_0::Ftuple_Lvector3_Mvector3_R final
{
public:
	struct Fvector3                               __verse_0x18E3F084_Elem0;                          // 0x0000(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
	struct Fvector3                               __verse_0x7D844C3C_Elem1;                          // 0x0018(0x0018)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Verse_0::Ftuple_Lvector3_Mvector3_R) == 0x000008, "Wrong alignment on Verse_0::Ftuple_Lvector3_Mvector3_R");
static_assert(sizeof(Verse_0::Ftuple_Lvector3_Mvector3_R) == 0x000030, "Wrong size on Verse_0::Ftuple_Lvector3_Mvector3_R");
static_assert(offsetof(Verse_0::Ftuple_Lvector3_Mvector3_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Verse_0::Ftuple_Lvector3_Mvector3_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Verse_0::Ftuple_Lvector3_Mvector3_R, __verse_0x7D844C3C_Elem1) == 0x000018, "Member 'Verse_0::Ftuple_Lvector3_Mvector3_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// SolarisGeneratedStruct Verse.tuple_Lvector4__v_Mfloat_R
// 0x0030 (0x0030 - 0x0000)
struct Ftuple_Lvector4__v_Mfloat_R final
{
public:
	struct Fvector4_v                             __verse_0x18E3F084_Elem0;                          // 0x0000(0x0028)(InstancedReference, NoDestructor)
	double                                        __verse_0x7D844C3C_Elem1;                          // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ftuple_Lvector4__v_Mfloat_R) == 0x000008, "Wrong alignment on Ftuple_Lvector4__v_Mfloat_R");
static_assert(sizeof(Ftuple_Lvector4__v_Mfloat_R) == 0x000030, "Wrong size on Ftuple_Lvector4__v_Mfloat_R");
static_assert(offsetof(Ftuple_Lvector4__v_Mfloat_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lvector4__v_Mfloat_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lvector4__v_Mfloat_R, __verse_0x7D844C3C_Elem1) == 0x000028, "Member 'Ftuple_Lvector4__v_Mfloat_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// SolarisGeneratedStruct Verse.tuple_Lvector4__v_Mvector4__v_Mfloat_R
// 0x0058 (0x0058 - 0x0000)
struct Ftuple_Lvector4__v_Mvector4__v_Mfloat_R final
{
public:
	struct Fvector4_v                             __verse_0x18E3F084_Elem0;                          // 0x0000(0x0028)(InstancedReference, NoDestructor)
	struct Fvector4_v                             __verse_0x7D844C3C_Elem1;                          // 0x0028(0x0028)(InstancedReference, NoDestructor)
	double                                        __verse_0x932BF92E_Elem2;                          // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ftuple_Lvector4__v_Mvector4__v_Mfloat_R) == 0x000008, "Wrong alignment on Ftuple_Lvector4__v_Mvector4__v_Mfloat_R");
static_assert(sizeof(Ftuple_Lvector4__v_Mvector4__v_Mfloat_R) == 0x000058, "Wrong size on Ftuple_Lvector4__v_Mvector4__v_Mfloat_R");
static_assert(offsetof(Ftuple_Lvector4__v_Mvector4__v_Mfloat_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lvector4__v_Mvector4__v_Mfloat_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lvector4__v_Mvector4__v_Mfloat_R, __verse_0x7D844C3C_Elem1) == 0x000028, "Member 'Ftuple_Lvector4__v_Mvector4__v_Mfloat_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");
static_assert(offsetof(Ftuple_Lvector4__v_Mvector4__v_Mfloat_R, __verse_0x932BF92E_Elem2) == 0x000050, "Member 'Ftuple_Lvector4__v_Mvector4__v_Mfloat_R::__verse_0x932BF92E_Elem2' has a wrong offset!");

// SolarisGeneratedStruct Verse.tuple_Lvector4__v_Mvector4__v_R
// 0x0050 (0x0050 - 0x0000)
struct Ftuple_Lvector4__v_Mvector4__v_R final
{
public:
	struct Fvector4_v                             __verse_0x18E3F084_Elem0;                          // 0x0000(0x0028)(InstancedReference, NoDestructor)
	struct Fvector4_v                             __verse_0x7D844C3C_Elem1;                          // 0x0028(0x0028)(InstancedReference, NoDestructor)
};
static_assert(alignof(Ftuple_Lvector4__v_Mvector4__v_R) == 0x000008, "Wrong alignment on Ftuple_Lvector4__v_Mvector4__v_R");
static_assert(sizeof(Ftuple_Lvector4__v_Mvector4__v_R) == 0x000050, "Wrong size on Ftuple_Lvector4__v_Mvector4__v_R");
static_assert(offsetof(Ftuple_Lvector4__v_Mvector4__v_R, __verse_0x18E3F084_Elem0) == 0x000000, "Member 'Ftuple_Lvector4__v_Mvector4__v_R::__verse_0x18E3F084_Elem0' has a wrong offset!");
static_assert(offsetof(Ftuple_Lvector4__v_Mvector4__v_R, __verse_0x7D844C3C_Elem1) == 0x000028, "Member 'Ftuple_Lvector4__v_Mvector4__v_R::__verse_0x7D844C3C_Elem1' has a wrong offset!");

// SolarisGeneratedStruct Verse.vector2r
// 0x0020 (0x0020 - 0x0000)
struct Fvector2r final
{
public:
	struct FVerseRational                         __verse_0x51F8FD2F_X;                              // 0x0000(0x0010)(InstancedReference, NoDestructor)
	struct FVerseRational                         __verse_0x349F4197_Y;                              // 0x0010(0x0010)(InstancedReference, NoDestructor)
};
static_assert(alignof(Fvector2r) == 0x000008, "Wrong alignment on Fvector2r");
static_assert(sizeof(Fvector2r) == 0x000020, "Wrong size on Fvector2r");
static_assert(offsetof(Fvector2r, __verse_0x51F8FD2F_X) == 0x000000, "Member 'Fvector2r::__verse_0x51F8FD2F_X' has a wrong offset!");
static_assert(offsetof(Fvector2r, __verse_0x349F4197_Y) == 0x000010, "Member 'Fvector2r::__verse_0x349F4197_Y' has a wrong offset!");

}

