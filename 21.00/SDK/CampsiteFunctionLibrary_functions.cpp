#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CampsiteFunctionLibrary

#include "Basic.hpp"

#include "CampsiteFunctionLibrary_classes.hpp"
#include "CampsiteFunctionLibrary_parameters.hpp"


namespace SDK
{

// Function CampsiteFunctionLibrary.CampsiteFunctionLibrary_C.Trajectory Placement Preview Campsite
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TScriptInterface<class IFortTrajectoryAbilityInterface>Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// Enum_Campsite_Improvements              ImprovementType                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_ProjectileTrajectory_C*       TrajectoryIndicator                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_ProjectileTrajectory_C*       TrajectoryIndicatorRed                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ThrowingPlayerActor                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    isTrajHidden_                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Class_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MinDistanceFromObstacles                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABGA_Campsite_C*                  target_campsite                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    valid_                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCampsiteFunctionLibrary_C::Trajectory_Placement_Preview_Campsite(TScriptInterface<class IFortTrajectoryAbilityInterface> Target, Enum_Campsite_Improvements ImprovementType, class ABP_ProjectileTrajectory_C* TrajectoryIndicator, class ABP_ProjectileTrajectory_C* TrajectoryIndicatorRed, class APawn* ThrowingPlayerActor, bool isTrajHidden_, class UClass* Class_0, float MinDistanceFromObstacles, class UObject* __WorldContext, class ABGA_Campsite_C** target_campsite, bool* valid_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CampsiteFunctionLibrary_C", "Trajectory Placement Preview Campsite");

	Params::CampsiteFunctionLibrary_C_Trajectory_Placement_Preview_Campsite Parms{};

	Parms.Target = Target;
	Parms.ImprovementType = ImprovementType;
	Parms.TrajectoryIndicator = TrajectoryIndicator;
	Parms.TrajectoryIndicatorRed = TrajectoryIndicatorRed;
	Parms.ThrowingPlayerActor = ThrowingPlayerActor;
	Parms.isTrajHidden_ = isTrajHidden_;
	Parms.Class_0 = Class_0;
	Parms.MinDistanceFromObstacles = MinDistanceFromObstacles;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (target_campsite != nullptr)
		*target_campsite = Parms.target_campsite;

	if (valid_ != nullptr)
		*valid_ = Parms.valid_;
}


// Function CampsiteFunctionLibrary.CampsiteFunctionLibrary_C.TentBouncePlayerOnHit
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AFortPlayerPawn*                  HitPlayerPawn                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Tent                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     Bounce_GC                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Hit_Location                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Hit_Normal                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class AFortPlayerPawn*>          Recently_Launched                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AFortPlayerPawn*                  Launched_Pawn                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCampsiteFunctionLibrary_C::TentBouncePlayerOnHit(class AFortPlayerPawn* HitPlayerPawn, class AActor* Tent, const struct FGameplayTag& Bounce_GC, const struct FVector& Hit_Location, const struct FVector& Hit_Normal, const TArray<class AFortPlayerPawn*>& Recently_Launched, class UObject* __WorldContext, class AFortPlayerPawn** Launched_Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CampsiteFunctionLibrary_C", "TentBouncePlayerOnHit");

	Params::CampsiteFunctionLibrary_C_TentBouncePlayerOnHit Parms{};

	Parms.HitPlayerPawn = HitPlayerPawn;
	Parms.Tent = Tent;
	Parms.Bounce_GC = std::move(Bounce_GC);
	Parms.Hit_Location = std::move(Hit_Location);
	Parms.Hit_Normal = std::move(Hit_Normal);
	Parms.Recently_Launched = std::move(Recently_Launched);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Launched_Pawn != nullptr)
		*Launched_Pawn = Parms.Launched_Pawn;
}


// Function CampsiteFunctionLibrary.CampsiteFunctionLibrary_C.Surface Supports Campsite Deployment?
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// float                                   MinDistanceFromObstacles                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           InstigatingActor                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         ProjRotation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    validSurface                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCampsiteFunctionLibrary_C::Surface_Supports_Campsite_Deployment_(const struct FHitResult& Hit, float MinDistanceFromObstacles, class AActor* InstigatingActor, const struct FRotator& ProjRotation, class UObject* __WorldContext, bool* validSurface)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CampsiteFunctionLibrary_C", "Surface Supports Campsite Deployment?");

	Params::CampsiteFunctionLibrary_C_Surface_Supports_Campsite_Deployment_ Parms{};

	Parms.Hit = std::move(Hit);
	Parms.MinDistanceFromObstacles = MinDistanceFromObstacles;
	Parms.InstigatingActor = InstigatingActor;
	Parms.ProjRotation = std::move(ProjRotation);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (validSurface != nullptr)
		*validSurface = Parms.validSurface;
}


// Function CampsiteFunctionLibrary.CampsiteFunctionLibrary_C.Spawn And Establish New Campsite
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AFortPlayerStateAthena*           Player_State_Athena                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
// class AActor*                           SupportingActor                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FFortItemEntry                   Instigating_Item                                       (BlueprintVisible, BlueprintReadOnly, Parm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABGA_Campsite_C*                  AsBGA_Campsite                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCampsiteFunctionLibrary_C::Spawn_And_Establish_New_Campsite(class AFortPlayerStateAthena* Player_State_Athena, const struct FTransform& Transform, class AActor* SupportingActor, const struct FFortItemEntry& Instigating_Item, class UObject* __WorldContext, class ABGA_Campsite_C** AsBGA_Campsite)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CampsiteFunctionLibrary_C", "Spawn And Establish New Campsite");

	Params::CampsiteFunctionLibrary_C_Spawn_And_Establish_New_Campsite Parms{};

	Parms.Player_State_Athena = Player_State_Athena;
	Parms.Transform = std::move(Transform);
	Parms.SupportingActor = SupportingActor;
	Parms.Instigating_Item = std::move(Instigating_Item);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (AsBGA_Campsite != nullptr)
		*AsBGA_Campsite = Parms.AsBGA_Campsite;
}


// Function CampsiteFunctionLibrary.CampsiteFunctionLibrary_C.RotatorFacingTargetAlongNormal
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Start                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Target                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          RotationAxis                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Xdirection                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

struct FRotator UCampsiteFunctionLibrary_C::RotatorFacingTargetAlongNormal(const struct FVector& Start, const struct FVector& Target, const struct FVector& RotationAxis, float Xdirection, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CampsiteFunctionLibrary_C", "RotatorFacingTargetAlongNormal");

	Params::CampsiteFunctionLibrary_C_RotatorFacingTargetAlongNormal Parms{};

	Parms.Start = std::move(Start);
	Parms.Target = std::move(Target);
	Parms.RotationAxis = std::move(RotationAxis);
	Parms.Xdirection = Xdirection;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function CampsiteFunctionLibrary.CampsiteFunctionLibrary_C.Raycast Improvement Positioning
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Desired_Location                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class AActor*>                   ActorsToIgnore                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Hit                                                    (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void UCampsiteFunctionLibrary_C::Raycast_Improvement_Positioning(const struct FVector& Desired_Location, const TArray<class AActor*>& ActorsToIgnore, class UObject* __WorldContext, struct FHitResult* Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CampsiteFunctionLibrary_C", "Raycast Improvement Positioning");

	Params::CampsiteFunctionLibrary_C_Raycast_Improvement_Positioning Parms{};

	Parms.Desired_Location = std::move(Desired_Location);
	Parms.ActorsToIgnore = std::move(ActorsToIgnore);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Hit != nullptr)
		*Hit = std::move(Parms.Hit);
}


// Function CampsiteFunctionLibrary.CampsiteFunctionLibrary_C.RandomRotationOnSurfaceNormal
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          inputNormal                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCampsiteFunctionLibrary_C::RandomRotationOnSurfaceNormal(const struct FVector& inputNormal, class UObject* __WorldContext, struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CampsiteFunctionLibrary_C", "RandomRotationOnSurfaceNormal");

	Params::CampsiteFunctionLibrary_C_RandomRotationOnSurfaceNormal Parms{};

	Parms.inputNormal = std::move(inputNormal);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function CampsiteFunctionLibrary.CampsiteFunctionLibrary_C.GetNearestCampsite
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class ABGA_Campsite_C*>          Campsites                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FVector                          targetLoc                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABGA_Campsite_C*                  nearest_camp                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCampsiteFunctionLibrary_C::GetNearestCampsite(TArray<class ABGA_Campsite_C*>& Campsites, const struct FVector& targetLoc, class UObject* __WorldContext, class ABGA_Campsite_C** nearest_camp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CampsiteFunctionLibrary_C", "GetNearestCampsite");

	Params::CampsiteFunctionLibrary_C_GetNearestCampsite Parms{};

	Parms.Campsites = std::move(Campsites);
	Parms.targetLoc = std::move(targetLoc);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Campsites = std::move(Parms.Campsites);

	if (nearest_camp != nullptr)
		*nearest_camp = Parms.nearest_camp;
}


// Function CampsiteFunctionLibrary.CampsiteFunctionLibrary_C.Get Nearby Campsites
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AFortPlayerStateAthena*           ReferencePlayerState                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          InquiryLocation                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class AActor*>                   ActorsToIgnore                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ABGA_Campsite_C*>          FriendlyCampsites                                      (Parm, OutParm)
// TArray<class ABGA_Campsite_C*>          EnemyCampsites                                         (Parm, OutParm)

void UCampsiteFunctionLibrary_C::Get_Nearby_Campsites(class AFortPlayerStateAthena* ReferencePlayerState, const struct FVector& InquiryLocation, const TArray<class AActor*>& ActorsToIgnore, class UObject* __WorldContext, TArray<class ABGA_Campsite_C*>* FriendlyCampsites, TArray<class ABGA_Campsite_C*>* EnemyCampsites)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CampsiteFunctionLibrary_C", "Get Nearby Campsites");

	Params::CampsiteFunctionLibrary_C_Get_Nearby_Campsites Parms{};

	Parms.ReferencePlayerState = ReferencePlayerState;
	Parms.InquiryLocation = std::move(InquiryLocation);
	Parms.ActorsToIgnore = std::move(ActorsToIgnore);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (FriendlyCampsites != nullptr)
		*FriendlyCampsites = std::move(Parms.FriendlyCampsites);

	if (EnemyCampsites != nullptr)
		*EnemyCampsites = std::move(Parms.EnemyCampsites);
}


// Function CampsiteFunctionLibrary.CampsiteFunctionLibrary_C.FilterPlayerStatesForActivePlayers
// (Static, Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AFortPlayerStateAthena*>   InPlayerStates                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class AFortPlayerStateAthena*>   FilteredPlayerStates                                   (Parm, OutParm)

void UCampsiteFunctionLibrary_C::FilterPlayerStatesForActivePlayers(TArray<class AFortPlayerStateAthena*>& InPlayerStates, class UObject* __WorldContext, TArray<class AFortPlayerStateAthena*>* FilteredPlayerStates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CampsiteFunctionLibrary_C", "FilterPlayerStatesForActivePlayers");

	Params::CampsiteFunctionLibrary_C_FilterPlayerStatesForActivePlayers Parms{};

	Parms.InPlayerStates = std::move(InPlayerStates);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	InPlayerStates = std::move(Parms.InPlayerStates);

	if (FilteredPlayerStates != nullptr)
		*FilteredPlayerStates = std::move(Parms.FilteredPlayerStates);
}


// Function CampsiteFunctionLibrary.CampsiteFunctionLibrary_C.BestCampsiteForNewImprovement
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// Enum_Campsite_Improvements              ImprovementType                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ABGA_Campsite_C*>          NearbyCampsites                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FVector                          QueryLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABGA_Campsite_C*                  BestCampsite                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCampsiteFunctionLibrary_C::BestCampsiteForNewImprovement(Enum_Campsite_Improvements ImprovementType, TArray<class ABGA_Campsite_C*>& NearbyCampsites, const struct FVector& QueryLocation, class UObject* __WorldContext, class ABGA_Campsite_C** BestCampsite)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CampsiteFunctionLibrary_C", "BestCampsiteForNewImprovement");

	Params::CampsiteFunctionLibrary_C_BestCampsiteForNewImprovement Parms{};

	Parms.ImprovementType = ImprovementType;
	Parms.NearbyCampsites = std::move(NearbyCampsites);
	Parms.QueryLocation = std::move(QueryLocation);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	NearbyCampsites = std::move(Parms.NearbyCampsites);

	if (BestCampsite != nullptr)
		*BestCampsite = Parms.BestCampsite;
}


// Function CampsiteFunctionLibrary.CampsiteFunctionLibrary_C.Best Squadmate And Campsite To Add New Tent
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABGA_Campsite_C*>          Campsites_to_Search                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class AFortPlayerStateAthena*           Reference_Player_State                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Reference_Location                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABGA_Campsite_C*                  Campsite                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APlayerState*                     Player                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCampsiteFunctionLibrary_C::Best_Squadmate_And_Campsite_To_Add_New_Tent(TArray<class ABGA_Campsite_C*>& Campsites_to_Search, class AFortPlayerStateAthena* Reference_Player_State, const struct FVector& Reference_Location, class UObject* __WorldContext, class ABGA_Campsite_C** Campsite, class APlayerState** Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CampsiteFunctionLibrary_C", "Best Squadmate And Campsite To Add New Tent");

	Params::CampsiteFunctionLibrary_C_Best_Squadmate_And_Campsite_To_Add_New_Tent Parms{};

	Parms.Campsites_to_Search = std::move(Campsites_to_Search);
	Parms.Reference_Player_State = Reference_Player_State;
	Parms.Reference_Location = std::move(Reference_Location);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Campsites_to_Search = std::move(Parms.Campsites_to_Search);

	if (Campsite != nullptr)
		*Campsite = Parms.Campsite;

	if (Player != nullptr)
		*Player = Parms.Player;
}

}

