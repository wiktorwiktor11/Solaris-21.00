#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: XpMatchProgression

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function XpMatchProgression.XpMatchProgression_C.BndEvt__PlayerLevelBar_K2Node_ComponentBoundEvent_3_LevelChanged__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct XpMatchProgression_C_BndEvt__PlayerLevelBar_K2Node_ComponentBoundEvent_3_LevelChanged__DelegateSignature final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(XpMatchProgression_C_BndEvt__PlayerLevelBar_K2Node_ComponentBoundEvent_3_LevelChanged__DelegateSignature) == 0x000004, "Wrong alignment on XpMatchProgression_C_BndEvt__PlayerLevelBar_K2Node_ComponentBoundEvent_3_LevelChanged__DelegateSignature");
static_assert(sizeof(XpMatchProgression_C_BndEvt__PlayerLevelBar_K2Node_ComponentBoundEvent_3_LevelChanged__DelegateSignature) == 0x000004, "Wrong size on XpMatchProgression_C_BndEvt__PlayerLevelBar_K2Node_ComponentBoundEvent_3_LevelChanged__DelegateSignature");
static_assert(offsetof(XpMatchProgression_C_BndEvt__PlayerLevelBar_K2Node_ComponentBoundEvent_3_LevelChanged__DelegateSignature, Level) == 0x000000, "Member 'XpMatchProgression_C_BndEvt__PlayerLevelBar_K2Node_ComponentBoundEvent_3_LevelChanged__DelegateSignature::Level' has a wrong offset!");

// Function XpMatchProgression.XpMatchProgression_C.ExecuteUbergraph_XpMatchProgression
// 0x0078 (0x0078 - 0x0000)
struct XpMatchProgression_C_ExecuteUbergraph_XpMatchProgression final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAthenaPlayerMatchReport*               K2Node_CustomEvent_Report;                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FAthenaMatchXpReward>           CallFunc_GetXpRewards_XpRewards;                   // 0x0010(0x0010)(ReferenceParm)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0020(0x0040)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_Level;                  // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetTotalScoreEarned_ReturnValue;          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetTotalSeasonalXpEarned_ReturnValue;     // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(XpMatchProgression_C_ExecuteUbergraph_XpMatchProgression) == 0x000008, "Wrong alignment on XpMatchProgression_C_ExecuteUbergraph_XpMatchProgression");
static_assert(sizeof(XpMatchProgression_C_ExecuteUbergraph_XpMatchProgression) == 0x000078, "Wrong size on XpMatchProgression_C_ExecuteUbergraph_XpMatchProgression");
static_assert(offsetof(XpMatchProgression_C_ExecuteUbergraph_XpMatchProgression, EntryPoint) == 0x000000, "Member 'XpMatchProgression_C_ExecuteUbergraph_XpMatchProgression::EntryPoint' has a wrong offset!");
static_assert(offsetof(XpMatchProgression_C_ExecuteUbergraph_XpMatchProgression, K2Node_CustomEvent_Report) == 0x000008, "Member 'XpMatchProgression_C_ExecuteUbergraph_XpMatchProgression::K2Node_CustomEvent_Report' has a wrong offset!");
static_assert(offsetof(XpMatchProgression_C_ExecuteUbergraph_XpMatchProgression, CallFunc_GetXpRewards_XpRewards) == 0x000010, "Member 'XpMatchProgression_C_ExecuteUbergraph_XpMatchProgression::CallFunc_GetXpRewards_XpRewards' has a wrong offset!");
static_assert(offsetof(XpMatchProgression_C_ExecuteUbergraph_XpMatchProgression, K2Node_Event_MyGeometry) == 0x000020, "Member 'XpMatchProgression_C_ExecuteUbergraph_XpMatchProgression::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(XpMatchProgression_C_ExecuteUbergraph_XpMatchProgression, K2Node_Event_InDeltaTime) == 0x000060, "Member 'XpMatchProgression_C_ExecuteUbergraph_XpMatchProgression::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(XpMatchProgression_C_ExecuteUbergraph_XpMatchProgression, K2Node_ComponentBoundEvent_Level) == 0x000064, "Member 'XpMatchProgression_C_ExecuteUbergraph_XpMatchProgression::K2Node_ComponentBoundEvent_Level' has a wrong offset!");
static_assert(offsetof(XpMatchProgression_C_ExecuteUbergraph_XpMatchProgression, CallFunc_GetTotalScoreEarned_ReturnValue) == 0x000068, "Member 'XpMatchProgression_C_ExecuteUbergraph_XpMatchProgression::CallFunc_GetTotalScoreEarned_ReturnValue' has a wrong offset!");
static_assert(offsetof(XpMatchProgression_C_ExecuteUbergraph_XpMatchProgression, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00006C, "Member 'XpMatchProgression_C_ExecuteUbergraph_XpMatchProgression::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(XpMatchProgression_C_ExecuteUbergraph_XpMatchProgression, CallFunc_GetTotalSeasonalXpEarned_ReturnValue) == 0x000070, "Member 'XpMatchProgression_C_ExecuteUbergraph_XpMatchProgression::CallFunc_GetTotalSeasonalXpEarned_ReturnValue' has a wrong offset!");
static_assert(offsetof(XpMatchProgression_C_ExecuteUbergraph_XpMatchProgression, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000074, "Member 'XpMatchProgression_C_ExecuteUbergraph_XpMatchProgression::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");

// Function XpMatchProgression.XpMatchProgression_C.IsReadyForNextXpEvent
// 0x0004 (0x0004 - 0x0000)
struct XpMatchProgression_C_IsReadyForNextXpEvent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsReadyForNextXpReward_Ready;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsReadyForNextXpReward_Ready_1;           // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(XpMatchProgression_C_IsReadyForNextXpEvent) == 0x000001, "Wrong alignment on XpMatchProgression_C_IsReadyForNextXpEvent");
static_assert(sizeof(XpMatchProgression_C_IsReadyForNextXpEvent) == 0x000004, "Wrong size on XpMatchProgression_C_IsReadyForNextXpEvent");
static_assert(offsetof(XpMatchProgression_C_IsReadyForNextXpEvent, ReturnValue) == 0x000000, "Member 'XpMatchProgression_C_IsReadyForNextXpEvent::ReturnValue' has a wrong offset!");
static_assert(offsetof(XpMatchProgression_C_IsReadyForNextXpEvent, CallFunc_IsReadyForNextXpReward_Ready) == 0x000001, "Member 'XpMatchProgression_C_IsReadyForNextXpEvent::CallFunc_IsReadyForNextXpReward_Ready' has a wrong offset!");
static_assert(offsetof(XpMatchProgression_C_IsReadyForNextXpEvent, CallFunc_IsReadyForNextXpReward_Ready_1) == 0x000002, "Member 'XpMatchProgression_C_IsReadyForNextXpEvent::CallFunc_IsReadyForNextXpReward_Ready_1' has a wrong offset!");
static_assert(offsetof(XpMatchProgression_C_IsReadyForNextXpEvent, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'XpMatchProgression_C_IsReadyForNextXpEvent::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function XpMatchProgression.XpMatchProgression_C.Play Xp Rewards
// 0x0008 (0x0008 - 0x0000)
struct XpMatchProgression_C_Play_Xp_Rewards final
{
public:
	class UAthenaPlayerMatchReport*               Report_0;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(XpMatchProgression_C_Play_Xp_Rewards) == 0x000008, "Wrong alignment on XpMatchProgression_C_Play_Xp_Rewards");
static_assert(sizeof(XpMatchProgression_C_Play_Xp_Rewards) == 0x000008, "Wrong size on XpMatchProgression_C_Play_Xp_Rewards");
static_assert(offsetof(XpMatchProgression_C_Play_Xp_Rewards, Report_0) == 0x000000, "Member 'XpMatchProgression_C_Play_Xp_Rewards::Report_0' has a wrong offset!");

// Function XpMatchProgression.XpMatchProgression_C.SetPlayerState
// 0x0030 (0x0030 - 0x0000)
struct XpMatchProgression_C_SetPlayerState final
{
public:
	class AFortPlayerControllerAthena*            PlayerController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAthenaLevelInfo                       AthenaLevelInfo;                                   // 0x0008(0x0024)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(XpMatchProgression_C_SetPlayerState) == 0x000008, "Wrong alignment on XpMatchProgression_C_SetPlayerState");
static_assert(sizeof(XpMatchProgression_C_SetPlayerState) == 0x000030, "Wrong size on XpMatchProgression_C_SetPlayerState");
static_assert(offsetof(XpMatchProgression_C_SetPlayerState, PlayerController) == 0x000000, "Member 'XpMatchProgression_C_SetPlayerState::PlayerController' has a wrong offset!");
static_assert(offsetof(XpMatchProgression_C_SetPlayerState, AthenaLevelInfo) == 0x000008, "Member 'XpMatchProgression_C_SetPlayerState::AthenaLevelInfo' has a wrong offset!");

// Function XpMatchProgression.XpMatchProgression_C.Tick
// 0x0048 (0x0048 - 0x0000)
struct XpMatchProgression_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(XpMatchProgression_C_Tick) == 0x000008, "Wrong alignment on XpMatchProgression_C_Tick");
static_assert(sizeof(XpMatchProgression_C_Tick) == 0x000048, "Wrong size on XpMatchProgression_C_Tick");
static_assert(offsetof(XpMatchProgression_C_Tick, MyGeometry) == 0x000000, "Member 'XpMatchProgression_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(XpMatchProgression_C_Tick, InDeltaTime) == 0x000040, "Member 'XpMatchProgression_C_Tick::InDeltaTime' has a wrong offset!");

// Function XpMatchProgression.XpMatchProgression_C.TickRewardAnimation
// 0x0010 (0x0010 - 0x0000)
struct XpMatchProgression_C_TickRewardAnimation final
{
public:
	bool                                          CallFunc_IsReadyForNextXpEvent_ReturnValue;        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(XpMatchProgression_C_TickRewardAnimation) == 0x000004, "Wrong alignment on XpMatchProgression_C_TickRewardAnimation");
static_assert(sizeof(XpMatchProgression_C_TickRewardAnimation) == 0x000010, "Wrong size on XpMatchProgression_C_TickRewardAnimation");
static_assert(offsetof(XpMatchProgression_C_TickRewardAnimation, CallFunc_IsReadyForNextXpEvent_ReturnValue) == 0x000000, "Member 'XpMatchProgression_C_TickRewardAnimation::CallFunc_IsReadyForNextXpEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(XpMatchProgression_C_TickRewardAnimation, Temp_int_Variable) == 0x000004, "Member 'XpMatchProgression_C_TickRewardAnimation::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(XpMatchProgression_C_TickRewardAnimation, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'XpMatchProgression_C_TickRewardAnimation::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(XpMatchProgression_C_TickRewardAnimation, CallFunc_Array_IsValidIndex_ReturnValue) == 0x00000C, "Member 'XpMatchProgression_C_TickRewardAnimation::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(XpMatchProgression_C_TickRewardAnimation, CallFunc_BooleanAND_ReturnValue) == 0x00000D, "Member 'XpMatchProgression_C_TickRewardAnimation::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function XpMatchProgression.XpMatchProgression_C.UpdateRewardForLevel
// 0x0030 (0x0030 - 0x0000)
struct XpMatchProgression_C_UpdateRewardForLevel final
{
public:
	int32                                         SeasonLevel;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortMcpContext*                        CallFunc_GetContext_ReturnValue;                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortMcpProfileAthena*                  CallFunc_GetAthenaProfile_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFortItemInstanceQuantityPair          CallFunc_GetSeasonLevelUpReward_Reward;            // 0x0018(0x0010)(NoDestructor)
	int32                                         CallFunc_GetSeasonLevelUpReward_RewardLevel;       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSeasonLevelUpReward_ReturnValue;       // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(XpMatchProgression_C_UpdateRewardForLevel) == 0x000008, "Wrong alignment on XpMatchProgression_C_UpdateRewardForLevel");
static_assert(sizeof(XpMatchProgression_C_UpdateRewardForLevel) == 0x000030, "Wrong size on XpMatchProgression_C_UpdateRewardForLevel");
static_assert(offsetof(XpMatchProgression_C_UpdateRewardForLevel, SeasonLevel) == 0x000000, "Member 'XpMatchProgression_C_UpdateRewardForLevel::SeasonLevel' has a wrong offset!");
static_assert(offsetof(XpMatchProgression_C_UpdateRewardForLevel, CallFunc_GetContext_ReturnValue) == 0x000008, "Member 'XpMatchProgression_C_UpdateRewardForLevel::CallFunc_GetContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(XpMatchProgression_C_UpdateRewardForLevel, CallFunc_GetAthenaProfile_ReturnValue) == 0x000010, "Member 'XpMatchProgression_C_UpdateRewardForLevel::CallFunc_GetAthenaProfile_ReturnValue' has a wrong offset!");
static_assert(offsetof(XpMatchProgression_C_UpdateRewardForLevel, CallFunc_GetSeasonLevelUpReward_Reward) == 0x000018, "Member 'XpMatchProgression_C_UpdateRewardForLevel::CallFunc_GetSeasonLevelUpReward_Reward' has a wrong offset!");
static_assert(offsetof(XpMatchProgression_C_UpdateRewardForLevel, CallFunc_GetSeasonLevelUpReward_RewardLevel) == 0x000028, "Member 'XpMatchProgression_C_UpdateRewardForLevel::CallFunc_GetSeasonLevelUpReward_RewardLevel' has a wrong offset!");
static_assert(offsetof(XpMatchProgression_C_UpdateRewardForLevel, CallFunc_GetSeasonLevelUpReward_ReturnValue) == 0x00002C, "Member 'XpMatchProgression_C_UpdateRewardForLevel::CallFunc_GetSeasonLevelUpReward_ReturnValue' has a wrong offset!");
static_assert(offsetof(XpMatchProgression_C_UpdateRewardForLevel, CallFunc_IsValid_ReturnValue) == 0x00002D, "Member 'XpMatchProgression_C_UpdateRewardForLevel::CallFunc_IsValid_ReturnValue' has a wrong offset!");

}

