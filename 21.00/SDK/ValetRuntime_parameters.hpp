#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ValetRuntime

#include "Basic.hpp"

#include "ValetRuntime_structs.hpp"
#include "GameplayTags_0_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK::Params
{

// Function ValetRuntime.DagwoodNetworkPhysicsComponent.SetPendingInputCmd
// 0x0030 (0x0030 - 0x0000)
struct DagwoodNetworkPhysicsComponent_SetPendingInputCmd final
{
public:
	struct FFortDagwoodCmd                        In;                                                // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DagwoodNetworkPhysicsComponent_SetPendingInputCmd) == 0x000008, "Wrong alignment on DagwoodNetworkPhysicsComponent_SetPendingInputCmd");
static_assert(sizeof(DagwoodNetworkPhysicsComponent_SetPendingInputCmd) == 0x000030, "Wrong size on DagwoodNetworkPhysicsComponent_SetPendingInputCmd");
static_assert(offsetof(DagwoodNetworkPhysicsComponent_SetPendingInputCmd, In) == 0x000000, "Member 'DagwoodNetworkPhysicsComponent_SetPendingInputCmd::In' has a wrong offset!");

// Function ValetRuntime.DagwoodNetworkPhysicsComponent.SetState_GT
// 0x0258 (0x0258 - 0x0000)
struct DagwoodNetworkPhysicsComponent_SetState_GT final
{
public:
	struct FDagwoodInPersistent                   In;                                                // 0x0000(0x0258)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DagwoodNetworkPhysicsComponent_SetState_GT) == 0x000008, "Wrong alignment on DagwoodNetworkPhysicsComponent_SetState_GT");
static_assert(sizeof(DagwoodNetworkPhysicsComponent_SetState_GT) == 0x000258, "Wrong size on DagwoodNetworkPhysicsComponent_SetState_GT");
static_assert(offsetof(DagwoodNetworkPhysicsComponent_SetState_GT, In) == 0x000000, "Member 'DagwoodNetworkPhysicsComponent_SetState_GT::In' has a wrong offset!");

// Function ValetRuntime.DagwoodNetworkPhysicsComponent.GetPendingInputCmd
// 0x0030 (0x0030 - 0x0000)
struct DagwoodNetworkPhysicsComponent_GetPendingInputCmd final
{
public:
	struct FFortDagwoodCmd                        ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DagwoodNetworkPhysicsComponent_GetPendingInputCmd) == 0x000008, "Wrong alignment on DagwoodNetworkPhysicsComponent_GetPendingInputCmd");
static_assert(sizeof(DagwoodNetworkPhysicsComponent_GetPendingInputCmd) == 0x000030, "Wrong size on DagwoodNetworkPhysicsComponent_GetPendingInputCmd");
static_assert(offsetof(DagwoodNetworkPhysicsComponent_GetPendingInputCmd, ReturnValue) == 0x000000, "Member 'DagwoodNetworkPhysicsComponent_GetPendingInputCmd::ReturnValue' has a wrong offset!");

// Function ValetRuntime.DagwoodNetworkPhysicsComponent.GetState_GT
// 0x0258 (0x0258 - 0x0000)
struct DagwoodNetworkPhysicsComponent_GetState_GT final
{
public:
	struct FDagwoodInPersistent                   ReturnValue;                                       // 0x0000(0x0258)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DagwoodNetworkPhysicsComponent_GetState_GT) == 0x000008, "Wrong alignment on DagwoodNetworkPhysicsComponent_GetState_GT");
static_assert(sizeof(DagwoodNetworkPhysicsComponent_GetState_GT) == 0x000258, "Wrong size on DagwoodNetworkPhysicsComponent_GetState_GT");
static_assert(offsetof(DagwoodNetworkPhysicsComponent_GetState_GT, ReturnValue) == 0x000000, "Member 'DagwoodNetworkPhysicsComponent_GetState_GT::ReturnValue' has a wrong offset!");

// Function ValetRuntime.DagwoodNetworkPhysicsComponent.GetState_PT
// 0x01B0 (0x01B0 - 0x0000)
struct DagwoodNetworkPhysicsComponent_GetState_PT final
{
public:
	struct FDagwoodState_PT                       ReturnValue;                                       // 0x0000(0x01B0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DagwoodNetworkPhysicsComponent_GetState_PT) == 0x000008, "Wrong alignment on DagwoodNetworkPhysicsComponent_GetState_PT");
static_assert(sizeof(DagwoodNetworkPhysicsComponent_GetState_PT) == 0x0001B0, "Wrong size on DagwoodNetworkPhysicsComponent_GetState_PT");
static_assert(offsetof(DagwoodNetworkPhysicsComponent_GetState_PT, ReturnValue) == 0x000000, "Member 'DagwoodNetworkPhysicsComponent_GetState_PT::ReturnValue' has a wrong offset!");

// Function ValetRuntime.FortAthenaMutator_OverrideValetVehicleParameters.OnPlaylistLoaded
// 0x0028 (0x0028 - 0x0000)
struct FortAthenaMutator_OverrideValetVehicleParameters_OnPlaylistLoaded final
{
public:
	class FName                                   PlaylistName;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  PlaylistContainerTags;                             // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMutator_OverrideValetVehicleParameters_OnPlaylistLoaded) == 0x000008, "Wrong alignment on FortAthenaMutator_OverrideValetVehicleParameters_OnPlaylistLoaded");
static_assert(sizeof(FortAthenaMutator_OverrideValetVehicleParameters_OnPlaylistLoaded) == 0x000028, "Wrong size on FortAthenaMutator_OverrideValetVehicleParameters_OnPlaylistLoaded");
static_assert(offsetof(FortAthenaMutator_OverrideValetVehicleParameters_OnPlaylistLoaded, PlaylistName) == 0x000000, "Member 'FortAthenaMutator_OverrideValetVehicleParameters_OnPlaylistLoaded::PlaylistName' has a wrong offset!");
static_assert(offsetof(FortAthenaMutator_OverrideValetVehicleParameters_OnPlaylistLoaded, PlaylistContainerTags) == 0x000008, "Member 'FortAthenaMutator_OverrideValetVehicleParameters_OnPlaylistLoaded::PlaylistContainerTags' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.GetCurrentDagwoodRuntimeProperties
// 0x0088 (0x0088 - 0x0000)
struct FortDagwoodVehicle_GetCurrentDagwoodRuntimeProperties final
{
public:
	struct FDagwoodRuntimeModifiers               ReturnValue;                                       // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_GetCurrentDagwoodRuntimeProperties) == 0x000008, "Wrong alignment on FortDagwoodVehicle_GetCurrentDagwoodRuntimeProperties");
static_assert(sizeof(FortDagwoodVehicle_GetCurrentDagwoodRuntimeProperties) == 0x000088, "Wrong size on FortDagwoodVehicle_GetCurrentDagwoodRuntimeProperties");
static_assert(offsetof(FortDagwoodVehicle_GetCurrentDagwoodRuntimeProperties, ReturnValue) == 0x000000, "Member 'FortDagwoodVehicle_GetCurrentDagwoodRuntimeProperties::ReturnValue' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.HandleCurrentPlaylistLoaded
// 0x0028 (0x0028 - 0x0000)
struct FortDagwoodVehicle_HandleCurrentPlaylistLoaded final
{
public:
	class FName                                   PlaylistName;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  PlaylistContextTags;                               // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_HandleCurrentPlaylistLoaded) == 0x000008, "Wrong alignment on FortDagwoodVehicle_HandleCurrentPlaylistLoaded");
static_assert(sizeof(FortDagwoodVehicle_HandleCurrentPlaylistLoaded) == 0x000028, "Wrong size on FortDagwoodVehicle_HandleCurrentPlaylistLoaded");
static_assert(offsetof(FortDagwoodVehicle_HandleCurrentPlaylistLoaded, PlaylistName) == 0x000000, "Member 'FortDagwoodVehicle_HandleCurrentPlaylistLoaded::PlaylistName' has a wrong offset!");
static_assert(offsetof(FortDagwoodVehicle_HandleCurrentPlaylistLoaded, PlaylistContextTags) == 0x000008, "Member 'FortDagwoodVehicle_HandleCurrentPlaylistLoaded::PlaylistContextTags' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.MakeOperable
// 0x0001 (0x0001 - 0x0000)
struct FortDagwoodVehicle_MakeOperable final
{
public:
	bool                                          bAddGas;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_MakeOperable) == 0x000001, "Wrong alignment on FortDagwoodVehicle_MakeOperable");
static_assert(sizeof(FortDagwoodVehicle_MakeOperable) == 0x000001, "Wrong size on FortDagwoodVehicle_MakeOperable");
static_assert(offsetof(FortDagwoodVehicle_MakeOperable, bAddGas) == 0x000000, "Member 'FortDagwoodVehicle_MakeOperable::bAddGas' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.OnClientBeginAltInteract
// 0x0008 (0x0008 - 0x0000)
struct FortDagwoodVehicle_OnClientBeginAltInteract final
{
public:
	class AFortPawn*                              Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_OnClientBeginAltInteract) == 0x000008, "Wrong alignment on FortDagwoodVehicle_OnClientBeginAltInteract");
static_assert(sizeof(FortDagwoodVehicle_OnClientBeginAltInteract) == 0x000008, "Wrong size on FortDagwoodVehicle_OnClientBeginAltInteract");
static_assert(offsetof(FortDagwoodVehicle_OnClientBeginAltInteract, Pawn) == 0x000000, "Member 'FortDagwoodVehicle_OnClientBeginAltInteract::Pawn' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.OnDestroyedPropFromCollision
// 0x0008 (0x0008 - 0x0000)
struct FortDagwoodVehicle_OnDestroyedPropFromCollision final
{
public:
	const class ABuildingActor*                   BuildingHitActor;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_OnDestroyedPropFromCollision) == 0x000008, "Wrong alignment on FortDagwoodVehicle_OnDestroyedPropFromCollision");
static_assert(sizeof(FortDagwoodVehicle_OnDestroyedPropFromCollision) == 0x000008, "Wrong size on FortDagwoodVehicle_OnDestroyedPropFromCollision");
static_assert(offsetof(FortDagwoodVehicle_OnDestroyedPropFromCollision, BuildingHitActor) == 0x000000, "Member 'FortDagwoodVehicle_OnDestroyedPropFromCollision::BuildingHitActor' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.OnHoldSelfDestructStarted
// 0x0010 (0x0010 - 0x0000)
struct FortDagwoodVehicle_OnHoldSelfDestructStarted final
{
public:
	class AFortPawn*                              DriverPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExitDuration;                                      // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortDagwoodVehicle_OnHoldSelfDestructStarted) == 0x000008, "Wrong alignment on FortDagwoodVehicle_OnHoldSelfDestructStarted");
static_assert(sizeof(FortDagwoodVehicle_OnHoldSelfDestructStarted) == 0x000010, "Wrong size on FortDagwoodVehicle_OnHoldSelfDestructStarted");
static_assert(offsetof(FortDagwoodVehicle_OnHoldSelfDestructStarted, DriverPawn) == 0x000000, "Member 'FortDagwoodVehicle_OnHoldSelfDestructStarted::DriverPawn' has a wrong offset!");
static_assert(offsetof(FortDagwoodVehicle_OnHoldSelfDestructStarted, ExitDuration) == 0x000008, "Member 'FortDagwoodVehicle_OnHoldSelfDestructStarted::ExitDuration' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.OnHoldSelfDestructStopped
// 0x0008 (0x0008 - 0x0000)
struct FortDagwoodVehicle_OnHoldSelfDestructStopped final
{
public:
	class AFortPawn*                              DriverPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_OnHoldSelfDestructStopped) == 0x000008, "Wrong alignment on FortDagwoodVehicle_OnHoldSelfDestructStopped");
static_assert(sizeof(FortDagwoodVehicle_OnHoldSelfDestructStopped) == 0x000008, "Wrong size on FortDagwoodVehicle_OnHoldSelfDestructStopped");
static_assert(offsetof(FortDagwoodVehicle_OnHoldSelfDestructStopped, DriverPawn) == 0x000000, "Member 'FortDagwoodVehicle_OnHoldSelfDestructStopped::DriverPawn' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.OnInoperableChanged
// 0x0001 (0x0001 - 0x0000)
struct FortDagwoodVehicle_OnInoperableChanged final
{
public:
	bool                                          bInoperable;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_OnInoperableChanged) == 0x000001, "Wrong alignment on FortDagwoodVehicle_OnInoperableChanged");
static_assert(sizeof(FortDagwoodVehicle_OnInoperableChanged) == 0x000001, "Wrong size on FortDagwoodVehicle_OnInoperableChanged");
static_assert(offsetof(FortDagwoodVehicle_OnInoperableChanged, bInoperable) == 0x000000, "Member 'FortDagwoodVehicle_OnInoperableChanged::bInoperable' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.OnPoppedTire
// 0x0008 (0x0008 - 0x0000)
struct FortDagwoodVehicle_OnPoppedTire final
{
public:
	int32                                         TireIndex;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFakeTire;                                         // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortDagwoodVehicle_OnPoppedTire) == 0x000004, "Wrong alignment on FortDagwoodVehicle_OnPoppedTire");
static_assert(sizeof(FortDagwoodVehicle_OnPoppedTire) == 0x000008, "Wrong size on FortDagwoodVehicle_OnPoppedTire");
static_assert(offsetof(FortDagwoodVehicle_OnPoppedTire, TireIndex) == 0x000000, "Member 'FortDagwoodVehicle_OnPoppedTire::TireIndex' has a wrong offset!");
static_assert(offsetof(FortDagwoodVehicle_OnPoppedTire, bFakeTire) == 0x000004, "Member 'FortDagwoodVehicle_OnPoppedTire::bFakeTire' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.OnRep_DagwoodRuntimeModifiers
// 0x0088 (0x0088 - 0x0000)
struct FortDagwoodVehicle_OnRep_DagwoodRuntimeModifiers final
{
public:
	struct FDagwoodRuntimeModifiers               PrevMods;                                          // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_OnRep_DagwoodRuntimeModifiers) == 0x000008, "Wrong alignment on FortDagwoodVehicle_OnRep_DagwoodRuntimeModifiers");
static_assert(sizeof(FortDagwoodVehicle_OnRep_DagwoodRuntimeModifiers) == 0x000088, "Wrong size on FortDagwoodVehicle_OnRep_DagwoodRuntimeModifiers");
static_assert(offsetof(FortDagwoodVehicle_OnRep_DagwoodRuntimeModifiers, PrevMods) == 0x000000, "Member 'FortDagwoodVehicle_OnRep_DagwoodRuntimeModifiers::PrevMods' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.OnRep_FakeTires
// 0x0010 (0x0010 - 0x0000)
struct FortDagwoodVehicle_OnRep_FakeTires final
{
public:
	TArray<ETireStates>                           PrevTireStates;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_OnRep_FakeTires) == 0x000008, "Wrong alignment on FortDagwoodVehicle_OnRep_FakeTires");
static_assert(sizeof(FortDagwoodVehicle_OnRep_FakeTires) == 0x000010, "Wrong size on FortDagwoodVehicle_OnRep_FakeTires");
static_assert(offsetof(FortDagwoodVehicle_OnRep_FakeTires, PrevTireStates) == 0x000000, "Member 'FortDagwoodVehicle_OnRep_FakeTires::PrevTireStates' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.OnRep_Tires
// 0x0010 (0x0010 - 0x0000)
struct FortDagwoodVehicle_OnRep_Tires final
{
public:
	TArray<ETireStates>                           PrevTireStates;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_OnRep_Tires) == 0x000008, "Wrong alignment on FortDagwoodVehicle_OnRep_Tires");
static_assert(sizeof(FortDagwoodVehicle_OnRep_Tires) == 0x000010, "Wrong size on FortDagwoodVehicle_OnRep_Tires");
static_assert(offsetof(FortDagwoodVehicle_OnRep_Tires, PrevTireStates) == 0x000000, "Member 'FortDagwoodVehicle_OnRep_Tires::PrevTireStates' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.OnRimScrapeDamage
// 0x0004 (0x0004 - 0x0000)
struct FortDagwoodVehicle_OnRimScrapeDamage final
{
public:
	int32                                         TireIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_OnRimScrapeDamage) == 0x000004, "Wrong alignment on FortDagwoodVehicle_OnRimScrapeDamage");
static_assert(sizeof(FortDagwoodVehicle_OnRimScrapeDamage) == 0x000004, "Wrong size on FortDagwoodVehicle_OnRimScrapeDamage");
static_assert(offsetof(FortDagwoodVehicle_OnRimScrapeDamage, TireIndex) == 0x000000, "Member 'FortDagwoodVehicle_OnRimScrapeDamage::TireIndex' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.OnServerAltInteract
// 0x0008 (0x0008 - 0x0000)
struct FortDagwoodVehicle_OnServerAltInteract final
{
public:
	class AFortPawn*                              Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_OnServerAltInteract) == 0x000008, "Wrong alignment on FortDagwoodVehicle_OnServerAltInteract");
static_assert(sizeof(FortDagwoodVehicle_OnServerAltInteract) == 0x000008, "Wrong size on FortDagwoodVehicle_OnServerAltInteract");
static_assert(offsetof(FortDagwoodVehicle_OnServerAltInteract, Pawn) == 0x000000, "Member 'FortDagwoodVehicle_OnServerAltInteract::Pawn' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.OnTickAudioController
// 0x0004 (0x0004 - 0x0000)
struct FortDagwoodVehicle_OnTickAudioController final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_OnTickAudioController) == 0x000004, "Wrong alignment on FortDagwoodVehicle_OnTickAudioController");
static_assert(sizeof(FortDagwoodVehicle_OnTickAudioController) == 0x000004, "Wrong size on FortDagwoodVehicle_OnTickAudioController");
static_assert(offsetof(FortDagwoodVehicle_OnTickAudioController, DeltaTime) == 0x000000, "Member 'FortDagwoodVehicle_OnTickAudioController::DeltaTime' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.OnTickAudioFade
// 0x0004 (0x0004 - 0x0000)
struct FortDagwoodVehicle_OnTickAudioFade final
{
public:
	float                                         FadeParam;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_OnTickAudioFade) == 0x000004, "Wrong alignment on FortDagwoodVehicle_OnTickAudioFade");
static_assert(sizeof(FortDagwoodVehicle_OnTickAudioFade) == 0x000004, "Wrong size on FortDagwoodVehicle_OnTickAudioFade");
static_assert(offsetof(FortDagwoodVehicle_OnTickAudioFade, FadeParam) == 0x000000, "Member 'FortDagwoodVehicle_OnTickAudioFade::FadeParam' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.ServerAddRuntimeGearsInfo
// 0x0010 (0x0010 - 0x0000)
struct FortDagwoodVehicle_ServerAddRuntimeGearsInfo final
{
public:
	struct FRuntimeGearInfo                       GearInfo;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_ServerAddRuntimeGearsInfo) == 0x000004, "Wrong alignment on FortDagwoodVehicle_ServerAddRuntimeGearsInfo");
static_assert(sizeof(FortDagwoodVehicle_ServerAddRuntimeGearsInfo) == 0x000010, "Wrong size on FortDagwoodVehicle_ServerAddRuntimeGearsInfo");
static_assert(offsetof(FortDagwoodVehicle_ServerAddRuntimeGearsInfo, GearInfo) == 0x000000, "Member 'FortDagwoodVehicle_ServerAddRuntimeGearsInfo::GearInfo' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.ServerSetDestructionInfo
// 0x0010 (0x0010 - 0x0000)
struct FortDagwoodVehicle_ServerSetDestructionInfo final
{
public:
	float                                         InSelfDestructTime;                                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMaxTimeZeroHealth;                               // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMaxTimeSelfDestructCleanup;                      // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMaxTimeExplosion;                                // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_ServerSetDestructionInfo) == 0x000004, "Wrong alignment on FortDagwoodVehicle_ServerSetDestructionInfo");
static_assert(sizeof(FortDagwoodVehicle_ServerSetDestructionInfo) == 0x000010, "Wrong size on FortDagwoodVehicle_ServerSetDestructionInfo");
static_assert(offsetof(FortDagwoodVehicle_ServerSetDestructionInfo, InSelfDestructTime) == 0x000000, "Member 'FortDagwoodVehicle_ServerSetDestructionInfo::InSelfDestructTime' has a wrong offset!");
static_assert(offsetof(FortDagwoodVehicle_ServerSetDestructionInfo, InMaxTimeZeroHealth) == 0x000004, "Member 'FortDagwoodVehicle_ServerSetDestructionInfo::InMaxTimeZeroHealth' has a wrong offset!");
static_assert(offsetof(FortDagwoodVehicle_ServerSetDestructionInfo, InMaxTimeSelfDestructCleanup) == 0x000008, "Member 'FortDagwoodVehicle_ServerSetDestructionInfo::InMaxTimeSelfDestructCleanup' has a wrong offset!");
static_assert(offsetof(FortDagwoodVehicle_ServerSetDestructionInfo, InMaxTimeExplosion) == 0x00000C, "Member 'FortDagwoodVehicle_ServerSetDestructionInfo::InMaxTimeExplosion' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.ServerSetFadeDuration
// 0x0004 (0x0004 - 0x0000)
struct FortDagwoodVehicle_ServerSetFadeDuration final
{
public:
	float                                         NewFadeDuration;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_ServerSetFadeDuration) == 0x000004, "Wrong alignment on FortDagwoodVehicle_ServerSetFadeDuration");
static_assert(sizeof(FortDagwoodVehicle_ServerSetFadeDuration) == 0x000004, "Wrong size on FortDagwoodVehicle_ServerSetFadeDuration");
static_assert(offsetof(FortDagwoodVehicle_ServerSetFadeDuration, NewFadeDuration) == 0x000000, "Member 'FortDagwoodVehicle_ServerSetFadeDuration::NewFadeDuration' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.ServerSetRuntimeBoostInfo
// 0x0018 (0x0018 - 0x0000)
struct FortDagwoodVehicle_ServerSetRuntimeBoostInfo final
{
public:
	struct FRuntimeBoostInfo                      BoostInfo;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_ServerSetRuntimeBoostInfo) == 0x000004, "Wrong alignment on FortDagwoodVehicle_ServerSetRuntimeBoostInfo");
static_assert(sizeof(FortDagwoodVehicle_ServerSetRuntimeBoostInfo) == 0x000018, "Wrong size on FortDagwoodVehicle_ServerSetRuntimeBoostInfo");
static_assert(offsetof(FortDagwoodVehicle_ServerSetRuntimeBoostInfo, BoostInfo) == 0x000000, "Member 'FortDagwoodVehicle_ServerSetRuntimeBoostInfo::BoostInfo' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.ServerSetRuntimeDriveInfo
// 0x0008 (0x0008 - 0x0000)
struct FortDagwoodVehicle_ServerSetRuntimeDriveInfo final
{
public:
	float                                         MaxIncline;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTilt;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_ServerSetRuntimeDriveInfo) == 0x000004, "Wrong alignment on FortDagwoodVehicle_ServerSetRuntimeDriveInfo");
static_assert(sizeof(FortDagwoodVehicle_ServerSetRuntimeDriveInfo) == 0x000008, "Wrong size on FortDagwoodVehicle_ServerSetRuntimeDriveInfo");
static_assert(offsetof(FortDagwoodVehicle_ServerSetRuntimeDriveInfo, MaxIncline) == 0x000000, "Member 'FortDagwoodVehicle_ServerSetRuntimeDriveInfo::MaxIncline' has a wrong offset!");
static_assert(offsetof(FortDagwoodVehicle_ServerSetRuntimeDriveInfo, MaxTilt) == 0x000004, "Member 'FortDagwoodVehicle_ServerSetRuntimeDriveInfo::MaxTilt' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.ServerSetRuntimeFuelInfo
// 0x000C (0x000C - 0x0000)
struct FortDagwoodVehicle_ServerSetRuntimeFuelInfo final
{
public:
	struct FRuntimeFuelInfo                       FuelInfo;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_ServerSetRuntimeFuelInfo) == 0x000004, "Wrong alignment on FortDagwoodVehicle_ServerSetRuntimeFuelInfo");
static_assert(sizeof(FortDagwoodVehicle_ServerSetRuntimeFuelInfo) == 0x00000C, "Wrong size on FortDagwoodVehicle_ServerSetRuntimeFuelInfo");
static_assert(offsetof(FortDagwoodVehicle_ServerSetRuntimeFuelInfo, FuelInfo) == 0x000000, "Member 'FortDagwoodVehicle_ServerSetRuntimeFuelInfo::FuelInfo' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.ServerSetRuntimeGravity
// 0x0004 (0x0004 - 0x0000)
struct FortDagwoodVehicle_ServerSetRuntimeGravity final
{
public:
	float                                         GravMult;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_ServerSetRuntimeGravity) == 0x000004, "Wrong alignment on FortDagwoodVehicle_ServerSetRuntimeGravity");
static_assert(sizeof(FortDagwoodVehicle_ServerSetRuntimeGravity) == 0x000004, "Wrong size on FortDagwoodVehicle_ServerSetRuntimeGravity");
static_assert(offsetof(FortDagwoodVehicle_ServerSetRuntimeGravity, GravMult) == 0x000000, "Member 'FortDagwoodVehicle_ServerSetRuntimeGravity::GravMult' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.ServerSetRuntimeSpringsInfo
// 0x0020 (0x0020 - 0x0000)
struct FortDagwoodVehicle_ServerSetRuntimeSpringsInfo final
{
public:
	struct FRuntimeSpringsInfo                    SpringsInfo;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_ServerSetRuntimeSpringsInfo) == 0x000004, "Wrong alignment on FortDagwoodVehicle_ServerSetRuntimeSpringsInfo");
static_assert(sizeof(FortDagwoodVehicle_ServerSetRuntimeSpringsInfo) == 0x000020, "Wrong size on FortDagwoodVehicle_ServerSetRuntimeSpringsInfo");
static_assert(offsetof(FortDagwoodVehicle_ServerSetRuntimeSpringsInfo, SpringsInfo) == 0x000000, "Member 'FortDagwoodVehicle_ServerSetRuntimeSpringsInfo::SpringsInfo' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.SetDamageInfoOnServer
// 0x0004 (0x0004 - 0x0000)
struct FortDagwoodVehicle_SetDamageInfoOnServer final
{
public:
	bool                                          bInDamageFriendlyVehicles;                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInDamageOtherVehicles;                            // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInDamageOwnVehicle;                               // 0x0002(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInDamageAllowedFromOtherVehicle;                  // 0x0003(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_SetDamageInfoOnServer) == 0x000001, "Wrong alignment on FortDagwoodVehicle_SetDamageInfoOnServer");
static_assert(sizeof(FortDagwoodVehicle_SetDamageInfoOnServer) == 0x000004, "Wrong size on FortDagwoodVehicle_SetDamageInfoOnServer");
static_assert(offsetof(FortDagwoodVehicle_SetDamageInfoOnServer, bInDamageFriendlyVehicles) == 0x000000, "Member 'FortDagwoodVehicle_SetDamageInfoOnServer::bInDamageFriendlyVehicles' has a wrong offset!");
static_assert(offsetof(FortDagwoodVehicle_SetDamageInfoOnServer, bInDamageOtherVehicles) == 0x000001, "Member 'FortDagwoodVehicle_SetDamageInfoOnServer::bInDamageOtherVehicles' has a wrong offset!");
static_assert(offsetof(FortDagwoodVehicle_SetDamageInfoOnServer, bInDamageOwnVehicle) == 0x000002, "Member 'FortDagwoodVehicle_SetDamageInfoOnServer::bInDamageOwnVehicle' has a wrong offset!");
static_assert(offsetof(FortDagwoodVehicle_SetDamageInfoOnServer, bInDamageAllowedFromOtherVehicle) == 0x000003, "Member 'FortDagwoodVehicle_SetDamageInfoOnServer::bInDamageAllowedFromOtherVehicle' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.SetValetAudioController
// 0x0008 (0x0008 - 0x0000)
struct FortDagwoodVehicle_SetValetAudioController final
{
public:
	class AFortValetAudioController*              ValetAudio_0;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_SetValetAudioController) == 0x000008, "Wrong alignment on FortDagwoodVehicle_SetValetAudioController");
static_assert(sizeof(FortDagwoodVehicle_SetValetAudioController) == 0x000008, "Wrong size on FortDagwoodVehicle_SetValetAudioController");
static_assert(offsetof(FortDagwoodVehicle_SetValetAudioController, ValetAudio_0) == 0x000000, "Member 'FortDagwoodVehicle_SetValetAudioController::ValetAudio_0' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.ForwardOrReverseInputPressed
// 0x0001 (0x0001 - 0x0000)
struct FortDagwoodVehicle_ForwardOrReverseInputPressed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_ForwardOrReverseInputPressed) == 0x000001, "Wrong alignment on FortDagwoodVehicle_ForwardOrReverseInputPressed");
static_assert(sizeof(FortDagwoodVehicle_ForwardOrReverseInputPressed) == 0x000001, "Wrong size on FortDagwoodVehicle_ForwardOrReverseInputPressed");
static_assert(offsetof(FortDagwoodVehicle_ForwardOrReverseInputPressed, ReturnValue) == 0x000000, "Member 'FortDagwoodVehicle_ForwardOrReverseInputPressed::ReturnValue' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.GetBumpiness
// 0x0004 (0x0004 - 0x0000)
struct FortDagwoodVehicle_GetBumpiness final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_GetBumpiness) == 0x000004, "Wrong alignment on FortDagwoodVehicle_GetBumpiness");
static_assert(sizeof(FortDagwoodVehicle_GetBumpiness) == 0x000004, "Wrong size on FortDagwoodVehicle_GetBumpiness");
static_assert(offsetof(FortDagwoodVehicle_GetBumpiness, ReturnValue) == 0x000000, "Member 'FortDagwoodVehicle_GetBumpiness::ReturnValue' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.GetMiddleAxleForwardAdjust
// 0x0004 (0x0004 - 0x0000)
struct FortDagwoodVehicle_GetMiddleAxleForwardAdjust final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_GetMiddleAxleForwardAdjust) == 0x000004, "Wrong alignment on FortDagwoodVehicle_GetMiddleAxleForwardAdjust");
static_assert(sizeof(FortDagwoodVehicle_GetMiddleAxleForwardAdjust) == 0x000004, "Wrong size on FortDagwoodVehicle_GetMiddleAxleForwardAdjust");
static_assert(offsetof(FortDagwoodVehicle_GetMiddleAxleForwardAdjust, ReturnValue) == 0x000000, "Member 'FortDagwoodVehicle_GetMiddleAxleForwardAdjust::ReturnValue' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.GetTireHealthPercent
// 0x0008 (0x0008 - 0x0000)
struct FortDagwoodVehicle_GetTireHealthPercent final
{
public:
	ETireLocations                                TireIndex;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_GetTireHealthPercent) == 0x000004, "Wrong alignment on FortDagwoodVehicle_GetTireHealthPercent");
static_assert(sizeof(FortDagwoodVehicle_GetTireHealthPercent) == 0x000008, "Wrong size on FortDagwoodVehicle_GetTireHealthPercent");
static_assert(offsetof(FortDagwoodVehicle_GetTireHealthPercent, TireIndex) == 0x000000, "Member 'FortDagwoodVehicle_GetTireHealthPercent::TireIndex' has a wrong offset!");
static_assert(offsetof(FortDagwoodVehicle_GetTireHealthPercent, ReturnValue) == 0x000004, "Member 'FortDagwoodVehicle_GetTireHealthPercent::ReturnValue' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.GetTireState
// 0x0008 (0x0008 - 0x0000)
struct FortDagwoodVehicle_GetTireState final
{
public:
	int32                                         TireIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortDagwoodVehicle_GetTireState) == 0x000004, "Wrong alignment on FortDagwoodVehicle_GetTireState");
static_assert(sizeof(FortDagwoodVehicle_GetTireState) == 0x000008, "Wrong size on FortDagwoodVehicle_GetTireState");
static_assert(offsetof(FortDagwoodVehicle_GetTireState, TireIndex) == 0x000000, "Member 'FortDagwoodVehicle_GetTireState::TireIndex' has a wrong offset!");
static_assert(offsetof(FortDagwoodVehicle_GetTireState, ReturnValue) == 0x000004, "Member 'FortDagwoodVehicle_GetTireState::ReturnValue' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.GetTireSurface
// 0x0002 (0x0002 - 0x0000)
struct FortDagwoodVehicle_GetTireSurface final
{
public:
	ETireLocations                                TireIndex;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETireSurfaces                                 ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_GetTireSurface) == 0x000001, "Wrong alignment on FortDagwoodVehicle_GetTireSurface");
static_assert(sizeof(FortDagwoodVehicle_GetTireSurface) == 0x000002, "Wrong size on FortDagwoodVehicle_GetTireSurface");
static_assert(offsetof(FortDagwoodVehicle_GetTireSurface, TireIndex) == 0x000000, "Member 'FortDagwoodVehicle_GetTireSurface::TireIndex' has a wrong offset!");
static_assert(offsetof(FortDagwoodVehicle_GetTireSurface, ReturnValue) == 0x000001, "Member 'FortDagwoodVehicle_GetTireSurface::ReturnValue' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.IsNativeBPTickEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortDagwoodVehicle_IsNativeBPTickEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_IsNativeBPTickEnabled) == 0x000001, "Wrong alignment on FortDagwoodVehicle_IsNativeBPTickEnabled");
static_assert(sizeof(FortDagwoodVehicle_IsNativeBPTickEnabled) == 0x000001, "Wrong size on FortDagwoodVehicle_IsNativeBPTickEnabled");
static_assert(offsetof(FortDagwoodVehicle_IsNativeBPTickEnabled, ReturnValue) == 0x000000, "Member 'FortDagwoodVehicle_IsNativeBPTickEnabled::ReturnValue' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.IsOnLandscape
// 0x0001 (0x0001 - 0x0000)
struct FortDagwoodVehicle_IsOnLandscape final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_IsOnLandscape) == 0x000001, "Wrong alignment on FortDagwoodVehicle_IsOnLandscape");
static_assert(sizeof(FortDagwoodVehicle_IsOnLandscape) == 0x000001, "Wrong size on FortDagwoodVehicle_IsOnLandscape");
static_assert(offsetof(FortDagwoodVehicle_IsOnLandscape, ReturnValue) == 0x000000, "Member 'FortDagwoodVehicle_IsOnLandscape::ReturnValue' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.IsOnRoad
// 0x0001 (0x0001 - 0x0000)
struct FortDagwoodVehicle_IsOnRoad final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_IsOnRoad) == 0x000001, "Wrong alignment on FortDagwoodVehicle_IsOnRoad");
static_assert(sizeof(FortDagwoodVehicle_IsOnRoad) == 0x000001, "Wrong size on FortDagwoodVehicle_IsOnRoad");
static_assert(offsetof(FortDagwoodVehicle_IsOnRoad, ReturnValue) == 0x000000, "Member 'FortDagwoodVehicle_IsOnRoad::ReturnValue' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.IsTireSkidding
// 0x0014 (0x0014 - 0x0000)
struct FortDagwoodVehicle_IsTireSkidding final
{
public:
	float                                         MinSpeedForSkid;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleForSkid;                                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedForPeelout;                                   // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedForBraking;                                   // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortDagwoodVehicle_IsTireSkidding) == 0x000004, "Wrong alignment on FortDagwoodVehicle_IsTireSkidding");
static_assert(sizeof(FortDagwoodVehicle_IsTireSkidding) == 0x000014, "Wrong size on FortDagwoodVehicle_IsTireSkidding");
static_assert(offsetof(FortDagwoodVehicle_IsTireSkidding, MinSpeedForSkid) == 0x000000, "Member 'FortDagwoodVehicle_IsTireSkidding::MinSpeedForSkid' has a wrong offset!");
static_assert(offsetof(FortDagwoodVehicle_IsTireSkidding, AngleForSkid) == 0x000004, "Member 'FortDagwoodVehicle_IsTireSkidding::AngleForSkid' has a wrong offset!");
static_assert(offsetof(FortDagwoodVehicle_IsTireSkidding, SpeedForPeelout) == 0x000008, "Member 'FortDagwoodVehicle_IsTireSkidding::SpeedForPeelout' has a wrong offset!");
static_assert(offsetof(FortDagwoodVehicle_IsTireSkidding, SpeedForBraking) == 0x00000C, "Member 'FortDagwoodVehicle_IsTireSkidding::SpeedForBraking' has a wrong offset!");
static_assert(offsetof(FortDagwoodVehicle_IsTireSkidding, ReturnValue) == 0x000010, "Member 'FortDagwoodVehicle_IsTireSkidding::ReturnValue' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.NativeCalculateAccelRumbleIntensity
// 0x0008 (0x0008 - 0x0000)
struct FortDagwoodVehicle_NativeCalculateAccelRumbleIntensity final
{
public:
	float                                         MaxIntensity;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_NativeCalculateAccelRumbleIntensity) == 0x000004, "Wrong alignment on FortDagwoodVehicle_NativeCalculateAccelRumbleIntensity");
static_assert(sizeof(FortDagwoodVehicle_NativeCalculateAccelRumbleIntensity) == 0x000008, "Wrong size on FortDagwoodVehicle_NativeCalculateAccelRumbleIntensity");
static_assert(offsetof(FortDagwoodVehicle_NativeCalculateAccelRumbleIntensity, MaxIntensity) == 0x000000, "Member 'FortDagwoodVehicle_NativeCalculateAccelRumbleIntensity::MaxIntensity' has a wrong offset!");
static_assert(offsetof(FortDagwoodVehicle_NativeCalculateAccelRumbleIntensity, ReturnValue) == 0x000004, "Member 'FortDagwoodVehicle_NativeCalculateAccelRumbleIntensity::ReturnValue' has a wrong offset!");

// Function ValetRuntime.FortContextualTutorial_VehicleValetLowFuel.HandleVehicleStateChanged
// 0x0018 (0x0018 - 0x0000)
struct FortContextualTutorial_VehicleValetLowFuel_HandleVehicleStateChanged final
{
public:
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 NewVehicle;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OldVehicle;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortContextualTutorial_VehicleValetLowFuel_HandleVehicleStateChanged) == 0x000008, "Wrong alignment on FortContextualTutorial_VehicleValetLowFuel_HandleVehicleStateChanged");
static_assert(sizeof(FortContextualTutorial_VehicleValetLowFuel_HandleVehicleStateChanged) == 0x000018, "Wrong size on FortContextualTutorial_VehicleValetLowFuel_HandleVehicleStateChanged");
static_assert(offsetof(FortContextualTutorial_VehicleValetLowFuel_HandleVehicleStateChanged, PlayerPawn) == 0x000000, "Member 'FortContextualTutorial_VehicleValetLowFuel_HandleVehicleStateChanged::PlayerPawn' has a wrong offset!");
static_assert(offsetof(FortContextualTutorial_VehicleValetLowFuel_HandleVehicleStateChanged, NewVehicle) == 0x000008, "Member 'FortContextualTutorial_VehicleValetLowFuel_HandleVehicleStateChanged::NewVehicle' has a wrong offset!");
static_assert(offsetof(FortContextualTutorial_VehicleValetLowFuel_HandleVehicleStateChanged, OldVehicle) == 0x000010, "Member 'FortContextualTutorial_VehicleValetLowFuel_HandleVehicleStateChanged::OldVehicle' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicleManager.CustomHandleActorStreamedInEditor
// 0x0008 (0x0008 - 0x0000)
struct FortDagwoodVehicleManager_CustomHandleActorStreamedInEditor final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicleManager_CustomHandleActorStreamedInEditor) == 0x000008, "Wrong alignment on FortDagwoodVehicleManager_CustomHandleActorStreamedInEditor");
static_assert(sizeof(FortDagwoodVehicleManager_CustomHandleActorStreamedInEditor) == 0x000008, "Wrong size on FortDagwoodVehicleManager_CustomHandleActorStreamedInEditor");
static_assert(offsetof(FortDagwoodVehicleManager_CustomHandleActorStreamedInEditor, SourceActor) == 0x000000, "Member 'FortDagwoodVehicleManager_CustomHandleActorStreamedInEditor::SourceActor' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicleManager.OnVehicleSpawned
// 0x0008 (0x0008 - 0x0000)
struct FortDagwoodVehicleManager_OnVehicleSpawned final
{
public:
	class AFortAthenaVehicle*                     Vehicle;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicleManager_OnVehicleSpawned) == 0x000008, "Wrong alignment on FortDagwoodVehicleManager_OnVehicleSpawned");
static_assert(sizeof(FortDagwoodVehicleManager_OnVehicleSpawned) == 0x000008, "Wrong size on FortDagwoodVehicleManager_OnVehicleSpawned");
static_assert(offsetof(FortDagwoodVehicleManager_OnVehicleSpawned, Vehicle) == 0x000000, "Member 'FortDagwoodVehicleManager_OnVehicleSpawned::Vehicle' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicleManager.OnVehicleSpawnsUpdated
// 0x0020 (0x0020 - 0x0000)
struct FortDagwoodVehicleManager_OnVehicleSpawnsUpdated final
{
public:
	class UFortVehicleItemDefinition*             VehicleItemDef;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         SpawnedVehicles;                                   // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NewVehicleCount;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortDagwoodVehicleManager_OnVehicleSpawnsUpdated) == 0x000008, "Wrong alignment on FortDagwoodVehicleManager_OnVehicleSpawnsUpdated");
static_assert(sizeof(FortDagwoodVehicleManager_OnVehicleSpawnsUpdated) == 0x000020, "Wrong size on FortDagwoodVehicleManager_OnVehicleSpawnsUpdated");
static_assert(offsetof(FortDagwoodVehicleManager_OnVehicleSpawnsUpdated, VehicleItemDef) == 0x000000, "Member 'FortDagwoodVehicleManager_OnVehicleSpawnsUpdated::VehicleItemDef' has a wrong offset!");
static_assert(offsetof(FortDagwoodVehicleManager_OnVehicleSpawnsUpdated, SpawnedVehicles) == 0x000008, "Member 'FortDagwoodVehicleManager_OnVehicleSpawnsUpdated::SpawnedVehicles' has a wrong offset!");
static_assert(offsetof(FortDagwoodVehicleManager_OnVehicleSpawnsUpdated, NewVehicleCount) == 0x000018, "Member 'FortDagwoodVehicleManager_OnVehicleSpawnsUpdated::NewVehicleCount' has a wrong offset!");

// Function ValetRuntime.FortValetAudioController.CacheValetVehicle
// 0x0008 (0x0008 - 0x0000)
struct FortValetAudioController_CacheValetVehicle final
{
public:
	class AFortDagwoodVehicle*                    InVehicle;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortValetAudioController_CacheValetVehicle) == 0x000008, "Wrong alignment on FortValetAudioController_CacheValetVehicle");
static_assert(sizeof(FortValetAudioController_CacheValetVehicle) == 0x000008, "Wrong size on FortValetAudioController_CacheValetVehicle");
static_assert(offsetof(FortValetAudioController_CacheValetVehicle, InVehicle) == 0x000000, "Member 'FortValetAudioController_CacheValetVehicle::InVehicle' has a wrong offset!");

// Function ValetRuntime.FortValetAudioController.OnSuspensionCollision_Native
// 0x0008 (0x0008 - 0x0000)
struct FortValetAudioController_OnSuspensionCollision_Native final
{
public:
	bool                                          OutResult;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OutMagnitude;                                      // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortValetAudioController_OnSuspensionCollision_Native) == 0x000004, "Wrong alignment on FortValetAudioController_OnSuspensionCollision_Native");
static_assert(sizeof(FortValetAudioController_OnSuspensionCollision_Native) == 0x000008, "Wrong size on FortValetAudioController_OnSuspensionCollision_Native");
static_assert(offsetof(FortValetAudioController_OnSuspensionCollision_Native, OutResult) == 0x000000, "Member 'FortValetAudioController_OnSuspensionCollision_Native::OutResult' has a wrong offset!");
static_assert(offsetof(FortValetAudioController_OnSuspensionCollision_Native, OutMagnitude) == 0x000004, "Member 'FortValetAudioController_OnSuspensionCollision_Native::OutMagnitude' has a wrong offset!");

// Function ValetRuntime.FortValetAudioController.OnTireModApplied
// 0x01A0 (0x01A0 - 0x0000)
struct FortValetAudioController_OnTireModApplied final
{
public:
	struct FTireInfo                              AppliedTireMod;                                    // 0x0000(0x01A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortValetAudioController_OnTireModApplied) == 0x000008, "Wrong alignment on FortValetAudioController_OnTireModApplied");
static_assert(sizeof(FortValetAudioController_OnTireModApplied) == 0x0001A0, "Wrong size on FortValetAudioController_OnTireModApplied");
static_assert(offsetof(FortValetAudioController_OnTireModApplied, AppliedTireMod) == 0x000000, "Member 'FortValetAudioController_OnTireModApplied::AppliedTireMod' has a wrong offset!");

}

