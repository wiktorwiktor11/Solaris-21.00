#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BGA_Athena_WithGravity_Parent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BGA_Athena_WithGravity_Parent.BGA_Athena_WithGravity_Parent_C
// 0x02A0 (0x0C10 - 0x0970)
class ABGA_Athena_WithGravity_Parent_C : public ABuildingGameplayActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0970(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFortWaterInteractionComponent*         FortWaterInteraction;                              // 0x0978(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0980(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UProjectileMovementComponent*           ProjectileMovement;                                // 0x0988(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          ResumeGravSimOnBegin;                              // 0x0990(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bResumeSimulation;                                 // 0x0991(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_992[0x6];                                      // 0x0992(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             NullHit;                                           // 0x0998(0x00E0)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                GravImpact_Loc;                                    // 0x0A78(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GravHitNormal;                                     // 0x0A90(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GravMaxSlope;                                      // 0x0AA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CheckForBounce;                                    // 0x0AAC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AAD[0x3];                                      // 0x0AAD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ForcedBounceExtraZ;                                // 0x0AB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ForcedBounceCurrentCount;                          // 0x0AB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ForcedBounceMult;                                  // 0x0AB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_ABC[0x4];                                      // 0x0ABC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         GravFoundBuildingOnDied;                           // 0x0AC0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          RepCollision;                                      // 0x0AD0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AD1[0x7];                                      // 0x0AD1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                AdditionalBounceObject;                            // 0x0AD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ForcedBounceMaxCount;                              // 0x0AE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForceBounce;                                       // 0x0AE4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CountNonForceBounces;                              // 0x0AE5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AE6[0x2];                                      // 0x0AE6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BounceExtraZ;                                      // 0x0AE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BounceMult;                                        // 0x0AEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldAttach;                                      // 0x0AF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AF1[0x7];                                      // 0x0AF1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToNotAttachTo;                               // 0x0AF8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          DontAttachToOthersOfThisClass;                     // 0x0B08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugText;                                         // 0x0B09(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldNotReattach;                                 // 0x0B0A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BlockStoppingSim;                                  // 0x0B0B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DeactivatePawnAndVehicleCollisionOnStop;           // 0x0B0C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowReattachmentToActors;                         // 0x0B0D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B0E[0x2];                                      // 0x0B0E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             StopSimHitResult;                                  // 0x0B10(0x00E0)(Edit, BlueprintVisible, Net, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                StopSimServerLocation;                             // 0x0BF0(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         BounceAwayFromLocation_MinSpeed;                   // 0x0C08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BounceOffTires;                                    // 0x0C0C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void StopSim(const struct FHitResult& Hit);
	void SpawnFXSounds();
	void SlidingDoorOpened();
	void RestartSimulation();
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveBeginPlay();
	void OnRep_StopLocation();
	void OnRep_RepCollision();
	void OnRep_bResumeSimulation();
	void OnAttach(class AActor* AttachedActor);
	void Init(const struct FVector& GravHitNormal_0);
	void Impulse(float DelayBeforeImpulse, float DelayBeforeCollision, const struct FVector& ImpulseOrigin, const struct FVector& ImpulseAmount, bool SetCollisionAfterImpulse);
	void HandleBinding(class AActor* Actor, class UPrimitiveComponent* HitComp);
	void ForceBounceBGA();
	void ExecuteUbergraph_BGA_Athena_WithGravity_Parent(int32 EntryPoint);
	void CheckForSameClassToBounce(class AActor* Hit, bool* HitSameClass);
	void BounceBGAAwayFromLocation(const struct FVector& LocationToBounceAwayFrom);
	void PlayHitFX(const struct FHitResult& HitResult);
	void OnUnderneathPhysicsObjectAwakeChanged(class UPrimitiveComponent* SimulatingComponent, bool bIsAwake);
	void OnRep_StopSimServerLocation();
	void BounceBGA();
	void BaseDied(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void BaseDestroyed(class AActor* DestroyedActor);
	void AttachToBindedActor(class UPrimitiveComponent* AttachComp);
	void AttachedWasDestroyed();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BGA_Athena_WithGravity_Parent_C">();
	}
	static class ABGA_Athena_WithGravity_Parent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABGA_Athena_WithGravity_Parent_C>();
	}
};
static_assert(alignof(ABGA_Athena_WithGravity_Parent_C) == 0x000008, "Wrong alignment on ABGA_Athena_WithGravity_Parent_C");
static_assert(sizeof(ABGA_Athena_WithGravity_Parent_C) == 0x000C10, "Wrong size on ABGA_Athena_WithGravity_Parent_C");
static_assert(offsetof(ABGA_Athena_WithGravity_Parent_C, UberGraphFrame) == 0x000970, "Member 'ABGA_Athena_WithGravity_Parent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_WithGravity_Parent_C, FortWaterInteraction) == 0x000978, "Member 'ABGA_Athena_WithGravity_Parent_C::FortWaterInteraction' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_WithGravity_Parent_C, StaticMesh) == 0x000980, "Member 'ABGA_Athena_WithGravity_Parent_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_WithGravity_Parent_C, ProjectileMovement) == 0x000988, "Member 'ABGA_Athena_WithGravity_Parent_C::ProjectileMovement' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_WithGravity_Parent_C, ResumeGravSimOnBegin) == 0x000990, "Member 'ABGA_Athena_WithGravity_Parent_C::ResumeGravSimOnBegin' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_WithGravity_Parent_C, bResumeSimulation) == 0x000991, "Member 'ABGA_Athena_WithGravity_Parent_C::bResumeSimulation' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_WithGravity_Parent_C, NullHit) == 0x000998, "Member 'ABGA_Athena_WithGravity_Parent_C::NullHit' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_WithGravity_Parent_C, GravImpact_Loc) == 0x000A78, "Member 'ABGA_Athena_WithGravity_Parent_C::GravImpact_Loc' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_WithGravity_Parent_C, GravHitNormal) == 0x000A90, "Member 'ABGA_Athena_WithGravity_Parent_C::GravHitNormal' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_WithGravity_Parent_C, GravMaxSlope) == 0x000AA8, "Member 'ABGA_Athena_WithGravity_Parent_C::GravMaxSlope' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_WithGravity_Parent_C, CheckForBounce) == 0x000AAC, "Member 'ABGA_Athena_WithGravity_Parent_C::CheckForBounce' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_WithGravity_Parent_C, ForcedBounceExtraZ) == 0x000AB0, "Member 'ABGA_Athena_WithGravity_Parent_C::ForcedBounceExtraZ' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_WithGravity_Parent_C, ForcedBounceCurrentCount) == 0x000AB4, "Member 'ABGA_Athena_WithGravity_Parent_C::ForcedBounceCurrentCount' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_WithGravity_Parent_C, ForcedBounceMult) == 0x000AB8, "Member 'ABGA_Athena_WithGravity_Parent_C::ForcedBounceMult' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_WithGravity_Parent_C, GravFoundBuildingOnDied) == 0x000AC0, "Member 'ABGA_Athena_WithGravity_Parent_C::GravFoundBuildingOnDied' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_WithGravity_Parent_C, RepCollision) == 0x000AD0, "Member 'ABGA_Athena_WithGravity_Parent_C::RepCollision' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_WithGravity_Parent_C, AdditionalBounceObject) == 0x000AD8, "Member 'ABGA_Athena_WithGravity_Parent_C::AdditionalBounceObject' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_WithGravity_Parent_C, ForcedBounceMaxCount) == 0x000AE0, "Member 'ABGA_Athena_WithGravity_Parent_C::ForcedBounceMaxCount' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_WithGravity_Parent_C, ForceBounce) == 0x000AE4, "Member 'ABGA_Athena_WithGravity_Parent_C::ForceBounce' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_WithGravity_Parent_C, CountNonForceBounces) == 0x000AE5, "Member 'ABGA_Athena_WithGravity_Parent_C::CountNonForceBounces' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_WithGravity_Parent_C, BounceExtraZ) == 0x000AE8, "Member 'ABGA_Athena_WithGravity_Parent_C::BounceExtraZ' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_WithGravity_Parent_C, BounceMult) == 0x000AEC, "Member 'ABGA_Athena_WithGravity_Parent_C::BounceMult' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_WithGravity_Parent_C, ShouldAttach) == 0x000AF0, "Member 'ABGA_Athena_WithGravity_Parent_C::ShouldAttach' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_WithGravity_Parent_C, ActorsToNotAttachTo) == 0x000AF8, "Member 'ABGA_Athena_WithGravity_Parent_C::ActorsToNotAttachTo' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_WithGravity_Parent_C, DontAttachToOthersOfThisClass) == 0x000B08, "Member 'ABGA_Athena_WithGravity_Parent_C::DontAttachToOthersOfThisClass' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_WithGravity_Parent_C, DebugText) == 0x000B09, "Member 'ABGA_Athena_WithGravity_Parent_C::DebugText' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_WithGravity_Parent_C, ShouldNotReattach) == 0x000B0A, "Member 'ABGA_Athena_WithGravity_Parent_C::ShouldNotReattach' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_WithGravity_Parent_C, BlockStoppingSim) == 0x000B0B, "Member 'ABGA_Athena_WithGravity_Parent_C::BlockStoppingSim' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_WithGravity_Parent_C, DeactivatePawnAndVehicleCollisionOnStop) == 0x000B0C, "Member 'ABGA_Athena_WithGravity_Parent_C::DeactivatePawnAndVehicleCollisionOnStop' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_WithGravity_Parent_C, AllowReattachmentToActors) == 0x000B0D, "Member 'ABGA_Athena_WithGravity_Parent_C::AllowReattachmentToActors' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_WithGravity_Parent_C, StopSimHitResult) == 0x000B10, "Member 'ABGA_Athena_WithGravity_Parent_C::StopSimHitResult' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_WithGravity_Parent_C, StopSimServerLocation) == 0x000BF0, "Member 'ABGA_Athena_WithGravity_Parent_C::StopSimServerLocation' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_WithGravity_Parent_C, BounceAwayFromLocation_MinSpeed) == 0x000C08, "Member 'ABGA_Athena_WithGravity_Parent_C::BounceAwayFromLocation_MinSpeed' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_WithGravity_Parent_C, BounceOffTires) == 0x000C0C, "Member 'ABGA_Athena_WithGravity_Parent_C::BounceOffTires' has a wrong offset!");

}

