#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CorruptionGameplayCodeRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayTags_0_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "MeshNetwork_structs.hpp"


namespace SDK
{

// Enum CorruptionGameplayCodeRuntime.EWarEffortFundingStationType
// NumValues: 0x0004
enum class EWarEffortFundingStationType : uint8
{
	Final                                    = 0,
	Tower                                    = 1,
	Choice                                   = 2,
	EWarEffortFundingStationType_MAX         = 3,
};

// ScriptStruct CorruptionGameplayCodeRuntime.TravelerStepCorruptionOverrideData
// 0x0050 (0x0050 - 0x0000)
struct FTravelerStepCorruptionOverrideData final
{
public:
	TMap<class FString, float>                    PointGroupStepPercentOverrides;                    // 0x0000(0x0050)(Edit, DisableEditOnTemplate, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTravelerStepCorruptionOverrideData) == 0x000008, "Wrong alignment on FTravelerStepCorruptionOverrideData");
static_assert(sizeof(FTravelerStepCorruptionOverrideData) == 0x000050, "Wrong size on FTravelerStepCorruptionOverrideData");
static_assert(offsetof(FTravelerStepCorruptionOverrideData, PointGroupStepPercentOverrides) == 0x000000, "Member 'FTravelerStepCorruptionOverrideData::PointGroupStepPercentOverrides' has a wrong offset!");

// ScriptStruct CorruptionGameplayCodeRuntime.CubeMovement_CorruptionGenerationSplinePointData
// 0x0070 (0x0070 - 0x0000)
struct FCubeMovement_CorruptionGenerationSplinePointData final
{
public:
	struct FTransform                             SplinePointTransform;                              // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SplinePercentComplete;                             // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0xC];                                       // 0x0064(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCubeMovement_CorruptionGenerationSplinePointData) == 0x000010, "Wrong alignment on FCubeMovement_CorruptionGenerationSplinePointData");
static_assert(sizeof(FCubeMovement_CorruptionGenerationSplinePointData) == 0x000070, "Wrong size on FCubeMovement_CorruptionGenerationSplinePointData");
static_assert(offsetof(FCubeMovement_CorruptionGenerationSplinePointData, SplinePointTransform) == 0x000000, "Member 'FCubeMovement_CorruptionGenerationSplinePointData::SplinePointTransform' has a wrong offset!");
static_assert(offsetof(FCubeMovement_CorruptionGenerationSplinePointData, SplinePercentComplete) == 0x000060, "Member 'FCubeMovement_CorruptionGenerationSplinePointData::SplinePercentComplete' has a wrong offset!");

// ScriptStruct CorruptionGameplayCodeRuntime.CorruptionPauseEvent
// 0x0018 (0x0018 - 0x0000)
struct FCorruptionPauseEvent final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentDurationToPause;                            // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCorruptionPauseEvent) == 0x000008, "Wrong alignment on FCorruptionPauseEvent");
static_assert(sizeof(FCorruptionPauseEvent) == 0x000018, "Wrong size on FCorruptionPauseEvent");
static_assert(offsetof(FCorruptionPauseEvent, EventName) == 0x000000, "Member 'FCorruptionPauseEvent::EventName' has a wrong offset!");
static_assert(offsetof(FCorruptionPauseEvent, PercentDurationToPause) == 0x000010, "Member 'FCorruptionPauseEvent::PercentDurationToPause' has a wrong offset!");

// ScriptStruct CorruptionGameplayCodeRuntime.CubeMovement_CorruptionGenerationTravelerData
// 0x0018 (0x0018 - 0x0000)
struct FCubeMovement_CorruptionGenerationTravelerData final
{
public:
	TArray<struct FCubeMovement_CorruptionGenerationSplinePointData> SplinePointData;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class AFortScriptedObjectMovement_MovableObjectBase* PathTraveler;                                      // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCubeMovement_CorruptionGenerationTravelerData) == 0x000008, "Wrong alignment on FCubeMovement_CorruptionGenerationTravelerData");
static_assert(sizeof(FCubeMovement_CorruptionGenerationTravelerData) == 0x000018, "Wrong size on FCubeMovement_CorruptionGenerationTravelerData");
static_assert(offsetof(FCubeMovement_CorruptionGenerationTravelerData, SplinePointData) == 0x000000, "Member 'FCubeMovement_CorruptionGenerationTravelerData::SplinePointData' has a wrong offset!");
static_assert(offsetof(FCubeMovement_CorruptionGenerationTravelerData, PathTraveler) == 0x000010, "Member 'FCubeMovement_CorruptionGenerationTravelerData::PathTraveler' has a wrong offset!");

// ScriptStruct CorruptionGameplayCodeRuntime.CubeMovement_CorruptionGenerationData
// 0x0010 (0x0010 - 0x0000)
struct FCubeMovement_CorruptionGenerationData final
{
public:
	TArray<struct FCubeMovement_CorruptionGenerationTravelerData> TravelerData;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCubeMovement_CorruptionGenerationData) == 0x000008, "Wrong alignment on FCubeMovement_CorruptionGenerationData");
static_assert(sizeof(FCubeMovement_CorruptionGenerationData) == 0x000010, "Wrong size on FCubeMovement_CorruptionGenerationData");
static_assert(offsetof(FCubeMovement_CorruptionGenerationData, TravelerData) == 0x000000, "Member 'FCubeMovement_CorruptionGenerationData::TravelerData' has a wrong offset!");

// ScriptStruct CorruptionGameplayCodeRuntime.CorruptionCalendarEventData
// 0x0018 (0x0018 - 0x0000)
struct FCorruptionCalendarEventData final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartPercent;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCorruptionCalendarEventData) == 0x000008, "Wrong alignment on FCorruptionCalendarEventData");
static_assert(sizeof(FCorruptionCalendarEventData) == 0x000018, "Wrong size on FCorruptionCalendarEventData");
static_assert(offsetof(FCorruptionCalendarEventData, EventName) == 0x000000, "Member 'FCorruptionCalendarEventData::EventName' has a wrong offset!");
static_assert(offsetof(FCorruptionCalendarEventData, StartPercent) == 0x000010, "Member 'FCorruptionCalendarEventData::StartPercent' has a wrong offset!");

// ScriptStruct CorruptionGameplayCodeRuntime.WarEffortMutatorChoiceData
// 0x0068 (0x0068 - 0x0000)
struct FWarEffortMutatorChoiceData final
{
public:
	struct FGameplayTag                           FundingTag;                                        // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UFortItemDefinition>> SoftRefsToLoad;                                    // 0x0008(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<class FName, struct FScalableFloat>      LootTableMods;                                     // 0x0018(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWarEffortMutatorChoiceData) == 0x000008, "Wrong alignment on FWarEffortMutatorChoiceData");
static_assert(sizeof(FWarEffortMutatorChoiceData) == 0x000068, "Wrong size on FWarEffortMutatorChoiceData");
static_assert(offsetof(FWarEffortMutatorChoiceData, FundingTag) == 0x000000, "Member 'FWarEffortMutatorChoiceData::FundingTag' has a wrong offset!");
static_assert(offsetof(FWarEffortMutatorChoiceData, SoftRefsToLoad) == 0x000008, "Member 'FWarEffortMutatorChoiceData::SoftRefsToLoad' has a wrong offset!");
static_assert(offsetof(FWarEffortMutatorChoiceData, LootTableMods) == 0x000018, "Member 'FWarEffortMutatorChoiceData::LootTableMods' has a wrong offset!");

// ScriptStruct CorruptionGameplayCodeRuntime.WarEffortMutatorMetadata
// 0x0020 (0x0020 - 0x0000)
struct FWarEffortMutatorMetadata final : public FMeshMetaDataStruct
{
public:
	TArray<struct FGameplayTag>                   ActiveFundedItems;                                 // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGameplayTag>                   ActiveTryBeforeYouBuyItems;                        // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWarEffortMutatorMetadata) == 0x000008, "Wrong alignment on FWarEffortMutatorMetadata");
static_assert(sizeof(FWarEffortMutatorMetadata) == 0x000020, "Wrong size on FWarEffortMutatorMetadata");
static_assert(offsetof(FWarEffortMutatorMetadata, ActiveFundedItems) == 0x000000, "Member 'FWarEffortMutatorMetadata::ActiveFundedItems' has a wrong offset!");
static_assert(offsetof(FWarEffortMutatorMetadata, ActiveTryBeforeYouBuyItems) == 0x000010, "Member 'FWarEffortMutatorMetadata::ActiveTryBeforeYouBuyItems' has a wrong offset!");

// ScriptStruct CorruptionGameplayCodeRuntime.WarEffortFundingOptionData
// 0x0010 (0x0010 - 0x0000)
struct FWarEffortFundingOptionData final
{
public:
	struct FGameplayTag                           OptionTag;                                         // 0x0000(0x0004)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CurrentFundingAmount;                              // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWarEffortFundingOptionData) == 0x000008, "Wrong alignment on FWarEffortFundingOptionData");
static_assert(sizeof(FWarEffortFundingOptionData) == 0x000010, "Wrong size on FWarEffortFundingOptionData");
static_assert(offsetof(FWarEffortFundingOptionData, OptionTag) == 0x000000, "Member 'FWarEffortFundingOptionData::OptionTag' has a wrong offset!");
static_assert(offsetof(FWarEffortFundingOptionData, CurrentFundingAmount) == 0x000008, "Member 'FWarEffortFundingOptionData::CurrentFundingAmount' has a wrong offset!");

// ScriptStruct CorruptionGameplayCodeRuntime.WarEffortFundingChoiceData
// 0x0028 (0x0028 - 0x0000)
struct FWarEffortFundingChoiceData final
{
public:
	struct FWarEffortFundingOptionData            Option1;                                           // 0x0000(0x0010)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FWarEffortFundingOptionData            Option2;                                           // 0x0010(0x0010)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int64                                         TargetFundingAmount;                               // 0x0020(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWarEffortFundingChoiceData) == 0x000008, "Wrong alignment on FWarEffortFundingChoiceData");
static_assert(sizeof(FWarEffortFundingChoiceData) == 0x000028, "Wrong size on FWarEffortFundingChoiceData");
static_assert(offsetof(FWarEffortFundingChoiceData, Option1) == 0x000000, "Member 'FWarEffortFundingChoiceData::Option1' has a wrong offset!");
static_assert(offsetof(FWarEffortFundingChoiceData, Option2) == 0x000010, "Member 'FWarEffortFundingChoiceData::Option2' has a wrong offset!");
static_assert(offsetof(FWarEffortFundingChoiceData, TargetFundingAmount) == 0x000020, "Member 'FWarEffortFundingChoiceData::TargetFundingAmount' has a wrong offset!");

// ScriptStruct CorruptionGameplayCodeRuntime.WarEffortIndexedFundingData
// 0x0020 (0x0020 - 0x0000)
struct FWarEffortIndexedFundingData final
{
public:
	TArray<int64>                                 CurrentFundingArray;                               // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int64                                         FinalFundingAmount;                                // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         TowerFundingAmount;                                // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWarEffortIndexedFundingData) == 0x000008, "Wrong alignment on FWarEffortIndexedFundingData");
static_assert(sizeof(FWarEffortIndexedFundingData) == 0x000020, "Wrong size on FWarEffortIndexedFundingData");
static_assert(offsetof(FWarEffortIndexedFundingData, CurrentFundingArray) == 0x000000, "Member 'FWarEffortIndexedFundingData::CurrentFundingArray' has a wrong offset!");
static_assert(offsetof(FWarEffortIndexedFundingData, FinalFundingAmount) == 0x000010, "Member 'FWarEffortIndexedFundingData::FinalFundingAmount' has a wrong offset!");
static_assert(offsetof(FWarEffortIndexedFundingData, TowerFundingAmount) == 0x000018, "Member 'FWarEffortIndexedFundingData::TowerFundingAmount' has a wrong offset!");

// ScriptStruct CorruptionGameplayCodeRuntime.WarEffortFundingMetadata
// 0x0030 (0x0030 - 0x0000)
struct FWarEffortFundingMetadata final : public FMeshMetaDataStruct
{
public:
	struct FWarEffortIndexedFundingData           IndexedFundingData;                                // 0x0000(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FWarEffortFundingChoiceData>    FundingChoices;                                    // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWarEffortFundingMetadata) == 0x000008, "Wrong alignment on FWarEffortFundingMetadata");
static_assert(sizeof(FWarEffortFundingMetadata) == 0x000030, "Wrong size on FWarEffortFundingMetadata");
static_assert(offsetof(FWarEffortFundingMetadata, IndexedFundingData) == 0x000000, "Member 'FWarEffortFundingMetadata::IndexedFundingData' has a wrong offset!");
static_assert(offsetof(FWarEffortFundingMetadata, FundingChoices) == 0x000020, "Member 'FWarEffortFundingMetadata::FundingChoices' has a wrong offset!");

// ScriptStruct CorruptionGameplayCodeRuntime.WarEffortFundingData
// 0x0008 (0x0008 - 0x0000)
struct FWarEffortFundingData final
{
public:
	struct FGameplayTag                           FundingTag;                                        // 0x0000(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FundedPercent;                                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWarEffortFundingData) == 0x000004, "Wrong alignment on FWarEffortFundingData");
static_assert(sizeof(FWarEffortFundingData) == 0x000008, "Wrong size on FWarEffortFundingData");
static_assert(offsetof(FWarEffortFundingData, FundingTag) == 0x000000, "Member 'FWarEffortFundingData::FundingTag' has a wrong offset!");
static_assert(offsetof(FWarEffortFundingData, FundedPercent) == 0x000004, "Member 'FWarEffortFundingData::FundedPercent' has a wrong offset!");

}

