#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Prj_Swing_WestSausage_Parallel

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_Prj_Swing_WestSausage_Parallel.B_Prj_Swing_WestSausage_Parallel_C
// 0x02D0 (0x0E40 - 0x0B70)
#pragma pack(push, 0x1)
class alignas(0x10) AB_Prj_Swing_WestSausage_Parallel_C : public AFortProjectileAthena
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0B70(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Rope;                                              // 0x0B78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Anchor;                                            // 0x0B80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   TracerMesh_Outer;                                  // 0x0B88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   TracerMesh;                                        // 0x0B90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Projectile_Max_Lifetime;                           // 0x0B98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHasExploded_;                                     // 0x0B9C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9D[0x3];                                      // 0x0B9D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResult;                                         // 0x0BA0(0x00E0)(Edit, BlueprintVisible, Net, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         FX_Linger_Time;                                    // 0x0C80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C84[0x4];                                      // 0x0C84(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Lifespan_Timer;                                    // 0x0C88(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         Tracer_Lifetime;                                   // 0x0C90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ValidTarget;                                       // 0x0C94(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TargetingPickUp;                                   // 0x0C95(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Done;                                              // 0x0C96(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C97[0x1];                                      // 0x0C97(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerPawn_Athena_C*                   Player;                                            // 0x0C98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WebZip_MaxZVelocity;                               // 0x0CA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CA4[0x4];                                      // 0x0CA4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_Ranged_WestSausage_Parallel_Athena_C* Weapon;                                            // 0x0CA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VecToTarget;                                       // 0x0CB0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentSpeed;                                      // 0x0CC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewZVel;                                           // 0x0CCC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceToTarget;                                  // 0x0CD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CD4[0x4];                                      // 0x0CD4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DirectionToTarget;                                 // 0x0CD8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastZipTime;                                       // 0x0CF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CF4[0x4];                                      // 0x0CF4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetIfMissed;                                    // 0x0CF8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Pickup_Impact_FX;                                  // 0x0D10(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D14[0xC];                                      // 0x0D14(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Rope_World_Transform;                              // 0x0D20(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                TargetLocationLocal;                               // 0x0D80(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         CanPullPickups;                                    // 0x0D98(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         CanAttachToProjectiles;                            // 0x0DC0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         CanAttachToVehicles;                               // 0x0DE8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         CanAttachToAnyMovingObjects;                       // 0x0E10(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void attach();
	void AttachToProjectile(class AActor* PickUp, class AActor* Projectile);
	void DestroySelf();
	void ExecuteUbergraph_B_Prj_Swing_WestSausage_Parallel(int32 EntryPoint);
	struct FVector GetTargetPosition_(bool* IsImpactPoint);
	void Init(const struct FHitResult& Hit, bool TargetingPickUp_0, class AB_Ranged_WestSausage_Parallel_Athena_C* Weapon_0, bool HitSomething, const struct FVector& TargetIfMissed_0);
	void Init_Server(const struct FHitResult& HitResult_0, bool TargetingPickUp_0, class AB_Ranged_WestSausage_Parallel_Athena_C* Weapon_0, bool HitSomething, const struct FVector& TargetIfMissed_0);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void UpdateRope();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_Prj_Swing_WestSausage_Parallel_C">();
	}
	static class AB_Prj_Swing_WestSausage_Parallel_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_Prj_Swing_WestSausage_Parallel_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(AB_Prj_Swing_WestSausage_Parallel_C) == 0x000010, "Wrong alignment on AB_Prj_Swing_WestSausage_Parallel_C");
static_assert(sizeof(AB_Prj_Swing_WestSausage_Parallel_C) == 0x000E40, "Wrong size on AB_Prj_Swing_WestSausage_Parallel_C");
static_assert(offsetof(AB_Prj_Swing_WestSausage_Parallel_C, UberGraphFrame) == 0x000B70, "Member 'AB_Prj_Swing_WestSausage_Parallel_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_Prj_Swing_WestSausage_Parallel_C, Rope) == 0x000B78, "Member 'AB_Prj_Swing_WestSausage_Parallel_C::Rope' has a wrong offset!");
static_assert(offsetof(AB_Prj_Swing_WestSausage_Parallel_C, Anchor) == 0x000B80, "Member 'AB_Prj_Swing_WestSausage_Parallel_C::Anchor' has a wrong offset!");
static_assert(offsetof(AB_Prj_Swing_WestSausage_Parallel_C, TracerMesh_Outer) == 0x000B88, "Member 'AB_Prj_Swing_WestSausage_Parallel_C::TracerMesh_Outer' has a wrong offset!");
static_assert(offsetof(AB_Prj_Swing_WestSausage_Parallel_C, TracerMesh) == 0x000B90, "Member 'AB_Prj_Swing_WestSausage_Parallel_C::TracerMesh' has a wrong offset!");
static_assert(offsetof(AB_Prj_Swing_WestSausage_Parallel_C, Projectile_Max_Lifetime) == 0x000B98, "Member 'AB_Prj_Swing_WestSausage_Parallel_C::Projectile_Max_Lifetime' has a wrong offset!");
static_assert(offsetof(AB_Prj_Swing_WestSausage_Parallel_C, bHasExploded_) == 0x000B9C, "Member 'AB_Prj_Swing_WestSausage_Parallel_C::bHasExploded_' has a wrong offset!");
static_assert(offsetof(AB_Prj_Swing_WestSausage_Parallel_C, HitResult) == 0x000BA0, "Member 'AB_Prj_Swing_WestSausage_Parallel_C::HitResult' has a wrong offset!");
static_assert(offsetof(AB_Prj_Swing_WestSausage_Parallel_C, FX_Linger_Time) == 0x000C80, "Member 'AB_Prj_Swing_WestSausage_Parallel_C::FX_Linger_Time' has a wrong offset!");
static_assert(offsetof(AB_Prj_Swing_WestSausage_Parallel_C, Lifespan_Timer) == 0x000C88, "Member 'AB_Prj_Swing_WestSausage_Parallel_C::Lifespan_Timer' has a wrong offset!");
static_assert(offsetof(AB_Prj_Swing_WestSausage_Parallel_C, Tracer_Lifetime) == 0x000C90, "Member 'AB_Prj_Swing_WestSausage_Parallel_C::Tracer_Lifetime' has a wrong offset!");
static_assert(offsetof(AB_Prj_Swing_WestSausage_Parallel_C, ValidTarget) == 0x000C94, "Member 'AB_Prj_Swing_WestSausage_Parallel_C::ValidTarget' has a wrong offset!");
static_assert(offsetof(AB_Prj_Swing_WestSausage_Parallel_C, TargetingPickUp) == 0x000C95, "Member 'AB_Prj_Swing_WestSausage_Parallel_C::TargetingPickUp' has a wrong offset!");
static_assert(offsetof(AB_Prj_Swing_WestSausage_Parallel_C, Done) == 0x000C96, "Member 'AB_Prj_Swing_WestSausage_Parallel_C::Done' has a wrong offset!");
static_assert(offsetof(AB_Prj_Swing_WestSausage_Parallel_C, Player) == 0x000C98, "Member 'AB_Prj_Swing_WestSausage_Parallel_C::Player' has a wrong offset!");
static_assert(offsetof(AB_Prj_Swing_WestSausage_Parallel_C, WebZip_MaxZVelocity) == 0x000CA0, "Member 'AB_Prj_Swing_WestSausage_Parallel_C::WebZip_MaxZVelocity' has a wrong offset!");
static_assert(offsetof(AB_Prj_Swing_WestSausage_Parallel_C, Weapon) == 0x000CA8, "Member 'AB_Prj_Swing_WestSausage_Parallel_C::Weapon' has a wrong offset!");
static_assert(offsetof(AB_Prj_Swing_WestSausage_Parallel_C, VecToTarget) == 0x000CB0, "Member 'AB_Prj_Swing_WestSausage_Parallel_C::VecToTarget' has a wrong offset!");
static_assert(offsetof(AB_Prj_Swing_WestSausage_Parallel_C, CurrentSpeed) == 0x000CC8, "Member 'AB_Prj_Swing_WestSausage_Parallel_C::CurrentSpeed' has a wrong offset!");
static_assert(offsetof(AB_Prj_Swing_WestSausage_Parallel_C, NewZVel) == 0x000CCC, "Member 'AB_Prj_Swing_WestSausage_Parallel_C::NewZVel' has a wrong offset!");
static_assert(offsetof(AB_Prj_Swing_WestSausage_Parallel_C, DistanceToTarget) == 0x000CD0, "Member 'AB_Prj_Swing_WestSausage_Parallel_C::DistanceToTarget' has a wrong offset!");
static_assert(offsetof(AB_Prj_Swing_WestSausage_Parallel_C, DirectionToTarget) == 0x000CD8, "Member 'AB_Prj_Swing_WestSausage_Parallel_C::DirectionToTarget' has a wrong offset!");
static_assert(offsetof(AB_Prj_Swing_WestSausage_Parallel_C, LastZipTime) == 0x000CF0, "Member 'AB_Prj_Swing_WestSausage_Parallel_C::LastZipTime' has a wrong offset!");
static_assert(offsetof(AB_Prj_Swing_WestSausage_Parallel_C, TargetIfMissed) == 0x000CF8, "Member 'AB_Prj_Swing_WestSausage_Parallel_C::TargetIfMissed' has a wrong offset!");
static_assert(offsetof(AB_Prj_Swing_WestSausage_Parallel_C, Pickup_Impact_FX) == 0x000D10, "Member 'AB_Prj_Swing_WestSausage_Parallel_C::Pickup_Impact_FX' has a wrong offset!");
static_assert(offsetof(AB_Prj_Swing_WestSausage_Parallel_C, Rope_World_Transform) == 0x000D20, "Member 'AB_Prj_Swing_WestSausage_Parallel_C::Rope_World_Transform' has a wrong offset!");
static_assert(offsetof(AB_Prj_Swing_WestSausage_Parallel_C, TargetLocationLocal) == 0x000D80, "Member 'AB_Prj_Swing_WestSausage_Parallel_C::TargetLocationLocal' has a wrong offset!");
static_assert(offsetof(AB_Prj_Swing_WestSausage_Parallel_C, CanPullPickups) == 0x000D98, "Member 'AB_Prj_Swing_WestSausage_Parallel_C::CanPullPickups' has a wrong offset!");
static_assert(offsetof(AB_Prj_Swing_WestSausage_Parallel_C, CanAttachToProjectiles) == 0x000DC0, "Member 'AB_Prj_Swing_WestSausage_Parallel_C::CanAttachToProjectiles' has a wrong offset!");
static_assert(offsetof(AB_Prj_Swing_WestSausage_Parallel_C, CanAttachToVehicles) == 0x000DE8, "Member 'AB_Prj_Swing_WestSausage_Parallel_C::CanAttachToVehicles' has a wrong offset!");
static_assert(offsetof(AB_Prj_Swing_WestSausage_Parallel_C, CanAttachToAnyMovingObjects) == 0x000E10, "Member 'AB_Prj_Swing_WestSausage_Parallel_C::CanAttachToAnyMovingObjects' has a wrong offset!");

}

