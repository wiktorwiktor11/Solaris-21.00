#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TankRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum TankRuntime.ETankAimingMode
// NumValues: 0x0004
enum class ETankAimingMode : uint8
{
	CameraRotationNoTrace                    = 0,
	CameraTraceFromPivotSocket               = 1,
	CameraTraceFromDistanceScalar            = 2,
	ETankAimingMode_MAX                      = 3,
};

// ScriptStruct TankRuntime.TankAnimAimingData
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x10) FTankAnimAimingData final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTankAnimAimingData) == 0x000010, "Wrong alignment on FTankAnimAimingData");
static_assert(sizeof(FTankAnimAimingData) == 0x000060, "Wrong size on FTankAnimAimingData");

// ScriptStruct TankRuntime.ServerSocketTransformOverride
// 0x0038 (0x0038 - 0x0000)
struct FServerSocketTransformOverride final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PivotOffset;                                       // 0x0008(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OffsetFromPivot;                                   // 0x0020(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerSocketTransformOverride) == 0x000008, "Wrong alignment on FServerSocketTransformOverride");
static_assert(sizeof(FServerSocketTransformOverride) == 0x000038, "Wrong size on FServerSocketTransformOverride");
static_assert(offsetof(FServerSocketTransformOverride, SocketName) == 0x000000, "Member 'FServerSocketTransformOverride::SocketName' has a wrong offset!");
static_assert(offsetof(FServerSocketTransformOverride, PivotOffset) == 0x000008, "Member 'FServerSocketTransformOverride::PivotOffset' has a wrong offset!");
static_assert(offsetof(FServerSocketTransformOverride, OffsetFromPivot) == 0x000020, "Member 'FServerSocketTransformOverride::OffsetFromPivot' has a wrong offset!");

// ScriptStruct TankRuntime.TankAudioUpdateContext
// 0x00B8 (0x00B8 - 0x0000)
struct FTankAudioUpdateContext final
{
public:
	bool                                          bIsAwake;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpeedParamValue;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftTrackPower;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightTrackPower;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurningParamValue;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentGear;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccelSpeedThreshold;                               // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastGearChangeTime;                                // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccelWaitTime;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTurningRight;                                     // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTurningLeft;                                      // 0x0025(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreviousTryMotion;                                // 0x0026(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27[0x1];                                       // 0x0027(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastForwardSpeed;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeUntilAccelOneShotFade;                         // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecelSpeedThreshold;                               // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EngineIdleThreshold;                               // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              WeaponsMovementThreshold;                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CannonSocketName;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TurretSocketName;                                  // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SurfaceID;                                         // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        DecelOneShot;                                      // 0x0058(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        AccelOneShot;                                      // 0x0060(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        TurningOneShot;                                    // 0x0068(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortLayeredAudioComponent*             TracksLeftAudio;                                   // 0x0070(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortLayeredAudioComponent*             TracksRightAudio;                                  // 0x0078(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0x38];                                      // 0x0080(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTankAudioUpdateContext) == 0x000008, "Wrong alignment on FTankAudioUpdateContext");
static_assert(sizeof(FTankAudioUpdateContext) == 0x0000B8, "Wrong size on FTankAudioUpdateContext");
static_assert(offsetof(FTankAudioUpdateContext, bIsAwake) == 0x000000, "Member 'FTankAudioUpdateContext::bIsAwake' has a wrong offset!");
static_assert(offsetof(FTankAudioUpdateContext, SpeedParamValue) == 0x000004, "Member 'FTankAudioUpdateContext::SpeedParamValue' has a wrong offset!");
static_assert(offsetof(FTankAudioUpdateContext, LeftTrackPower) == 0x000008, "Member 'FTankAudioUpdateContext::LeftTrackPower' has a wrong offset!");
static_assert(offsetof(FTankAudioUpdateContext, RightTrackPower) == 0x00000C, "Member 'FTankAudioUpdateContext::RightTrackPower' has a wrong offset!");
static_assert(offsetof(FTankAudioUpdateContext, TurningParamValue) == 0x000010, "Member 'FTankAudioUpdateContext::TurningParamValue' has a wrong offset!");
static_assert(offsetof(FTankAudioUpdateContext, CurrentGear) == 0x000014, "Member 'FTankAudioUpdateContext::CurrentGear' has a wrong offset!");
static_assert(offsetof(FTankAudioUpdateContext, AccelSpeedThreshold) == 0x000018, "Member 'FTankAudioUpdateContext::AccelSpeedThreshold' has a wrong offset!");
static_assert(offsetof(FTankAudioUpdateContext, LastGearChangeTime) == 0x00001C, "Member 'FTankAudioUpdateContext::LastGearChangeTime' has a wrong offset!");
static_assert(offsetof(FTankAudioUpdateContext, AccelWaitTime) == 0x000020, "Member 'FTankAudioUpdateContext::AccelWaitTime' has a wrong offset!");
static_assert(offsetof(FTankAudioUpdateContext, bTurningRight) == 0x000024, "Member 'FTankAudioUpdateContext::bTurningRight' has a wrong offset!");
static_assert(offsetof(FTankAudioUpdateContext, bTurningLeft) == 0x000025, "Member 'FTankAudioUpdateContext::bTurningLeft' has a wrong offset!");
static_assert(offsetof(FTankAudioUpdateContext, bPreviousTryMotion) == 0x000026, "Member 'FTankAudioUpdateContext::bPreviousTryMotion' has a wrong offset!");
static_assert(offsetof(FTankAudioUpdateContext, LastForwardSpeed) == 0x000028, "Member 'FTankAudioUpdateContext::LastForwardSpeed' has a wrong offset!");
static_assert(offsetof(FTankAudioUpdateContext, TimeUntilAccelOneShotFade) == 0x00002C, "Member 'FTankAudioUpdateContext::TimeUntilAccelOneShotFade' has a wrong offset!");
static_assert(offsetof(FTankAudioUpdateContext, DecelSpeedThreshold) == 0x000030, "Member 'FTankAudioUpdateContext::DecelSpeedThreshold' has a wrong offset!");
static_assert(offsetof(FTankAudioUpdateContext, EngineIdleThreshold) == 0x000034, "Member 'FTankAudioUpdateContext::EngineIdleThreshold' has a wrong offset!");
static_assert(offsetof(FTankAudioUpdateContext, WeaponsMovementThreshold) == 0x000038, "Member 'FTankAudioUpdateContext::WeaponsMovementThreshold' has a wrong offset!");
static_assert(offsetof(FTankAudioUpdateContext, CannonSocketName) == 0x000048, "Member 'FTankAudioUpdateContext::CannonSocketName' has a wrong offset!");
static_assert(offsetof(FTankAudioUpdateContext, TurretSocketName) == 0x00004C, "Member 'FTankAudioUpdateContext::TurretSocketName' has a wrong offset!");
static_assert(offsetof(FTankAudioUpdateContext, SurfaceID) == 0x000050, "Member 'FTankAudioUpdateContext::SurfaceID' has a wrong offset!");
static_assert(offsetof(FTankAudioUpdateContext, DecelOneShot) == 0x000058, "Member 'FTankAudioUpdateContext::DecelOneShot' has a wrong offset!");
static_assert(offsetof(FTankAudioUpdateContext, AccelOneShot) == 0x000060, "Member 'FTankAudioUpdateContext::AccelOneShot' has a wrong offset!");
static_assert(offsetof(FTankAudioUpdateContext, TurningOneShot) == 0x000068, "Member 'FTankAudioUpdateContext::TurningOneShot' has a wrong offset!");
static_assert(offsetof(FTankAudioUpdateContext, TracksLeftAudio) == 0x000070, "Member 'FTankAudioUpdateContext::TracksLeftAudio' has a wrong offset!");
static_assert(offsetof(FTankAudioUpdateContext, TracksRightAudio) == 0x000078, "Member 'FTankAudioUpdateContext::TracksRightAudio' has a wrong offset!");

// ScriptStruct TankRuntime.TankWeaponAimingData
// 0x01C0 (0x01C0 - 0x0000)
struct FTankWeaponAimingData final
{
public:
	int32                                         SeatIndex;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAimRotationLerpWithEasing;                        // 0x0004(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         AimRotationLerpSpeed;                              // 0x0008(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     AimYawRotationEasingCurve;                         // 0x0030(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     AimPitchRotationEasingCurve;                       // 0x00B8(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	ETankAimingMode                               AimingMode;                                        // 0x0140(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         AimingCameraToMuzzleDistanceScalar;                // 0x0148(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         AimingWhileTargetingCameraToMuzzleDistanceScalar;  // 0x0170(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         AimingPitchAdjust;                                 // 0x0198(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTankWeaponAimingData) == 0x000008, "Wrong alignment on FTankWeaponAimingData");
static_assert(sizeof(FTankWeaponAimingData) == 0x0001C0, "Wrong size on FTankWeaponAimingData");
static_assert(offsetof(FTankWeaponAimingData, SeatIndex) == 0x000000, "Member 'FTankWeaponAimingData::SeatIndex' has a wrong offset!");
static_assert(offsetof(FTankWeaponAimingData, bAimRotationLerpWithEasing) == 0x000004, "Member 'FTankWeaponAimingData::bAimRotationLerpWithEasing' has a wrong offset!");
static_assert(offsetof(FTankWeaponAimingData, AimRotationLerpSpeed) == 0x000008, "Member 'FTankWeaponAimingData::AimRotationLerpSpeed' has a wrong offset!");
static_assert(offsetof(FTankWeaponAimingData, AimYawRotationEasingCurve) == 0x000030, "Member 'FTankWeaponAimingData::AimYawRotationEasingCurve' has a wrong offset!");
static_assert(offsetof(FTankWeaponAimingData, AimPitchRotationEasingCurve) == 0x0000B8, "Member 'FTankWeaponAimingData::AimPitchRotationEasingCurve' has a wrong offset!");
static_assert(offsetof(FTankWeaponAimingData, AimingMode) == 0x000140, "Member 'FTankWeaponAimingData::AimingMode' has a wrong offset!");
static_assert(offsetof(FTankWeaponAimingData, AimingCameraToMuzzleDistanceScalar) == 0x000148, "Member 'FTankWeaponAimingData::AimingCameraToMuzzleDistanceScalar' has a wrong offset!");
static_assert(offsetof(FTankWeaponAimingData, AimingWhileTargetingCameraToMuzzleDistanceScalar) == 0x000170, "Member 'FTankWeaponAimingData::AimingWhileTargetingCameraToMuzzleDistanceScalar' has a wrong offset!");
static_assert(offsetof(FTankWeaponAimingData, AimingPitchAdjust) == 0x000198, "Member 'FTankWeaponAimingData::AimingPitchAdjust' has a wrong offset!");

}

