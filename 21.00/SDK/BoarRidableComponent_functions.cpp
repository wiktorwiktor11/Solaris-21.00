#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BoarRidableComponent

#include "Basic.hpp"

#include "BoarRidableComponent_classes.hpp"
#include "BoarRidableComponent_parameters.hpp"


namespace SDK
{

// Function BoarRidableComponent.BoarRidableComponent_C.ExecuteUbergraph_BoarRidableComponent
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBoarRidableComponent_C::ExecuteUbergraph_BoarRidableComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BoarRidableComponent_C", "ExecuteUbergraph_BoarRidableComponent");

	Params::BoarRidableComponent_C_ExecuteUbergraph_BoarRidableComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BoarRidableComponent.BoarRidableComponent_C.GetRunSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   RunSpeed                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBoarRidableComponent_C::GetRunSpeed(float* RunSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BoarRidableComponent_C", "GetRunSpeed");

	Params::BoarRidableComponent_C_GetRunSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RunSpeed != nullptr)
		*RunSpeed = Parms.RunSpeed;
}


// Function BoarRidableComponent.BoarRidableComponent_C.GetSprintSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   SprintSpeed                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBoarRidableComponent_C::GetSprintSpeed(float* SprintSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BoarRidableComponent_C", "GetSprintSpeed");

	Params::BoarRidableComponent_C_GetSprintSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SprintSpeed != nullptr)
		*SprintSpeed = Parms.SprintSpeed;
}


// Function BoarRidableComponent.BoarRidableComponent_C.HandleAbilityStarted
// (Event, Public, BlueprintEvent)

void UBoarRidableComponent_C::HandleAbilityStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BoarRidableComponent_C", "HandleAbilityStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BoarRidableComponent.BoarRidableComponent_C.HandleRiderStartedRiding
// (Event, Protected, BlueprintEvent)
// Parameters:
// class URiderComponent*                  Rider                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBoarRidableComponent_C::HandleRiderStartedRiding(class URiderComponent* Rider)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BoarRidableComponent_C", "HandleRiderStartedRiding");

	Params::BoarRidableComponent_C_HandleRiderStartedRiding Parms{};

	Parms.Rider = Rider;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BoarRidableComponent.BoarRidableComponent_C.HandleRiderStoppedRiding
// (Event, Protected, BlueprintEvent)
// Parameters:
// class URiderComponent*                  Rider                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBoarRidableComponent_C::HandleRiderStoppedRiding(class URiderComponent* Rider)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BoarRidableComponent_C", "HandleRiderStoppedRiding");

	Params::BoarRidableComponent_C_HandleRiderStoppedRiding Parms{};

	Parms.Rider = Rider;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BoarRidableComponent.BoarRidableComponent_C.OnReaction
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void UBoarRidableComponent_C::OnReaction(class UObject* Object, const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BoarRidableComponent_C", "OnReaction");

	Params::BoarRidableComponent_C_OnReaction Parms{};

	Parms.Object = Object;
	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BoarRidableComponent.BoarRidableComponent_C.OnReactionEvent
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           HitActor                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromAsyncSweepBox                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EFCollisionReactionType                 CollisionReactionType                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsFirstContinuousReactionOnDelayableActor             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       HitResult                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void UBoarRidableComponent_C::OnReactionEvent(const class AActor* HitActor, const bool bFromAsyncSweepBox, EFCollisionReactionType CollisionReactionType, const bool bIsFirstContinuousReactionOnDelayableActor, const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BoarRidableComponent_C", "OnReactionEvent");

	Params::BoarRidableComponent_C_OnReactionEvent Parms{};

	Parms.HitActor = HitActor;
	Parms.bFromAsyncSweepBox = bFromAsyncSweepBox;
	Parms.CollisionReactionType = CollisionReactionType;
	Parms.bIsFirstContinuousReactionOnDelayableActor = bIsFirstContinuousReactionOnDelayableActor;
	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BoarRidableComponent.BoarRidableComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBoarRidableComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BoarRidableComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BoarRidableComponent.BoarRidableComponent_C.ReceiveEndPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBoarRidableComponent_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BoarRidableComponent_C", "ReceiveEndPlay");

	Params::BoarRidableComponent_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}

}

