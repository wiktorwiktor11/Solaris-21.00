#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MeatballVehicle_L

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FluidForceDynamic_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass MeatballVehicle_L.MeatballVehicle_L_C
// 0x0760 (0x2390 - 0x1C30)
class AMeatballVehicle_L_C final : public AFortMeatballVehicle
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x1C30(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFortVehiclePhysicsCollisionDamageComponent* ImminentCollisionComponent;                        // 0x1C38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleFuelComponent*              FuelComponent;                                     // 0x1C40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Snow_Landscape_Interaction_System;                 // 0x1C48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleSeatWeaponComponent*        FortVehicleSeatWeapon;                             // 0x1C50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   MeatballCollisionBody;                             // 0x1C58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortCollisionAudioComponent*           FortCollisionAudioHitPlayer;                       // 0x1C60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Meatball_Muzzle_Flash;                           // 0x1C68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Meatball_Boost_Ready;                            // 0x1C70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Meatball_Boost_Ready1;                           // 0x1C78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Dirt_Cascade;                                      // 0x1C80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   AudioController;                                   // 0x1C88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Boost_R;                                         // 0x1C90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Boost_L;                                         // 0x1C98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_BoostEnd_R;                                      // 0x1CA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_BoostEnd_L;                                      // 0x1CA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          OverlapVolume;                                     // 0x1CB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_NewTrack_0_7906805348581A63C02104AD8E4AFD45; // 0x1CB8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_7906805348581A63C02104AD8E4AFD45; // 0x1CBC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CBD[0x3];                                     // 0x1CBD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x1CC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoostTimeline_Rumble_FA04381447AE3F527025F494D33449BD; // 0x1CC8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoostTimeline_FoV_FA04381447AE3F527025F494D33449BD; // 0x1CCC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            BoostTimeline__Direction_FA04381447AE3F527025F494D33449BD; // 0x1CD0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CD1[0x7];                                     // 0x1CD1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     BoostTimeline;                                     // 0x1CD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        LocalPlayerPawn;                                   // 0x1CE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        DriverPawn;                                        // 0x1CE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      BP_Driving_Player_Controller;                      // 0x1CF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawnAthena*                  LastHitPlayer;                                     // 0x1CF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        PassengerPawn;                                     // 0x1D00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      BP_PassengerPlayerController;                      // 0x1D08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AFortPlayerPawn*>                PassengerPawns;                                    // 0x1D10(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class AActor*                                 HitPickaxePawn;                                    // 0x1D20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpecialHonk;                                       // 0x1D28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D29[0x7];                                     // 0x1D29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           SpecialHonkTimer;                                  // 0x1D30(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             OnDeathSound;                                      // 0x1D38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               DamagedEffect;                                     // 0x1D40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AudioSpark;                                        // 0x1D48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               InWaterFX;                                         // 0x1D50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        InWaterLoop;                                       // 0x1D58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             WaterEnterSound;                                   // 0x1D60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             InWaterLoopSound;                                  // 0x1D68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CheckWaterTimer;                                   // 0x1D70(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        WaterSplashBurstFX;                                // 0x1D78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        InWaterLoopingFX;                                  // 0x1D80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        VehicleDestroyedFX;                                // 0x1D88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SavedDamageForMID;                                 // 0x1D90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D94[0x4];                                     // 0x1D94(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               BodyMID;                                           // 0x1D98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RumbleIntensity;                                   // 0x1DA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1DA4[0x4];                                     // 0x1DA4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMatineeCameraShake*                    DriverCameraShake_0;                               // 0x1DA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMatineeCameraShake*                    PassengerCameraShake;                              // 0x1DB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Driver_CameraShake;                                // 0x1DB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Passenger_CameraShake;                             // 0x1DC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VehicleMaxSpeed_DESIGNTIME;                        // 0x1DC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinForwardSpeedForSideWake;                        // 0x1DCC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Turn_Bias;                                         // 0x1DD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1DD4[0x4];                                     // 0x1DD4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             OnBoostEndSound;                                   // 0x1DD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             BoostSound;                                        // 0x1DE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             BoostFailedSound;                                  // 0x1DE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 SmallJoltCameraShake;                              // 0x1DF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 WaterImpactCameraShake;                            // 0x1DF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinImpactToShake;                                  // 0x1E00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E04[0x4];                                     // 0x1E04(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMatineeCameraShake*                    CameraShakeWaterImpact;                            // 0x1E08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InAirSmoothed;                                     // 0x1E10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SmoothedSpringCompression;                         // 0x1E14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScreenShakeFrequencyMin;                           // 0x1E18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScreenShakeYawFrequencyMultipier;                  // 0x1E1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PassengerCameraShakeMultiplier;                    // 0x1E20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Current_MaxSpringCompression;                      // 0x1E24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpringFudgeValue;                                  // 0x1E28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NormalizedSpeed;                                   // 0x1E2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraShakeSpeedCurvePow;                          // 0x1E30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AmplitudeMin;                                      // 0x1E34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AmplitudeMax;                                      // 0x1E38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BoostingCameraShake;                               // 0x1E3C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E3D[0x3];                                     // 0x1E3D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                FluidSimBP;                                        // 0x1E40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFluidForceDynamic                     WaterForceSettings;                                // 0x1E48(0x0070)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          BoostCameraActive;                                 // 0x1EB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EB9[0x3];                                     // 0x1EB9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BoostRumbleIntensity;                              // 0x1EBC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxBoostFOV;                                       // 0x1EC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EC4[0x4];                                     // 0x1EC4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 DriverGE;                                          // 0x1EC8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 PassengerGE;                                       // 0x1ED0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLegendary;                                       // 0x1ED8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1ED9[0x3];                                     // 0x1ED9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           GC_VehicleScreenDrips;                             // 0x1EDC(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         WaterEntryMaxMagnitude;                            // 0x1EE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Forward_Intensity;                                 // 0x1EE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Right_Intensity;                                   // 0x1EE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EEC[0x4];                                     // 0x1EEC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CurrentLazyUpdateVector;                           // 0x1EF0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BoostSoundWrapPriority;                            // 0x1F08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NormalizedForwardSpeedKmh;                         // 0x1F0C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             EngineOnSound;                                     // 0x1F10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             EngineOffSound;                                    // 0x1F18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IsInAirMultiplier;                                 // 0x1F20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F24[0x4];                                     // 0x1F24(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               BoostGuageMIC;                                     // 0x1F28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBoosting;                                        // 0x1F30(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F31[0x3];                                     // 0x1F31(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Boost;                                             // 0x1F34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageValue;                                       // 0x1F38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PickaxeImpulseStrength;                            // 0x1F3C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         Row_ShouldLaunchPlayer;                            // 0x1F40(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           GC_HitPlayer;                                      // 0x1F68(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F6C[0x4];                                     // 0x1F6C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 GC_ParamsEmpty;                                    // 0x1F70(0x00D0)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FGameplayTag                           GC_HitFiend;                                       // 0x2040(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2044[0x4];                                     // 0x2044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABuildingActor*                         HitBuildingActor;                                  // 0x2048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DestructionAngle;                                  // 0x2050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpeedImpulsePlayerMulti;                           // 0x2054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinSpeedToLaunchPlayer;                            // 0x2058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShouldLaunchPlayer;                                // 0x205C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         Row_PickaxeImpulseStrength;                        // 0x2060(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_MinSpeedLaunchPlayer;                          // 0x2088(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_SpeedImpulseMultiplier;                        // 0x20B0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         MinSpeedToDamage;                                  // 0x20D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_20DC[0x4];                                     // 0x20DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Row_MinSpeedToDamage;                              // 0x20E0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         PickaxeForwardImpulseZ_Multiplier;                 // 0x2108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_210C[0x4];                                     // 0x210C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PickaxeImpulse;                                    // 0x2110(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShouldPickaxeImpulse;                              // 0x2128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_212C[0x4];                                     // 0x212C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Row_ShouldPickaxeImpulse;                          // 0x2130(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_PickaxeImpulseZ_Multiplier;                    // 0x2158(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UMatineeCameraShake*                    OnLand_CameraShake;                                // 0x2180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 OnLandCameraShake;                                 // 0x2188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           DamageOnLandTimer;                                 // 0x2190(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         ShouldDamageOnLand;                                // 0x2198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_219C[0x4];                                     // 0x219C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Row_ShouldDamageOnLand;                            // 0x21A0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         LandCameraSpeedForShakes;                          // 0x21C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LandCameraMaxFrequency;                            // 0x21CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LandCameraMinFrequency;                            // 0x21D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LandCameraRot_Amp;                                 // 0x21D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LandCameraY_Amp;                                   // 0x21D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LandCameraZ_Amp;                                   // 0x21DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LandCameraShakeFalloff;                            // 0x21E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LandDamageFrequency;                               // 0x21E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           LandDamageTimer;                                   // 0x21E8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         BoatDamageOnLand;                                  // 0x21F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21F4[0x4];                                     // 0x21F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Row_BoatDamageOnLand;                              // 0x21F8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         LandRumbleIntensity_0;                             // 0x2220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2224[0x4];                                     // 0x2224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        LastDriver;                                        // 0x2228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NormalizedSpeedForRumble;                          // 0x2230(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RumbleIntensityPow;                                // 0x2234(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LargeRumble;                                       // 0x2238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2239[0x3];                                     // 0x2239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FFdelay;                                           // 0x223C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurnIntensity;                                     // 0x2240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinTurnIntensity;                                  // 0x2244(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinIn;                                             // 0x2248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxIn;                                             // 0x224C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinOut;                                            // 0x2250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxOut;                                            // 0x2254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Pow;                                               // 0x2258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_225C[0x4];                                     // 0x225C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UForceFeedbackEffect*                   ForceFeedbackWeaponFire;                           // 0x2260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        BoostAudioComponent;                               // 0x2268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Snow_;                                          // 0x2270(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2271[0x7];                                     // 0x2271(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Curve;                                             // 0x2278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDebugSnowCurve;                                   // 0x2280(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2281[0x7];                                     // 0x2281(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ApolloSnowSetup_C*                  Set_up_snow_reference;                             // 0x2288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Set_up_Snow_Amount;                                // 0x2290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DirtSpawnRate;                                     // 0x2294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerController*                  LastDamagingPlayer;                                // 0x2298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFN_RadialForce_C*                      FN_RadialForce;                                    // 0x22A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_Boost;                                          // 0x22A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            CooldownCueEvent;                                  // 0x22B0(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_Apply_in_Valet_Tag;                             // 0x22B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  InValetVehicleTag;                                 // 0x22C0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   LootOnDamagePackage;                               // 0x22E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22E4[0x4];                                     // 0x22E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Row_ShouldDropLootOnDamage;                        // 0x22E8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         LootDropCurentThreshold;                           // 0x2310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LootTossOffset;                                    // 0x2314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         Row_LootDropDamageThresholds;                      // 0x2318(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UParticleSystem*                        FX_LootDropOnDamagedSpawn;                         // 0x2340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LootTossMin;                                       // 0x2348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_234C[0x4];                                     // 0x234C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         bEnableWeapons;                                    // 0x2350(0x0028)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TSubclassOf<class UCameraShakeBase>           OnHitShake;                                        // 0x2378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UCameraShakeBase>           OnBigHitShake;                                     // 0x2380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

public:
	void Audio_Tick_Update();
	void BndEvt__PontoonsComponent_K2Node_ComponentBoundEvent_3_OnPontoonExitedWater__DelegateSignature(const struct FSphericalPontoon& Pontoon);
	void BndEvt__PontoonsComponent_K2Node_ComponentBoundEvent_5_OnPontoonEnteredWater__DelegateSignature(const struct FSphericalPontoon& Pontoon);
	void BndEvt__SkeletalMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BoostCameraReverse();
	void BoostRumbleEnd();
	void BoostTimeline__FinishedFunc();
	void BoostTimeline__UpdateFunc();
	void calculateTurnSpeed(float* TurnDirection, float* TurnSpeed);
	bool CanDamageBuilding(const struct FHitResult& Hit);
	void Check_for_Boost_Ready();
	void CheckWater();
	void DetermineWaterMovementForLazyUpdateMesh(float Forward_Dot, float Right_Dot, struct FVector* Output__Vector);
	void DisableWeapon(bool DisableWeapon_0);
	void DropLootOnDamage(class AActor* DamagingActor, const struct FHitResult& HitResult);
	void DropLootOnExplode();
	void Entered_Water_Engine();
	void Entered_Water_Mid();
	void EventOnHealthChanged();
	void ExecuteUbergraph_MeatballVehicle_L(int32 EntryPoint);
	void Exited_Water_Engine();
	void Exited_Water_Mid();
	void FireFF(class UFortGameplayAbility* GameplayAbility, const struct FGameplayTagContainer& AbilityTags);
	void HitWithPickaxe(const struct FVector& HitDirection);
	void IsNiagaraEffectsEnabled(bool* IsEnabled);
	bool IsOnGround();
	void K2_ApplyCosmeticWrap(const class UAthenaItemWrapDefinition* LoadedWrap);
	void LandDamage();
	void LandDamageEvent();
	void LightningSpark(class FName EventName, float EmitterTime, const struct FVector& Location, const struct FVector& Velocity);
	void ManageStateDriverEnter(class AFortPlayerPawn* DriverPawn_0);
	void ManageStateDriverExit(class AFortPlayerPawn* PlayerPawn);
	void ManageStatePassengerEnter(class AFortPlayerPawn* PassengerPawn_0);
	void ManageStatePassengerExit(class AFortPlayerPawn* PlayerPawn);
	void NiagaraUserVariables();
	void OnBoostFailed();
	void OnBoostFinished();
	void OnBoostStarted();
	void OnCollisionHitEffects(const struct FVector& HitLocation, const struct FVector& HitNormalImpulse, const struct FVector& HitFrictionImpulse, const struct FVector& HitNormal, class AActor* HitActor, EPhysicalSurface HitSurfaceType);
	void OnDamaged(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FGameplayEffectContextHandle& EffectContext, class AController* EventInstigator, class AActor* DamageCauser);
	void OnDeathPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnEnteredWaterVolume(const struct FVector& WaterSurfacePoint);
	void OnExitedWaterVolume(const struct FVector& WaterSurfacePoint);
	void OnHoldExitStarted(class AFortPawn* ExitingPawn, const float ExitDuration);
	void OnHoldExitStopped(class AFortPawn* ExitingPawn);
	void OnPawnEnterVehicle(class AFortPlayerPawn* PlayerPawn, const int32 SeatIdx);
	void OnPawnExitVehicle(class AFortPlayerPawn* PlayerPawn, class FName ExitSocketName);
	void OnRep_IsLegendary();
	void OnRep_LandDamageFrequency();
	void OnSleepStateChanged(const bool bAwake);
	void OnStopTick();
	void PlayHapticsOnHit(float HitMagnitude);
	void PlayStartupFF();
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void ReceiveTick(float DeltaSeconds);
	void RefreshDamageState();
	void ReverseBoostTimeline();
	void SendDamageStateToMaterial(float Param_Value);
	void ShowCooldownCue(class AFortPlayerPawn* Pawn, float Duration);
	void StartBoostRumble();
	void StartTurnRumble();
	void StopStartupRumble();
	void StopTurnRumbleBP();
	void Timeline_0__FinishedFunc();
	void Timeline_0__UpdateFunc();
	void UpdateBoostRumble();
	void UpdateDamageState(float Damage);
	void UpdateDynamicCameraShake();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MeatballVehicle_L_C">();
	}
	static class AMeatballVehicle_L_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMeatballVehicle_L_C>();
	}
};
static_assert(alignof(AMeatballVehicle_L_C) == 0x000010, "Wrong alignment on AMeatballVehicle_L_C");
static_assert(sizeof(AMeatballVehicle_L_C) == 0x002390, "Wrong size on AMeatballVehicle_L_C");
static_assert(offsetof(AMeatballVehicle_L_C, UberGraphFrame) == 0x001C30, "Member 'AMeatballVehicle_L_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, ImminentCollisionComponent) == 0x001C38, "Member 'AMeatballVehicle_L_C::ImminentCollisionComponent' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, FuelComponent) == 0x001C40, "Member 'AMeatballVehicle_L_C::FuelComponent' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Snow_Landscape_Interaction_System) == 0x001C48, "Member 'AMeatballVehicle_L_C::Snow_Landscape_Interaction_System' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, FortVehicleSeatWeapon) == 0x001C50, "Member 'AMeatballVehicle_L_C::FortVehicleSeatWeapon' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, MeatballCollisionBody) == 0x001C58, "Member 'AMeatballVehicle_L_C::MeatballCollisionBody' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, FortCollisionAudioHitPlayer) == 0x001C60, "Member 'AMeatballVehicle_L_C::FortCollisionAudioHitPlayer' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, P_Meatball_Muzzle_Flash) == 0x001C68, "Member 'AMeatballVehicle_L_C::P_Meatball_Muzzle_Flash' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, P_Meatball_Boost_Ready) == 0x001C70, "Member 'AMeatballVehicle_L_C::P_Meatball_Boost_Ready' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, P_Meatball_Boost_Ready1) == 0x001C78, "Member 'AMeatballVehicle_L_C::P_Meatball_Boost_Ready1' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Dirt_Cascade) == 0x001C80, "Member 'AMeatballVehicle_L_C::Dirt_Cascade' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, AudioController) == 0x001C88, "Member 'AMeatballVehicle_L_C::AudioController' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, P_Boost_R) == 0x001C90, "Member 'AMeatballVehicle_L_C::P_Boost_R' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, P_Boost_L) == 0x001C98, "Member 'AMeatballVehicle_L_C::P_Boost_L' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, P_BoostEnd_R) == 0x001CA0, "Member 'AMeatballVehicle_L_C::P_BoostEnd_R' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, P_BoostEnd_L) == 0x001CA8, "Member 'AMeatballVehicle_L_C::P_BoostEnd_L' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, OverlapVolume) == 0x001CB0, "Member 'AMeatballVehicle_L_C::OverlapVolume' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Timeline_0_NewTrack_0_7906805348581A63C02104AD8E4AFD45) == 0x001CB8, "Member 'AMeatballVehicle_L_C::Timeline_0_NewTrack_0_7906805348581A63C02104AD8E4AFD45' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Timeline_0__Direction_7906805348581A63C02104AD8E4AFD45) == 0x001CBC, "Member 'AMeatballVehicle_L_C::Timeline_0__Direction_7906805348581A63C02104AD8E4AFD45' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Timeline_0) == 0x001CC0, "Member 'AMeatballVehicle_L_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, BoostTimeline_Rumble_FA04381447AE3F527025F494D33449BD) == 0x001CC8, "Member 'AMeatballVehicle_L_C::BoostTimeline_Rumble_FA04381447AE3F527025F494D33449BD' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, BoostTimeline_FoV_FA04381447AE3F527025F494D33449BD) == 0x001CCC, "Member 'AMeatballVehicle_L_C::BoostTimeline_FoV_FA04381447AE3F527025F494D33449BD' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, BoostTimeline__Direction_FA04381447AE3F527025F494D33449BD) == 0x001CD0, "Member 'AMeatballVehicle_L_C::BoostTimeline__Direction_FA04381447AE3F527025F494D33449BD' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, BoostTimeline) == 0x001CD8, "Member 'AMeatballVehicle_L_C::BoostTimeline' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, LocalPlayerPawn) == 0x001CE0, "Member 'AMeatballVehicle_L_C::LocalPlayerPawn' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, DriverPawn) == 0x001CE8, "Member 'AMeatballVehicle_L_C::DriverPawn' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, BP_Driving_Player_Controller) == 0x001CF0, "Member 'AMeatballVehicle_L_C::BP_Driving_Player_Controller' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, LastHitPlayer) == 0x001CF8, "Member 'AMeatballVehicle_L_C::LastHitPlayer' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, PassengerPawn) == 0x001D00, "Member 'AMeatballVehicle_L_C::PassengerPawn' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, BP_PassengerPlayerController) == 0x001D08, "Member 'AMeatballVehicle_L_C::BP_PassengerPlayerController' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, PassengerPawns) == 0x001D10, "Member 'AMeatballVehicle_L_C::PassengerPawns' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, HitPickaxePawn) == 0x001D20, "Member 'AMeatballVehicle_L_C::HitPickaxePawn' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, SpecialHonk) == 0x001D28, "Member 'AMeatballVehicle_L_C::SpecialHonk' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, SpecialHonkTimer) == 0x001D30, "Member 'AMeatballVehicle_L_C::SpecialHonkTimer' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, OnDeathSound) == 0x001D38, "Member 'AMeatballVehicle_L_C::OnDeathSound' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, DamagedEffect) == 0x001D40, "Member 'AMeatballVehicle_L_C::DamagedEffect' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, AudioSpark) == 0x001D48, "Member 'AMeatballVehicle_L_C::AudioSpark' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, InWaterFX) == 0x001D50, "Member 'AMeatballVehicle_L_C::InWaterFX' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, InWaterLoop) == 0x001D58, "Member 'AMeatballVehicle_L_C::InWaterLoop' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, WaterEnterSound) == 0x001D60, "Member 'AMeatballVehicle_L_C::WaterEnterSound' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, InWaterLoopSound) == 0x001D68, "Member 'AMeatballVehicle_L_C::InWaterLoopSound' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, CheckWaterTimer) == 0x001D70, "Member 'AMeatballVehicle_L_C::CheckWaterTimer' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, WaterSplashBurstFX) == 0x001D78, "Member 'AMeatballVehicle_L_C::WaterSplashBurstFX' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, InWaterLoopingFX) == 0x001D80, "Member 'AMeatballVehicle_L_C::InWaterLoopingFX' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, VehicleDestroyedFX) == 0x001D88, "Member 'AMeatballVehicle_L_C::VehicleDestroyedFX' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, SavedDamageForMID) == 0x001D90, "Member 'AMeatballVehicle_L_C::SavedDamageForMID' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, BodyMID) == 0x001D98, "Member 'AMeatballVehicle_L_C::BodyMID' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, RumbleIntensity) == 0x001DA0, "Member 'AMeatballVehicle_L_C::RumbleIntensity' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, DriverCameraShake_0) == 0x001DA8, "Member 'AMeatballVehicle_L_C::DriverCameraShake_0' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, PassengerCameraShake) == 0x001DB0, "Member 'AMeatballVehicle_L_C::PassengerCameraShake' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Driver_CameraShake) == 0x001DB8, "Member 'AMeatballVehicle_L_C::Driver_CameraShake' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Passenger_CameraShake) == 0x001DC0, "Member 'AMeatballVehicle_L_C::Passenger_CameraShake' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, VehicleMaxSpeed_DESIGNTIME) == 0x001DC8, "Member 'AMeatballVehicle_L_C::VehicleMaxSpeed_DESIGNTIME' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, MinForwardSpeedForSideWake) == 0x001DCC, "Member 'AMeatballVehicle_L_C::MinForwardSpeedForSideWake' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Turn_Bias) == 0x001DD0, "Member 'AMeatballVehicle_L_C::Turn_Bias' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, OnBoostEndSound) == 0x001DD8, "Member 'AMeatballVehicle_L_C::OnBoostEndSound' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, BoostSound) == 0x001DE0, "Member 'AMeatballVehicle_L_C::BoostSound' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, BoostFailedSound) == 0x001DE8, "Member 'AMeatballVehicle_L_C::BoostFailedSound' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, SmallJoltCameraShake) == 0x001DF0, "Member 'AMeatballVehicle_L_C::SmallJoltCameraShake' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, WaterImpactCameraShake) == 0x001DF8, "Member 'AMeatballVehicle_L_C::WaterImpactCameraShake' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, MinImpactToShake) == 0x001E00, "Member 'AMeatballVehicle_L_C::MinImpactToShake' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, CameraShakeWaterImpact) == 0x001E08, "Member 'AMeatballVehicle_L_C::CameraShakeWaterImpact' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, InAirSmoothed) == 0x001E10, "Member 'AMeatballVehicle_L_C::InAirSmoothed' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, SmoothedSpringCompression) == 0x001E14, "Member 'AMeatballVehicle_L_C::SmoothedSpringCompression' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, ScreenShakeFrequencyMin) == 0x001E18, "Member 'AMeatballVehicle_L_C::ScreenShakeFrequencyMin' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, ScreenShakeYawFrequencyMultipier) == 0x001E1C, "Member 'AMeatballVehicle_L_C::ScreenShakeYawFrequencyMultipier' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, PassengerCameraShakeMultiplier) == 0x001E20, "Member 'AMeatballVehicle_L_C::PassengerCameraShakeMultiplier' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Current_MaxSpringCompression) == 0x001E24, "Member 'AMeatballVehicle_L_C::Current_MaxSpringCompression' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, SpringFudgeValue) == 0x001E28, "Member 'AMeatballVehicle_L_C::SpringFudgeValue' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, NormalizedSpeed) == 0x001E2C, "Member 'AMeatballVehicle_L_C::NormalizedSpeed' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, CameraShakeSpeedCurvePow) == 0x001E30, "Member 'AMeatballVehicle_L_C::CameraShakeSpeedCurvePow' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, AmplitudeMin) == 0x001E34, "Member 'AMeatballVehicle_L_C::AmplitudeMin' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, AmplitudeMax) == 0x001E38, "Member 'AMeatballVehicle_L_C::AmplitudeMax' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, BoostingCameraShake) == 0x001E3C, "Member 'AMeatballVehicle_L_C::BoostingCameraShake' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, FluidSimBP) == 0x001E40, "Member 'AMeatballVehicle_L_C::FluidSimBP' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, WaterForceSettings) == 0x001E48, "Member 'AMeatballVehicle_L_C::WaterForceSettings' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, BoostCameraActive) == 0x001EB8, "Member 'AMeatballVehicle_L_C::BoostCameraActive' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, BoostRumbleIntensity) == 0x001EBC, "Member 'AMeatballVehicle_L_C::BoostRumbleIntensity' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, MaxBoostFOV) == 0x001EC0, "Member 'AMeatballVehicle_L_C::MaxBoostFOV' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, DriverGE) == 0x001EC8, "Member 'AMeatballVehicle_L_C::DriverGE' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, PassengerGE) == 0x001ED0, "Member 'AMeatballVehicle_L_C::PassengerGE' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, IsLegendary) == 0x001ED8, "Member 'AMeatballVehicle_L_C::IsLegendary' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, GC_VehicleScreenDrips) == 0x001EDC, "Member 'AMeatballVehicle_L_C::GC_VehicleScreenDrips' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, WaterEntryMaxMagnitude) == 0x001EE0, "Member 'AMeatballVehicle_L_C::WaterEntryMaxMagnitude' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Forward_Intensity) == 0x001EE4, "Member 'AMeatballVehicle_L_C::Forward_Intensity' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Right_Intensity) == 0x001EE8, "Member 'AMeatballVehicle_L_C::Right_Intensity' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, CurrentLazyUpdateVector) == 0x001EF0, "Member 'AMeatballVehicle_L_C::CurrentLazyUpdateVector' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, BoostSoundWrapPriority) == 0x001F08, "Member 'AMeatballVehicle_L_C::BoostSoundWrapPriority' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, NormalizedForwardSpeedKmh) == 0x001F0C, "Member 'AMeatballVehicle_L_C::NormalizedForwardSpeedKmh' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, EngineOnSound) == 0x001F10, "Member 'AMeatballVehicle_L_C::EngineOnSound' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, EngineOffSound) == 0x001F18, "Member 'AMeatballVehicle_L_C::EngineOffSound' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, IsInAirMultiplier) == 0x001F20, "Member 'AMeatballVehicle_L_C::IsInAirMultiplier' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, BoostGuageMIC) == 0x001F28, "Member 'AMeatballVehicle_L_C::BoostGuageMIC' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, IsBoosting) == 0x001F30, "Member 'AMeatballVehicle_L_C::IsBoosting' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Boost) == 0x001F34, "Member 'AMeatballVehicle_L_C::Boost' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, DamageValue) == 0x001F38, "Member 'AMeatballVehicle_L_C::DamageValue' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, PickaxeImpulseStrength) == 0x001F3C, "Member 'AMeatballVehicle_L_C::PickaxeImpulseStrength' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Row_ShouldLaunchPlayer) == 0x001F40, "Member 'AMeatballVehicle_L_C::Row_ShouldLaunchPlayer' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, GC_HitPlayer) == 0x001F68, "Member 'AMeatballVehicle_L_C::GC_HitPlayer' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, GC_ParamsEmpty) == 0x001F70, "Member 'AMeatballVehicle_L_C::GC_ParamsEmpty' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, GC_HitFiend) == 0x002040, "Member 'AMeatballVehicle_L_C::GC_HitFiend' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, HitBuildingActor) == 0x002048, "Member 'AMeatballVehicle_L_C::HitBuildingActor' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, DestructionAngle) == 0x002050, "Member 'AMeatballVehicle_L_C::DestructionAngle' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, SpeedImpulsePlayerMulti) == 0x002054, "Member 'AMeatballVehicle_L_C::SpeedImpulsePlayerMulti' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, MinSpeedToLaunchPlayer) == 0x002058, "Member 'AMeatballVehicle_L_C::MinSpeedToLaunchPlayer' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, ShouldLaunchPlayer) == 0x00205C, "Member 'AMeatballVehicle_L_C::ShouldLaunchPlayer' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Row_PickaxeImpulseStrength) == 0x002060, "Member 'AMeatballVehicle_L_C::Row_PickaxeImpulseStrength' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Row_MinSpeedLaunchPlayer) == 0x002088, "Member 'AMeatballVehicle_L_C::Row_MinSpeedLaunchPlayer' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Row_SpeedImpulseMultiplier) == 0x0020B0, "Member 'AMeatballVehicle_L_C::Row_SpeedImpulseMultiplier' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, MinSpeedToDamage) == 0x0020D8, "Member 'AMeatballVehicle_L_C::MinSpeedToDamage' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Row_MinSpeedToDamage) == 0x0020E0, "Member 'AMeatballVehicle_L_C::Row_MinSpeedToDamage' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, PickaxeForwardImpulseZ_Multiplier) == 0x002108, "Member 'AMeatballVehicle_L_C::PickaxeForwardImpulseZ_Multiplier' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, PickaxeImpulse) == 0x002110, "Member 'AMeatballVehicle_L_C::PickaxeImpulse' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, ShouldPickaxeImpulse) == 0x002128, "Member 'AMeatballVehicle_L_C::ShouldPickaxeImpulse' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Row_ShouldPickaxeImpulse) == 0x002130, "Member 'AMeatballVehicle_L_C::Row_ShouldPickaxeImpulse' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Row_PickaxeImpulseZ_Multiplier) == 0x002158, "Member 'AMeatballVehicle_L_C::Row_PickaxeImpulseZ_Multiplier' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, OnLand_CameraShake) == 0x002180, "Member 'AMeatballVehicle_L_C::OnLand_CameraShake' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, OnLandCameraShake) == 0x002188, "Member 'AMeatballVehicle_L_C::OnLandCameraShake' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, DamageOnLandTimer) == 0x002190, "Member 'AMeatballVehicle_L_C::DamageOnLandTimer' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, ShouldDamageOnLand) == 0x002198, "Member 'AMeatballVehicle_L_C::ShouldDamageOnLand' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Row_ShouldDamageOnLand) == 0x0021A0, "Member 'AMeatballVehicle_L_C::Row_ShouldDamageOnLand' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, LandCameraSpeedForShakes) == 0x0021C8, "Member 'AMeatballVehicle_L_C::LandCameraSpeedForShakes' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, LandCameraMaxFrequency) == 0x0021CC, "Member 'AMeatballVehicle_L_C::LandCameraMaxFrequency' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, LandCameraMinFrequency) == 0x0021D0, "Member 'AMeatballVehicle_L_C::LandCameraMinFrequency' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, LandCameraRot_Amp) == 0x0021D4, "Member 'AMeatballVehicle_L_C::LandCameraRot_Amp' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, LandCameraY_Amp) == 0x0021D8, "Member 'AMeatballVehicle_L_C::LandCameraY_Amp' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, LandCameraZ_Amp) == 0x0021DC, "Member 'AMeatballVehicle_L_C::LandCameraZ_Amp' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, LandCameraShakeFalloff) == 0x0021E0, "Member 'AMeatballVehicle_L_C::LandCameraShakeFalloff' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, LandDamageFrequency) == 0x0021E4, "Member 'AMeatballVehicle_L_C::LandDamageFrequency' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, LandDamageTimer) == 0x0021E8, "Member 'AMeatballVehicle_L_C::LandDamageTimer' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, BoatDamageOnLand) == 0x0021F0, "Member 'AMeatballVehicle_L_C::BoatDamageOnLand' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Row_BoatDamageOnLand) == 0x0021F8, "Member 'AMeatballVehicle_L_C::Row_BoatDamageOnLand' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, LandRumbleIntensity_0) == 0x002220, "Member 'AMeatballVehicle_L_C::LandRumbleIntensity_0' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, LastDriver) == 0x002228, "Member 'AMeatballVehicle_L_C::LastDriver' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, NormalizedSpeedForRumble) == 0x002230, "Member 'AMeatballVehicle_L_C::NormalizedSpeedForRumble' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, RumbleIntensityPow) == 0x002234, "Member 'AMeatballVehicle_L_C::RumbleIntensityPow' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, LargeRumble) == 0x002238, "Member 'AMeatballVehicle_L_C::LargeRumble' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, FFdelay) == 0x00223C, "Member 'AMeatballVehicle_L_C::FFdelay' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, TurnIntensity) == 0x002240, "Member 'AMeatballVehicle_L_C::TurnIntensity' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, MinTurnIntensity) == 0x002244, "Member 'AMeatballVehicle_L_C::MinTurnIntensity' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, MinIn) == 0x002248, "Member 'AMeatballVehicle_L_C::MinIn' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, MaxIn) == 0x00224C, "Member 'AMeatballVehicle_L_C::MaxIn' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, MinOut) == 0x002250, "Member 'AMeatballVehicle_L_C::MinOut' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, MaxOut) == 0x002254, "Member 'AMeatballVehicle_L_C::MaxOut' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Pow) == 0x002258, "Member 'AMeatballVehicle_L_C::Pow' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, ForceFeedbackWeaponFire) == 0x002260, "Member 'AMeatballVehicle_L_C::ForceFeedbackWeaponFire' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, BoostAudioComponent) == 0x002268, "Member 'AMeatballVehicle_L_C::BoostAudioComponent' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Is_Snow_) == 0x002270, "Member 'AMeatballVehicle_L_C::Is_Snow_' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Curve) == 0x002278, "Member 'AMeatballVehicle_L_C::Curve' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, bDebugSnowCurve) == 0x002280, "Member 'AMeatballVehicle_L_C::bDebugSnowCurve' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Set_up_snow_reference) == 0x002288, "Member 'AMeatballVehicle_L_C::Set_up_snow_reference' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Set_up_Snow_Amount) == 0x002290, "Member 'AMeatballVehicle_L_C::Set_up_Snow_Amount' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, DirtSpawnRate) == 0x002294, "Member 'AMeatballVehicle_L_C::DirtSpawnRate' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, LastDamagingPlayer) == 0x002298, "Member 'AMeatballVehicle_L_C::LastDamagingPlayer' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, FN_RadialForce) == 0x0022A0, "Member 'AMeatballVehicle_L_C::FN_RadialForce' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, GE_Boost) == 0x0022A8, "Member 'AMeatballVehicle_L_C::GE_Boost' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, CooldownCueEvent) == 0x0022B0, "Member 'AMeatballVehicle_L_C::CooldownCueEvent' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, GE_Apply_in_Valet_Tag) == 0x0022B8, "Member 'AMeatballVehicle_L_C::GE_Apply_in_Valet_Tag' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, InValetVehicleTag) == 0x0022C0, "Member 'AMeatballVehicle_L_C::InValetVehicleTag' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, LootOnDamagePackage) == 0x0022E0, "Member 'AMeatballVehicle_L_C::LootOnDamagePackage' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Row_ShouldDropLootOnDamage) == 0x0022E8, "Member 'AMeatballVehicle_L_C::Row_ShouldDropLootOnDamage' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, LootDropCurentThreshold) == 0x002310, "Member 'AMeatballVehicle_L_C::LootDropCurentThreshold' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, LootTossOffset) == 0x002314, "Member 'AMeatballVehicle_L_C::LootTossOffset' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Row_LootDropDamageThresholds) == 0x002318, "Member 'AMeatballVehicle_L_C::Row_LootDropDamageThresholds' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, FX_LootDropOnDamagedSpawn) == 0x002340, "Member 'AMeatballVehicle_L_C::FX_LootDropOnDamagedSpawn' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, LootTossMin) == 0x002348, "Member 'AMeatballVehicle_L_C::LootTossMin' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, bEnableWeapons) == 0x002350, "Member 'AMeatballVehicle_L_C::bEnableWeapons' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, OnHitShake) == 0x002378, "Member 'AMeatballVehicle_L_C::OnHitShake' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, OnBigHitShake) == 0x002380, "Member 'AMeatballVehicle_L_C::OnBigHitShake' has a wrong offset!");

}

