#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ValetRuntime

#include "Basic.hpp"

#include "GameplayTags_0_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum ValetRuntime.ETireStates
// NumValues: 0x0003
enum class ETireStates : uint8
{
	Default                                  = 0,
	Popped                                   = 1,
	ETireStates_MAX                          = 2,
};

// Enum ValetRuntime.ETireSurfaces
// NumValues: 0x0006
enum class ETireSurfaces : uint8
{
	Road                                     = 0,
	Dirt                                     = 1,
	Grass                                    = 2,
	Air                                      = 3,
	Water                                    = 4,
	ETireSurfaces_MAX                        = 5,
};

// Enum ValetRuntime.EFortDagwoodSimEvent
// NumValues: 0x0009
enum class EFortDagwoodSimEvent : uint8
{
	EnterLandscape                           = 0,
	ExitLandscape                            = 1,
	EnterRoad                                = 2,
	ExitRoad                                 = 3,
	Explode                                  = 4,
	FlipImpact                               = 5,
	StartBoost                               = 6,
	FinishBoost                              = 7,
	EFortDagwoodSimEvent_MAX                 = 8,
};

// Enum ValetRuntime.EControlsPrototypes
// NumValues: 0x0005
enum class EControlsPrototypes : uint8
{
	CameraSteering                           = 0,
	NonCameraSteering                        = 1,
	HybridCameraSteering                     = 2,
	MaxCount                                 = 3,
	EControlsPrototypes_MAX                  = 4,
};

// Enum ValetRuntime.EPoppedTireReactionStates
// NumValues: 0x0008
enum class EPoppedTireReactionStates : uint8
{
	None                                     = 0,
	VeerLeft                                 = 1,
	VeerRight                                = 2,
	Wiggle                                   = 3,
	Yaw90                                    = 4,
	FlipPitch                                = 5,
	FlipRoll                                 = 6,
	EPoppedTireReactionStates_MAX            = 7,
};

// Enum ValetRuntime.ETireLocations
// NumValues: 0x0005
enum class ETireLocations : uint8
{
	FrontRight                               = 0,
	FrontLeft                                = 1,
	BackRight                                = 2,
	BackLeft                                 = 3,
	ETireLocations_MAX                       = 4,
};

// Enum ValetRuntime.EVehicleClass
// NumValues: 0x0005
enum class EVehicleClass : uint8
{
	Sedan                                    = 0,
	Sport                                    = 1,
	PickupTruck                              = 2,
	SemiTruck                                = 3,
	EVehicleClass_MAX                        = 4,
};

// ScriptStruct ValetRuntime.FortDagwoodCmd
// 0x0030 (0x0030 - 0x0000)
struct FFortDagwoodCmd final
{
public:
	float                                         ForwardAlpha;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightAlpha;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccelerationAlpha;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize100                 MovementDir;                                       // 0x0010(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bBoost : 1;                                        // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHandbrake : 1;                                    // 0x0028(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortDagwoodCmd) == 0x000008, "Wrong alignment on FFortDagwoodCmd");
static_assert(sizeof(FFortDagwoodCmd) == 0x000030, "Wrong size on FFortDagwoodCmd");
static_assert(offsetof(FFortDagwoodCmd, ForwardAlpha) == 0x000000, "Member 'FFortDagwoodCmd::ForwardAlpha' has a wrong offset!");
static_assert(offsetof(FFortDagwoodCmd, RightAlpha) == 0x000004, "Member 'FFortDagwoodCmd::RightAlpha' has a wrong offset!");
static_assert(offsetof(FFortDagwoodCmd, AccelerationAlpha) == 0x000008, "Member 'FFortDagwoodCmd::AccelerationAlpha' has a wrong offset!");
static_assert(offsetof(FFortDagwoodCmd, MovementDir) == 0x000010, "Member 'FFortDagwoodCmd::MovementDir' has a wrong offset!");

// ScriptStruct ValetRuntime.DagwoodInternal
// 0x00B8 (0x0138 - 0x0080)
struct FDagwoodInternal final : public FFortVehicleInternalPersistent
{
public:
	uint8                                         Pad_80[0xB8];                                      // 0x0080(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDagwoodInternal) == 0x000008, "Wrong alignment on FDagwoodInternal");
static_assert(sizeof(FDagwoodInternal) == 0x000138, "Wrong size on FDagwoodInternal");

// ScriptStruct ValetRuntime.DagwoodOutPersistent
// 0x0018 (0x0028 - 0x0010)
struct FDagwoodOutPersistent final : public FFortVehicleOutPersistent
{
public:
	bool                                          bOnRoad;                                           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnLandscape;                                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnDirt;                                           // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnVehicle;                                        // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBoosting;                                         // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ETireSurfaces>                         TireSurfaces;                                      // 0x0018(0x0010)(ZeroConstructor, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDagwoodOutPersistent) == 0x000008, "Wrong alignment on FDagwoodOutPersistent");
static_assert(sizeof(FDagwoodOutPersistent) == 0x000028, "Wrong size on FDagwoodOutPersistent");
static_assert(offsetof(FDagwoodOutPersistent, bOnRoad) == 0x000010, "Member 'FDagwoodOutPersistent::bOnRoad' has a wrong offset!");
static_assert(offsetof(FDagwoodOutPersistent, bOnLandscape) == 0x000011, "Member 'FDagwoodOutPersistent::bOnLandscape' has a wrong offset!");
static_assert(offsetof(FDagwoodOutPersistent, bOnDirt) == 0x000012, "Member 'FDagwoodOutPersistent::bOnDirt' has a wrong offset!");
static_assert(offsetof(FDagwoodOutPersistent, bOnVehicle) == 0x000013, "Member 'FDagwoodOutPersistent::bOnVehicle' has a wrong offset!");
static_assert(offsetof(FDagwoodOutPersistent, bBoosting) == 0x000014, "Member 'FDagwoodOutPersistent::bBoosting' has a wrong offset!");
static_assert(offsetof(FDagwoodOutPersistent, TireSurfaces) == 0x000018, "Member 'FDagwoodOutPersistent::TireSurfaces' has a wrong offset!");

// ScriptStruct ValetRuntime.DagwoodOutContinuous
// 0x0010 (0x0048 - 0x0038)
struct FDagwoodOutContinuous final : public FFortVehicleOutContinuous
{
public:
	uint8                                         Pad_38[0x10];                                      // 0x0038(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDagwoodOutContinuous) == 0x000008, "Wrong alignment on FDagwoodOutContinuous");
static_assert(sizeof(FDagwoodOutContinuous) == 0x000048, "Wrong size on FDagwoodOutContinuous");

// ScriptStruct ValetRuntime.DagwoodState_PT
// 0x01B0 (0x01B0 - 0x0000)
struct FDagwoodState_PT final
{
public:
	struct FDagwoodInternal                       internal;                                          // 0x0000(0x0138)(NativeAccessSpecifierPublic)
	struct FDagwoodOutPersistent                  OutPersistent;                                     // 0x0138(0x0028)(NativeAccessSpecifierPublic)
	struct FDagwoodOutContinuous                  OutContinuous;                                     // 0x0160(0x0048)(NativeAccessSpecifierPublic)
	bool                                          bOutValid;                                         // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDagwoodState_PT) == 0x000008, "Wrong alignment on FDagwoodState_PT");
static_assert(sizeof(FDagwoodState_PT) == 0x0001B0, "Wrong size on FDagwoodState_PT");
static_assert(offsetof(FDagwoodState_PT, internal) == 0x000000, "Member 'FDagwoodState_PT::internal' has a wrong offset!");
static_assert(offsetof(FDagwoodState_PT, OutPersistent) == 0x000138, "Member 'FDagwoodState_PT::OutPersistent' has a wrong offset!");
static_assert(offsetof(FDagwoodState_PT, OutContinuous) == 0x000160, "Member 'FDagwoodState_PT::OutContinuous' has a wrong offset!");
static_assert(offsetof(FDagwoodState_PT, bOutValid) == 0x0001A8, "Member 'FDagwoodState_PT::bOutValid' has a wrong offset!");

// ScriptStruct ValetRuntime.RuntimeBoostInfo
// 0x0018 (0x0018 - 0x0000)
struct FRuntimeBoostInfo final
{
public:
	uint8                                         bCanBoost : 1;                                     // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsesRechargeableBoost : 1;                        // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BoostPushForce;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostTopSpeedForceMultiplier;                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostTopSpeedMultiplier;                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RechargeableBoostRateOfRegen;                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RechargeableBoostRateOfUse;                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRuntimeBoostInfo) == 0x000004, "Wrong alignment on FRuntimeBoostInfo");
static_assert(sizeof(FRuntimeBoostInfo) == 0x000018, "Wrong size on FRuntimeBoostInfo");
static_assert(offsetof(FRuntimeBoostInfo, BoostPushForce) == 0x000004, "Member 'FRuntimeBoostInfo::BoostPushForce' has a wrong offset!");
static_assert(offsetof(FRuntimeBoostInfo, BoostTopSpeedForceMultiplier) == 0x000008, "Member 'FRuntimeBoostInfo::BoostTopSpeedForceMultiplier' has a wrong offset!");
static_assert(offsetof(FRuntimeBoostInfo, BoostTopSpeedMultiplier) == 0x00000C, "Member 'FRuntimeBoostInfo::BoostTopSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(FRuntimeBoostInfo, RechargeableBoostRateOfRegen) == 0x000010, "Member 'FRuntimeBoostInfo::RechargeableBoostRateOfRegen' has a wrong offset!");
static_assert(offsetof(FRuntimeBoostInfo, RechargeableBoostRateOfUse) == 0x000014, "Member 'FRuntimeBoostInfo::RechargeableBoostRateOfUse' has a wrong offset!");

// ScriptStruct ValetRuntime.RuntimeFuelInfo
// 0x000C (0x000C - 0x0000)
struct FRuntimeFuelInfo final
{
public:
	float                                         MaxFuel;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FuelPerSecondDriving;                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FuelPerSecondBoosting;                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRuntimeFuelInfo) == 0x000004, "Wrong alignment on FRuntimeFuelInfo");
static_assert(sizeof(FRuntimeFuelInfo) == 0x00000C, "Wrong size on FRuntimeFuelInfo");
static_assert(offsetof(FRuntimeFuelInfo, MaxFuel) == 0x000000, "Member 'FRuntimeFuelInfo::MaxFuel' has a wrong offset!");
static_assert(offsetof(FRuntimeFuelInfo, FuelPerSecondDriving) == 0x000004, "Member 'FRuntimeFuelInfo::FuelPerSecondDriving' has a wrong offset!");
static_assert(offsetof(FRuntimeFuelInfo, FuelPerSecondBoosting) == 0x000008, "Member 'FRuntimeFuelInfo::FuelPerSecondBoosting' has a wrong offset!");

// ScriptStruct ValetRuntime.RuntimeGearInfo
// 0x0010 (0x0010 - 0x0000)
struct FRuntimeGearInfo final
{
public:
	int32                                         GearIndex;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TopSpeed;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSpeed;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PushForce;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRuntimeGearInfo) == 0x000004, "Wrong alignment on FRuntimeGearInfo");
static_assert(sizeof(FRuntimeGearInfo) == 0x000010, "Wrong size on FRuntimeGearInfo");
static_assert(offsetof(FRuntimeGearInfo, GearIndex) == 0x000000, "Member 'FRuntimeGearInfo::GearIndex' has a wrong offset!");
static_assert(offsetof(FRuntimeGearInfo, TopSpeed) == 0x000004, "Member 'FRuntimeGearInfo::TopSpeed' has a wrong offset!");
static_assert(offsetof(FRuntimeGearInfo, MinSpeed) == 0x000008, "Member 'FRuntimeGearInfo::MinSpeed' has a wrong offset!");
static_assert(offsetof(FRuntimeGearInfo, PushForce) == 0x00000C, "Member 'FRuntimeGearInfo::PushForce' has a wrong offset!");

// ScriptStruct ValetRuntime.DagwoodRuntimeModifiers
// 0x0088 (0x0088 - 0x0000)
struct FDagwoodRuntimeModifiers final
{
public:
	struct FRuntimeBoostInfo                      BoostInfo;                                         // 0x0000(0x0018)(BlueprintVisible, Transient, NoDestructor, NativeAccessSpecifierPublic)
	struct FRuntimeFuelInfo                       FuelInfo;                                          // 0x0018(0x000C)(BlueprintVisible, Transient, NoDestructor, NativeAccessSpecifierPublic)
	struct FRuntimeSpringsInfo                    SpringsInfo;                                       // 0x0024(0x0020)(BlueprintVisible, Transient, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bDamageFriendlyVehicles;                           // 0x0044(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDamageOtherVehicles;                              // 0x0045(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDamageOwnVehicle;                                 // 0x0046(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDamageAllowedFromOtherVehicle;                    // 0x0047(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityMultiplier;                                 // 0x0048(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxInclineAngle;                                   // 0x004C(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTiltAngle;                                      // 0x0050(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRuntimeGearInfo>               GearInfos;                                         // 0x0058(0x0010)(BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TireModTag;                                        // 0x0068(0x0004)(BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TireModVersion;                                    // 0x006C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTireModAdjustsPosition;                           // 0x006D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SelfDestructTime;                                  // 0x0070(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTimeExplosion;                                  // 0x0074(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTimeZeroHealth;                                 // 0x0078(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTimeSelfDestructCleanup;                        // 0x007C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DataVersion;                                       // 0x0080(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDagwoodRuntimeModifiers) == 0x000008, "Wrong alignment on FDagwoodRuntimeModifiers");
static_assert(sizeof(FDagwoodRuntimeModifiers) == 0x000088, "Wrong size on FDagwoodRuntimeModifiers");
static_assert(offsetof(FDagwoodRuntimeModifiers, BoostInfo) == 0x000000, "Member 'FDagwoodRuntimeModifiers::BoostInfo' has a wrong offset!");
static_assert(offsetof(FDagwoodRuntimeModifiers, FuelInfo) == 0x000018, "Member 'FDagwoodRuntimeModifiers::FuelInfo' has a wrong offset!");
static_assert(offsetof(FDagwoodRuntimeModifiers, SpringsInfo) == 0x000024, "Member 'FDagwoodRuntimeModifiers::SpringsInfo' has a wrong offset!");
static_assert(offsetof(FDagwoodRuntimeModifiers, bDamageFriendlyVehicles) == 0x000044, "Member 'FDagwoodRuntimeModifiers::bDamageFriendlyVehicles' has a wrong offset!");
static_assert(offsetof(FDagwoodRuntimeModifiers, bDamageOtherVehicles) == 0x000045, "Member 'FDagwoodRuntimeModifiers::bDamageOtherVehicles' has a wrong offset!");
static_assert(offsetof(FDagwoodRuntimeModifiers, bDamageOwnVehicle) == 0x000046, "Member 'FDagwoodRuntimeModifiers::bDamageOwnVehicle' has a wrong offset!");
static_assert(offsetof(FDagwoodRuntimeModifiers, bDamageAllowedFromOtherVehicle) == 0x000047, "Member 'FDagwoodRuntimeModifiers::bDamageAllowedFromOtherVehicle' has a wrong offset!");
static_assert(offsetof(FDagwoodRuntimeModifiers, GravityMultiplier) == 0x000048, "Member 'FDagwoodRuntimeModifiers::GravityMultiplier' has a wrong offset!");
static_assert(offsetof(FDagwoodRuntimeModifiers, MaxInclineAngle) == 0x00004C, "Member 'FDagwoodRuntimeModifiers::MaxInclineAngle' has a wrong offset!");
static_assert(offsetof(FDagwoodRuntimeModifiers, MaxTiltAngle) == 0x000050, "Member 'FDagwoodRuntimeModifiers::MaxTiltAngle' has a wrong offset!");
static_assert(offsetof(FDagwoodRuntimeModifiers, GearInfos) == 0x000058, "Member 'FDagwoodRuntimeModifiers::GearInfos' has a wrong offset!");
static_assert(offsetof(FDagwoodRuntimeModifiers, TireModTag) == 0x000068, "Member 'FDagwoodRuntimeModifiers::TireModTag' has a wrong offset!");
static_assert(offsetof(FDagwoodRuntimeModifiers, TireModVersion) == 0x00006C, "Member 'FDagwoodRuntimeModifiers::TireModVersion' has a wrong offset!");
static_assert(offsetof(FDagwoodRuntimeModifiers, bTireModAdjustsPosition) == 0x00006D, "Member 'FDagwoodRuntimeModifiers::bTireModAdjustsPosition' has a wrong offset!");
static_assert(offsetof(FDagwoodRuntimeModifiers, SelfDestructTime) == 0x000070, "Member 'FDagwoodRuntimeModifiers::SelfDestructTime' has a wrong offset!");
static_assert(offsetof(FDagwoodRuntimeModifiers, MaxTimeExplosion) == 0x000074, "Member 'FDagwoodRuntimeModifiers::MaxTimeExplosion' has a wrong offset!");
static_assert(offsetof(FDagwoodRuntimeModifiers, MaxTimeZeroHealth) == 0x000078, "Member 'FDagwoodRuntimeModifiers::MaxTimeZeroHealth' has a wrong offset!");
static_assert(offsetof(FDagwoodRuntimeModifiers, MaxTimeSelfDestructCleanup) == 0x00007C, "Member 'FDagwoodRuntimeModifiers::MaxTimeSelfDestructCleanup' has a wrong offset!");
static_assert(offsetof(FDagwoodRuntimeModifiers, DataVersion) == 0x000080, "Member 'FDagwoodRuntimeModifiers::DataVersion' has a wrong offset!");

// ScriptStruct ValetRuntime.DagwoodInPersistent
// 0x00E8 (0x0258 - 0x0170)
struct FDagwoodInPersistent final : public FFortVehicleInPersistent
{
public:
	class UFortDagwoodVehicleConfigs*             FortDagwoodVehicleConfigs;                         // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDagwoodRuntimeModifiers               DagwoodRuntimeModifiedProperties;                  // 0x0178(0x0088)(NativeAccessSpecifierPublic)
	TArray<ETireStates>                           TireStates;                                        // 0x0200(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_210[0x48];                                     // 0x0210(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDagwoodInPersistent) == 0x000008, "Wrong alignment on FDagwoodInPersistent");
static_assert(sizeof(FDagwoodInPersistent) == 0x000258, "Wrong size on FDagwoodInPersistent");
static_assert(offsetof(FDagwoodInPersistent, FortDagwoodVehicleConfigs) == 0x000170, "Member 'FDagwoodInPersistent::FortDagwoodVehicleConfigs' has a wrong offset!");
static_assert(offsetof(FDagwoodInPersistent, DagwoodRuntimeModifiedProperties) == 0x000178, "Member 'FDagwoodInPersistent::DagwoodRuntimeModifiedProperties' has a wrong offset!");
static_assert(offsetof(FDagwoodInPersistent, TireStates) == 0x000200, "Member 'FDagwoodInPersistent::TireStates' has a wrong offset!");

// ScriptStruct ValetRuntime.ValetUpdateContext
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x04) FValetUpdateContext final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FValetUpdateContext) == 0x000004, "Wrong alignment on FValetUpdateContext");
static_assert(sizeof(FValetUpdateContext) == 0x000018, "Wrong size on FValetUpdateContext");

// ScriptStruct ValetRuntime.VehicleAttachment
// 0x0010 (0x0010 - 0x0000)
struct FVehicleAttachment final
{
public:
	class FName                                   ModName;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          SkeletalMesh;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleAttachment) == 0x000008, "Wrong alignment on FVehicleAttachment");
static_assert(sizeof(FVehicleAttachment) == 0x000010, "Wrong size on FVehicleAttachment");
static_assert(offsetof(FVehicleAttachment, ModName) == 0x000000, "Member 'FVehicleAttachment::ModName' has a wrong offset!");
static_assert(offsetof(FVehicleAttachment, SocketName) == 0x000004, "Member 'FVehicleAttachment::SocketName' has a wrong offset!");
static_assert(offsetof(FVehicleAttachment, SkeletalMesh) == 0x000008, "Member 'FVehicleAttachment::SkeletalMesh' has a wrong offset!");

// ScriptStruct ValetRuntime.DagwoodFutureClientInput
// 0x0038 (0x0038 - 0x0000)
struct FDagwoodFutureClientInput final
{
public:
	int32                                         Frame;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortDagwoodCmd                        InputCmd;                                          // 0x0008(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDagwoodFutureClientInput) == 0x000008, "Wrong alignment on FDagwoodFutureClientInput");
static_assert(sizeof(FDagwoodFutureClientInput) == 0x000038, "Wrong size on FDagwoodFutureClientInput");
static_assert(offsetof(FDagwoodFutureClientInput, Frame) == 0x000000, "Member 'FDagwoodFutureClientInput::Frame' has a wrong offset!");
static_assert(offsetof(FDagwoodFutureClientInput, InputCmd) == 0x000008, "Member 'FDagwoodFutureClientInput::InputCmd' has a wrong offset!");

// ScriptStruct ValetRuntime.DagwoodManagedState
// 0x0460 (0x0460 - 0x0000)
struct FDagwoodManagedState final
{
public:
	int32                                         Frame;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortDagwoodCmd                        InputCmd;                                          // 0x0008(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	struct FDagwoodInPersistent                   GT_State;                                          // 0x0038(0x0258)(NativeAccessSpecifierPublic)
	struct FDagwoodState_PT                       PT_State;                                          // 0x0290(0x01B0)(NativeAccessSpecifierPublic)
	class APlayerController*                      PC;                                                // 0x0440(0x0008)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_448[0x8];                                      // 0x0448(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDagwoodFutureClientInput>      FutureInputs;                                      // 0x0450(0x0010)(ZeroConstructor, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDagwoodManagedState) == 0x000008, "Wrong alignment on FDagwoodManagedState");
static_assert(sizeof(FDagwoodManagedState) == 0x000460, "Wrong size on FDagwoodManagedState");
static_assert(offsetof(FDagwoodManagedState, Frame) == 0x000000, "Member 'FDagwoodManagedState::Frame' has a wrong offset!");
static_assert(offsetof(FDagwoodManagedState, InputCmd) == 0x000008, "Member 'FDagwoodManagedState::InputCmd' has a wrong offset!");
static_assert(offsetof(FDagwoodManagedState, GT_State) == 0x000038, "Member 'FDagwoodManagedState::GT_State' has a wrong offset!");
static_assert(offsetof(FDagwoodManagedState, PT_State) == 0x000290, "Member 'FDagwoodManagedState::PT_State' has a wrong offset!");
static_assert(offsetof(FDagwoodManagedState, PC) == 0x000440, "Member 'FDagwoodManagedState::PC' has a wrong offset!");
static_assert(offsetof(FDagwoodManagedState, FutureInputs) == 0x000450, "Member 'FDagwoodManagedState::FutureInputs' has a wrong offset!");

// ScriptStruct ValetRuntime.DagwoodActionDefForUI
// 0x0010 (0x0010 - 0x0000)
struct FDagwoodActionDefForUI final
{
public:
	TArray<struct FActionDefForUI>                ActionDefForUI;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDagwoodActionDefForUI) == 0x000008, "Wrong alignment on FDagwoodActionDefForUI");
static_assert(sizeof(FDagwoodActionDefForUI) == 0x000010, "Wrong size on FDagwoodActionDefForUI");
static_assert(offsetof(FDagwoodActionDefForUI, ActionDefForUI) == 0x000000, "Member 'FDagwoodActionDefForUI::ActionDefForUI' has a wrong offset!");

// ScriptStruct ValetRuntime.TireSimulationRuntimeData
// 0x001C (0x001C - 0x0000)
struct FTireSimulationRuntimeData final
{
public:
	struct FRuntimeTerrainHandlingInfo            HandlingInfo;                                      // 0x0000(0x0010)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PoppedTireSpringLength;                            // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoppedTireSpringStiff;                             // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoppedTireSpringDamp;                              // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTireSimulationRuntimeData) == 0x000004, "Wrong alignment on FTireSimulationRuntimeData");
static_assert(sizeof(FTireSimulationRuntimeData) == 0x00001C, "Wrong size on FTireSimulationRuntimeData");
static_assert(offsetof(FTireSimulationRuntimeData, HandlingInfo) == 0x000000, "Member 'FTireSimulationRuntimeData::HandlingInfo' has a wrong offset!");
static_assert(offsetof(FTireSimulationRuntimeData, PoppedTireSpringLength) == 0x000010, "Member 'FTireSimulationRuntimeData::PoppedTireSpringLength' has a wrong offset!");
static_assert(offsetof(FTireSimulationRuntimeData, PoppedTireSpringStiff) == 0x000014, "Member 'FTireSimulationRuntimeData::PoppedTireSpringStiff' has a wrong offset!");
static_assert(offsetof(FTireSimulationRuntimeData, PoppedTireSpringDamp) == 0x000018, "Member 'FTireSimulationRuntimeData::PoppedTireSpringDamp' has a wrong offset!");

// ScriptStruct ValetRuntime.VehiclePropReplacementData
// 0x0058 (0x0058 - 0x0000)
struct FVehiclePropReplacementData final
{
public:
	TSoftObjectPtr<class UFortVehicleItemDefinition> FortVehicleItemDefinition;                         // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TransOffset;                                       // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotOffset;                                         // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehiclePropReplacementData) == 0x000008, "Wrong alignment on FVehiclePropReplacementData");
static_assert(sizeof(FVehiclePropReplacementData) == 0x000058, "Wrong size on FVehiclePropReplacementData");
static_assert(offsetof(FVehiclePropReplacementData, FortVehicleItemDefinition) == 0x000000, "Member 'FVehiclePropReplacementData::FortVehicleItemDefinition' has a wrong offset!");
static_assert(offsetof(FVehiclePropReplacementData, TransOffset) == 0x000028, "Member 'FVehiclePropReplacementData::TransOffset' has a wrong offset!");
static_assert(offsetof(FVehiclePropReplacementData, RotOffset) == 0x000040, "Member 'FVehiclePropReplacementData::RotOffset' has a wrong offset!");

}

