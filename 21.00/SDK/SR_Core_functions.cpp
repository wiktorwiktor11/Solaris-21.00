#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SR_Core

#include "Basic.hpp"

#include "SR_Core_classes.hpp"
#include "SR_Core_parameters.hpp"


namespace SDK
{

// Function SR_Core.SR_Core_C.ExecuteUbergraph_SR_Core
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USR_Core_C::ExecuteUbergraph_SR_Core(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SR_Core_C", "ExecuteUbergraph_SR_Core");

	Params::SR_Core_C_ExecuteUbergraph_SR_Core Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SR_Core.SR_Core_C.GetIsMixAllowed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    MixAllowed                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USR_Core_C::GetIsMixAllowed(bool* MixAllowed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SR_Core_C", "GetIsMixAllowed");

	Params::SR_Core_C_GetIsMixAllowed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MixAllowed != nullptr)
		*MixAllowed = Parms.MixAllowed;
}


// Function SR_Core.SR_Core_C.HandleADSStateUpdated
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Is_Targeting                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USR_Core_C::HandleADSStateUpdated(bool Is_Targeting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SR_Core_C", "HandleADSStateUpdated");

	Params::SR_Core_C_HandleADSStateUpdated Parms{};

	Parms.Is_Targeting = Is_Targeting;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SR_Core.SR_Core_C.HandleOnSourcePlayed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStreamingRadioPlayerComponent*   Component                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FAthenaRadioStation              AffectedSource                                         (BlueprintVisible, BlueprintReadOnly, Parm)

void USR_Core_C::HandleOnSourcePlayed(class UStreamingRadioPlayerComponent* Component, const struct FAthenaRadioStation& AffectedSource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SR_Core_C", "HandleOnSourcePlayed");

	Params::SR_Core_C_HandleOnSourcePlayed Parms{};

	Parms.Component = Component;
	Parms.AffectedSource = std::move(AffectedSource);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SR_Core.SR_Core_C.HandleSeatStateUpdated
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AFortPawn*                        Pawn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Entering                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SeatIdx                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USR_Core_C::HandleSeatStateUpdated(class AFortPawn* Pawn, bool Entering, int32 SeatIdx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SR_Core_C", "HandleSeatStateUpdated");

	Params::SR_Core_C_HandleSeatStateUpdated Parms{};

	Parms.Pawn = Pawn;
	Parms.Entering = Entering;
	Parms.SeatIdx = SeatIdx;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SR_Core.SR_Core_C.HandleWeaponStateUpdated
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AFortWeapon*                      NewWeapon                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AFortWeapon*                      PrevWeapon                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USR_Core_C::HandleWeaponStateUpdated(class AFortWeapon* NewWeapon, class AFortWeapon* PrevWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SR_Core_C", "HandleWeaponStateUpdated");

	Params::SR_Core_C_HandleWeaponStateUpdated Parms{};

	Parms.NewWeapon = NewWeapon;
	Parms.PrevWeapon = PrevWeapon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SR_Core.SR_Core_C.OnPawnEnterSeat
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// TScriptInterface<class IFortVehicleInterface>Vehicle                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class AFortPawn*                        PlayerPawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SeatIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USR_Core_C::OnPawnEnterSeat(const TScriptInterface<class IFortVehicleInterface>& Vehicle, class AFortPawn* PlayerPawn, int32 SeatIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SR_Core_C", "OnPawnEnterSeat");

	Params::SR_Core_C_OnPawnEnterSeat Parms{};

	Parms.Vehicle = Vehicle;
	Parms.PlayerPawn = PlayerPawn;
	Parms.SeatIndex = SeatIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SR_Core.SR_Core_C.OnPawnExitSeat
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// TScriptInterface<class IFortVehicleInterface>Vehicle                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class AFortPawn*                        PlayerPawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SeatIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USR_Core_C::OnPawnExitSeat(const TScriptInterface<class IFortVehicleInterface>& Vehicle, class AFortPawn* PlayerPawn, int32 SeatIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SR_Core_C", "OnPawnExitSeat");

	Params::SR_Core_C_OnPawnExitSeat Parms{};

	Parms.Vehicle = Vehicle;
	Parms.PlayerPawn = PlayerPawn;
	Parms.SeatIndex = SeatIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SR_Core.SR_Core_C.UpdateMixState
// (Public, BlueprintCallable, BlueprintEvent)

void USR_Core_C::UpdateMixState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SR_Core_C", "UpdateMixState");

	UObject::ProcessEvent(Func, nullptr);
}

}

