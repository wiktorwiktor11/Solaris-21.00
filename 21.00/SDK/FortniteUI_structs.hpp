#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FortniteUI

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameSubCatalog_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CommonUI_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_0_structs.hpp"
#include "CommonInput_structs.hpp"
#include "Slate_structs.hpp"
#include "FortniteAI_structs.hpp"
#include "UMG_structs.hpp"
#include "GameplayMessages_structs.hpp"
#include "JsonUtilities_structs.hpp"


namespace SDK
{

// Enum FortniteUI.EFortUIFeature
// NumValues: 0x003F
enum class EFortUIFeature : uint8
{
	ShowHome                                 = 0,
	ShowPlay                                 = 1,
	ShowCommand                              = 2,
	ShowHeros                                = 3,
	ShowSquads                               = 4,
	ShowArmory                               = 5,
	ShowLocker                               = 6,
	ShowSkillTree                            = 7,
	ShowStore                                = 8,
	ShowQuests                               = 9,
	ShowMainStore                            = 10,
	ShowContextHelpMenu                      = 11,
	ShowCampaign                             = 12,
	ShowActiveBoost                          = 13,
	ShowJournal                              = 14,
	ShowPartyBar                             = 15,
	ShowChatWindow                           = 16,
	ShowFriendsMenu                          = 17,
	ShowObjectives                           = 18,
	ShowRatingIconsInTopbar                  = 19,
	ShowAntiAddictionMessage                 = 20,
	ShowMinorShutdownMessage                 = 21,
	ShowHealthWarningScreen                  = 22,
	ShowSimplifiedHUD                        = 23,
	LargeHeaderFooterButtons                 = 24,
	ShowAthenaFavoriting                     = 25,
	ShowAthenaItemRandomization              = 26,
	ShowBattlePass                           = 27,
	ShowNewBattlePass                        = 28,
	ShowDynamicBattlePass                    = 29,
	ShowBattlePassFAQ                        = 30,
	ShowReplays                              = 31,
	ShowProfileStatsUI                       = 32,
	ShowAthenaItemShop                       = 33,
	ShowNewAthenaItemShop                    = 34,
	ShowAthenaCataba                         = 35,
	ShowShowdown                             = 36,
	ShowSpecialEvent                         = 37,
	ShowSpatialUI                            = 38,
	ShowSocial                               = 39,
	ShowAccountBoosts                        = 40,
	ShowCustomerSupport                      = 41,
	ShowGlobalChat                           = 42,
	ShowEULA                                 = 43,
	ShowEndOfZoneCinematic                   = 44,
	ShowOnboardingCinematics                 = 45,
	ShowFounderBannerIcons                   = 46,
	ShowCurrentRegionInLobby                 = 47,
	ShowPrerollLlamas                        = 48,
	EnableFoundersDailyRewards               = 49,
	EnableTwitchIntegration                  = 50,
	EnableMatchmakingRegionSetting           = 51,
	EnableLanguageSetting                    = 52,
	EnableFriendCodeSetting                  = 53,
	EnableEarlyAccessLoadingScreenBanner     = 54,
	EnableAlterationModifications            = 55,
	EnableSchematicRarityUpgrade             = 56,
	EnableMissionActivationVote              = 57,
	EnableLtmRetrieveTheData                 = 58,
	EnableUpgradesVideos                     = 59,
	ShowPreviewTestTab                       = 60,
	Max_None                                 = 61,
	EFortUIFeature_MAX                       = 62,
};

// Enum FortniteUI.EFortFrontEndFeatureStateReason
// NumValues: 0x0008
enum class EFortFrontEndFeatureStateReason : uint8
{
	Default                                  = 0,
	NoHeroes                                 = 1,
	Tutorial                                 = 2,
	BROnly                                   = 3,
	NoPlayerController                       = 4,
	UnexpectedFeature                        = 5,
	Invalid                                  = 6,
	EFortFrontEndFeatureStateReason_MAX      = 7,
};

// Enum FortniteUI.EFortFrontEndFeatureState
// NumValues: 0x0005
enum class EFortFrontEndFeatureState : uint8
{
	Enabled                                  = 0,
	Disabled                                 = 1,
	Hidden                                   = 2,
	Invalid                                  = 3,
	EFortFrontEndFeatureState_MAX            = 4,
};

// Enum FortniteUI.EFortFrontEndFeature
// NumValues: 0x000D
enum class EFortFrontEndFeature : uint8
{
	ShowHomeBase                             = 0,
	ShowHeroList                             = 1,
	ShowVault                                = 2,
	ShowStore                                = 3,
	PlayZone                                 = 4,
	ShowDailyRewards                         = 5,
	ShowHeroSelect                           = 6,
	RecruitHero                              = 7,
	ShowHomeBaseOverview                     = 8,
	STWArmory_Transform                      = 9,
	STWArmory_CollectionBook                 = 10,
	MAX_None                                 = 11,
	EFortFrontEndFeature_MAX                 = 12,
};

// Enum FortniteUI.EFortItemCooldownType
// NumValues: 0x0008
enum class EFortItemCooldownType : uint8
{
	None                                     = 0,
	AmmoRegeneration                         = 1,
	ItemActivation                           = 2,
	WeaponReloading                          = 3,
	Death                                    = 4,
	AthenaWeaponFireCooldown                 = 5,
	AbilitySetActivateByInputAbility         = 6,
	EFortItemCooldownType_MAX                = 7,
};

// Enum FortniteUI.EFortBuildingInteraction
// NumValues: 0x0009
enum class EFortBuildingInteraction : uint8
{
	None                                     = 0,
	Build                                    = 1,
	Repair                                   = 2,
	Upgrade                                  = 3,
	Edit                                     = 4,
	BeingModified                            = 5,
	ConfirmEdit                              = 6,
	Creative                                 = 7,
	EFortBuildingInteraction_MAX             = 8,
};

// Enum FortniteUI.EFortBuildingHealthDisplayRule
// NumValues: 0x0004
enum class EFortBuildingHealthDisplayRule : uint8
{
	Never                                    = 0,
	Allowed                                  = 1,
	Always                                   = 2,
	EFortBuildingHealthDisplayRule_MAX       = 3,
};

// Enum FortniteUI.EFortHitPointModificationReason
// NumValues: 0x0007
enum class EFortHitPointModificationReason : uint8
{
	Invalid                                  = 0,
	InitalSet                                = 1,
	AutoRegen                                = 2,
	ItemRegen                                = 3,
	DamageOverTime                           = 4,
	DamageReceived                           = 5,
	EFortHitPointModificationReason_MAX      = 6,
};

// Enum FortniteUI.EFortStoreState
// NumValues: 0x0014
enum class EFortStoreState : uint8
{
	Error                                    = 0,
	Closed                                   = 1,
	CardPackStore                            = 2,
	CurrencyStore                            = 3,
	WebPayment                               = 4,
	PurchaseOpen                             = 5,
	PackOpen                                 = 6,
	CardEnter                                = 7,
	CardBackReveal                           = 8,
	CardFlip                                 = 9,
	CardFrontReveal                          = 10,
	CardExit                                 = 11,
	SummaryAdd                               = 12,
	PackDestroy                              = 13,
	Summary                                  = 14,
	PresentChoice                            = 15,
	ChoiceMade                               = 16,
	SummaryAddTransition                     = 17,
	MAX_None                                 = 18,
	EFortStoreState_MAX                      = 19,
};

// Enum FortniteUI.EFortUIFeatureStateReason
// NumValues: 0x000A
enum class EFortUIFeatureStateReason : uint8
{
	Default                                  = 0,
	Tutorial                                 = 1,
	ContentInstall                           = 2,
	AccountRestrictions                      = 3,
	Platform                                 = 4,
	SeasonOrEventNotActive                   = 5,
	NoPlayerController                       = 6,
	UnexpectedFeature                        = 7,
	Invalid                                  = 8,
	EFortUIFeatureStateReason_MAX            = 9,
};

// Enum FortniteUI.EFortUIFeatureState
// NumValues: 0x0005
enum class EFortUIFeatureState : uint8
{
	Enabled                                  = 0,
	Disabled                                 = 1,
	Hidden                                   = 2,
	Invalid                                  = 3,
	EFortUIFeatureState_MAX                  = 4,
};

// Enum FortniteUI.EChallengeListEntryType
// NumValues: 0x0009
enum class EChallengeListEntryType : uint8
{
	GoalCard                                 = 0,
	Header                                   = 1,
	Normal                                   = 2,
	Replace                                  = 3,
	PartyUp                                  = 4,
	LockedQuest                              = 5,
	AllQuestsComplete                        = 6,
	CustomMessage                            = 7,
	EChallengeListEntryType_MAX              = 8,
};

// Enum FortniteUI.EPostGameHUDMode
// NumValues: 0x0005
enum class EPostGameHUDMode : uint8
{
	None                                     = 0,
	AllHidden                                = 1,
	Spectating                               = 2,
	AllHiddenExceptXP                        = 3,
	EPostGameHUDMode_MAX                     = 4,
};

// Enum FortniteUI.EPostGameClickCatcherMode
// NumValues: 0x0005
enum class EPostGameClickCatcherMode : uint8
{
	Catch_None                               = 0,
	Catch_MobileOnly                         = 1,
	Catch_MouseOnly                          = 2,
	Catch_All                                = 3,
	Catch_MAX                                = 4,
};

// Enum FortniteUI.EInputPriority
// NumValues: 0x0008
enum class EInputPriority : uint8
{
	Normal                                   = 0,
	Menu                                     = 1,
	Chat                                     = 2,
	Modal                                    = 3,
	Confirmation                             = 4,
	Error                                    = 5,
	HUD                                      = 6,
	EInputPriority_MAX                       = 7,
};

// Enum FortniteUI.EFlagStatus
// NumValues: 0x0003
enum class EFlagStatus : uint8
{
	FlagPresent                              = 0,
	FlagNotPresent                           = 1,
	EFlagStatus_MAX                          = 2,
};

// Enum FortniteUI.EFortInputMode
// NumValues: 0x0004
enum class EFortInputMode : uint8
{
	Frontend                                 = 0,
	InGame                                   = 1,
	InGameCursor                             = 2,
	EFortInputMode_MAX                       = 3,
};

// Enum FortniteUI.EFortUrlType
// NumValues: 0x0005
enum class EFortUrlType : uint8
{
	NormalWebLink                            = 0,
	AccountCreationLink                      = 1,
	HelpLink                                 = 2,
	EULALink                                 = 3,
	EFortUrlType_MAX                         = 4,
};

// Enum FortniteUI.EGridSortKind
// NumValues: 0x0006
enum class EGridSortKind : uint8
{
	None                                     = 0,
	ByNumber                                 = 1,
	ByString                                 = 2,
	ByNumberThenString                       = 3,
	ByStringThenNumber                       = 4,
	EGridSortKind_MAX                        = 5,
};

// Enum FortniteUI.EHeroLoadoutSlotType
// NumValues: 0x0005
enum class EHeroLoadoutSlotType : uint8
{
	CommanderSlot                            = 0,
	TeamPerkSlot                             = 1,
	CrewSlot                                 = 2,
	GadgetSlot                               = 3,
	EHeroLoadoutSlotType_MAX                 = 4,
};

// Enum FortniteUI.EFortItemCardSize
// NumValues: 0x0009
enum class EFortItemCardSize : uint8
{
	XXS                                      = 0,
	XS                                       = 1,
	Wide_S                                   = 2,
	S                                        = 3,
	M                                        = 4,
	L                                        = 5,
	XL                                       = 6,
	XXL                                      = 7,
	EFortItemCardSize_MAX                    = 8,
};

// Enum FortniteUI.EFortPlayerPowerRatingType
// NumValues: 0x0005
enum class EFortPlayerPowerRatingType : uint8
{
	Auto                                     = 0,
	Campaign                                 = 1,
	Phoenix                                  = 2,
	Max_None                                 = 3,
	EFortPlayerPowerRatingType_MAX           = 4,
};

// Enum FortniteUI.EFortUISpecialEvents
// NumValues: 0x0003
enum class EFortUISpecialEvents : uint8
{
	NoEvent                                  = 0,
	FritTemp                                 = 1,
	EFortUISpecialEvents_MAX                 = 2,
};

// Enum FortniteUI.EAvailableSquadSlotsListEntryState
// NumValues: 0x0003
enum class EAvailableSquadSlotsListEntryState : uint8
{
	Detailed                                 = 0,
	Simplified                               = 1,
	EAvailableSquadSlotsListEntryState_MAX   = 2,
};

// Enum FortniteUI.EBattleMapTimelineWidgetState
// NumValues: 0x0008
enum class EBattleMapTimelineWidgetState : uint8
{
	None                                     = 0,
	HasNext                                  = 1,
	HasPrevious                              = 2,
	IsInReplay                               = 4,
	CanBeScrubbed                            = 8,
	IsStreaming                              = 16,
	Invalid                                  = 32,
	EBattleMapTimelineWidgetState_MAX        = 33,
};

// Enum FortniteUI.ECrewDetailsTag
// NumValues: 0x0007
enum class ECrewDetailsTag : uint8
{
	SeasonLaunchBenefit                      = 0,
	MonthlyBenefit                           = 1,
	CrewMonthBenefit                         = 2,
	AvailableUntilBenefit                    = 3,
	MonthlySubscription                      = 4,
	None                                     = 5,
	ECrewDetailsTag_MAX                      = 6,
};

// Enum FortniteUI.ECrewTileType
// NumValues: 0x0006
enum class ECrewTileType : uint8
{
	None                                     = 0,
	Basic                                    = 1,
	BattlePass                               = 2,
	CrewPack                                 = 3,
	ProgressiveCosmetic                      = 4,
	ECrewTileType_MAX                        = 5,
};

// Enum FortniteUI.ECountdownDisplay
// NumValues: 0x0005
enum class ECountdownDisplay : uint8
{
	EventEndTime                             = 0,
	ChallengeUnlockTime                      = 1,
	ChallengeBundleUnlockTime                = 2,
	UnlockAlreadySet                         = 3,
	MAX                                      = 4,
};

// Enum FortniteUI.EChallengeListSection
// NumValues: 0x0007
enum class EChallengeListSection : uint8
{
	SpecialOffers                            = 0,
	CompletionRewards                        = 1,
	AllChallenges                            = 2,
	FreeChallenges                           = 3,
	PaidChallenges                           = 4,
	Objectives                               = 5,
	EChallengeListSection_MAX                = 6,
};

// Enum FortniteUI.ELocationEntryState
// NumValues: 0x0004
enum class ELocationEntryState : uint8
{
	Found                                    = 0,
	NotFound                                 = 1,
	Unused                                   = 2,
	ELocationEntryState_MAX                  = 3,
};

// Enum FortniteUI.EAthenaConfirmationResult
// NumValues: 0x0005
enum class EAthenaConfirmationResult : uint8
{
	Confirmed                                = 0,
	Declined                                 = 1,
	Canceled                                 = 2,
	Max_NONE                                 = 3,
	EAthenaConfirmationResult_MAX            = 4,
};

// Enum FortniteUI.EEquippedWeaponDisplay
// NumValues: 0x0006
enum class EEquippedWeaponDisplay : uint8
{
	None                                     = 0,
	Resource                                 = 1,
	Magazine                                 = 2,
	Utility                                  = 3,
	Chargeable                               = 4,
	EEquippedWeaponDisplay_MAX               = 5,
};

// Enum FortniteUI.EAthenaEventMatchInfoSortMethod
// NumValues: 0x0004
enum class EAthenaEventMatchInfoSortMethod : uint8
{
	Eliminations                             = 0,
	Place                                    = 1,
	Count                                    = 2,
	EAthenaEventMatchInfoSortMethod_MAX      = 3,
};

// Enum FortniteUI.EQuestCategoryButtonTimerState
// NumValues: 0x0005
enum class EQuestCategoryButtonTimerState : uint8
{
	Countdown                                = 0,
	Custom                                   = 1,
	Disabled                                 = 2,
	None                                     = 3,
	EQuestCategoryButtonTimerState_MAX       = 4,
};

// Enum FortniteUI.EAthenaGameFeatureStatus
// NumValues: 0x0004
enum class EAthenaGameFeatureStatus : uint8
{
	InProgress                               = 0,
	ProgressPaused                           = 1,
	ErrorOccured                             = 2,
	EAthenaGameFeatureStatus_MAX             = 3,
};

// Enum FortniteUI.EAthenaPlayerActionAlert
// NumValues: 0x0006
enum class EAthenaPlayerActionAlert : uint8
{
	PlayerDown                               = 0,
	PlayerKill                               = 1,
	EnteredStorm                             = 2,
	NewZebulonDrone                          = 3,
	NewZebulonDroneYou                       = 4,
	EAthenaPlayerActionAlert_MAX             = 5,
};

// Enum FortniteUI.EItemShopCurrency
// NumValues: 0x0003
enum class EItemShopCurrency : uint8
{
	VBucks                                   = 0,
	RealMOney                                = 1,
	EItemShopCurrency_MAX                    = 2,
};

// Enum FortniteUI.EItemShopTileSize
// NumValues: 0x0006
enum class EItemShopTileSize : uint8
{
	Mini                                     = 0,
	Small                                    = 1,
	Normal                                   = 2,
	DoubleWide                               = 3,
	TripleWide                               = 4,
	Max                                      = 5,
};

// Enum FortniteUI.EViolatorIntensity
// NumValues: 0x0004
enum class EViolatorIntensity : uint8
{
	Low                                      = 0,
	Medium                                   = 1,
	High                                     = 2,
	EViolatorIntensity_MAX                   = 3,
};

// Enum FortniteUI.EFortAthenaPlaylist
// NumValues: 0x0004
enum class EFortAthenaPlaylist : uint8
{
	AthenaSolo                               = 0,
	AthenaDuo                                = 1,
	AthenaSquad                              = 2,
	EFortAthenaPlaylist_MAX                  = 3,
};

// Enum FortniteUI.EAthenaLockerInfoRestrictionWarning
// NumValues: 0x0005
enum class EAthenaLockerInfoRestrictionWarning : uint8
{
	UnsatisfiedExclusiveItem                 = 0,
	LockedEmote                              = 1,
	CosmeticRestriction                      = 2,
	Unknown                                  = 3,
	EAthenaLockerInfoRestrictionWarning_MAX  = 4,
};

// Enum FortniteUI.EAtheaMapTabType
// NumValues: 0x0007
enum class EAtheaMapTabType : uint8
{
	Invalid                                  = 0,
	Quest                                    = 1,
	Map                                      = 2,
	Collection                               = 3,
	CreativeScoreboard                       = 4,
	CreativeCareerScoreboard                 = 5,
	EAtheaMapTabType_MAX                     = 6,
};

// Enum FortniteUI.EFortMarkerActions
// NumValues: 0x0004
enum class EFortMarkerActions : uint8
{
	None                                     = 0,
	Cancel                                   = 1,
	Confirm                                  = 2,
	EFortMarkerActions_MAX                   = 3,
};

// Enum FortniteUI.EMinigameActivityWidgetStatFormat
// NumValues: 0x0006
enum class EMinigameActivityWidgetStatFormat : uint8
{
	Score                                    = 0,
	Time                                     = 1,
	AddTime                                  = 2,
	Distance                                 = 3,
	Laps                                     = 4,
	EMinigameActivityWidgetStatFormat_MAX    = 5,
};

// Enum FortniteUI.EAthenaNewsEntryType
// NumValues: 0x0013
enum class EAthenaNewsEntryType : uint8
{
	Text                                     = 0,
	Item                                     = 1,
	Website                                  = 2,
	NavigateToTab                            = 3,
	Challenge                                = 4,
	Playlist                                 = 5,
	Setting                                  = 6,
	SpatialScreen                            = 7,
	SmallNews                                = 8,
	NavigateToBattlePassSubPage              = 9,
	Creative                                 = 10,
	NavigateToSubscriptionSubPage            = 11,
	ProgressiveItemLearnMore                 = 12,
	ProgressiveItemReminder                  = 13,
	ProgressiveItemClaimRewards              = 14,
	Event                                    = 15,
	Discovery                                = 16,
	Invalid                                  = 17,
	EAthenaNewsEntryType_MAX                 = 18,
};

// Enum FortniteUI.EAthenaNewsStyle
// NumValues: 0x0004
enum class EAthenaNewsStyle : uint8
{
	None                                     = 0,
	SpecialEvent                             = 1,
	SpecialEvent2                            = 2,
	EAthenaNewsStyle_MAX                     = 3,
};

// Enum FortniteUI.EHealthBarType
// NumValues: 0x0007
enum class EHealthBarType : uint8
{
	Health                                   = 0,
	Shield                                   = 1,
	Overshield                               = 2,
	Stamina                                  = 3,
	VehicleHealth                            = 4,
	SignalInStorm                            = 5,
	EHealthBarType_MAX                       = 6,
};

// Enum FortniteUI.EBPStatus
// NumValues: 0x0003
enum class EBPStatus : uint8
{
	UnpurchasedBP                            = 0,
	PurchasedBP                              = 1,
	EBPStatus_MAX                            = 2,
};

// Enum FortniteUI.EAthenaSquadListUpdateType
// NumValues: 0x0004
enum class EAthenaSquadListUpdateType : uint8
{
	None                                     = 0,
	CanResurrect                             = 1,
	FindResurrectChip                        = 2,
	EAthenaSquadListUpdateType_MAX           = 3,
};

// Enum FortniteUI.ERespawnUIState
// NumValues: 0x0004
enum class ERespawnUIState : uint8
{
	Hidden                                   = 0,
	ShowRespawnEnabled                       = 1,
	ShowRespawnDisabled                      = 2,
	ERespawnUIState_MAX                      = 3,
};

// Enum FortniteUI.ESpectatorBuildCountType
// NumValues: 0x0006
enum class ESpectatorBuildCountType : uint8
{
	BuildCount                               = 0,
	Wood                                     = 1,
	Stone                                    = 2,
	Metal                                    = 3,
	Gold                                     = 4,
	ESpectatorBuildCountType_MAX             = 5,
};

// Enum FortniteUI.ESpectatorMapPlayerListState
// NumValues: 0x0004
enum class ESpectatorMapPlayerListState : uint8
{
	Default                                  = 0,
	Irrelevant                               = 1,
	Eliminated                               = 2,
	ESpectatorMapPlayerListState_MAX         = 3,
};

// Enum FortniteUI.EAthenaSpectatorNameplateDistanceState
// NumValues: 0x0004
enum class EAthenaSpectatorNameplateDistanceState : uint8
{
	Near                                     = 0,
	MidDistance                              = 1,
	FurtherThanMaxDistance                   = 2,
	EAthenaSpectatorNameplateDistanceState_MAX = 3,
};

// Enum FortniteUI.EAthenaSpectatorNameplateDetailState
// NumValues: 0x0005
enum class EAthenaSpectatorNameplateDetailState : uint8
{
	High                                     = 0,
	Low                                      = 1,
	Arrow                                    = 2,
	Off                                      = 3,
	EAthenaSpectatorNameplateDetailState_MAX = 4,
};

// Enum FortniteUI.ESpectatorPlayerListSortMethod
// NumValues: 0x0007
enum class ESpectatorPlayerListSortMethod : uint8
{
	SquadId                                  = 0,
	PlayerName                               = 1,
	Eliminations                             = 2,
	EventScore                               = 3,
	State                                    = 4,
	Count                                    = 5,
	ESpectatorPlayerListSortMethod_MAX       = 6,
};

// Enum FortniteUI.EStormSurgeThresholdType
// NumValues: 0x0005
enum class EStormSurgeThresholdType : uint8
{
	None                                     = 0,
	Above                                    = 1,
	Below                                    = 2,
	Equal                                    = 3,
	EStormSurgeThresholdType_MAX             = 4,
};

// Enum FortniteUI.EFrontendVisibilityMode
// NumValues: 0x0008
enum class EFrontendVisibilityMode : uint8
{
	Normal                                   = 0,
	HideTopTabsOnly                          = 1,
	HideTopTabsOnlyWithoutBottomBar          = 2,
	OnlyBottom                               = 3,
	OnlyTop                                  = 4,
	OnlyTitleBar                             = 5,
	Empty                                    = 6,
	EFrontendVisibilityMode_MAX              = 7,
};

// Enum FortniteUI.EOptionalFlowSteps
// NumValues: 0x0016
enum class EOptionalFlowSteps : uint8
{
	TryShowMobileGuidedTutorial              = 0,
	TryPlaySeasonTrailer                     = 1,
	TryPlayBattlePassTrailer                 = 2,
	TryShowMOTDs                             = 3,
	TryShowNormalBanModal                    = 4,
	TryShowSocialBanModal                    = 5,
	TryShowMFAModal                          = 6,
	TryShowCrossplayDialog                   = 7,
	TryShowSocialImport                      = 8,
	TryShowSurveys                           = 9,
	TryShowFireModeModal                     = 10,
	TryShowBadMatchPopup                     = 11,
	TryShowMobileInGameAppRating             = 12,
	TryShowSamsungSensorWarning              = 13,
	TryShowBattlePassPurchaseScreen          = 14,
	TryShowMultipleSubscriptionsAlert        = 15,
	TryPushGiftingScreen                     = 16,
	TryPushMessagingScreen                   = 17,
	TryGoToBattlePassTab                     = 18,
	TryShowRefundTokenNotification           = 19,
	TryShowPriceChangeAcknowledgeNotification = 20,
	EOptionalFlowSteps_MAX                   = 21,
};

// Enum FortniteUI.EWinConditionParentType
// NumValues: 0x0004
enum class EWinConditionParentType : uint8
{
	None                                     = 0,
	Desktop                                  = 1,
	Mobile                                   = 2,
	EWinConditionParentType_MAX              = 3,
};

// Enum FortniteUI.EComboSlotType
// NumValues: 0x0006
enum class EComboSlotType : uint8
{
	Primary                                  = 0,
	Secondary                                = 1,
	Combo                                    = 2,
	Creative                                 = 3,
	COUNT                                    = 4,
	EComboSlotType_MAX                       = 5,
};

// Enum FortniteUI.EBacchusSignalQuality
// NumValues: 0x0005
enum class EBacchusSignalQuality : uint8
{
	None                                     = 0,
	Low                                      = 1,
	Medium                                   = 2,
	High                                     = 3,
	EBacchusSignalQuality_MAX                = 4,
};

// Enum FortniteUI.EBattleLabAlertType
// NumValues: 0x0004
enum class EBattleLabAlertType : uint8
{
	QuestComplete                            = 0,
	QuestGranted                             = 1,
	Reward                                   = 2,
	EBattleLabAlertType_MAX                  = 3,
};

// Enum FortniteUI.EBattlePassInputs
// NumValues: 0x0009
enum class EBattlePassInputs : uint8
{
	Back                                     = 0,
	ViewItem                                 = 1,
	PreviewAction                            = 2,
	ReplayTrailer                            = 3,
	ShowAbout                                = 4,
	BulkBuyRewards                           = 5,
	ShowAboutCustomization                   = 6,
	COUNT                                    = 7,
	EBattlePassInputs_MAX                    = 8,
};

// Enum FortniteUI.EBattlePassPurchaseButtonLayout
// NumValues: 0x0004
enum class EBattlePassPurchaseButtonLayout : uint8
{
	Normal                                   = 0,
	Bundle                                   = 1,
	Normal_PaysForSelf                       = 2,
	EBattlePassPurchaseButtonLayout_MAX      = 3,
};

// Enum FortniteUI.EBattlePassView
// NumValues: 0x0009
enum class EBattlePassView : uint8
{
	None                                     = 0,
	LandingPage                              = 1,
	RewardOverview                           = 2,
	ItemDetails                              = 3,
	BulkBuyRewards                           = 4,
	CharacterCustomizer                      = 5,
	BonusRewards                             = 6,
	Quests                                   = 7,
	EBattlePassView_MAX                      = 8,
};

// Enum FortniteUI.EBattlePassFeatures
// NumValues: 0x0009
enum class EBattlePassFeatures : uint8
{
	None                                     = 0,
	BuyBattlePass                            = 1,
	GiftBattlePass                           = 2,
	BuySubscription                          = 3,
	ViewDetails                              = 4,
	WatchVideo                               = 5,
	ShowAbout                                = 6,
	PurchaseResources                        = 7,
	EBattlePassFeatures_MAX                  = 8,
};

// Enum FortniteUI.EBattlePassCurrencyType
// NumValues: 0x0004
enum class EBattlePassCurrencyType : uint8
{
	BattleStar                               = 0,
	CustomSkin                               = 1,
	TOTAL_CURRENCIES                         = 2,
	EBattlePassCurrencyType_MAX              = 3,
};

// Enum FortniteUI.ERewardPageType
// NumValues: 0x0005
enum class ERewardPageType : uint8
{
	Reward                                   = 0,
	Quest                                    = 1,
	Bonus                                    = 2,
	Customization                            = 3,
	MAX                                      = 4,
};

// Enum FortniteUI.ECobaltStatusTeam
// NumValues: 0x0003
enum class ECobaltStatusTeam : uint8
{
	Ally                                     = 0,
	Enemy                                    = 1,
	MAX                                      = 255,
};

// Enum FortniteUI.EBracketNodeState
// NumValues: 0x0004
enum class EBracketNodeState : uint8
{
	LocalTeam                                = 0,
	EnemyTeam                                = 1,
	Neutral                                  = 2,
	EBracketNodeState_MAX                    = 3,
};

// Enum FortniteUI.ESurvivalObjectiveIconState
// NumValues: 0x0004
enum class ESurvivalObjectiveIconState : uint8
{
	None                                     = 0,
	Spawned                                  = 1,
	Destroyed                                = 2,
	ESurvivalObjectiveIconState_MAX          = 3,
};

// Enum FortniteUI.EDiscoCaptureUIState
// NumValues: 0x0006
enum class EDiscoCaptureUIState : uint8
{
	None                                     = 0,
	Hidden                                   = 1,
	Dance                                    = 2,
	Capturing                                = 3,
	Contested                                = 4,
	EDiscoCaptureUIState_MAX                 = 5,
};

// Enum FortniteUI.EDiscoCaptureIconState
// NumValues: 0x0006
enum class EDiscoCaptureIconState : uint8
{
	None                                     = 0,
	Hidden                                   = 1,
	Neutral                                  = 2,
	AllyCaptured                             = 3,
	EnemyCaptured                            = 4,
	EDiscoCaptureIconState_MAX               = 5,
};

// Enum FortniteUI.EDiscoCaptureProgressState
// NumValues: 0x0004
enum class EDiscoCaptureProgressState : uint8
{
	None                                     = 0,
	AllyProgress                             = 1,
	EnemyProgress                            = 2,
	EDiscoCaptureProgressState_MAX           = 3,
};

// Enum FortniteUI.EDiscoScoreProgressTypes
// NumValues: 0x0007
enum class EDiscoScoreProgressTypes : uint8
{
	None                                     = 0,
	ProgressSoundMild                        = 1,
	ProgressSoundMedium                      = 2,
	ProgressSoundStrong                      = 3,
	CountdownSoundNormal                     = 4,
	CountdownSoundStrong                     = 5,
	EDiscoScoreProgressTypes_MAX             = 6,
};

// Enum FortniteUI.EFortDonutIdleGameObject
// NumValues: 0x000A
enum class EFortDonutIdleGameObject : uint8
{
	UnsetObject                              = 0,
	Tree                                     = 1,
	Mound                                    = 2,
	SmallMound                               = 3,
	JumpPad                                  = 4,
	Torch                                    = 5,
	PeelMonster                              = 6,
	Chimichanga                              = 7,
	Arm                                      = 8,
	EFortDonutIdleGameObject_MAX             = 9,
};

// Enum FortniteUI.EEndOfMatchQuestCategoryType
// NumValues: 0x0003
enum class EEndOfMatchQuestCategoryType : uint8
{
	Completed                                = 0,
	InProgress                               = 1,
	EEndOfMatchQuestCategoryType_MAX         = 2,
};

// Enum FortniteUI.UFortActivatableVideoEvents
// NumValues: 0x0003
enum class EUFortActivatableVideoEvents : uint8
{
	Finished                                 = 0,
	Skipped                                  = 1,
	UFortActivatableVideoEvents_MAX          = 2,
};

// Enum FortniteUI.UFortActivatableVideoPanelEvents
// NumValues: 0x0003
enum class EUFortActivatableVideoPanelEvents : uint8
{
	Finished                                 = 0,
	Skipped                                  = 1,
	UFortActivatableVideoPanelEvents_MAX     = 2,
};

// Enum FortniteUI.EFortAlterationWidgetState
// NumValues: 0x0004
enum class EFortAlterationWidgetState : uint8
{
	Normal                                   = 0,
	Upgrade                                  = 1,
	Evolution                                = 2,
	EFortAlterationWidgetState_MAX           = 3,
};

// Enum FortniteUI.ESpectatorQueueType
// NumValues: 0x0004
enum class ESpectatorQueueType : uint8
{
	Invalid                                  = 0,
	Player                                   = 1,
	BroadcastSpectator                       = 2,
	ESpectatorQueueType_MAX                  = 3,
};

// Enum FortniteUI.EServerAccessSetting
// NumValues: 0x0004
enum class EServerAccessSetting : uint8
{
	Invalid                                  = 0,
	FriendsOfCurrentPlayers                  = 1,
	LeaderInviteOnly                         = 2,
	EServerAccessSetting_MAX                 = 3,
};

// Enum FortniteUI.EFillDisableReason
// NumValues: 0x0009
enum class EFillDisableReason : uint8
{
	Enabled                                  = 0,
	FillDisabledOnPlaylist                   = 1,
	NotPartyLeader                           = 2,
	AlreadyMatchmaking                       = 3,
	PartyTooSmall                            = 4,
	PartyTooBig                              = 5,
	InactiveTournament                       = 6,
	NoSplitscreen                            = 7,
	EFillDisableReason_MAX                   = 8,
};

// Enum FortniteUI.EFortAthenaRewardState
// NumValues: 0x0006
enum class EFortAthenaRewardState : uint8
{
	LevelAchieved                            = 0,
	Claimed                                  = 1,
	ForceLocked                              = 2,
	Owned                                    = 3,
	Max_None                                 = 4,
	EFortAthenaRewardState_MAX               = 5,
};

// Enum FortniteUI.ETutorialButtonInteractionType
// NumValues: 0x0003
enum class ETutorialButtonInteractionType : uint8
{
	Click                                    = 0,
	Press                                    = 1,
	ETutorialButtonInteractionType_MAX       = 2,
};

// Enum FortniteUI.EHighlightType
// NumValues: 0x0004
enum class EHighlightType : uint8
{
	ESquareHighlight                         = 0,
	ECircleHighlight_Big                     = 1,
	ECircleHighlight_Small                   = 2,
	EHighlightType_MAX                       = 3,
};

// Enum FortniteUI.EFortAthenaTutorialStep
// NumValues: 0x000E
enum class EFortAthenaTutorialStep : uint8
{
	Look                                     = 0,
	Move                                     = 1,
	Harvest                                  = 2,
	Clamber                                  = 3,
	Pickup                                   = 4,
	Shoot                                    = 5,
	Ambush                                   = 6,
	Heal                                     = 7,
	Build                                    = 8,
	Chest                                    = 9,
	Scoping                                  = 10,
	Completed                                = 11,
	Count                                    = 12,
	EFortAthenaTutorialStep_MAX              = 13,
};

// Enum FortniteUI.EFortAthenaTutorialSubstep
// NumValues: 0x0029
enum class EFortAthenaTutorialSubstep : uint8
{
	ScreenSwipeToLook                        = 0,
	ScreenFindMarker                         = 1,
	ScreenUseLeftStick                       = 2,
	ScreenMoveToBuilding                     = 3,
	ScreenJump                               = 4,
	ScreenCrouch                             = 5,
	ScreenReachMarker                        = 6,
	ScreenUsePickaxe                         = 7,
	ScreenReachClamber                       = 8,
	ScreenClamber                            = 9,
	ScreenReachPickUp                        = 10,
	ScreenPickUpItems                        = 11,
	ScreenEquipItem                          = 12,
	ScreenShootTargets                       = 13,
	ScreenReload                             = 14,
	ScreenReachLocation                      = 15,
	ScreenDefendYourself                     = 16,
	ScreenHealthAlert                        = 17,
	ScreenDestroyEnemies                     = 18,
	ScreenCollectLoot                        = 19,
	ScreenUseMedkit                          = 20,
	ScreenUseShield                          = 21,
	ScreenShieldInfo                         = 22,
	ScreenLookForChest                       = 23,
	ScreenChestFound                         = 24,
	ScreenSelectBuildMode                    = 25,
	ScreenShowMaterials                      = 26,
	ScreenShowBuildPieces                    = 27,
	ScreenSelectStairs                       = 28,
	ScreenPlaceStairs                        = 29,
	ScreenReachChest                         = 30,
	ScreenExitBuildMode                      = 31,
	ScreenLootChest                          = 32,
	ScreenCollectLootChest                   = 33,
	ScreenEquipRifle                         = 34,
	ScreenUseScope                           = 35,
	ScreenShootTargetsScoping                = 36,
	ScreenCompleted                          = 37,
	HealingInterrupted                       = 38,
	Count                                    = 39,
	EFortAthenaTutorialSubstep_MAX           = 40,
};

// Enum FortniteUI.EFortAthenaTutorialScreenExtraWidget
// NumValues: 0x0005
enum class EFortAthenaTutorialScreenExtraWidget : uint8
{
	None                                     = 0,
	DragToTurn                               = 1,
	Completed                                = 2,
	Count                                    = 3,
	EFortAthenaTutorialScreenExtraWidget_MAX = 4,
};

// Enum FortniteUI.EFuelTankState
// NumValues: 0x0004
enum class EFuelTankState : uint8
{
	Empty                                    = 0,
	LowFuel                                  = 1,
	RegularFuel                              = 2,
	EFuelTankState_MAX                       = 3,
};

// Enum FortniteUI.EFortMemberConnectionState
// NumValues: 0x0005
enum class EFortMemberConnectionState : uint8
{
	Open                                     = 0,
	Connecting                               = 1,
	Connected                                = 2,
	Invalid                                  = 3,
	EFortMemberConnectionState_MAX           = 4,
};

// Enum FortniteUI.EColorPickerType
// NumValues: 0x0004
enum class EColorPickerType : uint8
{
	Swatches                                 = 0,
	CustomColor                              = 1,
	Both                                     = 2,
	EColorPickerType_MAX                     = 3,
};

// Enum FortniteUI.EColorPickerColorRepresentation
// NumValues: 0x0004
enum class EColorPickerColorRepresentation : uint8
{
	HSV                                      = 0,
	RGB                                      = 1,
	Max_NONE                                 = 2,
	EColorPickerColorRepresentation_MAX      = 3,
};

// Enum FortniteUI.ELeaderboardDisplayType
// NumValues: 0x0003
enum class ELeaderboardDisplayType : uint8
{
	Default                                  = 0,
	Floating                                 = 1,
	ELeaderboardDisplayType_MAX              = 2,
};

// Enum FortniteUI.EFortLoadoutCardType
// NumValues: 0x0006
enum class EFortLoadoutCardType : uint8
{
	Items                                    = 0,
	RandomTile                               = 1,
	AddTile                                  = 2,
	AddPreviewItems                          = 3,
	Blank                                    = 4,
	EFortLoadoutCardType_MAX                 = 5,
};

// Enum FortniteUI.EFortCosmeticLoadoutScreenMode
// NumValues: 0x0003
enum class EFortCosmeticLoadoutScreenMode : uint8
{
	Browse                                   = 0,
	Save                                     = 1,
	EFortCosmeticLoadoutScreenMode_MAX       = 2,
};

// Enum FortniteUI.EFortCreativeItemType
// NumValues: 0x0007
enum class EFortCreativeItemType : uint8
{
	Chest                                    = 0,
	Item                                     = 1,
	Collection                               = 2,
	SubItems                                 = 3,
	DownloadOnDemand                         = 4,
	LevelManagement                          = 5,
	EFortCreativeItemType_MAX                = 6,
};

// Enum FortniteUI.EFortCreativeIslandLinkValidationResult
// NumValues: 0x0009
enum class EFortCreativeIslandLinkValidationResult : uint8
{
	Unknown                                  = 0,
	Success                                  = 1,
	IslandNotFound                           = 2,
	InvalidKeyTooShort                       = 3,
	InvalidKeyTooLong                        = 4,
	InvalidKeyCharacters                     = 5,
	IneligibleParty                          = 6,
	IslandPrivate                            = 7,
	EFortCreativeIslandLinkValidationResult_MAX = 8,
};

// Enum FortniteUI.EFortCreativeIslandLinkCategory
// NumValues: 0x0005
enum class EFortCreativeIslandLinkCategory : uint8
{
	Default                                  = 0,
	Favorite                                 = 1,
	Published                                = 2,
	Recent                                   = 3,
	EFortCreativeIslandLinkCategory_MAX      = 4,
};

// Enum FortniteUI.EFortCreativeIslandSelectTabType
// NumValues: 0x0003
enum class EFortCreativeIslandSelectTabType : uint8
{
	IslandCode                               = 0,
	ListView                                 = 1,
	EFortCreativeIslandSelectTabType_MAX     = 2,
};

// Enum FortniteUI.EFortContentBrowserQuickbarState
// NumValues: 0x0005
enum class EFortContentBrowserQuickbarState : uint8
{
	Disabled                                 = 0,
	Creative                                 = 1,
	Primary                                  = 2,
	Trap                                     = 3,
	EFortContentBrowserQuickbarState_MAX     = 4,
};

// Enum FortniteUI.EFortCreativeServerPrivacySetting
// NumValues: 0x0004
enum class EFortCreativeServerPrivacySetting : uint8
{
	Unknown                                  = 0,
	Private                                  = 1,
	Public                                   = 2,
	EFortCreativeServerPrivacySetting_MAX    = 3,
};

// Enum FortniteUI.EFortDefenderSlotType
// NumValues: 0x0004
enum class EFortDefenderSlotType : uint8
{
	Invalid                                  = 0,
	Defender                                 = 1,
	Weapon                                   = 2,
	EFortDefenderSlotType_MAX                = 3,
};

// Enum FortniteUI.EDownloadOnDemandErrorMessage
// NumValues: 0x0005
enum class EDownloadOnDemandErrorMessage : uint8
{
	ProjectLinkCodeFailedToResolve           = 0,
	ProjectLinkCodeAlreadyUsed               = 1,
	ProjectBeaconFailedToDownload            = 2,
	ProjectHasNoPlaysetsDownloadFailed       = 3,
	EDownloadOnDemandErrorMessage_MAX        = 4,
};

// Enum FortniteUI.EDynamicEntryPatternDirection
// NumValues: 0x0003
enum class EDynamicEntryPatternDirection : uint8
{
	FirstToLast                              = 0,
	LastToFirst                              = 1,
	EDynamicEntryPatternDirection_MAX        = 2,
};

// Enum FortniteUI.DateFormat
// NumValues: 0x0005
enum class EDateFormat : uint8
{
	CountdownTextual                         = 0,
	CountdownNumeric                         = 1,
	CountdownNumUnder12Hours                 = 2,
	Date                                     = 3,
	DateFormat_MAX                           = 4,
};

// Enum FortniteUI.EShareButtonType
// NumValues: 0x0004
enum class EShareButtonType : uint8
{
	IOS                                      = 0,
	Android                                  = 1,
	Generic                                  = 2,
	EShareButtonType_MAX                     = 3,
};

// Enum FortniteUI.EFortHeroPerkDisplayType
// NumValues: 0x0006
enum class EFortHeroPerkDisplayType : uint8
{
	CommanderPerk                            = 0,
	TeamPerk                                 = 1,
	ClassPerk                                = 2,
	StandardPerk                             = 3,
	Max_None                                 = 4,
	EFortHeroPerkDisplayType_MAX             = 5,
};

// Enum FortniteUI.EFortSupportPerkWidgetState
// NumValues: 0x0004
enum class EFortSupportPerkWidgetState : uint8
{
	Normal                                   = 0,
	Upgrade                                  = 1,
	Evolution                                = 2,
	EFortSupportPerkWidgetState_MAX          = 3,
};

// Enum FortniteUI.ECenterPopupMessageStateEnum
// NumValues: 0x0003
enum class ECenterPopupMessageStateEnum : uint8
{
	NotVisible                               = 0,
	WaitingForOutpostOwner                   = 1,
	ECenterPopupMessageStateEnum_MAX         = 2,
};

// Enum FortniteUI.EBuildingFocusType
// NumValues: 0x0005
enum class EBuildingFocusType : uint8
{
	Contextual                               = 0,
	Interactable                             = 1,
	Normal                                   = 2,
	Count                                    = 3,
	EBuildingFocusType_MAX                   = 4,
};

// Enum FortniteUI.EContextPositionPlatform
// NumValues: 0x0003
enum class EContextPositionPlatform : uint8
{
	NonMobile                                = 0,
	Mobile                                   = 1,
	EContextPositionPlatform_MAX             = 2,
};

// Enum FortniteUI.EVaultItemLimitStatus
// NumValues: 0x0005
enum class EVaultItemLimitStatus : uint8
{
	WellBelowCapacity                        = 0,
	NearCapacity                             = 1,
	AtCapacity                               = 2,
	OverCapacity                             = 3,
	EVaultItemLimitStatus_MAX                = 4,
};

// Enum FortniteUI.EItemRecyclingRestrictionReason
// NumValues: 0x0008
enum class EItemRecyclingRestrictionReason : uint8
{
	InnatelyUnrecyclable                     = 0,
	IsSlottedGroundOperative                 = 1,
	MissingCatalyst                          = 2,
	ItemOutOnExpedition                      = 3,
	InUseByCrafting                          = 4,
	MulchingNotAllowed                       = 5,
	IsSlottedAttributeWorker                 = 6,
	EItemRecyclingRestrictionReason_MAX      = 7,
};

// Enum FortniteUI.EItemRecyclingWarning
// NumValues: 0x0004
enum class EItemRecyclingWarning : uint8
{
	HighLevel                                = 0,
	HighRarity                               = 1,
	CanSlotInCollectionBook                  = 2,
	EItemRecyclingWarning_MAX                = 3,
};

// Enum FortniteUI.EConversionControlKeyRequest
// NumValues: 0x0004
enum class EConversionControlKeyRequest : uint8
{
	AllKeys                                  = 0,
	NonConsumableKeys                        = 1,
	ConsumableKeys                           = 2,
	EConversionControlKeyRequest_MAX         = 3,
};

// Enum FortniteUI.EFortItemCountStyle
// NumValues: 0x0004
enum class EFortItemCountStyle : uint8
{
	StackCount                               = 0,
	OverrideCount                            = 1,
	StackCountOverOverride                   = 2,
	EFortItemCountStyle_MAX                  = 3,
};

// Enum FortniteUI.EFortItemManagementMode
// NumValues: 0x0004
enum class EFortItemManagementMode : uint8
{
	Details                                  = 0,
	Comparison                               = 1,
	Mulch                                    = 2,
	EFortItemManagementMode_MAX              = 3,
};

// Enum FortniteUI.EPresentationMode
// NumValues: 0x0003
enum class EPresentationMode : uint8
{
	ItemList                                 = 0,
	VariantList                              = 1,
	EPresentationMode_MAX                    = 2,
};

// Enum FortniteUI.EItemContextAction
// NumValues: 0x0005
enum class EItemContextAction : uint8
{
	Equip                                    = 0,
	GoToBattlePassRewards                    = 1,
	GoToBattlePassCustomization              = 2,
	Count                                    = 3,
	EItemContextAction_MAX                   = 4,
};

// Enum FortniteUI.ESceneTransitionType
// NumValues: 0x0004
enum class ESceneTransitionType : uint8
{
	NoTransition                             = 0,
	Clockwise                                = 1,
	CounterClockwise                         = 2,
	ESceneTransitionType_MAX                 = 3,
};

// Enum FortniteUI.EFortKeybindForcedHoldStatus
// NumValues: 0x0004
enum class EFortKeybindForcedHoldStatus : uint8
{
	NoForcedHold                             = 0,
	ForcedHold                               = 1,
	NeverShowHold                            = 2,
	EFortKeybindForcedHoldStatus_MAX         = 3,
};

// Enum FortniteUI.EFortLegacySlateWidget
// NumValues: 0x0003
enum class EFortLegacySlateWidget : uint8
{
	None                                     = 0,
	Minimap                                  = 1,
	MAX                                      = 2,
};

// Enum FortniteUI.EFortModifiedStatus
// NumValues: 0x0004
enum class EFortModifiedStatus : uint8
{
	IsDefault                                = 0,
	IsModified                               = 1,
	Unsupported                              = 2,
	EFortModifiedStatus_MAX                  = 3,
};

// Enum FortniteUI.EFortMaterialProgressBarSection
// NumValues: 0x0006
enum class EFortMaterialProgressBarSection : uint8
{
	Primary                                  = 0,
	Secondary                                = 1,
	Tertiary                                 = 2,
	Negative                                 = 3,
	MAX_PROGRESS_BAR_SECTIONS                = 4,
	EFortMaterialProgressBarSection_MAX      = 5,
};

// Enum FortniteUI.EFortMaterialProgressBarSectionColorNumber
// NumValues: 0x0003
enum class EFortMaterialProgressBarSectionColorNumber : uint8
{
	Color1                                   = 0,
	Color2                                   = 1,
	EFortMaterialProgressBarSectionColorNumber_MAX = 2,
};

// Enum FortniteUI.EFortMaterialProgressBarSectionOverflowBehavior
// NumValues: 0x0003
enum class EFortMaterialProgressBarSectionOverflowBehavior : uint8
{
	PreserveValues                           = 0,
	ReverseCollapse                          = 1,
	EFortMaterialProgressBarSectionOverflowBehavior_MAX = 2,
};

// Enum FortniteUI.EFortMissionActivationWidgetState
// NumValues: 0x0005
enum class EFortMissionActivationWidgetState : uint8
{
	Default                                  = 0,
	StartObjective                           = 1,
	IncreaseDifficulty                       = 2,
	Invalid                                  = 3,
	EFortMissionActivationWidgetState_MAX    = 4,
};

// Enum FortniteUI.ETagComparisonType
// NumValues: 0x0006
enum class ETagComparisonType : uint8
{
	HasAny                                   = 0,
	HasAll                                   = 1,
	HasNone                                  = 2,
	HasAnyExact                              = 3,
	HasAllExact                              = 4,
	ETagComparisonType_MAX                   = 5,
};

// Enum FortniteUI.EActionBindingComparisonType
// NumValues: 0x0004
enum class EActionBindingComparisonType : uint8
{
	NoneBound                                = 0,
	AnyBound                                 = 1,
	AllBound                                 = 2,
	EActionBindingComparisonType_MAX         = 3,
};

// Enum FortniteUI.EFortFortMobileShareButtonOS
// NumValues: 0x0003
enum class EFortFortMobileShareButtonOS : uint8
{
	Android                                  = 0,
	iOS                                      = 1,
	EFortFortMobileShareButtonOS_MAX         = 2,
};

// Enum FortniteUI.EModalContainerSlot
// NumValues: 0x0005
enum class EModalContainerSlot : uint8
{
	Top                                      = 0,
	Middle                                   = 1,
	Bottom                                   = 2,
	Background                               = 3,
	Max                                      = 4,
};

// Enum FortniteUI.EFortMtxOfferDisplaySize
// NumValues: 0x0004
enum class EFortMtxOfferDisplaySize : uint8
{
	Small                                    = 0,
	Medium                                   = 1,
	Large                                    = 2,
	EFortMtxOfferDisplaySize_MAX             = 3,
};

// Enum FortniteUI.EFortMtxStoreOfferType
// NumValues: 0x0005
enum class EFortMtxStoreOfferType : uint8
{
	FoundersPack                             = 0,
	CurrencyPack                             = 1,
	Unknown                                  = 2,
	Max_None                                 = 3,
	EFortMtxStoreOfferType_MAX               = 4,
};

// Enum FortniteUI.EFortNotificationEntryCompletionStatus
// NumValues: 0x0004
enum class EFortNotificationEntryCompletionStatus : uint8
{
	New                                      = 0,
	Active                                   = 1,
	Completed                                = 2,
	MAX                                      = 3,
};

// Enum FortniteUI.ESettingType
// NumValues: 0x00A0
enum class ESettingType : uint8
{
	None                                     = 0,
	Header                                   = 1,
	WindowMode                               = 2,
	DisplayResolution                        = 3,
	FrameRateLimit                           = 4,
	VideoQuality                             = 5,
	ThreeDResolution                         = 6,
	ViewDistance                             = 7,
	Shadows                                  = 8,
	AntiAliasing                             = 9,
	Textures                                 = 10,
	Effects                                  = 11,
	PostProcessing                           = 12,
	VSync                                    = 13,
	MotionBlur                               = 14,
	ShowGrass                                = 15,
	MobileFPSType                            = 16,
	ShowFPS                                  = 17,
	AllowLowPower                            = 18,
	AllowVideoPlayback                       = 19,
	AllowDynamicResolution                   = 20,
	AllowMultithreadedRendering              = 21,
	RenderingAPI                             = 22,
	UseGPUCrashDebugging                     = 23,
	RegionHeader                             = 24,
	Language                                 = 25,
	Region                                   = 26,
	MouseSensitivityYaw                      = 27,
	MouseSensitivityPitch                    = 28,
	MouseSensitivityMultiplierForAircraft    = 29,
	TouchDragSensitivity                     = 30,
	ControllerLookSensitivityYaw             = 31,
	ControllerLookSensitivityPitch           = 32,
	MouseTargetingMultiplier                 = 33,
	MouseScopedMultiplier                    = 34,
	GamepadTargetingMultiplier               = 35,
	GamepadScopedMultiplier                  = 36,
	GamepadBuildingMultiplier                = 37,
	GamepadEditModeMultiplier                = 38,
	TouchLookAccelerationMultiplier          = 39,
	TouchDragTargetingSensitivity            = 40,
	TouchDragScopedSensitivity               = 41,
	TouchBuildingMultiplier                  = 42,
	TouchEditModeMultiplier                  = 43,
	TouchVerticalSensitivity                 = 44,
	InvertPitch                              = 45,
	InvertYaw                                = 46,
	InvertPitchForMotion                     = 47,
	InvertPitchForAircraftPrimary            = 48,
	InvertPitchForAircraftSecondary          = 49,
	InvertYawForMotion                       = 50,
	GyroEnabled                              = 51,
	GyroYawAxis                              = 52,
	GyroSensitivity                          = 53,
	GyroTargetingSensitivity                 = 54,
	GyroScopedSensitivity                    = 55,
	GyroHarvestingToolSensitivity            = 56,
	SafeZone                                 = 57,
	AnonymousMode                            = 58,
	AnonymousCharacterMode                   = 59,
	HideOtherPlayerNames                     = 60,
	HiddenMatchmakingDelay                   = 61,
	AutoJoinGameVoiceChannel                 = 62,
	ShowVoiceIndicators                      = 63,
	HUDScale                                 = 64,
	ShowViewerCount                          = 65,
	FirstPersonCamera                        = 66,
	PeripheralLighting                       = 67,
	PingPlaceDangerMarkerWhenTargeting       = 68,
	ShowGlobalChat                           = 69,
	ConsoleUnlockedFPS                       = 70,
	ToggleSprint                             = 71,
	SprintByDefault                          = 72,
	SprintCancelsReload                      = 73,
	TapInteract                              = 74,
	InWorldInteract                          = 75,
	ToggleTargeting                          = 76,
	HoldToSwapPickup                         = 77,
	AutoEquipBetterItems                     = 78,
	EquipFirstBuildingPieceWhenSwappingQuickbars = 79,
	EquipFirstBuildingPieceWhenSwappingQuickbarsAthena = 80,
	DisablePreEditsWhenPlacingBuilding       = 81,
	AimAssist                                = 82,
	EditModeAimAssist                        = 83,
	TouchEdit                                = 84,
	EditConfirmOnRelease                     = 85,
	QuickEdit                                = 86,
	TurboBuild                               = 87,
	CreativeTurboDelete                      = 88,
	AutoChangeMaterial                       = 89,
	GamepadAutoRun                           = 90,
	CrossplayPreference                      = 91,
	AutoOpenDoors                            = 92,
	AutoPickupWeapons                        = 93,
	AutoPickupWeaponsConsolePC               = 94,
	AutoSortConsumablesToRight               = 95,
	EnableTryBuildOnFocus                    = 96,
	EditButtonHoldTime                       = 97,
	SlideButtonHoldTime                      = 98,
	AccessoriesHeader                        = 99,
	ForceFeedback                            = 100,
	ContextTutorial                          = 101,
	ReplayRecording                          = 102,
	ReplayRecordingLargeTeams                = 103,
	ReplayRecordingCreativeMode              = 104,
	UsePowerSavingMode                       = 105,
	ShadowPlayHighlights                     = 106,
	ShowTemperature                          = 107,
	BuildingPossession                       = 108,
	GammaValue                               = 109,
	MasterVolume                             = 110,
	MusicVolume                              = 111,
	SoundFXVolume                            = 112,
	DialogVolume                             = 113,
	VoiceChatVolume                          = 114,
	CinematicsVolume                         = 115,
	Subtitles                                = 116,
	Quality                                  = 117,
	VoiceChat                                = 118,
	PushToTalk                               = 119,
	ProximityVoiceChat                       = 120,
	VoiceChatInputDevice                     = 121,
	VoiceChatOutputDevice                    = 122,
	AllowBackgroundAudio                     = 123,
	ColorBlindMode                           = 124,
	ColorBlindStrength                       = 125,
	IgnoreGamepadInput                       = 126,
	LockPrimaryInputMethodToMouse            = 127,
	EnableRudderControl                      = 128,
	RudderDeadZone                           = 129,
	RudderMaxThrottle                        = 130,
	VisualizeSoundEffects                    = 131,
	VisualizeSoundEffectsHeader              = 132,
	MoveStickDeadZone                        = 133,
	LookStickDeadZone                        = 134,
	LookSensitivityPreset                    = 135,
	LookSensitivityPresetAds                 = 136,
	LookBuildModeMultiplier                  = 137,
	LookEditModeMultiplier                   = 138,
	UseAdvancedOptions                       = 139,
	LookHorizontalSpeed                      = 140,
	LookVerticalSpeed                        = 141,
	LookHorizontalSpeedAds                   = 142,
	LookVerticalSpeedAds                     = 143,
	LookHorizontalBoostSpeed                 = 144,
	LookVerticalBoostSpeed                   = 145,
	LookBoostAccelerationTime                = 146,
	LookHorizontalBoostSpeedAds              = 147,
	LookVerticalBoostSpeedAds                = 148,
	LookBoostAccelerationTimeAds             = 149,
	InstantBoostWhenBuilding                 = 150,
	LookEaseTime                             = 151,
	LookInputCurve                           = 152,
	AimAssistStrength                        = 153,
	UseLegacyControls                        = 154,
	PlayerSurveysAllowed                     = 155,
	LocalNotifications                       = 156,
	FireMode                                 = 157,
	COUNT                                    = 158,
	ESettingType_MAX                         = 159,
};

// Enum FortniteUI.EParentalControlsViewState
// NumValues: 0x000B
enum class EParentalControlsViewState : uint8
{
	Invalid                                  = 0,
	EnterPin                                 = 1,
	AskToEnableControls                      = 2,
	VerifyEmail                              = 3,
	SetupEmail                               = 4,
	SetupPin                                 = 5,
	DisplaySettings                          = 6,
	DisableParentalControls                  = 7,
	AskToReEnable                            = 8,
	ReEnabling                               = 9,
	EParentalControlsViewState_MAX           = 10,
};

// Enum FortniteUI.EFortPerksWidgetState
// NumValues: 0x0004
enum class EFortPerksWidgetState : uint8
{
	Normal                                   = 0,
	Upgrade                                  = 1,
	Evolution                                = 2,
	EFortPerksWidgetState_MAX                = 3,
};

// Enum FortniteUI.ESaveProfileForBanners
// NumValues: 0x0003
enum class ESaveProfileForBanners : uint32
{
	SaveTheWorld                             = 0,
	BattleRoyale                             = 1,
	ESaveProfileForBanners_MAX               = 2,
};

// Enum FortniteUI.EFortPlayerSurveyQuestionType
// NumValues: 0x0004
enum class EFortPlayerSurveyQuestionType : uint8
{
	SingleChoice                             = 0,
	MultipleChoice                           = 1,
	Rating                                   = 2,
	EFortPlayerSurveyQuestionType_MAX        = 3,
};

// Enum FortniteUI.EFortPlayerSurveyResponseChoiceType
// NumValues: 0x0003
enum class EFortPlayerSurveyResponseChoiceType : uint8
{
	CheckBox                                 = 0,
	Radio                                    = 1,
	EFortPlayerSurveyResponseChoiceType_MAX  = 2,
};

// Enum FortniteUI.EPostGameScreenContinueBehavior
// NumValues: 0x0003
enum class EPostGameScreenContinueBehavior : uint8
{
	Next                                     = 0,
	Previous                                 = 1,
	EPostGameScreenContinueBehavior_MAX      = 2,
};

// Enum FortniteUI.EProgressiveSetProgress
// NumValues: 0x0005
enum class EProgressiveSetProgress : uint8
{
	NoProgress                               = 0,
	PartialProgress                          = 1,
	Completed                                = 2,
	Expired                                  = 3,
	EProgressiveSetProgress_MAX              = 4,
};

// Enum FortniteUI.EFortRadialControllingStick
// NumValues: 0x0003
enum class EFortRadialControllingStick : uint8
{
	Right                                    = 0,
	Left                                     = 1,
	EFortRadialControllingStick_MAX          = 2,
};

// Enum FortniteUI.ERedeemCodeFailureReason
// NumValues: 0x0006
enum class ERedeemCodeFailureReason : uint8
{
	InvalidCode                              = 0,
	CodeAlreadyUsed                          = 1,
	AlreadyHasAccess                         = 2,
	FailedToGetItem                          = 3,
	Unknown                                  = 4,
	ERedeemCodeFailureReason_MAX             = 5,
};

// Enum FortniteUI.EFortRewardItemType
// NumValues: 0x0005
enum class EFortRewardItemType : uint8
{
	RewardedBadges                           = 0,
	MissedBadges                             = 1,
	RewardedItems                            = 2,
	RewardedAccountItems                     = 3,
	EFortRewardItemType_MAX                  = 4,
};

// Enum FortniteUI.EFortServerBrowserAction
// NumValues: 0x0007
enum class EFortServerBrowserAction : uint8
{
	BattleLabServerCreate                    = 0,
	PlaygroundServerCreate                   = 1,
	CreativeServerCreate                     = 2,
	Play                                     = 3,
	CreativeIslandCode                       = 4,
	CreativeDiscovery                        = 5,
	EFortServerBrowserAction_MAX             = 6,
};

// Enum FortniteUI.EFortServerItemIneligibleReason
// NumValues: 0x0008
enum class EFortServerItemIneligibleReason : uint8
{
	None                                     = 0,
	PartyTooBig                              = 1,
	PartyTooSmall                            = 2,
	NotPartyLeader                           = 3,
	MatchmakingAlready                       = 4,
	NotSupportedByLeto                       = 5,
	InvalidData                              = 6,
	EFortServerItemIneligibleReason_MAX      = 7,
};

// Enum FortniteUI.EFortSettingGameVisibility
// NumValues: 0x0004
enum class EFortSettingGameVisibility : uint8
{
	None                                     = 0,
	Campaign                                 = 1,
	Athena                                   = 2,
	EFortSettingGameVisibility_MAX           = 3,
};

// Enum FortniteUI.EFortDateTimeStyle
// NumValues: 0x0006
enum class EFortDateTimeStyle : uint8
{
	Default                                  = 0,
	Short                                    = 1,
	Medium                                   = 2,
	Long                                     = 3,
	Full                                     = 4,
	EFortDateTimeStyle_MAX                   = 5,
};

// Enum FortniteUI.EFortShowdownMatchType
// NumValues: 0x0005
enum class EFortShowdownMatchType : uint8
{
	Unknown                                  = 0,
	Solo                                     = 1,
	Duos                                     = 2,
	Squads                                   = 3,
	EFortShowdownMatchType_MAX               = 4,
};

// Enum FortniteUI.EFortShowdownEventState
// NumValues: 0x000C
enum class EFortShowdownEventState : uint8
{
	Unknown                                  = 0,
	FutureTBD                                = 1,
	FutureScheduled                          = 2,
	FutureNext                               = 3,
	Live                                     = 4,
	LiveParticipating                        = 5,
	LiveNotParticipating                     = 6,
	Completed                                = 7,
	CompletedParticipated                    = 8,
	CompletedNotPartipated                   = 9,
	Cancelled                                = 10,
	EFortShowdownEventState_MAX              = 11,
};

// Enum FortniteUI.EFortEventWindowEligibility
// NumValues: 0x0005
enum class EFortEventWindowEligibility : uint8
{
	Unknown                                  = 0,
	Public                                   = 1,
	Private                                  = 2,
	Locked                                   = 3,
	EFortEventWindowEligibility_MAX          = 4,
};

// Enum FortniteUI.EFortShowdownPinState
// NumValues: 0x0004
enum class EFortShowdownPinState : uint8
{
	None                                     = 0,
	Locked                                   = 1,
	Unlocked                                 = 2,
	EFortShowdownPinState_MAX                = 3,
};

// Enum FortniteUI.EFortSidebarButtonType
// NumValues: 0x0008
enum class EFortSidebarButtonType : uint8
{
	PartyUp                                  = 0,
	FindFriends                              = 1,
	VoiceChat                                = 2,
	Settings                                 = 3,
	YourProfile                              = 4,
	Tags                                     = 5,
	Exit                                     = 6,
	EFortSidebarButtonType_MAX               = 7,
};

// Enum FortniteUI.ESidebarExitActions
// NumValues: 0x0006
enum class ESidebarExitActions : uint8
{
	None                                     = 0,
	LeaveExperience                          = 1,
	AthenaLeaveAction                        = 2,
	LogOut                                   = 3,
	QuitGame                                 = 4,
	ESidebarExitActions_MAX                  = 5,
};

// Enum FortniteUI.ESocialTutorialType
// NumValues: 0x0005
enum class ESocialTutorialType : uint8
{
	None                                     = 0,
	TagsEditor                               = 1,
	LookingForParty                          = 2,
	LikeIsland                               = 3,
	ESocialTutorialType_MAX                  = 4,
};

// Enum FortniteUI.EFortSidebarSocialInteractionArrow
// NumValues: 0x0006
enum class EFortSidebarSocialInteractionArrow : uint8
{
	None                                     = 0,
	Up                                       = 1,
	Down                                     = 2,
	Left                                     = 3,
	Right                                    = 4,
	EFortSidebarSocialInteractionArrow_MAX   = 5,
};

// Enum FortniteUI.ECardinalPoint
// NumValues: 0x000A
enum class ECardinalPoint : uint8
{
	E                                        = 0,
	NE                                       = 1,
	N                                        = 2,
	NW                                       = 3,
	W                                        = 4,
	SW                                       = 5,
	S                                        = 6,
	SE                                       = 7,
	None                                     = 8,
	ECardinalPoint_MAX                       = 9,
};

// Enum FortniteUI.ERadialOrderingMode
// NumValues: 0x0005
enum class ERadialOrderingMode : uint8
{
	CounterClockwise                         = 0,
	Clockwise                                = 1,
	Cardinal                                 = 2,
	Custom                                   = 3,
	ERadialOrderingMode_MAX                  = 4,
};

// Enum FortniteUI.ESocialImportPanelType
// NumValues: 0x0003
enum class ESocialImportPanelType : uint8
{
	Athena                                   = 0,
	SaveTheWorld                             = 1,
	ESocialImportPanelType_MAX               = 2,
};

// Enum FortniteUI.EFriendLinkShareButtonType
// NumValues: 0x0004
enum class EFriendLinkShareButtonType : uint8
{
	IOS                                      = 0,
	Android                                  = 1,
	Generic                                  = 2,
	EFriendLinkShareButtonType_MAX           = 3,
};

// Enum FortniteUI.ESidebarState
// NumValues: 0x0004
enum class ESidebarState : uint8
{
	TabButtons                               = 0,
	UserListPanels                           = 1,
	ExitPopup                                = 2,
	ESidebarState_MAX                        = 3,
};

// Enum FortniteUI.EListHeaderType
// NumValues: 0x0015
enum class EListHeaderType : uint8
{
	TeamMember                               = 0,
	PartyMember                              = 1,
	JoinableParty                            = 2,
	PlatformOnlineFriend                     = 3,
	McpOnlineFriend                          = 4,
	OfflineFriend                            = 5,
	Blocked                                  = 6,
	FriendInvite                             = 7,
	SuggestedFriend                          = 8,
	RecentPlayer                             = 9,
	SearchResults                            = 10,
	JoinRequests                             = 11,
	LfgFilter                                = 12,
	LfgPlayers                               = 13,
	LfgInvites                               = 14,
	GameVoice                                = 15,
	PartyVoice                               = 16,
	PlatformVoice                            = 17,
	AwayFriend                               = 18,
	Invalid                                  = 19,
	EListHeaderType_MAX                      = 20,
};

// Enum FortniteUI.EReferFriendOrigin
// NumValues: 0x0003
enum class EReferFriendOrigin : uint8
{
	AddFriend                                = 0,
	PartyUp                                  = 1,
	EReferFriendOrigin_MAX                   = 2,
};

// Enum FortniteUI.ELocalUserOnlineStatus
// NumValues: 0x0007
enum class ELocalUserOnlineStatus : uint8
{
	Online                                   = 0,
	Offline                                  = 1,
	Away                                     = 2,
	ExtendedAway                             = 3,
	DoNotDisturb                             = 4,
	Chat                                     = 5,
	ELocalUserOnlineStatus_MAX               = 6,
};

// Enum FortniteUI.ELfgState
// NumValues: 0x0008
enum class ELfgState : uint8
{
	NoResults                                = 0,
	Shuffling                                = 1,
	NoSocialTagsAdded                        = 2,
	LfgOff                                   = 3,
	LfgUnavailable                           = 4,
	LfgOffNoSocialTags                       = 5,
	NoSocialTagsSelected                     = 6,
	ELfgState_MAX                            = 7,
};

// Enum FortniteUI.EFortSquadSlottingRestrictionReason
// NumValues: 0x0006
enum class EFortSquadSlottingRestrictionReason : uint8
{
	ItemIsInInventoryOverflow                = 0,
	MandatorySlotWouldBeEmptied              = 1,
	ItemIsOnActiveExpedition                 = 2,
	HeroRequiresMissingGameplayTag           = 3,
	HeroAlreadyEquippedInLoadout             = 4,
	EFortSquadSlottingRestrictionReason_MAX  = 5,
};

// Enum FortniteUI.ECardPackPurchaseError
// NumValues: 0x0006
enum class ECardPackPurchaseError : uint8
{
	PendingServerConfirmation                = 0,
	CannotAffordItem                         = 1,
	NoneLeft                                 = 2,
	PurchaseAlreadyPending                   = 3,
	NoConnection                             = 4,
	ECardPackPurchaseError_MAX               = 5,
};

// Enum FortniteUI.EPauseType
// NumValues: 0x0005
enum class EPauseType : uint8
{
	NoPause                                  = 0,
	Rare                                     = 1,
	New                                      = 2,
	NewAndRare                               = 3,
	EPauseType_MAX                           = 4,
};

// Enum FortniteUI.ESubgameLoadFromCMS
// NumValues: 0x0003
enum class ESubgameLoadFromCMS : uint8
{
	DoNotLoadFromCMS                         = 0,
	LoadImageFromCMS                         = 1,
	ESubgameLoadFromCMS_MAX                  = 2,
};

// Enum FortniteUI.ESubgameTileType
// NumValues: 0x0004
enum class ESubgameTileType : uint8
{
	Campaign                                 = 0,
	Athena                                   = 1,
	Creative                                 = 2,
	ESubgameTileType_MAX                     = 3,
};

// Enum FortniteUI.ESubscriptionCancellability
// NumValues: 0x0004
enum class ESubscriptionCancellability : uint8
{
	NotCancellable                           = 0,
	CancellabeOnPlatform                     = 1,
	CancellableAnywhere                      = 2,
	ESubscriptionCancellability_MAX          = 3,
};

// Enum FortniteUI.EFortTouchControlRegion
// NumValues: 0x0005
enum class EFortTouchControlRegion : uint8
{
	MovePlayer                               = 0,
	RotateCamera                             = 1,
	NoRegion                                 = 2,
	COUNT                                    = 3,
	EFortTouchControlRegion_MAX              = 4,
};

// Enum FortniteUI.EFortControlType
// NumValues: 0x0005
enum class EFortControlType : uint8
{
	None                                     = 0,
	CameraAndMovement                        = 1,
	Picking                                  = 2,
	COUNT                                    = 3,
	EFortControlType_MAX                     = 4,
};

// Enum FortniteUI.ETouchState
// NumValues: 0x0006
enum class ETouchState : uint8
{
	None                                     = 0,
	WaitingForStart                          = 1,
	Started                                  = 2,
	Active                                   = 3,
	COUNT                                    = 4,
	ETouchState_MAX                          = 5,
};

// Enum FortniteUI.ETournmentPosterViolatorState
// NumValues: 0x0005
enum class ETournmentPosterViolatorState : uint8
{
	Hidden                                   = 0,
	Live                                     = 1,
	Countdown                                = 2,
	Info                                     = 3,
	ETournmentPosterViolatorState_MAX        = 4,
};

// Enum FortniteUI.EActivatePanelOption
// NumValues: 0x0004
enum class EActivatePanelOption : uint8
{
	Show                                     = 0,
	Hide                                     = 1,
	PlatformDefault                          = 2,
	EActivatePanelOption_MAX                 = 3,
};

// Enum FortniteUI.EFortNamedBundle
// NumValues: 0x000A
enum class EFortNamedBundle : uint8
{
	Menu                                     = 0,
	MenuCampaign                             = 1,
	MenuAthena                               = 2,
	Zone                                     = 3,
	ZoneCampaign                             = 4,
	ZoneAthena                               = 5,
	Client                                   = 6,
	ClientCampaign                           = 7,
	ClientAthena                             = 8,
	EFortNamedBundle_MAX                     = 9,
};

// Enum FortniteUI.ELetoDisplayMode
// NumValues: 0x0004
enum class ELetoDisplayMode : uint8
{
	PrimaryOnly                              = 0,
	SingleToggle                             = 1,
	Simultaneous                             = 2,
	ELetoDisplayMode_MAX                     = 3,
};

// Enum FortniteUI.EFortUINavigationOp
// NumValues: 0x000A
enum class EFortUINavigationOp : uint8
{
	PopContentStack                          = 0,
	FeatureSwitch                            = 1,
	NavigateToSkillTree                      = 2,
	NavigateToSquadSlot                      = 3,
	NavigateToQuest                          = 4,
	NavigateToItemManagement                 = 5,
	NavigateToExpeditions                    = 6,
	NavigateToCollectionBook                 = 7,
	None                                     = 8,
	EFortUINavigationOp_MAX                  = 9,
};

// Enum FortniteUI.EForcedIntroTextDisplayState
// NumValues: 0x0008
enum class EForcedIntroTextDisplayState : uint8
{
	Initialized                              = 0,
	WaitingForPlaylistPlugin                 = 1,
	WaitingForMatchmakingStartTime           = 2,
	InitialDelay                             = 3,
	Matchmaking                              = 4,
	Success                                  = 5,
	Failure                                  = 6,
	EForcedIntroTextDisplayState_MAX         = 7,
};

// Enum FortniteUI.EFortLoginDisplay
// NumValues: 0x0007
enum class EFortLoginDisplay : uint8
{
	LoginStatus                              = 0,
	SplashScreen                             = 1,
	SignIn                                   = 2,
	SafeZoneEditor                           = 3,
	HealthWarning                            = 4,
	QualityPresetSelection                   = 5,
	EFortLoginDisplay_MAX                    = 6,
};

// Enum FortniteUI.EFortLoginStage
// NumValues: 0x000E
enum class EFortLoginStage : uint8
{
	Begin                                    = 0,
	SplashScreen                             = 1,
	UpdateCheck                              = 2,
	SignIn                                   = 3,
	PostSignin                               = 4,
	SafeZoneEditor                           = 5,
	Benchmark                                = 6,
	RejoinCheck                              = 7,
	QualityPresetSelect                      = 8,
	LoadingAthenaProfile                     = 9,
	HealthWarning                            = 10,
	WaitingForDynamicContent                 = 11,
	Complete                                 = 12,
	EFortLoginStage_MAX                      = 13,
};

// Enum FortniteUI.EFortToastType
// NumValues: 0x0004
enum class EFortToastType : uint8
{
	Default                                  = 0,
	Subdued                                  = 1,
	Impactful                                = 2,
	EFortToastType_MAX                       = 3,
};

// Enum FortniteUI.EFortUIState
// NumValues: 0x000E
enum class EFortUIState : uint8
{
	Invalid                                  = 0,
	Login                                    = 1,
	JoinServer                               = 2,
	SubgameSelect                            = 3,
	FrontEnd                                 = 4,
	InGame_Custom                            = 5,
	UNUSED                                   = 6,
	InGame_STW                               = 7,
	Cinematic                                = 8,
	InGame_BR                                = 9,
	AthenaSpectator                          = 10,
	Replay                                   = 11,
	InGame_STW_Custom                        = 12,
	MAX                                      = 13,
};

// Enum FortniteUI.EFortInventoryContext
// NumValues: 0x0005
enum class EFortInventoryContext : uint8
{
	Game                                     = 0,
	Lobby                                    = 1,
	FrontEnd                                 = 2,
	Pickup                                   = 3,
	EFortInventoryContext_MAX                = 4,
};

// Enum FortniteUI.ENotificationResult
// NumValues: 0x0004
enum class ENotificationResult : uint8
{
	Confirmed                                = 0,
	Declined                                 = 1,
	Unknown                                  = 2,
	ENotificationResult_MAX                  = 3,
};

// Enum FortniteUI.ENotificationType
// NumValues: 0x0003
enum class ENotificationType : uint8
{
	Basic                                    = 0,
	Friends                                  = 1,
	ENotificationType_MAX                    = 2,
};

// Enum FortniteUI.EModalContainerSize
// NumValues: 0x0005
enum class EModalContainerSize : uint8
{
	ExtraSmall                               = 0,
	Small                                    = 1,
	Medium                                   = 2,
	Large                                    = 3,
	Max                                      = 4,
};

// Enum FortniteUI.EFortSocialPanelType
// NumValues: 0x0003
enum class EFortSocialPanelType : uint8
{
	Join                                     = 0,
	Invite                                   = 1,
	Max                                      = 2,
};

// Enum FortniteUI.EFortSocialPanelTab
// NumValues: 0x0004
enum class EFortSocialPanelTab : uint8
{
	PartyInvitations                         = 0,
	Friends                                  = 1,
	RecentPlayers                            = 2,
	Max                                      = 3,
};

// Enum FortniteUI.EFortBangSize
// NumValues: 0x0007
enum class EFortBangSize : uint8
{
	XXS                                      = 0,
	XS                                       = 1,
	S                                        = 2,
	M                                        = 3,
	L                                        = 4,
	XL                                       = 5,
	EFortBangSize_MAX                        = 6,
};

// Enum FortniteUI.EFortTutorialGlowType
// NumValues: 0x0004
enum class EFortTutorialGlowType : uint8
{
	None                                     = 0,
	Look                                     = 1,
	Click                                    = 2,
	EFortTutorialGlowType_MAX                = 3,
};

// Enum FortniteUI.EFortAnimSpeed
// NumValues: 0x0004
enum class EFortAnimSpeed : uint8
{
	Instant                                  = 0,
	Fast                                     = 1,
	Normal                                   = 2,
	EFortAnimSpeed_MAX                       = 3,
};

// Enum FortniteUI.EFortStatValueDisplayType
// NumValues: 0x0007
enum class EFortStatValueDisplayType : uint8
{
	BasicPaired                              = 0,
	BasicSingle                              = 1,
	Unique                                   = 2,
	ElementalFire                            = 3,
	ElementalIce                             = 4,
	ElementalElectric                        = 5,
	EFortStatValueDisplayType_MAX            = 6,
};

// Enum FortniteUI.EFortBuffState
// NumValues: 0x0004
enum class EFortBuffState : uint8
{
	NoChange                                 = 0,
	Better                                   = 1,
	Worse                                    = 2,
	EFortBuffState_MAX                       = 3,
};

// Enum FortniteUI.EFortClampState
// NumValues: 0x0004
enum class EFortClampState : uint8
{
	NoClamp                                  = 0,
	MinClamp                                 = 1,
	MaxClamp                                 = 2,
	EFortClampState_MAX                      = 3,
};

// Enum FortniteUI.EFortComparisonType
// NumValues: 0x0005
enum class EFortComparisonType : uint8
{
	None                                     = 0,
	HigherValue                              = 1,
	LowerValue                               = 2,
	Upgrade                                  = 3,
	EFortComparisonType_MAX                  = 4,
};

// Enum FortniteUI.EPlayerReportReasons
// NumValues: 0x0013
enum class EPlayerReportReasons : uint8
{
	None                                     = 0,
	Communication                            = 1,
	Offensive                                = 2,
	AFK                                      = 3,
	IgnoringObjective                        = 4,
	Harassment                               = 5,
	Exploiting                               = 6,
	TradeScam                                = 7,
	CommunicationsAbuse                      = 8,
	OffensiveName                            = 9,
	TeamingUpWithEnemies                     = 10,
	InappropriateContent                     = 11,
	ExploitingOrHacking                      = 12,
	Harassment_Threatening                   = 13,
	Harassment_Annoying                      = 14,
	Harassment_Selling                       = 15,
	Harassment_Verbal                        = 16,
	Harassment_GameBehavior                  = 17,
	EPlayerReportReasons_MAX                 = 18,
};

// Enum FortniteUI.ESubscriptionContentTab
// NumValues: 0x0003
enum class ESubscriptionContentTab : uint8
{
	SubscriptionManagementScreen             = 0,
	ProgressiveItemScreen                    = 1,
	ESubscriptionContentTab_MAX              = 2,
};

// Enum FortniteUI.EItemShopNavigationAction
// NumValues: 0x0004
enum class EItemShopNavigationAction : uint8
{
	None                                     = 0,
	ShowOfferDetails                         = 1,
	NavigateToOffer                          = 2,
	EItemShopNavigationAction_MAX            = 3,
};

// Enum FortniteUI.EUpgradeInfoImageSize
// NumValues: 0x0003
enum class EUpgradeInfoImageSize : uint8
{
	Small                                    = 0,
	Large                                    = 1,
	EUpgradeInfoImageSize_MAX                = 2,
};

// Enum FortniteUI.EChannelSpeakerStyle
// NumValues: 0x0004
enum class EChannelSpeakerStyle : uint8
{
	InGame                                   = 0,
	InLobby                                  = 1,
	OutOfClient                              = 2,
	Max                                      = 3,
};

// Enum FortniteUI.EHeistExitCraftUIState
// NumValues: 0x0005
enum class EHeistExitCraftUIState : uint8
{
	None                                     = 0,
	OnTheWay                                 = 1,
	Incoming                                 = 2,
	Arrived                                  = 3,
	EHeistExitCraftUIState_MAX               = 4,
};

// Enum FortniteUI.EHeistBlingIconState
// NumValues: 0x0006
enum class EHeistBlingIconState : uint8
{
	None                                     = 0,
	SupplyDrop                               = 1,
	PickupItem                               = 2,
	CarriedEnemy                             = 3,
	CarriedAlly                              = 4,
	EHeistBlingIconState_MAX                 = 5,
};

// Enum FortniteUI.EHeistExitCraftIconState
// NumValues: 0x0005
enum class EHeistExitCraftIconState : uint8
{
	None                                     = 0,
	Incoming                                 = 1,
	Spawned                                  = 2,
	Exited                                   = 3,
	EHeistExitCraftIconState_MAX             = 4,
};

// Enum FortniteUI.ENumericalIndicatorActionType
// NumValues: 0x0004
enum class ENumericalIndicatorActionType : uint8
{
	Adding                                   = 0,
	Removing                                 = 1,
	Nothing                                  = 2,
	ENumericalIndicatorActionType_MAX        = 3,
};

// Enum FortniteUI.ELinkAcrossSimpleAction
// NumValues: 0x0005
enum class ELinkAcrossSimpleAction : uint8
{
	AddToAll                                 = 0,
	RemovedFromAll                           = 1,
	Custom                                   = 2,
	Nothing                                  = 3,
	ELinkAcrossSimpleAction_MAX              = 4,
};

// Enum FortniteUI.EHUDLayoutToolPopupType
// NumValues: 0x0003
enum class EHUDLayoutToolPopupType : uint8
{
	Warning                                  = 0,
	Generic                                  = 1,
	EHUDLayoutToolPopupType_MAX              = 2,
};

// Enum FortniteUI.EHUDLayoutToolTextInputPopupType
// NumValues: 0x0003
enum class EHUDLayoutToolTextInputPopupType : uint8
{
	Rename                                   = 0,
	ImportLayoutID                           = 1,
	EHUDLayoutToolTextInputPopupType_MAX     = 2,
};

// Enum FortniteUI.EHUDLayoutToolToasterType
// NumValues: 0x0005
enum class EHUDLayoutToolToasterType : uint8
{
	Success                                  = 0,
	Failure                                  = 1,
	LocalFailure                             = 2,
	CloudFailure                             = 3,
	EHUDLayoutToolToasterType_MAX            = 4,
};

// Enum FortniteUI.ELiveStreamStandaloneBlocked
// NumValues: 0x0002
enum class ELiveStreamStandaloneBlocked : uint8
{
	StreamInWorldActive                      = 0,
	ELiveStreamStandaloneBlocked_MAX         = 1,
};

// Enum FortniteUI.EMatchmakingInputSource
// NumValues: 0x0004
enum class EMatchmakingInputSource : uint8
{
	Local                                    = 0,
	Remote                                   = 1,
	Pool                                     = 2,
	EMatchmakingInputSource_MAX              = 3,
};

// Enum FortniteUI.ESpectatorLeaderboardEntryType
// NumValues: 0x0005
enum class ESpectatorLeaderboardEntryType : uint8
{
	ScoreWithEndScore                        = 0,
	NoEndScore                               = 1,
	Time                                     = 2,
	Invalid                                  = 3,
	ESpectatorLeaderboardEntryType_MAX       = 4,
};

// Enum FortniteUI.EMinigameCaptureObjectiveIconState
// NumValues: 0x0003
enum class EMinigameCaptureObjectiveIconState : uint8
{
	NotCaptured                              = 0,
	Captured                                 = 1,
	EMinigameCaptureObjectiveIconState_MAX   = 2,
};

// Enum FortniteUI.EPlayerFeedbackSubmitState
// NumValues: 0x0005
enum class EPlayerFeedbackSubmitState : uint8
{
	Start                                    = 0,
	Submitting                               = 1,
	SubmitFailed                             = 2,
	SubmitSucceeded                          = 3,
	EPlayerFeedbackSubmitState_MAX           = 4,
};

// Enum FortniteUI.EPlayerFeedback_EpicQAState
// NumValues: 0x0005
enum class EPlayerFeedback_EpicQAState : uint8
{
	SignInPage                               = 0,
	SigningInFailed                          = 1,
	SigningIn                                = 2,
	SelectBugComponent                       = 3,
	EPlayerFeedback_MAX                      = 4,
};

// Enum FortniteUI.EFortPlayerFeedbackFlags
// NumValues: 0x0008
enum class EFortPlayerFeedbackFlags : uint8
{
	SubscreenFlow_ForceDisplayFreeText       = 0,
	SubscreenFlow_IncludeScreenshotSubscreen = 1,
	DoNotDisplay_SaveTheWorld                = 2,
	DoNotDisplay_Athena                      = 3,
	DoNotDisplay_Creative                    = 4,
	Submit_TryDisplayBlockUser               = 5,
	Submit_TryDisplayCommunityRulesURL       = 6,
	EFortPlayerFeedbackFlags_MAX             = 7,
};

// Enum FortniteUI.EFortPrioritizedWidgetPriority
// NumValues: 0x0007
enum class EFortPrioritizedWidgetPriority : uint8
{
	Priority_0                               = 0,
	Priority_1                               = 1,
	Priority_2                               = 2,
	Priority_3                               = 3,
	Priority_4                               = 4,
	Priority_5                               = 5,
	NumberOfPrios                            = 6,
};

// Enum FortniteUI.EFortPrioritizedWidgetContestedBehavior
// NumValues: 0x0003
enum class EFortPrioritizedWidgetContestedBehavior : uint8
{
	QueueBehind                              = 0,
	StompOther                               = 1,
	EFortPrioritizedWidgetContestedBehavior_MAX = 2,
};

// Enum FortniteUI.EFortPrioritizedWidgetInterruptedBehavior
// NumValues: 0x0003
enum class EFortPrioritizedWidgetInterruptedBehavior : uint8
{
	RemainInQueue                            = 0,
	Drop                                     = 1,
	EFortPrioritizedWidgetInterruptedBehavior_MAX = 2,
};

// Enum FortniteUI.ECooldownTrackingType
// NumValues: 0x0004
enum class ECooldownTrackingType : uint8
{
	Cue                                      = 0,
	AbilityCooldownTags                      = 1,
	COUNT                                    = 2,
	ECooldownTrackingType_MAX                = 3,
};

// Enum FortniteUI.ESocialTagListHighlightPolicy
// NumValues: 0x0004
enum class ESocialTagListHighlightPolicy : uint8
{
	All                                      = 0,
	TagList                                  = 1,
	LocalUser                                = 2,
	ESocialTagListHighlightPolicy_MAX        = 3,
};

// Enum FortniteUI.ESocialTagCategory
// NumValues: 0x0006
enum class ESocialTagCategory : uint8
{
	GameModes                                = 0,
	Mood                                     = 1,
	Utility                                  = 2,
	Competitive                              = 3,
	Other                                    = 4,
	ESocialTagCategory_MAX                   = 5,
};

// Enum FortniteUI.ESpatialCustomizationRoomState
// NumValues: 0x0004
enum class ESpatialCustomizationRoomState : uint8
{
	None                                     = 0,
	CategorySelection                        = 1,
	CustomizationSelection                   = 2,
	ESpatialCustomizationRoomState_MAX       = 3,
};

// Enum FortniteUI.ESpatialCustomizationCategoryState
// NumValues: 0x0007
enum class ESpatialCustomizationCategoryState : uint8
{
	LockedByBattlePass                       = 0,
	LockedByChallenge                        = 1,
	LockedByChallengeCompletion              = 2,
	UnlockAvailable                          = 3,
	UnlockUsed                               = 4,
	Max_NONE                                 = 5,
	ESpatialCustomizationCategoryState_MAX   = 6,
};

// Enum FortniteUI.ESpatialStyleCharacterUnlockPrerequisite
// NumValues: 0x0003
enum class ESpatialStyleCharacterUnlockPrerequisite : uint8
{
	BattlepassPurchase                       = 0,
	BattlepassLevel                          = 1,
	ESpatialStyleCharacterUnlockPrerequisite_MAX = 2,
};

// Enum FortniteUI.EFortSubscriptionContentInterfaceCloseReason
// NumValues: 0x0003
enum class EFortSubscriptionContentInterfaceCloseReason : uint8
{
	Normal                                   = 0,
	SubscriptionPurchased                    = 1,
	EFortSubscriptionContentInterfaceCloseReason_MAX = 2,
};

// Enum FortniteUI.ETDMScoreProgressTypes
// NumValues: 0x0007
enum class ETDMScoreProgressTypes : uint8
{
	None                                     = 0,
	ProgressSoundMild                        = 1,
	ProgressSoundMedium                      = 2,
	ProgressSoundStrong                      = 3,
	CountdownSoundNormal                     = 4,
	CountdownSoundStrong                     = 5,
	ETDMScoreProgressTypes_MAX               = 6,
};

// Enum FortniteUI.EFortEarnedSubRewardType
// NumValues: 0x0003
enum class EFortEarnedSubRewardType : uint8
{
	XP                                       = 0,
	Bars                                     = 1,
	EFortEarnedSubRewardType_MAX             = 2,
};

// ScriptStruct FortniteUI.ItemListCategoryArray
// 0x0028 (0x0028 - 0x0000)
struct FItemListCategoryArray final
{
public:
	TArray<struct FFortItemEntry>                 ItemList;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   CategoryTitle;                                     // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemListCategoryArray) == 0x000008, "Wrong alignment on FItemListCategoryArray");
static_assert(sizeof(FItemListCategoryArray) == 0x000028, "Wrong size on FItemListCategoryArray");
static_assert(offsetof(FItemListCategoryArray, ItemList) == 0x000000, "Member 'FItemListCategoryArray::ItemList' has a wrong offset!");
static_assert(offsetof(FItemListCategoryArray, CategoryTitle) == 0x000010, "Member 'FItemListCategoryArray::CategoryTitle' has a wrong offset!");

// ScriptStruct FortniteUI.CrewTableRow
// 0x0018 (0x0018 - 0x0000)
struct FCrewTableRow final
{
public:
	TArray<class FText>                           RowData;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIsHeaderRow;                                      // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCrewTableRow) == 0x000008, "Wrong alignment on FCrewTableRow");
static_assert(sizeof(FCrewTableRow) == 0x000018, "Wrong size on FCrewTableRow");
static_assert(offsetof(FCrewTableRow, RowData) == 0x000000, "Member 'FCrewTableRow::RowData' has a wrong offset!");
static_assert(offsetof(FCrewTableRow, bIsHeaderRow) == 0x000010, "Member 'FCrewTableRow::bIsHeaderRow' has a wrong offset!");

// ScriptStruct FortniteUI.CrewPlatformTable
// 0x0018 (0x0018 - 0x0000)
struct FCrewPlatformTable final
{
public:
	EAppStore                                     SubscriptionPlatform;                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCrewTableRow>                  TableRows;                                         // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCrewPlatformTable) == 0x000008, "Wrong alignment on FCrewPlatformTable");
static_assert(sizeof(FCrewPlatformTable) == 0x000018, "Wrong size on FCrewPlatformTable");
static_assert(offsetof(FCrewPlatformTable, SubscriptionPlatform) == 0x000000, "Member 'FCrewPlatformTable::SubscriptionPlatform' has a wrong offset!");
static_assert(offsetof(FCrewPlatformTable, TableRows) == 0x000008, "Member 'FCrewPlatformTable::TableRows' has a wrong offset!");

// ScriptStruct FortniteUI.AthenaVariantFilterTabInfo
// 0x0078 (0x0078 - 0x0000)
struct FAthenaVariantFilterTabInfo final
{
public:
	TSoftObjectPtr<class UObject>                 Icon;                                              // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Label;                                             // 0x0028(0x0018)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  IncludedVariantChannels;                           // 0x0040(0x0020)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FMcpVariantChannelInfo>         ForcedVariantSelections;                           // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ZoomLevel;                                         // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableScrollBox;                                 // 0x0074(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAthenaVariantFilterTabInfo) == 0x000008, "Wrong alignment on FAthenaVariantFilterTabInfo");
static_assert(sizeof(FAthenaVariantFilterTabInfo) == 0x000078, "Wrong size on FAthenaVariantFilterTabInfo");
static_assert(offsetof(FAthenaVariantFilterTabInfo, Icon) == 0x000000, "Member 'FAthenaVariantFilterTabInfo::Icon' has a wrong offset!");
static_assert(offsetof(FAthenaVariantFilterTabInfo, Label) == 0x000028, "Member 'FAthenaVariantFilterTabInfo::Label' has a wrong offset!");
static_assert(offsetof(FAthenaVariantFilterTabInfo, IncludedVariantChannels) == 0x000040, "Member 'FAthenaVariantFilterTabInfo::IncludedVariantChannels' has a wrong offset!");
static_assert(offsetof(FAthenaVariantFilterTabInfo, ForcedVariantSelections) == 0x000060, "Member 'FAthenaVariantFilterTabInfo::ForcedVariantSelections' has a wrong offset!");
static_assert(offsetof(FAthenaVariantFilterTabInfo, ZoomLevel) == 0x000070, "Member 'FAthenaVariantFilterTabInfo::ZoomLevel' has a wrong offset!");
static_assert(offsetof(FAthenaVariantFilterTabInfo, bDisableScrollBox) == 0x000074, "Member 'FAthenaVariantFilterTabInfo::bDisableScrollBox' has a wrong offset!");

// ScriptStruct FortniteUI.AthenaVariantFilterTabInfo_Primary
// 0x0088 (0x0088 - 0x0000)
struct FAthenaVariantFilterTabInfo_Primary final
{
public:
	struct FAthenaVariantFilterTabInfo            PrimaryTab;                                        // 0x0000(0x0078)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FAthenaVariantFilterTabInfo>    SubTabs;                                           // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaVariantFilterTabInfo_Primary) == 0x000008, "Wrong alignment on FAthenaVariantFilterTabInfo_Primary");
static_assert(sizeof(FAthenaVariantFilterTabInfo_Primary) == 0x000088, "Wrong size on FAthenaVariantFilterTabInfo_Primary");
static_assert(offsetof(FAthenaVariantFilterTabInfo_Primary, PrimaryTab) == 0x000000, "Member 'FAthenaVariantFilterTabInfo_Primary::PrimaryTab' has a wrong offset!");
static_assert(offsetof(FAthenaVariantFilterTabInfo_Primary, SubTabs) == 0x000078, "Member 'FAthenaVariantFilterTabInfo_Primary::SubTabs' has a wrong offset!");

// ScriptStruct FortniteUI.FortTabButtonLabelInfo
// 0x00E0 (0x00E0 - 0x0000)
struct FFortTabButtonLabelInfo
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            IconBrush;                                         // 0x0020(0x00C0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTabButtonLabelInfo) == 0x000010, "Wrong alignment on FFortTabButtonLabelInfo");
static_assert(sizeof(FFortTabButtonLabelInfo) == 0x0000E0, "Wrong size on FFortTabButtonLabelInfo");
static_assert(offsetof(FFortTabButtonLabelInfo, DisplayName) == 0x000000, "Member 'FFortTabButtonLabelInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FFortTabButtonLabelInfo, IconBrush) == 0x000020, "Member 'FFortTabButtonLabelInfo::IconBrush' has a wrong offset!");

// ScriptStruct FortniteUI.AthenaRewardTracker
// 0x0014 (0x0014 - 0x0000)
struct alignas(0x04) FAthenaRewardTracker final
{
public:
	uint8                                         Pad_0[0x14];                                       // 0x0000(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAthenaRewardTracker) == 0x000004, "Wrong alignment on FAthenaRewardTracker");
static_assert(sizeof(FAthenaRewardTracker) == 0x000014, "Wrong size on FAthenaRewardTracker");

// ScriptStruct FortniteUI.FortMobileHUDWidgetLayout
// 0x0058 (0x0058 - 0x0000)
struct FFortMobileHUDWidgetLayout final
{
public:
	struct FAnchorData                            LayoutData;                                        // 0x0000(0x0040)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
	int32                                         ZOrder;                                            // 0x0040(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_44[0x14];                                      // 0x0044(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMobileHUDWidgetLayout) == 0x000008, "Wrong alignment on FFortMobileHUDWidgetLayout");
static_assert(sizeof(FFortMobileHUDWidgetLayout) == 0x000058, "Wrong size on FFortMobileHUDWidgetLayout");
static_assert(offsetof(FFortMobileHUDWidgetLayout, LayoutData) == 0x000000, "Member 'FFortMobileHUDWidgetLayout::LayoutData' has a wrong offset!");
static_assert(offsetof(FFortMobileHUDWidgetLayout, ZOrder) == 0x000040, "Member 'FFortMobileHUDWidgetLayout::ZOrder' has a wrong offset!");

// ScriptStruct FortniteUI.GridSortKey
// 0x0018 (0x0018 - 0x0000)
struct FGridSortKey final
{
public:
	float                                         Number;                                            // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 String;                                            // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGridSortKey) == 0x000008, "Wrong alignment on FGridSortKey");
static_assert(sizeof(FGridSortKey) == 0x000018, "Wrong size on FGridSortKey");
static_assert(offsetof(FGridSortKey, Number) == 0x000000, "Member 'FGridSortKey::Number' has a wrong offset!");
static_assert(offsetof(FGridSortKey, String) == 0x000008, "Member 'FGridSortKey::String' has a wrong offset!");

// ScriptStruct FortniteUI.FortFocusedBuildingInfo
// 0x0048 (0x0048 - 0x0000)
struct FFortFocusedBuildingInfo final
{
public:
	bool                                          bIsInteractable;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanBePlayerEdited;                                // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                IndicatorRelativeLocation;                         // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuildingHealthDisplayRule                HealthDisplayRule;                                 // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxHealth;                                         // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAnyTrapAttached;                                // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTrapAttachedFacingPlayer;                       // 0x0029(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPreviewTrapAttached;                            // 0x002A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttachedTrapMaxDurability;                         // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuildingInteraction                      InteractionType;                                   // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InteractionCost;                                   // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortResourceType                             BuildingMaterial;                                  // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   QuickEditClass;                                    // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPlayerBuilt;                                    // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortFocusedBuildingInfo) == 0x000008, "Wrong alignment on FFortFocusedBuildingInfo");
static_assert(sizeof(FFortFocusedBuildingInfo) == 0x000048, "Wrong size on FFortFocusedBuildingInfo");
static_assert(offsetof(FFortFocusedBuildingInfo, bIsInteractable) == 0x000000, "Member 'FFortFocusedBuildingInfo::bIsInteractable' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, bCanBePlayerEdited) == 0x000001, "Member 'FFortFocusedBuildingInfo::bCanBePlayerEdited' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, IndicatorRelativeLocation) == 0x000008, "Member 'FFortFocusedBuildingInfo::IndicatorRelativeLocation' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, HealthDisplayRule) == 0x000020, "Member 'FFortFocusedBuildingInfo::HealthDisplayRule' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, MaxHealth) == 0x000024, "Member 'FFortFocusedBuildingInfo::MaxHealth' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, bIsAnyTrapAttached) == 0x000028, "Member 'FFortFocusedBuildingInfo::bIsAnyTrapAttached' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, bIsTrapAttachedFacingPlayer) == 0x000029, "Member 'FFortFocusedBuildingInfo::bIsTrapAttachedFacingPlayer' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, bIsPreviewTrapAttached) == 0x00002A, "Member 'FFortFocusedBuildingInfo::bIsPreviewTrapAttached' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, AttachedTrapMaxDurability) == 0x00002C, "Member 'FFortFocusedBuildingInfo::AttachedTrapMaxDurability' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, InteractionType) == 0x000030, "Member 'FFortFocusedBuildingInfo::InteractionType' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, InteractionCost) == 0x000034, "Member 'FFortFocusedBuildingInfo::InteractionCost' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, BuildingMaterial) == 0x000038, "Member 'FFortFocusedBuildingInfo::BuildingMaterial' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, QuickEditClass) == 0x00003C, "Member 'FFortFocusedBuildingInfo::QuickEditClass' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, bIsPlayerBuilt) == 0x000040, "Member 'FFortFocusedBuildingInfo::bIsPlayerBuilt' has a wrong offset!");

// ScriptStruct FortniteUI.FortHUDState
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FFortHUDState final
{
public:
	uint8                                         bInBuildMode : 1;                                  // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bInCombatMode : 1;                                 // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bInEditMode : 1;                                   // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bInCreativeMode : 1;                               // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bInBattleLabMode : 1;                              // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsParachuteOpen : 1;                              // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsFreeFalling : 1;                                // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bInLockedBus : 1;                                  // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bInUnlockedBus : 1;                                // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOnTargeting : 1;                                  // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOnUsingScopeTargeting : 1;                        // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOnCanTarget : 1;                                  // 0x0001(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOnCanUseScopeTargeting : 1;                       // 0x0001(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOnCanUseSecondaryAbility : 1;                     // 0x0001(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCanOpenChute : 1;                                 // 0x0001(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCrouching : 1;                                    // 0x0001(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDBNO : 1;                                         // 0x0002(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsControllingRCPawn : 1;                          // 0x0002(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsInVehicle : 1;                                  // 0x0002(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsDrivingVehicle : 1;                             // 0x0002(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCanSwapSeats : 1;                                 // 0x0002(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsCarryingDBNO : 1;                               // 0x0002(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsCarryingHeldObject : 1;                         // 0x0002(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsZiplining : 1;                                  // 0x0002(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsCreativeFlying : 1;                             // 0x0003(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bImprovedDBNO : 1;                                 // 0x0003(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
};
static_assert(alignof(FFortHUDState) == 0x000004, "Wrong alignment on FFortHUDState");
static_assert(sizeof(FFortHUDState) == 0x000004, "Wrong size on FFortHUDState");

// ScriptStruct FortniteUI.FortItemListOptionBucket
// 0x0020 (0x0020 - 0x0000)
struct FFortItemListOptionBucket final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemIndex;                                         // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortItemListOptionProxy*>       ItemOptionData;                                    // 0x0010(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemListOptionBucket) == 0x000008, "Wrong alignment on FFortItemListOptionBucket");
static_assert(sizeof(FFortItemListOptionBucket) == 0x000020, "Wrong size on FFortItemListOptionBucket");
static_assert(offsetof(FFortItemListOptionBucket, ItemIndex) == 0x000008, "Member 'FFortItemListOptionBucket::ItemIndex' has a wrong offset!");
static_assert(offsetof(FFortItemListOptionBucket, ItemOptionData) == 0x000010, "Member 'FFortItemListOptionBucket::ItemOptionData' has a wrong offset!");

// ScriptStruct FortniteUI.UINavigationData
// 0x0028 (0x0028 - 0x0000)
struct FUINavigationData final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UObject*                                ObjectData;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IdData;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntData;                                           // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUINavigationData) == 0x000008, "Wrong alignment on FUINavigationData");
static_assert(sizeof(FUINavigationData) == 0x000028, "Wrong size on FUINavigationData");
static_assert(offsetof(FUINavigationData, DisplayName) == 0x000000, "Member 'FUINavigationData::DisplayName' has a wrong offset!");
static_assert(offsetof(FUINavigationData, ObjectData) == 0x000018, "Member 'FUINavigationData::ObjectData' has a wrong offset!");
static_assert(offsetof(FUINavigationData, IdData) == 0x000020, "Member 'FUINavigationData::IdData' has a wrong offset!");
static_assert(offsetof(FUINavigationData, IntData) == 0x000024, "Member 'FUINavigationData::IntData' has a wrong offset!");

// ScriptStruct FortniteUI.FortAthenaItemManagementInventoryFilterTabLabelInfo
// 0x0020 (0x0100 - 0x00E0)
struct FFortAthenaItemManagementInventoryFilterTabLabelInfo final : public FFortTabButtonLabelInfo
{
public:
	class FName                                   FilterTabNameId;                                   // 0x00E0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowEmptySlotItem;                               // 0x00E4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E5[0x3];                                       // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   EmptyFilterDisplay;                                // 0x00E8(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAthenaItemManagementInventoryFilterTabLabelInfo) == 0x000010, "Wrong alignment on FFortAthenaItemManagementInventoryFilterTabLabelInfo");
static_assert(sizeof(FFortAthenaItemManagementInventoryFilterTabLabelInfo) == 0x000100, "Wrong size on FFortAthenaItemManagementInventoryFilterTabLabelInfo");
static_assert(offsetof(FFortAthenaItemManagementInventoryFilterTabLabelInfo, FilterTabNameId) == 0x0000E0, "Member 'FFortAthenaItemManagementInventoryFilterTabLabelInfo::FilterTabNameId' has a wrong offset!");
static_assert(offsetof(FFortAthenaItemManagementInventoryFilterTabLabelInfo, bAllowEmptySlotItem) == 0x0000E4, "Member 'FFortAthenaItemManagementInventoryFilterTabLabelInfo::bAllowEmptySlotItem' has a wrong offset!");
static_assert(offsetof(FFortAthenaItemManagementInventoryFilterTabLabelInfo, EmptyFilterDisplay) == 0x0000E8, "Member 'FFortAthenaItemManagementInventoryFilterTabLabelInfo::EmptyFilterDisplay' has a wrong offset!");

// ScriptStruct FortniteUI.AthenaWinnerInfo
// 0x0020 (0x0020 - 0x0000)
struct FAthenaWinnerInfo final
{
public:
	class FString                                 BigNameWinnerName;                                 // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         WinnerNames;                                       // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaWinnerInfo) == 0x000008, "Wrong alignment on FAthenaWinnerInfo");
static_assert(sizeof(FAthenaWinnerInfo) == 0x000020, "Wrong size on FAthenaWinnerInfo");
static_assert(offsetof(FAthenaWinnerInfo, BigNameWinnerName) == 0x000000, "Member 'FAthenaWinnerInfo::BigNameWinnerName' has a wrong offset!");
static_assert(offsetof(FAthenaWinnerInfo, WinnerNames) == 0x000010, "Member 'FAthenaWinnerInfo::WinnerNames' has a wrong offset!");

// ScriptStruct FortniteUI.CrewTileDetailsData
// 0x0088 (0x0088 - 0x0000)
struct FCrewTileDetailsData final
{
public:
	class FString                                 TileImageURL;                                      // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0010(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0028(0x0018)(NativeAccessSpecifierPublic)
	ECrewDetailsTag                               Tag;                                               // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BackgroundImageURL;                                // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ColorA;                                            // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ColorB;                                            // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ColorC;                                            // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCrewTileDetailsData) == 0x000008, "Wrong alignment on FCrewTileDetailsData");
static_assert(sizeof(FCrewTileDetailsData) == 0x000088, "Wrong size on FCrewTileDetailsData");
static_assert(offsetof(FCrewTileDetailsData, TileImageURL) == 0x000000, "Member 'FCrewTileDetailsData::TileImageURL' has a wrong offset!");
static_assert(offsetof(FCrewTileDetailsData, Title) == 0x000010, "Member 'FCrewTileDetailsData::Title' has a wrong offset!");
static_assert(offsetof(FCrewTileDetailsData, Description) == 0x000028, "Member 'FCrewTileDetailsData::Description' has a wrong offset!");
static_assert(offsetof(FCrewTileDetailsData, Tag) == 0x000040, "Member 'FCrewTileDetailsData::Tag' has a wrong offset!");
static_assert(offsetof(FCrewTileDetailsData, BackgroundImageURL) == 0x000048, "Member 'FCrewTileDetailsData::BackgroundImageURL' has a wrong offset!");
static_assert(offsetof(FCrewTileDetailsData, ColorA) == 0x000058, "Member 'FCrewTileDetailsData::ColorA' has a wrong offset!");
static_assert(offsetof(FCrewTileDetailsData, ColorB) == 0x000068, "Member 'FCrewTileDetailsData::ColorB' has a wrong offset!");
static_assert(offsetof(FCrewTileDetailsData, ColorC) == 0x000078, "Member 'FCrewTileDetailsData::ColorC' has a wrong offset!");

// ScriptStruct FortniteUI.CrewTileDataBasic
// 0x00B0 (0x00B0 - 0x0000)
struct FCrewTileDataBasic
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	ECrewTileType                                 TileType;                                          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TileLabel;                                         // 0x0010(0x0018)(NativeAccessSpecifierPublic)
	struct FCrewTileDetailsData                   Details;                                           // 0x0028(0x0088)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FCrewTileDataBasic) == 0x000008, "Wrong alignment on FCrewTileDataBasic");
static_assert(sizeof(FCrewTileDataBasic) == 0x0000B0, "Wrong size on FCrewTileDataBasic");
static_assert(offsetof(FCrewTileDataBasic, TileType) == 0x000008, "Member 'FCrewTileDataBasic::TileType' has a wrong offset!");
static_assert(offsetof(FCrewTileDataBasic, TileLabel) == 0x000010, "Member 'FCrewTileDataBasic::TileLabel' has a wrong offset!");
static_assert(offsetof(FCrewTileDataBasic, Details) == 0x000028, "Member 'FCrewTileDataBasic::Details' has a wrong offset!");

// ScriptStruct FortniteUI.CrewTileDataProgressiveCosmetic
// 0x0000 (0x00B0 - 0x00B0)
struct FCrewTileDataProgressiveCosmetic final : public FCrewTileDataBasic
{
};
static_assert(alignof(FCrewTileDataProgressiveCosmetic) == 0x000008, "Wrong alignment on FCrewTileDataProgressiveCosmetic");
static_assert(sizeof(FCrewTileDataProgressiveCosmetic) == 0x0000B0, "Wrong size on FCrewTileDataProgressiveCosmetic");

// ScriptStruct FortniteUI.FortRichTextStyleData
// 0x0328 (0x0330 - 0x0008)
struct FFortRichTextStyleData final : public FTableRowBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTextBlockStyle                        TextStyle;                                         // 0x0010(0x0310)(Edit, NativeAccessSpecifierPublic)
	bool                                          bHyperlinkStyle;                                   // 0x0320(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_321[0xF];                                      // 0x0321(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortRichTextStyleData) == 0x000010, "Wrong alignment on FFortRichTextStyleData");
static_assert(sizeof(FFortRichTextStyleData) == 0x000330, "Wrong size on FFortRichTextStyleData");
static_assert(offsetof(FFortRichTextStyleData, TextStyle) == 0x000010, "Member 'FFortRichTextStyleData::TextStyle' has a wrong offset!");
static_assert(offsetof(FFortRichTextStyleData, bHyperlinkStyle) == 0x000320, "Member 'FFortRichTextStyleData::bHyperlinkStyle' has a wrong offset!");

// ScriptStruct FortniteUI.FortPostGameScreenConfig
// 0x0004 (0x0004 - 0x0000)
struct FFortPostGameScreenConfig final
{
public:
	EPostGameClickCatcherMode                     ClickCatcherState;                                 // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPostGameHUDMode                              PostGameHUDMode;                                   // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSohwCinematicBars;                                // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowPlacementOverlay;                             // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPostGameScreenConfig) == 0x000001, "Wrong alignment on FFortPostGameScreenConfig");
static_assert(sizeof(FFortPostGameScreenConfig) == 0x000004, "Wrong size on FFortPostGameScreenConfig");
static_assert(offsetof(FFortPostGameScreenConfig, ClickCatcherState) == 0x000000, "Member 'FFortPostGameScreenConfig::ClickCatcherState' has a wrong offset!");
static_assert(offsetof(FFortPostGameScreenConfig, PostGameHUDMode) == 0x000001, "Member 'FFortPostGameScreenConfig::PostGameHUDMode' has a wrong offset!");
static_assert(offsetof(FFortPostGameScreenConfig, bSohwCinematicBars) == 0x000002, "Member 'FFortPostGameScreenConfig::bSohwCinematicBars' has a wrong offset!");
static_assert(offsetof(FFortPostGameScreenConfig, bShowPlacementOverlay) == 0x000003, "Member 'FFortPostGameScreenConfig::bShowPlacementOverlay' has a wrong offset!");

// ScriptStruct FortniteUI.FortUIStatStyle
// 0x0100 (0x0100 - 0x0000)
struct FFortUIStatStyle final
{
public:
	class FText                                   Name;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   HighestText;                                       // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Icon;                                              // 0x0030(0x00C0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	ECommonNumericType                            NumericType;                                       // 0x00F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinimalNotableValue;                               // 0x00F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortUIStatStyle) == 0x000010, "Wrong alignment on FFortUIStatStyle");
static_assert(sizeof(FFortUIStatStyle) == 0x000100, "Wrong size on FFortUIStatStyle");
static_assert(offsetof(FFortUIStatStyle, Name) == 0x000000, "Member 'FFortUIStatStyle::Name' has a wrong offset!");
static_assert(offsetof(FFortUIStatStyle, HighestText) == 0x000018, "Member 'FFortUIStatStyle::HighestText' has a wrong offset!");
static_assert(offsetof(FFortUIStatStyle, Icon) == 0x000030, "Member 'FFortUIStatStyle::Icon' has a wrong offset!");
static_assert(offsetof(FFortUIStatStyle, NumericType) == 0x0000F0, "Member 'FFortUIStatStyle::NumericType' has a wrong offset!");
static_assert(offsetof(FFortUIStatStyle, MinimalNotableValue) == 0x0000F4, "Member 'FFortUIStatStyle::MinimalNotableValue' has a wrong offset!");

// ScriptStruct FortniteUI.SelectedChallengesData
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FSelectedChallengesData final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsCompleted;                                      // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocked;                                         // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasIconOverride;                                  // 0x0012(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Progress;                                          // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumObjectivesCompleted;                            // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumObjectives;                                     // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSelectedChallengesData) == 0x000008, "Wrong alignment on FSelectedChallengesData");
static_assert(sizeof(FSelectedChallengesData) == 0x000020, "Wrong size on FSelectedChallengesData");
static_assert(offsetof(FSelectedChallengesData, bIsCompleted) == 0x000010, "Member 'FSelectedChallengesData::bIsCompleted' has a wrong offset!");
static_assert(offsetof(FSelectedChallengesData, bIsLocked) == 0x000011, "Member 'FSelectedChallengesData::bIsLocked' has a wrong offset!");
static_assert(offsetof(FSelectedChallengesData, bHasIconOverride) == 0x000012, "Member 'FSelectedChallengesData::bHasIconOverride' has a wrong offset!");
static_assert(offsetof(FSelectedChallengesData, Progress) == 0x000014, "Member 'FSelectedChallengesData::Progress' has a wrong offset!");
static_assert(offsetof(FSelectedChallengesData, NumObjectivesCompleted) == 0x000018, "Member 'FSelectedChallengesData::NumObjectivesCompleted' has a wrong offset!");
static_assert(offsetof(FSelectedChallengesData, NumObjectives) == 0x00001C, "Member 'FSelectedChallengesData::NumObjectives' has a wrong offset!");

// ScriptStruct FortniteUI.FortUINavigationOperation
// 0x0028 (0x0028 - 0x0000)
struct FFortUINavigationOperation final
{
public:
	EFortUINavigationOp                           Operation;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SquadId;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SquadSlotIndex;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PageId;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NodeId;                                            // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItem*                              Item;                                              // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortUIFeature                                Feature;                                           // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFrontendInventoryFilter                  ItemManagementFilter;                              // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortUINavigationOperation) == 0x000008, "Wrong alignment on FFortUINavigationOperation");
static_assert(sizeof(FFortUINavigationOperation) == 0x000028, "Wrong size on FFortUINavigationOperation");
static_assert(offsetof(FFortUINavigationOperation, Operation) == 0x000000, "Member 'FFortUINavigationOperation::Operation' has a wrong offset!");
static_assert(offsetof(FFortUINavigationOperation, SquadId) == 0x000004, "Member 'FFortUINavigationOperation::SquadId' has a wrong offset!");
static_assert(offsetof(FFortUINavigationOperation, SquadSlotIndex) == 0x000008, "Member 'FFortUINavigationOperation::SquadSlotIndex' has a wrong offset!");
static_assert(offsetof(FFortUINavigationOperation, PageId) == 0x00000C, "Member 'FFortUINavigationOperation::PageId' has a wrong offset!");
static_assert(offsetof(FFortUINavigationOperation, NodeId) == 0x000010, "Member 'FFortUINavigationOperation::NodeId' has a wrong offset!");
static_assert(offsetof(FFortUINavigationOperation, Item) == 0x000018, "Member 'FFortUINavigationOperation::Item' has a wrong offset!");
static_assert(offsetof(FFortUINavigationOperation, Feature) == 0x000020, "Member 'FFortUINavigationOperation::Feature' has a wrong offset!");
static_assert(offsetof(FFortUINavigationOperation, ItemManagementFilter) == 0x000021, "Member 'FFortUINavigationOperation::ItemManagementFilter' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_DetailAreaBorder_Configuration
// 0x0014 (0x0014 - 0x0000)
struct FFortItemCard_DetailAreaBorder_Configuration final
{
public:
	float                                         MinimumHeight;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                Padding;                                           // 0x0004(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemCard_DetailAreaBorder_Configuration) == 0x000004, "Wrong alignment on FFortItemCard_DetailAreaBorder_Configuration");
static_assert(sizeof(FFortItemCard_DetailAreaBorder_Configuration) == 0x000014, "Wrong size on FFortItemCard_DetailAreaBorder_Configuration");
static_assert(offsetof(FFortItemCard_DetailAreaBorder_Configuration, MinimumHeight) == 0x000000, "Member 'FFortItemCard_DetailAreaBorder_Configuration::MinimumHeight' has a wrong offset!");
static_assert(offsetof(FFortItemCard_DetailAreaBorder_Configuration, Padding) == 0x000004, "Member 'FFortItemCard_DetailAreaBorder_Configuration::Padding' has a wrong offset!");

// ScriptStruct FortniteUI.PrimaryContentSetup
// 0x0003 (0x0003 - 0x0000)
struct FPrimaryContentSetup final
{
public:
	bool                                          bShowBottomBar;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowChatWidget;                                   // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowTopBar;                                       // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPrimaryContentSetup) == 0x000001, "Wrong alignment on FPrimaryContentSetup");
static_assert(sizeof(FPrimaryContentSetup) == 0x000003, "Wrong size on FPrimaryContentSetup");
static_assert(offsetof(FPrimaryContentSetup, bShowBottomBar) == 0x000000, "Member 'FPrimaryContentSetup::bShowBottomBar' has a wrong offset!");
static_assert(offsetof(FPrimaryContentSetup, bShowChatWidget) == 0x000001, "Member 'FPrimaryContentSetup::bShowChatWidget' has a wrong offset!");
static_assert(offsetof(FPrimaryContentSetup, bShowTopBar) == 0x000002, "Member 'FPrimaryContentSetup::bShowTopBar' has a wrong offset!");

// ScriptStruct FortniteUI.FortTabListRegistrationInfo
// 0x0110 (0x0110 - 0x0000)
struct FFortTabListRegistrationInfo final
{
public:
	class FName                                   TabNameID;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHidden;                                           // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowedInZone;                                    // 0x0005(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0xA];                                        // 0x0006(0x000A)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortTabButtonLabelInfo                TabLabelInfo;                                      // 0x0010(0x00E0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSubclassOf<class UCommonButtonBase>          TabButtonType;                                     // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCommonUserWidget>          TabContentType;                                    // 0x00F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                CreatedTabContentWidget;                           // 0x0100(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_108[0x8];                                      // 0x0108(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortTabListRegistrationInfo) == 0x000010, "Wrong alignment on FFortTabListRegistrationInfo");
static_assert(sizeof(FFortTabListRegistrationInfo) == 0x000110, "Wrong size on FFortTabListRegistrationInfo");
static_assert(offsetof(FFortTabListRegistrationInfo, TabNameID) == 0x000000, "Member 'FFortTabListRegistrationInfo::TabNameID' has a wrong offset!");
static_assert(offsetof(FFortTabListRegistrationInfo, bHidden) == 0x000004, "Member 'FFortTabListRegistrationInfo::bHidden' has a wrong offset!");
static_assert(offsetof(FFortTabListRegistrationInfo, bAllowedInZone) == 0x000005, "Member 'FFortTabListRegistrationInfo::bAllowedInZone' has a wrong offset!");
static_assert(offsetof(FFortTabListRegistrationInfo, TabLabelInfo) == 0x000010, "Member 'FFortTabListRegistrationInfo::TabLabelInfo' has a wrong offset!");
static_assert(offsetof(FFortTabListRegistrationInfo, TabButtonType) == 0x0000F0, "Member 'FFortTabListRegistrationInfo::TabButtonType' has a wrong offset!");
static_assert(offsetof(FFortTabListRegistrationInfo, TabContentType) == 0x0000F8, "Member 'FFortTabListRegistrationInfo::TabContentType' has a wrong offset!");
static_assert(offsetof(FFortTabListRegistrationInfo, CreatedTabContentWidget) == 0x000100, "Member 'FFortTabListRegistrationInfo::CreatedTabContentWidget' has a wrong offset!");

// ScriptStruct FortniteUI.FortCreativeServerDisplayOption
// 0x0038 (0x0040 - 0x0008)
struct FFortCreativeServerDisplayOption final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UTexture>                Image;                                             // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCreativeServerDisplayOption) == 0x000008, "Wrong alignment on FFortCreativeServerDisplayOption");
static_assert(sizeof(FFortCreativeServerDisplayOption) == 0x000040, "Wrong size on FFortCreativeServerDisplayOption");
static_assert(offsetof(FFortCreativeServerDisplayOption, Image) == 0x000008, "Member 'FFortCreativeServerDisplayOption::Image' has a wrong offset!");
static_assert(offsetof(FFortCreativeServerDisplayOption, Color) == 0x000030, "Member 'FFortCreativeServerDisplayOption::Color' has a wrong offset!");

// ScriptStruct FortniteUI.FortBackendVersion
// 0x0098 (0x0098 - 0x0000)
struct alignas(0x08) FFortBackendVersion final
{
public:
	uint8                                         Pad_0[0x98];                                       // 0x0000(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortBackendVersion) == 0x000008, "Wrong alignment on FFortBackendVersion");
static_assert(sizeof(FFortBackendVersion) == 0x000098, "Wrong size on FFortBackendVersion");

// ScriptStruct FortniteUI.SubscriptionContentTabData
// 0x0020 (0x0020 - 0x0000)
struct FSubscriptionContentTabData final
{
public:
	class FText                                   TabName;                                           // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	ESubscriptionContentTab                       TabType;                                           // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSubscriptionContentTabData) == 0x000008, "Wrong alignment on FSubscriptionContentTabData");
static_assert(sizeof(FSubscriptionContentTabData) == 0x000020, "Wrong size on FSubscriptionContentTabData");
static_assert(offsetof(FSubscriptionContentTabData, TabName) == 0x000000, "Member 'FSubscriptionContentTabData::TabName' has a wrong offset!");
static_assert(offsetof(FSubscriptionContentTabData, TabType) == 0x000018, "Member 'FSubscriptionContentTabData::TabType' has a wrong offset!");

// ScriptStruct FortniteUI.FortUIFeatureStruct
// 0x0018 (0x0018 - 0x0000)
struct FFortUIFeatureStruct final
{
public:
	EFortUIFeatureState                           CurrentState;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortUIFeatureState                           ForcedState;                                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortUIFeatureStateReason                     ForcedStateReason;                                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(EFortUIFeature ChangedFeature, EFortUIFeatureState NewState, EFortUIFeatureStateReason StateReason)> ChangeDelegate;                                    // 0x0008(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortUIFeatureStruct) == 0x000008, "Wrong alignment on FFortUIFeatureStruct");
static_assert(sizeof(FFortUIFeatureStruct) == 0x000018, "Wrong size on FFortUIFeatureStruct");
static_assert(offsetof(FFortUIFeatureStruct, CurrentState) == 0x000000, "Member 'FFortUIFeatureStruct::CurrentState' has a wrong offset!");
static_assert(offsetof(FFortUIFeatureStruct, ForcedState) == 0x000001, "Member 'FFortUIFeatureStruct::ForcedState' has a wrong offset!");
static_assert(offsetof(FFortUIFeatureStruct, ForcedStateReason) == 0x000002, "Member 'FFortUIFeatureStruct::ForcedStateReason' has a wrong offset!");
static_assert(offsetof(FFortUIFeatureStruct, ChangeDelegate) == 0x000008, "Member 'FFortUIFeatureStruct::ChangeDelegate' has a wrong offset!");

// ScriptStruct FortniteUI.AthenaSubscriptionProgressiveInfo
// 0x0028 (0x0028 - 0x0000)
struct FAthenaSubscriptionProgressiveInfo final
{
public:
	TArray<class FText>                           InfoModalEntries;                                  // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   NewStagesUnlockFinePrint;                          // 0x0010(0x0018)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaSubscriptionProgressiveInfo) == 0x000008, "Wrong alignment on FAthenaSubscriptionProgressiveInfo");
static_assert(sizeof(FAthenaSubscriptionProgressiveInfo) == 0x000028, "Wrong size on FAthenaSubscriptionProgressiveInfo");
static_assert(offsetof(FAthenaSubscriptionProgressiveInfo, InfoModalEntries) == 0x000000, "Member 'FAthenaSubscriptionProgressiveInfo::InfoModalEntries' has a wrong offset!");
static_assert(offsetof(FAthenaSubscriptionProgressiveInfo, NewStagesUnlockFinePrint) == 0x000010, "Member 'FAthenaSubscriptionProgressiveInfo::NewStagesUnlockFinePrint' has a wrong offset!");

// ScriptStruct FortniteUI.FortAthenaTutorialHighlightInfo
// 0x0048 (0x0048 - 0x0000)
struct FFortAthenaTutorialHighlightInfo final
{
public:
	struct FGameplayTag                           WidgetToHighlight;                                 // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ItemHighlightTag;                                  // 0x0004(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                HighlightMargin;                                   // 0x0008(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   HighlightWidgetOverride;                           // 0x0018(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLegacyHighlight;                                // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAthenaTutorialHighlightInfo) == 0x000008, "Wrong alignment on FFortAthenaTutorialHighlightInfo");
static_assert(sizeof(FFortAthenaTutorialHighlightInfo) == 0x000048, "Wrong size on FFortAthenaTutorialHighlightInfo");
static_assert(offsetof(FFortAthenaTutorialHighlightInfo, WidgetToHighlight) == 0x000000, "Member 'FFortAthenaTutorialHighlightInfo::WidgetToHighlight' has a wrong offset!");
static_assert(offsetof(FFortAthenaTutorialHighlightInfo, ItemHighlightTag) == 0x000004, "Member 'FFortAthenaTutorialHighlightInfo::ItemHighlightTag' has a wrong offset!");
static_assert(offsetof(FFortAthenaTutorialHighlightInfo, HighlightMargin) == 0x000008, "Member 'FFortAthenaTutorialHighlightInfo::HighlightMargin' has a wrong offset!");
static_assert(offsetof(FFortAthenaTutorialHighlightInfo, HighlightWidgetOverride) == 0x000018, "Member 'FFortAthenaTutorialHighlightInfo::HighlightWidgetOverride' has a wrong offset!");
static_assert(offsetof(FFortAthenaTutorialHighlightInfo, bIsLegacyHighlight) == 0x000040, "Member 'FFortAthenaTutorialHighlightInfo::bIsLegacyHighlight' has a wrong offset!");

// ScriptStruct FortniteUI.FortAthenaTutorialScreenInfo
// 0x0100 (0x0100 - 0x0000)
struct FFortAthenaTutorialScreenInfo final
{
public:
	EFortAthenaTutorialSubstep                    Substep;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              TextPromptPosition;                                // 0x0008(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TextPromptPosition_AthenaHUD;                      // 0x0018(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAnchors                               TextPromptAnchors;                                 // 0x0028(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FAnchors                               TextPromptAnchors_AthenaHUD;                       // 0x0048(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class FText                                   TextPromptText_Touch;                              // 0x0068(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   TextPromptText_Gamepad;                            // 0x0080(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   TextPromptText_TouchLegacy;                        // 0x0098(0x0018)(Edit, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    ActionWidget_DataTableRow;                         // 0x00B0(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           KeybindWidget_NameArray;                           // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           KeybindWidget_GamepadNameArray;                    // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ForceSingleInputKeybind;                           // 0x00E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortAthenaTutorialHighlightInfo> HighlightInfo;                                     // 0x00E8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          DisplayNextButton;                                 // 0x00F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisplayTextPromptTarget;                           // 0x00F9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAthenaTutorialScreenExtraWidget          ExtraWidget;                                       // 0x00FA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FB[0x5];                                       // 0x00FB(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAthenaTutorialScreenInfo) == 0x000008, "Wrong alignment on FFortAthenaTutorialScreenInfo");
static_assert(sizeof(FFortAthenaTutorialScreenInfo) == 0x000100, "Wrong size on FFortAthenaTutorialScreenInfo");
static_assert(offsetof(FFortAthenaTutorialScreenInfo, Substep) == 0x000000, "Member 'FFortAthenaTutorialScreenInfo::Substep' has a wrong offset!");
static_assert(offsetof(FFortAthenaTutorialScreenInfo, TextPromptPosition) == 0x000008, "Member 'FFortAthenaTutorialScreenInfo::TextPromptPosition' has a wrong offset!");
static_assert(offsetof(FFortAthenaTutorialScreenInfo, TextPromptPosition_AthenaHUD) == 0x000018, "Member 'FFortAthenaTutorialScreenInfo::TextPromptPosition_AthenaHUD' has a wrong offset!");
static_assert(offsetof(FFortAthenaTutorialScreenInfo, TextPromptAnchors) == 0x000028, "Member 'FFortAthenaTutorialScreenInfo::TextPromptAnchors' has a wrong offset!");
static_assert(offsetof(FFortAthenaTutorialScreenInfo, TextPromptAnchors_AthenaHUD) == 0x000048, "Member 'FFortAthenaTutorialScreenInfo::TextPromptAnchors_AthenaHUD' has a wrong offset!");
static_assert(offsetof(FFortAthenaTutorialScreenInfo, TextPromptText_Touch) == 0x000068, "Member 'FFortAthenaTutorialScreenInfo::TextPromptText_Touch' has a wrong offset!");
static_assert(offsetof(FFortAthenaTutorialScreenInfo, TextPromptText_Gamepad) == 0x000080, "Member 'FFortAthenaTutorialScreenInfo::TextPromptText_Gamepad' has a wrong offset!");
static_assert(offsetof(FFortAthenaTutorialScreenInfo, TextPromptText_TouchLegacy) == 0x000098, "Member 'FFortAthenaTutorialScreenInfo::TextPromptText_TouchLegacy' has a wrong offset!");
static_assert(offsetof(FFortAthenaTutorialScreenInfo, ActionWidget_DataTableRow) == 0x0000B0, "Member 'FFortAthenaTutorialScreenInfo::ActionWidget_DataTableRow' has a wrong offset!");
static_assert(offsetof(FFortAthenaTutorialScreenInfo, KeybindWidget_NameArray) == 0x0000C0, "Member 'FFortAthenaTutorialScreenInfo::KeybindWidget_NameArray' has a wrong offset!");
static_assert(offsetof(FFortAthenaTutorialScreenInfo, KeybindWidget_GamepadNameArray) == 0x0000D0, "Member 'FFortAthenaTutorialScreenInfo::KeybindWidget_GamepadNameArray' has a wrong offset!");
static_assert(offsetof(FFortAthenaTutorialScreenInfo, ForceSingleInputKeybind) == 0x0000E0, "Member 'FFortAthenaTutorialScreenInfo::ForceSingleInputKeybind' has a wrong offset!");
static_assert(offsetof(FFortAthenaTutorialScreenInfo, HighlightInfo) == 0x0000E8, "Member 'FFortAthenaTutorialScreenInfo::HighlightInfo' has a wrong offset!");
static_assert(offsetof(FFortAthenaTutorialScreenInfo, DisplayNextButton) == 0x0000F8, "Member 'FFortAthenaTutorialScreenInfo::DisplayNextButton' has a wrong offset!");
static_assert(offsetof(FFortAthenaTutorialScreenInfo, DisplayTextPromptTarget) == 0x0000F9, "Member 'FFortAthenaTutorialScreenInfo::DisplayTextPromptTarget' has a wrong offset!");
static_assert(offsetof(FFortAthenaTutorialScreenInfo, ExtraWidget) == 0x0000FA, "Member 'FFortAthenaTutorialScreenInfo::ExtraWidget' has a wrong offset!");

// ScriptStruct FortniteUI.FortAthenaTutorialStepInfo
// 0x0018 (0x0018 - 0x0000)
struct FFortAthenaTutorialStepInfo final
{
public:
	EFortAthenaTutorialStep                       TutorialStep;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortAthenaTutorialScreenInfo>  StepScreenInfo;                                    // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAthenaTutorialStepInfo) == 0x000008, "Wrong alignment on FFortAthenaTutorialStepInfo");
static_assert(sizeof(FFortAthenaTutorialStepInfo) == 0x000018, "Wrong size on FFortAthenaTutorialStepInfo");
static_assert(offsetof(FFortAthenaTutorialStepInfo, TutorialStep) == 0x000000, "Member 'FFortAthenaTutorialStepInfo::TutorialStep' has a wrong offset!");
static_assert(offsetof(FFortAthenaTutorialStepInfo, StepScreenInfo) == 0x000008, "Member 'FFortAthenaTutorialStepInfo::StepScreenInfo' has a wrong offset!");

// ScriptStruct FortniteUI.FortAttributeModifierDisplayData
// 0x00C0 (0x00C0 - 0x0000)
struct FFortAttributeModifierDisplayData final
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayModOp                                ModifierType;                                      // 0x003C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagRequirements               SourceTags;                                        // 0x0040(0x0040)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagRequirements               TargetTags;                                        // 0x0080(0x0040)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAttributeModifierDisplayData) == 0x000008, "Wrong alignment on FFortAttributeModifierDisplayData");
static_assert(sizeof(FFortAttributeModifierDisplayData) == 0x0000C0, "Wrong size on FFortAttributeModifierDisplayData");
static_assert(offsetof(FFortAttributeModifierDisplayData, Attribute) == 0x000000, "Member 'FFortAttributeModifierDisplayData::Attribute' has a wrong offset!");
static_assert(offsetof(FFortAttributeModifierDisplayData, Value) == 0x000038, "Member 'FFortAttributeModifierDisplayData::Value' has a wrong offset!");
static_assert(offsetof(FFortAttributeModifierDisplayData, ModifierType) == 0x00003C, "Member 'FFortAttributeModifierDisplayData::ModifierType' has a wrong offset!");
static_assert(offsetof(FFortAttributeModifierDisplayData, SourceTags) == 0x000040, "Member 'FFortAttributeModifierDisplayData::SourceTags' has a wrong offset!");
static_assert(offsetof(FFortAttributeModifierDisplayData, TargetTags) == 0x000080, "Member 'FFortAttributeModifierDisplayData::TargetTags' has a wrong offset!");

// ScriptStruct FortniteUI.CrewSubscriptionStateModal
// 0x0018 (0x0018 - 0x0000)
struct FCrewSubscriptionStateModal final
{
public:
	EMcpSubscriptionState                         SubscriptionState;                                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           BulletPoints;                                      // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCrewSubscriptionStateModal) == 0x000008, "Wrong alignment on FCrewSubscriptionStateModal");
static_assert(sizeof(FCrewSubscriptionStateModal) == 0x000018, "Wrong size on FCrewSubscriptionStateModal");
static_assert(offsetof(FCrewSubscriptionStateModal, SubscriptionState) == 0x000000, "Member 'FCrewSubscriptionStateModal::SubscriptionState' has a wrong offset!");
static_assert(offsetof(FCrewSubscriptionStateModal, BulletPoints) == 0x000008, "Member 'FCrewSubscriptionStateModal::BulletPoints' has a wrong offset!");

// ScriptStruct FortniteUI.CrewPlatformAndCountriesPair
// 0x0018 (0x0018 - 0x0000)
struct FCrewPlatformAndCountriesPair final
{
public:
	EAppStore                                     SubscriptionPlatform;                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CountryCodes;                                      // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCrewPlatformAndCountriesPair) == 0x000008, "Wrong alignment on FCrewPlatformAndCountriesPair");
static_assert(sizeof(FCrewPlatformAndCountriesPair) == 0x000018, "Wrong size on FCrewPlatformAndCountriesPair");
static_assert(offsetof(FCrewPlatformAndCountriesPair, SubscriptionPlatform) == 0x000000, "Member 'FCrewPlatformAndCountriesPair::SubscriptionPlatform' has a wrong offset!");
static_assert(offsetof(FCrewPlatformAndCountriesPair, CountryCodes) == 0x000008, "Member 'FCrewPlatformAndCountriesPair::CountryCodes' has a wrong offset!");

// ScriptStruct FortniteUI.CrewPlatformAndCountriesNotificationModal
// 0x0150 (0x0150 - 0x0000)
struct FCrewPlatformAndCountriesNotificationModal final
{
public:
	class FString                                 NotificationId;                                    // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCrewPlatformAndCountriesPair>  ValidPlatformAndCountriesPairs;                    // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0020(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   DefaultBodyText;                                   // 0x0038(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   BodyTextIfSubscriptionCanceled;                    // 0x0050(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   BodyTextIfNoBodyTable;                             // 0x0068(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   BodyTextIfNoBodyTableAndSubscriptionCanceled;      // 0x0080(0x0018)(NativeAccessSpecifierPublic)
	struct FDateTime                              EffectiveDate;                                     // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCrewPlatformTable>             PlatformSpecificBodyTables;                        // 0x00A0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   CheckboxText;                                      // 0x00B0(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   DefaultConfirmButtonText;                          // 0x00C8(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   ConfirmButtonTextIfSubscriptionCanceled;           // 0x00E0(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   CancelSubscriptionButtonText;                      // 0x00F8(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   MoreInfoText;                                      // 0x0110(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   MoreInfoUrl;                                       // 0x0128(0x0018)(NativeAccessSpecifierPublic)
	struct FDateTime                              NotificationStartDate;                             // 0x0140(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              NotificationEndDate;                               // 0x0148(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCrewPlatformAndCountriesNotificationModal) == 0x000008, "Wrong alignment on FCrewPlatformAndCountriesNotificationModal");
static_assert(sizeof(FCrewPlatformAndCountriesNotificationModal) == 0x000150, "Wrong size on FCrewPlatformAndCountriesNotificationModal");
static_assert(offsetof(FCrewPlatformAndCountriesNotificationModal, NotificationId) == 0x000000, "Member 'FCrewPlatformAndCountriesNotificationModal::NotificationId' has a wrong offset!");
static_assert(offsetof(FCrewPlatformAndCountriesNotificationModal, ValidPlatformAndCountriesPairs) == 0x000010, "Member 'FCrewPlatformAndCountriesNotificationModal::ValidPlatformAndCountriesPairs' has a wrong offset!");
static_assert(offsetof(FCrewPlatformAndCountriesNotificationModal, Title) == 0x000020, "Member 'FCrewPlatformAndCountriesNotificationModal::Title' has a wrong offset!");
static_assert(offsetof(FCrewPlatformAndCountriesNotificationModal, DefaultBodyText) == 0x000038, "Member 'FCrewPlatformAndCountriesNotificationModal::DefaultBodyText' has a wrong offset!");
static_assert(offsetof(FCrewPlatformAndCountriesNotificationModal, BodyTextIfSubscriptionCanceled) == 0x000050, "Member 'FCrewPlatformAndCountriesNotificationModal::BodyTextIfSubscriptionCanceled' has a wrong offset!");
static_assert(offsetof(FCrewPlatformAndCountriesNotificationModal, BodyTextIfNoBodyTable) == 0x000068, "Member 'FCrewPlatformAndCountriesNotificationModal::BodyTextIfNoBodyTable' has a wrong offset!");
static_assert(offsetof(FCrewPlatformAndCountriesNotificationModal, BodyTextIfNoBodyTableAndSubscriptionCanceled) == 0x000080, "Member 'FCrewPlatformAndCountriesNotificationModal::BodyTextIfNoBodyTableAndSubscriptionCanceled' has a wrong offset!");
static_assert(offsetof(FCrewPlatformAndCountriesNotificationModal, EffectiveDate) == 0x000098, "Member 'FCrewPlatformAndCountriesNotificationModal::EffectiveDate' has a wrong offset!");
static_assert(offsetof(FCrewPlatformAndCountriesNotificationModal, PlatformSpecificBodyTables) == 0x0000A0, "Member 'FCrewPlatformAndCountriesNotificationModal::PlatformSpecificBodyTables' has a wrong offset!");
static_assert(offsetof(FCrewPlatformAndCountriesNotificationModal, CheckboxText) == 0x0000B0, "Member 'FCrewPlatformAndCountriesNotificationModal::CheckboxText' has a wrong offset!");
static_assert(offsetof(FCrewPlatformAndCountriesNotificationModal, DefaultConfirmButtonText) == 0x0000C8, "Member 'FCrewPlatformAndCountriesNotificationModal::DefaultConfirmButtonText' has a wrong offset!");
static_assert(offsetof(FCrewPlatformAndCountriesNotificationModal, ConfirmButtonTextIfSubscriptionCanceled) == 0x0000E0, "Member 'FCrewPlatformAndCountriesNotificationModal::ConfirmButtonTextIfSubscriptionCanceled' has a wrong offset!");
static_assert(offsetof(FCrewPlatformAndCountriesNotificationModal, CancelSubscriptionButtonText) == 0x0000F8, "Member 'FCrewPlatformAndCountriesNotificationModal::CancelSubscriptionButtonText' has a wrong offset!");
static_assert(offsetof(FCrewPlatformAndCountriesNotificationModal, MoreInfoText) == 0x000110, "Member 'FCrewPlatformAndCountriesNotificationModal::MoreInfoText' has a wrong offset!");
static_assert(offsetof(FCrewPlatformAndCountriesNotificationModal, MoreInfoUrl) == 0x000128, "Member 'FCrewPlatformAndCountriesNotificationModal::MoreInfoUrl' has a wrong offset!");
static_assert(offsetof(FCrewPlatformAndCountriesNotificationModal, NotificationStartDate) == 0x000140, "Member 'FCrewPlatformAndCountriesNotificationModal::NotificationStartDate' has a wrong offset!");
static_assert(offsetof(FCrewPlatformAndCountriesNotificationModal, NotificationEndDate) == 0x000148, "Member 'FCrewPlatformAndCountriesNotificationModal::NotificationEndDate' has a wrong offset!");

// ScriptStruct FortniteUI.CrewModals
// 0x0020 (0x0020 - 0x0000)
struct FCrewModals final
{
public:
	TArray<struct FCrewSubscriptionStateModal>    CancellationInfoErrorStateModals;                  // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCrewPlatformAndCountriesNotificationModal> PlatformAndCountriesNotificationModals;            // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCrewModals) == 0x000008, "Wrong alignment on FCrewModals");
static_assert(sizeof(FCrewModals) == 0x000020, "Wrong size on FCrewModals");
static_assert(offsetof(FCrewModals, CancellationInfoErrorStateModals) == 0x000000, "Member 'FCrewModals::CancellationInfoErrorStateModals' has a wrong offset!");
static_assert(offsetof(FCrewModals, PlatformAndCountriesNotificationModals) == 0x000010, "Member 'FCrewModals::PlatformAndCountriesNotificationModals' has a wrong offset!");

// ScriptStruct FortniteUI.UIStateTag
// 0x0000 (0x0004 - 0x0004)
struct FUIStateTag : public FUITag
{
};
static_assert(alignof(FUIStateTag) == 0x000004, "Wrong alignment on FUIStateTag");
static_assert(sizeof(FUIStateTag) == 0x000004, "Wrong size on FUIStateTag");

// ScriptStruct FortniteUI.UIStateTag_FortStartup
// 0x0000 (0x0004 - 0x0004)
struct FUIStateTag_FortStartup final : public FUIStateTag
{
};
static_assert(alignof(FUIStateTag_FortStartup) == 0x000004, "Wrong alignment on FUIStateTag_FortStartup");
static_assert(sizeof(FUIStateTag_FortStartup) == 0x000004, "Wrong size on FUIStateTag_FortStartup");

// ScriptStruct FortniteUI.FortReceivedItemLootInfo
// 0x00C8 (0x00C8 - 0x0000)
struct FFortReceivedItemLootInfo final
{
public:
	struct FFortItemHeaderInformation             HeaderInformation;                                 // 0x0000(0x0098)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UFortItem*                              GeneratedItemInstance;                             // 0x0098(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItemDefinition*                    ItemDef;                                           // 0x00A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TemplateId;                                        // 0x00A8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x00B8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0xC];                                       // 0x00BC(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortReceivedItemLootInfo) == 0x000008, "Wrong alignment on FFortReceivedItemLootInfo");
static_assert(sizeof(FFortReceivedItemLootInfo) == 0x0000C8, "Wrong size on FFortReceivedItemLootInfo");
static_assert(offsetof(FFortReceivedItemLootInfo, HeaderInformation) == 0x000000, "Member 'FFortReceivedItemLootInfo::HeaderInformation' has a wrong offset!");
static_assert(offsetof(FFortReceivedItemLootInfo, GeneratedItemInstance) == 0x000098, "Member 'FFortReceivedItemLootInfo::GeneratedItemInstance' has a wrong offset!");
static_assert(offsetof(FFortReceivedItemLootInfo, ItemDef) == 0x0000A0, "Member 'FFortReceivedItemLootInfo::ItemDef' has a wrong offset!");
static_assert(offsetof(FFortReceivedItemLootInfo, TemplateId) == 0x0000A8, "Member 'FFortReceivedItemLootInfo::TemplateId' has a wrong offset!");
static_assert(offsetof(FFortReceivedItemLootInfo, Quantity) == 0x0000B8, "Member 'FFortReceivedItemLootInfo::Quantity' has a wrong offset!");

// ScriptStruct FortniteUI.FortVideoInfo
// 0x0030 (0x0030 - 0x0000)
struct FFortVideoInfo final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             PreviewImage;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMediaSource*                           VideoSource;                                       // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULocalizedOverlays*                     SubtitleOverlays;                                  // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QuestObjectiveName;                                // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        RequiredActiveQuest;                               // 0x0024(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortVideoInfo) == 0x000008, "Wrong alignment on FFortVideoInfo");
static_assert(sizeof(FFortVideoInfo) == 0x000030, "Wrong size on FFortVideoInfo");
static_assert(offsetof(FFortVideoInfo, ID) == 0x000000, "Member 'FFortVideoInfo::ID' has a wrong offset!");
static_assert(offsetof(FFortVideoInfo, PreviewImage) == 0x000008, "Member 'FFortVideoInfo::PreviewImage' has a wrong offset!");
static_assert(offsetof(FFortVideoInfo, VideoSource) == 0x000010, "Member 'FFortVideoInfo::VideoSource' has a wrong offset!");
static_assert(offsetof(FFortVideoInfo, SubtitleOverlays) == 0x000018, "Member 'FFortVideoInfo::SubtitleOverlays' has a wrong offset!");
static_assert(offsetof(FFortVideoInfo, QuestObjectiveName) == 0x000020, "Member 'FFortVideoInfo::QuestObjectiveName' has a wrong offset!");
static_assert(offsetof(FFortVideoInfo, RequiredActiveQuest) == 0x000024, "Member 'FFortVideoInfo::RequiredActiveQuest' has a wrong offset!");

// ScriptStruct FortniteUI.FortPlayerSurveyCMSCondition
// 0x0050 (0x0050 - 0x0000)
struct FFortPlayerSurveyCMSCondition final
{
public:
	class FString                                 Type;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Operation;                                         // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ComparisonValue;                                   // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ConditionInfo;                                     // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FJsonObjectWrapper>             ChildConditions;                                   // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyCMSCondition) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSCondition");
static_assert(sizeof(FFortPlayerSurveyCMSCondition) == 0x000050, "Wrong size on FFortPlayerSurveyCMSCondition");
static_assert(offsetof(FFortPlayerSurveyCMSCondition, Type) == 0x000000, "Member 'FFortPlayerSurveyCMSCondition::Type' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSCondition, Operation) == 0x000010, "Member 'FFortPlayerSurveyCMSCondition::Operation' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSCondition, ComparisonValue) == 0x000020, "Member 'FFortPlayerSurveyCMSCondition::ComparisonValue' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSCondition, ConditionInfo) == 0x000030, "Member 'FFortPlayerSurveyCMSCondition::ConditionInfo' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSCondition, ChildConditions) == 0x000040, "Member 'FFortPlayerSurveyCMSCondition::ChildConditions' has a wrong offset!");

// ScriptStruct FortniteUI.FortPlayerSurveyCMSConditionGroup
// 0x0020 (0x0020 - 0x0000)
struct FFortPlayerSurveyCMSConditionGroup final
{
public:
	class FString                                 ConditionGroupID;                                  // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortPlayerSurveyCMSCondition>  Conditions;                                        // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyCMSConditionGroup) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSConditionGroup");
static_assert(sizeof(FFortPlayerSurveyCMSConditionGroup) == 0x000020, "Wrong size on FFortPlayerSurveyCMSConditionGroup");
static_assert(offsetof(FFortPlayerSurveyCMSConditionGroup, ConditionGroupID) == 0x000000, "Member 'FFortPlayerSurveyCMSConditionGroup::ConditionGroupID' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSConditionGroup, Conditions) == 0x000010, "Member 'FFortPlayerSurveyCMSConditionGroup::Conditions' has a wrong offset!");

// ScriptStruct FortniteUI.FortPlayerSurveyLocalizableText
// 0x0020 (0x0020 - 0x0000)
struct FFortPlayerSurveyLocalizableText final
{
public:
	class FString                                 TextID;                                            // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LocalizedText;                                     // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyLocalizableText) == 0x000008, "Wrong alignment on FFortPlayerSurveyLocalizableText");
static_assert(sizeof(FFortPlayerSurveyLocalizableText) == 0x000020, "Wrong size on FFortPlayerSurveyLocalizableText");
static_assert(offsetof(FFortPlayerSurveyLocalizableText, TextID) == 0x000000, "Member 'FFortPlayerSurveyLocalizableText::TextID' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyLocalizableText, LocalizedText) == 0x000010, "Member 'FFortPlayerSurveyLocalizableText::LocalizedText' has a wrong offset!");

// ScriptStruct FortniteUI.FortPlayerSurveyCMSQuestion
// 0x0050 (0x0050 - 0x0000)
struct FFortPlayerSurveyCMSQuestion final
{
public:
	struct FFortPlayerSurveyLocalizableText       QuestionText;                                      // 0x0000(0x0020)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        NumberOfOptions;                                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortPlayerSurveyLocalizableText> Responses;                                         // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bRandomizeResponseOrder;                           // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPlayerSurveyCMSQuestion) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSQuestion");
static_assert(sizeof(FFortPlayerSurveyCMSQuestion) == 0x000050, "Wrong size on FFortPlayerSurveyCMSQuestion");
static_assert(offsetof(FFortPlayerSurveyCMSQuestion, QuestionText) == 0x000000, "Member 'FFortPlayerSurveyCMSQuestion::QuestionText' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSQuestion, Type) == 0x000020, "Member 'FFortPlayerSurveyCMSQuestion::Type' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSQuestion, NumberOfOptions) == 0x000030, "Member 'FFortPlayerSurveyCMSQuestion::NumberOfOptions' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSQuestion, Responses) == 0x000038, "Member 'FFortPlayerSurveyCMSQuestion::Responses' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSQuestion, bRandomizeResponseOrder) == 0x000048, "Member 'FFortPlayerSurveyCMSQuestion::bRandomizeResponseOrder' has a wrong offset!");

// ScriptStruct FortniteUI.FortPlayerSurveyCMSFrequentlyAskedQuestion
// 0x0060 (0x0060 - 0x0000)
struct FFortPlayerSurveyCMSFrequentlyAskedQuestion final
{
public:
	class FString                                 FrequentlyAskedQuestionID;                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortPlayerSurveyCMSQuestion           Question;                                          // 0x0010(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyCMSFrequentlyAskedQuestion) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSFrequentlyAskedQuestion");
static_assert(sizeof(FFortPlayerSurveyCMSFrequentlyAskedQuestion) == 0x000060, "Wrong size on FFortPlayerSurveyCMSFrequentlyAskedQuestion");
static_assert(offsetof(FFortPlayerSurveyCMSFrequentlyAskedQuestion, FrequentlyAskedQuestionID) == 0x000000, "Member 'FFortPlayerSurveyCMSFrequentlyAskedQuestion::FrequentlyAskedQuestionID' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSFrequentlyAskedQuestion, Question) == 0x000010, "Member 'FFortPlayerSurveyCMSFrequentlyAskedQuestion::Question' has a wrong offset!");

// ScriptStruct FortniteUI.FortPlayerSurveyCMSCustomTextReplacement
// 0x0020 (0x0020 - 0x0000)
struct FFortPlayerSurveyCMSCustomTextReplacement final
{
public:
	class FString                                 TextReplacementTag;                                // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortPlayerSurveyLocalizableText> TextReplacementValues;                             // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyCMSCustomTextReplacement) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSCustomTextReplacement");
static_assert(sizeof(FFortPlayerSurveyCMSCustomTextReplacement) == 0x000020, "Wrong size on FFortPlayerSurveyCMSCustomTextReplacement");
static_assert(offsetof(FFortPlayerSurveyCMSCustomTextReplacement, TextReplacementTag) == 0x000000, "Member 'FFortPlayerSurveyCMSCustomTextReplacement::TextReplacementTag' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSCustomTextReplacement, TextReplacementValues) == 0x000010, "Member 'FFortPlayerSurveyCMSCustomTextReplacement::TextReplacementValues' has a wrong offset!");

// ScriptStruct FortniteUI.FortPlayerSurveyCMSFrequentlyAskedQuestionID
// 0x0010 (0x0010 - 0x0000)
struct FFortPlayerSurveyCMSFrequentlyAskedQuestionID final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyCMSFrequentlyAskedQuestionID) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSFrequentlyAskedQuestionID");
static_assert(sizeof(FFortPlayerSurveyCMSFrequentlyAskedQuestionID) == 0x000010, "Wrong size on FFortPlayerSurveyCMSFrequentlyAskedQuestionID");
static_assert(offsetof(FFortPlayerSurveyCMSFrequentlyAskedQuestionID, ID) == 0x000000, "Member 'FFortPlayerSurveyCMSFrequentlyAskedQuestionID::ID' has a wrong offset!");

// ScriptStruct FortniteUI.FortPlayerSurveyCMSQuestionContainer
// 0x0060 (0x0060 - 0x0000)
struct FFortPlayerSurveyCMSQuestionContainer final
{
public:
	struct FFortPlayerSurveyCMSFrequentlyAskedQuestionID FrequentlyAskedQuestionID;                         // 0x0000(0x0010)(NativeAccessSpecifierPublic)
	struct FFortPlayerSurveyCMSQuestion           Question;                                          // 0x0010(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerSurveyCMSQuestionContainer) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSQuestionContainer");
static_assert(sizeof(FFortPlayerSurveyCMSQuestionContainer) == 0x000060, "Wrong size on FFortPlayerSurveyCMSQuestionContainer");
static_assert(offsetof(FFortPlayerSurveyCMSQuestionContainer, FrequentlyAskedQuestionID) == 0x000000, "Member 'FFortPlayerSurveyCMSQuestionContainer::FrequentlyAskedQuestionID' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSQuestionContainer, Question) == 0x000010, "Member 'FFortPlayerSurveyCMSQuestionContainer::Question' has a wrong offset!");

// ScriptStruct FortniteUI.FortPlayerSurveyCMSSurvey
// 0x0078 (0x0078 - 0x0000)
struct FFortPlayerSurveyCMSSurvey final
{
public:
	class FString                                 SurveyID;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         SurveyTags;                                        // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ConditionGroupIDs;                                 // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortPlayerSurveyCMSCondition>  Conditions;                                        // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortPlayerSurveyCMSQuestionContainer> Questions;                                         // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortPlayerSurveyCMSCustomTextReplacement> TextReplacementOverrides;                          // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bRandomizeQuestionOrder;                           // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPlayerSurveyCMSSurvey) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSSurvey");
static_assert(sizeof(FFortPlayerSurveyCMSSurvey) == 0x000078, "Wrong size on FFortPlayerSurveyCMSSurvey");
static_assert(offsetof(FFortPlayerSurveyCMSSurvey, SurveyID) == 0x000000, "Member 'FFortPlayerSurveyCMSSurvey::SurveyID' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSSurvey, SurveyTags) == 0x000010, "Member 'FFortPlayerSurveyCMSSurvey::SurveyTags' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSSurvey, Title) == 0x000020, "Member 'FFortPlayerSurveyCMSSurvey::Title' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSSurvey, ConditionGroupIDs) == 0x000030, "Member 'FFortPlayerSurveyCMSSurvey::ConditionGroupIDs' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSSurvey, Conditions) == 0x000040, "Member 'FFortPlayerSurveyCMSSurvey::Conditions' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSSurvey, Questions) == 0x000050, "Member 'FFortPlayerSurveyCMSSurvey::Questions' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSSurvey, TextReplacementOverrides) == 0x000060, "Member 'FFortPlayerSurveyCMSSurvey::TextReplacementOverrides' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSSurvey, bRandomizeQuestionOrder) == 0x000070, "Member 'FFortPlayerSurveyCMSSurvey::bRandomizeQuestionOrder' has a wrong offset!");

// ScriptStruct FortniteUI.FortPlayerSurveyCMSData
// 0x0058 (0x0058 - 0x0000)
struct FFortPlayerSurveyCMSData final
{
public:
	TArray<struct FFortPlayerSurveyCMSConditionGroup> ConditionGroups;                                   // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortPlayerSurveyCMSFrequentlyAskedQuestion> FrequentlyAskedQuestions;                          // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortPlayerSurveyCMSCustomTextReplacement> CustomTextReplacements;                            // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortPlayerSurveyCMSCustomTextReplacement> WhitelistedTextReplacements;                       // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortPlayerSurveyCMSSurvey>     Surveys;                                           // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bSurveysEnabled;                                   // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPlayerSurveyCMSData) == 0x000008, "Wrong alignment on FFortPlayerSurveyCMSData");
static_assert(sizeof(FFortPlayerSurveyCMSData) == 0x000058, "Wrong size on FFortPlayerSurveyCMSData");
static_assert(offsetof(FFortPlayerSurveyCMSData, ConditionGroups) == 0x000000, "Member 'FFortPlayerSurveyCMSData::ConditionGroups' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSData, FrequentlyAskedQuestions) == 0x000010, "Member 'FFortPlayerSurveyCMSData::FrequentlyAskedQuestions' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSData, CustomTextReplacements) == 0x000020, "Member 'FFortPlayerSurveyCMSData::CustomTextReplacements' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSData, WhitelistedTextReplacements) == 0x000030, "Member 'FFortPlayerSurveyCMSData::WhitelistedTextReplacements' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSData, Surveys) == 0x000040, "Member 'FFortPlayerSurveyCMSData::Surveys' has a wrong offset!");
static_assert(offsetof(FFortPlayerSurveyCMSData, bSurveysEnabled) == 0x000050, "Member 'FFortPlayerSurveyCMSData::bSurveysEnabled' has a wrong offset!");

// ScriptStruct FortniteUI.FortSimpleWidgetAnimation
// 0x0068 (0x0068 - 0x0000)
struct FFortSimpleWidgetAnimation final
{
public:
	class FName                                   TargetName;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           Translation;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           Scale;                                             // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            Alpha;                                             // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetOnFinish;                                    // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldAnimateTranslation;                         // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldAnimateScale;                               // 0x0022(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldAnimateAlpha;                               // 0x0023(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0xC];                                       // 0x0024(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	class UWorld*                                 World;                                             // 0x0030(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_38[0x30];                                      // 0x0038(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortSimpleWidgetAnimation) == 0x000008, "Wrong alignment on FFortSimpleWidgetAnimation");
static_assert(sizeof(FFortSimpleWidgetAnimation) == 0x000068, "Wrong size on FFortSimpleWidgetAnimation");
static_assert(offsetof(FFortSimpleWidgetAnimation, TargetName) == 0x000000, "Member 'FFortSimpleWidgetAnimation::TargetName' has a wrong offset!");
static_assert(offsetof(FFortSimpleWidgetAnimation, Translation) == 0x000008, "Member 'FFortSimpleWidgetAnimation::Translation' has a wrong offset!");
static_assert(offsetof(FFortSimpleWidgetAnimation, Scale) == 0x000010, "Member 'FFortSimpleWidgetAnimation::Scale' has a wrong offset!");
static_assert(offsetof(FFortSimpleWidgetAnimation, Alpha) == 0x000018, "Member 'FFortSimpleWidgetAnimation::Alpha' has a wrong offset!");
static_assert(offsetof(FFortSimpleWidgetAnimation, bResetOnFinish) == 0x000020, "Member 'FFortSimpleWidgetAnimation::bResetOnFinish' has a wrong offset!");
static_assert(offsetof(FFortSimpleWidgetAnimation, bShouldAnimateTranslation) == 0x000021, "Member 'FFortSimpleWidgetAnimation::bShouldAnimateTranslation' has a wrong offset!");
static_assert(offsetof(FFortSimpleWidgetAnimation, bShouldAnimateScale) == 0x000022, "Member 'FFortSimpleWidgetAnimation::bShouldAnimateScale' has a wrong offset!");
static_assert(offsetof(FFortSimpleWidgetAnimation, bShouldAnimateAlpha) == 0x000023, "Member 'FFortSimpleWidgetAnimation::bShouldAnimateAlpha' has a wrong offset!");
static_assert(offsetof(FFortSimpleWidgetAnimation, World) == 0x000030, "Member 'FFortSimpleWidgetAnimation::World' has a wrong offset!");

// ScriptStruct FortniteUI.FortSettingsFilterState
// 0x03B8 (0x03B8 - 0x0000)
struct FFortSettingsFilterState final
{
public:
	bool                                          bIncludeDisabled;                                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeHidden;                                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeResetable;                                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeNestedPages;                               // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x394];                                      // 0x0004(0x0394)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortSetting*>                   SettingRootList;                                   // 0x0398(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UFortSetting*>                   SettingWhiteList;                                  // 0x03A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortSettingsFilterState) == 0x000008, "Wrong alignment on FFortSettingsFilterState");
static_assert(sizeof(FFortSettingsFilterState) == 0x0003B8, "Wrong size on FFortSettingsFilterState");
static_assert(offsetof(FFortSettingsFilterState, bIncludeDisabled) == 0x000000, "Member 'FFortSettingsFilterState::bIncludeDisabled' has a wrong offset!");
static_assert(offsetof(FFortSettingsFilterState, bIncludeHidden) == 0x000001, "Member 'FFortSettingsFilterState::bIncludeHidden' has a wrong offset!");
static_assert(offsetof(FFortSettingsFilterState, bIncludeResetable) == 0x000002, "Member 'FFortSettingsFilterState::bIncludeResetable' has a wrong offset!");
static_assert(offsetof(FFortSettingsFilterState, bIncludeNestedPages) == 0x000003, "Member 'FFortSettingsFilterState::bIncludeNestedPages' has a wrong offset!");
static_assert(offsetof(FFortSettingsFilterState, SettingRootList) == 0x000398, "Member 'FFortSettingsFilterState::SettingRootList' has a wrong offset!");
static_assert(offsetof(FFortSettingsFilterState, SettingWhiteList) == 0x0003A8, "Member 'FFortSettingsFilterState::SettingWhiteList' has a wrong offset!");

// ScriptStruct FortniteUI.HeistExitCraftIconData
// 0x0010 (0x0010 - 0x0000)
struct FHeistExitCraftIconData final
{
public:
	int32                                         IconIndex;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHeistExitCraftIconState                      IconState;                                         // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHeistExitCraftIconState                      PrevIconState;                                     // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SecondsUntilIncoming;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTeamHasBling;                                     // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHeistExitCraftIconData) == 0x000004, "Wrong alignment on FHeistExitCraftIconData");
static_assert(sizeof(FHeistExitCraftIconData) == 0x000010, "Wrong size on FHeistExitCraftIconData");
static_assert(offsetof(FHeistExitCraftIconData, IconIndex) == 0x000000, "Member 'FHeistExitCraftIconData::IconIndex' has a wrong offset!");
static_assert(offsetof(FHeistExitCraftIconData, IconState) == 0x000004, "Member 'FHeistExitCraftIconData::IconState' has a wrong offset!");
static_assert(offsetof(FHeistExitCraftIconData, PrevIconState) == 0x000005, "Member 'FHeistExitCraftIconData::PrevIconState' has a wrong offset!");
static_assert(offsetof(FHeistExitCraftIconData, SecondsUntilIncoming) == 0x000008, "Member 'FHeistExitCraftIconData::SecondsUntilIncoming' has a wrong offset!");
static_assert(offsetof(FHeistExitCraftIconData, bTeamHasBling) == 0x00000C, "Member 'FHeistExitCraftIconData::bTeamHasBling' has a wrong offset!");

// ScriptStruct FortniteUI.FortSimpleWidgetAnimations
// 0x0030 (0x0030 - 0x0000)
struct FFortSimpleWidgetAnimations final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnabled;                                        // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortSimpleWidgetAnimation>     Targets;                                           // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName Name)> OnAnimationsFinished;                              // 0x0018(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortSimpleWidgetAnimations) == 0x000008, "Wrong alignment on FFortSimpleWidgetAnimations");
static_assert(sizeof(FFortSimpleWidgetAnimations) == 0x000030, "Wrong size on FFortSimpleWidgetAnimations");
static_assert(offsetof(FFortSimpleWidgetAnimations, Name) == 0x000000, "Member 'FFortSimpleWidgetAnimations::Name' has a wrong offset!");
static_assert(offsetof(FFortSimpleWidgetAnimations, bIsEnabled) == 0x000004, "Member 'FFortSimpleWidgetAnimations::bIsEnabled' has a wrong offset!");
static_assert(offsetof(FFortSimpleWidgetAnimations, Targets) == 0x000008, "Member 'FFortSimpleWidgetAnimations::Targets' has a wrong offset!");
static_assert(offsetof(FFortSimpleWidgetAnimations, OnAnimationsFinished) == 0x000018, "Member 'FFortSimpleWidgetAnimations::OnAnimationsFinished' has a wrong offset!");

// ScriptStruct FortniteUI.CrewTileImages
// 0x0020 (0x0020 - 0x0000)
struct FCrewTileImages final
{
public:
	class FString                                 TileImageURL;                                      // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NextTileImageURL;                                  // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCrewTileImages) == 0x000008, "Wrong alignment on FCrewTileImages");
static_assert(sizeof(FCrewTileImages) == 0x000020, "Wrong size on FCrewTileImages");
static_assert(offsetof(FCrewTileImages, TileImageURL) == 0x000000, "Member 'FCrewTileImages::TileImageURL' has a wrong offset!");
static_assert(offsetof(FCrewTileImages, NextTileImageURL) == 0x000010, "Member 'FCrewTileImages::NextTileImageURL' has a wrong offset!");

// ScriptStruct FortniteUI.CrewItemShopTileData
// 0x0060 (0x0060 - 0x0000)
struct FCrewItemShopTileData final
{
public:
	class FText                                   ViolatorText;                                      // 0x0000(0x0018)(NativeAccessSpecifierPublic)
	EViolatorIntensity                            ViolatorIntensity;                                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   NextViolatorText;                                  // 0x0020(0x0018)(NativeAccessSpecifierPublic)
	EViolatorIntensity                            NextViolatorIntensity;                             // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCrewTileImages                        ItemShopTileImages;                                // 0x0040(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FCrewItemShopTileData) == 0x000008, "Wrong alignment on FCrewItemShopTileData");
static_assert(sizeof(FCrewItemShopTileData) == 0x000060, "Wrong size on FCrewItemShopTileData");
static_assert(offsetof(FCrewItemShopTileData, ViolatorText) == 0x000000, "Member 'FCrewItemShopTileData::ViolatorText' has a wrong offset!");
static_assert(offsetof(FCrewItemShopTileData, ViolatorIntensity) == 0x000018, "Member 'FCrewItemShopTileData::ViolatorIntensity' has a wrong offset!");
static_assert(offsetof(FCrewItemShopTileData, NextViolatorText) == 0x000020, "Member 'FCrewItemShopTileData::NextViolatorText' has a wrong offset!");
static_assert(offsetof(FCrewItemShopTileData, NextViolatorIntensity) == 0x000038, "Member 'FCrewItemShopTileData::NextViolatorIntensity' has a wrong offset!");
static_assert(offsetof(FCrewItemShopTileData, ItemShopTileImages) == 0x000040, "Member 'FCrewItemShopTileData::ItemShopTileImages' has a wrong offset!");

// ScriptStruct FortniteUI.FortPhoenixSeasonDisplayInfoMapRow
// 0x0018 (0x0020 - 0x0008)
struct FFortPhoenixSeasonDisplayInfoMapRow final : public FTableRowBase
{
public:
	class FString                                 EventFlagName;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortPhoenixSeasonDisplayInfo*          DisplayInfo;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPhoenixSeasonDisplayInfoMapRow) == 0x000008, "Wrong alignment on FFortPhoenixSeasonDisplayInfoMapRow");
static_assert(sizeof(FFortPhoenixSeasonDisplayInfoMapRow) == 0x000020, "Wrong size on FFortPhoenixSeasonDisplayInfoMapRow");
static_assert(offsetof(FFortPhoenixSeasonDisplayInfoMapRow, EventFlagName) == 0x000008, "Member 'FFortPhoenixSeasonDisplayInfoMapRow::EventFlagName' has a wrong offset!");
static_assert(offsetof(FFortPhoenixSeasonDisplayInfoMapRow, DisplayInfo) == 0x000018, "Member 'FFortPhoenixSeasonDisplayInfoMapRow::DisplayInfo' has a wrong offset!");

// ScriptStruct FortniteUI.SubscriptionModalInfo
// 0x0038 (0x0038 - 0x0000)
struct FSubscriptionModalInfo final
{
public:
	class FString                                 ModalId;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAppStore                                     PlatformId;                                        // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           Entries;                                           // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 QrCodeImage;                                       // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubscriptionModalInfo) == 0x000008, "Wrong alignment on FSubscriptionModalInfo");
static_assert(sizeof(FSubscriptionModalInfo) == 0x000038, "Wrong size on FSubscriptionModalInfo");
static_assert(offsetof(FSubscriptionModalInfo, ModalId) == 0x000000, "Member 'FSubscriptionModalInfo::ModalId' has a wrong offset!");
static_assert(offsetof(FSubscriptionModalInfo, PlatformId) == 0x000010, "Member 'FSubscriptionModalInfo::PlatformId' has a wrong offset!");
static_assert(offsetof(FSubscriptionModalInfo, Entries) == 0x000018, "Member 'FSubscriptionModalInfo::Entries' has a wrong offset!");
static_assert(offsetof(FSubscriptionModalInfo, QrCodeImage) == 0x000028, "Member 'FSubscriptionModalInfo::QrCodeImage' has a wrong offset!");

// ScriptStruct FortniteUI.SubscriptionModals
// 0x0010 (0x0010 - 0x0000)
struct FSubscriptionModals final
{
public:
	TArray<struct FSubscriptionModalInfo>         Modals;                                            // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubscriptionModals) == 0x000008, "Wrong alignment on FSubscriptionModals");
static_assert(sizeof(FSubscriptionModals) == 0x000010, "Wrong size on FSubscriptionModals");
static_assert(offsetof(FSubscriptionModals, Modals) == 0x000000, "Member 'FSubscriptionModals::Modals' has a wrong offset!");

// ScriptStruct FortniteUI.OptionsReleaseInfo
// 0x0008 (0x0008 - 0x0000)
struct FOptionsReleaseInfo final
{
public:
	ESettingType                                  SettingType;                                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReleaseVersion;                                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptionsReleaseInfo) == 0x000004, "Wrong alignment on FOptionsReleaseInfo");
static_assert(sizeof(FOptionsReleaseInfo) == 0x000008, "Wrong size on FOptionsReleaseInfo");
static_assert(offsetof(FOptionsReleaseInfo, SettingType) == 0x000000, "Member 'FOptionsReleaseInfo::SettingType' has a wrong offset!");
static_assert(offsetof(FOptionsReleaseInfo, ReleaseVersion) == 0x000004, "Member 'FOptionsReleaseInfo::ReleaseVersion' has a wrong offset!");

// ScriptStruct FortniteUI.BattlePassPurchaseData
// 0x00A0 (0x00A0 - 0x0000)
struct FBattlePassPurchaseData final
{
public:
	class FString                                 BattlePassPurchaseBackgroundURL;                   // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   BattlePassPurchaseDisclaimer;                      // 0x0010(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   BattlePassScreenDisclaimer;                        // 0x0028(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   BattlePassPurchaseLevelDisclaimer;                 // 0x0040(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   BattlePassPurchaseDescription;                     // 0x0058(0x0018)(NativeAccessSpecifierPublic)
	class FString                                 BattlePassPurchaseConfirmBackgroundURL;            // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCrewTileImages                        BattlePassTileImages;                              // 0x0080(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattlePassPurchaseData) == 0x000008, "Wrong alignment on FBattlePassPurchaseData");
static_assert(sizeof(FBattlePassPurchaseData) == 0x0000A0, "Wrong size on FBattlePassPurchaseData");
static_assert(offsetof(FBattlePassPurchaseData, BattlePassPurchaseBackgroundURL) == 0x000000, "Member 'FBattlePassPurchaseData::BattlePassPurchaseBackgroundURL' has a wrong offset!");
static_assert(offsetof(FBattlePassPurchaseData, BattlePassPurchaseDisclaimer) == 0x000010, "Member 'FBattlePassPurchaseData::BattlePassPurchaseDisclaimer' has a wrong offset!");
static_assert(offsetof(FBattlePassPurchaseData, BattlePassScreenDisclaimer) == 0x000028, "Member 'FBattlePassPurchaseData::BattlePassScreenDisclaimer' has a wrong offset!");
static_assert(offsetof(FBattlePassPurchaseData, BattlePassPurchaseLevelDisclaimer) == 0x000040, "Member 'FBattlePassPurchaseData::BattlePassPurchaseLevelDisclaimer' has a wrong offset!");
static_assert(offsetof(FBattlePassPurchaseData, BattlePassPurchaseDescription) == 0x000058, "Member 'FBattlePassPurchaseData::BattlePassPurchaseDescription' has a wrong offset!");
static_assert(offsetof(FBattlePassPurchaseData, BattlePassPurchaseConfirmBackgroundURL) == 0x000070, "Member 'FBattlePassPurchaseData::BattlePassPurchaseConfirmBackgroundURL' has a wrong offset!");
static_assert(offsetof(FBattlePassPurchaseData, BattlePassTileImages) == 0x000080, "Member 'FBattlePassPurchaseData::BattlePassTileImages' has a wrong offset!");

// ScriptStruct FortniteUI.GlyphUpdateTransition
// 0x000C (0x000C - 0x0000)
struct FGlyphUpdateTransition final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinTimeOffset;                                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTimeOffset;                                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGlyphUpdateTransition) == 0x000004, "Wrong alignment on FGlyphUpdateTransition");
static_assert(sizeof(FGlyphUpdateTransition) == 0x00000C, "Wrong size on FGlyphUpdateTransition");
static_assert(offsetof(FGlyphUpdateTransition, Count) == 0x000000, "Member 'FGlyphUpdateTransition::Count' has a wrong offset!");
static_assert(offsetof(FGlyphUpdateTransition, MinTimeOffset) == 0x000004, "Member 'FGlyphUpdateTransition::MinTimeOffset' has a wrong offset!");
static_assert(offsetof(FGlyphUpdateTransition, MaxTimeOffset) == 0x000008, "Member 'FGlyphUpdateTransition::MaxTimeOffset' has a wrong offset!");

// ScriptStruct FortniteUI.ShowdownTournamentData
// 0x01F8 (0x01F8 - 0x0000)
struct FShowdownTournamentData final
{
public:
	class FString                                 Tournament_Display_Id;                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title_Line_1;                                      // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Title_Line_2;                                      // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Schedule_Info;                                     // 0x0040(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 Poster_Front_Image;                                // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Poster_Back_Image;                                 // 0x0068(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Flavor_Description;                                // 0x0078(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Details_Description;                               // 0x0090(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Short_Format_Title;                                // 0x00A8(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Long_Format_Title;                                 // 0x00C0(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Background_Title;                                  // 0x00D8(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         Pin_Score_Requirement;                             // 0x00F0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Pin_Earned_Text;                                   // 0x00F8(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FLinearColor                           Base_Color;                                        // 0x0110(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Primary_Color;                                     // 0x0120(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Secondary_Color;                                   // 0x0130(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Highlight_Color;                                   // 0x0140(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Title_Color;                                       // 0x0150(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Shadow_Color;                                      // 0x0160(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Background_Left_Color;                             // 0x0170(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Background_Right_Color;                            // 0x0180(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Background_Text_Color;                             // 0x0190(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Poster_Fade_Color;                                 // 0x01A0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Playlist_Tile_Image;                               // 0x01B0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Loading_Screen_Image;                              // 0x01C0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Style_Info_Id;                                     // 0x01D0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Alert_Text;                                        // 0x01E0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortTournamentAlertType                      AlertType;                                         // 0x01F0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FShowdownTournamentData) == 0x000008, "Wrong alignment on FShowdownTournamentData");
static_assert(sizeof(FShowdownTournamentData) == 0x0001F8, "Wrong size on FShowdownTournamentData");
static_assert(offsetof(FShowdownTournamentData, Tournament_Display_Id) == 0x000000, "Member 'FShowdownTournamentData::Tournament_Display_Id' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Title_Line_1) == 0x000010, "Member 'FShowdownTournamentData::Title_Line_1' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Title_Line_2) == 0x000028, "Member 'FShowdownTournamentData::Title_Line_2' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Schedule_Info) == 0x000040, "Member 'FShowdownTournamentData::Schedule_Info' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Poster_Front_Image) == 0x000058, "Member 'FShowdownTournamentData::Poster_Front_Image' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Poster_Back_Image) == 0x000068, "Member 'FShowdownTournamentData::Poster_Back_Image' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Flavor_Description) == 0x000078, "Member 'FShowdownTournamentData::Flavor_Description' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Details_Description) == 0x000090, "Member 'FShowdownTournamentData::Details_Description' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Short_Format_Title) == 0x0000A8, "Member 'FShowdownTournamentData::Short_Format_Title' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Long_Format_Title) == 0x0000C0, "Member 'FShowdownTournamentData::Long_Format_Title' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Background_Title) == 0x0000D8, "Member 'FShowdownTournamentData::Background_Title' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Pin_Score_Requirement) == 0x0000F0, "Member 'FShowdownTournamentData::Pin_Score_Requirement' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Pin_Earned_Text) == 0x0000F8, "Member 'FShowdownTournamentData::Pin_Earned_Text' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Base_Color) == 0x000110, "Member 'FShowdownTournamentData::Base_Color' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Primary_Color) == 0x000120, "Member 'FShowdownTournamentData::Primary_Color' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Secondary_Color) == 0x000130, "Member 'FShowdownTournamentData::Secondary_Color' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Highlight_Color) == 0x000140, "Member 'FShowdownTournamentData::Highlight_Color' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Title_Color) == 0x000150, "Member 'FShowdownTournamentData::Title_Color' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Shadow_Color) == 0x000160, "Member 'FShowdownTournamentData::Shadow_Color' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Background_Left_Color) == 0x000170, "Member 'FShowdownTournamentData::Background_Left_Color' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Background_Right_Color) == 0x000180, "Member 'FShowdownTournamentData::Background_Right_Color' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Background_Text_Color) == 0x000190, "Member 'FShowdownTournamentData::Background_Text_Color' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Poster_Fade_Color) == 0x0001A0, "Member 'FShowdownTournamentData::Poster_Fade_Color' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Playlist_Tile_Image) == 0x0001B0, "Member 'FShowdownTournamentData::Playlist_Tile_Image' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Loading_Screen_Image) == 0x0001C0, "Member 'FShowdownTournamentData::Loading_Screen_Image' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Style_Info_Id) == 0x0001D0, "Member 'FShowdownTournamentData::Style_Info_Id' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, Alert_Text) == 0x0001E0, "Member 'FShowdownTournamentData::Alert_Text' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentData, AlertType) == 0x0001F0, "Member 'FShowdownTournamentData::AlertType' has a wrong offset!");

// ScriptStruct FortniteUI.ShowdownTournamentJsonObject
// 0x0010 (0x0010 - 0x0000)
struct FShowdownTournamentJsonObject final
{
public:
	TArray<struct FShowdownTournamentData>        Tournaments;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShowdownTournamentJsonObject) == 0x000008, "Wrong alignment on FShowdownTournamentJsonObject");
static_assert(sizeof(FShowdownTournamentJsonObject) == 0x000010, "Wrong size on FShowdownTournamentJsonObject");
static_assert(offsetof(FShowdownTournamentJsonObject, Tournaments) == 0x000000, "Member 'FShowdownTournamentJsonObject::Tournaments' has a wrong offset!");

// ScriptStruct FortniteUI.ShowdownTournamentSource
// 0x0030 (0x0030 - 0x0000)
struct FShowdownTournamentSource final
{
public:
	struct FShowdownTournamentJsonObject          Tournament_Info;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 _title;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _locale;                                           // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShowdownTournamentSource) == 0x000008, "Wrong alignment on FShowdownTournamentSource");
static_assert(sizeof(FShowdownTournamentSource) == 0x000030, "Wrong size on FShowdownTournamentSource");
static_assert(offsetof(FShowdownTournamentSource, Tournament_Info) == 0x000000, "Member 'FShowdownTournamentSource::Tournament_Info' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentSource, _title) == 0x000010, "Member 'FShowdownTournamentSource::_title' has a wrong offset!");
static_assert(offsetof(FShowdownTournamentSource, _locale) == 0x000020, "Member 'FShowdownTournamentSource::_locale' has a wrong offset!");

// ScriptStruct FortniteUI.CrewDefaultData
// 0x0040 (0x0040 - 0x0000)
struct FCrewDefaultData final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0018)(NativeAccessSpecifierPublic)
	class FString                                 BackgroundURL;                                     // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCrewDefaultData) == 0x000008, "Wrong alignment on FCrewDefaultData");
static_assert(sizeof(FCrewDefaultData) == 0x000040, "Wrong size on FCrewDefaultData");
static_assert(offsetof(FCrewDefaultData, Title) == 0x000000, "Member 'FCrewDefaultData::Title' has a wrong offset!");
static_assert(offsetof(FCrewDefaultData, Description) == 0x000018, "Member 'FCrewDefaultData::Description' has a wrong offset!");
static_assert(offsetof(FCrewDefaultData, BackgroundURL) == 0x000030, "Member 'FCrewDefaultData::BackgroundURL' has a wrong offset!");

// ScriptStruct FortniteUI.FortAthenaTutorialStandaloneStepInfo
// 0x0108 (0x0108 - 0x0000)
struct FFortAthenaTutorialStandaloneStepInfo final
{
public:
	EFortAthenaTutorial_StandaloneStep            StandaloneStep;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortAthenaTutorialScreenInfo          StepScreenInfo;                                    // 0x0008(0x0100)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAthenaTutorialStandaloneStepInfo) == 0x000008, "Wrong alignment on FFortAthenaTutorialStandaloneStepInfo");
static_assert(sizeof(FFortAthenaTutorialStandaloneStepInfo) == 0x000108, "Wrong size on FFortAthenaTutorialStandaloneStepInfo");
static_assert(offsetof(FFortAthenaTutorialStandaloneStepInfo, StandaloneStep) == 0x000000, "Member 'FFortAthenaTutorialStandaloneStepInfo::StandaloneStep' has a wrong offset!");
static_assert(offsetof(FFortAthenaTutorialStandaloneStepInfo, StepScreenInfo) == 0x000008, "Member 'FFortAthenaTutorialStandaloneStepInfo::StepScreenInfo' has a wrong offset!");

// ScriptStruct FortniteUI.CrewTileDataBattlePass
// 0x0000 (0x00B0 - 0x00B0)
struct FCrewTileDataBattlePass final : public FCrewTileDataBasic
{
};
static_assert(alignof(FCrewTileDataBattlePass) == 0x000008, "Wrong alignment on FCrewTileDataBattlePass");
static_assert(sizeof(FCrewTileDataBattlePass) == 0x0000B0, "Wrong size on FCrewTileDataBattlePass");

// ScriptStruct FortniteUI.GenericAction
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FGenericAction final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGenericAction) == 0x000008, "Wrong alignment on FGenericAction");
static_assert(sizeof(FGenericAction) == 0x000020, "Wrong size on FGenericAction");

// ScriptStruct FortniteUI.KoreanCafeData
// 0x0038 (0x0038 - 0x0000)
struct FKoreanCafeData final
{
public:
	struct FGameplayTag                           Korean_Cafe;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Korean_Cafe_Header;                                // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Korean_Cafe_Description;                           // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoreanCafeData) == 0x000008, "Wrong alignment on FKoreanCafeData");
static_assert(sizeof(FKoreanCafeData) == 0x000038, "Wrong size on FKoreanCafeData");
static_assert(offsetof(FKoreanCafeData, Korean_Cafe) == 0x000000, "Member 'FKoreanCafeData::Korean_Cafe' has a wrong offset!");
static_assert(offsetof(FKoreanCafeData, Korean_Cafe_Header) == 0x000008, "Member 'FKoreanCafeData::Korean_Cafe_Header' has a wrong offset!");
static_assert(offsetof(FKoreanCafeData, Korean_Cafe_Description) == 0x000020, "Member 'FKoreanCafeData::Korean_Cafe_Description' has a wrong offset!");

// ScriptStruct FortniteUI.CrewTileDataCrewPack
// 0x00B0 (0x0160 - 0x00B0)
struct FCrewTileDataCrewPack final : public FCrewTileDataBasic
{
public:
	TArray<class FString>                         CrewPackItems;                                     // 0x00B0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bHasNextCrewPackDetails;                           // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCrewTileDetailsData                   NextDetails;                                       // 0x00C8(0x0088)(NativeAccessSpecifierPublic)
	TArray<class FString>                         NextCrewPackItems;                                 // 0x0150(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCrewTileDataCrewPack) == 0x000008, "Wrong alignment on FCrewTileDataCrewPack");
static_assert(sizeof(FCrewTileDataCrewPack) == 0x000160, "Wrong size on FCrewTileDataCrewPack");
static_assert(offsetof(FCrewTileDataCrewPack, CrewPackItems) == 0x0000B0, "Member 'FCrewTileDataCrewPack::CrewPackItems' has a wrong offset!");
static_assert(offsetof(FCrewTileDataCrewPack, bHasNextCrewPackDetails) == 0x0000C0, "Member 'FCrewTileDataCrewPack::bHasNextCrewPackDetails' has a wrong offset!");
static_assert(offsetof(FCrewTileDataCrewPack, NextDetails) == 0x0000C8, "Member 'FCrewTileDataCrewPack::NextDetails' has a wrong offset!");
static_assert(offsetof(FCrewTileDataCrewPack, NextCrewPackItems) == 0x000150, "Member 'FCrewTileDataCrewPack::NextCrewPackItems' has a wrong offset!");

// ScriptStruct FortniteUI.FortMissionRewardInfo
// 0x00F0 (0x00F0 - 0x0000)
struct FFortMissionRewardInfo final
{
public:
	struct FSlateBrush                            Icon;                                              // 0x0000(0x00C0)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x00C0(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UFortItem*                              Item;                                              // 0x00D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMissionAlertReward;                             // 0x00E0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0xF];                                       // 0x00E1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMissionRewardInfo) == 0x000010, "Wrong alignment on FFortMissionRewardInfo");
static_assert(sizeof(FFortMissionRewardInfo) == 0x0000F0, "Wrong size on FFortMissionRewardInfo");
static_assert(offsetof(FFortMissionRewardInfo, Icon) == 0x000000, "Member 'FFortMissionRewardInfo::Icon' has a wrong offset!");
static_assert(offsetof(FFortMissionRewardInfo, DisplayName) == 0x0000C0, "Member 'FFortMissionRewardInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FFortMissionRewardInfo, Item) == 0x0000D8, "Member 'FFortMissionRewardInfo::Item' has a wrong offset!");
static_assert(offsetof(FFortMissionRewardInfo, bIsMissionAlertReward) == 0x0000E0, "Member 'FFortMissionRewardInfo::bIsMissionAlertReward' has a wrong offset!");

// ScriptStruct FortniteUI.CrewBenefits
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FCrewBenefits final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCrewBenefits) == 0x000008, "Wrong alignment on FCrewBenefits");
static_assert(sizeof(FCrewBenefits) == 0x000020, "Wrong size on FCrewBenefits");

// ScriptStruct FortniteUI.GlyphAllUpdateTransitions
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x04) FGlyphAllUpdateTransitions final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGlyphAllUpdateTransitions) == 0x000004, "Wrong alignment on FGlyphAllUpdateTransitions");
static_assert(sizeof(FGlyphAllUpdateTransitions) == 0x000018, "Wrong size on FGlyphAllUpdateTransitions");

// ScriptStruct FortniteUI.StatBound
// 0x0008 (0x0008 - 0x0000)
struct FStatBound final
{
public:
	float                                         Minimum;                                           // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Maximum;                                           // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStatBound) == 0x000004, "Wrong alignment on FStatBound");
static_assert(sizeof(FStatBound) == 0x000008, "Wrong size on FStatBound");
static_assert(offsetof(FStatBound, Minimum) == 0x000000, "Member 'FStatBound::Minimum' has a wrong offset!");
static_assert(offsetof(FStatBound, Maximum) == 0x000004, "Member 'FStatBound::Maximum' has a wrong offset!");

// ScriptStruct FortniteUI.CreativeAdData
// 0x0068 (0x0068 - 0x0000)
struct FCreativeAdData final
{
public:
	class FString                                 Header;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Sub_Header;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Creator_Name;                                      // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Island_Code;                                       // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCreativeAdType                           Ad_Type;                                           // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCreativeAdColorPreset                    Ad_Color_Preset;                                   // 0x0051(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Image;                                             // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCreativeAdData) == 0x000008, "Wrong alignment on FCreativeAdData");
static_assert(sizeof(FCreativeAdData) == 0x000068, "Wrong size on FCreativeAdData");
static_assert(offsetof(FCreativeAdData, Header) == 0x000000, "Member 'FCreativeAdData::Header' has a wrong offset!");
static_assert(offsetof(FCreativeAdData, Sub_Header) == 0x000010, "Member 'FCreativeAdData::Sub_Header' has a wrong offset!");
static_assert(offsetof(FCreativeAdData, Description) == 0x000020, "Member 'FCreativeAdData::Description' has a wrong offset!");
static_assert(offsetof(FCreativeAdData, Creator_Name) == 0x000030, "Member 'FCreativeAdData::Creator_Name' has a wrong offset!");
static_assert(offsetof(FCreativeAdData, Island_Code) == 0x000040, "Member 'FCreativeAdData::Island_Code' has a wrong offset!");
static_assert(offsetof(FCreativeAdData, Ad_Type) == 0x000050, "Member 'FCreativeAdData::Ad_Type' has a wrong offset!");
static_assert(offsetof(FCreativeAdData, Ad_Color_Preset) == 0x000051, "Member 'FCreativeAdData::Ad_Color_Preset' has a wrong offset!");
static_assert(offsetof(FCreativeAdData, Image) == 0x000058, "Member 'FCreativeAdData::Image' has a wrong offset!");

// ScriptStruct FortniteUI.CreativeAdJsonObject
// 0x0010 (0x0010 - 0x0000)
struct FCreativeAdJsonObject final
{
public:
	TArray<struct FCreativeAdData>                Ads;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCreativeAdJsonObject) == 0x000008, "Wrong alignment on FCreativeAdJsonObject");
static_assert(sizeof(FCreativeAdJsonObject) == 0x000010, "Wrong size on FCreativeAdJsonObject");
static_assert(offsetof(FCreativeAdJsonObject, Ads) == 0x000000, "Member 'FCreativeAdJsonObject::Ads' has a wrong offset!");

// ScriptStruct FortniteUI.CrewScreenData
// 0x0130 (0x0130 - 0x0000)
struct FCrewScreenData final
{
public:
	class FText                                   CrewDisclaimer;                                    // 0x0000(0x0018)(NativeAccessSpecifierPublic)
	struct FCrewDefaultData                       DefaultData;                                       // 0x0018(0x0040)(NativeAccessSpecifierPublic)
	struct FCrewBenefits                          Benefits;                                          // 0x0058(0x0020)(NativeAccessSpecifierPublic)
	struct FCrewModals                            CrewModals;                                        // 0x0078(0x0020)(NativeAccessSpecifierPublic)
	struct FCrewItemShopTileData                  ItemShopTileData;                                  // 0x0098(0x0060)(NativeAccessSpecifierPublic)
	struct FAthenaSubscriptionProgressiveInfo     ProgressiveInfo;                                   // 0x00F8(0x0028)(NativeAccessSpecifierPublic)
	struct FSubscriptionModals                    SubModals;                                         // 0x0120(0x0010)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FCrewScreenData) == 0x000008, "Wrong alignment on FCrewScreenData");
static_assert(sizeof(FCrewScreenData) == 0x000130, "Wrong size on FCrewScreenData");
static_assert(offsetof(FCrewScreenData, CrewDisclaimer) == 0x000000, "Member 'FCrewScreenData::CrewDisclaimer' has a wrong offset!");
static_assert(offsetof(FCrewScreenData, DefaultData) == 0x000018, "Member 'FCrewScreenData::DefaultData' has a wrong offset!");
static_assert(offsetof(FCrewScreenData, Benefits) == 0x000058, "Member 'FCrewScreenData::Benefits' has a wrong offset!");
static_assert(offsetof(FCrewScreenData, CrewModals) == 0x000078, "Member 'FCrewScreenData::CrewModals' has a wrong offset!");
static_assert(offsetof(FCrewScreenData, ItemShopTileData) == 0x000098, "Member 'FCrewScreenData::ItemShopTileData' has a wrong offset!");
static_assert(offsetof(FCrewScreenData, ProgressiveInfo) == 0x0000F8, "Member 'FCrewScreenData::ProgressiveInfo' has a wrong offset!");
static_assert(offsetof(FCrewScreenData, SubModals) == 0x000120, "Member 'FCrewScreenData::SubModals' has a wrong offset!");

// ScriptStruct FortniteUI.TimerDisplayData
// 0x0038 (0x0038 - 0x0000)
struct FTimerDisplayData final
{
public:
	struct FLinearColor                           BrushColor;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TimeRemainingDisplayText;                          // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FLinearColor                           TextColor;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTimerDisplayData) == 0x000008, "Wrong alignment on FTimerDisplayData");
static_assert(sizeof(FTimerDisplayData) == 0x000038, "Wrong size on FTimerDisplayData");
static_assert(offsetof(FTimerDisplayData, BrushColor) == 0x000000, "Member 'FTimerDisplayData::BrushColor' has a wrong offset!");
static_assert(offsetof(FTimerDisplayData, TimeRemainingDisplayText) == 0x000010, "Member 'FTimerDisplayData::TimeRemainingDisplayText' has a wrong offset!");
static_assert(offsetof(FTimerDisplayData, TextColor) == 0x000028, "Member 'FTimerDisplayData::TextColor' has a wrong offset!");

// ScriptStruct FortniteUI.AthenaChallengeListVisualOptions
// 0x000C (0x000C - 0x0000)
struct FAthenaChallengeListVisualOptions final
{
public:
	bool                                          bHideHeaders;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideCompletionRewards;                            // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideQuestRewards;                                 // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCompactActionInfo;                             // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideLockedQuests;                                 // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideCompletedQuests;                              // 0x0005(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowOnlyCurentBundleLevelChallenges;              // 0x0006(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSortCompletedToEnd;                               // 0x0007(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreviewBundleLevel;                                // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaChallengeListVisualOptions) == 0x000004, "Wrong alignment on FAthenaChallengeListVisualOptions");
static_assert(sizeof(FAthenaChallengeListVisualOptions) == 0x00000C, "Wrong size on FAthenaChallengeListVisualOptions");
static_assert(offsetof(FAthenaChallengeListVisualOptions, bHideHeaders) == 0x000000, "Member 'FAthenaChallengeListVisualOptions::bHideHeaders' has a wrong offset!");
static_assert(offsetof(FAthenaChallengeListVisualOptions, bHideCompletionRewards) == 0x000001, "Member 'FAthenaChallengeListVisualOptions::bHideCompletionRewards' has a wrong offset!");
static_assert(offsetof(FAthenaChallengeListVisualOptions, bHideQuestRewards) == 0x000002, "Member 'FAthenaChallengeListVisualOptions::bHideQuestRewards' has a wrong offset!");
static_assert(offsetof(FAthenaChallengeListVisualOptions, bUseCompactActionInfo) == 0x000003, "Member 'FAthenaChallengeListVisualOptions::bUseCompactActionInfo' has a wrong offset!");
static_assert(offsetof(FAthenaChallengeListVisualOptions, bHideLockedQuests) == 0x000004, "Member 'FAthenaChallengeListVisualOptions::bHideLockedQuests' has a wrong offset!");
static_assert(offsetof(FAthenaChallengeListVisualOptions, bHideCompletedQuests) == 0x000005, "Member 'FAthenaChallengeListVisualOptions::bHideCompletedQuests' has a wrong offset!");
static_assert(offsetof(FAthenaChallengeListVisualOptions, bShowOnlyCurentBundleLevelChallenges) == 0x000006, "Member 'FAthenaChallengeListVisualOptions::bShowOnlyCurentBundleLevelChallenges' has a wrong offset!");
static_assert(offsetof(FAthenaChallengeListVisualOptions, bSortCompletedToEnd) == 0x000007, "Member 'FAthenaChallengeListVisualOptions::bSortCompletedToEnd' has a wrong offset!");
static_assert(offsetof(FAthenaChallengeListVisualOptions, PreviewBundleLevel) == 0x000008, "Member 'FAthenaChallengeListVisualOptions::PreviewBundleLevel' has a wrong offset!");

// ScriptStruct FortniteUI.AthenaCollectionScreenContainerTabInfo
// 0x0068 (0x0068 - 0x0000)
struct FAthenaCollectionScreenContainerTabInfo final
{
public:
	class FText                                   TabTitle;                                          // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 TabIcon;                                           // 0x0018(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   TabClass;                                          // 0x0040(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaCollectionScreenContainerTabInfo) == 0x000008, "Wrong alignment on FAthenaCollectionScreenContainerTabInfo");
static_assert(sizeof(FAthenaCollectionScreenContainerTabInfo) == 0x000068, "Wrong size on FAthenaCollectionScreenContainerTabInfo");
static_assert(offsetof(FAthenaCollectionScreenContainerTabInfo, TabTitle) == 0x000000, "Member 'FAthenaCollectionScreenContainerTabInfo::TabTitle' has a wrong offset!");
static_assert(offsetof(FAthenaCollectionScreenContainerTabInfo, TabIcon) == 0x000018, "Member 'FAthenaCollectionScreenContainerTabInfo::TabIcon' has a wrong offset!");
static_assert(offsetof(FAthenaCollectionScreenContainerTabInfo, TabClass) == 0x000040, "Member 'FAthenaCollectionScreenContainerTabInfo::TabClass' has a wrong offset!");

// ScriptStruct FortniteUI.GoalsPageCategoryTabData
// 0x0028 (0x0028 - 0x0000)
struct FGoalsPageCategoryTabData final
{
public:
	class UObject*                                TabDisplayAsset;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTag                           IncludeTag;                                        // 0x0020(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGoalsPageCategoryTabData) == 0x000008, "Wrong alignment on FGoalsPageCategoryTabData");
static_assert(sizeof(FGoalsPageCategoryTabData) == 0x000028, "Wrong size on FGoalsPageCategoryTabData");
static_assert(offsetof(FGoalsPageCategoryTabData, TabDisplayAsset) == 0x000000, "Member 'FGoalsPageCategoryTabData::TabDisplayAsset' has a wrong offset!");
static_assert(offsetof(FGoalsPageCategoryTabData, DisplayName) == 0x000008, "Member 'FGoalsPageCategoryTabData::DisplayName' has a wrong offset!");
static_assert(offsetof(FGoalsPageCategoryTabData, IncludeTag) == 0x000020, "Member 'FGoalsPageCategoryTabData::IncludeTag' has a wrong offset!");

// ScriptStruct FortniteUI.MutatorAddedWidgets
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FMutatorAddedWidgets final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMutatorAddedWidgets) == 0x000004, "Wrong alignment on FMutatorAddedWidgets");
static_assert(sizeof(FMutatorAddedWidgets) == 0x000010, "Wrong size on FMutatorAddedWidgets");

// ScriptStruct FortniteUI.AthenaInventoryDropStackSizeRow
// 0x0028 (0x0030 - 0x0008)
struct FAthenaInventoryDropStackSizeRow final : public FTableRowBase
{
public:
	struct FGameplayTagContainer                  ItemTags;                                          // 0x0008(0x0020)(Edit, NativeAccessSpecifierPublic)
	int32                                         StackSize;                                         // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAthenaInventoryDropStackSizeRow) == 0x000008, "Wrong alignment on FAthenaInventoryDropStackSizeRow");
static_assert(sizeof(FAthenaInventoryDropStackSizeRow) == 0x000030, "Wrong size on FAthenaInventoryDropStackSizeRow");
static_assert(offsetof(FAthenaInventoryDropStackSizeRow, ItemTags) == 0x000008, "Member 'FAthenaInventoryDropStackSizeRow::ItemTags' has a wrong offset!");
static_assert(offsetof(FAthenaInventoryDropStackSizeRow, StackSize) == 0x000028, "Member 'FAthenaInventoryDropStackSizeRow::StackSize' has a wrong offset!");

// ScriptStruct FortniteUI.AthenaInventoryItemStatBoundsRow
// 0x0040 (0x0048 - 0x0008)
struct FAthenaInventoryItemStatBoundsRow final : public FTableRowBase
{
public:
	struct FGameplayTagContainer                  ItemTags;                                          // 0x0008(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FStatBound                             Damage;                                            // 0x0028(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FStatBound                             FireRate;                                          // 0x0030(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FStatBound                             MagazineSize;                                      // 0x0038(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FStatBound                             ReloadTime;                                        // 0x0040(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaInventoryItemStatBoundsRow) == 0x000008, "Wrong alignment on FAthenaInventoryItemStatBoundsRow");
static_assert(sizeof(FAthenaInventoryItemStatBoundsRow) == 0x000048, "Wrong size on FAthenaInventoryItemStatBoundsRow");
static_assert(offsetof(FAthenaInventoryItemStatBoundsRow, ItemTags) == 0x000008, "Member 'FAthenaInventoryItemStatBoundsRow::ItemTags' has a wrong offset!");
static_assert(offsetof(FAthenaInventoryItemStatBoundsRow, Damage) == 0x000028, "Member 'FAthenaInventoryItemStatBoundsRow::Damage' has a wrong offset!");
static_assert(offsetof(FAthenaInventoryItemStatBoundsRow, FireRate) == 0x000030, "Member 'FAthenaInventoryItemStatBoundsRow::FireRate' has a wrong offset!");
static_assert(offsetof(FAthenaInventoryItemStatBoundsRow, MagazineSize) == 0x000038, "Member 'FAthenaInventoryItemStatBoundsRow::MagazineSize' has a wrong offset!");
static_assert(offsetof(FAthenaInventoryItemStatBoundsRow, ReloadTime) == 0x000040, "Member 'FAthenaInventoryItemStatBoundsRow::ReloadTime' has a wrong offset!");

// ScriptStruct FortniteUI.AthenaCustomizationParams
// 0x0048 (0x0048 - 0x0000)
struct FAthenaCustomizationParams final
{
public:
	EAthenaCustomizationCategory                  category;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CategorySubslotIndex;                              // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   CategoryDisplayName;                               // 0x0008(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ItemDisplayTypeName;                               // 0x0020(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bAllowUnownedItems;                                // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOneItemPerSlot;                                   // 0x0039(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      OverrideSlotImage;                                 // 0x0040(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaCustomizationParams) == 0x000008, "Wrong alignment on FAthenaCustomizationParams");
static_assert(sizeof(FAthenaCustomizationParams) == 0x000048, "Wrong size on FAthenaCustomizationParams");
static_assert(offsetof(FAthenaCustomizationParams, category) == 0x000000, "Member 'FAthenaCustomizationParams::category' has a wrong offset!");
static_assert(offsetof(FAthenaCustomizationParams, CategorySubslotIndex) == 0x000004, "Member 'FAthenaCustomizationParams::CategorySubslotIndex' has a wrong offset!");
static_assert(offsetof(FAthenaCustomizationParams, CategoryDisplayName) == 0x000008, "Member 'FAthenaCustomizationParams::CategoryDisplayName' has a wrong offset!");
static_assert(offsetof(FAthenaCustomizationParams, ItemDisplayTypeName) == 0x000020, "Member 'FAthenaCustomizationParams::ItemDisplayTypeName' has a wrong offset!");
static_assert(offsetof(FAthenaCustomizationParams, bAllowUnownedItems) == 0x000038, "Member 'FAthenaCustomizationParams::bAllowUnownedItems' has a wrong offset!");
static_assert(offsetof(FAthenaCustomizationParams, bOneItemPerSlot) == 0x000039, "Member 'FAthenaCustomizationParams::bOneItemPerSlot' has a wrong offset!");
static_assert(offsetof(FAthenaCustomizationParams, OverrideSlotImage) == 0x000040, "Member 'FAthenaCustomizationParams::OverrideSlotImage' has a wrong offset!");

// ScriptStruct FortniteUI.AthenaItemShopReloadMtxInfo
// 0x0090 (0x0090 - 0x0000)
struct FAthenaItemShopReloadMtxInfo final
{
public:
	TArray<class FName>                           StaticStorefrontNames;                             // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           DynamicStorefrontNames;                            // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   IncrementalStorefrontName;                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DynamicOtherOptionOfferId;                         // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxMtxQuantityToShowDynamicReloadMtx;              // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   StaticReloadMtxScreenClass;                        // 0x0040(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   DynamicReloadMtxScreenClass;                       // 0x0068(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FAthenaItemShopReloadMtxInfo) == 0x000008, "Wrong alignment on FAthenaItemShopReloadMtxInfo");
static_assert(sizeof(FAthenaItemShopReloadMtxInfo) == 0x000090, "Wrong size on FAthenaItemShopReloadMtxInfo");
static_assert(offsetof(FAthenaItemShopReloadMtxInfo, StaticStorefrontNames) == 0x000000, "Member 'FAthenaItemShopReloadMtxInfo::StaticStorefrontNames' has a wrong offset!");
static_assert(offsetof(FAthenaItemShopReloadMtxInfo, DynamicStorefrontNames) == 0x000010, "Member 'FAthenaItemShopReloadMtxInfo::DynamicStorefrontNames' has a wrong offset!");
static_assert(offsetof(FAthenaItemShopReloadMtxInfo, IncrementalStorefrontName) == 0x000020, "Member 'FAthenaItemShopReloadMtxInfo::IncrementalStorefrontName' has a wrong offset!");
static_assert(offsetof(FAthenaItemShopReloadMtxInfo, DynamicOtherOptionOfferId) == 0x000028, "Member 'FAthenaItemShopReloadMtxInfo::DynamicOtherOptionOfferId' has a wrong offset!");
static_assert(offsetof(FAthenaItemShopReloadMtxInfo, MaxMtxQuantityToShowDynamicReloadMtx) == 0x000038, "Member 'FAthenaItemShopReloadMtxInfo::MaxMtxQuantityToShowDynamicReloadMtx' has a wrong offset!");
static_assert(offsetof(FAthenaItemShopReloadMtxInfo, StaticReloadMtxScreenClass) == 0x000040, "Member 'FAthenaItemShopReloadMtxInfo::StaticReloadMtxScreenClass' has a wrong offset!");
static_assert(offsetof(FAthenaItemShopReloadMtxInfo, DynamicReloadMtxScreenClass) == 0x000068, "Member 'FAthenaItemShopReloadMtxInfo::DynamicReloadMtxScreenClass' has a wrong offset!");

// ScriptStruct FortniteUI.AthenaItemShopSectionData
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FAthenaItemShopSectionData final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAthenaItemShopSectionData) == 0x000008, "Wrong alignment on FAthenaItemShopSectionData");
static_assert(sizeof(FAthenaItemShopSectionData) == 0x000050, "Wrong size on FAthenaItemShopSectionData");

// ScriptStruct FortniteUI.AthenaPlaylistLeaderboardData
// 0x0068 (0x0068 - 0x0000)
struct FAthenaPlaylistLeaderboardData final
{
public:
	class FName                                   StatId;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   StatDisplayName;                                   // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   TabDisplayName;                                    // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   RowDisplayName;                                    // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 BaseGameplayTag;                                   // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGlobal;                                         // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAthenaPlaylistLeaderboardData) == 0x000008, "Wrong alignment on FAthenaPlaylistLeaderboardData");
static_assert(sizeof(FAthenaPlaylistLeaderboardData) == 0x000068, "Wrong size on FAthenaPlaylistLeaderboardData");
static_assert(offsetof(FAthenaPlaylistLeaderboardData, StatId) == 0x000000, "Member 'FAthenaPlaylistLeaderboardData::StatId' has a wrong offset!");
static_assert(offsetof(FAthenaPlaylistLeaderboardData, StatDisplayName) == 0x000008, "Member 'FAthenaPlaylistLeaderboardData::StatDisplayName' has a wrong offset!");
static_assert(offsetof(FAthenaPlaylistLeaderboardData, TabDisplayName) == 0x000020, "Member 'FAthenaPlaylistLeaderboardData::TabDisplayName' has a wrong offset!");
static_assert(offsetof(FAthenaPlaylistLeaderboardData, RowDisplayName) == 0x000038, "Member 'FAthenaPlaylistLeaderboardData::RowDisplayName' has a wrong offset!");
static_assert(offsetof(FAthenaPlaylistLeaderboardData, BaseGameplayTag) == 0x000050, "Member 'FAthenaPlaylistLeaderboardData::BaseGameplayTag' has a wrong offset!");
static_assert(offsetof(FAthenaPlaylistLeaderboardData, bIsGlobal) == 0x000060, "Member 'FAthenaPlaylistLeaderboardData::bIsGlobal' has a wrong offset!");

// ScriptStruct FortniteUI.AthenaLeaderboardData
// 0x0038 (0x0040 - 0x0008)
struct FAthenaLeaderboardData final : public FTableRowBase
{
public:
	EFortAthenaPlaylist                           Playlist;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PlaylistName;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommonInputType                              InputType;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAthenaPlaylistLeaderboardData> Stats;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bExcludePlaylistNames;                             // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         PlaylistNames;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaLeaderboardData) == 0x000008, "Wrong alignment on FAthenaLeaderboardData");
static_assert(sizeof(FAthenaLeaderboardData) == 0x000040, "Wrong size on FAthenaLeaderboardData");
static_assert(offsetof(FAthenaLeaderboardData, Playlist) == 0x000008, "Member 'FAthenaLeaderboardData::Playlist' has a wrong offset!");
static_assert(offsetof(FAthenaLeaderboardData, PlaylistName) == 0x00000C, "Member 'FAthenaLeaderboardData::PlaylistName' has a wrong offset!");
static_assert(offsetof(FAthenaLeaderboardData, InputType) == 0x000010, "Member 'FAthenaLeaderboardData::InputType' has a wrong offset!");
static_assert(offsetof(FAthenaLeaderboardData, Stats) == 0x000018, "Member 'FAthenaLeaderboardData::Stats' has a wrong offset!");
static_assert(offsetof(FAthenaLeaderboardData, bExcludePlaylistNames) == 0x000028, "Member 'FAthenaLeaderboardData::bExcludePlaylistNames' has a wrong offset!");
static_assert(offsetof(FAthenaLeaderboardData, PlaylistNames) == 0x000030, "Member 'FAthenaLeaderboardData::PlaylistNames' has a wrong offset!");

// ScriptStruct FortniteUI.PlaylistFilter
// 0x0010 (0x0010 - 0x0000)
struct FPlaylistFilter
{
public:
	class UDataTable*                             PlaylistsData;                                     // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlaylistFilter) == 0x000008, "Wrong alignment on FPlaylistFilter");
static_assert(sizeof(FPlaylistFilter) == 0x000010, "Wrong size on FPlaylistFilter");
static_assert(offsetof(FPlaylistFilter, PlaylistsData) == 0x000000, "Member 'FPlaylistFilter::PlaylistsData' has a wrong offset!");

// ScriptStruct FortniteUI.LeaderboardFilter
// 0x0008 (0x0018 - 0x0010)
struct FLeaderboardFilter final : public FPlaylistFilter
{
public:
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLeaderboardFilter) == 0x000008, "Wrong alignment on FLeaderboardFilter");
static_assert(sizeof(FLeaderboardFilter) == 0x000018, "Wrong size on FLeaderboardFilter");

// ScriptStruct FortniteUI.LevelEffectsData
// 0x0050 (0x0050 - 0x0000)
struct FLevelEffectsData final
{
public:
	int32                                         MinPlayerLevel;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ContentColor;                                      // 0x0004(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OutlineColor;                                      // 0x0014(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 FlameDisplayObject;                                // 0x0028(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelEffectsData) == 0x000008, "Wrong alignment on FLevelEffectsData");
static_assert(sizeof(FLevelEffectsData) == 0x000050, "Wrong size on FLevelEffectsData");
static_assert(offsetof(FLevelEffectsData, MinPlayerLevel) == 0x000000, "Member 'FLevelEffectsData::MinPlayerLevel' has a wrong offset!");
static_assert(offsetof(FLevelEffectsData, ContentColor) == 0x000004, "Member 'FLevelEffectsData::ContentColor' has a wrong offset!");
static_assert(offsetof(FLevelEffectsData, OutlineColor) == 0x000014, "Member 'FLevelEffectsData::OutlineColor' has a wrong offset!");
static_assert(offsetof(FLevelEffectsData, FlameDisplayObject) == 0x000028, "Member 'FLevelEffectsData::FlameDisplayObject' has a wrong offset!");

// ScriptStruct FortniteUI.DisabledQuestData
// 0x0010 (0x0010 - 0x0000)
struct FDisabledQuestData final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDisabledQuestData) == 0x000008, "Wrong alignment on FDisabledQuestData");
static_assert(sizeof(FDisabledQuestData) == 0x000010, "Wrong size on FDisabledQuestData");
static_assert(offsetof(FDisabledQuestData, Name) == 0x000000, "Member 'FDisabledQuestData::Name' has a wrong offset!");

// ScriptStruct FortniteUI.AthenaMapScreenContainerTabInfo
// 0x0070 (0x0070 - 0x0000)
struct FAthenaMapScreenContainerTabInfo final
{
public:
	class FText                                   TabTitle;                                          // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 TabIcon;                                           // 0x0018(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   TabClass;                                          // 0x0040(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefaultFrontendActiveTab;                         // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefaultInGameActiveTab;                           // 0x0069(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowPlayerProfile;                                // 0x006A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAtheaMapTabType                              TabType;                                           // 0x006B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAthenaMapScreenContainerTabInfo) == 0x000008, "Wrong alignment on FAthenaMapScreenContainerTabInfo");
static_assert(sizeof(FAthenaMapScreenContainerTabInfo) == 0x000070, "Wrong size on FAthenaMapScreenContainerTabInfo");
static_assert(offsetof(FAthenaMapScreenContainerTabInfo, TabTitle) == 0x000000, "Member 'FAthenaMapScreenContainerTabInfo::TabTitle' has a wrong offset!");
static_assert(offsetof(FAthenaMapScreenContainerTabInfo, TabIcon) == 0x000018, "Member 'FAthenaMapScreenContainerTabInfo::TabIcon' has a wrong offset!");
static_assert(offsetof(FAthenaMapScreenContainerTabInfo, TabClass) == 0x000040, "Member 'FAthenaMapScreenContainerTabInfo::TabClass' has a wrong offset!");
static_assert(offsetof(FAthenaMapScreenContainerTabInfo, bDefaultFrontendActiveTab) == 0x000068, "Member 'FAthenaMapScreenContainerTabInfo::bDefaultFrontendActiveTab' has a wrong offset!");
static_assert(offsetof(FAthenaMapScreenContainerTabInfo, bDefaultInGameActiveTab) == 0x000069, "Member 'FAthenaMapScreenContainerTabInfo::bDefaultInGameActiveTab' has a wrong offset!");
static_assert(offsetof(FAthenaMapScreenContainerTabInfo, bShowPlayerProfile) == 0x00006A, "Member 'FAthenaMapScreenContainerTabInfo::bShowPlayerProfile' has a wrong offset!");
static_assert(offsetof(FAthenaMapScreenContainerTabInfo, TabType) == 0x00006B, "Member 'FAthenaMapScreenContainerTabInfo::TabType' has a wrong offset!");

// ScriptStruct FortniteUI.ImageRef
// 0x0018 (0x0018 - 0x0000)
struct FImageRef final
{
public:
	int32                                         Width;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FImageRef) == 0x000008, "Wrong alignment on FImageRef");
static_assert(sizeof(FImageRef) == 0x000018, "Wrong size on FImageRef");
static_assert(offsetof(FImageRef, Width) == 0x000000, "Member 'FImageRef::Width' has a wrong offset!");
static_assert(offsetof(FImageRef, Height) == 0x000004, "Member 'FImageRef::Height' has a wrong offset!");
static_assert(offsetof(FImageRef, URL) == 0x000008, "Member 'FImageRef::URL' has a wrong offset!");

// ScriptStruct FortniteUI.AthenaMOTDBase
// 0x00D0 (0x00D0 - 0x0000)
struct FAthenaMOTDBase
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EAthenaNewsEntryType                          EntryType;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Title;                                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Body;                                              // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FImageRef>                      Images;                                            // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FImageRef>                      TileImages;                                        // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FColor                                 CustomDarkColor;                                   // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 CustomLightColor;                                  // 0x0054(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AdSpace;                                           // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TabTitleOverride;                                  // 0x0068(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ButtonTextOverride;                                // 0x0078(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasCustomColor;                                   // 0x0088(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFtueMotd;                                       // 0x0089(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x46];                                      // 0x008A(0x0046)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAthenaMOTDBase) == 0x000008, "Wrong alignment on FAthenaMOTDBase");
static_assert(sizeof(FAthenaMOTDBase) == 0x0000D0, "Wrong size on FAthenaMOTDBase");
static_assert(offsetof(FAthenaMOTDBase, EntryType) == 0x000008, "Member 'FAthenaMOTDBase::EntryType' has a wrong offset!");
static_assert(offsetof(FAthenaMOTDBase, Title) == 0x000010, "Member 'FAthenaMOTDBase::Title' has a wrong offset!");
static_assert(offsetof(FAthenaMOTDBase, Body) == 0x000020, "Member 'FAthenaMOTDBase::Body' has a wrong offset!");
static_assert(offsetof(FAthenaMOTDBase, Images) == 0x000030, "Member 'FAthenaMOTDBase::Images' has a wrong offset!");
static_assert(offsetof(FAthenaMOTDBase, TileImages) == 0x000040, "Member 'FAthenaMOTDBase::TileImages' has a wrong offset!");
static_assert(offsetof(FAthenaMOTDBase, CustomDarkColor) == 0x000050, "Member 'FAthenaMOTDBase::CustomDarkColor' has a wrong offset!");
static_assert(offsetof(FAthenaMOTDBase, CustomLightColor) == 0x000054, "Member 'FAthenaMOTDBase::CustomLightColor' has a wrong offset!");
static_assert(offsetof(FAthenaMOTDBase, AdSpace) == 0x000058, "Member 'FAthenaMOTDBase::AdSpace' has a wrong offset!");
static_assert(offsetof(FAthenaMOTDBase, TabTitleOverride) == 0x000068, "Member 'FAthenaMOTDBase::TabTitleOverride' has a wrong offset!");
static_assert(offsetof(FAthenaMOTDBase, ButtonTextOverride) == 0x000078, "Member 'FAthenaMOTDBase::ButtonTextOverride' has a wrong offset!");
static_assert(offsetof(FAthenaMOTDBase, bHasCustomColor) == 0x000088, "Member 'FAthenaMOTDBase::bHasCustomColor' has a wrong offset!");
static_assert(offsetof(FAthenaMOTDBase, bIsFtueMotd) == 0x000089, "Member 'FAthenaMOTDBase::bIsFtueMotd' has a wrong offset!");

// ScriptStruct FortniteUI.SmallNewsMOTD
// 0x0000 (0x00D0 - 0x00D0)
struct FSmallNewsMOTD final : public FAthenaMOTDBase
{
};
static_assert(alignof(FSmallNewsMOTD) == 0x000008, "Wrong alignment on FSmallNewsMOTD");
static_assert(sizeof(FSmallNewsMOTD) == 0x0000D0, "Wrong size on FSmallNewsMOTD");

// ScriptStruct FortniteUI.ItemMOTD
// 0x0018 (0x00E8 - 0x00D0)
struct FItemMOTD final : public FAthenaMOTDBase
{
public:
	uint8                                         Pad_D0[0x18];                                      // 0x00D0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemMOTD) == 0x000008, "Wrong alignment on FItemMOTD");
static_assert(sizeof(FItemMOTD) == 0x0000E8, "Wrong size on FItemMOTD");

// ScriptStruct FortniteUI.NavigateToTabMOTD
// 0x0018 (0x00E8 - 0x00D0)
struct FNavigateToTabMOTD final : public FAthenaMOTDBase
{
public:
	uint8                                         Pad_D0[0x18];                                      // 0x00D0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNavigateToTabMOTD) == 0x000008, "Wrong alignment on FNavigateToTabMOTD");
static_assert(sizeof(FNavigateToTabMOTD) == 0x0000E8, "Wrong size on FNavigateToTabMOTD");

// ScriptStruct FortniteUI.SettingsMOTD
// 0x0020 (0x00F0 - 0x00D0)
struct FSettingsMOTD final : public FAthenaMOTDBase
{
public:
	uint8                                         Pad_D0[0x20];                                      // 0x00D0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSettingsMOTD) == 0x000008, "Wrong alignment on FSettingsMOTD");
static_assert(sizeof(FSettingsMOTD) == 0x0000F0, "Wrong size on FSettingsMOTD");

// ScriptStruct FortniteUI.ChallengeMOTD
// 0x0010 (0x00E0 - 0x00D0)
struct FChallengeMOTD final : public FAthenaMOTDBase
{
public:
	uint8                                         Pad_D0[0x10];                                      // 0x00D0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChallengeMOTD) == 0x000008, "Wrong alignment on FChallengeMOTD");
static_assert(sizeof(FChallengeMOTD) == 0x0000E0, "Wrong size on FChallengeMOTD");

// ScriptStruct FortniteUI.WebsiteMOTD
// 0x0020 (0x00F0 - 0x00D0)
struct FWebsiteMOTD final : public FAthenaMOTDBase
{
public:
	uint8                                         Pad_D0[0x20];                                      // 0x00D0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWebsiteMOTD) == 0x000008, "Wrong alignment on FWebsiteMOTD");
static_assert(sizeof(FWebsiteMOTD) == 0x0000F0, "Wrong size on FWebsiteMOTD");

// ScriptStruct FortniteUI.SpatialScreenMOTD
// 0x0010 (0x00E0 - 0x00D0)
struct FSpatialScreenMOTD final : public FAthenaMOTDBase
{
public:
	uint8                                         Pad_D0[0x10];                                      // 0x00D0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpatialScreenMOTD) == 0x000008, "Wrong alignment on FSpatialScreenMOTD");
static_assert(sizeof(FSpatialScreenMOTD) == 0x0000E0, "Wrong size on FSpatialScreenMOTD");

// ScriptStruct FortniteUI.PlaylistMOTD
// 0x0010 (0x00E0 - 0x00D0)
struct FPlaylistMOTD final : public FAthenaMOTDBase
{
public:
	uint8                                         Pad_D0[0x10];                                      // 0x00D0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlaylistMOTD) == 0x000008, "Wrong alignment on FPlaylistMOTD");
static_assert(sizeof(FPlaylistMOTD) == 0x0000E0, "Wrong size on FPlaylistMOTD");

// ScriptStruct FortniteUI.NavigateToBattlePassSubPageMOTD
// 0x0028 (0x00F8 - 0x00D0)
struct FNavigateToBattlePassSubPageMOTD final : public FAthenaMOTDBase
{
public:
	uint8                                         Pad_D0[0x28];                                      // 0x00D0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNavigateToBattlePassSubPageMOTD) == 0x000008, "Wrong alignment on FNavigateToBattlePassSubPageMOTD");
static_assert(sizeof(FNavigateToBattlePassSubPageMOTD) == 0x0000F8, "Wrong size on FNavigateToBattlePassSubPageMOTD");

// ScriptStruct FortniteUI.CreativeMOTD
// 0x0028 (0x00F8 - 0x00D0)
struct FCreativeMOTD final : public FAthenaMOTDBase
{
public:
	uint8                                         Pad_D0[0x28];                                      // 0x00D0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCreativeMOTD) == 0x000008, "Wrong alignment on FCreativeMOTD");
static_assert(sizeof(FCreativeMOTD) == 0x0000F8, "Wrong size on FCreativeMOTD");

// ScriptStruct FortniteUI.NavigateToSubscriptionSubPageMOTD
// 0x0008 (0x00D8 - 0x00D0)
struct FNavigateToSubscriptionSubPageMOTD final : public FAthenaMOTDBase
{
public:
	uint8                                         Pad_D0[0x8];                                       // 0x00D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNavigateToSubscriptionSubPageMOTD) == 0x000008, "Wrong alignment on FNavigateToSubscriptionSubPageMOTD");
static_assert(sizeof(FNavigateToSubscriptionSubPageMOTD) == 0x0000D8, "Wrong size on FNavigateToSubscriptionSubPageMOTD");

// ScriptStruct FortniteUI.EventMOTD
// 0x0008 (0x00D8 - 0x00D0)
struct FEventMOTD final : public FAthenaMOTDBase
{
public:
	uint8                                         Pad_D0[0x8];                                       // 0x00D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEventMOTD) == 0x000008, "Wrong alignment on FEventMOTD");
static_assert(sizeof(FEventMOTD) == 0x0000D8, "Wrong size on FEventMOTD");

// ScriptStruct FortniteUI.DiscoveryMOTD
// 0x0018 (0x00E8 - 0x00D0)
struct FDiscoveryMOTD final : public FAthenaMOTDBase
{
public:
	uint8                                         Pad_D0[0x18];                                      // 0x00D0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDiscoveryMOTD) == 0x000008, "Wrong alignment on FDiscoveryMOTD");
static_assert(sizeof(FDiscoveryMOTD) == 0x0000E8, "Wrong size on FDiscoveryMOTD");

// ScriptStruct FortniteUI.AthenaMessageEntry
// 0x0050 (0x0050 - 0x0000)
struct FAthenaMessageEntry final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Body;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Image;                                             // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AdSpace;                                           // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaMessageEntry) == 0x000008, "Wrong alignment on FAthenaMessageEntry");
static_assert(sizeof(FAthenaMessageEntry) == 0x000050, "Wrong size on FAthenaMessageEntry");
static_assert(offsetof(FAthenaMessageEntry, Title) == 0x000000, "Member 'FAthenaMessageEntry::Title' has a wrong offset!");
static_assert(offsetof(FAthenaMessageEntry, Body) == 0x000010, "Member 'FAthenaMessageEntry::Body' has a wrong offset!");
static_assert(offsetof(FAthenaMessageEntry, Image) == 0x000020, "Member 'FAthenaMessageEntry::Image' has a wrong offset!");
static_assert(offsetof(FAthenaMessageEntry, Type) == 0x000030, "Member 'FAthenaMessageEntry::Type' has a wrong offset!");
static_assert(offsetof(FAthenaMessageEntry, AdSpace) == 0x000040, "Member 'FAthenaMessageEntry::AdSpace' has a wrong offset!");

// ScriptStruct FortniteUI.AthenaEmergencyNotice
// 0x0040 (0x0040 - 0x0000)
struct FAthenaEmergencyNotice final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Body;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x20];                                      // 0x0020(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAthenaEmergencyNotice) == 0x000008, "Wrong alignment on FAthenaEmergencyNotice");
static_assert(sizeof(FAthenaEmergencyNotice) == 0x000040, "Wrong size on FAthenaEmergencyNotice");
static_assert(offsetof(FAthenaEmergencyNotice, Title) == 0x000000, "Member 'FAthenaEmergencyNotice::Title' has a wrong offset!");
static_assert(offsetof(FAthenaEmergencyNotice, Body) == 0x000010, "Member 'FAthenaEmergencyNotice::Body' has a wrong offset!");

// ScriptStruct FortniteUI.FortResurrectionUIData
// 0x0003 (0x0003 - 0x0000)
struct FFortResurrectionUIData final
{
public:
	bool                                          bResurrectionChipAvailable;                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResurrectionChipPickedUp;                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResurrectionChipRebooting;                        // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortResurrectionUIData) == 0x000001, "Wrong alignment on FFortResurrectionUIData");
static_assert(sizeof(FFortResurrectionUIData) == 0x000003, "Wrong size on FFortResurrectionUIData");
static_assert(offsetof(FFortResurrectionUIData, bResurrectionChipAvailable) == 0x000000, "Member 'FFortResurrectionUIData::bResurrectionChipAvailable' has a wrong offset!");
static_assert(offsetof(FFortResurrectionUIData, bResurrectionChipPickedUp) == 0x000001, "Member 'FFortResurrectionUIData::bResurrectionChipPickedUp' has a wrong offset!");
static_assert(offsetof(FFortResurrectionUIData, bResurrectionChipRebooting) == 0x000002, "Member 'FFortResurrectionUIData::bResurrectionChipRebooting' has a wrong offset!");

// ScriptStruct FortniteUI.StatGroupData
// 0x00F0 (0x00F0 - 0x0000)
struct FStatGroupData final
{
public:
	class FText                                   GroupName;                                         // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Group;                                             // 0x0020(0x00C0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x00E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChartValue;                                        // 0x00E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChartOrigionalValue;                               // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStatGroupData) == 0x000010, "Wrong alignment on FStatGroupData");
static_assert(sizeof(FStatGroupData) == 0x0000F0, "Wrong size on FStatGroupData");
static_assert(offsetof(FStatGroupData, GroupName) == 0x000000, "Member 'FStatGroupData::GroupName' has a wrong offset!");
static_assert(offsetof(FStatGroupData, Group) == 0x000020, "Member 'FStatGroupData::Group' has a wrong offset!");
static_assert(offsetof(FStatGroupData, Value) == 0x0000E0, "Member 'FStatGroupData::Value' has a wrong offset!");
static_assert(offsetof(FStatGroupData, ChartValue) == 0x0000E4, "Member 'FStatGroupData::ChartValue' has a wrong offset!");
static_assert(offsetof(FStatGroupData, ChartOrigionalValue) == 0x0000E8, "Member 'FStatGroupData::ChartOrigionalValue' has a wrong offset!");

// ScriptStruct FortniteUI.AthenaReplayBrowserRowData
// 0x0040 (0x0040 - 0x0000)
struct FAthenaReplayBrowserRowData final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Date;                                              // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPlayers;                                        // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Eliminations;                                      // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAthenaReplayBrowserRowData) == 0x000008, "Wrong alignment on FAthenaReplayBrowserRowData");
static_assert(sizeof(FAthenaReplayBrowserRowData) == 0x000040, "Wrong size on FAthenaReplayBrowserRowData");
static_assert(offsetof(FAthenaReplayBrowserRowData, Name) == 0x000000, "Member 'FAthenaReplayBrowserRowData::Name' has a wrong offset!");
static_assert(offsetof(FAthenaReplayBrowserRowData, Date) == 0x000010, "Member 'FAthenaReplayBrowserRowData::Date' has a wrong offset!");
static_assert(offsetof(FAthenaReplayBrowserRowData, Length) == 0x000018, "Member 'FAthenaReplayBrowserRowData::Length' has a wrong offset!");
static_assert(offsetof(FAthenaReplayBrowserRowData, Rank) == 0x00001C, "Member 'FAthenaReplayBrowserRowData::Rank' has a wrong offset!");
static_assert(offsetof(FAthenaReplayBrowserRowData, NumPlayers) == 0x000020, "Member 'FAthenaReplayBrowserRowData::NumPlayers' has a wrong offset!");
static_assert(offsetof(FAthenaReplayBrowserRowData, Eliminations) == 0x000024, "Member 'FAthenaReplayBrowserRowData::Eliminations' has a wrong offset!");

// ScriptStruct FortniteUI.AthenaTeamDisplayInfo
// 0x0088 (0x0088 - 0x0000)
struct FAthenaTeamDisplayInfo final
{
public:
	TSoftObjectPtr<class UObject>                 Icon;                                              // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 Ribbon;                                            // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FLinearColor                           TextColor;                                         // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PedestalColor;                                     // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaTeamDisplayInfo) == 0x000008, "Wrong alignment on FAthenaTeamDisplayInfo");
static_assert(sizeof(FAthenaTeamDisplayInfo) == 0x000088, "Wrong size on FAthenaTeamDisplayInfo");
static_assert(offsetof(FAthenaTeamDisplayInfo, Icon) == 0x000000, "Member 'FAthenaTeamDisplayInfo::Icon' has a wrong offset!");
static_assert(offsetof(FAthenaTeamDisplayInfo, Ribbon) == 0x000028, "Member 'FAthenaTeamDisplayInfo::Ribbon' has a wrong offset!");
static_assert(offsetof(FAthenaTeamDisplayInfo, Name) == 0x000050, "Member 'FAthenaTeamDisplayInfo::Name' has a wrong offset!");
static_assert(offsetof(FAthenaTeamDisplayInfo, TextColor) == 0x000068, "Member 'FAthenaTeamDisplayInfo::TextColor' has a wrong offset!");
static_assert(offsetof(FAthenaTeamDisplayInfo, PedestalColor) == 0x000078, "Member 'FAthenaTeamDisplayInfo::PedestalColor' has a wrong offset!");

// ScriptStruct FortniteUI.MarkerLargeIndicatorType
// 0x0018 (0x0018 - 0x0000)
struct FMarkerLargeIndicatorType final
{
public:
	class UMaterialInterface*                     MarkerMaterial;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ImageSize;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMarkerLargeIndicatorType) == 0x000008, "Wrong alignment on FMarkerLargeIndicatorType");
static_assert(sizeof(FMarkerLargeIndicatorType) == 0x000018, "Wrong size on FMarkerLargeIndicatorType");
static_assert(offsetof(FMarkerLargeIndicatorType, MarkerMaterial) == 0x000000, "Member 'FMarkerLargeIndicatorType::MarkerMaterial' has a wrong offset!");
static_assert(offsetof(FMarkerLargeIndicatorType, ImageSize) == 0x000008, "Member 'FMarkerLargeIndicatorType::ImageSize' has a wrong offset!");

// ScriptStruct FortniteUI.AthenaTeamCountSlotData
// 0x0038 (0x0038 - 0x0000)
struct FAthenaTeamCountSlotData final
{
public:
	class FText                                   TeamNameText;                                      // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   TeamCountText;                                     // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bIsMyTeam;                                         // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAthenaTeamCountSlotData) == 0x000008, "Wrong alignment on FAthenaTeamCountSlotData");
static_assert(sizeof(FAthenaTeamCountSlotData) == 0x000038, "Wrong size on FAthenaTeamCountSlotData");
static_assert(offsetof(FAthenaTeamCountSlotData, TeamNameText) == 0x000000, "Member 'FAthenaTeamCountSlotData::TeamNameText' has a wrong offset!");
static_assert(offsetof(FAthenaTeamCountSlotData, TeamCountText) == 0x000018, "Member 'FAthenaTeamCountSlotData::TeamCountText' has a wrong offset!");
static_assert(offsetof(FAthenaTeamCountSlotData, bIsMyTeam) == 0x000030, "Member 'FAthenaTeamCountSlotData::bIsMyTeam' has a wrong offset!");

// ScriptStruct FortniteUI.FortTopBarTabButtonInfo
// 0x0110 (0x0110 - 0x0000)
struct FFortTopBarTabButtonInfo final
{
public:
	class FName                                   TabId;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CalendarEventName;                                 // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0018(0x0018)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            IconBrush;                                         // 0x0030(0x00C0)(Edit, NativeAccessSpecifierPublic)
	EFortUIFeature                                LinkedUIFeature;                                   // 0x00F0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBangType                                 BangType;                                          // 0x00F1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceImage;                                       // 0x00F2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrimaryPlayerOnly;                                // 0x00F3(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInteractAnalytic;                                 // 0x00F4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortTopBarTabButton>       OverrideTabWidget;                                 // 0x00F8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDynamicTab;                                     // 0x0100(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0xF];                                      // 0x0101(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortTopBarTabButtonInfo) == 0x000010, "Wrong alignment on FFortTopBarTabButtonInfo");
static_assert(sizeof(FFortTopBarTabButtonInfo) == 0x000110, "Wrong size on FFortTopBarTabButtonInfo");
static_assert(offsetof(FFortTopBarTabButtonInfo, TabId) == 0x000000, "Member 'FFortTopBarTabButtonInfo::TabId' has a wrong offset!");
static_assert(offsetof(FFortTopBarTabButtonInfo, CalendarEventName) == 0x000008, "Member 'FFortTopBarTabButtonInfo::CalendarEventName' has a wrong offset!");
static_assert(offsetof(FFortTopBarTabButtonInfo, DisplayName) == 0x000018, "Member 'FFortTopBarTabButtonInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FFortTopBarTabButtonInfo, IconBrush) == 0x000030, "Member 'FFortTopBarTabButtonInfo::IconBrush' has a wrong offset!");
static_assert(offsetof(FFortTopBarTabButtonInfo, LinkedUIFeature) == 0x0000F0, "Member 'FFortTopBarTabButtonInfo::LinkedUIFeature' has a wrong offset!");
static_assert(offsetof(FFortTopBarTabButtonInfo, BangType) == 0x0000F1, "Member 'FFortTopBarTabButtonInfo::BangType' has a wrong offset!");
static_assert(offsetof(FFortTopBarTabButtonInfo, bForceImage) == 0x0000F2, "Member 'FFortTopBarTabButtonInfo::bForceImage' has a wrong offset!");
static_assert(offsetof(FFortTopBarTabButtonInfo, bPrimaryPlayerOnly) == 0x0000F3, "Member 'FFortTopBarTabButtonInfo::bPrimaryPlayerOnly' has a wrong offset!");
static_assert(offsetof(FFortTopBarTabButtonInfo, bInteractAnalytic) == 0x0000F4, "Member 'FFortTopBarTabButtonInfo::bInteractAnalytic' has a wrong offset!");
static_assert(offsetof(FFortTopBarTabButtonInfo, OverrideTabWidget) == 0x0000F8, "Member 'FFortTopBarTabButtonInfo::OverrideTabWidget' has a wrong offset!");
static_assert(offsetof(FFortTopBarTabButtonInfo, bIsDynamicTab) == 0x000100, "Member 'FFortTopBarTabButtonInfo::bIsDynamicTab' has a wrong offset!");

// ScriptStruct FortniteUI.AthenaVariantFilterSet
// 0x0010 (0x0010 - 0x0000)
struct FAthenaVariantFilterSet final
{
public:
	TArray<struct FAthenaVariantFilterTabInfo_Primary> PrimaryTabs;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaVariantFilterSet) == 0x000008, "Wrong alignment on FAthenaVariantFilterSet");
static_assert(sizeof(FAthenaVariantFilterSet) == 0x000010, "Wrong size on FAthenaVariantFilterSet");
static_assert(offsetof(FAthenaVariantFilterSet, PrimaryTabs) == 0x000000, "Member 'FAthenaVariantFilterSet::PrimaryTabs' has a wrong offset!");

// ScriptStruct FortniteUI.WinConditionPlacementData
// 0x0014 (0x0014 - 0x0000)
struct FWinConditionPlacementData final
{
public:
	struct FMargin                                Padding;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWinConditionPlacementData) == 0x000004, "Wrong alignment on FWinConditionPlacementData");
static_assert(sizeof(FWinConditionPlacementData) == 0x000014, "Wrong size on FWinConditionPlacementData");
static_assert(offsetof(FWinConditionPlacementData, Padding) == 0x000000, "Member 'FWinConditionPlacementData::Padding' has a wrong offset!");
static_assert(offsetof(FWinConditionPlacementData, HorizontalAlignment) == 0x000010, "Member 'FWinConditionPlacementData::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(FWinConditionPlacementData, VerticalAlignment) == 0x000011, "Member 'FWinConditionPlacementData::VerticalAlignment' has a wrong offset!");

// ScriptStruct FortniteUI.WinConditionPlacementDataMapWrapper
// 0x0050 (0x0050 - 0x0000)
struct FWinConditionPlacementDataMapWrapper final
{
public:
	TMap<EHUDMessagePlacement, struct FWinConditionPlacementData> Data;                                              // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWinConditionPlacementDataMapWrapper) == 0x000008, "Wrong alignment on FWinConditionPlacementDataMapWrapper");
static_assert(sizeof(FWinConditionPlacementDataMapWrapper) == 0x000050, "Wrong size on FWinConditionPlacementDataMapWrapper");
static_assert(offsetof(FWinConditionPlacementDataMapWrapper, Data) == 0x000000, "Member 'FWinConditionPlacementDataMapWrapper::Data' has a wrong offset!");

// ScriptStruct FortniteUI.BarrierObjectState
// 0x0010 (0x0010 - 0x0000)
struct FBarrierObjectState final
{
public:
	class AAthenaBarrierObjective*                ObjectiveActor;                                    // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TeamNum;                                           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBarrierFoodTeam                              FoodTeam;                                          // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBarrierObjectiveDamageState                  DamageState;                                       // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBarrierObjectState) == 0x000008, "Wrong alignment on FBarrierObjectState");
static_assert(sizeof(FBarrierObjectState) == 0x000010, "Wrong size on FBarrierObjectState");
static_assert(offsetof(FBarrierObjectState, ObjectiveActor) == 0x000000, "Member 'FBarrierObjectState::ObjectiveActor' has a wrong offset!");
static_assert(offsetof(FBarrierObjectState, TeamNum) == 0x000008, "Member 'FBarrierObjectState::TeamNum' has a wrong offset!");
static_assert(offsetof(FBarrierObjectState, FoodTeam) == 0x000009, "Member 'FBarrierObjectState::FoodTeam' has a wrong offset!");
static_assert(offsetof(FBarrierObjectState, DamageState) == 0x00000A, "Member 'FBarrierObjectState::DamageState' has a wrong offset!");

// ScriptStruct FortniteUI.BattleLabDisplayData
// 0x0068 (0x0068 - 0x0000)
struct FBattleLabDisplayData final
{
public:
	class FText                                   TitleText;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DescriptionText;                                   // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EBattleLabAlertType                           AlertType;                                         // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RewardCount;                                       // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardCountTotal;                                  // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              MainIconTexture;                                   // 0x0040(0x0028)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleLabDisplayData) == 0x000008, "Wrong alignment on FBattleLabDisplayData");
static_assert(sizeof(FBattleLabDisplayData) == 0x000068, "Wrong size on FBattleLabDisplayData");
static_assert(offsetof(FBattleLabDisplayData, TitleText) == 0x000000, "Member 'FBattleLabDisplayData::TitleText' has a wrong offset!");
static_assert(offsetof(FBattleLabDisplayData, DescriptionText) == 0x000018, "Member 'FBattleLabDisplayData::DescriptionText' has a wrong offset!");
static_assert(offsetof(FBattleLabDisplayData, AlertType) == 0x000030, "Member 'FBattleLabDisplayData::AlertType' has a wrong offset!");
static_assert(offsetof(FBattleLabDisplayData, RewardCount) == 0x000034, "Member 'FBattleLabDisplayData::RewardCount' has a wrong offset!");
static_assert(offsetof(FBattleLabDisplayData, RewardCountTotal) == 0x000038, "Member 'FBattleLabDisplayData::RewardCountTotal' has a wrong offset!");
static_assert(offsetof(FBattleLabDisplayData, MainIconTexture) == 0x000040, "Member 'FBattleLabDisplayData::MainIconTexture' has a wrong offset!");

// ScriptStruct FortniteUI.TrackCategoryUI
// 0x0050 (0x0050 - 0x0000)
struct FTrackCategoryUI final
{
public:
	struct FTrackCategory                         TrackData;                                         // 0x0000(0x0048)(NativeAccessSpecifierPublic)
	int32                                         LastSelectedIndex;                                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTrackCategoryUI) == 0x000008, "Wrong alignment on FTrackCategoryUI");
static_assert(sizeof(FTrackCategoryUI) == 0x000050, "Wrong size on FTrackCategoryUI");
static_assert(offsetof(FTrackCategoryUI, TrackData) == 0x000000, "Member 'FTrackCategoryUI::TrackData' has a wrong offset!");
static_assert(offsetof(FTrackCategoryUI, LastSelectedIndex) == 0x000048, "Member 'FTrackCategoryUI::LastSelectedIndex' has a wrong offset!");

// ScriptStruct FortniteUI.BattlePassPageData
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FBattlePassPageData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBattlePassPageData) == 0x000004, "Wrong alignment on FBattlePassPageData");
static_assert(sizeof(FBattlePassPageData) == 0x000008, "Wrong size on FBattlePassPageData");

// ScriptStruct FortniteUI.PreviewRewardData
// 0x00A8 (0x00A8 - 0x0000)
struct alignas(0x08) FPreviewRewardData final
{
public:
	uint8                                         Pad_0[0xA8];                                       // 0x0000(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPreviewRewardData) == 0x000008, "Wrong alignment on FPreviewRewardData");
static_assert(sizeof(FPreviewRewardData) == 0x0000A8, "Wrong size on FPreviewRewardData");

// ScriptStruct FortniteUI.PreviewUnlockRewardData
// 0x0030 (0x0030 - 0x0000)
struct FPreviewUnlockRewardData final
{
public:
	int32                                         Currency;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumAdditionalRewards;                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalRewards;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumCharacters;                                     // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPreviewRewardData>             Characters;                                        // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPreviewRewardData>             AdditionalRewards;                                 // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPreviewUnlockRewardData) == 0x000008, "Wrong alignment on FPreviewUnlockRewardData");
static_assert(sizeof(FPreviewUnlockRewardData) == 0x000030, "Wrong size on FPreviewUnlockRewardData");
static_assert(offsetof(FPreviewUnlockRewardData, Currency) == 0x000000, "Member 'FPreviewUnlockRewardData::Currency' has a wrong offset!");
static_assert(offsetof(FPreviewUnlockRewardData, NumAdditionalRewards) == 0x000004, "Member 'FPreviewUnlockRewardData::NumAdditionalRewards' has a wrong offset!");
static_assert(offsetof(FPreviewUnlockRewardData, TotalRewards) == 0x000008, "Member 'FPreviewUnlockRewardData::TotalRewards' has a wrong offset!");
static_assert(offsetof(FPreviewUnlockRewardData, NumCharacters) == 0x00000C, "Member 'FPreviewUnlockRewardData::NumCharacters' has a wrong offset!");
static_assert(offsetof(FPreviewUnlockRewardData, Characters) == 0x000010, "Member 'FPreviewUnlockRewardData::Characters' has a wrong offset!");
static_assert(offsetof(FPreviewUnlockRewardData, AdditionalRewards) == 0x000020, "Member 'FPreviewUnlockRewardData::AdditionalRewards' has a wrong offset!");

// ScriptStruct FortniteUI.PreviewUnlockData
// 0x00B0 (0x00B0 - 0x0000)
struct FPreviewUnlockData final
{
public:
	struct FPreviewUnlockRewardData               InstantRewards;                                    // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FPreviewUnlockRewardData               EarnedRewards;                                     // 0x0030(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ChapterNumberText;                                 // 0x0060(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   SeasonNumberText;                                  // 0x0078(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   SummaryText;                                       // 0x0090(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bPaysForSelf;                                      // 0x00A8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPreviewUnlockData) == 0x000008, "Wrong alignment on FPreviewUnlockData");
static_assert(sizeof(FPreviewUnlockData) == 0x0000B0, "Wrong size on FPreviewUnlockData");
static_assert(offsetof(FPreviewUnlockData, InstantRewards) == 0x000000, "Member 'FPreviewUnlockData::InstantRewards' has a wrong offset!");
static_assert(offsetof(FPreviewUnlockData, EarnedRewards) == 0x000030, "Member 'FPreviewUnlockData::EarnedRewards' has a wrong offset!");
static_assert(offsetof(FPreviewUnlockData, ChapterNumberText) == 0x000060, "Member 'FPreviewUnlockData::ChapterNumberText' has a wrong offset!");
static_assert(offsetof(FPreviewUnlockData, SeasonNumberText) == 0x000078, "Member 'FPreviewUnlockData::SeasonNumberText' has a wrong offset!");
static_assert(offsetof(FPreviewUnlockData, SummaryText) == 0x000090, "Member 'FPreviewUnlockData::SummaryText' has a wrong offset!");
static_assert(offsetof(FPreviewUnlockData, bPaysForSelf) == 0x0000A8, "Member 'FPreviewUnlockData::bPaysForSelf' has a wrong offset!");

// ScriptStruct FortniteUI.BattlePassCharacterPreviewDisplayData
// 0x0010 (0x0010 - 0x0000)
struct FBattlePassCharacterPreviewDisplayData final
{
public:
	class UAthenaCharacterItemDefinition*         CharacterItemDef;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      PreviewMaterial;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattlePassCharacterPreviewDisplayData) == 0x000008, "Wrong alignment on FBattlePassCharacterPreviewDisplayData");
static_assert(sizeof(FBattlePassCharacterPreviewDisplayData) == 0x000010, "Wrong size on FBattlePassCharacterPreviewDisplayData");
static_assert(offsetof(FBattlePassCharacterPreviewDisplayData, CharacterItemDef) == 0x000000, "Member 'FBattlePassCharacterPreviewDisplayData::CharacterItemDef' has a wrong offset!");
static_assert(offsetof(FBattlePassCharacterPreviewDisplayData, PreviewMaterial) == 0x000008, "Member 'FBattlePassCharacterPreviewDisplayData::PreviewMaterial' has a wrong offset!");

// ScriptStruct FortniteUI.BattlePassShowRewardParams
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FBattlePassShowRewardParams final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBattlePassShowRewardParams) == 0x000008, "Wrong alignment on FBattlePassShowRewardParams");
static_assert(sizeof(FBattlePassShowRewardParams) == 0x000010, "Wrong size on FBattlePassShowRewardParams");

// ScriptStruct FortniteUI.CycledItemPreviewSettings
// 0x00B0 (0x00B0 - 0x0000)
struct alignas(0x08) FCycledItemPreviewSettings final
{
public:
	uint8                                         Pad_0[0xB0];                                       // 0x0000(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCycledItemPreviewSettings) == 0x000008, "Wrong alignment on FCycledItemPreviewSettings");
static_assert(sizeof(FCycledItemPreviewSettings) == 0x0000B0, "Wrong size on FCycledItemPreviewSettings");

// ScriptStruct FortniteUI.AthenaBossHealthData
// 0x0030 (0x0030 - 0x0000)
struct FAthenaBossHealthData final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowShields;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         Health;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HealthMax;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Shields;                                           // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShieldsMax;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaBossHealthData) == 0x000008, "Wrong alignment on FAthenaBossHealthData");
static_assert(sizeof(FAthenaBossHealthData) == 0x000030, "Wrong size on FAthenaBossHealthData");
static_assert(offsetof(FAthenaBossHealthData, bVisible) == 0x000000, "Member 'FAthenaBossHealthData::bVisible' has a wrong offset!");
static_assert(offsetof(FAthenaBossHealthData, bShowShields) == 0x000001, "Member 'FAthenaBossHealthData::bShowShields' has a wrong offset!");
static_assert(offsetof(FAthenaBossHealthData, Name) == 0x000008, "Member 'FAthenaBossHealthData::Name' has a wrong offset!");
static_assert(offsetof(FAthenaBossHealthData, Health) == 0x000020, "Member 'FAthenaBossHealthData::Health' has a wrong offset!");
static_assert(offsetof(FAthenaBossHealthData, HealthMax) == 0x000024, "Member 'FAthenaBossHealthData::HealthMax' has a wrong offset!");
static_assert(offsetof(FAthenaBossHealthData, Shields) == 0x000028, "Member 'FAthenaBossHealthData::Shields' has a wrong offset!");
static_assert(offsetof(FAthenaBossHealthData, ShieldsMax) == 0x00002C, "Member 'FAthenaBossHealthData::ShieldsMax' has a wrong offset!");

// ScriptStruct FortniteUI.FortShowdownScoringRuleDisplayInfo
// 0x0078 (0x0078 - 0x0000)
struct FFortShowdownScoringRuleDisplayInfo final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Description;                                       // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   PosterDescription;                                 // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   PosterIntervalDescription;                         // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0050(0x0028)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortShowdownScoringRuleDisplayInfo) == 0x000008, "Wrong alignment on FFortShowdownScoringRuleDisplayInfo");
static_assert(sizeof(FFortShowdownScoringRuleDisplayInfo) == 0x000078, "Wrong size on FFortShowdownScoringRuleDisplayInfo");
static_assert(offsetof(FFortShowdownScoringRuleDisplayInfo, Name) == 0x000000, "Member 'FFortShowdownScoringRuleDisplayInfo::Name' has a wrong offset!");
static_assert(offsetof(FFortShowdownScoringRuleDisplayInfo, Description) == 0x000008, "Member 'FFortShowdownScoringRuleDisplayInfo::Description' has a wrong offset!");
static_assert(offsetof(FFortShowdownScoringRuleDisplayInfo, PosterDescription) == 0x000020, "Member 'FFortShowdownScoringRuleDisplayInfo::PosterDescription' has a wrong offset!");
static_assert(offsetof(FFortShowdownScoringRuleDisplayInfo, PosterIntervalDescription) == 0x000038, "Member 'FFortShowdownScoringRuleDisplayInfo::PosterIntervalDescription' has a wrong offset!");
static_assert(offsetof(FFortShowdownScoringRuleDisplayInfo, Icon) == 0x000050, "Member 'FFortShowdownScoringRuleDisplayInfo::Icon' has a wrong offset!");

// ScriptStruct FortniteUI.SubgameDisplayData
// 0x0098 (0x0098 - 0x0000)
struct FSubgameDisplayData final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   SpecialMessage;                                    // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   StandardMessageLine1;                              // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   StandardMessageLine2;                              // 0x0060(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 Image;                                             // 0x0078(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0088(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubgameDisplayData) == 0x000008, "Wrong alignment on FSubgameDisplayData");
static_assert(sizeof(FSubgameDisplayData) == 0x000098, "Wrong size on FSubgameDisplayData");
static_assert(offsetof(FSubgameDisplayData, Title) == 0x000000, "Member 'FSubgameDisplayData::Title' has a wrong offset!");
static_assert(offsetof(FSubgameDisplayData, Description) == 0x000018, "Member 'FSubgameDisplayData::Description' has a wrong offset!");
static_assert(offsetof(FSubgameDisplayData, SpecialMessage) == 0x000030, "Member 'FSubgameDisplayData::SpecialMessage' has a wrong offset!");
static_assert(offsetof(FSubgameDisplayData, StandardMessageLine1) == 0x000048, "Member 'FSubgameDisplayData::StandardMessageLine1' has a wrong offset!");
static_assert(offsetof(FSubgameDisplayData, StandardMessageLine2) == 0x000060, "Member 'FSubgameDisplayData::StandardMessageLine2' has a wrong offset!");
static_assert(offsetof(FSubgameDisplayData, Image) == 0x000078, "Member 'FSubgameDisplayData::Image' has a wrong offset!");
static_assert(offsetof(FSubgameDisplayData, Color) == 0x000088, "Member 'FSubgameDisplayData::Color' has a wrong offset!");

// ScriptStruct FortniteUI.SubgameScreenSource
// 0x01E8 (0x01E8 - 0x0000)
struct FSubgameScreenSource final
{
public:
	class FString                                 _title;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 __locale;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSubgameDisplayData                    Creative;                                          // 0x0020(0x0098)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSubgameDisplayData                    SaveTheWorld;                                      // 0x00B8(0x0098)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSubgameDisplayData                    BattleRoyale;                                      // 0x0150(0x0098)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubgameScreenSource) == 0x000008, "Wrong alignment on FSubgameScreenSource");
static_assert(sizeof(FSubgameScreenSource) == 0x0001E8, "Wrong size on FSubgameScreenSource");
static_assert(offsetof(FSubgameScreenSource, _title) == 0x000000, "Member 'FSubgameScreenSource::_title' has a wrong offset!");
static_assert(offsetof(FSubgameScreenSource, __locale) == 0x000010, "Member 'FSubgameScreenSource::__locale' has a wrong offset!");
static_assert(offsetof(FSubgameScreenSource, Creative) == 0x000020, "Member 'FSubgameScreenSource::Creative' has a wrong offset!");
static_assert(offsetof(FSubgameScreenSource, SaveTheWorld) == 0x0000B8, "Member 'FSubgameScreenSource::SaveTheWorld' has a wrong offset!");
static_assert(offsetof(FSubgameScreenSource, BattleRoyale) == 0x000150, "Member 'FSubgameScreenSource::BattleRoyale' has a wrong offset!");

// ScriptStruct FortniteUI.KoreanCafeJsonObject
// 0x0010 (0x0010 - 0x0000)
struct FKoreanCafeJsonObject final
{
public:
	TArray<struct FKoreanCafeData>                Cafes;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoreanCafeJsonObject) == 0x000008, "Wrong alignment on FKoreanCafeJsonObject");
static_assert(sizeof(FKoreanCafeJsonObject) == 0x000010, "Wrong size on FKoreanCafeJsonObject");
static_assert(offsetof(FKoreanCafeJsonObject, Cafes) == 0x000000, "Member 'FKoreanCafeJsonObject::Cafes' has a wrong offset!");

// ScriptStruct FortniteUI.KoreanCafeSource
// 0x0030 (0x0030 - 0x0000)
struct FKoreanCafeSource final
{
public:
	class FString                                 _title;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 __locale;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKoreanCafeJsonObject                  Cafe_Info;                                         // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKoreanCafeSource) == 0x000008, "Wrong alignment on FKoreanCafeSource");
static_assert(sizeof(FKoreanCafeSource) == 0x000030, "Wrong size on FKoreanCafeSource");
static_assert(offsetof(FKoreanCafeSource, _title) == 0x000000, "Member 'FKoreanCafeSource::_title' has a wrong offset!");
static_assert(offsetof(FKoreanCafeSource, __locale) == 0x000010, "Member 'FKoreanCafeSource::__locale' has a wrong offset!");
static_assert(offsetof(FKoreanCafeSource, Cafe_Info) == 0x000020, "Member 'FKoreanCafeSource::Cafe_Info' has a wrong offset!");

// ScriptStruct FortniteUI.CreativeAdSource
// 0x0030 (0x0030 - 0x0000)
struct FCreativeAdSource final
{
public:
	class FString                                 _title;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 __locale;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCreativeAdJsonObject                  Ad_Info;                                           // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCreativeAdSource) == 0x000008, "Wrong alignment on FCreativeAdSource");
static_assert(sizeof(FCreativeAdSource) == 0x000030, "Wrong size on FCreativeAdSource");
static_assert(offsetof(FCreativeAdSource, _title) == 0x000000, "Member 'FCreativeAdSource::_title' has a wrong offset!");
static_assert(offsetof(FCreativeAdSource, __locale) == 0x000010, "Member 'FCreativeAdSource::__locale' has a wrong offset!");
static_assert(offsetof(FCreativeAdSource, Ad_Info) == 0x000020, "Member 'FCreativeAdSource::Ad_Info' has a wrong offset!");

// ScriptStruct FortniteUI.DynamicBackground
// 0x0048 (0x0048 - 0x0000)
struct FDynamicBackground final
{
public:
	class FString                                 _title;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 __locale;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDynamicBackgroudKey                          Key;                                               // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BackgroundImage;                                   // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Stage;                                             // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDynamicBackground) == 0x000008, "Wrong alignment on FDynamicBackground");
static_assert(sizeof(FDynamicBackground) == 0x000048, "Wrong size on FDynamicBackground");
static_assert(offsetof(FDynamicBackground, _title) == 0x000000, "Member 'FDynamicBackground::_title' has a wrong offset!");
static_assert(offsetof(FDynamicBackground, __locale) == 0x000010, "Member 'FDynamicBackground::__locale' has a wrong offset!");
static_assert(offsetof(FDynamicBackground, Key) == 0x000020, "Member 'FDynamicBackground::Key' has a wrong offset!");
static_assert(offsetof(FDynamicBackground, BackgroundImage) == 0x000028, "Member 'FDynamicBackground::BackgroundImage' has a wrong offset!");
static_assert(offsetof(FDynamicBackground, Stage) == 0x000038, "Member 'FDynamicBackground::Stage' has a wrong offset!");

// ScriptStruct FortniteUI.DynamicBackgrounds
// 0x0010 (0x0010 - 0x0000)
struct FDynamicBackgrounds final
{
public:
	TArray<struct FDynamicBackground>             Backgrounds;                                       // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDynamicBackgrounds) == 0x000008, "Wrong alignment on FDynamicBackgrounds");
static_assert(sizeof(FDynamicBackgrounds) == 0x000010, "Wrong size on FDynamicBackgrounds");
static_assert(offsetof(FDynamicBackgrounds, Backgrounds) == 0x000000, "Member 'FDynamicBackgrounds::Backgrounds' has a wrong offset!");

// ScriptStruct FortniteUI.DynamicBackgroundsSource
// 0x0040 (0x0040 - 0x0000)
struct FDynamicBackgroundsSource final
{
public:
	class FString                                 _title;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 __locale;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastModified;                                      // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDynamicBackgrounds                    Backgrounds;                                       // 0x0030(0x0010)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FDynamicBackgroundsSource) == 0x000008, "Wrong alignment on FDynamicBackgroundsSource");
static_assert(sizeof(FDynamicBackgroundsSource) == 0x000040, "Wrong size on FDynamicBackgroundsSource");
static_assert(offsetof(FDynamicBackgroundsSource, _title) == 0x000000, "Member 'FDynamicBackgroundsSource::_title' has a wrong offset!");
static_assert(offsetof(FDynamicBackgroundsSource, __locale) == 0x000010, "Member 'FDynamicBackgroundsSource::__locale' has a wrong offset!");
static_assert(offsetof(FDynamicBackgroundsSource, LastModified) == 0x000020, "Member 'FDynamicBackgroundsSource::LastModified' has a wrong offset!");
static_assert(offsetof(FDynamicBackgroundsSource, Backgrounds) == 0x000030, "Member 'FDynamicBackgroundsSource::Backgrounds' has a wrong offset!");

// ScriptStruct FortniteUI.CmsJsonMessages
// 0x0298 (0x0298 - 0x0000)
struct FCmsJsonMessages final
{
public:
	class FString                                 _title;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _locale;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FShowdownTournamentSource              TournamentInformation;                             // 0x0020(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FKoreanCafeSource                      KoreanCafe;                                        // 0x0050(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSubgameScreenSource                   SubGameInfo;                                       // 0x0080(0x01E8)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FCreativeAdSource                      CreativeAds;                                       // 0x0268(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCmsJsonMessages) == 0x000008, "Wrong alignment on FCmsJsonMessages");
static_assert(sizeof(FCmsJsonMessages) == 0x000298, "Wrong size on FCmsJsonMessages");
static_assert(offsetof(FCmsJsonMessages, _title) == 0x000000, "Member 'FCmsJsonMessages::_title' has a wrong offset!");
static_assert(offsetof(FCmsJsonMessages, _locale) == 0x000010, "Member 'FCmsJsonMessages::_locale' has a wrong offset!");
static_assert(offsetof(FCmsJsonMessages, TournamentInformation) == 0x000020, "Member 'FCmsJsonMessages::TournamentInformation' has a wrong offset!");
static_assert(offsetof(FCmsJsonMessages, KoreanCafe) == 0x000050, "Member 'FCmsJsonMessages::KoreanCafe' has a wrong offset!");
static_assert(offsetof(FCmsJsonMessages, SubGameInfo) == 0x000080, "Member 'FCmsJsonMessages::SubGameInfo' has a wrong offset!");
static_assert(offsetof(FCmsJsonMessages, CreativeAds) == 0x000268, "Member 'FCmsJsonMessages::CreativeAds' has a wrong offset!");

// ScriptStruct FortniteUI.AthenaShopCarouselItem
// 0x0068 (0x0068 - 0x0000)
struct FAthenaShopCarouselItem final
{
public:
	class FText                                   PreviewTitle;                                      // 0x0000(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   FullTitle;                                         // 0x0018(0x0018)(NativeAccessSpecifierPublic)
	class FString                                 TileImage;                                         // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VideoString;                                       // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OfferId;                                           // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LandingPriority;                                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemShopNavigationAction                     Action;                                            // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHidden;                                           // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAthenaShopCarouselItem) == 0x000008, "Wrong alignment on FAthenaShopCarouselItem");
static_assert(sizeof(FAthenaShopCarouselItem) == 0x000068, "Wrong size on FAthenaShopCarouselItem");
static_assert(offsetof(FAthenaShopCarouselItem, PreviewTitle) == 0x000000, "Member 'FAthenaShopCarouselItem::PreviewTitle' has a wrong offset!");
static_assert(offsetof(FAthenaShopCarouselItem, FullTitle) == 0x000018, "Member 'FAthenaShopCarouselItem::FullTitle' has a wrong offset!");
static_assert(offsetof(FAthenaShopCarouselItem, TileImage) == 0x000030, "Member 'FAthenaShopCarouselItem::TileImage' has a wrong offset!");
static_assert(offsetof(FAthenaShopCarouselItem, VideoString) == 0x000040, "Member 'FAthenaShopCarouselItem::VideoString' has a wrong offset!");
static_assert(offsetof(FAthenaShopCarouselItem, OfferId) == 0x000050, "Member 'FAthenaShopCarouselItem::OfferId' has a wrong offset!");
static_assert(offsetof(FAthenaShopCarouselItem, LandingPriority) == 0x000060, "Member 'FAthenaShopCarouselItem::LandingPriority' has a wrong offset!");
static_assert(offsetof(FAthenaShopCarouselItem, Action) == 0x000064, "Member 'FAthenaShopCarouselItem::Action' has a wrong offset!");
static_assert(offsetof(FAthenaShopCarouselItem, bHidden) == 0x000065, "Member 'FAthenaShopCarouselItem::bHidden' has a wrong offset!");

// ScriptStruct FortniteUI.AthenaShopSection
// 0x0088 (0x0088 - 0x0000)
struct FAthenaShopSection final
{
public:
	class FName                                   SectionId;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SectionDisplayName;                                // 0x0008(0x0018)(NativeAccessSpecifierPublic)
	bool                                          bSortOffersByOwnership;                            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowIneligibleOffers;                             // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowIneligibleOffersIfGiftable;                   // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowTimer;                                        // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableToastNotification;                          // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LandingPriority;                                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDynamicBackground                     SectionBackground;                                 // 0x0030(0x0048)(NativeAccessSpecifierPublic)
	bool                                          bHidden;                                           // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              DateToResetItemShopLanding;                        // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaShopSection) == 0x000008, "Wrong alignment on FAthenaShopSection");
static_assert(sizeof(FAthenaShopSection) == 0x000088, "Wrong size on FAthenaShopSection");
static_assert(offsetof(FAthenaShopSection, SectionId) == 0x000000, "Member 'FAthenaShopSection::SectionId' has a wrong offset!");
static_assert(offsetof(FAthenaShopSection, SectionDisplayName) == 0x000008, "Member 'FAthenaShopSection::SectionDisplayName' has a wrong offset!");
static_assert(offsetof(FAthenaShopSection, bSortOffersByOwnership) == 0x000020, "Member 'FAthenaShopSection::bSortOffersByOwnership' has a wrong offset!");
static_assert(offsetof(FAthenaShopSection, bShowIneligibleOffers) == 0x000021, "Member 'FAthenaShopSection::bShowIneligibleOffers' has a wrong offset!");
static_assert(offsetof(FAthenaShopSection, bShowIneligibleOffersIfGiftable) == 0x000022, "Member 'FAthenaShopSection::bShowIneligibleOffersIfGiftable' has a wrong offset!");
static_assert(offsetof(FAthenaShopSection, bShowTimer) == 0x000023, "Member 'FAthenaShopSection::bShowTimer' has a wrong offset!");
static_assert(offsetof(FAthenaShopSection, bEnableToastNotification) == 0x000024, "Member 'FAthenaShopSection::bEnableToastNotification' has a wrong offset!");
static_assert(offsetof(FAthenaShopSection, LandingPriority) == 0x000028, "Member 'FAthenaShopSection::LandingPriority' has a wrong offset!");
static_assert(offsetof(FAthenaShopSection, SectionBackground) == 0x000030, "Member 'FAthenaShopSection::SectionBackground' has a wrong offset!");
static_assert(offsetof(FAthenaShopSection, bHidden) == 0x000078, "Member 'FAthenaShopSection::bHidden' has a wrong offset!");
static_assert(offsetof(FAthenaShopSection, DateToResetItemShopLanding) == 0x000080, "Member 'FAthenaShopSection::DateToResetItemShopLanding' has a wrong offset!");

// ScriptStruct FortniteUI.PlatformPurchaseErrorCodeMessage
// 0x0038 (0x0038 - 0x0000)
struct FPlatformPurchaseErrorCodeMessage final
{
public:
	class FString                                 ErrorCode;                                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0010(0x0018)(NativeAccessSpecifierPublic)
	TArray<class FText>                           Messages;                                          // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlatformPurchaseErrorCodeMessage) == 0x000008, "Wrong alignment on FPlatformPurchaseErrorCodeMessage");
static_assert(sizeof(FPlatformPurchaseErrorCodeMessage) == 0x000038, "Wrong size on FPlatformPurchaseErrorCodeMessage");
static_assert(offsetof(FPlatformPurchaseErrorCodeMessage, ErrorCode) == 0x000000, "Member 'FPlatformPurchaseErrorCodeMessage::ErrorCode' has a wrong offset!");
static_assert(offsetof(FPlatformPurchaseErrorCodeMessage, Title) == 0x000010, "Member 'FPlatformPurchaseErrorCodeMessage::Title' has a wrong offset!");
static_assert(offsetof(FPlatformPurchaseErrorCodeMessage, Messages) == 0x000028, "Member 'FPlatformPurchaseErrorCodeMessage::Messages' has a wrong offset!");

// ScriptStruct FortniteUI.PlatformPurchaseErrorCodeMessages
// 0x0010 (0x0010 - 0x0000)
struct FPlatformPurchaseErrorCodeMessages final
{
public:
	TArray<struct FPlatformPurchaseErrorCodeMessage> ErrorCodeMessageList;                              // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlatformPurchaseErrorCodeMessages) == 0x000008, "Wrong alignment on FPlatformPurchaseErrorCodeMessages");
static_assert(sizeof(FPlatformPurchaseErrorCodeMessages) == 0x000010, "Wrong size on FPlatformPurchaseErrorCodeMessages");
static_assert(offsetof(FPlatformPurchaseErrorCodeMessages, ErrorCodeMessageList) == 0x000000, "Member 'FPlatformPurchaseErrorCodeMessages::ErrorCodeMessageList' has a wrong offset!");

// ScriptStruct FortniteUI.PlatformPurchaseMessaging
// 0x0010 (0x0010 - 0x0000)
struct FPlatformPurchaseMessaging final
{
public:
	struct FPlatformPurchaseErrorCodeMessages     ErrorCodeMessages;                                 // 0x0000(0x0010)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlatformPurchaseMessaging) == 0x000008, "Wrong alignment on FPlatformPurchaseMessaging");
static_assert(sizeof(FPlatformPurchaseMessaging) == 0x000010, "Wrong size on FPlatformPurchaseMessaging");
static_assert(offsetof(FPlatformPurchaseMessaging, ErrorCodeMessages) == 0x000000, "Member 'FPlatformPurchaseMessaging::ErrorCodeMessages' has a wrong offset!");

// ScriptStruct FortniteUI.VideoWidgetConfig
// 0x0080 (0x0080 - 0x0000)
struct FVideoWidgetConfig final
{
public:
	class UFortStreamMediaSource*                 StreamingMediaSource;                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VideoString;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VideoDisplayDataID;                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FallbackVideoID;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckAutoPlay;                                    // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceAutoPlay;                                    // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStreamingEnabled;                                 // 0x0016(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 VideoUID;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldBeModal;                                    // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSkipBoundaries;                                // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHoldToSkip;                                       // 0x002A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFadeFromWhite;                                    // 0x002B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowSkipping;                                    // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 mimetype;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VideoURL;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableLooping;                                    // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoClose;                                        // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideControls;                                     // 0x0052(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideBackground;                                   // 0x0053(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartMTTransparent;                               // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundMix*                              SoundMixOverride;                                  // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideSoundMix;                                 // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundClass*                            SoundClassOverride;                                // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bControlWorldRendering;                            // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisablePiP;                                       // 0x0071(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PartySyncStartTime;                                // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableCursor;                                    // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableStreamLimitsFromWidget;                    // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVideoWidgetConfig) == 0x000008, "Wrong alignment on FVideoWidgetConfig");
static_assert(sizeof(FVideoWidgetConfig) == 0x000080, "Wrong size on FVideoWidgetConfig");
static_assert(offsetof(FVideoWidgetConfig, StreamingMediaSource) == 0x000000, "Member 'FVideoWidgetConfig::StreamingMediaSource' has a wrong offset!");
static_assert(offsetof(FVideoWidgetConfig, VideoString) == 0x000008, "Member 'FVideoWidgetConfig::VideoString' has a wrong offset!");
static_assert(offsetof(FVideoWidgetConfig, VideoDisplayDataID) == 0x00000C, "Member 'FVideoWidgetConfig::VideoDisplayDataID' has a wrong offset!");
static_assert(offsetof(FVideoWidgetConfig, FallbackVideoID) == 0x000010, "Member 'FVideoWidgetConfig::FallbackVideoID' has a wrong offset!");
static_assert(offsetof(FVideoWidgetConfig, bCheckAutoPlay) == 0x000014, "Member 'FVideoWidgetConfig::bCheckAutoPlay' has a wrong offset!");
static_assert(offsetof(FVideoWidgetConfig, bForceAutoPlay) == 0x000015, "Member 'FVideoWidgetConfig::bForceAutoPlay' has a wrong offset!");
static_assert(offsetof(FVideoWidgetConfig, bStreamingEnabled) == 0x000016, "Member 'FVideoWidgetConfig::bStreamingEnabled' has a wrong offset!");
static_assert(offsetof(FVideoWidgetConfig, VideoUID) == 0x000018, "Member 'FVideoWidgetConfig::VideoUID' has a wrong offset!");
static_assert(offsetof(FVideoWidgetConfig, bShouldBeModal) == 0x000028, "Member 'FVideoWidgetConfig::bShouldBeModal' has a wrong offset!");
static_assert(offsetof(FVideoWidgetConfig, bUseSkipBoundaries) == 0x000029, "Member 'FVideoWidgetConfig::bUseSkipBoundaries' has a wrong offset!");
static_assert(offsetof(FVideoWidgetConfig, bHoldToSkip) == 0x00002A, "Member 'FVideoWidgetConfig::bHoldToSkip' has a wrong offset!");
static_assert(offsetof(FVideoWidgetConfig, bFadeFromWhite) == 0x00002B, "Member 'FVideoWidgetConfig::bFadeFromWhite' has a wrong offset!");
static_assert(offsetof(FVideoWidgetConfig, bAllowSkipping) == 0x00002C, "Member 'FVideoWidgetConfig::bAllowSkipping' has a wrong offset!");
static_assert(offsetof(FVideoWidgetConfig, mimetype) == 0x000030, "Member 'FVideoWidgetConfig::mimetype' has a wrong offset!");
static_assert(offsetof(FVideoWidgetConfig, VideoURL) == 0x000040, "Member 'FVideoWidgetConfig::VideoURL' has a wrong offset!");
static_assert(offsetof(FVideoWidgetConfig, bEnableLooping) == 0x000050, "Member 'FVideoWidgetConfig::bEnableLooping' has a wrong offset!");
static_assert(offsetof(FVideoWidgetConfig, bAutoClose) == 0x000051, "Member 'FVideoWidgetConfig::bAutoClose' has a wrong offset!");
static_assert(offsetof(FVideoWidgetConfig, bHideControls) == 0x000052, "Member 'FVideoWidgetConfig::bHideControls' has a wrong offset!");
static_assert(offsetof(FVideoWidgetConfig, bHideBackground) == 0x000053, "Member 'FVideoWidgetConfig::bHideBackground' has a wrong offset!");
static_assert(offsetof(FVideoWidgetConfig, bStartMTTransparent) == 0x000054, "Member 'FVideoWidgetConfig::bStartMTTransparent' has a wrong offset!");
static_assert(offsetof(FVideoWidgetConfig, SoundMixOverride) == 0x000058, "Member 'FVideoWidgetConfig::SoundMixOverride' has a wrong offset!");
static_assert(offsetof(FVideoWidgetConfig, bOverrideSoundMix) == 0x000060, "Member 'FVideoWidgetConfig::bOverrideSoundMix' has a wrong offset!");
static_assert(offsetof(FVideoWidgetConfig, SoundClassOverride) == 0x000068, "Member 'FVideoWidgetConfig::SoundClassOverride' has a wrong offset!");
static_assert(offsetof(FVideoWidgetConfig, bControlWorldRendering) == 0x000070, "Member 'FVideoWidgetConfig::bControlWorldRendering' has a wrong offset!");
static_assert(offsetof(FVideoWidgetConfig, bDisablePiP) == 0x000071, "Member 'FVideoWidgetConfig::bDisablePiP' has a wrong offset!");
static_assert(offsetof(FVideoWidgetConfig, PartySyncStartTime) == 0x000074, "Member 'FVideoWidgetConfig::PartySyncStartTime' has a wrong offset!");
static_assert(offsetof(FVideoWidgetConfig, bDisableCursor) == 0x000078, "Member 'FVideoWidgetConfig::bDisableCursor' has a wrong offset!");
static_assert(offsetof(FVideoWidgetConfig, bDisableStreamLimitsFromWidget) == 0x000079, "Member 'FVideoWidgetConfig::bDisableStreamLimitsFromWidget' has a wrong offset!");

// ScriptStruct FortniteUI.AthenaShopSpecialOffer
// 0x0088 (0x0088 - 0x0000)
struct FAthenaShopSpecialOffer final
{
public:
	bool                                          bSpecialOfferEnabled;                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVideoWidgetConfig                     SpecialOfferVideo;                                 // 0x0008(0x0080)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaShopSpecialOffer) == 0x000008, "Wrong alignment on FAthenaShopSpecialOffer");
static_assert(sizeof(FAthenaShopSpecialOffer) == 0x000088, "Wrong size on FAthenaShopSpecialOffer");
static_assert(offsetof(FAthenaShopSpecialOffer, bSpecialOfferEnabled) == 0x000000, "Member 'FAthenaShopSpecialOffer::bSpecialOfferEnabled' has a wrong offset!");
static_assert(offsetof(FAthenaShopSpecialOffer, SpecialOfferVideo) == 0x000008, "Member 'FAthenaShopSpecialOffer::SpecialOfferVideo' has a wrong offset!");

// ScriptStruct FortniteUI.SocialEventJSON
// 0x0028 (0x0028 - 0x0000)
struct FSocialEventJSON final
{
public:
	int32                                         event_id;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Title;                                             // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDateTime                              starts_at_utc;                                     // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSocialEventJSON) == 0x000008, "Wrong alignment on FSocialEventJSON");
static_assert(sizeof(FSocialEventJSON) == 0x000028, "Wrong size on FSocialEventJSON");
static_assert(offsetof(FSocialEventJSON, event_id) == 0x000000, "Member 'FSocialEventJSON::event_id' has a wrong offset!");
static_assert(offsetof(FSocialEventJSON, Title) == 0x000008, "Member 'FSocialEventJSON::Title' has a wrong offset!");
static_assert(offsetof(FSocialEventJSON, starts_at_utc) == 0x000020, "Member 'FSocialEventJSON::starts_at_utc' has a wrong offset!");

// ScriptStruct FortniteUI.SocialEventsJsonObject
// 0x0010 (0x0010 - 0x0000)
struct FSocialEventsJsonObject final
{
public:
	TArray<struct FSocialEventJSON>               Events;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSocialEventsJsonObject) == 0x000008, "Wrong alignment on FSocialEventsJsonObject");
static_assert(sizeof(FSocialEventsJsonObject) == 0x000010, "Wrong size on FSocialEventsJsonObject");
static_assert(offsetof(FSocialEventsJsonObject, Events) == 0x000000, "Member 'FSocialEventsJsonObject::Events' has a wrong offset!");

// ScriptStruct FortniteUI.SocialEventsSource
// 0x0040 (0x0040 - 0x0000)
struct FSocialEventsSource final
{
public:
	class FString                                 _title;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 __locale;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastModified;                                      // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSocialEventsJsonObject                SocialEvents;                                      // 0x0030(0x0010)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FSocialEventsSource) == 0x000008, "Wrong alignment on FSocialEventsSource");
static_assert(sizeof(FSocialEventsSource) == 0x000040, "Wrong size on FSocialEventsSource");
static_assert(offsetof(FSocialEventsSource, _title) == 0x000000, "Member 'FSocialEventsSource::_title' has a wrong offset!");
static_assert(offsetof(FSocialEventsSource, __locale) == 0x000010, "Member 'FSocialEventsSource::__locale' has a wrong offset!");
static_assert(offsetof(FSocialEventsSource, LastModified) == 0x000020, "Member 'FSocialEventsSource::LastModified' has a wrong offset!");
static_assert(offsetof(FSocialEventsSource, SocialEvents) == 0x000030, "Member 'FSocialEventsSource::SocialEvents' has a wrong offset!");

// ScriptStruct FortniteUI.CobaltPlayerPortraitIndexInfo
// 0x0010 (0x0010 - 0x0000)
struct FCobaltPlayerPortraitIndexInfo final
{
public:
	TArray<int32>                                 PortraitIndexArray;                                // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCobaltPlayerPortraitIndexInfo) == 0x000008, "Wrong alignment on FCobaltPlayerPortraitIndexInfo");
static_assert(sizeof(FCobaltPlayerPortraitIndexInfo) == 0x000010, "Wrong size on FCobaltPlayerPortraitIndexInfo");
static_assert(offsetof(FCobaltPlayerPortraitIndexInfo, PortraitIndexArray) == 0x000000, "Member 'FCobaltPlayerPortraitIndexInfo::PortraitIndexArray' has a wrong offset!");

// ScriptStruct FortniteUI.SurvivalObjectiveIconData
// 0x000C (0x000C - 0x0000)
struct FSurvivalObjectiveIconData final
{
public:
	int32                                         IconIndex;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESurvivalObjectiveIconState                   IconState;                                         // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESurvivalObjectiveIconState                   PrevIconState;                                     // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SpecialActorID;                                    // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSurvivalObjectiveIconData) == 0x000004, "Wrong alignment on FSurvivalObjectiveIconData");
static_assert(sizeof(FSurvivalObjectiveIconData) == 0x00000C, "Wrong size on FSurvivalObjectiveIconData");
static_assert(offsetof(FSurvivalObjectiveIconData, IconIndex) == 0x000000, "Member 'FSurvivalObjectiveIconData::IconIndex' has a wrong offset!");
static_assert(offsetof(FSurvivalObjectiveIconData, IconState) == 0x000004, "Member 'FSurvivalObjectiveIconData::IconState' has a wrong offset!");
static_assert(offsetof(FSurvivalObjectiveIconData, PrevIconState) == 0x000005, "Member 'FSurvivalObjectiveIconData::PrevIconState' has a wrong offset!");
static_assert(offsetof(FSurvivalObjectiveIconData, SpecialActorID) == 0x000008, "Member 'FSurvivalObjectiveIconData::SpecialActorID' has a wrong offset!");

// ScriptStruct FortniteUI.SurvivalObjectiveText
// 0x0010 (0x0010 - 0x0000)
struct FSurvivalObjectiveText final
{
public:
	TArray<class FString>                         SafezoneStateText;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSurvivalObjectiveText) == 0x000008, "Wrong alignment on FSurvivalObjectiveText");
static_assert(sizeof(FSurvivalObjectiveText) == 0x000010, "Wrong size on FSurvivalObjectiveText");
static_assert(offsetof(FSurvivalObjectiveText, SafezoneStateText) == 0x000000, "Member 'FSurvivalObjectiveText::SafezoneStateText' has a wrong offset!");

// ScriptStruct FortniteUI.DiscoCaptureUIData
// 0x0040 (0x0040 - 0x0000)
struct FDiscoCaptureUIData final
{
public:
	EDiscoCaptureUIState                          CurrDisplayState;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAthenaCapturePoint*                    CapturePoint;                                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerPawnAthena*                  CurrPawn;                                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               CurrMID;                                           // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FillAmount;                                        // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayText;                                       // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDiscoCaptureUIData) == 0x000008, "Wrong alignment on FDiscoCaptureUIData");
static_assert(sizeof(FDiscoCaptureUIData) == 0x000040, "Wrong size on FDiscoCaptureUIData");
static_assert(offsetof(FDiscoCaptureUIData, CurrDisplayState) == 0x000000, "Member 'FDiscoCaptureUIData::CurrDisplayState' has a wrong offset!");
static_assert(offsetof(FDiscoCaptureUIData, CapturePoint) == 0x000008, "Member 'FDiscoCaptureUIData::CapturePoint' has a wrong offset!");
static_assert(offsetof(FDiscoCaptureUIData, CurrPawn) == 0x000010, "Member 'FDiscoCaptureUIData::CurrPawn' has a wrong offset!");
static_assert(offsetof(FDiscoCaptureUIData, CurrMID) == 0x000018, "Member 'FDiscoCaptureUIData::CurrMID' has a wrong offset!");
static_assert(offsetof(FDiscoCaptureUIData, FillAmount) == 0x000020, "Member 'FDiscoCaptureUIData::FillAmount' has a wrong offset!");
static_assert(offsetof(FDiscoCaptureUIData, DisplayText) == 0x000028, "Member 'FDiscoCaptureUIData::DisplayText' has a wrong offset!");

// ScriptStruct FortniteUI.DiscoCaptureIconData
// 0x0010 (0x0010 - 0x0000)
struct FDiscoCaptureIconData final
{
public:
	EDiscoCaptureIconState                        CurrIconState;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDiscoCaptureProgressState                    CurrProgressState;                                 // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrCapturePercent;                                // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AAthenaCapturePoint*                    CapturePoint;                                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDiscoCaptureIconData) == 0x000008, "Wrong alignment on FDiscoCaptureIconData");
static_assert(sizeof(FDiscoCaptureIconData) == 0x000010, "Wrong size on FDiscoCaptureIconData");
static_assert(offsetof(FDiscoCaptureIconData, CurrIconState) == 0x000000, "Member 'FDiscoCaptureIconData::CurrIconState' has a wrong offset!");
static_assert(offsetof(FDiscoCaptureIconData, CurrProgressState) == 0x000001, "Member 'FDiscoCaptureIconData::CurrProgressState' has a wrong offset!");
static_assert(offsetof(FDiscoCaptureIconData, CurrCapturePercent) == 0x000004, "Member 'FDiscoCaptureIconData::CurrCapturePercent' has a wrong offset!");
static_assert(offsetof(FDiscoCaptureIconData, CapturePoint) == 0x000008, "Member 'FDiscoCaptureIconData::CapturePoint' has a wrong offset!");

// ScriptStruct FortniteUI.DiscoTeamScoreData
// 0x0020 (0x0020 - 0x0000)
struct FDiscoTeamScoreData final
{
public:
	class FText                                   CurrScoreText;                                     // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         CurrScorePercent;                                  // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrScore;                                         // 0x001C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDiscoTeamScoreData) == 0x000008, "Wrong alignment on FDiscoTeamScoreData");
static_assert(sizeof(FDiscoTeamScoreData) == 0x000020, "Wrong size on FDiscoTeamScoreData");
static_assert(offsetof(FDiscoTeamScoreData, CurrScoreText) == 0x000000, "Member 'FDiscoTeamScoreData::CurrScoreText' has a wrong offset!");
static_assert(offsetof(FDiscoTeamScoreData, CurrScorePercent) == 0x000018, "Member 'FDiscoTeamScoreData::CurrScorePercent' has a wrong offset!");
static_assert(offsetof(FDiscoTeamScoreData, CurrScore) == 0x00001C, "Member 'FDiscoTeamScoreData::CurrScore' has a wrong offset!");

// ScriptStruct FortniteUI.QuestRecapData
// 0x0014 (0x0014 - 0x0000)
struct FQuestRecapData final
{
public:
	TWeakObjectPtr<class UFortQuestItem>          QuestItem;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastKnownMcpValue;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AchivedCount;                                      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredCount;                                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestRecapData) == 0x000004, "Wrong alignment on FQuestRecapData");
static_assert(sizeof(FQuestRecapData) == 0x000014, "Wrong size on FQuestRecapData");
static_assert(offsetof(FQuestRecapData, QuestItem) == 0x000000, "Member 'FQuestRecapData::QuestItem' has a wrong offset!");
static_assert(offsetof(FQuestRecapData, LastKnownMcpValue) == 0x000008, "Member 'FQuestRecapData::LastKnownMcpValue' has a wrong offset!");
static_assert(offsetof(FQuestRecapData, AchivedCount) == 0x00000C, "Member 'FQuestRecapData::AchivedCount' has a wrong offset!");
static_assert(offsetof(FQuestRecapData, RequiredCount) == 0x000010, "Member 'FQuestRecapData::RequiredCount' has a wrong offset!");

// ScriptStruct FortniteUI.VideoConfig_Mono
// 0x0058 (0x0058 - 0x0000)
struct FVideoConfig_Mono final
{
public:
	class UFortStreamMediaSource*                 StreamingMediaSource;                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VideoString;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StreamingVideoID;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FallbackVideoID;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ProdLinkID;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GamedevLinkID;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAutoPlay;                                       // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceAutoPlay;                                    // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStreamingEnabled;                                 // 0x003A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 VideoUID;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldBeModal;                                    // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSkipBoundaries;                                // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKairosPlayer;                                     // 0x0052(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHoldToSkip;                                       // 0x0053(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVideoConfig_Mono) == 0x000008, "Wrong alignment on FVideoConfig_Mono");
static_assert(sizeof(FVideoConfig_Mono) == 0x000058, "Wrong size on FVideoConfig_Mono");
static_assert(offsetof(FVideoConfig_Mono, StreamingMediaSource) == 0x000000, "Member 'FVideoConfig_Mono::StreamingMediaSource' has a wrong offset!");
static_assert(offsetof(FVideoConfig_Mono, VideoString) == 0x000008, "Member 'FVideoConfig_Mono::VideoString' has a wrong offset!");
static_assert(offsetof(FVideoConfig_Mono, StreamingVideoID) == 0x00000C, "Member 'FVideoConfig_Mono::StreamingVideoID' has a wrong offset!");
static_assert(offsetof(FVideoConfig_Mono, FallbackVideoID) == 0x000010, "Member 'FVideoConfig_Mono::FallbackVideoID' has a wrong offset!");
static_assert(offsetof(FVideoConfig_Mono, ProdLinkID) == 0x000018, "Member 'FVideoConfig_Mono::ProdLinkID' has a wrong offset!");
static_assert(offsetof(FVideoConfig_Mono, GamedevLinkID) == 0x000028, "Member 'FVideoConfig_Mono::GamedevLinkID' has a wrong offset!");
static_assert(offsetof(FVideoConfig_Mono, bIsAutoPlay) == 0x000038, "Member 'FVideoConfig_Mono::bIsAutoPlay' has a wrong offset!");
static_assert(offsetof(FVideoConfig_Mono, bForceAutoPlay) == 0x000039, "Member 'FVideoConfig_Mono::bForceAutoPlay' has a wrong offset!");
static_assert(offsetof(FVideoConfig_Mono, bStreamingEnabled) == 0x00003A, "Member 'FVideoConfig_Mono::bStreamingEnabled' has a wrong offset!");
static_assert(offsetof(FVideoConfig_Mono, VideoUID) == 0x000040, "Member 'FVideoConfig_Mono::VideoUID' has a wrong offset!");
static_assert(offsetof(FVideoConfig_Mono, bShouldBeModal) == 0x000050, "Member 'FVideoConfig_Mono::bShouldBeModal' has a wrong offset!");
static_assert(offsetof(FVideoConfig_Mono, bUseSkipBoundaries) == 0x000051, "Member 'FVideoConfig_Mono::bUseSkipBoundaries' has a wrong offset!");
static_assert(offsetof(FVideoConfig_Mono, bKairosPlayer) == 0x000052, "Member 'FVideoConfig_Mono::bKairosPlayer' has a wrong offset!");
static_assert(offsetof(FVideoConfig_Mono, bHoldToSkip) == 0x000053, "Member 'FVideoConfig_Mono::bHoldToSkip' has a wrong offset!");

// ScriptStruct FortniteUI.FortActivityImageCache
// 0x0010 (0x0010 - 0x0000)
struct FFortActivityImageCache final
{
public:
	class UTexture*                               Texture;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortActivityImageCache) == 0x000008, "Wrong alignment on FFortActivityImageCache");
static_assert(sizeof(FFortActivityImageCache) == 0x000010, "Wrong size on FFortActivityImageCache");
static_assert(offsetof(FFortActivityImageCache, Texture) == 0x000000, "Member 'FFortActivityImageCache::Texture' has a wrong offset!");

// ScriptStruct FortniteUI.FortActivityCompressedImageCache
// 0x0018 (0x0018 - 0x0000)
struct FFortActivityCompressedImageCache final
{
public:
	TArray<uint8>                                 CompressedImage;                                   // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortActivityCompressedImageCache) == 0x000008, "Wrong alignment on FFortActivityCompressedImageCache");
static_assert(sizeof(FFortActivityCompressedImageCache) == 0x000018, "Wrong size on FFortActivityCompressedImageCache");
static_assert(offsetof(FFortActivityCompressedImageCache, CompressedImage) == 0x000000, "Member 'FFortActivityCompressedImageCache::CompressedImage' has a wrong offset!");

// ScriptStruct FortniteUI.FortActivityImagePayload
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FFortActivityImagePayload final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortActivityImagePayload) == 0x000008, "Wrong alignment on FFortActivityImagePayload");
static_assert(sizeof(FFortActivityImagePayload) == 0x000028, "Wrong size on FFortActivityImagePayload");

// ScriptStruct FortniteUI.FortAthenaStandaloneTutorialStepInfo
// 0x0010 (0x0010 - 0x0000)
struct FFortAthenaStandaloneTutorialStepInfo final
{
public:
	TArray<struct FFortAthenaTutorialScreenInfo>  StepScreenInfo;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAthenaStandaloneTutorialStepInfo) == 0x000008, "Wrong alignment on FFortAthenaStandaloneTutorialStepInfo");
static_assert(sizeof(FFortAthenaStandaloneTutorialStepInfo) == 0x000010, "Wrong size on FFortAthenaStandaloneTutorialStepInfo");
static_assert(offsetof(FFortAthenaStandaloneTutorialStepInfo, StepScreenInfo) == 0x000000, "Member 'FFortAthenaStandaloneTutorialStepInfo::StepScreenInfo' has a wrong offset!");

// ScriptStruct FortniteUI.FortStateStyle
// 0x04A0 (0x04A0 - 0x0000)
struct FFortStateStyle final
{
public:
	struct FFortMultiSizeBrush                    Brush;                                             // 0x0000(0x0480)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FLinearColor                           PrimaryColor;                                      // 0x0480(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SecondaryColor;                                    // 0x0490(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortStateStyle) == 0x000010, "Wrong alignment on FFortStateStyle");
static_assert(sizeof(FFortStateStyle) == 0x0004A0, "Wrong size on FFortStateStyle");
static_assert(offsetof(FFortStateStyle, Brush) == 0x000000, "Member 'FFortStateStyle::Brush' has a wrong offset!");
static_assert(offsetof(FFortStateStyle, PrimaryColor) == 0x000480, "Member 'FFortStateStyle::PrimaryColor' has a wrong offset!");
static_assert(offsetof(FFortStateStyle, SecondaryColor) == 0x000490, "Member 'FFortStateStyle::SecondaryColor' has a wrong offset!");

// ScriptStruct FortniteUI.FortBattlePassVideoAnnotation
// 0x0028 (0x0028 - 0x0000)
struct FFortBattlePassVideoAnnotation final
{
public:
	float                                         StartTime;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTime;                                           // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ScreenPosition;                                    // 0x0008(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EntryAngle;                                        // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EntryMagnitude;                                    // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItemDefinition*                    RewardItemDefinition;                              // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortBattlePassVideoAnnotation) == 0x000008, "Wrong alignment on FFortBattlePassVideoAnnotation");
static_assert(sizeof(FFortBattlePassVideoAnnotation) == 0x000028, "Wrong size on FFortBattlePassVideoAnnotation");
static_assert(offsetof(FFortBattlePassVideoAnnotation, StartTime) == 0x000000, "Member 'FFortBattlePassVideoAnnotation::StartTime' has a wrong offset!");
static_assert(offsetof(FFortBattlePassVideoAnnotation, EndTime) == 0x000004, "Member 'FFortBattlePassVideoAnnotation::EndTime' has a wrong offset!");
static_assert(offsetof(FFortBattlePassVideoAnnotation, ScreenPosition) == 0x000008, "Member 'FFortBattlePassVideoAnnotation::ScreenPosition' has a wrong offset!");
static_assert(offsetof(FFortBattlePassVideoAnnotation, EntryAngle) == 0x000018, "Member 'FFortBattlePassVideoAnnotation::EntryAngle' has a wrong offset!");
static_assert(offsetof(FFortBattlePassVideoAnnotation, EntryMagnitude) == 0x00001C, "Member 'FFortBattlePassVideoAnnotation::EntryMagnitude' has a wrong offset!");
static_assert(offsetof(FFortBattlePassVideoAnnotation, RewardItemDefinition) == 0x000020, "Member 'FFortBattlePassVideoAnnotation::RewardItemDefinition' has a wrong offset!");

// ScriptStruct FortniteUI.VaultVariantOverrideOption
// 0x0020 (0x0020 - 0x0000)
struct FVaultVariantOverrideOption final
{
public:
	struct FGameplayTag                           VariantChannelOverride;                            // 0x0000(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           VariantTagOverride;                                // 0x0004(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomDataPayload;                                 // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItemDefinition*                    OptionalItemVariantIsUsedFor;                      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVaultVariantOverrideOption) == 0x000008, "Wrong alignment on FVaultVariantOverrideOption");
static_assert(sizeof(FVaultVariantOverrideOption) == 0x000020, "Wrong size on FVaultVariantOverrideOption");
static_assert(offsetof(FVaultVariantOverrideOption, VariantChannelOverride) == 0x000000, "Member 'FVaultVariantOverrideOption::VariantChannelOverride' has a wrong offset!");
static_assert(offsetof(FVaultVariantOverrideOption, VariantTagOverride) == 0x000004, "Member 'FVaultVariantOverrideOption::VariantTagOverride' has a wrong offset!");
static_assert(offsetof(FVaultVariantOverrideOption, CustomDataPayload) == 0x000008, "Member 'FVaultVariantOverrideOption::CustomDataPayload' has a wrong offset!");
static_assert(offsetof(FVaultVariantOverrideOption, OptionalItemVariantIsUsedFor) == 0x000018, "Member 'FVaultVariantOverrideOption::OptionalItemVariantIsUsedFor' has a wrong offset!");

// ScriptStruct FortniteUI.ItemPreviewSettings
// 0x00A8 (0x00A8 - 0x0000)
struct FItemPreviewSettings final
{
public:
	class UFortAccountItemDefinition*             ItemToView;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubslotIndex;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  PreviewExcludedTags;                               // 0x0010(0x0020)(NativeAccessSpecifierPublic)
	int32                                         ItemVariantPreviewIndex;                           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4C];                                      // 0x0034(0x004C)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bHasEtherealBackground;                            // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0xF];                                       // 0x0081(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVaultVariantOverrideOption>    VariantOverrides;                                  // 0x0090(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemPreviewSettings) == 0x000008, "Wrong alignment on FItemPreviewSettings");
static_assert(sizeof(FItemPreviewSettings) == 0x0000A8, "Wrong size on FItemPreviewSettings");
static_assert(offsetof(FItemPreviewSettings, ItemToView) == 0x000000, "Member 'FItemPreviewSettings::ItemToView' has a wrong offset!");
static_assert(offsetof(FItemPreviewSettings, SubslotIndex) == 0x000008, "Member 'FItemPreviewSettings::SubslotIndex' has a wrong offset!");
static_assert(offsetof(FItemPreviewSettings, PreviewExcludedTags) == 0x000010, "Member 'FItemPreviewSettings::PreviewExcludedTags' has a wrong offset!");
static_assert(offsetof(FItemPreviewSettings, ItemVariantPreviewIndex) == 0x000030, "Member 'FItemPreviewSettings::ItemVariantPreviewIndex' has a wrong offset!");
static_assert(offsetof(FItemPreviewSettings, bHasEtherealBackground) == 0x000080, "Member 'FItemPreviewSettings::bHasEtherealBackground' has a wrong offset!");
static_assert(offsetof(FItemPreviewSettings, VariantOverrides) == 0x000090, "Member 'FItemPreviewSettings::VariantOverrides' has a wrong offset!");

// ScriptStruct FortniteUI.FortConfirmationButtonInfo
// 0x0010 (0x0010 - 0x0000)
struct FFortConfirmationButtonInfo final
{
public:
	class UCommonButtonLegacy*                    Button;                                            // 0x0000(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortConfirmationButtonInfo) == 0x000008, "Wrong alignment on FFortConfirmationButtonInfo");
static_assert(sizeof(FFortConfirmationButtonInfo) == 0x000010, "Wrong size on FFortConfirmationButtonInfo");
static_assert(offsetof(FFortConfirmationButtonInfo, Button) == 0x000000, "Member 'FFortConfirmationButtonInfo::Button' has a wrong offset!");

// ScriptStruct FortniteUI.CachedIslandsGroup
// 0x0028 (0x0028 - 0x0000)
struct FCachedIslandsGroup final
{
public:
	TArray<class UFortCreativeIslandLink*>        IslandLinks;                                       // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x18];                                      // 0x0010(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCachedIslandsGroup) == 0x000008, "Wrong alignment on FCachedIslandsGroup");
static_assert(sizeof(FCachedIslandsGroup) == 0x000028, "Wrong size on FCachedIslandsGroup");
static_assert(offsetof(FCachedIslandsGroup, IslandLinks) == 0x000000, "Member 'FCachedIslandsGroup::IslandLinks' has a wrong offset!");

// ScriptStruct FortniteUI.FortCreativeItemListCategoryData
// 0x0008 (0x0010 - 0x0008)
struct FFortCreativeItemListCategoryData final : public FTableRowBase
{
public:
	ECreativeItemCategory                         category;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemCardSize                             CardSize;                                          // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCollapseCardBorderPad;                            // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortCreativeItemListCategoryData) == 0x000008, "Wrong alignment on FFortCreativeItemListCategoryData");
static_assert(sizeof(FFortCreativeItemListCategoryData) == 0x000010, "Wrong size on FFortCreativeItemListCategoryData");
static_assert(offsetof(FFortCreativeItemListCategoryData, category) == 0x000008, "Member 'FFortCreativeItemListCategoryData::category' has a wrong offset!");
static_assert(offsetof(FFortCreativeItemListCategoryData, CardSize) == 0x000009, "Member 'FFortCreativeItemListCategoryData::CardSize' has a wrong offset!");
static_assert(offsetof(FFortCreativeItemListCategoryData, bCollapseCardBorderPad) == 0x00000A, "Member 'FFortCreativeItemListCategoryData::bCollapseCardBorderPad' has a wrong offset!");

// ScriptStruct FortniteUI.FortWeightedObject
// 0x0010 (0x0010 - 0x0000)
struct FFortWeightedObject final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortWeightedObject) == 0x000008, "Wrong alignment on FFortWeightedObject");
static_assert(sizeof(FFortWeightedObject) == 0x000010, "Wrong size on FFortWeightedObject");
static_assert(offsetof(FFortWeightedObject, Object) == 0x000000, "Member 'FFortWeightedObject::Object' has a wrong offset!");
static_assert(offsetof(FFortWeightedObject, Weight) == 0x000008, "Member 'FFortWeightedObject::Weight' has a wrong offset!");

// ScriptStruct FortniteUI.RarityArray
// 0x0010 (0x0010 - 0x0000)
struct FRarityArray final
{
public:
	TArray<class UFortItemDefinition*>            Items;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRarityArray) == 0x000008, "Wrong alignment on FRarityArray");
static_assert(sizeof(FRarityArray) == 0x000010, "Wrong size on FRarityArray");
static_assert(offsetof(FRarityArray, Items) == 0x000000, "Member 'FRarityArray::Items' has a wrong offset!");

// ScriptStruct FortniteUI.ModuleData
// 0x0010 (0x0010 - 0x0000)
struct FModuleData final
{
public:
	TArray<class UFortItemDefinition*>            DownloadedItems;                                   // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModuleData) == 0x000008, "Wrong alignment on FModuleData");
static_assert(sizeof(FModuleData) == 0x000010, "Wrong size on FModuleData");
static_assert(offsetof(FModuleData, DownloadedItems) == 0x000000, "Member 'FModuleData::DownloadedItems' has a wrong offset!");

// ScriptStruct FortniteUI.DownloadProjectInfo
// 0x0080 (0x0080 - 0x0000)
struct FDownloadProjectInfo final
{
public:
	class FString                                 LinkCode;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentVersion;                                    // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxVersion;                                        // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UTexture2DDynamic*                      PreviewTexture;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PreviewTextureURL;                                 // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ShortDescription;                                  // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   FullDescription;                                   // 0x0060(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bSelected;                                         // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGotBadData;                                       // 0x0079(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGhost;                                            // 0x007A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDownloaded;                                       // 0x007B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDownloading;                                      // 0x007C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDownloadProjectInfo) == 0x000008, "Wrong alignment on FDownloadProjectInfo");
static_assert(sizeof(FDownloadProjectInfo) == 0x000080, "Wrong size on FDownloadProjectInfo");
static_assert(offsetof(FDownloadProjectInfo, LinkCode) == 0x000000, "Member 'FDownloadProjectInfo::LinkCode' has a wrong offset!");
static_assert(offsetof(FDownloadProjectInfo, CurrentVersion) == 0x000010, "Member 'FDownloadProjectInfo::CurrentVersion' has a wrong offset!");
static_assert(offsetof(FDownloadProjectInfo, MaxVersion) == 0x000014, "Member 'FDownloadProjectInfo::MaxVersion' has a wrong offset!");
static_assert(offsetof(FDownloadProjectInfo, DisplayName) == 0x000018, "Member 'FDownloadProjectInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FDownloadProjectInfo, PreviewTexture) == 0x000030, "Member 'FDownloadProjectInfo::PreviewTexture' has a wrong offset!");
static_assert(offsetof(FDownloadProjectInfo, PreviewTextureURL) == 0x000038, "Member 'FDownloadProjectInfo::PreviewTextureURL' has a wrong offset!");
static_assert(offsetof(FDownloadProjectInfo, ShortDescription) == 0x000048, "Member 'FDownloadProjectInfo::ShortDescription' has a wrong offset!");
static_assert(offsetof(FDownloadProjectInfo, FullDescription) == 0x000060, "Member 'FDownloadProjectInfo::FullDescription' has a wrong offset!");
static_assert(offsetof(FDownloadProjectInfo, bSelected) == 0x000078, "Member 'FDownloadProjectInfo::bSelected' has a wrong offset!");
static_assert(offsetof(FDownloadProjectInfo, bGotBadData) == 0x000079, "Member 'FDownloadProjectInfo::bGotBadData' has a wrong offset!");
static_assert(offsetof(FDownloadProjectInfo, bGhost) == 0x00007A, "Member 'FDownloadProjectInfo::bGhost' has a wrong offset!");
static_assert(offsetof(FDownloadProjectInfo, bDownloaded) == 0x00007B, "Member 'FDownloadProjectInfo::bDownloaded' has a wrong offset!");
static_assert(offsetof(FDownloadProjectInfo, bDownloading) == 0x00007C, "Member 'FDownloadProjectInfo::bDownloading' has a wrong offset!");

// ScriptStruct FortniteUI.FortPickerCategory
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FFortPickerCategory final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPickerCategory) == 0x000008, "Wrong alignment on FFortPickerCategory");
static_assert(sizeof(FFortPickerCategory) == 0x000028, "Wrong size on FFortPickerCategory");

// ScriptStruct FortniteUI.FortPickerSubCategoryIdentifier
// 0x0020 (0x0020 - 0x0000)
struct FFortPickerSubCategoryIdentifier final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPickerSubCategoryIdentifier) == 0x000008, "Wrong alignment on FFortPickerSubCategoryIdentifier");
static_assert(sizeof(FFortPickerSubCategoryIdentifier) == 0x000020, "Wrong size on FFortPickerSubCategoryIdentifier");
static_assert(offsetof(FFortPickerSubCategoryIdentifier, Tag) == 0x000000, "Member 'FFortPickerSubCategoryIdentifier::Tag' has a wrong offset!");
static_assert(offsetof(FFortPickerSubCategoryIdentifier, Name) == 0x000008, "Member 'FFortPickerSubCategoryIdentifier::Name' has a wrong offset!");

// ScriptStruct FortniteUI.FortLeaderboardRequestIds
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FFortLeaderboardRequestIds final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortLeaderboardRequestIds) == 0x000008, "Wrong alignment on FFortLeaderboardRequestIds");
static_assert(sizeof(FFortLeaderboardRequestIds) == 0x000020, "Wrong size on FFortLeaderboardRequestIds");

// ScriptStruct FortniteUI.FortMissionDetails
// 0x0170 (0x0170 - 0x0000)
struct FFortMissionDetails final
{
public:
	EFortTheaterMapTileType                       TileType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TheaterDisplayName;                                // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   MissionName;                                       // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   MissionDescription;                                // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bIsGroupContent;                                   // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortMissionGenerator*                  MissionDefinition;                                 // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ZoneName;                                          // 0x0060(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ZoneDescription;                                   // 0x0078(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   RegionThemeName;                                   // 0x0090(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USlateBrushAsset>        RegionThemeIcon;                                   // 0x00A8(0x0028)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DifficultyName;                                    // 0x00D0(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FFortMissionRewardInfo>         MissionRewards;                                    // 0x00E8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTimespan                              AvailableTime;                                     // 0x00F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERatingsEnforcementType                       RatingsEnforcement;                                // 0x0100(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RequiredBaseRating;                                // 0x0104(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecommendedBaseRating;                             // 0x0108(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxBaseRating;                                     // 0x010C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentDifficultyLevel;                            // 0x0110(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOnboarding;                                     // 0x0114(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LootLevel;                                         // 0x0118(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideConningText;                              // 0x011C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ConningOverrideText;                               // 0x0120(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 TheaterUniqueId;                                   // 0x0138(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortCloudSaveItemDefinition*           AssociatedCloudSaveItemDefinition;                 // 0x0148(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortGameplayModifierItemDefinition*> GameplayModifiers;                                 // 0x0150(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FText>                           Objectives;                                        // 0x0160(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionDetails) == 0x000008, "Wrong alignment on FFortMissionDetails");
static_assert(sizeof(FFortMissionDetails) == 0x000170, "Wrong size on FFortMissionDetails");
static_assert(offsetof(FFortMissionDetails, TileType) == 0x000000, "Member 'FFortMissionDetails::TileType' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, TheaterDisplayName) == 0x000008, "Member 'FFortMissionDetails::TheaterDisplayName' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, MissionName) == 0x000020, "Member 'FFortMissionDetails::MissionName' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, MissionDescription) == 0x000038, "Member 'FFortMissionDetails::MissionDescription' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, bIsGroupContent) == 0x000050, "Member 'FFortMissionDetails::bIsGroupContent' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, MissionDefinition) == 0x000058, "Member 'FFortMissionDetails::MissionDefinition' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, ZoneName) == 0x000060, "Member 'FFortMissionDetails::ZoneName' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, ZoneDescription) == 0x000078, "Member 'FFortMissionDetails::ZoneDescription' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, RegionThemeName) == 0x000090, "Member 'FFortMissionDetails::RegionThemeName' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, RegionThemeIcon) == 0x0000A8, "Member 'FFortMissionDetails::RegionThemeIcon' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, DifficultyName) == 0x0000D0, "Member 'FFortMissionDetails::DifficultyName' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, MissionRewards) == 0x0000E8, "Member 'FFortMissionDetails::MissionRewards' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, AvailableTime) == 0x0000F8, "Member 'FFortMissionDetails::AvailableTime' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, RatingsEnforcement) == 0x000100, "Member 'FFortMissionDetails::RatingsEnforcement' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, RequiredBaseRating) == 0x000104, "Member 'FFortMissionDetails::RequiredBaseRating' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, RecommendedBaseRating) == 0x000108, "Member 'FFortMissionDetails::RecommendedBaseRating' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, MaxBaseRating) == 0x00010C, "Member 'FFortMissionDetails::MaxBaseRating' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, ContentDifficultyLevel) == 0x000110, "Member 'FFortMissionDetails::ContentDifficultyLevel' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, bIsOnboarding) == 0x000114, "Member 'FFortMissionDetails::bIsOnboarding' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, LootLevel) == 0x000118, "Member 'FFortMissionDetails::LootLevel' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, bOverrideConningText) == 0x00011C, "Member 'FFortMissionDetails::bOverrideConningText' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, ConningOverrideText) == 0x000120, "Member 'FFortMissionDetails::ConningOverrideText' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, TheaterUniqueId) == 0x000138, "Member 'FFortMissionDetails::TheaterUniqueId' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, AssociatedCloudSaveItemDefinition) == 0x000148, "Member 'FFortMissionDetails::AssociatedCloudSaveItemDefinition' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, GameplayModifiers) == 0x000150, "Member 'FFortMissionDetails::GameplayModifiers' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, Objectives) == 0x000160, "Member 'FFortMissionDetails::Objectives' has a wrong offset!");

// ScriptStruct FortniteUI.UnlockableVariantPreviewInfo
// 0x0028 (0x0028 - 0x0000)
struct FUnlockableVariantPreviewInfo final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SetNumber;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SetCount;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   UnlockCondition;                                   // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnlockableVariantPreviewInfo) == 0x000008, "Wrong alignment on FUnlockableVariantPreviewInfo");
static_assert(sizeof(FUnlockableVariantPreviewInfo) == 0x000028, "Wrong size on FUnlockableVariantPreviewInfo");
static_assert(offsetof(FUnlockableVariantPreviewInfo, bIsValid) == 0x000000, "Member 'FUnlockableVariantPreviewInfo::bIsValid' has a wrong offset!");
static_assert(offsetof(FUnlockableVariantPreviewInfo, SetNumber) == 0x000004, "Member 'FUnlockableVariantPreviewInfo::SetNumber' has a wrong offset!");
static_assert(offsetof(FUnlockableVariantPreviewInfo, SetCount) == 0x000008, "Member 'FUnlockableVariantPreviewInfo::SetCount' has a wrong offset!");
static_assert(offsetof(FUnlockableVariantPreviewInfo, UnlockCondition) == 0x000010, "Member 'FUnlockableVariantPreviewInfo::UnlockCondition' has a wrong offset!");

// ScriptStruct FortniteUI.FortFrontEndFeatureStruct
// 0x0018 (0x0018 - 0x0000)
struct FFortFrontEndFeatureStruct final
{
public:
	EFortFrontEndFeatureState                     CurrentState;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFrontEndFeatureState                     ForcedState;                                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFrontEndFeatureStateReason               ForcedStateReason;                                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(EFortFrontEndFeature ChangedFeature, EFortFrontEndFeatureState NewState, EFortFrontEndFeatureStateReason Reason)> ChangeDelegate;                                    // 0x0008(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortFrontEndFeatureStruct) == 0x000008, "Wrong alignment on FFortFrontEndFeatureStruct");
static_assert(sizeof(FFortFrontEndFeatureStruct) == 0x000018, "Wrong size on FFortFrontEndFeatureStruct");
static_assert(offsetof(FFortFrontEndFeatureStruct, CurrentState) == 0x000000, "Member 'FFortFrontEndFeatureStruct::CurrentState' has a wrong offset!");
static_assert(offsetof(FFortFrontEndFeatureStruct, ForcedState) == 0x000001, "Member 'FFortFrontEndFeatureStruct::ForcedState' has a wrong offset!");
static_assert(offsetof(FFortFrontEndFeatureStruct, ForcedStateReason) == 0x000002, "Member 'FFortFrontEndFeatureStruct::ForcedStateReason' has a wrong offset!");
static_assert(offsetof(FFortFrontEndFeatureStruct, ChangeDelegate) == 0x000008, "Member 'FFortFrontEndFeatureStruct::ChangeDelegate' has a wrong offset!");

// ScriptStruct FortniteUI.TagStateWidgetEntry
// 0x0030 (0x0030 - 0x0000)
struct FTagStateWidgetEntry final
{
public:
	TSoftClassPtr<class UClass>                   Class;                                             // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortNamedBundle                              Bundle;                                            // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTagStateWidgetEntry) == 0x000008, "Wrong alignment on FTagStateWidgetEntry");
static_assert(sizeof(FTagStateWidgetEntry) == 0x000030, "Wrong size on FTagStateWidgetEntry");
static_assert(offsetof(FTagStateWidgetEntry, Class) == 0x000000, "Member 'FTagStateWidgetEntry::Class' has a wrong offset!");
static_assert(offsetof(FTagStateWidgetEntry, Bundle) == 0x000028, "Member 'FTagStateWidgetEntry::Bundle' has a wrong offset!");

// ScriptStruct FortniteUI.ViewVaultItemsParams
// 0x0018 (0x0018 - 0x0000)
struct FViewVaultItemsParams final
{
public:
	TArray<class UFortItemDefinition*>            ItemsToView;                                       // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FViewVaultItemsParams) == 0x000008, "Wrong alignment on FViewVaultItemsParams");
static_assert(sizeof(FViewVaultItemsParams) == 0x000018, "Wrong size on FViewVaultItemsParams");
static_assert(offsetof(FViewVaultItemsParams, ItemsToView) == 0x000000, "Member 'FViewVaultItemsParams::ItemsToView' has a wrong offset!");

// ScriptStruct FortniteUI.CheatMenuEntry
// 0x0040 (0x0040 - 0x0000)
struct FCheatMenuEntry final
{
public:
	class FString                                 DevName;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RichText;                                          // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ConsoleCommands;                                   // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCheatMenuEntry) == 0x000008, "Wrong alignment on FCheatMenuEntry");
static_assert(sizeof(FCheatMenuEntry) == 0x000040, "Wrong size on FCheatMenuEntry");
static_assert(offsetof(FCheatMenuEntry, DevName) == 0x000000, "Member 'FCheatMenuEntry::DevName' has a wrong offset!");
static_assert(offsetof(FCheatMenuEntry, DisplayName) == 0x000010, "Member 'FCheatMenuEntry::DisplayName' has a wrong offset!");
static_assert(offsetof(FCheatMenuEntry, RichText) == 0x000020, "Member 'FCheatMenuEntry::RichText' has a wrong offset!");
static_assert(offsetof(FCheatMenuEntry, ConsoleCommands) == 0x000030, "Member 'FCheatMenuEntry::ConsoleCommands' has a wrong offset!");

// ScriptStruct FortniteUI.CheatMenuSection
// 0x0040 (0x0040 - 0x0000)
struct FCheatMenuSection final
{
public:
	class FString                                 DevName;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MinVersion;                                        // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCheatMenuEntry>                Entries;                                           // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCheatMenuSection) == 0x000008, "Wrong alignment on FCheatMenuSection");
static_assert(sizeof(FCheatMenuSection) == 0x000040, "Wrong size on FCheatMenuSection");
static_assert(offsetof(FCheatMenuSection, DevName) == 0x000000, "Member 'FCheatMenuSection::DevName' has a wrong offset!");
static_assert(offsetof(FCheatMenuSection, DisplayName) == 0x000010, "Member 'FCheatMenuSection::DisplayName' has a wrong offset!");
static_assert(offsetof(FCheatMenuSection, MinVersion) == 0x000020, "Member 'FCheatMenuSection::MinVersion' has a wrong offset!");
static_assert(offsetof(FCheatMenuSection, Entries) == 0x000030, "Member 'FCheatMenuSection::Entries' has a wrong offset!");

// ScriptStruct FortniteUI.NotificationWidgetClass
// 0x0020 (0x0020 - 0x0000)
struct FNotificationWidgetClass final
{
public:
	TSubclassOf<class UFortNotificationEntry>     NotificationWidgetClass;                           // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitialPoolSize;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanIncreasePoolSizeAtRunTime;                     // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortNotificationEntry*>         WidgetPool;                                        // 0x0010(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNotificationWidgetClass) == 0x000008, "Wrong alignment on FNotificationWidgetClass");
static_assert(sizeof(FNotificationWidgetClass) == 0x000020, "Wrong size on FNotificationWidgetClass");
static_assert(offsetof(FNotificationWidgetClass, NotificationWidgetClass) == 0x000000, "Member 'FNotificationWidgetClass::NotificationWidgetClass' has a wrong offset!");
static_assert(offsetof(FNotificationWidgetClass, InitialPoolSize) == 0x000008, "Member 'FNotificationWidgetClass::InitialPoolSize' has a wrong offset!");
static_assert(offsetof(FNotificationWidgetClass, bCanIncreasePoolSizeAtRunTime) == 0x00000C, "Member 'FNotificationWidgetClass::bCanIncreasePoolSizeAtRunTime' has a wrong offset!");
static_assert(offsetof(FNotificationWidgetClass, WidgetPool) == 0x000010, "Member 'FNotificationWidgetClass::WidgetPool' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemFilterDefinition
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x10) FFortItemFilterDefinition final
{
public:
	TArray<EFortItemType>                         ItemTypeFilters;                                   // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x40];                                      // 0x0010(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bRequiresItemDetails;                              // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0xF];                                       // 0x0051(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemFilterDefinition) == 0x000010, "Wrong alignment on FFortItemFilterDefinition");
static_assert(sizeof(FFortItemFilterDefinition) == 0x000060, "Wrong size on FFortItemFilterDefinition");
static_assert(offsetof(FFortItemFilterDefinition, ItemTypeFilters) == 0x000000, "Member 'FFortItemFilterDefinition::ItemTypeFilters' has a wrong offset!");
static_assert(offsetof(FFortItemFilterDefinition, bRequiresItemDetails) == 0x000050, "Member 'FFortItemFilterDefinition::bRequiresItemDetails' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemSorterDefinition
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x10) FFortItemSorterDefinition final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemSorterDefinition) == 0x000010, "Wrong alignment on FFortItemSorterDefinition");
static_assert(sizeof(FFortItemSorterDefinition) == 0x000050, "Wrong size on FFortItemSorterDefinition");

// ScriptStruct FortniteUI.FortHeroLoadoutHeroPickerTabConfiguration
// 0x00B0 (0x00B0 - 0x0000)
struct FFortHeroLoadoutHeroPickerTabConfiguration final
{
public:
	struct FFortItemFilterDefinition              Filter;                                            // 0x0000(0x0060)(NativeAccessSpecifierPublic)
	struct FFortItemSorterDefinition              Sorter;                                            // 0x0060(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortHeroLoadoutHeroPickerTabConfiguration) == 0x000010, "Wrong alignment on FFortHeroLoadoutHeroPickerTabConfiguration");
static_assert(sizeof(FFortHeroLoadoutHeroPickerTabConfiguration) == 0x0000B0, "Wrong size on FFortHeroLoadoutHeroPickerTabConfiguration");
static_assert(offsetof(FFortHeroLoadoutHeroPickerTabConfiguration, Filter) == 0x000000, "Member 'FFortHeroLoadoutHeroPickerTabConfiguration::Filter' has a wrong offset!");
static_assert(offsetof(FFortHeroLoadoutHeroPickerTabConfiguration, Sorter) == 0x000060, "Member 'FFortHeroLoadoutHeroPickerTabConfiguration::Sorter' has a wrong offset!");

// ScriptStruct FortniteUI.LoadedUIManagerEntry
// 0x0020 (0x0020 - 0x0000)
struct FLoadedUIManagerEntry final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortUIManager>             UIManagerClass;                                    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLoadedUIManagerEntry) == 0x000008, "Wrong alignment on FLoadedUIManagerEntry");
static_assert(sizeof(FLoadedUIManagerEntry) == 0x000020, "Wrong size on FLoadedUIManagerEntry");
static_assert(offsetof(FLoadedUIManagerEntry, UIManagerClass) == 0x000018, "Member 'FLoadedUIManagerEntry::UIManagerClass' has a wrong offset!");

// ScriptStruct FortniteUI.FortInGamePerkDisplayData
// 0x0010 (0x0010 - 0x0000)
struct FFortInGamePerkDisplayData final
{
public:
	EFortHeroPerkDisplayType                      PerkDisplayType;                                   // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Row;                                               // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Column;                                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortInGamePerkDisplayData) == 0x000004, "Wrong alignment on FFortInGamePerkDisplayData");
static_assert(sizeof(FFortInGamePerkDisplayData) == 0x000010, "Wrong size on FFortInGamePerkDisplayData");
static_assert(offsetof(FFortInGamePerkDisplayData, PerkDisplayType) == 0x000000, "Member 'FFortInGamePerkDisplayData::PerkDisplayType' has a wrong offset!");
static_assert(offsetof(FFortInGamePerkDisplayData, Index) == 0x000004, "Member 'FFortInGamePerkDisplayData::Index' has a wrong offset!");
static_assert(offsetof(FFortInGamePerkDisplayData, Row) == 0x000008, "Member 'FFortInGamePerkDisplayData::Row' has a wrong offset!");
static_assert(offsetof(FFortInGamePerkDisplayData, Column) == 0x00000C, "Member 'FFortInGamePerkDisplayData::Column' has a wrong offset!");

// ScriptStruct FortniteUI.ExternalDynamicTabParams
// 0x0140 (0x0140 - 0x0000)
struct FExternalDynamicTabParams final
{
public:
	TSoftClassPtr<class UClass>                   TabScreenClass;                                    // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortTopBarTabButtonInfo               TabButtonInfo;                                     // 0x0030(0x0110)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExternalDynamicTabParams) == 0x000010, "Wrong alignment on FExternalDynamicTabParams");
static_assert(sizeof(FExternalDynamicTabParams) == 0x000140, "Wrong size on FExternalDynamicTabParams");
static_assert(offsetof(FExternalDynamicTabParams, TabScreenClass) == 0x000000, "Member 'FExternalDynamicTabParams::TabScreenClass' has a wrong offset!");
static_assert(offsetof(FExternalDynamicTabParams, TabButtonInfo) == 0x000030, "Member 'FExternalDynamicTabParams::TabButtonInfo' has a wrong offset!");

// ScriptStruct FortniteUI.FortHeroNamesData
// 0x0030 (0x0038 - 0x0008)
struct FFortHeroNamesData final : public FTableRowBase
{
public:
	class FString                                 FirstName;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NickName;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastName;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortHeroNamesData) == 0x000008, "Wrong alignment on FFortHeroNamesData");
static_assert(sizeof(FFortHeroNamesData) == 0x000038, "Wrong size on FFortHeroNamesData");
static_assert(offsetof(FFortHeroNamesData, FirstName) == 0x000008, "Member 'FFortHeroNamesData::FirstName' has a wrong offset!");
static_assert(offsetof(FFortHeroNamesData, NickName) == 0x000018, "Member 'FFortHeroNamesData::NickName' has a wrong offset!");
static_assert(offsetof(FFortHeroNamesData, LastName) == 0x000028, "Member 'FFortHeroNamesData::LastName' has a wrong offset!");

// ScriptStruct FortniteUI.FortBasicMissionInfo
// 0x04F0 (0x04F0 - 0x0000)
struct FFortBasicMissionInfo final
{
public:
	class FText                                   MissionName;                                       // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortMultiSizeBrush                    MissionIcons;                                      // 0x0020(0x0480)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   TheaterName;                                       // 0x04A0(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DifficultyName;                                    // 0x04B8(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UMediaSource*                           EndOfMissionMediaSource;                           // 0x04D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMediaSource*                           EndOfMissionMediaSourceStreamed;                   // 0x04D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipEndOfMissionVideo;                            // 0x04E0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGroupContent;                                   // 0x04E1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E2[0xE];                                      // 0x04E2(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortBasicMissionInfo) == 0x000010, "Wrong alignment on FFortBasicMissionInfo");
static_assert(sizeof(FFortBasicMissionInfo) == 0x0004F0, "Wrong size on FFortBasicMissionInfo");
static_assert(offsetof(FFortBasicMissionInfo, MissionName) == 0x000000, "Member 'FFortBasicMissionInfo::MissionName' has a wrong offset!");
static_assert(offsetof(FFortBasicMissionInfo, MissionIcons) == 0x000020, "Member 'FFortBasicMissionInfo::MissionIcons' has a wrong offset!");
static_assert(offsetof(FFortBasicMissionInfo, TheaterName) == 0x0004A0, "Member 'FFortBasicMissionInfo::TheaterName' has a wrong offset!");
static_assert(offsetof(FFortBasicMissionInfo, DifficultyName) == 0x0004B8, "Member 'FFortBasicMissionInfo::DifficultyName' has a wrong offset!");
static_assert(offsetof(FFortBasicMissionInfo, EndOfMissionMediaSource) == 0x0004D0, "Member 'FFortBasicMissionInfo::EndOfMissionMediaSource' has a wrong offset!");
static_assert(offsetof(FFortBasicMissionInfo, EndOfMissionMediaSourceStreamed) == 0x0004D8, "Member 'FFortBasicMissionInfo::EndOfMissionMediaSourceStreamed' has a wrong offset!");
static_assert(offsetof(FFortBasicMissionInfo, bSkipEndOfMissionVideo) == 0x0004E0, "Member 'FFortBasicMissionInfo::bSkipEndOfMissionVideo' has a wrong offset!");
static_assert(offsetof(FFortBasicMissionInfo, bIsGroupContent) == 0x0004E1, "Member 'FFortBasicMissionInfo::bIsGroupContent' has a wrong offset!");

// ScriptStruct FortniteUI.FortUIManager_Campaign_Player
// 0x0018 (0x0018 - 0x0000)
struct FFortUIManager_Campaign_Player final
{
public:
	class UFortLocalPlayer*                       Player;                                            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class IFortUIManagerInterface> Manager;                                           // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortUIManager_Campaign_Player) == 0x000008, "Wrong alignment on FFortUIManager_Campaign_Player");
static_assert(sizeof(FFortUIManager_Campaign_Player) == 0x000018, "Wrong size on FFortUIManager_Campaign_Player");
static_assert(offsetof(FFortUIManager_Campaign_Player, Player) == 0x000000, "Member 'FFortUIManager_Campaign_Player::Player' has a wrong offset!");
static_assert(offsetof(FFortUIManager_Campaign_Player, Manager) == 0x000008, "Member 'FFortUIManager_Campaign_Player::Manager' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemDelta
// 0x0010 (0x0010 - 0x0000)
struct FFortItemDelta final
{
public:
	class UFortItemDefinition*                    ItemDefinition;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BaseAmount;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeltaAmount;                                       // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemDelta) == 0x000008, "Wrong alignment on FFortItemDelta");
static_assert(sizeof(FFortItemDelta) == 0x000010, "Wrong size on FFortItemDelta");
static_assert(offsetof(FFortItemDelta, ItemDefinition) == 0x000000, "Member 'FFortItemDelta::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FFortItemDelta, BaseAmount) == 0x000008, "Member 'FFortItemDelta::BaseAmount' has a wrong offset!");
static_assert(offsetof(FFortItemDelta, DeltaAmount) == 0x00000C, "Member 'FFortItemDelta::DeltaAmount' has a wrong offset!");

// ScriptStruct FortniteUI.ContextPosition
// 0x0020 (0x0020 - 0x0000)
struct FContextPosition final
{
public:
	EContextPositionPlatform                      Platform;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Position;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FContextPosition) == 0x000008, "Wrong alignment on FContextPosition");
static_assert(sizeof(FContextPosition) == 0x000020, "Wrong size on FContextPosition");
static_assert(offsetof(FContextPosition, Platform) == 0x000000, "Member 'FContextPosition::Platform' has a wrong offset!");
static_assert(offsetof(FContextPosition, Position) == 0x000008, "Member 'FContextPosition::Position' has a wrong offset!");
static_assert(offsetof(FContextPosition, HorizontalAlignment) == 0x000018, "Member 'FContextPosition::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(FContextPosition, VerticalAlignment) == 0x000019, "Member 'FContextPosition::VerticalAlignment' has a wrong offset!");

// ScriptStruct FortniteUI.ButtonInteractionPair
// 0x0010 (0x0010 - 0x0000)
struct FButtonInteractionPair final
{
public:
	class AActor*                                 TrackedInteraction;                                // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortTouchInteractionButton*            TrackedButton;                                     // 0x0008(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FButtonInteractionPair) == 0x000008, "Wrong alignment on FButtonInteractionPair");
static_assert(sizeof(FButtonInteractionPair) == 0x000010, "Wrong size on FButtonInteractionPair");
static_assert(offsetof(FButtonInteractionPair, TrackedInteraction) == 0x000000, "Member 'FButtonInteractionPair::TrackedInteraction' has a wrong offset!");
static_assert(offsetof(FButtonInteractionPair, TrackedButton) == 0x000008, "Member 'FButtonInteractionPair::TrackedButton' has a wrong offset!");

// ScriptStruct FortniteUI.FortActionBeingUnbound
// 0x0008 (0x0008 - 0x0000)
struct FFortActionBeingUnbound final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InputIndex;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortActionBeingUnbound) == 0x000004, "Wrong alignment on FFortActionBeingUnbound");
static_assert(sizeof(FFortActionBeingUnbound) == 0x000008, "Wrong size on FFortActionBeingUnbound");
static_assert(offsetof(FFortActionBeingUnbound, ActionName) == 0x000000, "Member 'FFortActionBeingUnbound::ActionName' has a wrong offset!");
static_assert(offsetof(FFortActionBeingUnbound, InputIndex) == 0x000004, "Member 'FFortActionBeingUnbound::InputIndex' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemListFilter
// 0x0018 (0x0018 - 0x0000)
struct FFortItemListFilter final
{
public:
	class FString                                 SearchText;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortInventoryFilter                          FilterType;                                        // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInStorageVault;                                   // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeVaultOverflow;                             // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemListFilter) == 0x000008, "Wrong alignment on FFortItemListFilter");
static_assert(sizeof(FFortItemListFilter) == 0x000018, "Wrong size on FFortItemListFilter");
static_assert(offsetof(FFortItemListFilter, SearchText) == 0x000000, "Member 'FFortItemListFilter::SearchText' has a wrong offset!");
static_assert(offsetof(FFortItemListFilter, FilterType) == 0x000010, "Member 'FFortItemListFilter::FilterType' has a wrong offset!");
static_assert(offsetof(FFortItemListFilter, bInStorageVault) == 0x000011, "Member 'FFortItemListFilter::bInStorageVault' has a wrong offset!");
static_assert(offsetof(FFortItemListFilter, bIncludeVaultOverflow) == 0x000012, "Member 'FFortItemListFilter::bIncludeVaultOverflow' has a wrong offset!");

// ScriptStruct FortniteUI.FortUIPickerTrapSortScores
// 0x0014 (0x0014 - 0x0000)
struct FFortUIPickerTrapSortScores final
{
public:
	float                                         UniqueTrapBonus;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlottedBonus;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FavoriteBonus;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTrackedTrapBonusTime;                           // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrackedTrapBonusMultiplier;                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortUIPickerTrapSortScores) == 0x000004, "Wrong alignment on FFortUIPickerTrapSortScores");
static_assert(sizeof(FFortUIPickerTrapSortScores) == 0x000014, "Wrong size on FFortUIPickerTrapSortScores");
static_assert(offsetof(FFortUIPickerTrapSortScores, UniqueTrapBonus) == 0x000000, "Member 'FFortUIPickerTrapSortScores::UniqueTrapBonus' has a wrong offset!");
static_assert(offsetof(FFortUIPickerTrapSortScores, SlottedBonus) == 0x000004, "Member 'FFortUIPickerTrapSortScores::SlottedBonus' has a wrong offset!");
static_assert(offsetof(FFortUIPickerTrapSortScores, FavoriteBonus) == 0x000008, "Member 'FFortUIPickerTrapSortScores::FavoriteBonus' has a wrong offset!");
static_assert(offsetof(FFortUIPickerTrapSortScores, MaxTrackedTrapBonusTime) == 0x00000C, "Member 'FFortUIPickerTrapSortScores::MaxTrackedTrapBonusTime' has a wrong offset!");
static_assert(offsetof(FFortUIPickerTrapSortScores, TrackedTrapBonusMultiplier) == 0x000010, "Member 'FFortUIPickerTrapSortScores::TrackedTrapBonusMultiplier' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_PowerRatingBlock_Configuration
// 0x0150 (0x0150 - 0x0000)
struct FFortItemCard_PowerRatingBlock_Configuration
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            MoonbeamBorderBrush;                               // 0x0010(0x00C0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMargin                                MoonbeamBorderExteriorPadding;                     // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                MoonbeamBorderPadding;                             // 0x00E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                CustomRatingInternalPadding;                       // 0x00F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              CustomRatingIconSize;                              // 0x0100(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   CustomRatingTextStyle;                             // 0x0110(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ComparisonIndicatorSize;                           // 0x0138(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_148[0x8];                                      // 0x0148(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemCard_PowerRatingBlock_Configuration) == 0x000010, "Wrong alignment on FFortItemCard_PowerRatingBlock_Configuration");
static_assert(sizeof(FFortItemCard_PowerRatingBlock_Configuration) == 0x000150, "Wrong size on FFortItemCard_PowerRatingBlock_Configuration");
static_assert(offsetof(FFortItemCard_PowerRatingBlock_Configuration, MoonbeamBorderBrush) == 0x000010, "Member 'FFortItemCard_PowerRatingBlock_Configuration::MoonbeamBorderBrush' has a wrong offset!");
static_assert(offsetof(FFortItemCard_PowerRatingBlock_Configuration, MoonbeamBorderExteriorPadding) == 0x0000D0, "Member 'FFortItemCard_PowerRatingBlock_Configuration::MoonbeamBorderExteriorPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_PowerRatingBlock_Configuration, MoonbeamBorderPadding) == 0x0000E0, "Member 'FFortItemCard_PowerRatingBlock_Configuration::MoonbeamBorderPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_PowerRatingBlock_Configuration, CustomRatingInternalPadding) == 0x0000F0, "Member 'FFortItemCard_PowerRatingBlock_Configuration::CustomRatingInternalPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_PowerRatingBlock_Configuration, CustomRatingIconSize) == 0x000100, "Member 'FFortItemCard_PowerRatingBlock_Configuration::CustomRatingIconSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_PowerRatingBlock_Configuration, CustomRatingTextStyle) == 0x000110, "Member 'FFortItemCard_PowerRatingBlock_Configuration::CustomRatingTextStyle' has a wrong offset!");
static_assert(offsetof(FFortItemCard_PowerRatingBlock_Configuration, ComparisonIndicatorSize) == 0x000138, "Member 'FFortItemCard_PowerRatingBlock_Configuration::ComparisonIndicatorSize' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration
// 0x01E0 (0x0330 - 0x0150)
struct FFortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration final : public FFortItemCard_PowerRatingBlock_Configuration
{
public:
	struct FSlateBrush                            PersonnelPowerRatingIconBrush;                     // 0x0150(0x00C0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   PersonnelPowerRatingTextStyle;                     // 0x0210(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_238[0x8];                                      // 0x0238(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            SchematicPowerRatingIconBrush;                     // 0x0240(0x00C0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   SchematicPowerRatingTextStyle;                     // 0x0300(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration) == 0x000010, "Wrong alignment on FFortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration");
static_assert(sizeof(FFortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration) == 0x000330, "Wrong size on FFortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration");
static_assert(offsetof(FFortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration, PersonnelPowerRatingIconBrush) == 0x000150, "Member 'FFortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration::PersonnelPowerRatingIconBrush' has a wrong offset!");
static_assert(offsetof(FFortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration, PersonnelPowerRatingTextStyle) == 0x000210, "Member 'FFortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration::PersonnelPowerRatingTextStyle' has a wrong offset!");
static_assert(offsetof(FFortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration, SchematicPowerRatingIconBrush) == 0x000240, "Member 'FFortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration::SchematicPowerRatingIconBrush' has a wrong offset!");
static_assert(offsetof(FFortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration, SchematicPowerRatingTextStyle) == 0x000300, "Member 'FFortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration::SchematicPowerRatingTextStyle' has a wrong offset!");

// ScriptStruct FortniteUI.FortUIStyleWindowButtons
// 0x0EC0 (0x0EC0 - 0x0000)
struct FFortUIStyleWindowButtons final
{
public:
	struct FButtonStyle                           Close;                                             // 0x0000(0x03B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FButtonStyle                           Minimize;                                          // 0x03B0(0x03B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FButtonStyle                           Maximize;                                          // 0x0760(0x03B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FButtonStyle                           Restore;                                           // 0x0B10(0x03B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortUIStyleWindowButtons) == 0x000010, "Wrong alignment on FFortUIStyleWindowButtons");
static_assert(sizeof(FFortUIStyleWindowButtons) == 0x000EC0, "Wrong size on FFortUIStyleWindowButtons");
static_assert(offsetof(FFortUIStyleWindowButtons, Close) == 0x000000, "Member 'FFortUIStyleWindowButtons::Close' has a wrong offset!");
static_assert(offsetof(FFortUIStyleWindowButtons, Minimize) == 0x0003B0, "Member 'FFortUIStyleWindowButtons::Minimize' has a wrong offset!");
static_assert(offsetof(FFortUIStyleWindowButtons, Maximize) == 0x000760, "Member 'FFortUIStyleWindowButtons::Maximize' has a wrong offset!");
static_assert(offsetof(FFortUIStyleWindowButtons, Restore) == 0x000B10, "Member 'FFortUIStyleWindowButtons::Restore' has a wrong offset!");

// ScriptStruct FortniteUI.FortUIStyleDefinition
// 0x0EC0 (0x0EC0 - 0x0000)
struct FFortUIStyleDefinition final
{
public:
	struct FFortUIStyleWindowButtons              WindowButtons;                                     // 0x0000(0x0EC0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortUIStyleDefinition) == 0x000010, "Wrong alignment on FFortUIStyleDefinition");
static_assert(sizeof(FFortUIStyleDefinition) == 0x000EC0, "Wrong size on FFortUIStyleDefinition");
static_assert(offsetof(FFortUIStyleDefinition, WindowButtons) == 0x000000, "Member 'FFortUIStyleDefinition::WindowButtons' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_PowerRatingBlock_ItemInstance_Configuration
// 0x00F0 (0x0240 - 0x0150)
struct FFortItemCard_PowerRatingBlock_ItemInstance_Configuration final : public FFortItemCard_PowerRatingBlock_Configuration
{
public:
	struct FSlateBrush                            PowerRatingIconBrush;                              // 0x0150(0x00C0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   PowerRatingTextStyle;                              // 0x0210(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_238[0x8];                                      // 0x0238(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemCard_PowerRatingBlock_ItemInstance_Configuration) == 0x000010, "Wrong alignment on FFortItemCard_PowerRatingBlock_ItemInstance_Configuration");
static_assert(sizeof(FFortItemCard_PowerRatingBlock_ItemInstance_Configuration) == 0x000240, "Wrong size on FFortItemCard_PowerRatingBlock_ItemInstance_Configuration");
static_assert(offsetof(FFortItemCard_PowerRatingBlock_ItemInstance_Configuration, PowerRatingIconBrush) == 0x000150, "Member 'FFortItemCard_PowerRatingBlock_ItemInstance_Configuration::PowerRatingIconBrush' has a wrong offset!");
static_assert(offsetof(FFortItemCard_PowerRatingBlock_ItemInstance_Configuration, PowerRatingTextStyle) == 0x000210, "Member 'FFortItemCard_PowerRatingBlock_ItemInstance_Configuration::PowerRatingTextStyle' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_StackCountBlock_Configuration
// 0x0030 (0x0030 - 0x0000)
struct FFortItemCard_StackCountBlock_Configuration final
{
public:
	bool                                          bShowShorthandStackCount;                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   TextStyle;                                         // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemCard_StackCountBlock_Configuration) == 0x000008, "Wrong alignment on FFortItemCard_StackCountBlock_Configuration");
static_assert(sizeof(FFortItemCard_StackCountBlock_Configuration) == 0x000030, "Wrong size on FFortItemCard_StackCountBlock_Configuration");
static_assert(offsetof(FFortItemCard_StackCountBlock_Configuration, bShowShorthandStackCount) == 0x000000, "Member 'FFortItemCard_StackCountBlock_Configuration::bShowShorthandStackCount' has a wrong offset!");
static_assert(offsetof(FFortItemCard_StackCountBlock_Configuration, TextStyle) == 0x000008, "Member 'FFortItemCard_StackCountBlock_Configuration::TextStyle' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_NameplateBorder_Configuration
// 0x00D0 (0x00D0 - 0x0000)
struct FFortItemCard_NameplateBorder_Configuration final
{
public:
	struct FMargin                                Padding;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush;                                             // 0x0010(0x00C0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemCard_NameplateBorder_Configuration) == 0x000010, "Wrong alignment on FFortItemCard_NameplateBorder_Configuration");
static_assert(sizeof(FFortItemCard_NameplateBorder_Configuration) == 0x0000D0, "Wrong size on FFortItemCard_NameplateBorder_Configuration");
static_assert(offsetof(FFortItemCard_NameplateBorder_Configuration, Padding) == 0x000000, "Member 'FFortItemCard_NameplateBorder_Configuration::Padding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_NameplateBorder_Configuration, Brush) == 0x000010, "Member 'FFortItemCard_NameplateBorder_Configuration::Brush' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_DefenderWeaponTypeIcon_Configuration
// 0x0010 (0x0010 - 0x0000)
struct FFortItemCard_DefenderWeaponTypeIcon_Configuration final
{
public:
	struct FVector2D                              IconConstraints;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemCard_DefenderWeaponTypeIcon_Configuration) == 0x000008, "Wrong alignment on FFortItemCard_DefenderWeaponTypeIcon_Configuration");
static_assert(sizeof(FFortItemCard_DefenderWeaponTypeIcon_Configuration) == 0x000010, "Wrong size on FFortItemCard_DefenderWeaponTypeIcon_Configuration");
static_assert(offsetof(FFortItemCard_DefenderWeaponTypeIcon_Configuration, IconConstraints) == 0x000000, "Member 'FFortItemCard_DefenderWeaponTypeIcon_Configuration::IconConstraints' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_TierMeter_Configuration
// 0x0018 (0x0018 - 0x0000)
struct FFortItemCard_TierMeter_Configuration final
{
public:
	struct FVector2D                              PipSize;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterPipPadding;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemCard_TierMeter_Configuration) == 0x000008, "Wrong alignment on FFortItemCard_TierMeter_Configuration");
static_assert(sizeof(FFortItemCard_TierMeter_Configuration) == 0x000018, "Wrong size on FFortItemCard_TierMeter_Configuration");
static_assert(offsetof(FFortItemCard_TierMeter_Configuration, PipSize) == 0x000000, "Member 'FFortItemCard_TierMeter_Configuration::PipSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_TierMeter_Configuration, InterPipPadding) == 0x000010, "Member 'FFortItemCard_TierMeter_Configuration::InterPipPadding' has a wrong offset!");

// ScriptStruct FortniteUI.ContentPushState
// 0x0003 (0x0003 - 0x0000)
struct FContentPushState final
{
public:
	bool                                          bHideHeader;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideFooter;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideChatWidget;                                   // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContentPushState) == 0x000001, "Wrong alignment on FContentPushState");
static_assert(sizeof(FContentPushState) == 0x000003, "Wrong size on FContentPushState");
static_assert(offsetof(FContentPushState, bHideHeader) == 0x000000, "Member 'FContentPushState::bHideHeader' has a wrong offset!");
static_assert(offsetof(FContentPushState, bHideFooter) == 0x000001, "Member 'FContentPushState::bHideFooter' has a wrong offset!");
static_assert(offsetof(FContentPushState, bHideChatWidget) == 0x000002, "Member 'FContentPushState::bHideChatWidget' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_LevelMeter_Configuration
// 0x0014 (0x0014 - 0x0000)
struct FFortItemCard_LevelMeter_Configuration final
{
public:
	float                                         MeterThickness;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                MeterPadding;                                      // 0x0004(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemCard_LevelMeter_Configuration) == 0x000004, "Wrong alignment on FFortItemCard_LevelMeter_Configuration");
static_assert(sizeof(FFortItemCard_LevelMeter_Configuration) == 0x000014, "Wrong size on FFortItemCard_LevelMeter_Configuration");
static_assert(offsetof(FFortItemCard_LevelMeter_Configuration, MeterThickness) == 0x000000, "Member 'FFortItemCard_LevelMeter_Configuration::MeterThickness' has a wrong offset!");
static_assert(offsetof(FFortItemCard_LevelMeter_Configuration, MeterPadding) == 0x000004, "Member 'FFortItemCard_LevelMeter_Configuration::MeterPadding' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_DurabilityMeter_Configuration
// 0x0014 (0x0014 - 0x0000)
struct FFortItemCard_DurabilityMeter_Configuration final
{
public:
	float                                         MeterThickness;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                MeterPadding;                                      // 0x0004(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemCard_DurabilityMeter_Configuration) == 0x000004, "Wrong alignment on FFortItemCard_DurabilityMeter_Configuration");
static_assert(sizeof(FFortItemCard_DurabilityMeter_Configuration) == 0x000014, "Wrong size on FFortItemCard_DurabilityMeter_Configuration");
static_assert(offsetof(FFortItemCard_DurabilityMeter_Configuration, MeterThickness) == 0x000000, "Member 'FFortItemCard_DurabilityMeter_Configuration::MeterThickness' has a wrong offset!");
static_assert(offsetof(FFortItemCard_DurabilityMeter_Configuration, MeterPadding) == 0x000004, "Member 'FFortItemCard_DurabilityMeter_Configuration::MeterPadding' has a wrong offset!");

// ScriptStruct FortniteUI.HomebaseNodeDisplayData
// 0x0088 (0x0090 - 0x0008)
struct FHomebaseNodeDisplayData final : public FTableRowBase
{
public:
	class FText                                   Title;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              LargePreviewImage;                                 // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              SmallPreviewImage;                                 // 0x0060(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMediaSource*                           PreviewVideoMediaSource;                           // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHomebaseNodeDisplayData) == 0x000008, "Wrong alignment on FHomebaseNodeDisplayData");
static_assert(sizeof(FHomebaseNodeDisplayData) == 0x000090, "Wrong size on FHomebaseNodeDisplayData");
static_assert(offsetof(FHomebaseNodeDisplayData, Title) == 0x000008, "Member 'FHomebaseNodeDisplayData::Title' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeDisplayData, Description) == 0x000020, "Member 'FHomebaseNodeDisplayData::Description' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeDisplayData, LargePreviewImage) == 0x000038, "Member 'FHomebaseNodeDisplayData::LargePreviewImage' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeDisplayData, SmallPreviewImage) == 0x000060, "Member 'FHomebaseNodeDisplayData::SmallPreviewImage' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeDisplayData, PreviewVideoMediaSource) == 0x000088, "Member 'FHomebaseNodeDisplayData::PreviewVideoMediaSource' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_XL_PersonnelAndSchematics_Configuration
// 0x0560 (0x0560 - 0x0000)
struct FFortItemCard_XL_PersonnelAndSchematics_Configuration final
{
public:
	struct FMargin                                BackgroundPadding;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration PowerRatingBlock;                                  // 0x0010(0x0330)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              BookmarkImageSize;                                 // 0x0340(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemCard_NameplateBorder_Configuration Nameplate;                                         // 0x0350(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ItemNameTextStyle;                                 // 0x0420(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LeadSurvivorTypeIconSize;                          // 0x0448(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              FirstIconSlotSize;                                 // 0x0458(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PaddingBetweenIconSlots;                           // 0x0468(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46C[0x4];                                      // 0x046C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              SecondIconSlotSize;                                // 0x0470(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemCard_DefenderWeaponTypeIcon_Configuration DefenderWeaponTypeIcon;                            // 0x0480(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_DetailAreaBorder_Configuration DetailAreaBorder;                                  // 0x0490(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         RarityNameTextLeftPadding;                         // 0x04A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   RarityNameTextStyle;                               // 0x04A8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClassIconImageLeftPadding;                         // 0x04D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D4[0x4];                                      // 0x04D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ClassIconSize;                                     // 0x04D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PaddingBetweenClassIconAndName;                    // 0x04E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4EC[0x4];                                      // 0x04EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   ClassNameTextStyle;                                // 0x04F0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TierMeterLeftPadding;                              // 0x0518(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51C[0x4];                                      // 0x051C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortItemCard_TierMeter_Configuration  TierMeter;                                         // 0x0520(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                IconSlotOverNameplatePadding;                      // 0x0538(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              IconSlotOverNameplateSize;                         // 0x0548(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_558[0x8];                                      // 0x0558(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemCard_XL_PersonnelAndSchematics_Configuration) == 0x000010, "Wrong alignment on FFortItemCard_XL_PersonnelAndSchematics_Configuration");
static_assert(sizeof(FFortItemCard_XL_PersonnelAndSchematics_Configuration) == 0x000560, "Wrong size on FFortItemCard_XL_PersonnelAndSchematics_Configuration");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, BackgroundPadding) == 0x000000, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::BackgroundPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, PowerRatingBlock) == 0x000010, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::PowerRatingBlock' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, BookmarkImageSize) == 0x000340, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::BookmarkImageSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, Nameplate) == 0x000350, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::Nameplate' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, ItemNameTextStyle) == 0x000420, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::ItemNameTextStyle' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, LeadSurvivorTypeIconSize) == 0x000448, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::LeadSurvivorTypeIconSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, FirstIconSlotSize) == 0x000458, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::FirstIconSlotSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, PaddingBetweenIconSlots) == 0x000468, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::PaddingBetweenIconSlots' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, SecondIconSlotSize) == 0x000470, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::SecondIconSlotSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, DefenderWeaponTypeIcon) == 0x000480, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::DefenderWeaponTypeIcon' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, DetailAreaBorder) == 0x000490, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::DetailAreaBorder' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, RarityNameTextLeftPadding) == 0x0004A4, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::RarityNameTextLeftPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, RarityNameTextStyle) == 0x0004A8, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::RarityNameTextStyle' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, ClassIconImageLeftPadding) == 0x0004D0, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::ClassIconImageLeftPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, ClassIconSize) == 0x0004D8, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::ClassIconSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, PaddingBetweenClassIconAndName) == 0x0004E8, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::PaddingBetweenClassIconAndName' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, ClassNameTextStyle) == 0x0004F0, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::ClassNameTextStyle' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, TierMeterLeftPadding) == 0x000518, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::TierMeterLeftPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, TierMeter) == 0x000520, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::TierMeter' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, IconSlotOverNameplatePadding) == 0x000538, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::IconSlotOverNameplatePadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_PersonnelAndSchematics_Configuration, IconSlotOverNameplateSize) == 0x000548, "Member 'FFortItemCard_XL_PersonnelAndSchematics_Configuration::IconSlotOverNameplateSize' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_XL_ItemInstance_Configuration
// 0x0320 (0x0320 - 0x0000)
struct FFortItemCard_XL_ItemInstance_Configuration final
{
public:
	struct FMargin                                BackgroundPadding;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                PowerRatingBlockPadding;                           // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_PowerRatingBlock_ItemInstance_Configuration PowerRatingBlock;                                  // 0x0020(0x0240)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              BookmarkImageSize;                                 // 0x0260(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemCard_StackCountBlock_Configuration StackCountBlock;                                   // 0x0270(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMargin                                TraitBoxPadding;                                   // 0x02A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              FirstTraitSize;                                    // 0x02B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PaddingBetweenTraitIcons;                          // 0x02C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              SecondTraitSize;                                   // 0x02C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                TierMeterPadding;                                  // 0x02D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_TierMeter_Configuration  TierMeter;                                         // 0x02E8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_DurabilityMeter_Configuration DurabilityMeter;                                   // 0x0300(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_314[0xC];                                      // 0x0314(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemCard_XL_ItemInstance_Configuration) == 0x000010, "Wrong alignment on FFortItemCard_XL_ItemInstance_Configuration");
static_assert(sizeof(FFortItemCard_XL_ItemInstance_Configuration) == 0x000320, "Wrong size on FFortItemCard_XL_ItemInstance_Configuration");
static_assert(offsetof(FFortItemCard_XL_ItemInstance_Configuration, BackgroundPadding) == 0x000000, "Member 'FFortItemCard_XL_ItemInstance_Configuration::BackgroundPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_ItemInstance_Configuration, PowerRatingBlockPadding) == 0x000010, "Member 'FFortItemCard_XL_ItemInstance_Configuration::PowerRatingBlockPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_ItemInstance_Configuration, PowerRatingBlock) == 0x000020, "Member 'FFortItemCard_XL_ItemInstance_Configuration::PowerRatingBlock' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_ItemInstance_Configuration, BookmarkImageSize) == 0x000260, "Member 'FFortItemCard_XL_ItemInstance_Configuration::BookmarkImageSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_ItemInstance_Configuration, StackCountBlock) == 0x000270, "Member 'FFortItemCard_XL_ItemInstance_Configuration::StackCountBlock' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_ItemInstance_Configuration, TraitBoxPadding) == 0x0002A0, "Member 'FFortItemCard_XL_ItemInstance_Configuration::TraitBoxPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_ItemInstance_Configuration, FirstTraitSize) == 0x0002B0, "Member 'FFortItemCard_XL_ItemInstance_Configuration::FirstTraitSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_ItemInstance_Configuration, PaddingBetweenTraitIcons) == 0x0002C0, "Member 'FFortItemCard_XL_ItemInstance_Configuration::PaddingBetweenTraitIcons' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_ItemInstance_Configuration, SecondTraitSize) == 0x0002C8, "Member 'FFortItemCard_XL_ItemInstance_Configuration::SecondTraitSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_ItemInstance_Configuration, TierMeterPadding) == 0x0002D8, "Member 'FFortItemCard_XL_ItemInstance_Configuration::TierMeterPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_ItemInstance_Configuration, TierMeter) == 0x0002E8, "Member 'FFortItemCard_XL_ItemInstance_Configuration::TierMeter' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_ItemInstance_Configuration, DurabilityMeter) == 0x000300, "Member 'FFortItemCard_XL_ItemInstance_Configuration::DurabilityMeter' has a wrong offset!");

// ScriptStruct FortniteUI.FortErrorInfo
// 0x0070 (0x0070 - 0x0000)
struct FFortErrorInfo final
{
public:
	class FText                                   Operation;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ErrorMessage;                                      // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 ErrorCode;                                         // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortErrorSeverity                            ErrorSeverity;                                     // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ContinueButtonText;                                // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x10];                                      // 0x0060(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortErrorInfo) == 0x000008, "Wrong alignment on FFortErrorInfo");
static_assert(sizeof(FFortErrorInfo) == 0x000070, "Wrong size on FFortErrorInfo");
static_assert(offsetof(FFortErrorInfo, Operation) == 0x000000, "Member 'FFortErrorInfo::Operation' has a wrong offset!");
static_assert(offsetof(FFortErrorInfo, ErrorMessage) == 0x000018, "Member 'FFortErrorInfo::ErrorMessage' has a wrong offset!");
static_assert(offsetof(FFortErrorInfo, ErrorCode) == 0x000030, "Member 'FFortErrorInfo::ErrorCode' has a wrong offset!");
static_assert(offsetof(FFortErrorInfo, ErrorSeverity) == 0x000040, "Member 'FFortErrorInfo::ErrorSeverity' has a wrong offset!");
static_assert(offsetof(FFortErrorInfo, ContinueButtonText) == 0x000048, "Member 'FFortErrorInfo::ContinueButtonText' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_XL_TransformKey_Configuration
// 0x0050 (0x0050 - 0x0000)
struct FFortItemCard_XL_TransformKey_Configuration final
{
public:
	struct FMargin                                BackgroundPadding;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_StackCountBlock_Configuration StackCountBlock;                                   // 0x0010(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              TransformKeyIconSize;                              // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemCard_XL_TransformKey_Configuration) == 0x000008, "Wrong alignment on FFortItemCard_XL_TransformKey_Configuration");
static_assert(sizeof(FFortItemCard_XL_TransformKey_Configuration) == 0x000050, "Wrong size on FFortItemCard_XL_TransformKey_Configuration");
static_assert(offsetof(FFortItemCard_XL_TransformKey_Configuration, BackgroundPadding) == 0x000000, "Member 'FFortItemCard_XL_TransformKey_Configuration::BackgroundPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_TransformKey_Configuration, StackCountBlock) == 0x000010, "Member 'FFortItemCard_XL_TransformKey_Configuration::StackCountBlock' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XL_TransformKey_Configuration, TransformKeyIconSize) == 0x000040, "Member 'FFortItemCard_XL_TransformKey_Configuration::TransformKeyIconSize' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_L_PersonnelAndSchematics_Configuration
// 0x04C0 (0x04C0 - 0x0000)
struct FFortItemCard_L_PersonnelAndSchematics_Configuration final
{
public:
	struct FMargin                                BackgroundPadding;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration PowerRatingBlock;                                  // 0x0010(0x0330)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              BookmarkImageSize;                                 // 0x0340(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemCard_NameplateBorder_Configuration Nameplate;                                         // 0x0350(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              ClassIconSize;                                     // 0x0420(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LeadSurvivorTypeIconSize;                          // 0x0430(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              FirstIconSlotSize;                                 // 0x0440(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PaddingBetweenIconSlots;                           // 0x0450(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_454[0x4];                                      // 0x0454(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              SecondIconSlotSize;                                // 0x0458(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemCard_DefenderWeaponTypeIcon_Configuration DefenderWeaponTypeIcon;                            // 0x0468(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_DetailAreaBorder_Configuration DetailAreaBorder;                                  // 0x0478(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_LevelMeter_Configuration LevelMeter;                                        // 0x048C(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TierMeterLeftPadding;                              // 0x04A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A4[0x4];                                      // 0x04A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortItemCard_TierMeter_Configuration  TierMeter;                                         // 0x04A8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemCard_L_PersonnelAndSchematics_Configuration) == 0x000010, "Wrong alignment on FFortItemCard_L_PersonnelAndSchematics_Configuration");
static_assert(sizeof(FFortItemCard_L_PersonnelAndSchematics_Configuration) == 0x0004C0, "Wrong size on FFortItemCard_L_PersonnelAndSchematics_Configuration");
static_assert(offsetof(FFortItemCard_L_PersonnelAndSchematics_Configuration, BackgroundPadding) == 0x000000, "Member 'FFortItemCard_L_PersonnelAndSchematics_Configuration::BackgroundPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_PersonnelAndSchematics_Configuration, PowerRatingBlock) == 0x000010, "Member 'FFortItemCard_L_PersonnelAndSchematics_Configuration::PowerRatingBlock' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_PersonnelAndSchematics_Configuration, BookmarkImageSize) == 0x000340, "Member 'FFortItemCard_L_PersonnelAndSchematics_Configuration::BookmarkImageSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_PersonnelAndSchematics_Configuration, Nameplate) == 0x000350, "Member 'FFortItemCard_L_PersonnelAndSchematics_Configuration::Nameplate' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_PersonnelAndSchematics_Configuration, ClassIconSize) == 0x000420, "Member 'FFortItemCard_L_PersonnelAndSchematics_Configuration::ClassIconSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_PersonnelAndSchematics_Configuration, LeadSurvivorTypeIconSize) == 0x000430, "Member 'FFortItemCard_L_PersonnelAndSchematics_Configuration::LeadSurvivorTypeIconSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_PersonnelAndSchematics_Configuration, FirstIconSlotSize) == 0x000440, "Member 'FFortItemCard_L_PersonnelAndSchematics_Configuration::FirstIconSlotSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_PersonnelAndSchematics_Configuration, PaddingBetweenIconSlots) == 0x000450, "Member 'FFortItemCard_L_PersonnelAndSchematics_Configuration::PaddingBetweenIconSlots' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_PersonnelAndSchematics_Configuration, SecondIconSlotSize) == 0x000458, "Member 'FFortItemCard_L_PersonnelAndSchematics_Configuration::SecondIconSlotSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_PersonnelAndSchematics_Configuration, DefenderWeaponTypeIcon) == 0x000468, "Member 'FFortItemCard_L_PersonnelAndSchematics_Configuration::DefenderWeaponTypeIcon' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_PersonnelAndSchematics_Configuration, DetailAreaBorder) == 0x000478, "Member 'FFortItemCard_L_PersonnelAndSchematics_Configuration::DetailAreaBorder' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_PersonnelAndSchematics_Configuration, LevelMeter) == 0x00048C, "Member 'FFortItemCard_L_PersonnelAndSchematics_Configuration::LevelMeter' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_PersonnelAndSchematics_Configuration, TierMeterLeftPadding) == 0x0004A0, "Member 'FFortItemCard_L_PersonnelAndSchematics_Configuration::TierMeterLeftPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_PersonnelAndSchematics_Configuration, TierMeter) == 0x0004A8, "Member 'FFortItemCard_L_PersonnelAndSchematics_Configuration::TierMeter' has a wrong offset!");

// ScriptStruct FortniteUI.UIStateTag_Athena
// 0x0000 (0x0004 - 0x0004)
struct FUIStateTag_Athena final : public FUIStateTag
{
};
static_assert(alignof(FUIStateTag_Athena) == 0x000004, "Wrong alignment on FUIStateTag_Athena");
static_assert(sizeof(FUIStateTag_Athena) == 0x000004, "Wrong size on FUIStateTag_Athena");

// ScriptStruct FortniteUI.FortItemCard_L_ItemInstance_Configuration
// 0x0320 (0x0320 - 0x0000)
struct FFortItemCard_L_ItemInstance_Configuration final
{
public:
	struct FMargin                                BackgroundPadding;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                PowerRatingBlockPadding;                           // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_PowerRatingBlock_ItemInstance_Configuration PowerRatingBlock;                                  // 0x0020(0x0240)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              BookmarkImageSize;                                 // 0x0260(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemCard_StackCountBlock_Configuration StackCountBlock;                                   // 0x0270(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMargin                                TraitBoxPadding;                                   // 0x02A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              FirstTraitSize;                                    // 0x02B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PaddingBetweenTraitIcons;                          // 0x02C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              SecondTraitSize;                                   // 0x02C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                TierMeterPadding;                                  // 0x02D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_TierMeter_Configuration  TierMeter;                                         // 0x02E8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_DurabilityMeter_Configuration DurabilityMeter;                                   // 0x0300(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_314[0xC];                                      // 0x0314(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemCard_L_ItemInstance_Configuration) == 0x000010, "Wrong alignment on FFortItemCard_L_ItemInstance_Configuration");
static_assert(sizeof(FFortItemCard_L_ItemInstance_Configuration) == 0x000320, "Wrong size on FFortItemCard_L_ItemInstance_Configuration");
static_assert(offsetof(FFortItemCard_L_ItemInstance_Configuration, BackgroundPadding) == 0x000000, "Member 'FFortItemCard_L_ItemInstance_Configuration::BackgroundPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_ItemInstance_Configuration, PowerRatingBlockPadding) == 0x000010, "Member 'FFortItemCard_L_ItemInstance_Configuration::PowerRatingBlockPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_ItemInstance_Configuration, PowerRatingBlock) == 0x000020, "Member 'FFortItemCard_L_ItemInstance_Configuration::PowerRatingBlock' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_ItemInstance_Configuration, BookmarkImageSize) == 0x000260, "Member 'FFortItemCard_L_ItemInstance_Configuration::BookmarkImageSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_ItemInstance_Configuration, StackCountBlock) == 0x000270, "Member 'FFortItemCard_L_ItemInstance_Configuration::StackCountBlock' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_ItemInstance_Configuration, TraitBoxPadding) == 0x0002A0, "Member 'FFortItemCard_L_ItemInstance_Configuration::TraitBoxPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_ItemInstance_Configuration, FirstTraitSize) == 0x0002B0, "Member 'FFortItemCard_L_ItemInstance_Configuration::FirstTraitSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_ItemInstance_Configuration, PaddingBetweenTraitIcons) == 0x0002C0, "Member 'FFortItemCard_L_ItemInstance_Configuration::PaddingBetweenTraitIcons' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_ItemInstance_Configuration, SecondTraitSize) == 0x0002C8, "Member 'FFortItemCard_L_ItemInstance_Configuration::SecondTraitSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_ItemInstance_Configuration, TierMeterPadding) == 0x0002D8, "Member 'FFortItemCard_L_ItemInstance_Configuration::TierMeterPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_ItemInstance_Configuration, TierMeter) == 0x0002E8, "Member 'FFortItemCard_L_ItemInstance_Configuration::TierMeter' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_ItemInstance_Configuration, DurabilityMeter) == 0x000300, "Member 'FFortItemCard_L_ItemInstance_Configuration::DurabilityMeter' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_L_TransformKey_Configuration
// 0x0050 (0x0050 - 0x0000)
struct FFortItemCard_L_TransformKey_Configuration final
{
public:
	struct FMargin                                BackgroundPadding;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_StackCountBlock_Configuration StackCountBlock;                                   // 0x0010(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              TransformKeyIconSize;                              // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemCard_L_TransformKey_Configuration) == 0x000008, "Wrong alignment on FFortItemCard_L_TransformKey_Configuration");
static_assert(sizeof(FFortItemCard_L_TransformKey_Configuration) == 0x000050, "Wrong size on FFortItemCard_L_TransformKey_Configuration");
static_assert(offsetof(FFortItemCard_L_TransformKey_Configuration, BackgroundPadding) == 0x000000, "Member 'FFortItemCard_L_TransformKey_Configuration::BackgroundPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_TransformKey_Configuration, StackCountBlock) == 0x000010, "Member 'FFortItemCard_L_TransformKey_Configuration::StackCountBlock' has a wrong offset!");
static_assert(offsetof(FFortItemCard_L_TransformKey_Configuration, TransformKeyIconSize) == 0x000040, "Member 'FFortItemCard_L_TransformKey_Configuration::TransformKeyIconSize' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_M_PersonnelAndSchematics_Configuration
// 0x04C0 (0x04C0 - 0x0000)
struct FFortItemCard_M_PersonnelAndSchematics_Configuration final
{
public:
	struct FMargin                                BackgroundPadding;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration PowerRatingBlock;                                  // 0x0010(0x0330)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              BookmarkImageSize;                                 // 0x0340(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemCard_NameplateBorder_Configuration Nameplate;                                         // 0x0350(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              ClassIconSize;                                     // 0x0420(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LeadSurvivorTypeIconSize;                          // 0x0430(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              FirstIconSlotSize;                                 // 0x0440(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PaddingBetweenIconSlots;                           // 0x0450(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_454[0x4];                                      // 0x0454(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              SecondIconSlotSize;                                // 0x0458(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemCard_DefenderWeaponTypeIcon_Configuration DefenderWeaponTypeIcon;                            // 0x0468(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_DetailAreaBorder_Configuration DetailAreaBorder;                                  // 0x0478(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_LevelMeter_Configuration LevelMeter;                                        // 0x048C(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TierMeterLeftPadding;                              // 0x04A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A4[0x4];                                      // 0x04A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortItemCard_TierMeter_Configuration  TierMeter;                                         // 0x04A8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemCard_M_PersonnelAndSchematics_Configuration) == 0x000010, "Wrong alignment on FFortItemCard_M_PersonnelAndSchematics_Configuration");
static_assert(sizeof(FFortItemCard_M_PersonnelAndSchematics_Configuration) == 0x0004C0, "Wrong size on FFortItemCard_M_PersonnelAndSchematics_Configuration");
static_assert(offsetof(FFortItemCard_M_PersonnelAndSchematics_Configuration, BackgroundPadding) == 0x000000, "Member 'FFortItemCard_M_PersonnelAndSchematics_Configuration::BackgroundPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_PersonnelAndSchematics_Configuration, PowerRatingBlock) == 0x000010, "Member 'FFortItemCard_M_PersonnelAndSchematics_Configuration::PowerRatingBlock' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_PersonnelAndSchematics_Configuration, BookmarkImageSize) == 0x000340, "Member 'FFortItemCard_M_PersonnelAndSchematics_Configuration::BookmarkImageSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_PersonnelAndSchematics_Configuration, Nameplate) == 0x000350, "Member 'FFortItemCard_M_PersonnelAndSchematics_Configuration::Nameplate' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_PersonnelAndSchematics_Configuration, ClassIconSize) == 0x000420, "Member 'FFortItemCard_M_PersonnelAndSchematics_Configuration::ClassIconSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_PersonnelAndSchematics_Configuration, LeadSurvivorTypeIconSize) == 0x000430, "Member 'FFortItemCard_M_PersonnelAndSchematics_Configuration::LeadSurvivorTypeIconSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_PersonnelAndSchematics_Configuration, FirstIconSlotSize) == 0x000440, "Member 'FFortItemCard_M_PersonnelAndSchematics_Configuration::FirstIconSlotSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_PersonnelAndSchematics_Configuration, PaddingBetweenIconSlots) == 0x000450, "Member 'FFortItemCard_M_PersonnelAndSchematics_Configuration::PaddingBetweenIconSlots' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_PersonnelAndSchematics_Configuration, SecondIconSlotSize) == 0x000458, "Member 'FFortItemCard_M_PersonnelAndSchematics_Configuration::SecondIconSlotSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_PersonnelAndSchematics_Configuration, DefenderWeaponTypeIcon) == 0x000468, "Member 'FFortItemCard_M_PersonnelAndSchematics_Configuration::DefenderWeaponTypeIcon' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_PersonnelAndSchematics_Configuration, DetailAreaBorder) == 0x000478, "Member 'FFortItemCard_M_PersonnelAndSchematics_Configuration::DetailAreaBorder' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_PersonnelAndSchematics_Configuration, LevelMeter) == 0x00048C, "Member 'FFortItemCard_M_PersonnelAndSchematics_Configuration::LevelMeter' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_PersonnelAndSchematics_Configuration, TierMeterLeftPadding) == 0x0004A0, "Member 'FFortItemCard_M_PersonnelAndSchematics_Configuration::TierMeterLeftPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_PersonnelAndSchematics_Configuration, TierMeter) == 0x0004A8, "Member 'FFortItemCard_M_PersonnelAndSchematics_Configuration::TierMeter' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_M_ItemInstance_Configuration
// 0x0320 (0x0320 - 0x0000)
struct FFortItemCard_M_ItemInstance_Configuration final
{
public:
	struct FMargin                                BackgroundPadding;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                PowerRatingBlockPadding;                           // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_PowerRatingBlock_ItemInstance_Configuration PowerRatingBlock;                                  // 0x0020(0x0240)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              BookmarkImageSize;                                 // 0x0260(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemCard_StackCountBlock_Configuration StackCountBlock;                                   // 0x0270(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMargin                                TraitBoxPadding;                                   // 0x02A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              FirstTraitSize;                                    // 0x02B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PaddingBetweenTraitIcons;                          // 0x02C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              SecondTraitSize;                                   // 0x02C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                TierMeterPadding;                                  // 0x02D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_TierMeter_Configuration  TierMeter;                                         // 0x02E8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_DurabilityMeter_Configuration DurabilityMeter;                                   // 0x0300(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_314[0xC];                                      // 0x0314(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemCard_M_ItemInstance_Configuration) == 0x000010, "Wrong alignment on FFortItemCard_M_ItemInstance_Configuration");
static_assert(sizeof(FFortItemCard_M_ItemInstance_Configuration) == 0x000320, "Wrong size on FFortItemCard_M_ItemInstance_Configuration");
static_assert(offsetof(FFortItemCard_M_ItemInstance_Configuration, BackgroundPadding) == 0x000000, "Member 'FFortItemCard_M_ItemInstance_Configuration::BackgroundPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_ItemInstance_Configuration, PowerRatingBlockPadding) == 0x000010, "Member 'FFortItemCard_M_ItemInstance_Configuration::PowerRatingBlockPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_ItemInstance_Configuration, PowerRatingBlock) == 0x000020, "Member 'FFortItemCard_M_ItemInstance_Configuration::PowerRatingBlock' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_ItemInstance_Configuration, BookmarkImageSize) == 0x000260, "Member 'FFortItemCard_M_ItemInstance_Configuration::BookmarkImageSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_ItemInstance_Configuration, StackCountBlock) == 0x000270, "Member 'FFortItemCard_M_ItemInstance_Configuration::StackCountBlock' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_ItemInstance_Configuration, TraitBoxPadding) == 0x0002A0, "Member 'FFortItemCard_M_ItemInstance_Configuration::TraitBoxPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_ItemInstance_Configuration, FirstTraitSize) == 0x0002B0, "Member 'FFortItemCard_M_ItemInstance_Configuration::FirstTraitSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_ItemInstance_Configuration, PaddingBetweenTraitIcons) == 0x0002C0, "Member 'FFortItemCard_M_ItemInstance_Configuration::PaddingBetweenTraitIcons' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_ItemInstance_Configuration, SecondTraitSize) == 0x0002C8, "Member 'FFortItemCard_M_ItemInstance_Configuration::SecondTraitSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_ItemInstance_Configuration, TierMeterPadding) == 0x0002D8, "Member 'FFortItemCard_M_ItemInstance_Configuration::TierMeterPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_ItemInstance_Configuration, TierMeter) == 0x0002E8, "Member 'FFortItemCard_M_ItemInstance_Configuration::TierMeter' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_ItemInstance_Configuration, DurabilityMeter) == 0x000300, "Member 'FFortItemCard_M_ItemInstance_Configuration::DurabilityMeter' has a wrong offset!");

// ScriptStruct FortniteUI.HUDLayoutToolV2_ButtonStateColor
// 0x0038 (0x0038 - 0x0000)
struct FHUDLayoutToolV2_ButtonStateColor final
{
public:
	struct FSlateColor                            TextColor;                                         // 0x0000(0x0014)(Edit, NativeAccessSpecifierPublic)
	struct FLinearColor                           IconColor;                                         // 0x0014(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BackgroundColor;                                   // 0x0024(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IconAngle;                                         // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHUDLayoutToolV2_ButtonStateColor) == 0x000004, "Wrong alignment on FHUDLayoutToolV2_ButtonStateColor");
static_assert(sizeof(FHUDLayoutToolV2_ButtonStateColor) == 0x000038, "Wrong size on FHUDLayoutToolV2_ButtonStateColor");
static_assert(offsetof(FHUDLayoutToolV2_ButtonStateColor, TextColor) == 0x000000, "Member 'FHUDLayoutToolV2_ButtonStateColor::TextColor' has a wrong offset!");
static_assert(offsetof(FHUDLayoutToolV2_ButtonStateColor, IconColor) == 0x000014, "Member 'FHUDLayoutToolV2_ButtonStateColor::IconColor' has a wrong offset!");
static_assert(offsetof(FHUDLayoutToolV2_ButtonStateColor, BackgroundColor) == 0x000024, "Member 'FHUDLayoutToolV2_ButtonStateColor::BackgroundColor' has a wrong offset!");
static_assert(offsetof(FHUDLayoutToolV2_ButtonStateColor, IconAngle) == 0x000034, "Member 'FHUDLayoutToolV2_ButtonStateColor::IconAngle' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_M_TransformKey_Configuration
// 0x0050 (0x0050 - 0x0000)
struct FFortItemCard_M_TransformKey_Configuration final
{
public:
	struct FMargin                                BackgroundPadding;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_StackCountBlock_Configuration StackCountBlock;                                   // 0x0010(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              TransformKeyIconSize;                              // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemCard_M_TransformKey_Configuration) == 0x000008, "Wrong alignment on FFortItemCard_M_TransformKey_Configuration");
static_assert(sizeof(FFortItemCard_M_TransformKey_Configuration) == 0x000050, "Wrong size on FFortItemCard_M_TransformKey_Configuration");
static_assert(offsetof(FFortItemCard_M_TransformKey_Configuration, BackgroundPadding) == 0x000000, "Member 'FFortItemCard_M_TransformKey_Configuration::BackgroundPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_TransformKey_Configuration, StackCountBlock) == 0x000010, "Member 'FFortItemCard_M_TransformKey_Configuration::StackCountBlock' has a wrong offset!");
static_assert(offsetof(FFortItemCard_M_TransformKey_Configuration, TransformKeyIconSize) == 0x000040, "Member 'FFortItemCard_M_TransformKey_Configuration::TransformKeyIconSize' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_S_PersonnelAndSchematics_Configuration
// 0x04C0 (0x04C0 - 0x0000)
struct FFortItemCard_S_PersonnelAndSchematics_Configuration final
{
public:
	struct FMargin                                BackgroundPadding;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration PowerRatingBlock;                                  // 0x0010(0x0330)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              BookmarkImageSize;                                 // 0x0340(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemCard_NameplateBorder_Configuration Nameplate;                                         // 0x0350(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              ClassIconSize;                                     // 0x0420(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LeadSurvivorTypeIconSize;                          // 0x0430(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              FirstIconSlotSize;                                 // 0x0440(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PaddingBetweenIconSlots;                           // 0x0450(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_454[0x4];                                      // 0x0454(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              SecondIconSlotSize;                                // 0x0458(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemCard_DefenderWeaponTypeIcon_Configuration DefenderWeaponTypeIcon;                            // 0x0468(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_DetailAreaBorder_Configuration DetailAreaBorder;                                  // 0x0478(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_LevelMeter_Configuration LevelMeter;                                        // 0x048C(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TierMeterLeftPadding;                              // 0x04A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A4[0x4];                                      // 0x04A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortItemCard_TierMeter_Configuration  TierMeter;                                         // 0x04A8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemCard_S_PersonnelAndSchematics_Configuration) == 0x000010, "Wrong alignment on FFortItemCard_S_PersonnelAndSchematics_Configuration");
static_assert(sizeof(FFortItemCard_S_PersonnelAndSchematics_Configuration) == 0x0004C0, "Wrong size on FFortItemCard_S_PersonnelAndSchematics_Configuration");
static_assert(offsetof(FFortItemCard_S_PersonnelAndSchematics_Configuration, BackgroundPadding) == 0x000000, "Member 'FFortItemCard_S_PersonnelAndSchematics_Configuration::BackgroundPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_PersonnelAndSchematics_Configuration, PowerRatingBlock) == 0x000010, "Member 'FFortItemCard_S_PersonnelAndSchematics_Configuration::PowerRatingBlock' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_PersonnelAndSchematics_Configuration, BookmarkImageSize) == 0x000340, "Member 'FFortItemCard_S_PersonnelAndSchematics_Configuration::BookmarkImageSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_PersonnelAndSchematics_Configuration, Nameplate) == 0x000350, "Member 'FFortItemCard_S_PersonnelAndSchematics_Configuration::Nameplate' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_PersonnelAndSchematics_Configuration, ClassIconSize) == 0x000420, "Member 'FFortItemCard_S_PersonnelAndSchematics_Configuration::ClassIconSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_PersonnelAndSchematics_Configuration, LeadSurvivorTypeIconSize) == 0x000430, "Member 'FFortItemCard_S_PersonnelAndSchematics_Configuration::LeadSurvivorTypeIconSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_PersonnelAndSchematics_Configuration, FirstIconSlotSize) == 0x000440, "Member 'FFortItemCard_S_PersonnelAndSchematics_Configuration::FirstIconSlotSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_PersonnelAndSchematics_Configuration, PaddingBetweenIconSlots) == 0x000450, "Member 'FFortItemCard_S_PersonnelAndSchematics_Configuration::PaddingBetweenIconSlots' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_PersonnelAndSchematics_Configuration, SecondIconSlotSize) == 0x000458, "Member 'FFortItemCard_S_PersonnelAndSchematics_Configuration::SecondIconSlotSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_PersonnelAndSchematics_Configuration, DefenderWeaponTypeIcon) == 0x000468, "Member 'FFortItemCard_S_PersonnelAndSchematics_Configuration::DefenderWeaponTypeIcon' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_PersonnelAndSchematics_Configuration, DetailAreaBorder) == 0x000478, "Member 'FFortItemCard_S_PersonnelAndSchematics_Configuration::DetailAreaBorder' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_PersonnelAndSchematics_Configuration, LevelMeter) == 0x00048C, "Member 'FFortItemCard_S_PersonnelAndSchematics_Configuration::LevelMeter' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_PersonnelAndSchematics_Configuration, TierMeterLeftPadding) == 0x0004A0, "Member 'FFortItemCard_S_PersonnelAndSchematics_Configuration::TierMeterLeftPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_PersonnelAndSchematics_Configuration, TierMeter) == 0x0004A8, "Member 'FFortItemCard_S_PersonnelAndSchematics_Configuration::TierMeter' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_S_ItemInstance_Configuration
// 0x0300 (0x0300 - 0x0000)
struct FFortItemCard_S_ItemInstance_Configuration final
{
public:
	struct FMargin                                BackgroundPadding;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                PowerRatingBlockPadding;                           // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_PowerRatingBlock_ItemInstance_Configuration PowerRatingBlock;                                  // 0x0020(0x0240)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              BookmarkImageSize;                                 // 0x0260(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemCard_StackCountBlock_Configuration StackCountBlock;                                   // 0x0270(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMargin                                TraitBoxPadding;                                   // 0x02A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              FirstTraitSize;                                    // 0x02B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                TierMeterPadding;                                  // 0x02C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_TierMeter_Configuration  TierMeter;                                         // 0x02D0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_DurabilityMeter_Configuration DurabilityMeter;                                   // 0x02E8(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemCard_S_ItemInstance_Configuration) == 0x000010, "Wrong alignment on FFortItemCard_S_ItemInstance_Configuration");
static_assert(sizeof(FFortItemCard_S_ItemInstance_Configuration) == 0x000300, "Wrong size on FFortItemCard_S_ItemInstance_Configuration");
static_assert(offsetof(FFortItemCard_S_ItemInstance_Configuration, BackgroundPadding) == 0x000000, "Member 'FFortItemCard_S_ItemInstance_Configuration::BackgroundPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_ItemInstance_Configuration, PowerRatingBlockPadding) == 0x000010, "Member 'FFortItemCard_S_ItemInstance_Configuration::PowerRatingBlockPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_ItemInstance_Configuration, PowerRatingBlock) == 0x000020, "Member 'FFortItemCard_S_ItemInstance_Configuration::PowerRatingBlock' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_ItemInstance_Configuration, BookmarkImageSize) == 0x000260, "Member 'FFortItemCard_S_ItemInstance_Configuration::BookmarkImageSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_ItemInstance_Configuration, StackCountBlock) == 0x000270, "Member 'FFortItemCard_S_ItemInstance_Configuration::StackCountBlock' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_ItemInstance_Configuration, TraitBoxPadding) == 0x0002A0, "Member 'FFortItemCard_S_ItemInstance_Configuration::TraitBoxPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_ItemInstance_Configuration, FirstTraitSize) == 0x0002B0, "Member 'FFortItemCard_S_ItemInstance_Configuration::FirstTraitSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_ItemInstance_Configuration, TierMeterPadding) == 0x0002C0, "Member 'FFortItemCard_S_ItemInstance_Configuration::TierMeterPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_ItemInstance_Configuration, TierMeter) == 0x0002D0, "Member 'FFortItemCard_S_ItemInstance_Configuration::TierMeter' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_ItemInstance_Configuration, DurabilityMeter) == 0x0002E8, "Member 'FFortItemCard_S_ItemInstance_Configuration::DurabilityMeter' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_S_TransformKey_Configuration
// 0x0050 (0x0050 - 0x0000)
struct FFortItemCard_S_TransformKey_Configuration final
{
public:
	struct FMargin                                BackgroundPadding;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_StackCountBlock_Configuration StackCountBlock;                                   // 0x0010(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              TransformKeyIconSize;                              // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemCard_S_TransformKey_Configuration) == 0x000008, "Wrong alignment on FFortItemCard_S_TransformKey_Configuration");
static_assert(sizeof(FFortItemCard_S_TransformKey_Configuration) == 0x000050, "Wrong size on FFortItemCard_S_TransformKey_Configuration");
static_assert(offsetof(FFortItemCard_S_TransformKey_Configuration, BackgroundPadding) == 0x000000, "Member 'FFortItemCard_S_TransformKey_Configuration::BackgroundPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_TransformKey_Configuration, StackCountBlock) == 0x000010, "Member 'FFortItemCard_S_TransformKey_Configuration::StackCountBlock' has a wrong offset!");
static_assert(offsetof(FFortItemCard_S_TransformKey_Configuration, TransformKeyIconSize) == 0x000040, "Member 'FFortItemCard_S_TransformKey_Configuration::TransformKeyIconSize' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_XS_PersonnelAndSchematics_Configuration
// 0x0048 (0x0048 - 0x0000)
struct FFortItemCard_XS_PersonnelAndSchematics_Configuration final
{
public:
	struct FMargin                                BackgroundPadding;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              BookmarkImageSize;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemCard_DetailAreaBorder_Configuration DetailAreaBorder;                                  // 0x0020(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              AvailableUpgradeIconSize;                          // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemCard_XS_PersonnelAndSchematics_Configuration) == 0x000008, "Wrong alignment on FFortItemCard_XS_PersonnelAndSchematics_Configuration");
static_assert(sizeof(FFortItemCard_XS_PersonnelAndSchematics_Configuration) == 0x000048, "Wrong size on FFortItemCard_XS_PersonnelAndSchematics_Configuration");
static_assert(offsetof(FFortItemCard_XS_PersonnelAndSchematics_Configuration, BackgroundPadding) == 0x000000, "Member 'FFortItemCard_XS_PersonnelAndSchematics_Configuration::BackgroundPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XS_PersonnelAndSchematics_Configuration, BookmarkImageSize) == 0x000010, "Member 'FFortItemCard_XS_PersonnelAndSchematics_Configuration::BookmarkImageSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XS_PersonnelAndSchematics_Configuration, DetailAreaBorder) == 0x000020, "Member 'FFortItemCard_XS_PersonnelAndSchematics_Configuration::DetailAreaBorder' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XS_PersonnelAndSchematics_Configuration, AvailableUpgradeIconSize) == 0x000038, "Member 'FFortItemCard_XS_PersonnelAndSchematics_Configuration::AvailableUpgradeIconSize' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_XS_ItemInstance_Configuration
// 0x02E0 (0x02E0 - 0x0000)
struct FFortItemCard_XS_ItemInstance_Configuration final
{
public:
	struct FMargin                                BackgroundPadding;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                PowerRatingBlockPadding;                           // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_PowerRatingBlock_ItemInstance_Configuration PowerRatingBlock;                                  // 0x0020(0x0240)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              BookmarkImageSize;                                 // 0x0260(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                TraitBoxPadding;                                   // 0x0270(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              FirstTraitSize;                                    // 0x0280(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemCard_StackCountBlock_Configuration StackCountBlock;                                   // 0x0290(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FFortItemCard_DurabilityMeter_Configuration DurabilityMeter;                                   // 0x02C0(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D4[0xC];                                      // 0x02D4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemCard_XS_ItemInstance_Configuration) == 0x000010, "Wrong alignment on FFortItemCard_XS_ItemInstance_Configuration");
static_assert(sizeof(FFortItemCard_XS_ItemInstance_Configuration) == 0x0002E0, "Wrong size on FFortItemCard_XS_ItemInstance_Configuration");
static_assert(offsetof(FFortItemCard_XS_ItemInstance_Configuration, BackgroundPadding) == 0x000000, "Member 'FFortItemCard_XS_ItemInstance_Configuration::BackgroundPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XS_ItemInstance_Configuration, PowerRatingBlockPadding) == 0x000010, "Member 'FFortItemCard_XS_ItemInstance_Configuration::PowerRatingBlockPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XS_ItemInstance_Configuration, PowerRatingBlock) == 0x000020, "Member 'FFortItemCard_XS_ItemInstance_Configuration::PowerRatingBlock' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XS_ItemInstance_Configuration, BookmarkImageSize) == 0x000260, "Member 'FFortItemCard_XS_ItemInstance_Configuration::BookmarkImageSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XS_ItemInstance_Configuration, TraitBoxPadding) == 0x000270, "Member 'FFortItemCard_XS_ItemInstance_Configuration::TraitBoxPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XS_ItemInstance_Configuration, FirstTraitSize) == 0x000280, "Member 'FFortItemCard_XS_ItemInstance_Configuration::FirstTraitSize' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XS_ItemInstance_Configuration, StackCountBlock) == 0x000290, "Member 'FFortItemCard_XS_ItemInstance_Configuration::StackCountBlock' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XS_ItemInstance_Configuration, DurabilityMeter) == 0x0002C0, "Member 'FFortItemCard_XS_ItemInstance_Configuration::DurabilityMeter' has a wrong offset!");

// ScriptStruct FortniteUI.HeistBlingIconData
// 0x0008 (0x0008 - 0x0000)
struct FHeistBlingIconData final
{
public:
	int32                                         IconIndex;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHeistBlingIconState                          IconState;                                         // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHeistBlingIconState                          PrevIconState;                                     // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHeistBlingIconData) == 0x000004, "Wrong alignment on FHeistBlingIconData");
static_assert(sizeof(FHeistBlingIconData) == 0x000008, "Wrong size on FHeistBlingIconData");
static_assert(offsetof(FHeistBlingIconData, IconIndex) == 0x000000, "Member 'FHeistBlingIconData::IconIndex' has a wrong offset!");
static_assert(offsetof(FHeistBlingIconData, IconState) == 0x000004, "Member 'FHeistBlingIconData::IconState' has a wrong offset!");
static_assert(offsetof(FHeistBlingIconData, PrevIconState) == 0x000005, "Member 'FHeistBlingIconData::PrevIconState' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_XS_TransformKey_Configuration
// 0x0050 (0x0050 - 0x0000)
struct FFortItemCard_XS_TransformKey_Configuration final
{
public:
	struct FMargin                                BackgroundPadding;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemCard_StackCountBlock_Configuration StackCountBlock;                                   // 0x0010(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              TransformKeyIconSize;                              // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemCard_XS_TransformKey_Configuration) == 0x000008, "Wrong alignment on FFortItemCard_XS_TransformKey_Configuration");
static_assert(sizeof(FFortItemCard_XS_TransformKey_Configuration) == 0x000050, "Wrong size on FFortItemCard_XS_TransformKey_Configuration");
static_assert(offsetof(FFortItemCard_XS_TransformKey_Configuration, BackgroundPadding) == 0x000000, "Member 'FFortItemCard_XS_TransformKey_Configuration::BackgroundPadding' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XS_TransformKey_Configuration, StackCountBlock) == 0x000010, "Member 'FFortItemCard_XS_TransformKey_Configuration::StackCountBlock' has a wrong offset!");
static_assert(offsetof(FFortItemCard_XS_TransformKey_Configuration, TransformKeyIconSize) == 0x000040, "Member 'FFortItemCard_XS_TransformKey_Configuration::TransformKeyIconSize' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemCard_XXS_ItemInstance_Configuration
// 0x0030 (0x0030 - 0x0000)
struct FFortItemCard_XXS_ItemInstance_Configuration final
{
public:
	struct FFortItemCard_StackCountBlock_Configuration StackCountBlock;                                   // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemCard_XXS_ItemInstance_Configuration) == 0x000008, "Wrong alignment on FFortItemCard_XXS_ItemInstance_Configuration");
static_assert(sizeof(FFortItemCard_XXS_ItemInstance_Configuration) == 0x000030, "Wrong size on FFortItemCard_XXS_ItemInstance_Configuration");
static_assert(offsetof(FFortItemCard_XXS_ItemInstance_Configuration, StackCountBlock) == 0x000000, "Member 'FFortItemCard_XXS_ItemInstance_Configuration::StackCountBlock' has a wrong offset!");

// ScriptStruct FortniteUI.PerkPipData
// 0x0010 (0x0010 - 0x0000)
struct FPerkPipData final
{
public:
	class UFortAccoladeItemDefinition*            AccoladeItemDef;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumOfPips;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPerkPipData) == 0x000008, "Wrong alignment on FPerkPipData");
static_assert(sizeof(FPerkPipData) == 0x000010, "Wrong size on FPerkPipData");
static_assert(offsetof(FPerkPipData, AccoladeItemDef) == 0x000000, "Member 'FPerkPipData::AccoladeItemDef' has a wrong offset!");
static_assert(offsetof(FPerkPipData, NumOfPips) == 0x000008, "Member 'FPerkPipData::NumOfPips' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemListViewConfig
// 0x00C0 (0x00C0 - 0x0000)
struct alignas(0x10) FFortItemListViewConfig final
{
public:
	uint8                                         Pad_0[0xC0];                                       // 0x0000(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemListViewConfig) == 0x000010, "Wrong alignment on FFortItemListViewConfig");
static_assert(sizeof(FFortItemListViewConfig) == 0x0000C0, "Wrong size on FFortItemListViewConfig");

// ScriptStruct FortniteUI.FortItemManagementInventoryFilterTabLabelInfo
// 0x0010 (0x00F0 - 0x00E0)
struct FFortItemManagementInventoryFilterTabLabelInfo final : public FFortTabButtonLabelInfo
{
public:
	class FName                                   FilterTabNameId;                                   // 0x00E0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0xC];                                       // 0x00E4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemManagementInventoryFilterTabLabelInfo) == 0x000010, "Wrong alignment on FFortItemManagementInventoryFilterTabLabelInfo");
static_assert(sizeof(FFortItemManagementInventoryFilterTabLabelInfo) == 0x0000F0, "Wrong size on FFortItemManagementInventoryFilterTabLabelInfo");
static_assert(offsetof(FFortItemManagementInventoryFilterTabLabelInfo, FilterTabNameId) == 0x0000E0, "Member 'FFortItemManagementInventoryFilterTabLabelInfo::FilterTabNameId' has a wrong offset!");

// ScriptStruct FortniteUI.SimpleActionMessages
// 0x0038 (0x0038 - 0x0000)
struct FSimpleActionMessages final
{
public:
	ELinkAcrossSimpleAction                       SimpleActionType;                                  // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SimpleActionTitle;                                 // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   SimpleActionBody;                                  // 0x0020(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSimpleActionMessages) == 0x000008, "Wrong alignment on FSimpleActionMessages");
static_assert(sizeof(FSimpleActionMessages) == 0x000038, "Wrong size on FSimpleActionMessages");
static_assert(offsetof(FSimpleActionMessages, SimpleActionType) == 0x000000, "Member 'FSimpleActionMessages::SimpleActionType' has a wrong offset!");
static_assert(offsetof(FSimpleActionMessages, SimpleActionTitle) == 0x000008, "Member 'FSimpleActionMessages::SimpleActionTitle' has a wrong offset!");
static_assert(offsetof(FSimpleActionMessages, SimpleActionBody) == 0x000020, "Member 'FSimpleActionMessages::SimpleActionBody' has a wrong offset!");

// ScriptStruct FortniteUI.QuickbarEquipSlotIndicesConfig
// 0x0010 (0x0010 - 0x0000)
struct FQuickbarEquipSlotIndicesConfig final
{
public:
	TArray<int32>                                 EquipSlotIndices;                                  // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuickbarEquipSlotIndicesConfig) == 0x000008, "Wrong alignment on FQuickbarEquipSlotIndicesConfig");
static_assert(sizeof(FQuickbarEquipSlotIndicesConfig) == 0x000010, "Wrong size on FQuickbarEquipSlotIndicesConfig");
static_assert(offsetof(FQuickbarEquipSlotIndicesConfig, EquipSlotIndices) == 0x000000, "Member 'FQuickbarEquipSlotIndicesConfig::EquipSlotIndices' has a wrong offset!");

// ScriptStruct FortniteUI.ItemPresentationRestrictionData
// 0x0040 (0x0040 - 0x0000)
struct FItemPresentationRestrictionData final
{
public:
	class FText                                   HeaderText;                                        // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 Icon;                                              // 0x0018(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemPresentationRestrictionData) == 0x000008, "Wrong alignment on FItemPresentationRestrictionData");
static_assert(sizeof(FItemPresentationRestrictionData) == 0x000040, "Wrong size on FItemPresentationRestrictionData");
static_assert(offsetof(FItemPresentationRestrictionData, HeaderText) == 0x000000, "Member 'FItemPresentationRestrictionData::HeaderText' has a wrong offset!");
static_assert(offsetof(FItemPresentationRestrictionData, Icon) == 0x000018, "Member 'FItemPresentationRestrictionData::Icon' has a wrong offset!");

// ScriptStruct FortniteUI.FortWeaponBoardDisplaySlot
// 0x0090 (0x0090 - 0x0000)
struct FFortWeaponBoardDisplaySlot final
{
public:
	struct FGameplayTag                           RequiredTag;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             MeshRelativeTransform;                             // 0x0010(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                LocalOffsetMultiplier;                             // 0x0070(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortWeaponBoardDisplaySlot) == 0x000010, "Wrong alignment on FFortWeaponBoardDisplaySlot");
static_assert(sizeof(FFortWeaponBoardDisplaySlot) == 0x000090, "Wrong size on FFortWeaponBoardDisplaySlot");
static_assert(offsetof(FFortWeaponBoardDisplaySlot, RequiredTag) == 0x000000, "Member 'FFortWeaponBoardDisplaySlot::RequiredTag' has a wrong offset!");
static_assert(offsetof(FFortWeaponBoardDisplaySlot, MeshRelativeTransform) == 0x000010, "Member 'FFortWeaponBoardDisplaySlot::MeshRelativeTransform' has a wrong offset!");
static_assert(offsetof(FFortWeaponBoardDisplaySlot, LocalOffsetMultiplier) == 0x000070, "Member 'FFortWeaponBoardDisplaySlot::LocalOffsetMultiplier' has a wrong offset!");

// ScriptStruct FortniteUI.FortWeaponBoardDisplaySlotItem
// 0x00A0 (0x00A0 - 0x0000)
struct FFortWeaponBoardDisplaySlotItem final
{
public:
	struct FFortWeaponBoardDisplaySlot            DisplaySlot;                                       // 0x0000(0x0090)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_90[0x10];                                      // 0x0090(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortWeaponBoardDisplaySlotItem) == 0x000010, "Wrong alignment on FFortWeaponBoardDisplaySlotItem");
static_assert(sizeof(FFortWeaponBoardDisplaySlotItem) == 0x0000A0, "Wrong size on FFortWeaponBoardDisplaySlotItem");
static_assert(offsetof(FFortWeaponBoardDisplaySlotItem, DisplaySlot) == 0x000000, "Member 'FFortWeaponBoardDisplaySlotItem::DisplaySlot' has a wrong offset!");

// ScriptStruct FortniteUI.SceneTransitionOptions
// 0x0002 (0x0002 - 0x0000)
struct FSceneTransitionOptions final
{
public:
	ESceneTransitionType                          TRANSITION;                                        // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepInputRotation;                                // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSceneTransitionOptions) == 0x000001, "Wrong alignment on FSceneTransitionOptions");
static_assert(sizeof(FSceneTransitionOptions) == 0x000002, "Wrong size on FSceneTransitionOptions");
static_assert(offsetof(FSceneTransitionOptions, TRANSITION) == 0x000000, "Member 'FSceneTransitionOptions::TRANSITION' has a wrong offset!");
static_assert(offsetof(FSceneTransitionOptions, bKeepInputRotation) == 0x000001, "Member 'FSceneTransitionOptions::bKeepInputRotation' has a wrong offset!");

// ScriptStruct FortniteUI.InterpolatedTransitionCamera
// 0x0070 (0x0070 - 0x0000)
struct FInterpolatedTransitionCamera final
{
public:
	struct FTransform                             CameraTransform;                                   // 0x0000(0x0060)(BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         FieldOfView;                                       // 0x0060(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0xC];                                       // 0x0064(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInterpolatedTransitionCamera) == 0x000010, "Wrong alignment on FInterpolatedTransitionCamera");
static_assert(sizeof(FInterpolatedTransitionCamera) == 0x000070, "Wrong size on FInterpolatedTransitionCamera");
static_assert(offsetof(FInterpolatedTransitionCamera, CameraTransform) == 0x000000, "Member 'FInterpolatedTransitionCamera::CameraTransform' has a wrong offset!");
static_assert(offsetof(FInterpolatedTransitionCamera, FieldOfView) == 0x000060, "Member 'FInterpolatedTransitionCamera::FieldOfView' has a wrong offset!");

// ScriptStruct FortniteUI.HUDLayoutToolV2_ToastNotificationContent
// 0x0038 (0x0038 - 0x0000)
struct FHUDLayoutToolV2_ToastNotificationContent final
{
public:
	EHUDLayoutToolToasterType                     ToasterType;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TitleText;                                         // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   DescriptionText;                                   // 0x0020(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHUDLayoutToolV2_ToastNotificationContent) == 0x000008, "Wrong alignment on FHUDLayoutToolV2_ToastNotificationContent");
static_assert(sizeof(FHUDLayoutToolV2_ToastNotificationContent) == 0x000038, "Wrong size on FHUDLayoutToolV2_ToastNotificationContent");
static_assert(offsetof(FHUDLayoutToolV2_ToastNotificationContent, ToasterType) == 0x000000, "Member 'FHUDLayoutToolV2_ToastNotificationContent::ToasterType' has a wrong offset!");
static_assert(offsetof(FHUDLayoutToolV2_ToastNotificationContent, TitleText) == 0x000008, "Member 'FHUDLayoutToolV2_ToastNotificationContent::TitleText' has a wrong offset!");
static_assert(offsetof(FHUDLayoutToolV2_ToastNotificationContent, DescriptionText) == 0x000020, "Member 'FHUDLayoutToolV2_ToastNotificationContent::DescriptionText' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemEntryPreviewData
// 0x0008 (0x0008 - 0x0000)
struct FFortItemEntryPreviewData final
{
public:
	int32                                         Quantity;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemInspectionMode                       InspectMode;                                       // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemEntryPreviewData) == 0x000004, "Wrong alignment on FFortItemEntryPreviewData");
static_assert(sizeof(FFortItemEntryPreviewData) == 0x000008, "Wrong size on FFortItemEntryPreviewData");
static_assert(offsetof(FFortItemEntryPreviewData, Quantity) == 0x000000, "Member 'FFortItemEntryPreviewData::Quantity' has a wrong offset!");
static_assert(offsetof(FFortItemEntryPreviewData, InspectMode) == 0x000004, "Member 'FFortItemEntryPreviewData::InspectMode' has a wrong offset!");

// ScriptStruct FortniteUI.MeasuredText
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FMeasuredText final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMeasuredText) == 0x000008, "Wrong alignment on FMeasuredText");
static_assert(sizeof(FMeasuredText) == 0x000030, "Wrong size on FMeasuredText");

// ScriptStruct FortniteUI.AthenaStyleMissionData
// 0x0028 (0x0028 - 0x0000)
struct FAthenaStyleMissionData final
{
public:
	class UFortVariantTokenType*                  StyleDefinition;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortVariantTokenType*>          OptionalAdditionalStyleDefinitions;                // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class UFortQuestItemDefinition*               Mission;                                           // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        OverrideIdleAnimation;                             // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaStyleMissionData) == 0x000008, "Wrong alignment on FAthenaStyleMissionData");
static_assert(sizeof(FAthenaStyleMissionData) == 0x000028, "Wrong size on FAthenaStyleMissionData");
static_assert(offsetof(FAthenaStyleMissionData, StyleDefinition) == 0x000000, "Member 'FAthenaStyleMissionData::StyleDefinition' has a wrong offset!");
static_assert(offsetof(FAthenaStyleMissionData, OptionalAdditionalStyleDefinitions) == 0x000008, "Member 'FAthenaStyleMissionData::OptionalAdditionalStyleDefinitions' has a wrong offset!");
static_assert(offsetof(FAthenaStyleMissionData, Mission) == 0x000018, "Member 'FAthenaStyleMissionData::Mission' has a wrong offset!");
static_assert(offsetof(FAthenaStyleMissionData, OverrideIdleAnimation) == 0x000020, "Member 'FAthenaStyleMissionData::OverrideIdleAnimation' has a wrong offset!");

// ScriptStruct FortniteUI.OfferGroup
// 0x0018 (0x0018 - 0x0000)
struct FOfferGroup final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxNumberToShow;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOfferGroup) == 0x000008, "Wrong alignment on FOfferGroup");
static_assert(sizeof(FOfferGroup) == 0x000018, "Wrong size on FOfferGroup");
static_assert(offsetof(FOfferGroup, Name) == 0x000000, "Member 'FOfferGroup::Name' has a wrong offset!");
static_assert(offsetof(FOfferGroup, MaxNumberToShow) == 0x000010, "Member 'FOfferGroup::MaxNumberToShow' has a wrong offset!");

// ScriptStruct FortniteUI.FortMaterialProgressBarSectionStyle
// 0x0030 (0x0030 - 0x0000)
struct FFortMaterialProgressBarSectionStyle final
{
public:
	bool                                          bGradientBar;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BarParamName;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BarColorOneParamName;                              // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BarColorTwoParamName;                              // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BarColorOne;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BarColorTwo;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMaterialProgressBarSectionStyle) == 0x000004, "Wrong alignment on FFortMaterialProgressBarSectionStyle");
static_assert(sizeof(FFortMaterialProgressBarSectionStyle) == 0x000030, "Wrong size on FFortMaterialProgressBarSectionStyle");
static_assert(offsetof(FFortMaterialProgressBarSectionStyle, bGradientBar) == 0x000000, "Member 'FFortMaterialProgressBarSectionStyle::bGradientBar' has a wrong offset!");
static_assert(offsetof(FFortMaterialProgressBarSectionStyle, BarParamName) == 0x000004, "Member 'FFortMaterialProgressBarSectionStyle::BarParamName' has a wrong offset!");
static_assert(offsetof(FFortMaterialProgressBarSectionStyle, BarColorOneParamName) == 0x000008, "Member 'FFortMaterialProgressBarSectionStyle::BarColorOneParamName' has a wrong offset!");
static_assert(offsetof(FFortMaterialProgressBarSectionStyle, BarColorTwoParamName) == 0x00000C, "Member 'FFortMaterialProgressBarSectionStyle::BarColorTwoParamName' has a wrong offset!");
static_assert(offsetof(FFortMaterialProgressBarSectionStyle, BarColorOne) == 0x000010, "Member 'FFortMaterialProgressBarSectionStyle::BarColorOne' has a wrong offset!");
static_assert(offsetof(FFortMaterialProgressBarSectionStyle, BarColorTwo) == 0x000020, "Member 'FFortMaterialProgressBarSectionStyle::BarColorTwo' has a wrong offset!");

// ScriptStruct FortniteUI.FortFeedbackDropdownCategoryHotfix_Add
// 0x0008 (0x0008 - 0x0000)
struct FFortFeedbackDropdownCategoryHotfix_Add final
{
public:
	class FName                                   ParentInternalName;                                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InternalName;                                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortFeedbackDropdownCategoryHotfix_Add) == 0x000004, "Wrong alignment on FFortFeedbackDropdownCategoryHotfix_Add");
static_assert(sizeof(FFortFeedbackDropdownCategoryHotfix_Add) == 0x000008, "Wrong size on FFortFeedbackDropdownCategoryHotfix_Add");
static_assert(offsetof(FFortFeedbackDropdownCategoryHotfix_Add, ParentInternalName) == 0x000000, "Member 'FFortFeedbackDropdownCategoryHotfix_Add::ParentInternalName' has a wrong offset!");
static_assert(offsetof(FFortFeedbackDropdownCategoryHotfix_Add, InternalName) == 0x000004, "Member 'FFortFeedbackDropdownCategoryHotfix_Add::InternalName' has a wrong offset!");

// ScriptStruct FortniteUI.FortMaterialProgressBarSectionInfo
// 0x0034 (0x0034 - 0x0000)
struct FFortMaterialProgressBarSectionInfo final
{
public:
	struct FFortMaterialProgressBarSectionStyle   SectionStyle;                                      // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Percent;                                           // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMaterialProgressBarSectionInfo) == 0x000004, "Wrong alignment on FFortMaterialProgressBarSectionInfo");
static_assert(sizeof(FFortMaterialProgressBarSectionInfo) == 0x000034, "Wrong size on FFortMaterialProgressBarSectionInfo");
static_assert(offsetof(FFortMaterialProgressBarSectionInfo, SectionStyle) == 0x000000, "Member 'FFortMaterialProgressBarSectionInfo::SectionStyle' has a wrong offset!");
static_assert(offsetof(FFortMaterialProgressBarSectionInfo, Percent) == 0x000030, "Member 'FFortMaterialProgressBarSectionInfo::Percent' has a wrong offset!");

// ScriptStruct FortniteUI.TagVisibility
// 0x0028 (0x0028 - 0x0000)
struct FTagVisibility final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	ETagComparisonType                            ComparisonType;                                    // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              Visibility;                                        // 0x0021(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTagVisibility) == 0x000008, "Wrong alignment on FTagVisibility");
static_assert(sizeof(FTagVisibility) == 0x000028, "Wrong size on FTagVisibility");
static_assert(offsetof(FTagVisibility, Tags) == 0x000000, "Member 'FTagVisibility::Tags' has a wrong offset!");
static_assert(offsetof(FTagVisibility, ComparisonType) == 0x000020, "Member 'FTagVisibility::ComparisonType' has a wrong offset!");
static_assert(offsetof(FTagVisibility, Visibility) == 0x000021, "Member 'FTagVisibility::Visibility' has a wrong offset!");

// ScriptStruct FortniteUI.QuickbarProxySlotIconContainer
// 0x0010 (0x0010 - 0x0000)
struct FQuickbarProxySlotIconContainer final
{
public:
	TArray<class UPaperSprite*>                   SlotIcons;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FQuickbarProxySlotIconContainer) == 0x000008, "Wrong alignment on FQuickbarProxySlotIconContainer");
static_assert(sizeof(FQuickbarProxySlotIconContainer) == 0x000010, "Wrong size on FQuickbarProxySlotIconContainer");
static_assert(offsetof(FQuickbarProxySlotIconContainer, SlotIcons) == 0x000000, "Member 'FQuickbarProxySlotIconContainer::SlotIcons' has a wrong offset!");

// ScriptStruct FortniteUI.IconPicker
// 0x0030 (0x0030 - 0x0000)
struct FIconPicker final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	ETagComparisonType                            ComparisonType;                                    // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperSprite*                           Sprite;                                            // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIconPicker) == 0x000008, "Wrong alignment on FIconPicker");
static_assert(sizeof(FIconPicker) == 0x000030, "Wrong size on FIconPicker");
static_assert(offsetof(FIconPicker, Tags) == 0x000000, "Member 'FIconPicker::Tags' has a wrong offset!");
static_assert(offsetof(FIconPicker, ComparisonType) == 0x000020, "Member 'FIconPicker::ComparisonType' has a wrong offset!");
static_assert(offsetof(FIconPicker, Sprite) == 0x000028, "Member 'FIconPicker::Sprite' has a wrong offset!");

// ScriptStruct FortniteUI.ActionBindingIconPicker
// 0x0018 (0x0018 - 0x0000)
struct FActionBindingIconPicker final
{
public:
	TArray<class FName>                           ActionNames;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UPaperSprite*                           Sprite;                                            // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionBindingIconPicker) == 0x000008, "Wrong alignment on FActionBindingIconPicker");
static_assert(sizeof(FActionBindingIconPicker) == 0x000018, "Wrong size on FActionBindingIconPicker");
static_assert(offsetof(FActionBindingIconPicker, ActionNames) == 0x000000, "Member 'FActionBindingIconPicker::ActionNames' has a wrong offset!");
static_assert(offsetof(FActionBindingIconPicker, Sprite) == 0x000010, "Member 'FActionBindingIconPicker::Sprite' has a wrong offset!");

// ScriptStruct FortniteUI.AthenaSpatialCustomizationCategoryGroup
// 0x0010 (0x0010 - 0x0000)
struct FAthenaSpatialCustomizationCategoryGroup final
{
public:
	TArray<class UAthenaSpatialCustomizationCategoryEntry*> CategoryEntryList;                                 // 0x0000(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaSpatialCustomizationCategoryGroup) == 0x000008, "Wrong alignment on FAthenaSpatialCustomizationCategoryGroup");
static_assert(sizeof(FAthenaSpatialCustomizationCategoryGroup) == 0x000010, "Wrong size on FAthenaSpatialCustomizationCategoryGroup");
static_assert(offsetof(FAthenaSpatialCustomizationCategoryGroup, CategoryEntryList) == 0x000000, "Member 'FAthenaSpatialCustomizationCategoryGroup::CategoryEntryList' has a wrong offset!");

// ScriptStruct FortniteUI.ActionBindingVisibility
// 0x0018 (0x0018 - 0x0000)
struct FActionBindingVisibility final
{
public:
	TArray<class FName>                           ActionNames;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EActionBindingComparisonType                  ComparisonType;                                    // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              Visibility;                                        // 0x0011(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActionBindingVisibility) == 0x000008, "Wrong alignment on FActionBindingVisibility");
static_assert(sizeof(FActionBindingVisibility) == 0x000018, "Wrong size on FActionBindingVisibility");
static_assert(offsetof(FActionBindingVisibility, ActionNames) == 0x000000, "Member 'FActionBindingVisibility::ActionNames' has a wrong offset!");
static_assert(offsetof(FActionBindingVisibility, ComparisonType) == 0x000010, "Member 'FActionBindingVisibility::ComparisonType' has a wrong offset!");
static_assert(offsetof(FActionBindingVisibility, Visibility) == 0x000011, "Member 'FActionBindingVisibility::Visibility' has a wrong offset!");

// ScriptStruct FortniteUI.GameplayMessageVisibility
// 0x0008 (0x0008 - 0x0000)
struct FGameplayMessageVisibility final
{
public:
	struct FEventMessageTag                       EventMessageTag;                                   // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              MessageReceivedVisibility;                         // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              MessageStateClearedVisibility;                     // 0x0005(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayMessageVisibility) == 0x000004, "Wrong alignment on FGameplayMessageVisibility");
static_assert(sizeof(FGameplayMessageVisibility) == 0x000008, "Wrong size on FGameplayMessageVisibility");
static_assert(offsetof(FGameplayMessageVisibility, EventMessageTag) == 0x000000, "Member 'FGameplayMessageVisibility::EventMessageTag' has a wrong offset!");
static_assert(offsetof(FGameplayMessageVisibility, MessageReceivedVisibility) == 0x000004, "Member 'FGameplayMessageVisibility::MessageReceivedVisibility' has a wrong offset!");
static_assert(offsetof(FGameplayMessageVisibility, MessageStateClearedVisibility) == 0x000005, "Member 'FGameplayMessageVisibility::MessageStateClearedVisibility' has a wrong offset!");

// ScriptStruct FortniteUI.FortMobileContextFilter
// 0x0040 (0x0040 - 0x0000)
struct FFortMobileContextFilter final
{
public:
	struct FGameplayTagContainer                  ShownInContexts;                                   // 0x0000(0x0020)(Edit, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  HiddenInContexts;                                  // 0x0020(0x0020)(Edit, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortMobileContextFilter) == 0x000008, "Wrong alignment on FFortMobileContextFilter");
static_assert(sizeof(FFortMobileContextFilter) == 0x000040, "Wrong size on FFortMobileContextFilter");
static_assert(offsetof(FFortMobileContextFilter, ShownInContexts) == 0x000000, "Member 'FFortMobileContextFilter::ShownInContexts' has a wrong offset!");
static_assert(offsetof(FFortMobileContextFilter, HiddenInContexts) == 0x000020, "Member 'FFortMobileContextFilter::HiddenInContexts' has a wrong offset!");

// ScriptStruct FortniteUI.FortMobileHUDContextLayout
// 0x0020 (0x0020 - 0x0000)
struct FFortMobileHUDContextLayout final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortMobileHUDContextModel*             HUDContextModel;                                   // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMobileHUDContextLayout) == 0x000008, "Wrong alignment on FFortMobileHUDContextLayout");
static_assert(sizeof(FFortMobileHUDContextLayout) == 0x000020, "Wrong size on FFortMobileHUDContextLayout");
static_assert(offsetof(FFortMobileHUDContextLayout, HUDContextModel) == 0x000010, "Member 'FFortMobileHUDContextLayout::HUDContextModel' has a wrong offset!");

// ScriptStruct FortniteUI.TDMTeamScoreData
// 0x0020 (0x0020 - 0x0000)
struct FTDMTeamScoreData final
{
public:
	class FText                                   CurrScoreText;                                     // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         CurrScorePercent;                                  // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrScore;                                         // 0x001C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTDMTeamScoreData) == 0x000008, "Wrong alignment on FTDMTeamScoreData");
static_assert(sizeof(FTDMTeamScoreData) == 0x000020, "Wrong size on FTDMTeamScoreData");
static_assert(offsetof(FTDMTeamScoreData, CurrScoreText) == 0x000000, "Member 'FTDMTeamScoreData::CurrScoreText' has a wrong offset!");
static_assert(offsetof(FTDMTeamScoreData, CurrScorePercent) == 0x000018, "Member 'FTDMTeamScoreData::CurrScorePercent' has a wrong offset!");
static_assert(offsetof(FTDMTeamScoreData, CurrScore) == 0x00001C, "Member 'FTDMTeamScoreData::CurrScore' has a wrong offset!");

// ScriptStruct FortniteUI.FortMobileHUDContextModelExtension
// 0x0028 (0x0028 - 0x0000)
struct FFortMobileHUDContextModelExtension final
{
public:
	struct FGameplayTag                           ContextLayoutTag;                                  // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  UseableHUDWidgetTags;                              // 0x0008(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMobileHUDContextModelExtension) == 0x000008, "Wrong alignment on FFortMobileHUDContextModelExtension");
static_assert(sizeof(FFortMobileHUDContextModelExtension) == 0x000028, "Wrong size on FFortMobileHUDContextModelExtension");
static_assert(offsetof(FFortMobileHUDContextModelExtension, ContextLayoutTag) == 0x000000, "Member 'FFortMobileHUDContextModelExtension::ContextLayoutTag' has a wrong offset!");
static_assert(offsetof(FFortMobileHUDContextModelExtension, UseableHUDWidgetTags) == 0x000008, "Member 'FFortMobileHUDContextModelExtension::UseableHUDWidgetTags' has a wrong offset!");

// ScriptStruct FortniteUI.FortMobileHUDLayoutProfile
// 0x0030 (0x0030 - 0x0000)
struct FFortMobileHUDLayoutProfile final
{
public:
	class FText                                   ProfileName;                                       // 0x0000(0x0018)(Transient, NativeAccessSpecifierPrivate)
	TArray<struct FFortMobileHUDContextLayout>    ContextLayouts;                                    // 0x0018(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMobileHUDLayoutProfile) == 0x000008, "Wrong alignment on FFortMobileHUDLayoutProfile");
static_assert(sizeof(FFortMobileHUDLayoutProfile) == 0x000030, "Wrong size on FFortMobileHUDLayoutProfile");
static_assert(offsetof(FFortMobileHUDLayoutProfile, ProfileName) == 0x000000, "Member 'FFortMobileHUDLayoutProfile::ProfileName' has a wrong offset!");
static_assert(offsetof(FFortMobileHUDLayoutProfile, ContextLayouts) == 0x000018, "Member 'FFortMobileHUDLayoutProfile::ContextLayouts' has a wrong offset!");

// ScriptStruct FortniteUI.FortPrioritizedWidgetData
// 0x0002 (0x0002 - 0x0000)
struct FFortPrioritizedWidgetData final
{
public:
	EFortPrioritizedWidgetPriority                Priority;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortPrioritizedWidgetContestedBehavior       WhenContesting;                                    // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPrioritizedWidgetData) == 0x000001, "Wrong alignment on FFortPrioritizedWidgetData");
static_assert(sizeof(FFortPrioritizedWidgetData) == 0x000002, "Wrong size on FFortPrioritizedWidgetData");
static_assert(offsetof(FFortPrioritizedWidgetData, Priority) == 0x000000, "Member 'FFortPrioritizedWidgetData::Priority' has a wrong offset!");
static_assert(offsetof(FFortPrioritizedWidgetData, WhenContesting) == 0x000001, "Member 'FFortPrioritizedWidgetData::WhenContesting' has a wrong offset!");

// ScriptStruct FortniteUI.UserAction
// 0x0018 (0x0018 - 0x0000)
struct FUserAction
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ActionName;                                        // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserAction) == 0x000008, "Wrong alignment on FUserAction");
static_assert(sizeof(FUserAction) == 0x000018, "Wrong size on FUserAction");
static_assert(offsetof(FUserAction, ActionName) == 0x000008, "Member 'FUserAction::ActionName' has a wrong offset!");

// ScriptStruct FortniteUI.UserGenericAction
// 0x0040 (0x0058 - 0x0018)
struct FUserGenericAction final : public FUserAction
{
public:
	struct FFortMobileHUDProfileBase              ActiveProfile;                                     // 0x0018(0x0040)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserGenericAction) == 0x000008, "Wrong alignment on FUserGenericAction");
static_assert(sizeof(FUserGenericAction) == 0x000058, "Wrong size on FUserGenericAction");
static_assert(offsetof(FUserGenericAction, ActiveProfile) == 0x000018, "Member 'FUserGenericAction::ActiveProfile' has a wrong offset!");

// ScriptStruct FortniteUI.UserRenameAction
// 0x0020 (0x0038 - 0x0018)
struct FUserRenameAction final : public FUserAction
{
public:
	class FString                                 PreviousName;                                      // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewName;                                           // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserRenameAction) == 0x000008, "Wrong alignment on FUserRenameAction");
static_assert(sizeof(FUserRenameAction) == 0x000038, "Wrong size on FUserRenameAction");
static_assert(offsetof(FUserRenameAction, PreviousName) == 0x000018, "Member 'FUserRenameAction::PreviousName' has a wrong offset!");
static_assert(offsetof(FUserRenameAction, NewName) == 0x000028, "Member 'FUserRenameAction::NewName' has a wrong offset!");

// ScriptStruct FortniteUI.UserSelectProfileAction
// 0x0080 (0x0098 - 0x0018)
struct FUserSelectProfileAction final : public FUserAction
{
public:
	struct FFortMobileHUDProfileBase              PreviousProfile;                                   // 0x0018(0x0040)(NativeAccessSpecifierPublic)
	struct FFortMobileHUDProfileBase              NewProfile;                                        // 0x0058(0x0040)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserSelectProfileAction) == 0x000008, "Wrong alignment on FUserSelectProfileAction");
static_assert(sizeof(FUserSelectProfileAction) == 0x000098, "Wrong size on FUserSelectProfileAction");
static_assert(offsetof(FUserSelectProfileAction, PreviousProfile) == 0x000018, "Member 'FUserSelectProfileAction::PreviousProfile' has a wrong offset!");
static_assert(offsetof(FUserSelectProfileAction, NewProfile) == 0x000058, "Member 'FUserSelectProfileAction::NewProfile' has a wrong offset!");

// ScriptStruct FortniteUI.HUDWidgetRegistryEntry
// 0x0040 (0x0040 - 0x0000)
struct FHUDWidgetRegistryEntry final
{
public:
	struct FGameplayTag                           HUDWidgetTag;                                      // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMandatory;                                      // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MandatoryOnScreenPercent;                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaximumAmountOfInstances;                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ZOrder;                                            // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortMobileHUDElement>      HUDWidgetClass;                                    // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortMobileHUDElementProxy> HUDWidgetProxyClass;                               // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UHUDLayoutToolV2_WidgetPreview> HUDWidgetPreviewClass;                             // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortMobileHUDWidgetCustomPropertyModel*> CustomPropertyModels;                              // 0x0030(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHUDWidgetRegistryEntry) == 0x000008, "Wrong alignment on FHUDWidgetRegistryEntry");
static_assert(sizeof(FHUDWidgetRegistryEntry) == 0x000040, "Wrong size on FHUDWidgetRegistryEntry");
static_assert(offsetof(FHUDWidgetRegistryEntry, HUDWidgetTag) == 0x000000, "Member 'FHUDWidgetRegistryEntry::HUDWidgetTag' has a wrong offset!");
static_assert(offsetof(FHUDWidgetRegistryEntry, bIsMandatory) == 0x000004, "Member 'FHUDWidgetRegistryEntry::bIsMandatory' has a wrong offset!");
static_assert(offsetof(FHUDWidgetRegistryEntry, MandatoryOnScreenPercent) == 0x000008, "Member 'FHUDWidgetRegistryEntry::MandatoryOnScreenPercent' has a wrong offset!");
static_assert(offsetof(FHUDWidgetRegistryEntry, MaximumAmountOfInstances) == 0x00000C, "Member 'FHUDWidgetRegistryEntry::MaximumAmountOfInstances' has a wrong offset!");
static_assert(offsetof(FHUDWidgetRegistryEntry, ZOrder) == 0x000010, "Member 'FHUDWidgetRegistryEntry::ZOrder' has a wrong offset!");
static_assert(offsetof(FHUDWidgetRegistryEntry, HUDWidgetClass) == 0x000018, "Member 'FHUDWidgetRegistryEntry::HUDWidgetClass' has a wrong offset!");
static_assert(offsetof(FHUDWidgetRegistryEntry, HUDWidgetProxyClass) == 0x000020, "Member 'FHUDWidgetRegistryEntry::HUDWidgetProxyClass' has a wrong offset!");
static_assert(offsetof(FHUDWidgetRegistryEntry, HUDWidgetPreviewClass) == 0x000028, "Member 'FHUDWidgetRegistryEntry::HUDWidgetPreviewClass' has a wrong offset!");
static_assert(offsetof(FHUDWidgetRegistryEntry, CustomPropertyModels) == 0x000030, "Member 'FHUDWidgetRegistryEntry::CustomPropertyModels' has a wrong offset!");

// ScriptStruct FortniteUI.HUDWidgetBehaviorRegistryEntry
// 0x0010 (0x0010 - 0x0000)
struct FHUDWidgetBehaviorRegistryEntry final
{
public:
	struct FGameplayTag                           HUDWidgetBehaviorTag;                              // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HUDWidgetOverrideTag;                              // 0x0004(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UHUDWidgetBehavior>         HUDWidgetBehaviorClass;                            // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHUDWidgetBehaviorRegistryEntry) == 0x000008, "Wrong alignment on FHUDWidgetBehaviorRegistryEntry");
static_assert(sizeof(FHUDWidgetBehaviorRegistryEntry) == 0x000010, "Wrong size on FHUDWidgetBehaviorRegistryEntry");
static_assert(offsetof(FHUDWidgetBehaviorRegistryEntry, HUDWidgetBehaviorTag) == 0x000000, "Member 'FHUDWidgetBehaviorRegistryEntry::HUDWidgetBehaviorTag' has a wrong offset!");
static_assert(offsetof(FHUDWidgetBehaviorRegistryEntry, HUDWidgetOverrideTag) == 0x000004, "Member 'FHUDWidgetBehaviorRegistryEntry::HUDWidgetOverrideTag' has a wrong offset!");
static_assert(offsetof(FHUDWidgetBehaviorRegistryEntry, HUDWidgetBehaviorClass) == 0x000008, "Member 'FHUDWidgetBehaviorRegistryEntry::HUDWidgetBehaviorClass' has a wrong offset!");

// ScriptStruct FortniteUI.HUDWidgetSchemaInitializer
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FHUDWidgetSchemaInitializer final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHUDWidgetSchemaInitializer) == 0x000008, "Wrong alignment on FHUDWidgetSchemaInitializer");
static_assert(sizeof(FHUDWidgetSchemaInitializer) == 0x000010, "Wrong size on FHUDWidgetSchemaInitializer");

// ScriptStruct FortniteUI.HUDWidgetBehaviorExtensionsRegistryEntry
// 0x0018 (0x0018 - 0x0000)
struct FHUDWidgetBehaviorExtensionsRegistryEntry final
{
public:
	struct FGameplayTag                           HUDWidgetBehaviorTag;                              // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UFortMobileHUDWidgetBehaviorExtension>> HUDWidgetBehaviorExtensions;                       // 0x0008(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHUDWidgetBehaviorExtensionsRegistryEntry) == 0x000008, "Wrong alignment on FHUDWidgetBehaviorExtensionsRegistryEntry");
static_assert(sizeof(FHUDWidgetBehaviorExtensionsRegistryEntry) == 0x000018, "Wrong size on FHUDWidgetBehaviorExtensionsRegistryEntry");
static_assert(offsetof(FHUDWidgetBehaviorExtensionsRegistryEntry, HUDWidgetBehaviorTag) == 0x000000, "Member 'FHUDWidgetBehaviorExtensionsRegistryEntry::HUDWidgetBehaviorTag' has a wrong offset!");
static_assert(offsetof(FHUDWidgetBehaviorExtensionsRegistryEntry, HUDWidgetBehaviorExtensions) == 0x000008, "Member 'FHUDWidgetBehaviorExtensionsRegistryEntry::HUDWidgetBehaviorExtensions' has a wrong offset!");

// ScriptStruct FortniteUI.FortModalContainerSizeEntry
// 0x001C (0x001C - 0x0000)
struct FFortModalContainerSizeEntry final
{
public:
	float                                         AbsoluteWidth;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TopPercent;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MiddlePercent;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BottomPercent;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalPadding;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizontalPadding;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContentPadding;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortModalContainerSizeEntry) == 0x000004, "Wrong alignment on FFortModalContainerSizeEntry");
static_assert(sizeof(FFortModalContainerSizeEntry) == 0x00001C, "Wrong size on FFortModalContainerSizeEntry");
static_assert(offsetof(FFortModalContainerSizeEntry, AbsoluteWidth) == 0x000000, "Member 'FFortModalContainerSizeEntry::AbsoluteWidth' has a wrong offset!");
static_assert(offsetof(FFortModalContainerSizeEntry, TopPercent) == 0x000004, "Member 'FFortModalContainerSizeEntry::TopPercent' has a wrong offset!");
static_assert(offsetof(FFortModalContainerSizeEntry, MiddlePercent) == 0x000008, "Member 'FFortModalContainerSizeEntry::MiddlePercent' has a wrong offset!");
static_assert(offsetof(FFortModalContainerSizeEntry, BottomPercent) == 0x00000C, "Member 'FFortModalContainerSizeEntry::BottomPercent' has a wrong offset!");
static_assert(offsetof(FFortModalContainerSizeEntry, VerticalPadding) == 0x000010, "Member 'FFortModalContainerSizeEntry::VerticalPadding' has a wrong offset!");
static_assert(offsetof(FFortModalContainerSizeEntry, HorizontalPadding) == 0x000014, "Member 'FFortModalContainerSizeEntry::HorizontalPadding' has a wrong offset!");
static_assert(offsetof(FFortModalContainerSizeEntry, ContentPadding) == 0x000018, "Member 'FFortModalContainerSizeEntry::ContentPadding' has a wrong offset!");

// ScriptStruct FortniteUI.FortMtxDetailsAttribute
// 0x0030 (0x0030 - 0x0000)
struct FFortMtxDetailsAttribute final
{
public:
	class FText                                   Name;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Value;                                             // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMtxDetailsAttribute) == 0x000008, "Wrong alignment on FFortMtxDetailsAttribute");
static_assert(sizeof(FFortMtxDetailsAttribute) == 0x000030, "Wrong size on FFortMtxDetailsAttribute");
static_assert(offsetof(FFortMtxDetailsAttribute, Name) == 0x000000, "Member 'FFortMtxDetailsAttribute::Name' has a wrong offset!");
static_assert(offsetof(FFortMtxDetailsAttribute, Value) == 0x000018, "Member 'FFortMtxDetailsAttribute::Value' has a wrong offset!");

// ScriptStruct FortniteUI.FortMtxDescriptionAndDetails
// 0x0028 (0x0028 - 0x0000)
struct FFortMtxDescriptionAndDetails final
{
public:
	class FText                                   ShortDescription;                                  // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FFortMtxDetailsAttribute>       AssociatedDetailsAttributes;                       // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMtxDescriptionAndDetails) == 0x000008, "Wrong alignment on FFortMtxDescriptionAndDetails");
static_assert(sizeof(FFortMtxDescriptionAndDetails) == 0x000028, "Wrong size on FFortMtxDescriptionAndDetails");
static_assert(offsetof(FFortMtxDescriptionAndDetails, ShortDescription) == 0x000000, "Member 'FFortMtxDescriptionAndDetails::ShortDescription' has a wrong offset!");
static_assert(offsetof(FFortMtxDescriptionAndDetails, AssociatedDetailsAttributes) == 0x000018, "Member 'FFortMtxDescriptionAndDetails::AssociatedDetailsAttributes' has a wrong offset!");

// ScriptStruct FortniteUI.FortMtxGradient
// 0x0020 (0x0020 - 0x0000)
struct FFortMtxGradient final
{
public:
	struct FLinearColor                           Start;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Stop;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMtxGradient) == 0x000004, "Wrong alignment on FFortMtxGradient");
static_assert(sizeof(FFortMtxGradient) == 0x000020, "Wrong size on FFortMtxGradient");
static_assert(offsetof(FFortMtxGradient, Start) == 0x000000, "Member 'FFortMtxGradient::Start' has a wrong offset!");
static_assert(offsetof(FFortMtxGradient, Stop) == 0x000010, "Member 'FFortMtxGradient::Stop' has a wrong offset!");

// ScriptStruct FortniteUI.FortUIPerkTier
// 0x0018 (0x0018 - 0x0000)
struct FFortUIPerkTier final
{
public:
	class UFortHeroSpecialization*                HeroSpecialization;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortHero*                              CurrentHero;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemTier                                 Tier;                                              // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUpgrade;                                        // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEvolution;                                      // 0x0012(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortUIPerkTier) == 0x000008, "Wrong alignment on FFortUIPerkTier");
static_assert(sizeof(FFortUIPerkTier) == 0x000018, "Wrong size on FFortUIPerkTier");
static_assert(offsetof(FFortUIPerkTier, HeroSpecialization) == 0x000000, "Member 'FFortUIPerkTier::HeroSpecialization' has a wrong offset!");
static_assert(offsetof(FFortUIPerkTier, CurrentHero) == 0x000008, "Member 'FFortUIPerkTier::CurrentHero' has a wrong offset!");
static_assert(offsetof(FFortUIPerkTier, Tier) == 0x000010, "Member 'FFortUIPerkTier::Tier' has a wrong offset!");
static_assert(offsetof(FFortUIPerkTier, bIsUpgrade) == 0x000011, "Member 'FFortUIPerkTier::bIsUpgrade' has a wrong offset!");
static_assert(offsetof(FFortUIPerkTier, bIsEvolution) == 0x000012, "Member 'FFortUIPerkTier::bIsEvolution' has a wrong offset!");

// ScriptStruct FortniteUI.FortUIPerk
// 0x0098 (0x0098 - 0x0000)
struct FFortUIPerk final
{
public:
	struct FFortSpecializationSlot                SpecializationSlot;                                // 0x0000(0x0088)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UFortHero*                              Hero;                                              // 0x0088(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemTier                                 Tier;                                              // 0x0090(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortSupportBonusType                         SupportBonusType;                                  // 0x0091(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTierPerk;                                       // 0x0092(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUpgrade;                                        // 0x0093(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEvolution;                                      // 0x0094(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEvolutionBranch;                                // 0x0095(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_96[0x2];                                       // 0x0096(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortUIPerk) == 0x000008, "Wrong alignment on FFortUIPerk");
static_assert(sizeof(FFortUIPerk) == 0x000098, "Wrong size on FFortUIPerk");
static_assert(offsetof(FFortUIPerk, SpecializationSlot) == 0x000000, "Member 'FFortUIPerk::SpecializationSlot' has a wrong offset!");
static_assert(offsetof(FFortUIPerk, Hero) == 0x000088, "Member 'FFortUIPerk::Hero' has a wrong offset!");
static_assert(offsetof(FFortUIPerk, Tier) == 0x000090, "Member 'FFortUIPerk::Tier' has a wrong offset!");
static_assert(offsetof(FFortUIPerk, SupportBonusType) == 0x000091, "Member 'FFortUIPerk::SupportBonusType' has a wrong offset!");
static_assert(offsetof(FFortUIPerk, bIsTierPerk) == 0x000092, "Member 'FFortUIPerk::bIsTierPerk' has a wrong offset!");
static_assert(offsetof(FFortUIPerk, bIsUpgrade) == 0x000093, "Member 'FFortUIPerk::bIsUpgrade' has a wrong offset!");
static_assert(offsetof(FFortUIPerk, bIsEvolution) == 0x000094, "Member 'FFortUIPerk::bIsEvolution' has a wrong offset!");
static_assert(offsetof(FFortUIPerk, bIsEvolutionBranch) == 0x000095, "Member 'FFortUIPerk::bIsEvolutionBranch' has a wrong offset!");

// ScriptStruct FortniteUI.FortPhoenixLevelProgressionRewards
// 0x0020 (0x0020 - 0x0000)
struct FFortPhoenixLevelProgressionRewards final
{
public:
	int32                                         NextRewardLevel;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemQuantityPair                  NextReward;                                        // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         NextMajorRewardLevel;                              // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemQuantityPair                  NextMajorReward;                                   // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPhoenixLevelProgressionRewards) == 0x000004, "Wrong alignment on FFortPhoenixLevelProgressionRewards");
static_assert(sizeof(FFortPhoenixLevelProgressionRewards) == 0x000020, "Wrong size on FFortPhoenixLevelProgressionRewards");
static_assert(offsetof(FFortPhoenixLevelProgressionRewards, NextRewardLevel) == 0x000000, "Member 'FFortPhoenixLevelProgressionRewards::NextRewardLevel' has a wrong offset!");
static_assert(offsetof(FFortPhoenixLevelProgressionRewards, NextReward) == 0x000004, "Member 'FFortPhoenixLevelProgressionRewards::NextReward' has a wrong offset!");
static_assert(offsetof(FFortPhoenixLevelProgressionRewards, NextMajorRewardLevel) == 0x000010, "Member 'FFortPhoenixLevelProgressionRewards::NextMajorRewardLevel' has a wrong offset!");
static_assert(offsetof(FFortPhoenixLevelProgressionRewards, NextMajorReward) == 0x000014, "Member 'FFortPhoenixLevelProgressionRewards::NextMajorReward' has a wrong offset!");

// ScriptStruct FortniteUI.FortPickerTemporaryWheelItem
// 0x0020 (0x0020 - 0x0000)
struct FFortPickerTemporaryWheelItem final
{
public:
	class FText                                   LabelOverride;                                     // 0x0000(0x0018)(NativeAccessSpecifierPublic)
	class UFortItemDefinition*                    Item;                                              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPickerTemporaryWheelItem) == 0x000008, "Wrong alignment on FFortPickerTemporaryWheelItem");
static_assert(sizeof(FFortPickerTemporaryWheelItem) == 0x000020, "Wrong size on FFortPickerTemporaryWheelItem");
static_assert(offsetof(FFortPickerTemporaryWheelItem, LabelOverride) == 0x000000, "Member 'FFortPickerTemporaryWheelItem::LabelOverride' has a wrong offset!");
static_assert(offsetof(FFortPickerTemporaryWheelItem, Item) == 0x000018, "Member 'FFortPickerTemporaryWheelItem::Item' has a wrong offset!");

// ScriptStruct FortniteUI.FortPickerTemporaryWheel
// 0x0030 (0x0030 - 0x0000)
struct FFortPickerTemporaryWheel final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortPickerTemporaryWheelItem>  Items;                                             // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPickerTemporaryWheel) == 0x000008, "Wrong alignment on FFortPickerTemporaryWheel");
static_assert(sizeof(FFortPickerTemporaryWheel) == 0x000030, "Wrong size on FFortPickerTemporaryWheel");
static_assert(offsetof(FFortPickerTemporaryWheel, Items) == 0x000020, "Member 'FFortPickerTemporaryWheel::Items' has a wrong offset!");

// ScriptStruct FortniteUI.TrackedTrapTimeAndCount
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FTrackedTrapTimeAndCount final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTrackedTrapTimeAndCount) == 0x000004, "Wrong alignment on FTrackedTrapTimeAndCount");
static_assert(sizeof(FTrackedTrapTimeAndCount) == 0x000008, "Wrong size on FTrackedTrapTimeAndCount");

// ScriptStruct FortniteUI.RadialOptionData
// 0x0110 (0x0110 - 0x0000)
#pragma pack(push, 0x1)
struct alignas(0x10) FRadialOptionData
{
public:
	class FText                                   Label;                                             // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Brush;                                             // 0x0020(0x00C0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              SoftIcon;                                          // 0x00E0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
#pragma pack(pop)
static_assert(alignof(FRadialOptionData) == 0x000010, "Wrong alignment on FRadialOptionData");
static_assert(sizeof(FRadialOptionData) == 0x000110, "Wrong size on FRadialOptionData");
static_assert(offsetof(FRadialOptionData, Label) == 0x000000, "Member 'FRadialOptionData::Label' has a wrong offset!");
static_assert(offsetof(FRadialOptionData, Brush) == 0x000020, "Member 'FRadialOptionData::Brush' has a wrong offset!");
static_assert(offsetof(FRadialOptionData, SoftIcon) == 0x0000E0, "Member 'FRadialOptionData::SoftIcon' has a wrong offset!");

// ScriptStruct FortniteUI.BuildingCategoryOptionData
// 0x0000 (0x0110 - 0x0110)
struct FBuildingCategoryOptionData final : public FRadialOptionData
{
public:
	EFortBuildingType                             BuildingType;                                      // 0x0108(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingCategoryOptionData) == 0x000010, "Wrong alignment on FBuildingCategoryOptionData");
static_assert(sizeof(FBuildingCategoryOptionData) == 0x000110, "Wrong size on FBuildingCategoryOptionData");
static_assert(offsetof(FBuildingCategoryOptionData, BuildingType) == 0x000108, "Member 'FBuildingCategoryOptionData::BuildingType' has a wrong offset!");

// ScriptStruct FortniteUI.BuildingOptionData
// 0x0010 (0x0120 - 0x0110)
struct FBuildingOptionData final : public FRadialOptionData
{
public:
	class FString                                 ClassSuffix;                                       // 0x0108(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClassMirrored;                                     // 0x0118(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingOptionData) == 0x000010, "Wrong alignment on FBuildingOptionData");
static_assert(sizeof(FBuildingOptionData) == 0x000120, "Wrong size on FBuildingOptionData");
static_assert(offsetof(FBuildingOptionData, ClassSuffix) == 0x000108, "Member 'FBuildingOptionData::ClassSuffix' has a wrong offset!");
static_assert(offsetof(FBuildingOptionData, ClassMirrored) == 0x000118, "Member 'FBuildingOptionData::ClassMirrored' has a wrong offset!");

// ScriptStruct FortniteUI.ItemCategoryOptionData
// 0x0010 (0x0120 - 0x0110)
struct FItemCategoryOptionData final : public FRadialOptionData
{
public:
	class FString                                 TemplatePrefix;                                    // 0x0108(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBuildingAttachmentType                       BuildingAttachmentType;                            // 0x0118(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemCategoryOptionData) == 0x000010, "Wrong alignment on FItemCategoryOptionData");
static_assert(sizeof(FItemCategoryOptionData) == 0x000120, "Wrong size on FItemCategoryOptionData");
static_assert(offsetof(FItemCategoryOptionData, TemplatePrefix) == 0x000108, "Member 'FItemCategoryOptionData::TemplatePrefix' has a wrong offset!");
static_assert(offsetof(FItemCategoryOptionData, BuildingAttachmentType) == 0x000118, "Member 'FItemCategoryOptionData::BuildingAttachmentType' has a wrong offset!");

// ScriptStruct FortniteUI.ChatOptionData
// 0x0010 (0x0120 - 0x0110)
struct FChatOptionData final : public FRadialOptionData
{
public:
	class FText                                   ChatText;                                          // 0x0108(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChatOptionData) == 0x000010, "Wrong alignment on FChatOptionData");
static_assert(sizeof(FChatOptionData) == 0x000120, "Wrong size on FChatOptionData");
static_assert(offsetof(FChatOptionData, ChatText) == 0x000108, "Member 'FChatOptionData::ChatText' has a wrong offset!");

// ScriptStruct FortniteUI.SquadChatOptionData
// 0x0010 (0x0120 - 0x0110)
struct FSquadChatOptionData final : public FRadialOptionData
{
public:
	class FText                                   ChatText;                                          // 0x0108(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSquadChatOptionData) == 0x000010, "Wrong alignment on FSquadChatOptionData");
static_assert(sizeof(FSquadChatOptionData) == 0x000120, "Wrong size on FSquadChatOptionData");
static_assert(offsetof(FSquadChatOptionData, ChatText) == 0x000108, "Member 'FSquadChatOptionData::ChatText' has a wrong offset!");

// ScriptStruct FortniteUI.MapNoteOptionData
// 0x0010 (0x0120 - 0x0110)
struct FMapNoteOptionData final : public FRadialOptionData
{
public:
	class FText                                   MapNoteText;                                       // 0x0108(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMapNoteOptionData) == 0x000010, "Wrong alignment on FMapNoteOptionData");
static_assert(sizeof(FMapNoteOptionData) == 0x000120, "Wrong size on FMapNoteOptionData");
static_assert(offsetof(FMapNoteOptionData, MapNoteText) == 0x000108, "Member 'FMapNoteOptionData::MapNoteText' has a wrong offset!");

// ScriptStruct FortniteUI.EmoteOptionData
// 0x0000 (0x0110 - 0x0110)
struct FEmoteOptionData final : public FRadialOptionData
{
public:
	class FName                                   EmoteCommand;                                      // 0x0108(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEmoteOptionData) == 0x000010, "Wrong alignment on FEmoteOptionData");
static_assert(sizeof(FEmoteOptionData) == 0x000110, "Wrong size on FEmoteOptionData");
static_assert(offsetof(FEmoteOptionData, EmoteCommand) == 0x000108, "Member 'FEmoteOptionData::EmoteCommand' has a wrong offset!");

// ScriptStruct FortniteUI.ItemDefOptionData
// 0x0000 (0x0110 - 0x0110)
struct FItemDefOptionData final : public FRadialOptionData
{
public:
	class UObject*                                ItemDef;                                           // 0x0108(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemDefOptionData) == 0x000010, "Wrong alignment on FItemDefOptionData");
static_assert(sizeof(FItemDefOptionData) == 0x000110, "Wrong size on FItemDefOptionData");
static_assert(offsetof(FItemDefOptionData, ItemDef) == 0x000108, "Member 'FItemDefOptionData::ItemDef' has a wrong offset!");

// ScriptStruct FortniteUI.SquadQuickChatOptionData
// 0x0010 (0x0120 - 0x0110)
struct FSquadQuickChatOptionData final : public FRadialOptionData
{
public:
	struct FAthenaQuickChatActiveEntry            ChatEntry;                                         // 0x0108(0x0014)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSquadQuickChatOptionData) == 0x000010, "Wrong alignment on FSquadQuickChatOptionData");
static_assert(sizeof(FSquadQuickChatOptionData) == 0x000120, "Wrong size on FSquadQuickChatOptionData");
static_assert(offsetof(FSquadQuickChatOptionData, ChatEntry) == 0x000108, "Member 'FSquadQuickChatOptionData::ChatEntry' has a wrong offset!");
static_assert(offsetof(FSquadQuickChatOptionData, bEnabled) == 0x00011C, "Member 'FSquadQuickChatOptionData::bEnabled' has a wrong offset!");

// ScriptStruct FortniteUI.FortHealthyGamingData
// 0x0088 (0x0090 - 0x0008)
struct FFortHealthyGamingData final : public FTableRowBase
{
public:
	float                                         HealthWarningToastInterval;                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   HealthWarningToastDescriptionFormat;               // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   HealthWarningScreenText;                           // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   GameplayRestrictionText;                           // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         GameplayRestrictionWarningTimeOffset;              // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   AntiAddictionTotalDescriptionFormat;               // 0x0060(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bUsePlayerTimeLimitSystem;                         // 0x0078(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UTexture2D>>      RatingIcons;                                       // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortHealthyGamingData) == 0x000008, "Wrong alignment on FFortHealthyGamingData");
static_assert(sizeof(FFortHealthyGamingData) == 0x000090, "Wrong size on FFortHealthyGamingData");
static_assert(offsetof(FFortHealthyGamingData, HealthWarningToastInterval) == 0x000008, "Member 'FFortHealthyGamingData::HealthWarningToastInterval' has a wrong offset!");
static_assert(offsetof(FFortHealthyGamingData, HealthWarningToastDescriptionFormat) == 0x000010, "Member 'FFortHealthyGamingData::HealthWarningToastDescriptionFormat' has a wrong offset!");
static_assert(offsetof(FFortHealthyGamingData, HealthWarningScreenText) == 0x000028, "Member 'FFortHealthyGamingData::HealthWarningScreenText' has a wrong offset!");
static_assert(offsetof(FFortHealthyGamingData, GameplayRestrictionText) == 0x000040, "Member 'FFortHealthyGamingData::GameplayRestrictionText' has a wrong offset!");
static_assert(offsetof(FFortHealthyGamingData, GameplayRestrictionWarningTimeOffset) == 0x000058, "Member 'FFortHealthyGamingData::GameplayRestrictionWarningTimeOffset' has a wrong offset!");
static_assert(offsetof(FFortHealthyGamingData, AntiAddictionTotalDescriptionFormat) == 0x000060, "Member 'FFortHealthyGamingData::AntiAddictionTotalDescriptionFormat' has a wrong offset!");
static_assert(offsetof(FFortHealthyGamingData, bUsePlayerTimeLimitSystem) == 0x000078, "Member 'FFortHealthyGamingData::bUsePlayerTimeLimitSystem' has a wrong offset!");
static_assert(offsetof(FFortHealthyGamingData, RatingIcons) == 0x000080, "Member 'FFortHealthyGamingData::RatingIcons' has a wrong offset!");

// ScriptStruct FortniteUI.ProgressiveStageItemInfo
// 0x0070 (0x0070 - 0x0000)
struct FProgressiveStageItemInfo final
{
public:
	TArray<class UFortVariantTokenType*>          VariantTokens;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   OverrideName;                                      // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 TileMaterial;                                      // 0x0038(0x0028)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHidden;                                           // 0x0060(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowPreviewStyles;                               // 0x0061(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocked;                                         // 0x0062(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_63[0x1];                                       // 0x0063(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AdditionalMonthsRequired;                          // 0x0064(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageIndex;                                        // 0x0068(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProgressiveStageItemInfo) == 0x000008, "Wrong alignment on FProgressiveStageItemInfo");
static_assert(sizeof(FProgressiveStageItemInfo) == 0x000070, "Wrong size on FProgressiveStageItemInfo");
static_assert(offsetof(FProgressiveStageItemInfo, VariantTokens) == 0x000000, "Member 'FProgressiveStageItemInfo::VariantTokens' has a wrong offset!");
static_assert(offsetof(FProgressiveStageItemInfo, OverrideName) == 0x000020, "Member 'FProgressiveStageItemInfo::OverrideName' has a wrong offset!");
static_assert(offsetof(FProgressiveStageItemInfo, TileMaterial) == 0x000038, "Member 'FProgressiveStageItemInfo::TileMaterial' has a wrong offset!");
static_assert(offsetof(FProgressiveStageItemInfo, bHidden) == 0x000060, "Member 'FProgressiveStageItemInfo::bHidden' has a wrong offset!");
static_assert(offsetof(FProgressiveStageItemInfo, bAllowPreviewStyles) == 0x000061, "Member 'FProgressiveStageItemInfo::bAllowPreviewStyles' has a wrong offset!");
static_assert(offsetof(FProgressiveStageItemInfo, bIsLocked) == 0x000062, "Member 'FProgressiveStageItemInfo::bIsLocked' has a wrong offset!");
static_assert(offsetof(FProgressiveStageItemInfo, AdditionalMonthsRequired) == 0x000064, "Member 'FProgressiveStageItemInfo::AdditionalMonthsRequired' has a wrong offset!");
static_assert(offsetof(FProgressiveStageItemInfo, StageIndex) == 0x000068, "Member 'FProgressiveStageItemInfo::StageIndex' has a wrong offset!");

// ScriptStruct FortniteUI.FortDisplayAttribute
// 0x0088 (0x0088 - 0x0000)
struct FFortDisplayAttribute final
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0000(0x0038)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Label;                                             // 0x0038(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Value;                                             // 0x0050(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   HoverText;                                         // 0x0068(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         NumericValue;                                      // 0x0080(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortStatValueDisplayType                     DisplayType;                                       // 0x0084(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuffState                                BuffState;                                         // 0x0085(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortClampState                               ClampState;                                        // 0x0086(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortComparisonType                           ComparisonType;                                    // 0x0087(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortDisplayAttribute) == 0x000008, "Wrong alignment on FFortDisplayAttribute");
static_assert(sizeof(FFortDisplayAttribute) == 0x000088, "Wrong size on FFortDisplayAttribute");
static_assert(offsetof(FFortDisplayAttribute, Attribute) == 0x000000, "Member 'FFortDisplayAttribute::Attribute' has a wrong offset!");
static_assert(offsetof(FFortDisplayAttribute, Label) == 0x000038, "Member 'FFortDisplayAttribute::Label' has a wrong offset!");
static_assert(offsetof(FFortDisplayAttribute, Value) == 0x000050, "Member 'FFortDisplayAttribute::Value' has a wrong offset!");
static_assert(offsetof(FFortDisplayAttribute, HoverText) == 0x000068, "Member 'FFortDisplayAttribute::HoverText' has a wrong offset!");
static_assert(offsetof(FFortDisplayAttribute, NumericValue) == 0x000080, "Member 'FFortDisplayAttribute::NumericValue' has a wrong offset!");
static_assert(offsetof(FFortDisplayAttribute, DisplayType) == 0x000084, "Member 'FFortDisplayAttribute::DisplayType' has a wrong offset!");
static_assert(offsetof(FFortDisplayAttribute, BuffState) == 0x000085, "Member 'FFortDisplayAttribute::BuffState' has a wrong offset!");
static_assert(offsetof(FFortDisplayAttribute, ClampState) == 0x000086, "Member 'FFortDisplayAttribute::ClampState' has a wrong offset!");
static_assert(offsetof(FFortDisplayAttribute, ComparisonType) == 0x000087, "Member 'FFortDisplayAttribute::ComparisonType' has a wrong offset!");

// ScriptStruct FortniteUI.ProgressiveSetInfo
// 0x0068 (0x0068 - 0x0000)
struct FProgressiveSetInfo final
{
public:
	class FText                                   SetName;                                           // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 TileMaterial;                                      // 0x0018(0x0028)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProgressiveSetProgress                       SetProgress;                                       // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UnlockedStagesCount;                               // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalStagesCount;                                  // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x1C];                                      // 0x004C(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProgressiveSetInfo) == 0x000008, "Wrong alignment on FProgressiveSetInfo");
static_assert(sizeof(FProgressiveSetInfo) == 0x000068, "Wrong size on FProgressiveSetInfo");
static_assert(offsetof(FProgressiveSetInfo, SetName) == 0x000000, "Member 'FProgressiveSetInfo::SetName' has a wrong offset!");
static_assert(offsetof(FProgressiveSetInfo, TileMaterial) == 0x000018, "Member 'FProgressiveSetInfo::TileMaterial' has a wrong offset!");
static_assert(offsetof(FProgressiveSetInfo, SetProgress) == 0x000040, "Member 'FProgressiveSetInfo::SetProgress' has a wrong offset!");
static_assert(offsetof(FProgressiveSetInfo, UnlockedStagesCount) == 0x000044, "Member 'FProgressiveSetInfo::UnlockedStagesCount' has a wrong offset!");
static_assert(offsetof(FProgressiveSetInfo, TotalStagesCount) == 0x000048, "Member 'FProgressiveSetInfo::TotalStagesCount' has a wrong offset!");

// ScriptStruct FortniteUI.PluginUIStateWidgetEntry
// 0x0030 (0x0030 - 0x0000)
struct FPluginUIStateWidgetEntry final
{
public:
	class FName                                   EntryName;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   WidgetClass;                                       // 0x0008(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPluginUIStateWidgetEntry) == 0x000008, "Wrong alignment on FPluginUIStateWidgetEntry");
static_assert(sizeof(FPluginUIStateWidgetEntry) == 0x000030, "Wrong size on FPluginUIStateWidgetEntry");
static_assert(offsetof(FPluginUIStateWidgetEntry, EntryName) == 0x000000, "Member 'FPluginUIStateWidgetEntry::EntryName' has a wrong offset!");
static_assert(offsetof(FPluginUIStateWidgetEntry, WidgetClass) == 0x000008, "Member 'FPluginUIStateWidgetEntry::WidgetClass' has a wrong offset!");

// ScriptStruct FortniteUI.FortSettingClassExtensions
// 0x0010 (0x0010 - 0x0000)
struct FFortSettingClassExtensions final
{
public:
	TArray<TSoftClassPtr<class UClass>>           Extensions;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSettingClassExtensions) == 0x000008, "Wrong alignment on FFortSettingClassExtensions");
static_assert(sizeof(FFortSettingClassExtensions) == 0x000010, "Wrong size on FFortSettingClassExtensions");
static_assert(offsetof(FFortSettingClassExtensions, Extensions) == 0x000000, "Member 'FFortSettingClassExtensions::Extensions' has a wrong offset!");

// ScriptStruct FortniteUI.FortSettingNameExtensions
// 0x0018 (0x0018 - 0x0000)
struct FFortSettingNameExtensions final
{
public:
	bool                                          bIncludeClassDefaultExtensions;                    // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftClassPtr<class UClass>>           Extensions;                                        // 0x0008(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSettingNameExtensions) == 0x000008, "Wrong alignment on FFortSettingNameExtensions");
static_assert(sizeof(FFortSettingNameExtensions) == 0x000018, "Wrong size on FFortSettingNameExtensions");
static_assert(offsetof(FFortSettingNameExtensions, bIncludeClassDefaultExtensions) == 0x000000, "Member 'FFortSettingNameExtensions::bIncludeClassDefaultExtensions' has a wrong offset!");
static_assert(offsetof(FFortSettingNameExtensions, Extensions) == 0x000008, "Member 'FFortSettingNameExtensions::Extensions' has a wrong offset!");

// ScriptStruct FortniteUI.FortShowdownEventBestResultsSummary
// 0x001C (0x001C - 0x0000)
struct FFortShowdownEventBestResultsSummary final
{
public:
	int32                                         TotalScore;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MatchesPlayed;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumVictoryRoyales;                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlacementPoints;                                   // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EliminationPoints;                                 // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EntryFeePoints;                                    // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidSummary;                                   // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortShowdownEventBestResultsSummary) == 0x000004, "Wrong alignment on FFortShowdownEventBestResultsSummary");
static_assert(sizeof(FFortShowdownEventBestResultsSummary) == 0x00001C, "Wrong size on FFortShowdownEventBestResultsSummary");
static_assert(offsetof(FFortShowdownEventBestResultsSummary, TotalScore) == 0x000000, "Member 'FFortShowdownEventBestResultsSummary::TotalScore' has a wrong offset!");
static_assert(offsetof(FFortShowdownEventBestResultsSummary, MatchesPlayed) == 0x000004, "Member 'FFortShowdownEventBestResultsSummary::MatchesPlayed' has a wrong offset!");
static_assert(offsetof(FFortShowdownEventBestResultsSummary, NumVictoryRoyales) == 0x000008, "Member 'FFortShowdownEventBestResultsSummary::NumVictoryRoyales' has a wrong offset!");
static_assert(offsetof(FFortShowdownEventBestResultsSummary, PlacementPoints) == 0x00000C, "Member 'FFortShowdownEventBestResultsSummary::PlacementPoints' has a wrong offset!");
static_assert(offsetof(FFortShowdownEventBestResultsSummary, EliminationPoints) == 0x000010, "Member 'FFortShowdownEventBestResultsSummary::EliminationPoints' has a wrong offset!");
static_assert(offsetof(FFortShowdownEventBestResultsSummary, EntryFeePoints) == 0x000014, "Member 'FFortShowdownEventBestResultsSummary::EntryFeePoints' has a wrong offset!");
static_assert(offsetof(FFortShowdownEventBestResultsSummary, bIsValidSummary) == 0x000018, "Member 'FFortShowdownEventBestResultsSummary::bIsValidSummary' has a wrong offset!");

// ScriptStruct FortniteUI.FortTournamentDisplayInfo
// 0x01C8 (0x01D0 - 0x0008)
struct FFortTournamentDisplayInfo final : public FTableRowBase
{
public:
	class FText                                   TitleLine1;                                        // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   TitleLine2;                                        // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ScheduleInfo;                                      // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   FlavorDescription;                                 // 0x0050(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DetailsDescription;                                // 0x0068(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ShortFormatTitle;                                  // 0x0080(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   LongFormatTitle;                                   // 0x0098(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   BackgroundTitle;                                   // 0x00B0(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         PinScoreRequirement;                               // 0x00C8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   PinEarnedText;                                     // 0x00D0(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FLinearColor                           BaseColor;                                         // 0x00E8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PrimaryColor;                                      // 0x00F8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SecondaryColor;                                    // 0x0108(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           HighlightColor;                                    // 0x0118(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TitleColor;                                        // 0x0128(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColor;                                       // 0x0138(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BackgroundLeftColor;                               // 0x0148(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BackgroundRightColor;                              // 0x0158(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BackgroundTextColor;                               // 0x0168(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PosterFadeColor;                                   // 0x0178(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   AlertText;                                         // 0x0188(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   SeriesPointLeaderboardName;                        // 0x01A0(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EFortTournamentAlertType                      AlertType;                                         // 0x01B8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B9[0x7];                                      // 0x01B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           RoundDisplayNames;                                 // 0x01C0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTournamentDisplayInfo) == 0x000008, "Wrong alignment on FFortTournamentDisplayInfo");
static_assert(sizeof(FFortTournamentDisplayInfo) == 0x0001D0, "Wrong size on FFortTournamentDisplayInfo");
static_assert(offsetof(FFortTournamentDisplayInfo, TitleLine1) == 0x000008, "Member 'FFortTournamentDisplayInfo::TitleLine1' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, TitleLine2) == 0x000020, "Member 'FFortTournamentDisplayInfo::TitleLine2' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, ScheduleInfo) == 0x000038, "Member 'FFortTournamentDisplayInfo::ScheduleInfo' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, FlavorDescription) == 0x000050, "Member 'FFortTournamentDisplayInfo::FlavorDescription' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, DetailsDescription) == 0x000068, "Member 'FFortTournamentDisplayInfo::DetailsDescription' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, ShortFormatTitle) == 0x000080, "Member 'FFortTournamentDisplayInfo::ShortFormatTitle' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, LongFormatTitle) == 0x000098, "Member 'FFortTournamentDisplayInfo::LongFormatTitle' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, BackgroundTitle) == 0x0000B0, "Member 'FFortTournamentDisplayInfo::BackgroundTitle' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, PinScoreRequirement) == 0x0000C8, "Member 'FFortTournamentDisplayInfo::PinScoreRequirement' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, PinEarnedText) == 0x0000D0, "Member 'FFortTournamentDisplayInfo::PinEarnedText' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, BaseColor) == 0x0000E8, "Member 'FFortTournamentDisplayInfo::BaseColor' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, PrimaryColor) == 0x0000F8, "Member 'FFortTournamentDisplayInfo::PrimaryColor' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, SecondaryColor) == 0x000108, "Member 'FFortTournamentDisplayInfo::SecondaryColor' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, HighlightColor) == 0x000118, "Member 'FFortTournamentDisplayInfo::HighlightColor' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, TitleColor) == 0x000128, "Member 'FFortTournamentDisplayInfo::TitleColor' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, ShadowColor) == 0x000138, "Member 'FFortTournamentDisplayInfo::ShadowColor' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, BackgroundLeftColor) == 0x000148, "Member 'FFortTournamentDisplayInfo::BackgroundLeftColor' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, BackgroundRightColor) == 0x000158, "Member 'FFortTournamentDisplayInfo::BackgroundRightColor' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, BackgroundTextColor) == 0x000168, "Member 'FFortTournamentDisplayInfo::BackgroundTextColor' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, PosterFadeColor) == 0x000178, "Member 'FFortTournamentDisplayInfo::PosterFadeColor' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, AlertText) == 0x000188, "Member 'FFortTournamentDisplayInfo::AlertText' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, SeriesPointLeaderboardName) == 0x0001A0, "Member 'FFortTournamentDisplayInfo::SeriesPointLeaderboardName' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, AlertType) == 0x0001B8, "Member 'FFortTournamentDisplayInfo::AlertType' has a wrong offset!");
static_assert(offsetof(FFortTournamentDisplayInfo, RoundDisplayNames) == 0x0001C0, "Member 'FFortTournamentDisplayInfo::RoundDisplayNames' has a wrong offset!");

// ScriptStruct FortniteUI.FortEventStyleInfo
// 0x00A0 (0x00A8 - 0x0008)
struct FFortEventStyleInfo final : public FTableRowBase
{
public:
	struct FLinearColor                           BaseColor;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PrimaryColor;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SecondaryColor;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           HighlightColor;                                    // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TitleColor;                                        // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColor;                                       // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BackgroundLeftColor;                               // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BackgroundRightColor;                              // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BackgroundTextColor;                               // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PosterFadeColor;                                   // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEventStyleInfo) == 0x000008, "Wrong alignment on FFortEventStyleInfo");
static_assert(sizeof(FFortEventStyleInfo) == 0x0000A8, "Wrong size on FFortEventStyleInfo");
static_assert(offsetof(FFortEventStyleInfo, BaseColor) == 0x000008, "Member 'FFortEventStyleInfo::BaseColor' has a wrong offset!");
static_assert(offsetof(FFortEventStyleInfo, PrimaryColor) == 0x000018, "Member 'FFortEventStyleInfo::PrimaryColor' has a wrong offset!");
static_assert(offsetof(FFortEventStyleInfo, SecondaryColor) == 0x000028, "Member 'FFortEventStyleInfo::SecondaryColor' has a wrong offset!");
static_assert(offsetof(FFortEventStyleInfo, HighlightColor) == 0x000038, "Member 'FFortEventStyleInfo::HighlightColor' has a wrong offset!");
static_assert(offsetof(FFortEventStyleInfo, TitleColor) == 0x000048, "Member 'FFortEventStyleInfo::TitleColor' has a wrong offset!");
static_assert(offsetof(FFortEventStyleInfo, ShadowColor) == 0x000058, "Member 'FFortEventStyleInfo::ShadowColor' has a wrong offset!");
static_assert(offsetof(FFortEventStyleInfo, BackgroundLeftColor) == 0x000068, "Member 'FFortEventStyleInfo::BackgroundLeftColor' has a wrong offset!");
static_assert(offsetof(FFortEventStyleInfo, BackgroundRightColor) == 0x000078, "Member 'FFortEventStyleInfo::BackgroundRightColor' has a wrong offset!");
static_assert(offsetof(FFortEventStyleInfo, BackgroundTextColor) == 0x000088, "Member 'FFortEventStyleInfo::BackgroundTextColor' has a wrong offset!");
static_assert(offsetof(FFortEventStyleInfo, PosterFadeColor) == 0x000098, "Member 'FFortEventStyleInfo::PosterFadeColor' has a wrong offset!");

// ScriptStruct FortniteUI.PlatformPrefixIcon
// 0x0018 (0x0018 - 0x0000)
struct FPlatformPrefixIcon final
{
public:
	class FString                                 Platform;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             PrefixIcon;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlatformPrefixIcon) == 0x000008, "Wrong alignment on FPlatformPrefixIcon");
static_assert(sizeof(FPlatformPrefixIcon) == 0x000018, "Wrong size on FPlatformPrefixIcon");
static_assert(offsetof(FPlatformPrefixIcon, Platform) == 0x000000, "Member 'FPlatformPrefixIcon::Platform' has a wrong offset!");
static_assert(offsetof(FPlatformPrefixIcon, PrefixIcon) == 0x000010, "Member 'FPlatformPrefixIcon::PrefixIcon' has a wrong offset!");

// ScriptStruct FortniteUI.PlatformPrefixIconList
// 0x0010 (0x0010 - 0x0000)
struct FPlatformPrefixIconList final
{
public:
	TArray<struct FPlatformPrefixIcon>            PlatformPrefixIcons;                               // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlatformPrefixIconList) == 0x000008, "Wrong alignment on FPlatformPrefixIconList");
static_assert(sizeof(FPlatformPrefixIconList) == 0x000010, "Wrong size on FPlatformPrefixIconList");
static_assert(offsetof(FPlatformPrefixIconList, PlatformPrefixIcons) == 0x000000, "Member 'FPlatformPrefixIconList::PlatformPrefixIcons' has a wrong offset!");

// ScriptStruct FortniteUI.FortUserListHeaderInfo
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FFortUserListHeaderInfo final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortUserListHeaderInfo) == 0x000008, "Wrong alignment on FFortUserListHeaderInfo");
static_assert(sizeof(FFortUserListHeaderInfo) == 0x000018, "Wrong size on FFortUserListHeaderInfo");

// ScriptStruct FortniteUI.PotentialSpectatorTarget
// 0x0010 (0x0010 - 0x0000)
struct FPotentialSpectatorTarget final
{
public:
	int32                                         Rank;                                              // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AFortPlayerStateAthena>  PlayerState;                                       // 0x0004(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCurrentViewTarget;                                // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPotentialSpectatorTarget) == 0x000004, "Wrong alignment on FPotentialSpectatorTarget");
static_assert(sizeof(FPotentialSpectatorTarget) == 0x000010, "Wrong size on FPotentialSpectatorTarget");
static_assert(offsetof(FPotentialSpectatorTarget, Rank) == 0x000000, "Member 'FPotentialSpectatorTarget::Rank' has a wrong offset!");
static_assert(offsetof(FPotentialSpectatorTarget, PlayerState) == 0x000004, "Member 'FPotentialSpectatorTarget::PlayerState' has a wrong offset!");
static_assert(offsetof(FPotentialSpectatorTarget, bCurrentViewTarget) == 0x00000C, "Member 'FPotentialSpectatorTarget::bCurrentViewTarget' has a wrong offset!");

// ScriptStruct FortniteUI.StandaloneItemShopTabInfo
// 0x0030 (0x0030 - 0x0000)
struct FStandaloneItemShopTabInfo final
{
public:
	class FText                                   TabTitle;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   TabNameID;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                TabIcon;                                           // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonActivatableWidget*               TabWidget;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStandaloneItemShopTabInfo) == 0x000008, "Wrong alignment on FStandaloneItemShopTabInfo");
static_assert(sizeof(FStandaloneItemShopTabInfo) == 0x000030, "Wrong size on FStandaloneItemShopTabInfo");
static_assert(offsetof(FStandaloneItemShopTabInfo, TabTitle) == 0x000000, "Member 'FStandaloneItemShopTabInfo::TabTitle' has a wrong offset!");
static_assert(offsetof(FStandaloneItemShopTabInfo, TabNameID) == 0x000018, "Member 'FStandaloneItemShopTabInfo::TabNameID' has a wrong offset!");
static_assert(offsetof(FStandaloneItemShopTabInfo, TabIcon) == 0x000020, "Member 'FStandaloneItemShopTabInfo::TabIcon' has a wrong offset!");
static_assert(offsetof(FStandaloneItemShopTabInfo, TabWidget) == 0x000028, "Member 'FStandaloneItemShopTabInfo::TabWidget' has a wrong offset!");

// ScriptStruct FortniteUI.FortToastDisplayInfo
// 0x0060 (0x0060 - 0x0000)
struct FFortToastDisplayInfo final
{
public:
	class FText                                   Header;                                            // 0x0000(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Body;                                              // 0x0018(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Image;                                             // 0x0030(0x0028)(BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortToastType                                Type;                                              // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortToastDisplayInfo) == 0x000008, "Wrong alignment on FFortToastDisplayInfo");
static_assert(sizeof(FFortToastDisplayInfo) == 0x000060, "Wrong size on FFortToastDisplayInfo");
static_assert(offsetof(FFortToastDisplayInfo, Header) == 0x000000, "Member 'FFortToastDisplayInfo::Header' has a wrong offset!");
static_assert(offsetof(FFortToastDisplayInfo, Body) == 0x000018, "Member 'FFortToastDisplayInfo::Body' has a wrong offset!");
static_assert(offsetof(FFortToastDisplayInfo, Image) == 0x000030, "Member 'FFortToastDisplayInfo::Image' has a wrong offset!");
static_assert(offsetof(FFortToastDisplayInfo, Type) == 0x000058, "Member 'FFortToastDisplayInfo::Type' has a wrong offset!");

// ScriptStruct FortniteUI.StoreCallout
// 0x00A0 (0x00A0 - 0x0000)
struct FStoreCallout final
{
public:
	struct FFortToastDisplayInfo                  ToastDisplayInfo;                                  // 0x0000(0x0060)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ItemName;                                          // 0x0060(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   ItemSet;                                           // 0x0078(0x0018)(NativeAccessSpecifierPublic)
	class FString                                 OfferDisplayAssetPath;                             // 0x0090(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreCallout) == 0x000008, "Wrong alignment on FStoreCallout");
static_assert(sizeof(FStoreCallout) == 0x0000A0, "Wrong size on FStoreCallout");
static_assert(offsetof(FStoreCallout, ToastDisplayInfo) == 0x000000, "Member 'FStoreCallout::ToastDisplayInfo' has a wrong offset!");
static_assert(offsetof(FStoreCallout, ItemName) == 0x000060, "Member 'FStoreCallout::ItemName' has a wrong offset!");
static_assert(offsetof(FStoreCallout, ItemSet) == 0x000078, "Member 'FStoreCallout::ItemSet' has a wrong offset!");
static_assert(offsetof(FStoreCallout, OfferDisplayAssetPath) == 0x000090, "Member 'FStoreCallout::OfferDisplayAssetPath' has a wrong offset!");

// ScriptStruct FortniteUI.CardPackOffer
// 0x0078 (0x0078 - 0x0000)
struct FCardPackOffer final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         MtxPrice;                                          // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECatalogSaleType                              SaleType;                                          // 0x0034(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SaleText;                                          // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RegularPrice;                                      // 0x0054(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAccountItemDefinition*             CurrencyType;                                      // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuantityRemaining;                                 // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTimedOffer;                                       // 0x0064(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x13];                                      // 0x0065(0x0013)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCardPackOffer) == 0x000008, "Wrong alignment on FCardPackOffer");
static_assert(sizeof(FCardPackOffer) == 0x000078, "Wrong size on FCardPackOffer");
static_assert(offsetof(FCardPackOffer, Title) == 0x000000, "Member 'FCardPackOffer::Title' has a wrong offset!");
static_assert(offsetof(FCardPackOffer, Description) == 0x000018, "Member 'FCardPackOffer::Description' has a wrong offset!");
static_assert(offsetof(FCardPackOffer, MtxPrice) == 0x000030, "Member 'FCardPackOffer::MtxPrice' has a wrong offset!");
static_assert(offsetof(FCardPackOffer, SaleType) == 0x000034, "Member 'FCardPackOffer::SaleType' has a wrong offset!");
static_assert(offsetof(FCardPackOffer, SaleText) == 0x000038, "Member 'FCardPackOffer::SaleText' has a wrong offset!");
static_assert(offsetof(FCardPackOffer, Price) == 0x000050, "Member 'FCardPackOffer::Price' has a wrong offset!");
static_assert(offsetof(FCardPackOffer, RegularPrice) == 0x000054, "Member 'FCardPackOffer::RegularPrice' has a wrong offset!");
static_assert(offsetof(FCardPackOffer, CurrencyType) == 0x000058, "Member 'FCardPackOffer::CurrencyType' has a wrong offset!");
static_assert(offsetof(FCardPackOffer, QuantityRemaining) == 0x000060, "Member 'FCardPackOffer::QuantityRemaining' has a wrong offset!");
static_assert(offsetof(FCardPackOffer, bTimedOffer) == 0x000064, "Member 'FCardPackOffer::bTimedOffer' has a wrong offset!");

// ScriptStruct FortniteUI.Card
// 0x0018 (0x0018 - 0x0000)
struct FCard final
{
public:
	int32                                         QuantityReceived;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItem*                              Item;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPauseType                                    PauseType;                                         // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCard) == 0x000008, "Wrong alignment on FCard");
static_assert(sizeof(FCard) == 0x000018, "Wrong size on FCard");
static_assert(offsetof(FCard, QuantityReceived) == 0x000000, "Member 'FCard::QuantityReceived' has a wrong offset!");
static_assert(offsetof(FCard, Item) == 0x000008, "Member 'FCard::Item' has a wrong offset!");
static_assert(offsetof(FCard, PauseType) == 0x000010, "Member 'FCard::PauseType' has a wrong offset!");

// ScriptStruct FortniteUI.OpenedCardPack
// 0x0010 (0x0010 - 0x0000)
struct FOpenedCardPack final
{
public:
	class UFortCardPackItemDefinition*            CardPackDefinition;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayLevel;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOpenedCardPack) == 0x000008, "Wrong alignment on FOpenedCardPack");
static_assert(sizeof(FOpenedCardPack) == 0x000010, "Wrong size on FOpenedCardPack");
static_assert(offsetof(FOpenedCardPack, CardPackDefinition) == 0x000000, "Member 'FOpenedCardPack::CardPackDefinition' has a wrong offset!");
static_assert(offsetof(FOpenedCardPack, DisplayLevel) == 0x000008, "Member 'FOpenedCardPack::DisplayLevel' has a wrong offset!");

// ScriptStruct FortniteUI.BundledItemInfo
// 0x0018 (0x0018 - 0x0000)
struct FBundledItemInfo final
{
public:
	class FString                                 TemplateId;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOwned;                                            // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBundledItemInfo) == 0x000008, "Wrong alignment on FBundledItemInfo");
static_assert(sizeof(FBundledItemInfo) == 0x000018, "Wrong size on FBundledItemInfo");
static_assert(offsetof(FBundledItemInfo, TemplateId) == 0x000000, "Member 'FBundledItemInfo::TemplateId' has a wrong offset!");
static_assert(offsetof(FBundledItemInfo, Quantity) == 0x000010, "Member 'FBundledItemInfo::Quantity' has a wrong offset!");
static_assert(offsetof(FBundledItemInfo, bOwned) == 0x000014, "Member 'FBundledItemInfo::bOwned' has a wrong offset!");

// ScriptStruct FortniteUI.OfferPopUpData
// 0x0018 (0x0020 - 0x0008)
struct FOfferPopUpData final : public FTableRowBase
{
public:
	class FText                                   FormatedText;                                      // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOfferPopUpData) == 0x000008, "Wrong alignment on FOfferPopUpData");
static_assert(sizeof(FOfferPopUpData) == 0x000020, "Wrong size on FOfferPopUpData");
static_assert(offsetof(FOfferPopUpData, FormatedText) == 0x000008, "Member 'FOfferPopUpData::FormatedText' has a wrong offset!");

// ScriptStruct FortniteUI.FortSwipeDetector
// 0x0090 (0x0090 - 0x0000)
struct FFortSwipeDetector final
{
public:
	struct FVector2D                              SwipeThreshold;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x80];                                      // 0x0010(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortSwipeDetector) == 0x000008, "Wrong alignment on FFortSwipeDetector");
static_assert(sizeof(FFortSwipeDetector) == 0x000090, "Wrong size on FFortSwipeDetector");
static_assert(offsetof(FFortSwipeDetector, SwipeThreshold) == 0x000000, "Member 'FFortSwipeDetector::SwipeThreshold' has a wrong offset!");

// ScriptStruct FortniteUI.CachedComponentMaterials
// 0x0018 (0x0018 - 0x0000)
struct FCachedComponentMaterials final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             OriginalMaterials;                                 // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCachedComponentMaterials) == 0x000008, "Wrong alignment on FCachedComponentMaterials");
static_assert(sizeof(FCachedComponentMaterials) == 0x000018, "Wrong size on FCachedComponentMaterials");
static_assert(offsetof(FCachedComponentMaterials, OriginalMaterials) == 0x000008, "Member 'FCachedComponentMaterials::OriginalMaterials' has a wrong offset!");

// ScriptStruct FortniteUI.TouchMove
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FTouchMove final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTouchMove) == 0x000008, "Wrong alignment on FTouchMove");
static_assert(sizeof(FTouchMove) == 0x000018, "Wrong size on FTouchMove");

// ScriptStruct FortniteUI.TouchInteractionIconOverride
// 0x0030 (0x0030 - 0x0000)
struct FTouchInteractionIconOverride final
{
public:
	TSoftObjectPtr<class UTexture2D>              IconOverride;                                      // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IconScale;                                         // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTouchInteractionIconOverride) == 0x000008, "Wrong alignment on FTouchInteractionIconOverride");
static_assert(sizeof(FTouchInteractionIconOverride) == 0x000030, "Wrong size on FTouchInteractionIconOverride");
static_assert(offsetof(FTouchInteractionIconOverride, IconOverride) == 0x000000, "Member 'FTouchInteractionIconOverride::IconOverride' has a wrong offset!");
static_assert(offsetof(FTouchInteractionIconOverride, IconScale) == 0x000028, "Member 'FTouchInteractionIconOverride::IconScale' has a wrong offset!");

// ScriptStruct FortniteUI.StateWidgetEntry
// 0x0030 (0x0030 - 0x0000)
struct FStateWidgetEntry final
{
public:
	TSoftClassPtr<class UClass>                   Class;                                             // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortNamedBundle                              Bundle;                                            // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStateWidgetEntry) == 0x000008, "Wrong alignment on FStateWidgetEntry");
static_assert(sizeof(FStateWidgetEntry) == 0x000030, "Wrong size on FStateWidgetEntry");
static_assert(offsetof(FStateWidgetEntry, Class) == 0x000000, "Member 'FStateWidgetEntry::Class' has a wrong offset!");
static_assert(offsetof(FStateWidgetEntry, Bundle) == 0x000028, "Member 'FStateWidgetEntry::Bundle' has a wrong offset!");

// ScriptStruct FortniteUI.RegisteredUIManagerEntry
// 0x0030 (0x0030 - 0x0000)
struct FRegisteredUIManagerEntry final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   UIManagerClass;                                    // 0x0008(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRegisteredUIManagerEntry) == 0x000008, "Wrong alignment on FRegisteredUIManagerEntry");
static_assert(sizeof(FRegisteredUIManagerEntry) == 0x000030, "Wrong size on FRegisteredUIManagerEntry");
static_assert(offsetof(FRegisteredUIManagerEntry, UIManagerClass) == 0x000008, "Member 'FRegisteredUIManagerEntry::UIManagerClass' has a wrong offset!");

// ScriptStruct FortniteUI.FortRootViewportLayoutInfo
// 0x0018 (0x0018 - 0x0000)
struct FFortRootViewportLayoutInfo final
{
public:
	class UFortLocalPlayer*                       LocalPlayer;                                       // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            RootLayout;                                        // 0x0008(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortRootViewportLayoutInfo) == 0x000008, "Wrong alignment on FFortRootViewportLayoutInfo");
static_assert(sizeof(FFortRootViewportLayoutInfo) == 0x000018, "Wrong size on FFortRootViewportLayoutInfo");
static_assert(offsetof(FFortRootViewportLayoutInfo, LocalPlayer) == 0x000000, "Member 'FFortRootViewportLayoutInfo::LocalPlayer' has a wrong offset!");
static_assert(offsetof(FFortRootViewportLayoutInfo, RootLayout) == 0x000008, "Member 'FFortRootViewportLayoutInfo::RootLayout' has a wrong offset!");

// ScriptStruct FortniteUI.UINavigationEntry
// 0x0040 (0x0040 - 0x0000)
struct FUINavigationEntry final
{
public:
	struct FUINavigationData                      Data;                                              // 0x0000(0x0028)(NativeAccessSpecifierPublic)
	TDelegate<void(const struct FUINavigationData& Data)> NavigateToDelegate;                                // 0x0028(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FUINavigationData& Data)> NavigateFromDelegate;                              // 0x0034(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUINavigationEntry) == 0x000008, "Wrong alignment on FUINavigationEntry");
static_assert(sizeof(FUINavigationEntry) == 0x000040, "Wrong size on FUINavigationEntry");
static_assert(offsetof(FUINavigationEntry, Data) == 0x000000, "Member 'FUINavigationEntry::Data' has a wrong offset!");
static_assert(offsetof(FUINavigationEntry, NavigateToDelegate) == 0x000028, "Member 'FUINavigationEntry::NavigateToDelegate' has a wrong offset!");
static_assert(offsetof(FUINavigationEntry, NavigateFromDelegate) == 0x000034, "Member 'FUINavigationEntry::NavigateFromDelegate' has a wrong offset!");

// ScriptStruct FortniteUI.FortUINavigationRequest
// 0x0010 (0x0010 - 0x0000)
struct FFortUINavigationRequest final
{
public:
	TArray<struct FFortUINavigationOperation>     Operations;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortUINavigationRequest) == 0x000008, "Wrong alignment on FFortUINavigationRequest");
static_assert(sizeof(FFortUINavigationRequest) == 0x000010, "Wrong size on FFortUINavigationRequest");
static_assert(offsetof(FFortUINavigationRequest, Operations) == 0x000000, "Member 'FFortUINavigationRequest::Operations' has a wrong offset!");

// ScriptStruct FortniteUI.FortUIPickerTrapSortModifier
// 0x0050 (0x0058 - 0x0008)
struct FFortUIPickerTrapSortModifier final : public FTableRowBase
{
public:
	struct FGameplayTagQuery                      ItemTagQuery;                                      // 0x0008(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         ScoreBonus;                                        // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortUIPickerTrapSortModifier) == 0x000008, "Wrong alignment on FFortUIPickerTrapSortModifier");
static_assert(sizeof(FFortUIPickerTrapSortModifier) == 0x000058, "Wrong size on FFortUIPickerTrapSortModifier");
static_assert(offsetof(FFortUIPickerTrapSortModifier, ItemTagQuery) == 0x000008, "Member 'FFortUIPickerTrapSortModifier::ItemTagQuery' has a wrong offset!");
static_assert(offsetof(FFortUIPickerTrapSortModifier, ScoreBonus) == 0x000050, "Member 'FFortUIPickerTrapSortModifier::ScoreBonus' has a wrong offset!");

// ScriptStruct FortniteUI.FortUIXpInfo
// 0x002C (0x002C - 0x0000)
struct FFortUIXpInfo final
{
public:
	int32                                         InitialLevel;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitialDisplayXp;                                  // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortExperienceDelta                   ChangeInXp;                                        // 0x0008(0x0024)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortUIXpInfo) == 0x000004, "Wrong alignment on FFortUIXpInfo");
static_assert(sizeof(FFortUIXpInfo) == 0x00002C, "Wrong size on FFortUIXpInfo");
static_assert(offsetof(FFortUIXpInfo, InitialLevel) == 0x000000, "Member 'FFortUIXpInfo::InitialLevel' has a wrong offset!");
static_assert(offsetof(FFortUIXpInfo, InitialDisplayXp) == 0x000004, "Member 'FFortUIXpInfo::InitialDisplayXp' has a wrong offset!");
static_assert(offsetof(FFortUIXpInfo, ChangeInXp) == 0x000008, "Member 'FFortUIXpInfo::ChangeInXp' has a wrong offset!");

// ScriptStruct FortniteUI.UIStateTag_STW
// 0x0000 (0x0004 - 0x0004)
struct FUIStateTag_STW final : public FUIStateTag
{
};
static_assert(alignof(FUIStateTag_STW) == 0x000004, "Wrong alignment on FUIStateTag_STW");
static_assert(sizeof(FUIStateTag_STW) == 0x000004, "Wrong size on FUIStateTag_STW");

// ScriptStruct FortniteUI.FortUITutorialData
// 0x0050 (0x0058 - 0x0008)
struct FFortUITutorialData final : public FTableRowBase
{
public:
	class FName                                   TutorialWidgetName;                                // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Title;                                             // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 DevComment;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           Descriptions;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UTexture2D>>      PreviewImages;                                     // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortUITutorialData) == 0x000008, "Wrong alignment on FFortUITutorialData");
static_assert(sizeof(FFortUITutorialData) == 0x000058, "Wrong size on FFortUITutorialData");
static_assert(offsetof(FFortUITutorialData, TutorialWidgetName) == 0x000008, "Member 'FFortUITutorialData::TutorialWidgetName' has a wrong offset!");
static_assert(offsetof(FFortUITutorialData, Title) == 0x000010, "Member 'FFortUITutorialData::Title' has a wrong offset!");
static_assert(offsetof(FFortUITutorialData, DevComment) == 0x000028, "Member 'FFortUITutorialData::DevComment' has a wrong offset!");
static_assert(offsetof(FFortUITutorialData, Descriptions) == 0x000038, "Member 'FFortUITutorialData::Descriptions' has a wrong offset!");
static_assert(offsetof(FFortUITutorialData, PreviewImages) == 0x000048, "Member 'FFortUITutorialData::PreviewImages' has a wrong offset!");

// ScriptStruct FortniteUI.FortDisplayModifier
// 0x0038 (0x0038 - 0x0000)
struct FFortDisplayModifier final
{
public:
	class FText                                   Label;                                             // 0x0000(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Value;                                             // 0x0018(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	EFortStatValueDisplayType                     DisplayType;                                       // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuffState                                BuffState;                                         // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortDisplayModifier) == 0x000008, "Wrong alignment on FFortDisplayModifier");
static_assert(sizeof(FFortDisplayModifier) == 0x000038, "Wrong size on FFortDisplayModifier");
static_assert(offsetof(FFortDisplayModifier, Label) == 0x000000, "Member 'FFortDisplayModifier::Label' has a wrong offset!");
static_assert(offsetof(FFortDisplayModifier, Value) == 0x000018, "Member 'FFortDisplayModifier::Value' has a wrong offset!");
static_assert(offsetof(FFortDisplayModifier, DisplayType) == 0x000030, "Member 'FFortDisplayModifier::DisplayType' has a wrong offset!");
static_assert(offsetof(FFortDisplayModifier, BuffState) == 0x000031, "Member 'FFortDisplayModifier::BuffState' has a wrong offset!");

// ScriptStruct FortniteUI.FortSquadIconData
// 0x0488 (0x0490 - 0x0008)
struct FFortSquadIconData final : public FTableRowBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortMultiSizeBrush                    Brush;                                             // 0x0010(0x0480)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSquadIconData) == 0x000010, "Wrong alignment on FFortSquadIconData");
static_assert(sizeof(FFortSquadIconData) == 0x000490, "Wrong size on FFortSquadIconData");
static_assert(offsetof(FFortSquadIconData, Brush) == 0x000010, "Member 'FFortSquadIconData::Brush' has a wrong offset!");

// ScriptStruct FortniteUI.MatchmakingUIOverride
// 0x0050 (0x0050 - 0x0000)
struct FMatchmakingUIOverride final
{
public:
	TSoftClassPtr<class UClass>                   SoftMatchmakingOptionsClass;                       // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   SoftLobbyMatchmakingWidgetClass;                   // 0x0028(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchmakingUIOverride) == 0x000008, "Wrong alignment on FMatchmakingUIOverride");
static_assert(sizeof(FMatchmakingUIOverride) == 0x000050, "Wrong size on FMatchmakingUIOverride");
static_assert(offsetof(FMatchmakingUIOverride, SoftMatchmakingOptionsClass) == 0x000000, "Member 'FMatchmakingUIOverride::SoftMatchmakingOptionsClass' has a wrong offset!");
static_assert(offsetof(FMatchmakingUIOverride, SoftLobbyMatchmakingWidgetClass) == 0x000028, "Member 'FMatchmakingUIOverride::SoftLobbyMatchmakingWidgetClass' has a wrong offset!");

// ScriptStruct FortniteUI.FortVariantFilterContext
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FFortVariantFilterContext final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortVariantFilterContext) == 0x000008, "Wrong alignment on FFortVariantFilterContext");
static_assert(sizeof(FFortVariantFilterContext) == 0x000030, "Wrong size on FFortVariantFilterContext");

// ScriptStruct FortniteUI.GGCenterDisplayEntry
// 0x0017 (0x0018 - 0x0001)
struct FGGCenterDisplayEntry final : public FFortChangeMonitoringStruct
{
public:
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortWeaponItemDefinition*              WeaponAt;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayersAtWeapon;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnabled;                                        // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowHarvestingTool;                               // 0x0015(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGGCenterDisplayEntry) == 0x000008, "Wrong alignment on FGGCenterDisplayEntry");
static_assert(sizeof(FGGCenterDisplayEntry) == 0x000018, "Wrong size on FGGCenterDisplayEntry");
static_assert(offsetof(FGGCenterDisplayEntry, WeaponAt) == 0x000008, "Member 'FGGCenterDisplayEntry::WeaponAt' has a wrong offset!");
static_assert(offsetof(FGGCenterDisplayEntry, PlayersAtWeapon) == 0x000010, "Member 'FGGCenterDisplayEntry::PlayersAtWeapon' has a wrong offset!");
static_assert(offsetof(FGGCenterDisplayEntry, bIsEnabled) == 0x000014, "Member 'FGGCenterDisplayEntry::bIsEnabled' has a wrong offset!");
static_assert(offsetof(FGGCenterDisplayEntry, bShowHarvestingTool) == 0x000015, "Member 'FGGCenterDisplayEntry::bShowHarvestingTool' has a wrong offset!");

// ScriptStruct FortniteUI.LinkAcrossNumericalIndicatorActionSymbol
// 0x0030 (0x0030 - 0x0000)
struct FLinkAcrossNumericalIndicatorActionSymbol final
{
public:
	ENumericalIndicatorActionType                 ActionType;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ActionSymbol;                                      // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
	struct FLinearColor                           ActionColor;                                       // 0x0020(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLinkAcrossNumericalIndicatorActionSymbol) == 0x000008, "Wrong alignment on FLinkAcrossNumericalIndicatorActionSymbol");
static_assert(sizeof(FLinkAcrossNumericalIndicatorActionSymbol) == 0x000030, "Wrong size on FLinkAcrossNumericalIndicatorActionSymbol");
static_assert(offsetof(FLinkAcrossNumericalIndicatorActionSymbol, ActionType) == 0x000000, "Member 'FLinkAcrossNumericalIndicatorActionSymbol::ActionType' has a wrong offset!");
static_assert(offsetof(FLinkAcrossNumericalIndicatorActionSymbol, ActionSymbol) == 0x000008, "Member 'FLinkAcrossNumericalIndicatorActionSymbol::ActionSymbol' has a wrong offset!");
static_assert(offsetof(FLinkAcrossNumericalIndicatorActionSymbol, ActionColor) == 0x000020, "Member 'FLinkAcrossNumericalIndicatorActionSymbol::ActionColor' has a wrong offset!");

// ScriptStruct FortniteUI.HUDLayoutToolV2_PopupContent
// 0x0068 (0x0068 - 0x0000)
struct FHUDLayoutToolV2_PopupContent final
{
public:
	EHUDLayoutToolPopupType                       PopupType;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TitleText;                                         // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   DescriptionText;                                   // 0x0020(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   ButtonConfirmText;                                 // 0x0038(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   ButtonCancelText;                                  // 0x0050(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHUDLayoutToolV2_PopupContent) == 0x000008, "Wrong alignment on FHUDLayoutToolV2_PopupContent");
static_assert(sizeof(FHUDLayoutToolV2_PopupContent) == 0x000068, "Wrong size on FHUDLayoutToolV2_PopupContent");
static_assert(offsetof(FHUDLayoutToolV2_PopupContent, PopupType) == 0x000000, "Member 'FHUDLayoutToolV2_PopupContent::PopupType' has a wrong offset!");
static_assert(offsetof(FHUDLayoutToolV2_PopupContent, TitleText) == 0x000008, "Member 'FHUDLayoutToolV2_PopupContent::TitleText' has a wrong offset!");
static_assert(offsetof(FHUDLayoutToolV2_PopupContent, DescriptionText) == 0x000020, "Member 'FHUDLayoutToolV2_PopupContent::DescriptionText' has a wrong offset!");
static_assert(offsetof(FHUDLayoutToolV2_PopupContent, ButtonConfirmText) == 0x000038, "Member 'FHUDLayoutToolV2_PopupContent::ButtonConfirmText' has a wrong offset!");
static_assert(offsetof(FHUDLayoutToolV2_PopupContent, ButtonCancelText) == 0x000050, "Member 'FHUDLayoutToolV2_PopupContent::ButtonCancelText' has a wrong offset!");

// ScriptStruct FortniteUI.HUDLayoutToolV2_TextInputPopupContent
// 0x0068 (0x0068 - 0x0000)
struct FHUDLayoutToolV2_TextInputPopupContent final
{
public:
	EHUDLayoutToolTextInputPopupType              PopupType;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TitleText;                                         // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   DescriptionText;                                   // 0x0020(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   ButtonConfirmText;                                 // 0x0038(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   ButtonCancelText;                                  // 0x0050(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHUDLayoutToolV2_TextInputPopupContent) == 0x000008, "Wrong alignment on FHUDLayoutToolV2_TextInputPopupContent");
static_assert(sizeof(FHUDLayoutToolV2_TextInputPopupContent) == 0x000068, "Wrong size on FHUDLayoutToolV2_TextInputPopupContent");
static_assert(offsetof(FHUDLayoutToolV2_TextInputPopupContent, PopupType) == 0x000000, "Member 'FHUDLayoutToolV2_TextInputPopupContent::PopupType' has a wrong offset!");
static_assert(offsetof(FHUDLayoutToolV2_TextInputPopupContent, TitleText) == 0x000008, "Member 'FHUDLayoutToolV2_TextInputPopupContent::TitleText' has a wrong offset!");
static_assert(offsetof(FHUDLayoutToolV2_TextInputPopupContent, DescriptionText) == 0x000020, "Member 'FHUDLayoutToolV2_TextInputPopupContent::DescriptionText' has a wrong offset!");
static_assert(offsetof(FHUDLayoutToolV2_TextInputPopupContent, ButtonConfirmText) == 0x000038, "Member 'FHUDLayoutToolV2_TextInputPopupContent::ButtonConfirmText' has a wrong offset!");
static_assert(offsetof(FHUDLayoutToolV2_TextInputPopupContent, ButtonCancelText) == 0x000050, "Member 'FHUDLayoutToolV2_TextInputPopupContent::ButtonCancelText' has a wrong offset!");

// ScriptStruct FortniteUI.FortCountdownSounds
// 0x0020 (0x0020 - 0x0000)
struct FFortCountdownSounds final
{
public:
	class USoundBase*                             sound;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartTime;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StopTime;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayed;                                           // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        PlayInstance;                                      // 0x0018(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCountdownSounds) == 0x000008, "Wrong alignment on FFortCountdownSounds");
static_assert(sizeof(FFortCountdownSounds) == 0x000020, "Wrong size on FFortCountdownSounds");
static_assert(offsetof(FFortCountdownSounds, sound) == 0x000000, "Member 'FFortCountdownSounds::sound' has a wrong offset!");
static_assert(offsetof(FFortCountdownSounds, StartTime) == 0x000008, "Member 'FFortCountdownSounds::StartTime' has a wrong offset!");
static_assert(offsetof(FFortCountdownSounds, StopTime) == 0x00000C, "Member 'FFortCountdownSounds::StopTime' has a wrong offset!");
static_assert(offsetof(FFortCountdownSounds, FadeOutTime) == 0x000010, "Member 'FFortCountdownSounds::FadeOutTime' has a wrong offset!");
static_assert(offsetof(FFortCountdownSounds, bPlayed) == 0x000014, "Member 'FFortCountdownSounds::bPlayed' has a wrong offset!");
static_assert(offsetof(FFortCountdownSounds, PlayInstance) == 0x000018, "Member 'FFortCountdownSounds::PlayInstance' has a wrong offset!");

// ScriptStruct FortniteUI.PickupStreamEntry
// 0x0018 (0x0018 - 0x0000)
struct FPickupStreamEntry final
{
public:
	class UUserWidget*                            PickupWidget;                                      // 0x0000(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPickupStreamEntry) == 0x000008, "Wrong alignment on FPickupStreamEntry");
static_assert(sizeof(FPickupStreamEntry) == 0x000018, "Wrong size on FPickupStreamEntry");
static_assert(offsetof(FPickupStreamEntry, PickupWidget) == 0x000000, "Member 'FPickupStreamEntry::PickupWidget' has a wrong offset!");

// ScriptStruct FortniteUI.FortFeedbackDropdownCategoryHotfix_Modify
// 0x0008 (0x0008 - 0x0000)
struct FFortFeedbackDropdownCategoryHotfix_Modify final
{
public:
	class FName                                   InternalName;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddFlag;                                          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortPlayerFeedbackFlags                      Flag;                                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortFeedbackDropdownCategoryHotfix_Modify) == 0x000004, "Wrong alignment on FFortFeedbackDropdownCategoryHotfix_Modify");
static_assert(sizeof(FFortFeedbackDropdownCategoryHotfix_Modify) == 0x000008, "Wrong size on FFortFeedbackDropdownCategoryHotfix_Modify");
static_assert(offsetof(FFortFeedbackDropdownCategoryHotfix_Modify, InternalName) == 0x000000, "Member 'FFortFeedbackDropdownCategoryHotfix_Modify::InternalName' has a wrong offset!");
static_assert(offsetof(FFortFeedbackDropdownCategoryHotfix_Modify, bAddFlag) == 0x000004, "Member 'FFortFeedbackDropdownCategoryHotfix_Modify::bAddFlag' has a wrong offset!");
static_assert(offsetof(FFortFeedbackDropdownCategoryHotfix_Modify, Flag) == 0x000005, "Member 'FFortFeedbackDropdownCategoryHotfix_Modify::Flag' has a wrong offset!");

// ScriptStruct FortniteUI.SoundThreshold
// 0x0010 (0x0010 - 0x0000)
struct FSoundThreshold final
{
public:
	class USoundCue*                              SoundCue;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Threshold;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSoundThreshold) == 0x000008, "Wrong alignment on FSoundThreshold");
static_assert(sizeof(FSoundThreshold) == 0x000010, "Wrong size on FSoundThreshold");
static_assert(offsetof(FSoundThreshold, SoundCue) == 0x000000, "Member 'FSoundThreshold::SoundCue' has a wrong offset!");
static_assert(offsetof(FSoundThreshold, Threshold) == 0x000008, "Member 'FSoundThreshold::Threshold' has a wrong offset!");

// ScriptStruct FortniteUI.SpatialCustomizationCategoryStateData
// 0x0030 (0x0030 - 0x0000)
struct FSpatialCustomizationCategoryStateData final
{
public:
	ESpatialCustomizationCategoryState            State;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0004(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CategorySelectionHeaderText;                       // 0x0018(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpatialCustomizationCategoryStateData) == 0x000008, "Wrong alignment on FSpatialCustomizationCategoryStateData");
static_assert(sizeof(FSpatialCustomizationCategoryStateData) == 0x000030, "Wrong size on FSpatialCustomizationCategoryStateData");
static_assert(offsetof(FSpatialCustomizationCategoryStateData, State) == 0x000000, "Member 'FSpatialCustomizationCategoryStateData::State' has a wrong offset!");
static_assert(offsetof(FSpatialCustomizationCategoryStateData, Color) == 0x000004, "Member 'FSpatialCustomizationCategoryStateData::Color' has a wrong offset!");
static_assert(offsetof(FSpatialCustomizationCategoryStateData, CategorySelectionHeaderText) == 0x000018, "Member 'FSpatialCustomizationCategoryStateData::CategorySelectionHeaderText' has a wrong offset!");

// ScriptStruct FortniteUI.AthenaSpatialStyleCharacterData
// 0x0030 (0x0030 - 0x0000)
struct FAthenaSpatialStyleCharacterData final
{
public:
	class UAthenaCharacterItemDefinition*         Character;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAthenaStyleMissionData>        Styles;                                            // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<ESpatialStyleCharacterUnlockPrerequisite> CharacterPrerequisites;                            // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        CharacterIdleAnimation;                            // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaSpatialStyleCharacterData) == 0x000008, "Wrong alignment on FAthenaSpatialStyleCharacterData");
static_assert(sizeof(FAthenaSpatialStyleCharacterData) == 0x000030, "Wrong size on FAthenaSpatialStyleCharacterData");
static_assert(offsetof(FAthenaSpatialStyleCharacterData, Character) == 0x000000, "Member 'FAthenaSpatialStyleCharacterData::Character' has a wrong offset!");
static_assert(offsetof(FAthenaSpatialStyleCharacterData, Styles) == 0x000008, "Member 'FAthenaSpatialStyleCharacterData::Styles' has a wrong offset!");
static_assert(offsetof(FAthenaSpatialStyleCharacterData, CharacterPrerequisites) == 0x000018, "Member 'FAthenaSpatialStyleCharacterData::CharacterPrerequisites' has a wrong offset!");
static_assert(offsetof(FAthenaSpatialStyleCharacterData, CharacterIdleAnimation) == 0x000028, "Member 'FAthenaSpatialStyleCharacterData::CharacterIdleAnimation' has a wrong offset!");

// ScriptStruct FortniteUI.WaxPlacementData
// 0x0020 (0x0020 - 0x0000)
struct FWaxPlacementData final
{
public:
	int32                                         Placement;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerName;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoinCount;                                         // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPlayer;                                         // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWaxPlacementData) == 0x000008, "Wrong alignment on FWaxPlacementData");
static_assert(sizeof(FWaxPlacementData) == 0x000020, "Wrong size on FWaxPlacementData");
static_assert(offsetof(FWaxPlacementData, Placement) == 0x000000, "Member 'FWaxPlacementData::Placement' has a wrong offset!");
static_assert(offsetof(FWaxPlacementData, PlayerName) == 0x000008, "Member 'FWaxPlacementData::PlayerName' has a wrong offset!");
static_assert(offsetof(FWaxPlacementData, CoinCount) == 0x000018, "Member 'FWaxPlacementData::CoinCount' has a wrong offset!");
static_assert(offsetof(FWaxPlacementData, bIsPlayer) == 0x00001C, "Member 'FWaxPlacementData::bIsPlayer' has a wrong offset!");

}

