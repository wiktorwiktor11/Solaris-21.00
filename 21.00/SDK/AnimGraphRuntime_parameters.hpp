#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimGraphRuntime

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function AnimGraphRuntime.AnimationStateMachineLibrary.ConvertToAnimationStateResult
// 0x0028 (0x0028 - 0x0000)
struct AnimationStateMachineLibrary_ConvertToAnimationStateResult final
{
public:
	struct FAnimNodeReference                     Node;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FAnimationStateResultReference         AnimationState;                                    // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	EAnimNodeReferenceConversionResult            Result;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimationStateMachineLibrary_ConvertToAnimationStateResult) == 0x000008, "Wrong alignment on AnimationStateMachineLibrary_ConvertToAnimationStateResult");
static_assert(sizeof(AnimationStateMachineLibrary_ConvertToAnimationStateResult) == 0x000028, "Wrong size on AnimationStateMachineLibrary_ConvertToAnimationStateResult");
static_assert(offsetof(AnimationStateMachineLibrary_ConvertToAnimationStateResult, Node) == 0x000000, "Member 'AnimationStateMachineLibrary_ConvertToAnimationStateResult::Node' has a wrong offset!");
static_assert(offsetof(AnimationStateMachineLibrary_ConvertToAnimationStateResult, AnimationState) == 0x000010, "Member 'AnimationStateMachineLibrary_ConvertToAnimationStateResult::AnimationState' has a wrong offset!");
static_assert(offsetof(AnimationStateMachineLibrary_ConvertToAnimationStateResult, Result) == 0x000020, "Member 'AnimationStateMachineLibrary_ConvertToAnimationStateResult::Result' has a wrong offset!");

// Function AnimGraphRuntime.AnimationStateMachineLibrary.ConvertToAnimationStateResultPure
// 0x0028 (0x0028 - 0x0000)
struct AnimationStateMachineLibrary_ConvertToAnimationStateResultPure final
{
public:
	struct FAnimNodeReference                     Node;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FAnimationStateResultReference         AnimationState;                                    // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimationStateMachineLibrary_ConvertToAnimationStateResultPure) == 0x000008, "Wrong alignment on AnimationStateMachineLibrary_ConvertToAnimationStateResultPure");
static_assert(sizeof(AnimationStateMachineLibrary_ConvertToAnimationStateResultPure) == 0x000028, "Wrong size on AnimationStateMachineLibrary_ConvertToAnimationStateResultPure");
static_assert(offsetof(AnimationStateMachineLibrary_ConvertToAnimationStateResultPure, Node) == 0x000000, "Member 'AnimationStateMachineLibrary_ConvertToAnimationStateResultPure::Node' has a wrong offset!");
static_assert(offsetof(AnimationStateMachineLibrary_ConvertToAnimationStateResultPure, AnimationState) == 0x000010, "Member 'AnimationStateMachineLibrary_ConvertToAnimationStateResultPure::AnimationState' has a wrong offset!");
static_assert(offsetof(AnimationStateMachineLibrary_ConvertToAnimationStateResultPure, Result) == 0x000020, "Member 'AnimationStateMachineLibrary_ConvertToAnimationStateResultPure::Result' has a wrong offset!");

// Function AnimGraphRuntime.AnimationStateMachineLibrary.IsStateBlendingIn
// 0x0028 (0x0028 - 0x0000)
struct AnimationStateMachineLibrary_IsStateBlendingIn final
{
public:
	struct FAnimUpdateContext                     UpdateContext;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimationStateResultReference         Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimationStateMachineLibrary_IsStateBlendingIn) == 0x000008, "Wrong alignment on AnimationStateMachineLibrary_IsStateBlendingIn");
static_assert(sizeof(AnimationStateMachineLibrary_IsStateBlendingIn) == 0x000028, "Wrong size on AnimationStateMachineLibrary_IsStateBlendingIn");
static_assert(offsetof(AnimationStateMachineLibrary_IsStateBlendingIn, UpdateContext) == 0x000000, "Member 'AnimationStateMachineLibrary_IsStateBlendingIn::UpdateContext' has a wrong offset!");
static_assert(offsetof(AnimationStateMachineLibrary_IsStateBlendingIn, Node) == 0x000010, "Member 'AnimationStateMachineLibrary_IsStateBlendingIn::Node' has a wrong offset!");
static_assert(offsetof(AnimationStateMachineLibrary_IsStateBlendingIn, ReturnValue) == 0x000020, "Member 'AnimationStateMachineLibrary_IsStateBlendingIn::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.AnimationStateMachineLibrary.IsStateBlendingOut
// 0x0028 (0x0028 - 0x0000)
struct AnimationStateMachineLibrary_IsStateBlendingOut final
{
public:
	struct FAnimUpdateContext                     UpdateContext;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAnimationStateResultReference         Node;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimationStateMachineLibrary_IsStateBlendingOut) == 0x000008, "Wrong alignment on AnimationStateMachineLibrary_IsStateBlendingOut");
static_assert(sizeof(AnimationStateMachineLibrary_IsStateBlendingOut) == 0x000028, "Wrong size on AnimationStateMachineLibrary_IsStateBlendingOut");
static_assert(offsetof(AnimationStateMachineLibrary_IsStateBlendingOut, UpdateContext) == 0x000000, "Member 'AnimationStateMachineLibrary_IsStateBlendingOut::UpdateContext' has a wrong offset!");
static_assert(offsetof(AnimationStateMachineLibrary_IsStateBlendingOut, Node) == 0x000010, "Member 'AnimationStateMachineLibrary_IsStateBlendingOut::Node' has a wrong offset!");
static_assert(offsetof(AnimationStateMachineLibrary_IsStateBlendingOut, ReturnValue) == 0x000020, "Member 'AnimationStateMachineLibrary_IsStateBlendingOut::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.AnimExecutionContextLibrary.ConvertToComponentSpacePoseContext
// 0x0028 (0x0028 - 0x0000)
struct AnimExecutionContextLibrary_ConvertToComponentSpacePoseContext final
{
public:
	struct FAnimExecutionContext                  Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EAnimExecutionContextConversionResult         Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimComponentSpacePoseContext         ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimExecutionContextLibrary_ConvertToComponentSpacePoseContext) == 0x000008, "Wrong alignment on AnimExecutionContextLibrary_ConvertToComponentSpacePoseContext");
static_assert(sizeof(AnimExecutionContextLibrary_ConvertToComponentSpacePoseContext) == 0x000028, "Wrong size on AnimExecutionContextLibrary_ConvertToComponentSpacePoseContext");
static_assert(offsetof(AnimExecutionContextLibrary_ConvertToComponentSpacePoseContext, Context) == 0x000000, "Member 'AnimExecutionContextLibrary_ConvertToComponentSpacePoseContext::Context' has a wrong offset!");
static_assert(offsetof(AnimExecutionContextLibrary_ConvertToComponentSpacePoseContext, Result) == 0x000010, "Member 'AnimExecutionContextLibrary_ConvertToComponentSpacePoseContext::Result' has a wrong offset!");
static_assert(offsetof(AnimExecutionContextLibrary_ConvertToComponentSpacePoseContext, ReturnValue) == 0x000018, "Member 'AnimExecutionContextLibrary_ConvertToComponentSpacePoseContext::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.AnimExecutionContextLibrary.ConvertToInitializationContext
// 0x0028 (0x0028 - 0x0000)
struct AnimExecutionContextLibrary_ConvertToInitializationContext final
{
public:
	struct FAnimExecutionContext                  Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EAnimExecutionContextConversionResult         Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimInitializationContext             ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimExecutionContextLibrary_ConvertToInitializationContext) == 0x000008, "Wrong alignment on AnimExecutionContextLibrary_ConvertToInitializationContext");
static_assert(sizeof(AnimExecutionContextLibrary_ConvertToInitializationContext) == 0x000028, "Wrong size on AnimExecutionContextLibrary_ConvertToInitializationContext");
static_assert(offsetof(AnimExecutionContextLibrary_ConvertToInitializationContext, Context) == 0x000000, "Member 'AnimExecutionContextLibrary_ConvertToInitializationContext::Context' has a wrong offset!");
static_assert(offsetof(AnimExecutionContextLibrary_ConvertToInitializationContext, Result) == 0x000010, "Member 'AnimExecutionContextLibrary_ConvertToInitializationContext::Result' has a wrong offset!");
static_assert(offsetof(AnimExecutionContextLibrary_ConvertToInitializationContext, ReturnValue) == 0x000018, "Member 'AnimExecutionContextLibrary_ConvertToInitializationContext::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.AnimExecutionContextLibrary.ConvertToPoseContext
// 0x0028 (0x0028 - 0x0000)
struct AnimExecutionContextLibrary_ConvertToPoseContext final
{
public:
	struct FAnimExecutionContext                  Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EAnimExecutionContextConversionResult         Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimPoseContext                       ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimExecutionContextLibrary_ConvertToPoseContext) == 0x000008, "Wrong alignment on AnimExecutionContextLibrary_ConvertToPoseContext");
static_assert(sizeof(AnimExecutionContextLibrary_ConvertToPoseContext) == 0x000028, "Wrong size on AnimExecutionContextLibrary_ConvertToPoseContext");
static_assert(offsetof(AnimExecutionContextLibrary_ConvertToPoseContext, Context) == 0x000000, "Member 'AnimExecutionContextLibrary_ConvertToPoseContext::Context' has a wrong offset!");
static_assert(offsetof(AnimExecutionContextLibrary_ConvertToPoseContext, Result) == 0x000010, "Member 'AnimExecutionContextLibrary_ConvertToPoseContext::Result' has a wrong offset!");
static_assert(offsetof(AnimExecutionContextLibrary_ConvertToPoseContext, ReturnValue) == 0x000018, "Member 'AnimExecutionContextLibrary_ConvertToPoseContext::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.AnimExecutionContextLibrary.ConvertToUpdateContext
// 0x0028 (0x0028 - 0x0000)
struct AnimExecutionContextLibrary_ConvertToUpdateContext final
{
public:
	struct FAnimExecutionContext                  Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EAnimExecutionContextConversionResult         Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimUpdateContext                     ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimExecutionContextLibrary_ConvertToUpdateContext) == 0x000008, "Wrong alignment on AnimExecutionContextLibrary_ConvertToUpdateContext");
static_assert(sizeof(AnimExecutionContextLibrary_ConvertToUpdateContext) == 0x000028, "Wrong size on AnimExecutionContextLibrary_ConvertToUpdateContext");
static_assert(offsetof(AnimExecutionContextLibrary_ConvertToUpdateContext, Context) == 0x000000, "Member 'AnimExecutionContextLibrary_ConvertToUpdateContext::Context' has a wrong offset!");
static_assert(offsetof(AnimExecutionContextLibrary_ConvertToUpdateContext, Result) == 0x000010, "Member 'AnimExecutionContextLibrary_ConvertToUpdateContext::Result' has a wrong offset!");
static_assert(offsetof(AnimExecutionContextLibrary_ConvertToUpdateContext, ReturnValue) == 0x000018, "Member 'AnimExecutionContextLibrary_ConvertToUpdateContext::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.AnimExecutionContextLibrary.GetAnimInstance
// 0x0018 (0x0018 - 0x0000)
struct AnimExecutionContextLibrary_GetAnimInstance final
{
public:
	struct FAnimExecutionContext                  Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UAnimInstance*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimExecutionContextLibrary_GetAnimInstance) == 0x000008, "Wrong alignment on AnimExecutionContextLibrary_GetAnimInstance");
static_assert(sizeof(AnimExecutionContextLibrary_GetAnimInstance) == 0x000018, "Wrong size on AnimExecutionContextLibrary_GetAnimInstance");
static_assert(offsetof(AnimExecutionContextLibrary_GetAnimInstance, Context) == 0x000000, "Member 'AnimExecutionContextLibrary_GetAnimInstance::Context' has a wrong offset!");
static_assert(offsetof(AnimExecutionContextLibrary_GetAnimInstance, ReturnValue) == 0x000010, "Member 'AnimExecutionContextLibrary_GetAnimInstance::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.AnimExecutionContextLibrary.GetAnimNodeReference
// 0x0020 (0x0020 - 0x0000)
struct AnimExecutionContextLibrary_GetAnimNodeReference final
{
public:
	class UAnimInstance*                          Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNodeReference                     ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimExecutionContextLibrary_GetAnimNodeReference) == 0x000008, "Wrong alignment on AnimExecutionContextLibrary_GetAnimNodeReference");
static_assert(sizeof(AnimExecutionContextLibrary_GetAnimNodeReference) == 0x000020, "Wrong size on AnimExecutionContextLibrary_GetAnimNodeReference");
static_assert(offsetof(AnimExecutionContextLibrary_GetAnimNodeReference, Instance) == 0x000000, "Member 'AnimExecutionContextLibrary_GetAnimNodeReference::Instance' has a wrong offset!");
static_assert(offsetof(AnimExecutionContextLibrary_GetAnimNodeReference, Index_0) == 0x000008, "Member 'AnimExecutionContextLibrary_GetAnimNodeReference::Index_0' has a wrong offset!");
static_assert(offsetof(AnimExecutionContextLibrary_GetAnimNodeReference, ReturnValue) == 0x000010, "Member 'AnimExecutionContextLibrary_GetAnimNodeReference::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.AnimExecutionContextLibrary.GetCurrentWeight
// 0x0018 (0x0018 - 0x0000)
struct AnimExecutionContextLibrary_GetCurrentWeight final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimExecutionContextLibrary_GetCurrentWeight) == 0x000008, "Wrong alignment on AnimExecutionContextLibrary_GetCurrentWeight");
static_assert(sizeof(AnimExecutionContextLibrary_GetCurrentWeight) == 0x000018, "Wrong size on AnimExecutionContextLibrary_GetCurrentWeight");
static_assert(offsetof(AnimExecutionContextLibrary_GetCurrentWeight, Context) == 0x000000, "Member 'AnimExecutionContextLibrary_GetCurrentWeight::Context' has a wrong offset!");
static_assert(offsetof(AnimExecutionContextLibrary_GetCurrentWeight, ReturnValue) == 0x000010, "Member 'AnimExecutionContextLibrary_GetCurrentWeight::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.AnimExecutionContextLibrary.GetDeltaTime
// 0x0018 (0x0018 - 0x0000)
struct AnimExecutionContextLibrary_GetDeltaTime final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimExecutionContextLibrary_GetDeltaTime) == 0x000008, "Wrong alignment on AnimExecutionContextLibrary_GetDeltaTime");
static_assert(sizeof(AnimExecutionContextLibrary_GetDeltaTime) == 0x000018, "Wrong size on AnimExecutionContextLibrary_GetDeltaTime");
static_assert(offsetof(AnimExecutionContextLibrary_GetDeltaTime, Context) == 0x000000, "Member 'AnimExecutionContextLibrary_GetDeltaTime::Context' has a wrong offset!");
static_assert(offsetof(AnimExecutionContextLibrary_GetDeltaTime, ReturnValue) == 0x000010, "Member 'AnimExecutionContextLibrary_GetDeltaTime::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.KismetAnimationLibrary.CalculateDirection
// 0x0038 (0x0038 - 0x0000)
struct KismetAnimationLibrary_CalculateDirection final
{
public:
	struct FVector                                Velocity;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               BaseRotation;                                      // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KismetAnimationLibrary_CalculateDirection) == 0x000008, "Wrong alignment on KismetAnimationLibrary_CalculateDirection");
static_assert(sizeof(KismetAnimationLibrary_CalculateDirection) == 0x000038, "Wrong size on KismetAnimationLibrary_CalculateDirection");
static_assert(offsetof(KismetAnimationLibrary_CalculateDirection, Velocity) == 0x000000, "Member 'KismetAnimationLibrary_CalculateDirection::Velocity' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_CalculateDirection, BaseRotation) == 0x000018, "Member 'KismetAnimationLibrary_CalculateDirection::BaseRotation' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_CalculateDirection, ReturnValue) == 0x000030, "Member 'KismetAnimationLibrary_CalculateDirection::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.KismetAnimationLibrary.K2_CalculateVelocityFromPositionHistory
// 0x0060 (0x0060 - 0x0000)
struct KismetAnimationLibrary_K2_CalculateVelocityFromPositionHistory final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPositionHistory                       History;                                           // 0x0020(0x0030)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         NumberOfSamples;                                   // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityMin;                                       // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityMax;                                       // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x005C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KismetAnimationLibrary_K2_CalculateVelocityFromPositionHistory) == 0x000008, "Wrong alignment on KismetAnimationLibrary_K2_CalculateVelocityFromPositionHistory");
static_assert(sizeof(KismetAnimationLibrary_K2_CalculateVelocityFromPositionHistory) == 0x000060, "Wrong size on KismetAnimationLibrary_K2_CalculateVelocityFromPositionHistory");
static_assert(offsetof(KismetAnimationLibrary_K2_CalculateVelocityFromPositionHistory, DeltaSeconds) == 0x000000, "Member 'KismetAnimationLibrary_K2_CalculateVelocityFromPositionHistory::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_CalculateVelocityFromPositionHistory, Position) == 0x000008, "Member 'KismetAnimationLibrary_K2_CalculateVelocityFromPositionHistory::Position' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_CalculateVelocityFromPositionHistory, History) == 0x000020, "Member 'KismetAnimationLibrary_K2_CalculateVelocityFromPositionHistory::History' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_CalculateVelocityFromPositionHistory, NumberOfSamples) == 0x000050, "Member 'KismetAnimationLibrary_K2_CalculateVelocityFromPositionHistory::NumberOfSamples' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_CalculateVelocityFromPositionHistory, VelocityMin) == 0x000054, "Member 'KismetAnimationLibrary_K2_CalculateVelocityFromPositionHistory::VelocityMin' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_CalculateVelocityFromPositionHistory, VelocityMax) == 0x000058, "Member 'KismetAnimationLibrary_K2_CalculateVelocityFromPositionHistory::VelocityMax' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_CalculateVelocityFromPositionHistory, ReturnValue) == 0x00005C, "Member 'KismetAnimationLibrary_K2_CalculateVelocityFromPositionHistory::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.KismetAnimationLibrary.K2_CalculateVelocityFromSockets
// 0x0108 (0x0108 - 0x0000)
struct KismetAnimationLibrary_K2_CalculateVelocityFromSockets final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketOrBoneName;                                  // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReferenceSocketOrBone;                             // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERelativeTransformSpace                       SocketSpace;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OffsetInBoneSpace;                                 // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPositionHistory                       History;                                           // 0x0038(0x0030)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         NumberOfSamples;                                   // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityMin;                                       // 0x006C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityMax;                                       // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFuncType                               EasingType;                                        // 0x0074(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     CustomCurve;                                       // 0x0078(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0100(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KismetAnimationLibrary_K2_CalculateVelocityFromSockets) == 0x000008, "Wrong alignment on KismetAnimationLibrary_K2_CalculateVelocityFromSockets");
static_assert(sizeof(KismetAnimationLibrary_K2_CalculateVelocityFromSockets) == 0x000108, "Wrong size on KismetAnimationLibrary_K2_CalculateVelocityFromSockets");
static_assert(offsetof(KismetAnimationLibrary_K2_CalculateVelocityFromSockets, DeltaSeconds) == 0x000000, "Member 'KismetAnimationLibrary_K2_CalculateVelocityFromSockets::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_CalculateVelocityFromSockets, Component) == 0x000008, "Member 'KismetAnimationLibrary_K2_CalculateVelocityFromSockets::Component' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_CalculateVelocityFromSockets, SocketOrBoneName) == 0x000010, "Member 'KismetAnimationLibrary_K2_CalculateVelocityFromSockets::SocketOrBoneName' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_CalculateVelocityFromSockets, ReferenceSocketOrBone) == 0x000014, "Member 'KismetAnimationLibrary_K2_CalculateVelocityFromSockets::ReferenceSocketOrBone' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_CalculateVelocityFromSockets, SocketSpace) == 0x000018, "Member 'KismetAnimationLibrary_K2_CalculateVelocityFromSockets::SocketSpace' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_CalculateVelocityFromSockets, OffsetInBoneSpace) == 0x000020, "Member 'KismetAnimationLibrary_K2_CalculateVelocityFromSockets::OffsetInBoneSpace' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_CalculateVelocityFromSockets, History) == 0x000038, "Member 'KismetAnimationLibrary_K2_CalculateVelocityFromSockets::History' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_CalculateVelocityFromSockets, NumberOfSamples) == 0x000068, "Member 'KismetAnimationLibrary_K2_CalculateVelocityFromSockets::NumberOfSamples' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_CalculateVelocityFromSockets, VelocityMin) == 0x00006C, "Member 'KismetAnimationLibrary_K2_CalculateVelocityFromSockets::VelocityMin' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_CalculateVelocityFromSockets, VelocityMax) == 0x000070, "Member 'KismetAnimationLibrary_K2_CalculateVelocityFromSockets::VelocityMax' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_CalculateVelocityFromSockets, EasingType) == 0x000074, "Member 'KismetAnimationLibrary_K2_CalculateVelocityFromSockets::EasingType' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_CalculateVelocityFromSockets, CustomCurve) == 0x000078, "Member 'KismetAnimationLibrary_K2_CalculateVelocityFromSockets::CustomCurve' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_CalculateVelocityFromSockets, ReturnValue) == 0x000100, "Member 'KismetAnimationLibrary_K2_CalculateVelocityFromSockets::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.KismetAnimationLibrary.K2_DirectionBetweenSockets
// 0x0028 (0x0028 - 0x0000)
struct KismetAnimationLibrary_K2_DirectionBetweenSockets final
{
public:
	const class USkeletalMeshComponent*           Component;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketOrBoneNameFrom;                              // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketOrBoneNameTo;                                // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KismetAnimationLibrary_K2_DirectionBetweenSockets) == 0x000008, "Wrong alignment on KismetAnimationLibrary_K2_DirectionBetweenSockets");
static_assert(sizeof(KismetAnimationLibrary_K2_DirectionBetweenSockets) == 0x000028, "Wrong size on KismetAnimationLibrary_K2_DirectionBetweenSockets");
static_assert(offsetof(KismetAnimationLibrary_K2_DirectionBetweenSockets, Component) == 0x000000, "Member 'KismetAnimationLibrary_K2_DirectionBetweenSockets::Component' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_DirectionBetweenSockets, SocketOrBoneNameFrom) == 0x000008, "Member 'KismetAnimationLibrary_K2_DirectionBetweenSockets::SocketOrBoneNameFrom' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_DirectionBetweenSockets, SocketOrBoneNameTo) == 0x00000C, "Member 'KismetAnimationLibrary_K2_DirectionBetweenSockets::SocketOrBoneNameTo' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_DirectionBetweenSockets, ReturnValue) == 0x000010, "Member 'KismetAnimationLibrary_K2_DirectionBetweenSockets::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.KismetAnimationLibrary.K2_DistanceBetweenTwoSocketsAndMapRange
// 0x0030 (0x0030 - 0x0000)
struct KismetAnimationLibrary_K2_DistanceBetweenTwoSocketsAndMapRange final
{
public:
	const class USkeletalMeshComponent*           Component;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketOrBoneNameA;                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERelativeTransformSpace                       SocketSpaceA;                                      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketOrBoneNameB;                                 // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERelativeTransformSpace                       SocketSpaceB;                                      // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemapRange;                                       // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InRangeMin;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRangeMax;                                        // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutRangeMin;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutRangeMax;                                       // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KismetAnimationLibrary_K2_DistanceBetweenTwoSocketsAndMapRange) == 0x000008, "Wrong alignment on KismetAnimationLibrary_K2_DistanceBetweenTwoSocketsAndMapRange");
static_assert(sizeof(KismetAnimationLibrary_K2_DistanceBetweenTwoSocketsAndMapRange) == 0x000030, "Wrong size on KismetAnimationLibrary_K2_DistanceBetweenTwoSocketsAndMapRange");
static_assert(offsetof(KismetAnimationLibrary_K2_DistanceBetweenTwoSocketsAndMapRange, Component) == 0x000000, "Member 'KismetAnimationLibrary_K2_DistanceBetweenTwoSocketsAndMapRange::Component' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_DistanceBetweenTwoSocketsAndMapRange, SocketOrBoneNameA) == 0x000008, "Member 'KismetAnimationLibrary_K2_DistanceBetweenTwoSocketsAndMapRange::SocketOrBoneNameA' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_DistanceBetweenTwoSocketsAndMapRange, SocketSpaceA) == 0x00000C, "Member 'KismetAnimationLibrary_K2_DistanceBetweenTwoSocketsAndMapRange::SocketSpaceA' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_DistanceBetweenTwoSocketsAndMapRange, SocketOrBoneNameB) == 0x000010, "Member 'KismetAnimationLibrary_K2_DistanceBetweenTwoSocketsAndMapRange::SocketOrBoneNameB' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_DistanceBetweenTwoSocketsAndMapRange, SocketSpaceB) == 0x000014, "Member 'KismetAnimationLibrary_K2_DistanceBetweenTwoSocketsAndMapRange::SocketSpaceB' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_DistanceBetweenTwoSocketsAndMapRange, bRemapRange) == 0x000015, "Member 'KismetAnimationLibrary_K2_DistanceBetweenTwoSocketsAndMapRange::bRemapRange' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_DistanceBetweenTwoSocketsAndMapRange, InRangeMin) == 0x000018, "Member 'KismetAnimationLibrary_K2_DistanceBetweenTwoSocketsAndMapRange::InRangeMin' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_DistanceBetweenTwoSocketsAndMapRange, InRangeMax) == 0x00001C, "Member 'KismetAnimationLibrary_K2_DistanceBetweenTwoSocketsAndMapRange::InRangeMax' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_DistanceBetweenTwoSocketsAndMapRange, OutRangeMin) == 0x000020, "Member 'KismetAnimationLibrary_K2_DistanceBetweenTwoSocketsAndMapRange::OutRangeMin' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_DistanceBetweenTwoSocketsAndMapRange, OutRangeMax) == 0x000024, "Member 'KismetAnimationLibrary_K2_DistanceBetweenTwoSocketsAndMapRange::OutRangeMax' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_DistanceBetweenTwoSocketsAndMapRange, ReturnValue) == 0x000028, "Member 'KismetAnimationLibrary_K2_DistanceBetweenTwoSocketsAndMapRange::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.KismetAnimationLibrary.K2_EndProfilingTimer
// 0x0020 (0x0020 - 0x0000)
struct KismetAnimationLibrary_K2_EndProfilingTimer final
{
public:
	bool                                          bLog;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LogPrefix;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KismetAnimationLibrary_K2_EndProfilingTimer) == 0x000008, "Wrong alignment on KismetAnimationLibrary_K2_EndProfilingTimer");
static_assert(sizeof(KismetAnimationLibrary_K2_EndProfilingTimer) == 0x000020, "Wrong size on KismetAnimationLibrary_K2_EndProfilingTimer");
static_assert(offsetof(KismetAnimationLibrary_K2_EndProfilingTimer, bLog) == 0x000000, "Member 'KismetAnimationLibrary_K2_EndProfilingTimer::bLog' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_EndProfilingTimer, LogPrefix) == 0x000008, "Member 'KismetAnimationLibrary_K2_EndProfilingTimer::LogPrefix' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_EndProfilingTimer, ReturnValue) == 0x000018, "Member 'KismetAnimationLibrary_K2_EndProfilingTimer::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.KismetAnimationLibrary.K2_LookAt
// 0x0120 (0x0120 - 0x0000)
struct KismetAnimationLibrary_K2_LookAt final
{
public:
	struct FTransform                             CurrentTransform;                                  // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                TargetPosition;                                    // 0x0060(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LookAtVector;                                      // 0x0078(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseUpVector;                                      // 0x0090(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                UpVector;                                          // 0x0098(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampConeInDegree;                                 // 0x00B0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0xC];                                       // 0x00B4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x00C0(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KismetAnimationLibrary_K2_LookAt) == 0x000010, "Wrong alignment on KismetAnimationLibrary_K2_LookAt");
static_assert(sizeof(KismetAnimationLibrary_K2_LookAt) == 0x000120, "Wrong size on KismetAnimationLibrary_K2_LookAt");
static_assert(offsetof(KismetAnimationLibrary_K2_LookAt, CurrentTransform) == 0x000000, "Member 'KismetAnimationLibrary_K2_LookAt::CurrentTransform' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_LookAt, TargetPosition) == 0x000060, "Member 'KismetAnimationLibrary_K2_LookAt::TargetPosition' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_LookAt, LookAtVector) == 0x000078, "Member 'KismetAnimationLibrary_K2_LookAt::LookAtVector' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_LookAt, bUseUpVector) == 0x000090, "Member 'KismetAnimationLibrary_K2_LookAt::bUseUpVector' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_LookAt, UpVector) == 0x000098, "Member 'KismetAnimationLibrary_K2_LookAt::UpVector' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_LookAt, ClampConeInDegree) == 0x0000B0, "Member 'KismetAnimationLibrary_K2_LookAt::ClampConeInDegree' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_LookAt, ReturnValue) == 0x0000C0, "Member 'KismetAnimationLibrary_K2_LookAt::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.KismetAnimationLibrary.K2_MakePerlinNoiseAndRemap
// 0x0010 (0x0010 - 0x0000)
struct KismetAnimationLibrary_K2_MakePerlinNoiseAndRemap final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeOutMin;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeOutMax;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KismetAnimationLibrary_K2_MakePerlinNoiseAndRemap) == 0x000004, "Wrong alignment on KismetAnimationLibrary_K2_MakePerlinNoiseAndRemap");
static_assert(sizeof(KismetAnimationLibrary_K2_MakePerlinNoiseAndRemap) == 0x000010, "Wrong size on KismetAnimationLibrary_K2_MakePerlinNoiseAndRemap");
static_assert(offsetof(KismetAnimationLibrary_K2_MakePerlinNoiseAndRemap, Value) == 0x000000, "Member 'KismetAnimationLibrary_K2_MakePerlinNoiseAndRemap::Value' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_MakePerlinNoiseAndRemap, RangeOutMin) == 0x000004, "Member 'KismetAnimationLibrary_K2_MakePerlinNoiseAndRemap::RangeOutMin' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_MakePerlinNoiseAndRemap, RangeOutMax) == 0x000008, "Member 'KismetAnimationLibrary_K2_MakePerlinNoiseAndRemap::RangeOutMax' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_MakePerlinNoiseAndRemap, ReturnValue) == 0x00000C, "Member 'KismetAnimationLibrary_K2_MakePerlinNoiseAndRemap::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.KismetAnimationLibrary.K2_MakePerlinNoiseVectorAndRemap
// 0x0040 (0x0040 - 0x0000)
struct KismetAnimationLibrary_K2_MakePerlinNoiseVectorAndRemap final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeOutMinX;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeOutMaxX;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeOutMinY;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeOutMaxY;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeOutMinZ;                                      // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeOutMaxZ;                                      // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KismetAnimationLibrary_K2_MakePerlinNoiseVectorAndRemap) == 0x000008, "Wrong alignment on KismetAnimationLibrary_K2_MakePerlinNoiseVectorAndRemap");
static_assert(sizeof(KismetAnimationLibrary_K2_MakePerlinNoiseVectorAndRemap) == 0x000040, "Wrong size on KismetAnimationLibrary_K2_MakePerlinNoiseVectorAndRemap");
static_assert(offsetof(KismetAnimationLibrary_K2_MakePerlinNoiseVectorAndRemap, X) == 0x000000, "Member 'KismetAnimationLibrary_K2_MakePerlinNoiseVectorAndRemap::X' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_MakePerlinNoiseVectorAndRemap, Y) == 0x000004, "Member 'KismetAnimationLibrary_K2_MakePerlinNoiseVectorAndRemap::Y' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_MakePerlinNoiseVectorAndRemap, Z) == 0x000008, "Member 'KismetAnimationLibrary_K2_MakePerlinNoiseVectorAndRemap::Z' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_MakePerlinNoiseVectorAndRemap, RangeOutMinX) == 0x00000C, "Member 'KismetAnimationLibrary_K2_MakePerlinNoiseVectorAndRemap::RangeOutMinX' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_MakePerlinNoiseVectorAndRemap, RangeOutMaxX) == 0x000010, "Member 'KismetAnimationLibrary_K2_MakePerlinNoiseVectorAndRemap::RangeOutMaxX' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_MakePerlinNoiseVectorAndRemap, RangeOutMinY) == 0x000014, "Member 'KismetAnimationLibrary_K2_MakePerlinNoiseVectorAndRemap::RangeOutMinY' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_MakePerlinNoiseVectorAndRemap, RangeOutMaxY) == 0x000018, "Member 'KismetAnimationLibrary_K2_MakePerlinNoiseVectorAndRemap::RangeOutMaxY' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_MakePerlinNoiseVectorAndRemap, RangeOutMinZ) == 0x00001C, "Member 'KismetAnimationLibrary_K2_MakePerlinNoiseVectorAndRemap::RangeOutMinZ' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_MakePerlinNoiseVectorAndRemap, RangeOutMaxZ) == 0x000020, "Member 'KismetAnimationLibrary_K2_MakePerlinNoiseVectorAndRemap::RangeOutMaxZ' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_MakePerlinNoiseVectorAndRemap, ReturnValue) == 0x000028, "Member 'KismetAnimationLibrary_K2_MakePerlinNoiseVectorAndRemap::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.KismetAnimationLibrary.K2_TwoBoneIK
// 0x00B8 (0x00B8 - 0x0000)
struct KismetAnimationLibrary_K2_TwoBoneIK final
{
public:
	struct FVector                                RootPos;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                JointPos;                                          // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndPos;                                            // 0x0030(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                JointTarget;                                       // 0x0048(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Effector;                                          // 0x0060(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutJointPos;                                       // 0x0078(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutEndPos;                                         // 0x0090(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowStretching;                                  // 0x00A8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartStretchRatio;                                 // 0x00AC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxStretchScale;                                   // 0x00B0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KismetAnimationLibrary_K2_TwoBoneIK) == 0x000008, "Wrong alignment on KismetAnimationLibrary_K2_TwoBoneIK");
static_assert(sizeof(KismetAnimationLibrary_K2_TwoBoneIK) == 0x0000B8, "Wrong size on KismetAnimationLibrary_K2_TwoBoneIK");
static_assert(offsetof(KismetAnimationLibrary_K2_TwoBoneIK, RootPos) == 0x000000, "Member 'KismetAnimationLibrary_K2_TwoBoneIK::RootPos' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_TwoBoneIK, JointPos) == 0x000018, "Member 'KismetAnimationLibrary_K2_TwoBoneIK::JointPos' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_TwoBoneIK, EndPos) == 0x000030, "Member 'KismetAnimationLibrary_K2_TwoBoneIK::EndPos' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_TwoBoneIK, JointTarget) == 0x000048, "Member 'KismetAnimationLibrary_K2_TwoBoneIK::JointTarget' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_TwoBoneIK, Effector) == 0x000060, "Member 'KismetAnimationLibrary_K2_TwoBoneIK::Effector' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_TwoBoneIK, OutJointPos) == 0x000078, "Member 'KismetAnimationLibrary_K2_TwoBoneIK::OutJointPos' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_TwoBoneIK, OutEndPos) == 0x000090, "Member 'KismetAnimationLibrary_K2_TwoBoneIK::OutEndPos' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_TwoBoneIK, bAllowStretching) == 0x0000A8, "Member 'KismetAnimationLibrary_K2_TwoBoneIK::bAllowStretching' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_TwoBoneIK, StartStretchRatio) == 0x0000AC, "Member 'KismetAnimationLibrary_K2_TwoBoneIK::StartStretchRatio' has a wrong offset!");
static_assert(offsetof(KismetAnimationLibrary_K2_TwoBoneIK, MaxStretchScale) == 0x0000B0, "Member 'KismetAnimationLibrary_K2_TwoBoneIK::MaxStretchScale' has a wrong offset!");

// Function AnimGraphRuntime.LinkedAnimGraphLibrary.ConvertToLinkedAnimGraph
// 0x0028 (0x0028 - 0x0000)
struct LinkedAnimGraphLibrary_ConvertToLinkedAnimGraph final
{
public:
	struct FAnimNodeReference                     Node;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EAnimNodeReferenceConversionResult            Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinkedAnimGraphReference              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LinkedAnimGraphLibrary_ConvertToLinkedAnimGraph) == 0x000008, "Wrong alignment on LinkedAnimGraphLibrary_ConvertToLinkedAnimGraph");
static_assert(sizeof(LinkedAnimGraphLibrary_ConvertToLinkedAnimGraph) == 0x000028, "Wrong size on LinkedAnimGraphLibrary_ConvertToLinkedAnimGraph");
static_assert(offsetof(LinkedAnimGraphLibrary_ConvertToLinkedAnimGraph, Node) == 0x000000, "Member 'LinkedAnimGraphLibrary_ConvertToLinkedAnimGraph::Node' has a wrong offset!");
static_assert(offsetof(LinkedAnimGraphLibrary_ConvertToLinkedAnimGraph, Result) == 0x000010, "Member 'LinkedAnimGraphLibrary_ConvertToLinkedAnimGraph::Result' has a wrong offset!");
static_assert(offsetof(LinkedAnimGraphLibrary_ConvertToLinkedAnimGraph, ReturnValue) == 0x000018, "Member 'LinkedAnimGraphLibrary_ConvertToLinkedAnimGraph::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.LinkedAnimGraphLibrary.ConvertToLinkedAnimGraphPure
// 0x0028 (0x0028 - 0x0000)
struct LinkedAnimGraphLibrary_ConvertToLinkedAnimGraphPure final
{
public:
	struct FAnimNodeReference                     Node;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinkedAnimGraphReference              LinkedAnimGraph;                                   // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LinkedAnimGraphLibrary_ConvertToLinkedAnimGraphPure) == 0x000008, "Wrong alignment on LinkedAnimGraphLibrary_ConvertToLinkedAnimGraphPure");
static_assert(sizeof(LinkedAnimGraphLibrary_ConvertToLinkedAnimGraphPure) == 0x000028, "Wrong size on LinkedAnimGraphLibrary_ConvertToLinkedAnimGraphPure");
static_assert(offsetof(LinkedAnimGraphLibrary_ConvertToLinkedAnimGraphPure, Node) == 0x000000, "Member 'LinkedAnimGraphLibrary_ConvertToLinkedAnimGraphPure::Node' has a wrong offset!");
static_assert(offsetof(LinkedAnimGraphLibrary_ConvertToLinkedAnimGraphPure, LinkedAnimGraph) == 0x000010, "Member 'LinkedAnimGraphLibrary_ConvertToLinkedAnimGraphPure::LinkedAnimGraph' has a wrong offset!");
static_assert(offsetof(LinkedAnimGraphLibrary_ConvertToLinkedAnimGraphPure, Result) == 0x000020, "Member 'LinkedAnimGraphLibrary_ConvertToLinkedAnimGraphPure::Result' has a wrong offset!");

// Function AnimGraphRuntime.LinkedAnimGraphLibrary.GetLinkedAnimInstance
// 0x0018 (0x0018 - 0x0000)
struct LinkedAnimGraphLibrary_GetLinkedAnimInstance final
{
public:
	struct FLinkedAnimGraphReference              Node;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UAnimInstance*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LinkedAnimGraphLibrary_GetLinkedAnimInstance) == 0x000008, "Wrong alignment on LinkedAnimGraphLibrary_GetLinkedAnimInstance");
static_assert(sizeof(LinkedAnimGraphLibrary_GetLinkedAnimInstance) == 0x000018, "Wrong size on LinkedAnimGraphLibrary_GetLinkedAnimInstance");
static_assert(offsetof(LinkedAnimGraphLibrary_GetLinkedAnimInstance, Node) == 0x000000, "Member 'LinkedAnimGraphLibrary_GetLinkedAnimInstance::Node' has a wrong offset!");
static_assert(offsetof(LinkedAnimGraphLibrary_GetLinkedAnimInstance, ReturnValue) == 0x000010, "Member 'LinkedAnimGraphLibrary_GetLinkedAnimInstance::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.LinkedAnimGraphLibrary.HasLinkedAnimInstance
// 0x0018 (0x0018 - 0x0000)
struct LinkedAnimGraphLibrary_HasLinkedAnimInstance final
{
public:
	struct FLinkedAnimGraphReference              Node;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LinkedAnimGraphLibrary_HasLinkedAnimInstance) == 0x000008, "Wrong alignment on LinkedAnimGraphLibrary_HasLinkedAnimInstance");
static_assert(sizeof(LinkedAnimGraphLibrary_HasLinkedAnimInstance) == 0x000018, "Wrong size on LinkedAnimGraphLibrary_HasLinkedAnimInstance");
static_assert(offsetof(LinkedAnimGraphLibrary_HasLinkedAnimInstance, Node) == 0x000000, "Member 'LinkedAnimGraphLibrary_HasLinkedAnimInstance::Node' has a wrong offset!");
static_assert(offsetof(LinkedAnimGraphLibrary_HasLinkedAnimInstance, ReturnValue) == 0x000010, "Member 'LinkedAnimGraphLibrary_HasLinkedAnimInstance::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.PlayMontageCallbackProxy.CreateProxyObjectForPlayMontage
// 0x0028 (0x0028 - 0x0000)
struct PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage final
{
public:
	class USkeletalMeshComponent*                 InSkeletalMeshComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           MontageToPlay;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartingPosition;                                  // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartingSection;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayMontageCallbackProxy*              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage) == 0x000008, "Wrong alignment on PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage");
static_assert(sizeof(PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage) == 0x000028, "Wrong size on PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage");
static_assert(offsetof(PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage, InSkeletalMeshComponent) == 0x000000, "Member 'PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage::InSkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage, MontageToPlay) == 0x000008, "Member 'PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage::MontageToPlay' has a wrong offset!");
static_assert(offsetof(PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage, PlayRate) == 0x000010, "Member 'PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage::PlayRate' has a wrong offset!");
static_assert(offsetof(PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage, StartingPosition) == 0x000014, "Member 'PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage::StartingPosition' has a wrong offset!");
static_assert(offsetof(PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage, StartingSection) == 0x000018, "Member 'PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage::StartingSection' has a wrong offset!");
static_assert(offsetof(PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage, ReturnValue) == 0x000020, "Member 'PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.PlayMontageCallbackProxy.OnMontageBlendingOut
// 0x0010 (0x0010 - 0x0000)
struct PlayMontageCallbackProxy_OnMontageBlendingOut final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMontageCallbackProxy_OnMontageBlendingOut) == 0x000008, "Wrong alignment on PlayMontageCallbackProxy_OnMontageBlendingOut");
static_assert(sizeof(PlayMontageCallbackProxy_OnMontageBlendingOut) == 0x000010, "Wrong size on PlayMontageCallbackProxy_OnMontageBlendingOut");
static_assert(offsetof(PlayMontageCallbackProxy_OnMontageBlendingOut, Montage) == 0x000000, "Member 'PlayMontageCallbackProxy_OnMontageBlendingOut::Montage' has a wrong offset!");
static_assert(offsetof(PlayMontageCallbackProxy_OnMontageBlendingOut, bInterrupted) == 0x000008, "Member 'PlayMontageCallbackProxy_OnMontageBlendingOut::bInterrupted' has a wrong offset!");

// Function AnimGraphRuntime.PlayMontageCallbackProxy.OnMontageEnded
// 0x0010 (0x0010 - 0x0000)
struct PlayMontageCallbackProxy_OnMontageEnded final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMontageCallbackProxy_OnMontageEnded) == 0x000008, "Wrong alignment on PlayMontageCallbackProxy_OnMontageEnded");
static_assert(sizeof(PlayMontageCallbackProxy_OnMontageEnded) == 0x000010, "Wrong size on PlayMontageCallbackProxy_OnMontageEnded");
static_assert(offsetof(PlayMontageCallbackProxy_OnMontageEnded, Montage) == 0x000000, "Member 'PlayMontageCallbackProxy_OnMontageEnded::Montage' has a wrong offset!");
static_assert(offsetof(PlayMontageCallbackProxy_OnMontageEnded, bInterrupted) == 0x000008, "Member 'PlayMontageCallbackProxy_OnMontageEnded::bInterrupted' has a wrong offset!");

// Function AnimGraphRuntime.PlayMontageCallbackProxy.OnNotifyBeginReceived
// 0x0028 (0x0028 - 0x0000)
struct PlayMontageCallbackProxy_OnNotifyBeginReceived final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBranchingPointNotifyPayload           BranchingPointNotifyPayload;                       // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMontageCallbackProxy_OnNotifyBeginReceived) == 0x000008, "Wrong alignment on PlayMontageCallbackProxy_OnNotifyBeginReceived");
static_assert(sizeof(PlayMontageCallbackProxy_OnNotifyBeginReceived) == 0x000028, "Wrong size on PlayMontageCallbackProxy_OnNotifyBeginReceived");
static_assert(offsetof(PlayMontageCallbackProxy_OnNotifyBeginReceived, NotifyName) == 0x000000, "Member 'PlayMontageCallbackProxy_OnNotifyBeginReceived::NotifyName' has a wrong offset!");
static_assert(offsetof(PlayMontageCallbackProxy_OnNotifyBeginReceived, BranchingPointNotifyPayload) == 0x000008, "Member 'PlayMontageCallbackProxy_OnNotifyBeginReceived::BranchingPointNotifyPayload' has a wrong offset!");

// Function AnimGraphRuntime.PlayMontageCallbackProxy.OnNotifyEndReceived
// 0x0028 (0x0028 - 0x0000)
struct PlayMontageCallbackProxy_OnNotifyEndReceived final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBranchingPointNotifyPayload           BranchingPointNotifyPayload;                       // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMontageCallbackProxy_OnNotifyEndReceived) == 0x000008, "Wrong alignment on PlayMontageCallbackProxy_OnNotifyEndReceived");
static_assert(sizeof(PlayMontageCallbackProxy_OnNotifyEndReceived) == 0x000028, "Wrong size on PlayMontageCallbackProxy_OnNotifyEndReceived");
static_assert(offsetof(PlayMontageCallbackProxy_OnNotifyEndReceived, NotifyName) == 0x000000, "Member 'PlayMontageCallbackProxy_OnNotifyEndReceived::NotifyName' has a wrong offset!");
static_assert(offsetof(PlayMontageCallbackProxy_OnNotifyEndReceived, BranchingPointNotifyPayload) == 0x000008, "Member 'PlayMontageCallbackProxy_OnNotifyEndReceived::BranchingPointNotifyPayload' has a wrong offset!");

// Function AnimGraphRuntime.SequenceEvaluatorLibrary.AdvanceTime
// 0x0038 (0x0038 - 0x0000)
struct SequenceEvaluatorLibrary_AdvanceTime final
{
public:
	struct FAnimUpdateContext                     UpdateContext;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSequenceEvaluatorReference            SequenceEvaluator;                                 // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequenceEvaluatorReference            ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequenceEvaluatorLibrary_AdvanceTime) == 0x000008, "Wrong alignment on SequenceEvaluatorLibrary_AdvanceTime");
static_assert(sizeof(SequenceEvaluatorLibrary_AdvanceTime) == 0x000038, "Wrong size on SequenceEvaluatorLibrary_AdvanceTime");
static_assert(offsetof(SequenceEvaluatorLibrary_AdvanceTime, UpdateContext) == 0x000000, "Member 'SequenceEvaluatorLibrary_AdvanceTime::UpdateContext' has a wrong offset!");
static_assert(offsetof(SequenceEvaluatorLibrary_AdvanceTime, SequenceEvaluator) == 0x000010, "Member 'SequenceEvaluatorLibrary_AdvanceTime::SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(SequenceEvaluatorLibrary_AdvanceTime, PlayRate) == 0x000020, "Member 'SequenceEvaluatorLibrary_AdvanceTime::PlayRate' has a wrong offset!");
static_assert(offsetof(SequenceEvaluatorLibrary_AdvanceTime, ReturnValue) == 0x000028, "Member 'SequenceEvaluatorLibrary_AdvanceTime::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.SequenceEvaluatorLibrary.ConvertToSequenceEvaluator
// 0x0028 (0x0028 - 0x0000)
struct SequenceEvaluatorLibrary_ConvertToSequenceEvaluator final
{
public:
	struct FAnimNodeReference                     Node;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EAnimNodeReferenceConversionResult            Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequenceEvaluatorReference            ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequenceEvaluatorLibrary_ConvertToSequenceEvaluator) == 0x000008, "Wrong alignment on SequenceEvaluatorLibrary_ConvertToSequenceEvaluator");
static_assert(sizeof(SequenceEvaluatorLibrary_ConvertToSequenceEvaluator) == 0x000028, "Wrong size on SequenceEvaluatorLibrary_ConvertToSequenceEvaluator");
static_assert(offsetof(SequenceEvaluatorLibrary_ConvertToSequenceEvaluator, Node) == 0x000000, "Member 'SequenceEvaluatorLibrary_ConvertToSequenceEvaluator::Node' has a wrong offset!");
static_assert(offsetof(SequenceEvaluatorLibrary_ConvertToSequenceEvaluator, Result) == 0x000010, "Member 'SequenceEvaluatorLibrary_ConvertToSequenceEvaluator::Result' has a wrong offset!");
static_assert(offsetof(SequenceEvaluatorLibrary_ConvertToSequenceEvaluator, ReturnValue) == 0x000018, "Member 'SequenceEvaluatorLibrary_ConvertToSequenceEvaluator::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.SequenceEvaluatorLibrary.ConvertToSequenceEvaluatorPure
// 0x0028 (0x0028 - 0x0000)
struct SequenceEvaluatorLibrary_ConvertToSequenceEvaluatorPure final
{
public:
	struct FAnimNodeReference                     Node;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSequenceEvaluatorReference            SequenceEvaluator;                                 // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SequenceEvaluatorLibrary_ConvertToSequenceEvaluatorPure) == 0x000008, "Wrong alignment on SequenceEvaluatorLibrary_ConvertToSequenceEvaluatorPure");
static_assert(sizeof(SequenceEvaluatorLibrary_ConvertToSequenceEvaluatorPure) == 0x000028, "Wrong size on SequenceEvaluatorLibrary_ConvertToSequenceEvaluatorPure");
static_assert(offsetof(SequenceEvaluatorLibrary_ConvertToSequenceEvaluatorPure, Node) == 0x000000, "Member 'SequenceEvaluatorLibrary_ConvertToSequenceEvaluatorPure::Node' has a wrong offset!");
static_assert(offsetof(SequenceEvaluatorLibrary_ConvertToSequenceEvaluatorPure, SequenceEvaluator) == 0x000010, "Member 'SequenceEvaluatorLibrary_ConvertToSequenceEvaluatorPure::SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(SequenceEvaluatorLibrary_ConvertToSequenceEvaluatorPure, Result) == 0x000020, "Member 'SequenceEvaluatorLibrary_ConvertToSequenceEvaluatorPure::Result' has a wrong offset!");

// Function AnimGraphRuntime.SequenceEvaluatorLibrary.SetExplicitTime
// 0x0028 (0x0028 - 0x0000)
struct SequenceEvaluatorLibrary_SetExplicitTime final
{
public:
	struct FSequenceEvaluatorReference            SequenceEvaluator;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequenceEvaluatorReference            ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequenceEvaluatorLibrary_SetExplicitTime) == 0x000008, "Wrong alignment on SequenceEvaluatorLibrary_SetExplicitTime");
static_assert(sizeof(SequenceEvaluatorLibrary_SetExplicitTime) == 0x000028, "Wrong size on SequenceEvaluatorLibrary_SetExplicitTime");
static_assert(offsetof(SequenceEvaluatorLibrary_SetExplicitTime, SequenceEvaluator) == 0x000000, "Member 'SequenceEvaluatorLibrary_SetExplicitTime::SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(SequenceEvaluatorLibrary_SetExplicitTime, Time) == 0x000010, "Member 'SequenceEvaluatorLibrary_SetExplicitTime::Time' has a wrong offset!");
static_assert(offsetof(SequenceEvaluatorLibrary_SetExplicitTime, ReturnValue) == 0x000018, "Member 'SequenceEvaluatorLibrary_SetExplicitTime::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.SequenceEvaluatorLibrary.SetSequence
// 0x0028 (0x0028 - 0x0000)
struct SequenceEvaluatorLibrary_SetSequence final
{
public:
	struct FSequenceEvaluatorReference            SequenceEvaluator;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Sequence;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSequenceEvaluatorReference            ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequenceEvaluatorLibrary_SetSequence) == 0x000008, "Wrong alignment on SequenceEvaluatorLibrary_SetSequence");
static_assert(sizeof(SequenceEvaluatorLibrary_SetSequence) == 0x000028, "Wrong size on SequenceEvaluatorLibrary_SetSequence");
static_assert(offsetof(SequenceEvaluatorLibrary_SetSequence, SequenceEvaluator) == 0x000000, "Member 'SequenceEvaluatorLibrary_SetSequence::SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(SequenceEvaluatorLibrary_SetSequence, Sequence) == 0x000010, "Member 'SequenceEvaluatorLibrary_SetSequence::Sequence' has a wrong offset!");
static_assert(offsetof(SequenceEvaluatorLibrary_SetSequence, ReturnValue) == 0x000018, "Member 'SequenceEvaluatorLibrary_SetSequence::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.SequenceEvaluatorLibrary.SetSequenceWithInertialBlending
// 0x0040 (0x0040 - 0x0000)
struct SequenceEvaluatorLibrary_SetSequenceWithInertialBlending final
{
public:
	struct FAnimUpdateContext                     UpdateContext;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSequenceEvaluatorReference            SequenceEvaluator;                                 // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Sequence;                                          // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequenceEvaluatorReference            ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequenceEvaluatorLibrary_SetSequenceWithInertialBlending) == 0x000008, "Wrong alignment on SequenceEvaluatorLibrary_SetSequenceWithInertialBlending");
static_assert(sizeof(SequenceEvaluatorLibrary_SetSequenceWithInertialBlending) == 0x000040, "Wrong size on SequenceEvaluatorLibrary_SetSequenceWithInertialBlending");
static_assert(offsetof(SequenceEvaluatorLibrary_SetSequenceWithInertialBlending, UpdateContext) == 0x000000, "Member 'SequenceEvaluatorLibrary_SetSequenceWithInertialBlending::UpdateContext' has a wrong offset!");
static_assert(offsetof(SequenceEvaluatorLibrary_SetSequenceWithInertialBlending, SequenceEvaluator) == 0x000010, "Member 'SequenceEvaluatorLibrary_SetSequenceWithInertialBlending::SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(SequenceEvaluatorLibrary_SetSequenceWithInertialBlending, Sequence) == 0x000020, "Member 'SequenceEvaluatorLibrary_SetSequenceWithInertialBlending::Sequence' has a wrong offset!");
static_assert(offsetof(SequenceEvaluatorLibrary_SetSequenceWithInertialBlending, BlendTime) == 0x000028, "Member 'SequenceEvaluatorLibrary_SetSequenceWithInertialBlending::BlendTime' has a wrong offset!");
static_assert(offsetof(SequenceEvaluatorLibrary_SetSequenceWithInertialBlending, ReturnValue) == 0x000030, "Member 'SequenceEvaluatorLibrary_SetSequenceWithInertialBlending::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.SequencePlayerLibrary.ConvertToSequencePlayer
// 0x0028 (0x0028 - 0x0000)
struct SequencePlayerLibrary_ConvertToSequencePlayer final
{
public:
	struct FAnimNodeReference                     Node;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EAnimNodeReferenceConversionResult            Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequencePlayerReference               ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequencePlayerLibrary_ConvertToSequencePlayer) == 0x000008, "Wrong alignment on SequencePlayerLibrary_ConvertToSequencePlayer");
static_assert(sizeof(SequencePlayerLibrary_ConvertToSequencePlayer) == 0x000028, "Wrong size on SequencePlayerLibrary_ConvertToSequencePlayer");
static_assert(offsetof(SequencePlayerLibrary_ConvertToSequencePlayer, Node) == 0x000000, "Member 'SequencePlayerLibrary_ConvertToSequencePlayer::Node' has a wrong offset!");
static_assert(offsetof(SequencePlayerLibrary_ConvertToSequencePlayer, Result) == 0x000010, "Member 'SequencePlayerLibrary_ConvertToSequencePlayer::Result' has a wrong offset!");
static_assert(offsetof(SequencePlayerLibrary_ConvertToSequencePlayer, ReturnValue) == 0x000018, "Member 'SequencePlayerLibrary_ConvertToSequencePlayer::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.SequencePlayerLibrary.ConvertToSequencePlayerPure
// 0x0028 (0x0028 - 0x0000)
struct SequencePlayerLibrary_ConvertToSequencePlayerPure final
{
public:
	struct FAnimNodeReference                     Node;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSequencePlayerReference               SequencePlayer;                                    // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SequencePlayerLibrary_ConvertToSequencePlayerPure) == 0x000008, "Wrong alignment on SequencePlayerLibrary_ConvertToSequencePlayerPure");
static_assert(sizeof(SequencePlayerLibrary_ConvertToSequencePlayerPure) == 0x000028, "Wrong size on SequencePlayerLibrary_ConvertToSequencePlayerPure");
static_assert(offsetof(SequencePlayerLibrary_ConvertToSequencePlayerPure, Node) == 0x000000, "Member 'SequencePlayerLibrary_ConvertToSequencePlayerPure::Node' has a wrong offset!");
static_assert(offsetof(SequencePlayerLibrary_ConvertToSequencePlayerPure, SequencePlayer) == 0x000010, "Member 'SequencePlayerLibrary_ConvertToSequencePlayerPure::SequencePlayer' has a wrong offset!");
static_assert(offsetof(SequencePlayerLibrary_ConvertToSequencePlayerPure, Result) == 0x000020, "Member 'SequencePlayerLibrary_ConvertToSequencePlayerPure::Result' has a wrong offset!");

// Function AnimGraphRuntime.SequencePlayerLibrary.GetAccumulatedTime
// 0x0018 (0x0018 - 0x0000)
struct SequencePlayerLibrary_GetAccumulatedTime final
{
public:
	struct FSequencePlayerReference               SequencePlayer;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SequencePlayerLibrary_GetAccumulatedTime) == 0x000008, "Wrong alignment on SequencePlayerLibrary_GetAccumulatedTime");
static_assert(sizeof(SequencePlayerLibrary_GetAccumulatedTime) == 0x000018, "Wrong size on SequencePlayerLibrary_GetAccumulatedTime");
static_assert(offsetof(SequencePlayerLibrary_GetAccumulatedTime, SequencePlayer) == 0x000000, "Member 'SequencePlayerLibrary_GetAccumulatedTime::SequencePlayer' has a wrong offset!");
static_assert(offsetof(SequencePlayerLibrary_GetAccumulatedTime, ReturnValue) == 0x000010, "Member 'SequencePlayerLibrary_GetAccumulatedTime::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.SequencePlayerLibrary.GetLoopAnimation
// 0x0018 (0x0018 - 0x0000)
struct SequencePlayerLibrary_GetLoopAnimation final
{
public:
	struct FSequencePlayerReference               SequencePlayer;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SequencePlayerLibrary_GetLoopAnimation) == 0x000008, "Wrong alignment on SequencePlayerLibrary_GetLoopAnimation");
static_assert(sizeof(SequencePlayerLibrary_GetLoopAnimation) == 0x000018, "Wrong size on SequencePlayerLibrary_GetLoopAnimation");
static_assert(offsetof(SequencePlayerLibrary_GetLoopAnimation, SequencePlayer) == 0x000000, "Member 'SequencePlayerLibrary_GetLoopAnimation::SequencePlayer' has a wrong offset!");
static_assert(offsetof(SequencePlayerLibrary_GetLoopAnimation, ReturnValue) == 0x000010, "Member 'SequencePlayerLibrary_GetLoopAnimation::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.SequencePlayerLibrary.GetPlayRate
// 0x0018 (0x0018 - 0x0000)
struct SequencePlayerLibrary_GetPlayRate final
{
public:
	struct FSequencePlayerReference               SequencePlayer;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SequencePlayerLibrary_GetPlayRate) == 0x000008, "Wrong alignment on SequencePlayerLibrary_GetPlayRate");
static_assert(sizeof(SequencePlayerLibrary_GetPlayRate) == 0x000018, "Wrong size on SequencePlayerLibrary_GetPlayRate");
static_assert(offsetof(SequencePlayerLibrary_GetPlayRate, SequencePlayer) == 0x000000, "Member 'SequencePlayerLibrary_GetPlayRate::SequencePlayer' has a wrong offset!");
static_assert(offsetof(SequencePlayerLibrary_GetPlayRate, ReturnValue) == 0x000010, "Member 'SequencePlayerLibrary_GetPlayRate::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.SequencePlayerLibrary.GetSequence
// 0x0018 (0x0018 - 0x0000)
struct SequencePlayerLibrary_GetSequence final
{
public:
	struct FSequencePlayerReference               SequencePlayer;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequencePlayerLibrary_GetSequence) == 0x000008, "Wrong alignment on SequencePlayerLibrary_GetSequence");
static_assert(sizeof(SequencePlayerLibrary_GetSequence) == 0x000018, "Wrong size on SequencePlayerLibrary_GetSequence");
static_assert(offsetof(SequencePlayerLibrary_GetSequence, SequencePlayer) == 0x000000, "Member 'SequencePlayerLibrary_GetSequence::SequencePlayer' has a wrong offset!");
static_assert(offsetof(SequencePlayerLibrary_GetSequence, ReturnValue) == 0x000010, "Member 'SequencePlayerLibrary_GetSequence::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.SequencePlayerLibrary.GetStartPosition
// 0x0018 (0x0018 - 0x0000)
struct SequencePlayerLibrary_GetStartPosition final
{
public:
	struct FSequencePlayerReference               SequencePlayer;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SequencePlayerLibrary_GetStartPosition) == 0x000008, "Wrong alignment on SequencePlayerLibrary_GetStartPosition");
static_assert(sizeof(SequencePlayerLibrary_GetStartPosition) == 0x000018, "Wrong size on SequencePlayerLibrary_GetStartPosition");
static_assert(offsetof(SequencePlayerLibrary_GetStartPosition, SequencePlayer) == 0x000000, "Member 'SequencePlayerLibrary_GetStartPosition::SequencePlayer' has a wrong offset!");
static_assert(offsetof(SequencePlayerLibrary_GetStartPosition, ReturnValue) == 0x000010, "Member 'SequencePlayerLibrary_GetStartPosition::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.SequencePlayerLibrary.SetAccumulatedTime
// 0x0028 (0x0028 - 0x0000)
struct SequencePlayerLibrary_SetAccumulatedTime final
{
public:
	struct FSequencePlayerReference               SequencePlayer;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequencePlayerReference               ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequencePlayerLibrary_SetAccumulatedTime) == 0x000008, "Wrong alignment on SequencePlayerLibrary_SetAccumulatedTime");
static_assert(sizeof(SequencePlayerLibrary_SetAccumulatedTime) == 0x000028, "Wrong size on SequencePlayerLibrary_SetAccumulatedTime");
static_assert(offsetof(SequencePlayerLibrary_SetAccumulatedTime, SequencePlayer) == 0x000000, "Member 'SequencePlayerLibrary_SetAccumulatedTime::SequencePlayer' has a wrong offset!");
static_assert(offsetof(SequencePlayerLibrary_SetAccumulatedTime, Time) == 0x000010, "Member 'SequencePlayerLibrary_SetAccumulatedTime::Time' has a wrong offset!");
static_assert(offsetof(SequencePlayerLibrary_SetAccumulatedTime, ReturnValue) == 0x000018, "Member 'SequencePlayerLibrary_SetAccumulatedTime::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.SequencePlayerLibrary.SetPlayRate
// 0x0028 (0x0028 - 0x0000)
struct SequencePlayerLibrary_SetPlayRate final
{
public:
	struct FSequencePlayerReference               SequencePlayer;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequencePlayerReference               ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequencePlayerLibrary_SetPlayRate) == 0x000008, "Wrong alignment on SequencePlayerLibrary_SetPlayRate");
static_assert(sizeof(SequencePlayerLibrary_SetPlayRate) == 0x000028, "Wrong size on SequencePlayerLibrary_SetPlayRate");
static_assert(offsetof(SequencePlayerLibrary_SetPlayRate, SequencePlayer) == 0x000000, "Member 'SequencePlayerLibrary_SetPlayRate::SequencePlayer' has a wrong offset!");
static_assert(offsetof(SequencePlayerLibrary_SetPlayRate, PlayRate) == 0x000010, "Member 'SequencePlayerLibrary_SetPlayRate::PlayRate' has a wrong offset!");
static_assert(offsetof(SequencePlayerLibrary_SetPlayRate, ReturnValue) == 0x000018, "Member 'SequencePlayerLibrary_SetPlayRate::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.SequencePlayerLibrary.SetSequence
// 0x0028 (0x0028 - 0x0000)
struct SequencePlayerLibrary_SetSequence final
{
public:
	struct FSequencePlayerReference               SequencePlayer;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Sequence;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSequencePlayerReference               ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequencePlayerLibrary_SetSequence) == 0x000008, "Wrong alignment on SequencePlayerLibrary_SetSequence");
static_assert(sizeof(SequencePlayerLibrary_SetSequence) == 0x000028, "Wrong size on SequencePlayerLibrary_SetSequence");
static_assert(offsetof(SequencePlayerLibrary_SetSequence, SequencePlayer) == 0x000000, "Member 'SequencePlayerLibrary_SetSequence::SequencePlayer' has a wrong offset!");
static_assert(offsetof(SequencePlayerLibrary_SetSequence, Sequence) == 0x000010, "Member 'SequencePlayerLibrary_SetSequence::Sequence' has a wrong offset!");
static_assert(offsetof(SequencePlayerLibrary_SetSequence, ReturnValue) == 0x000018, "Member 'SequencePlayerLibrary_SetSequence::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.SequencePlayerLibrary.SetSequenceWithInertialBlending
// 0x0040 (0x0040 - 0x0000)
struct SequencePlayerLibrary_SetSequenceWithInertialBlending final
{
public:
	struct FAnimUpdateContext                     UpdateContext;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSequencePlayerReference               SequencePlayer;                                    // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Sequence;                                          // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequencePlayerReference               ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequencePlayerLibrary_SetSequenceWithInertialBlending) == 0x000008, "Wrong alignment on SequencePlayerLibrary_SetSequenceWithInertialBlending");
static_assert(sizeof(SequencePlayerLibrary_SetSequenceWithInertialBlending) == 0x000040, "Wrong size on SequencePlayerLibrary_SetSequenceWithInertialBlending");
static_assert(offsetof(SequencePlayerLibrary_SetSequenceWithInertialBlending, UpdateContext) == 0x000000, "Member 'SequencePlayerLibrary_SetSequenceWithInertialBlending::UpdateContext' has a wrong offset!");
static_assert(offsetof(SequencePlayerLibrary_SetSequenceWithInertialBlending, SequencePlayer) == 0x000010, "Member 'SequencePlayerLibrary_SetSequenceWithInertialBlending::SequencePlayer' has a wrong offset!");
static_assert(offsetof(SequencePlayerLibrary_SetSequenceWithInertialBlending, Sequence) == 0x000020, "Member 'SequencePlayerLibrary_SetSequenceWithInertialBlending::Sequence' has a wrong offset!");
static_assert(offsetof(SequencePlayerLibrary_SetSequenceWithInertialBlending, BlendTime) == 0x000028, "Member 'SequencePlayerLibrary_SetSequenceWithInertialBlending::BlendTime' has a wrong offset!");
static_assert(offsetof(SequencePlayerLibrary_SetSequenceWithInertialBlending, ReturnValue) == 0x000030, "Member 'SequencePlayerLibrary_SetSequenceWithInertialBlending::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.SequencePlayerLibrary.SetStartPosition
// 0x0028 (0x0028 - 0x0000)
struct SequencePlayerLibrary_SetStartPosition final
{
public:
	struct FSequencePlayerReference               SequencePlayer;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         StartPosition;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequencePlayerReference               ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequencePlayerLibrary_SetStartPosition) == 0x000008, "Wrong alignment on SequencePlayerLibrary_SetStartPosition");
static_assert(sizeof(SequencePlayerLibrary_SetStartPosition) == 0x000028, "Wrong size on SequencePlayerLibrary_SetStartPosition");
static_assert(offsetof(SequencePlayerLibrary_SetStartPosition, SequencePlayer) == 0x000000, "Member 'SequencePlayerLibrary_SetStartPosition::SequencePlayer' has a wrong offset!");
static_assert(offsetof(SequencePlayerLibrary_SetStartPosition, StartPosition) == 0x000010, "Member 'SequencePlayerLibrary_SetStartPosition::StartPosition' has a wrong offset!");
static_assert(offsetof(SequencePlayerLibrary_SetStartPosition, ReturnValue) == 0x000018, "Member 'SequencePlayerLibrary_SetStartPosition::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.SkeletalControlLibrary.ConvertToSkeletalControl
// 0x0028 (0x0028 - 0x0000)
struct SkeletalControlLibrary_ConvertToSkeletalControl final
{
public:
	struct FAnimNodeReference                     Node;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EAnimNodeReferenceConversionResult            Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkeletalControlReference              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkeletalControlLibrary_ConvertToSkeletalControl) == 0x000008, "Wrong alignment on SkeletalControlLibrary_ConvertToSkeletalControl");
static_assert(sizeof(SkeletalControlLibrary_ConvertToSkeletalControl) == 0x000028, "Wrong size on SkeletalControlLibrary_ConvertToSkeletalControl");
static_assert(offsetof(SkeletalControlLibrary_ConvertToSkeletalControl, Node) == 0x000000, "Member 'SkeletalControlLibrary_ConvertToSkeletalControl::Node' has a wrong offset!");
static_assert(offsetof(SkeletalControlLibrary_ConvertToSkeletalControl, Result) == 0x000010, "Member 'SkeletalControlLibrary_ConvertToSkeletalControl::Result' has a wrong offset!");
static_assert(offsetof(SkeletalControlLibrary_ConvertToSkeletalControl, ReturnValue) == 0x000018, "Member 'SkeletalControlLibrary_ConvertToSkeletalControl::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.SkeletalControlLibrary.ConvertToSkeletalControlPure
// 0x0028 (0x0028 - 0x0000)
struct SkeletalControlLibrary_ConvertToSkeletalControlPure final
{
public:
	struct FAnimNodeReference                     Node;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkeletalControlReference              SkeletalControl;                                   // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SkeletalControlLibrary_ConvertToSkeletalControlPure) == 0x000008, "Wrong alignment on SkeletalControlLibrary_ConvertToSkeletalControlPure");
static_assert(sizeof(SkeletalControlLibrary_ConvertToSkeletalControlPure) == 0x000028, "Wrong size on SkeletalControlLibrary_ConvertToSkeletalControlPure");
static_assert(offsetof(SkeletalControlLibrary_ConvertToSkeletalControlPure, Node) == 0x000000, "Member 'SkeletalControlLibrary_ConvertToSkeletalControlPure::Node' has a wrong offset!");
static_assert(offsetof(SkeletalControlLibrary_ConvertToSkeletalControlPure, SkeletalControl) == 0x000010, "Member 'SkeletalControlLibrary_ConvertToSkeletalControlPure::SkeletalControl' has a wrong offset!");
static_assert(offsetof(SkeletalControlLibrary_ConvertToSkeletalControlPure, Result) == 0x000020, "Member 'SkeletalControlLibrary_ConvertToSkeletalControlPure::Result' has a wrong offset!");

// Function AnimGraphRuntime.SkeletalControlLibrary.GetAlpha
// 0x0018 (0x0018 - 0x0000)
struct SkeletalControlLibrary_GetAlpha final
{
public:
	struct FSkeletalControlReference              SkeletalControl;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SkeletalControlLibrary_GetAlpha) == 0x000008, "Wrong alignment on SkeletalControlLibrary_GetAlpha");
static_assert(sizeof(SkeletalControlLibrary_GetAlpha) == 0x000018, "Wrong size on SkeletalControlLibrary_GetAlpha");
static_assert(offsetof(SkeletalControlLibrary_GetAlpha, SkeletalControl) == 0x000000, "Member 'SkeletalControlLibrary_GetAlpha::SkeletalControl' has a wrong offset!");
static_assert(offsetof(SkeletalControlLibrary_GetAlpha, ReturnValue) == 0x000010, "Member 'SkeletalControlLibrary_GetAlpha::ReturnValue' has a wrong offset!");

// Function AnimGraphRuntime.SkeletalControlLibrary.SetAlpha
// 0x0028 (0x0028 - 0x0000)
struct SkeletalControlLibrary_SetAlpha final
{
public:
	struct FSkeletalControlReference              SkeletalControl;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkeletalControlReference              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkeletalControlLibrary_SetAlpha) == 0x000008, "Wrong alignment on SkeletalControlLibrary_SetAlpha");
static_assert(sizeof(SkeletalControlLibrary_SetAlpha) == 0x000028, "Wrong size on SkeletalControlLibrary_SetAlpha");
static_assert(offsetof(SkeletalControlLibrary_SetAlpha, SkeletalControl) == 0x000000, "Member 'SkeletalControlLibrary_SetAlpha::SkeletalControl' has a wrong offset!");
static_assert(offsetof(SkeletalControlLibrary_SetAlpha, Alpha) == 0x000010, "Member 'SkeletalControlLibrary_SetAlpha::Alpha' has a wrong offset!");
static_assert(offsetof(SkeletalControlLibrary_SetAlpha, ReturnValue) == 0x000018, "Member 'SkeletalControlLibrary_SetAlpha::ReturnValue' has a wrong offset!");

}

