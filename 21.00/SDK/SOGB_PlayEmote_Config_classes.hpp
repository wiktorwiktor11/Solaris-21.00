#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SOGB_PlayEmote_Config

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayBehaviorsModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass SOGB_PlayEmote_Config.SOGB_PlayEmote_Config_C
// 0x0080 (0x00B0 - 0x0030)
class USOGB_PlayEmote_Config_C final : public UGameplayBehaviorConfig
{
public:
	float                                         StartDelay;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPrimaryAssetId>                EmotePrimaryAssetIdList;                           // 0x0038(0x0010)(Edit, BlueprintVisible)
	float                                         EmotingTotalDuration;                              // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EmoteInterval;                                     // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LoopEmote;                                         // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseRandomEmoteInList;                              // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseSameEmoteAtEndWhenLooping;                      // 0x0052(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseDifferentRandomEmote;                           // 0x0053(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseSpeechBubbles;                                  // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LoopSpeechBubbles;                                 // 0x0055(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpeechBubbleDelay;                                 // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpeechBubbleDuration;                              // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpeechBubbleInterval;                              // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      SpeechBubbleGameplayTagQuery;                      // 0x0068(0x0048)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SOGB_PlayEmote_Config_C">();
	}
	static class USOGB_PlayEmote_Config_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USOGB_PlayEmote_Config_C>();
	}
};
static_assert(alignof(USOGB_PlayEmote_Config_C) == 0x000008, "Wrong alignment on USOGB_PlayEmote_Config_C");
static_assert(sizeof(USOGB_PlayEmote_Config_C) == 0x0000B0, "Wrong size on USOGB_PlayEmote_Config_C");
static_assert(offsetof(USOGB_PlayEmote_Config_C, StartDelay) == 0x000030, "Member 'USOGB_PlayEmote_Config_C::StartDelay' has a wrong offset!");
static_assert(offsetof(USOGB_PlayEmote_Config_C, EmotePrimaryAssetIdList) == 0x000038, "Member 'USOGB_PlayEmote_Config_C::EmotePrimaryAssetIdList' has a wrong offset!");
static_assert(offsetof(USOGB_PlayEmote_Config_C, EmotingTotalDuration) == 0x000048, "Member 'USOGB_PlayEmote_Config_C::EmotingTotalDuration' has a wrong offset!");
static_assert(offsetof(USOGB_PlayEmote_Config_C, EmoteInterval) == 0x00004C, "Member 'USOGB_PlayEmote_Config_C::EmoteInterval' has a wrong offset!");
static_assert(offsetof(USOGB_PlayEmote_Config_C, LoopEmote) == 0x000050, "Member 'USOGB_PlayEmote_Config_C::LoopEmote' has a wrong offset!");
static_assert(offsetof(USOGB_PlayEmote_Config_C, UseRandomEmoteInList) == 0x000051, "Member 'USOGB_PlayEmote_Config_C::UseRandomEmoteInList' has a wrong offset!");
static_assert(offsetof(USOGB_PlayEmote_Config_C, UseSameEmoteAtEndWhenLooping) == 0x000052, "Member 'USOGB_PlayEmote_Config_C::UseSameEmoteAtEndWhenLooping' has a wrong offset!");
static_assert(offsetof(USOGB_PlayEmote_Config_C, UseDifferentRandomEmote) == 0x000053, "Member 'USOGB_PlayEmote_Config_C::UseDifferentRandomEmote' has a wrong offset!");
static_assert(offsetof(USOGB_PlayEmote_Config_C, UseSpeechBubbles) == 0x000054, "Member 'USOGB_PlayEmote_Config_C::UseSpeechBubbles' has a wrong offset!");
static_assert(offsetof(USOGB_PlayEmote_Config_C, LoopSpeechBubbles) == 0x000055, "Member 'USOGB_PlayEmote_Config_C::LoopSpeechBubbles' has a wrong offset!");
static_assert(offsetof(USOGB_PlayEmote_Config_C, SpeechBubbleDelay) == 0x000058, "Member 'USOGB_PlayEmote_Config_C::SpeechBubbleDelay' has a wrong offset!");
static_assert(offsetof(USOGB_PlayEmote_Config_C, SpeechBubbleDuration) == 0x00005C, "Member 'USOGB_PlayEmote_Config_C::SpeechBubbleDuration' has a wrong offset!");
static_assert(offsetof(USOGB_PlayEmote_Config_C, SpeechBubbleInterval) == 0x000060, "Member 'USOGB_PlayEmote_Config_C::SpeechBubbleInterval' has a wrong offset!");
static_assert(offsetof(USOGB_PlayEmote_Config_C, SpeechBubbleGameplayTagQuery) == 0x000068, "Member 'USOGB_PlayEmote_Config_C::SpeechBubbleGameplayTagQuery' has a wrong offset!");

}

