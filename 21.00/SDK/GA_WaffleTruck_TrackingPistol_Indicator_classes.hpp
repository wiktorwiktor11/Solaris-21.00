#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_WaffleTruck_TrackingPistol_Indicator

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_WaffleTruck_TrackingPistol_Indicator.GA_WaffleTruck_TrackingPistol_Indicator_C
// 0x0058 (0x0B68 - 0x0B10)
class UGA_WaffleTruck_TrackingPistol_Indicator_C final : public UFortGameplayAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0B10(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class AActor*>                         HitActors;                                         // 0x0B18(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class UParticleSystem*                        IndicatorParticleSystem;                           // 0x0B28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   IndicatorActorParamName;                           // 0x0B30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   IndicatorVectorParamName;                          // 0x0B34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 IndicatorGroupID;                                  // 0x0B38(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         IndicatorDuration;                                 // 0x0B48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4C[0x4];                                      // 0x0B4C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             IndicatorSound;                                    // 0x0B50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UClass*>                         EnemyMarkingGE;                                    // 0x0B58(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_GA_WaffleTruck_TrackingPistol_Indicator(int32 EntryPoint);
	void GetAvatarAsFortPawn(class AFortPawn** AsFort_Pawn);
	class AFortPlayerController* GetAvatarAsFortPlayerController();
	TArray<class AActor*> GetHitActorsFromEventData(const struct FGameplayEventData& GameplayEventData);
	bool IsDamgeFromSourceWeapon(const struct FGameplayEventData& GameplayEventData);
	bool IsPawnAndNotFriendly(const class AActor* OwningController, const class AActor* HitActor);
	void K2_ActivateAbilityFromEvent(const struct FGameplayEventData& EventData);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_WaffleTruck_TrackingPistol_Indicator_C">();
	}
	static class UGA_WaffleTruck_TrackingPistol_Indicator_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_WaffleTruck_TrackingPistol_Indicator_C>();
	}
};
static_assert(alignof(UGA_WaffleTruck_TrackingPistol_Indicator_C) == 0x000008, "Wrong alignment on UGA_WaffleTruck_TrackingPistol_Indicator_C");
static_assert(sizeof(UGA_WaffleTruck_TrackingPistol_Indicator_C) == 0x000B68, "Wrong size on UGA_WaffleTruck_TrackingPistol_Indicator_C");
static_assert(offsetof(UGA_WaffleTruck_TrackingPistol_Indicator_C, UberGraphFrame) == 0x000B10, "Member 'UGA_WaffleTruck_TrackingPistol_Indicator_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_WaffleTruck_TrackingPistol_Indicator_C, HitActors) == 0x000B18, "Member 'UGA_WaffleTruck_TrackingPistol_Indicator_C::HitActors' has a wrong offset!");
static_assert(offsetof(UGA_WaffleTruck_TrackingPistol_Indicator_C, IndicatorParticleSystem) == 0x000B28, "Member 'UGA_WaffleTruck_TrackingPistol_Indicator_C::IndicatorParticleSystem' has a wrong offset!");
static_assert(offsetof(UGA_WaffleTruck_TrackingPistol_Indicator_C, IndicatorActorParamName) == 0x000B30, "Member 'UGA_WaffleTruck_TrackingPistol_Indicator_C::IndicatorActorParamName' has a wrong offset!");
static_assert(offsetof(UGA_WaffleTruck_TrackingPistol_Indicator_C, IndicatorVectorParamName) == 0x000B34, "Member 'UGA_WaffleTruck_TrackingPistol_Indicator_C::IndicatorVectorParamName' has a wrong offset!");
static_assert(offsetof(UGA_WaffleTruck_TrackingPistol_Indicator_C, IndicatorGroupID) == 0x000B38, "Member 'UGA_WaffleTruck_TrackingPistol_Indicator_C::IndicatorGroupID' has a wrong offset!");
static_assert(offsetof(UGA_WaffleTruck_TrackingPistol_Indicator_C, IndicatorDuration) == 0x000B48, "Member 'UGA_WaffleTruck_TrackingPistol_Indicator_C::IndicatorDuration' has a wrong offset!");
static_assert(offsetof(UGA_WaffleTruck_TrackingPistol_Indicator_C, IndicatorSound) == 0x000B50, "Member 'UGA_WaffleTruck_TrackingPistol_Indicator_C::IndicatorSound' has a wrong offset!");
static_assert(offsetof(UGA_WaffleTruck_TrackingPistol_Indicator_C, EnemyMarkingGE) == 0x000B58, "Member 'UGA_WaffleTruck_TrackingPistol_Indicator_C::EnemyMarkingGE' has a wrong offset!");

}

