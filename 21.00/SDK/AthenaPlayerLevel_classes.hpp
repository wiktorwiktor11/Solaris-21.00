#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AthenaPlayerLevel

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CommonUI_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass AthenaPlayerLevel.AthenaPlayerLevel_C
// 0x0088 (0x0368 - 0x02E0)
class UAthenaPlayerLevel_C final : public UCommonUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       AnimateXpAndLevel;                                 // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       AnimateXp;                                         // 0x02F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UNamedSlot*                             ExtraContentArea;                                  // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UNamedSlot*                             LevelRewardArea;                                   // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       LevelText;                                         // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UPlayerRankEmblem_C*                    PlayerBanner;                                      // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UNamedSlot*                             TotalContentSlot;                                  // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 XpBar;                                             // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       XpText;                                            // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          Animating;                                         // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_331[0x3];                                      // 0x0331(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentXp;                                         // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TargetXp;                                          // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WrapAroundXp;                                      // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         XpToAdd;                                           // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         XpLerp;                                            // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentLevel;                                      // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxLevel;                                          // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LevelXpForLevel;                                   // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_354[0x4];                                      // 0x0354(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int32 Level)>   LevelChanged;                                      // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void AnimateBar();
	void Destruct();
	void EventTrack_Leveled();
	void ExecuteUbergraph_AthenaPlayerLevel(int32 EntryPoint);
	void InitializeFromAccount(struct FFortPublicAccountInfo& FortPublicAccountInfo);
	void InitializeFromLevelInfo(const struct FAthenaLevelInfo& LevelInfo);
	void IsReadyForNextXpReward(bool* Ready);
	void Play_Xp_Reward(const struct FAthenaMatchXpReward& Reward);
	void Play_XP_Reward_Directly(int32 XpToAdd_0);
	void PreConstruct(bool IsDesignTime);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void UpdateLevel(int32 Value);
	void UpdateXp(int32 LevelXp, int32 LevelXpForLevel_0, int32 Level, int32 MaxLevel_0);
	void WidgetAnimationEvt_AnimateXp_K2Node_WidgetAnimationEvent_0();
	void WidgetAnimationEvt_AnimateXpAndLevel_K2Node_WidgetAnimationEvent_1();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AthenaPlayerLevel_C">();
	}
	static class UAthenaPlayerLevel_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaPlayerLevel_C>();
	}
};
static_assert(alignof(UAthenaPlayerLevel_C) == 0x000008, "Wrong alignment on UAthenaPlayerLevel_C");
static_assert(sizeof(UAthenaPlayerLevel_C) == 0x000368, "Wrong size on UAthenaPlayerLevel_C");
static_assert(offsetof(UAthenaPlayerLevel_C, UberGraphFrame) == 0x0002E0, "Member 'UAthenaPlayerLevel_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, AnimateXpAndLevel) == 0x0002E8, "Member 'UAthenaPlayerLevel_C::AnimateXpAndLevel' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, AnimateXp) == 0x0002F0, "Member 'UAthenaPlayerLevel_C::AnimateXp' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, ExtraContentArea) == 0x0002F8, "Member 'UAthenaPlayerLevel_C::ExtraContentArea' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, LevelRewardArea) == 0x000300, "Member 'UAthenaPlayerLevel_C::LevelRewardArea' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, LevelText) == 0x000308, "Member 'UAthenaPlayerLevel_C::LevelText' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, PlayerBanner) == 0x000310, "Member 'UAthenaPlayerLevel_C::PlayerBanner' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, TotalContentSlot) == 0x000318, "Member 'UAthenaPlayerLevel_C::TotalContentSlot' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, XpBar) == 0x000320, "Member 'UAthenaPlayerLevel_C::XpBar' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, XpText) == 0x000328, "Member 'UAthenaPlayerLevel_C::XpText' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, Animating) == 0x000330, "Member 'UAthenaPlayerLevel_C::Animating' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, CurrentXp) == 0x000334, "Member 'UAthenaPlayerLevel_C::CurrentXp' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, TargetXp) == 0x000338, "Member 'UAthenaPlayerLevel_C::TargetXp' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, WrapAroundXp) == 0x00033C, "Member 'UAthenaPlayerLevel_C::WrapAroundXp' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, XpToAdd) == 0x000340, "Member 'UAthenaPlayerLevel_C::XpToAdd' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, XpLerp) == 0x000344, "Member 'UAthenaPlayerLevel_C::XpLerp' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, CurrentLevel) == 0x000348, "Member 'UAthenaPlayerLevel_C::CurrentLevel' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, MaxLevel) == 0x00034C, "Member 'UAthenaPlayerLevel_C::MaxLevel' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, LevelXpForLevel) == 0x000350, "Member 'UAthenaPlayerLevel_C::LevelXpForLevel' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, LevelChanged) == 0x000358, "Member 'UAthenaPlayerLevel_C::LevelChanged' has a wrong offset!");

}

