#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WaterfallGamePlay

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Apollo_Waterbody_Waterfall_Transition_Parent_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_WaterfallGamePlay.BP_WaterfallGamePlay_C
// 0x00D8 (0x0518 - 0x0440)
class ABP_WaterfallGamePlay_C : public AApollo_Waterbody_Waterfall_Transition_Parent_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_WaterfallGamePlay_C;             // 0x0440(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          CollisionBox;                                      // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ImpulseVolumeSize;                                 // 0x0450(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ImpulseVolumePos;                                  // 0x0468(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WaterfallForwardVector;                            // 0x0480(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WaterfallBehindVector;                             // 0x0498(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BounceLocation;                                    // 0x04B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPawn*                              OverlapPawn;                                       // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsForwardDirection;                                // 0x04D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D1[0x7];                                      // 0x04D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  OverlapController;                                 // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NoCeilingBounceHeight;                             // 0x04E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BounceHeight;                                      // 0x04E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         JumpHeight;                                        // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FinalBounceJumpHeight;                             // 0x04EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FinalXVector;                                      // 0x04F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FinalYVector;                                      // 0x04F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BounceXYVelocityMofifier;                          // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4FC[0x4];                                      // 0x04FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 GE_PlayerLaunched;                                 // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   LaunchForceFeedback;                               // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_ThroughWaterfall;                               // 0x0510(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void CeilingCheck(bool* Success);
	void CheckWaterFallBounceDirection(bool* isForward);
	void ExecuteUbergraph_BP_WaterfallGamePlay(int32 EntryPoint);
	void ReceiveBeginPlay();
	void Touched(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_WaterfallGamePlay_C">();
	}
	static class ABP_WaterfallGamePlay_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_WaterfallGamePlay_C>();
	}
};
static_assert(alignof(ABP_WaterfallGamePlay_C) == 0x000008, "Wrong alignment on ABP_WaterfallGamePlay_C");
static_assert(sizeof(ABP_WaterfallGamePlay_C) == 0x000518, "Wrong size on ABP_WaterfallGamePlay_C");
static_assert(offsetof(ABP_WaterfallGamePlay_C, UberGraphFrame_BP_WaterfallGamePlay_C) == 0x000440, "Member 'ABP_WaterfallGamePlay_C::UberGraphFrame_BP_WaterfallGamePlay_C' has a wrong offset!");
static_assert(offsetof(ABP_WaterfallGamePlay_C, CollisionBox) == 0x000448, "Member 'ABP_WaterfallGamePlay_C::CollisionBox' has a wrong offset!");
static_assert(offsetof(ABP_WaterfallGamePlay_C, ImpulseVolumeSize) == 0x000450, "Member 'ABP_WaterfallGamePlay_C::ImpulseVolumeSize' has a wrong offset!");
static_assert(offsetof(ABP_WaterfallGamePlay_C, ImpulseVolumePos) == 0x000468, "Member 'ABP_WaterfallGamePlay_C::ImpulseVolumePos' has a wrong offset!");
static_assert(offsetof(ABP_WaterfallGamePlay_C, WaterfallForwardVector) == 0x000480, "Member 'ABP_WaterfallGamePlay_C::WaterfallForwardVector' has a wrong offset!");
static_assert(offsetof(ABP_WaterfallGamePlay_C, WaterfallBehindVector) == 0x000498, "Member 'ABP_WaterfallGamePlay_C::WaterfallBehindVector' has a wrong offset!");
static_assert(offsetof(ABP_WaterfallGamePlay_C, BounceLocation) == 0x0004B0, "Member 'ABP_WaterfallGamePlay_C::BounceLocation' has a wrong offset!");
static_assert(offsetof(ABP_WaterfallGamePlay_C, OverlapPawn) == 0x0004C8, "Member 'ABP_WaterfallGamePlay_C::OverlapPawn' has a wrong offset!");
static_assert(offsetof(ABP_WaterfallGamePlay_C, IsForwardDirection) == 0x0004D0, "Member 'ABP_WaterfallGamePlay_C::IsForwardDirection' has a wrong offset!");
static_assert(offsetof(ABP_WaterfallGamePlay_C, OverlapController) == 0x0004D8, "Member 'ABP_WaterfallGamePlay_C::OverlapController' has a wrong offset!");
static_assert(offsetof(ABP_WaterfallGamePlay_C, NoCeilingBounceHeight) == 0x0004E0, "Member 'ABP_WaterfallGamePlay_C::NoCeilingBounceHeight' has a wrong offset!");
static_assert(offsetof(ABP_WaterfallGamePlay_C, BounceHeight) == 0x0004E4, "Member 'ABP_WaterfallGamePlay_C::BounceHeight' has a wrong offset!");
static_assert(offsetof(ABP_WaterfallGamePlay_C, JumpHeight) == 0x0004E8, "Member 'ABP_WaterfallGamePlay_C::JumpHeight' has a wrong offset!");
static_assert(offsetof(ABP_WaterfallGamePlay_C, FinalBounceJumpHeight) == 0x0004EC, "Member 'ABP_WaterfallGamePlay_C::FinalBounceJumpHeight' has a wrong offset!");
static_assert(offsetof(ABP_WaterfallGamePlay_C, FinalXVector) == 0x0004F0, "Member 'ABP_WaterfallGamePlay_C::FinalXVector' has a wrong offset!");
static_assert(offsetof(ABP_WaterfallGamePlay_C, FinalYVector) == 0x0004F4, "Member 'ABP_WaterfallGamePlay_C::FinalYVector' has a wrong offset!");
static_assert(offsetof(ABP_WaterfallGamePlay_C, BounceXYVelocityMofifier) == 0x0004F8, "Member 'ABP_WaterfallGamePlay_C::BounceXYVelocityMofifier' has a wrong offset!");
static_assert(offsetof(ABP_WaterfallGamePlay_C, GE_PlayerLaunched) == 0x000500, "Member 'ABP_WaterfallGamePlay_C::GE_PlayerLaunched' has a wrong offset!");
static_assert(offsetof(ABP_WaterfallGamePlay_C, LaunchForceFeedback) == 0x000508, "Member 'ABP_WaterfallGamePlay_C::LaunchForceFeedback' has a wrong offset!");
static_assert(offsetof(ABP_WaterfallGamePlay_C, GC_ThroughWaterfall) == 0x000510, "Member 'ABP_WaterfallGamePlay_C::GC_ThroughWaterfall' has a wrong offset!");

}

