#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Account

#include "Basic.hpp"

#include "Account_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class Account.ExternalAccountProvider
// 0x0010 (0x0038 - 0x0028)
class UExternalAccountProvider final : public UObject
{
public:
	TArray<struct FExternalAccountServiceConfig>  Services;                                          // 0x0028(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ExternalAccountProvider">();
	}
	static class UExternalAccountProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UExternalAccountProvider>();
	}
};
static_assert(alignof(UExternalAccountProvider) == 0x000008, "Wrong alignment on UExternalAccountProvider");
static_assert(sizeof(UExternalAccountProvider) == 0x000038, "Wrong size on UExternalAccountProvider");
static_assert(offsetof(UExternalAccountProvider, Services) == 0x000028, "Member 'UExternalAccountProvider::Services' has a wrong offset!");

// Class Account.OnlineAccountCommon
// 0x07A0 (0x07C8 - 0x0028)
class UOnlineAccountCommon : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AvailabilityServiceGameName;                       // 0x0038(0x0010)(ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRequireLightswitchAtStartup;                      // 0x0048(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EulaKey;                                           // 0x0050(0x0010)(ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FString, class FString>            EulaKeyMapping;                                    // 0x0060(0x0050)(Config, Protected, NativeAccessSpecifierProtected)
	bool                                          bEnableWaitingRoom;                                // 0x00B0(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebEnvUrl>                     WebCreateEpicAccountUrl;                           // 0x00B8(0x0010)(ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)
	bool                                          bAllowLocalLogout;                                 // 0x00C8(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C9[0x37];                                      // 0x00C9(0x0037)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultLoginStepTimeout;                           // 0x0100(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, float>                      CustomLoginStepTimeouts;                           // 0x0108(0x0050)(Config, NativeAccessSpecifierPrivate)
	uint8                                         Pad_158[0x8];                                      // 0x0158(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RedeemAccessUrl;                                   // 0x0160(0x0010)(ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 RequestFreeAccessUrl;                              // 0x0170(0x0010)(ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 RealGameAccessUrl;                                 // 0x0180(0x0010)(ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SkipRedeemOfflinePurchasesChance;                  // 0x0190(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseFreeAccessInsteadOfGameAccess;                 // 0x0194(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldGrantFreeAccess;                            // 0x0195(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_196[0x1];                                      // 0x0196(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bAllowHomeSharingAccess;                           // 0x0197(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRequireUGCPrivilege;                              // 0x0198(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_199[0x297];                                    // 0x0199(0x0297)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AccessGrantDelaySeconds;                           // 0x0430(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_434[0x4];                                      // 0x0434(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWaitingRoomState*                      WaitingRoomState;                                  // 0x0438(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_440[0x350];                                    // 0x0440(0x0350)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bAutoCreateHeadlessAccount;                        // 0x0790(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_791[0x37];                                     // 0x0791(0x0037)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OnlineAccountCommon">();
	}
	static class UOnlineAccountCommon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOnlineAccountCommon>();
	}
};
static_assert(alignof(UOnlineAccountCommon) == 0x000008, "Wrong alignment on UOnlineAccountCommon");
static_assert(sizeof(UOnlineAccountCommon) == 0x0007C8, "Wrong size on UOnlineAccountCommon");
static_assert(offsetof(UOnlineAccountCommon, AvailabilityServiceGameName) == 0x000038, "Member 'UOnlineAccountCommon::AvailabilityServiceGameName' has a wrong offset!");
static_assert(offsetof(UOnlineAccountCommon, bRequireLightswitchAtStartup) == 0x000048, "Member 'UOnlineAccountCommon::bRequireLightswitchAtStartup' has a wrong offset!");
static_assert(offsetof(UOnlineAccountCommon, EulaKey) == 0x000050, "Member 'UOnlineAccountCommon::EulaKey' has a wrong offset!");
static_assert(offsetof(UOnlineAccountCommon, EulaKeyMapping) == 0x000060, "Member 'UOnlineAccountCommon::EulaKeyMapping' has a wrong offset!");
static_assert(offsetof(UOnlineAccountCommon, bEnableWaitingRoom) == 0x0000B0, "Member 'UOnlineAccountCommon::bEnableWaitingRoom' has a wrong offset!");
static_assert(offsetof(UOnlineAccountCommon, WebCreateEpicAccountUrl) == 0x0000B8, "Member 'UOnlineAccountCommon::WebCreateEpicAccountUrl' has a wrong offset!");
static_assert(offsetof(UOnlineAccountCommon, bAllowLocalLogout) == 0x0000C8, "Member 'UOnlineAccountCommon::bAllowLocalLogout' has a wrong offset!");
static_assert(offsetof(UOnlineAccountCommon, DefaultLoginStepTimeout) == 0x000100, "Member 'UOnlineAccountCommon::DefaultLoginStepTimeout' has a wrong offset!");
static_assert(offsetof(UOnlineAccountCommon, CustomLoginStepTimeouts) == 0x000108, "Member 'UOnlineAccountCommon::CustomLoginStepTimeouts' has a wrong offset!");
static_assert(offsetof(UOnlineAccountCommon, RedeemAccessUrl) == 0x000160, "Member 'UOnlineAccountCommon::RedeemAccessUrl' has a wrong offset!");
static_assert(offsetof(UOnlineAccountCommon, RequestFreeAccessUrl) == 0x000170, "Member 'UOnlineAccountCommon::RequestFreeAccessUrl' has a wrong offset!");
static_assert(offsetof(UOnlineAccountCommon, RealGameAccessUrl) == 0x000180, "Member 'UOnlineAccountCommon::RealGameAccessUrl' has a wrong offset!");
static_assert(offsetof(UOnlineAccountCommon, SkipRedeemOfflinePurchasesChance) == 0x000190, "Member 'UOnlineAccountCommon::SkipRedeemOfflinePurchasesChance' has a wrong offset!");
static_assert(offsetof(UOnlineAccountCommon, bUseFreeAccessInsteadOfGameAccess) == 0x000194, "Member 'UOnlineAccountCommon::bUseFreeAccessInsteadOfGameAccess' has a wrong offset!");
static_assert(offsetof(UOnlineAccountCommon, bShouldGrantFreeAccess) == 0x000195, "Member 'UOnlineAccountCommon::bShouldGrantFreeAccess' has a wrong offset!");
static_assert(offsetof(UOnlineAccountCommon, bAllowHomeSharingAccess) == 0x000197, "Member 'UOnlineAccountCommon::bAllowHomeSharingAccess' has a wrong offset!");
static_assert(offsetof(UOnlineAccountCommon, bRequireUGCPrivilege) == 0x000198, "Member 'UOnlineAccountCommon::bRequireUGCPrivilege' has a wrong offset!");
static_assert(offsetof(UOnlineAccountCommon, AccessGrantDelaySeconds) == 0x000430, "Member 'UOnlineAccountCommon::AccessGrantDelaySeconds' has a wrong offset!");
static_assert(offsetof(UOnlineAccountCommon, WaitingRoomState) == 0x000438, "Member 'UOnlineAccountCommon::WaitingRoomState' has a wrong offset!");
static_assert(offsetof(UOnlineAccountCommon, bAutoCreateHeadlessAccount) == 0x000790, "Member 'UOnlineAccountCommon::bAutoCreateHeadlessAccount' has a wrong offset!");

// Class Account.WaitingRoomState
// 0x0060 (0x0088 - 0x0028)
class UWaitingRoomState final : public UObject
{
public:
	uint8                                         Pad_28[0x34];                                      // 0x0028(0x0034)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GracePeriodMins;                                   // 0x005C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_60[0x28];                                      // 0x0060(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaitingRoomState">();
	}
	static class UWaitingRoomState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaitingRoomState>();
	}
};
static_assert(alignof(UWaitingRoomState) == 0x000008, "Wrong alignment on UWaitingRoomState");
static_assert(sizeof(UWaitingRoomState) == 0x000088, "Wrong size on UWaitingRoomState");
static_assert(offsetof(UWaitingRoomState, GracePeriodMins) == 0x00005C, "Member 'UWaitingRoomState::GracePeriodMins' has a wrong offset!");

}

