#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WestSausageSwingingComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function WestSausageSwingingComponent.WestSausageSwingingComponent_C.ExecuteUbergraph_WestSausageSwingingComponent
// 0x0068 (0x0068 - 0x0000)
struct WestSausageSwingingComponent_C_ExecuteUbergraph_WestSausageSwingingComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bHitSomething;                        // 0x0004(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bUseBlocked;                          // 0x0005(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsWeaponAimingAtTarget;              // 0x0006(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_TargetPos;                            // 0x0008(0x0018)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AB_Ranged_WestSausage_Parallel_Athena_C* K2Node_DynamicCast_AsB_Ranged_West_Sausage_Parallel_Athena; // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AB_Ranged_WestSausage_Parallel_Athena_C* K2Node_DynamicCast_AsB_Ranged_West_Sausage_Parallel_Athena_1; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_2;                   // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AB_Ranged_WestSausage_Parallel_Athena_C* K2Node_DynamicCast_AsB_Ranged_West_Sausage_Parallel_Athena_2; // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WestSausageSwingingComponent_C_ExecuteUbergraph_WestSausageSwingingComponent) == 0x000008, "Wrong alignment on WestSausageSwingingComponent_C_ExecuteUbergraph_WestSausageSwingingComponent");
static_assert(sizeof(WestSausageSwingingComponent_C_ExecuteUbergraph_WestSausageSwingingComponent) == 0x000068, "Wrong size on WestSausageSwingingComponent_C_ExecuteUbergraph_WestSausageSwingingComponent");
static_assert(offsetof(WestSausageSwingingComponent_C_ExecuteUbergraph_WestSausageSwingingComponent, EntryPoint) == 0x000000, "Member 'WestSausageSwingingComponent_C_ExecuteUbergraph_WestSausageSwingingComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(WestSausageSwingingComponent_C_ExecuteUbergraph_WestSausageSwingingComponent, K2Node_Event_bHitSomething) == 0x000004, "Member 'WestSausageSwingingComponent_C_ExecuteUbergraph_WestSausageSwingingComponent::K2Node_Event_bHitSomething' has a wrong offset!");
static_assert(offsetof(WestSausageSwingingComponent_C_ExecuteUbergraph_WestSausageSwingingComponent, K2Node_Event_bUseBlocked) == 0x000005, "Member 'WestSausageSwingingComponent_C_ExecuteUbergraph_WestSausageSwingingComponent::K2Node_Event_bUseBlocked' has a wrong offset!");
static_assert(offsetof(WestSausageSwingingComponent_C_ExecuteUbergraph_WestSausageSwingingComponent, K2Node_Event_bIsWeaponAimingAtTarget) == 0x000006, "Member 'WestSausageSwingingComponent_C_ExecuteUbergraph_WestSausageSwingingComponent::K2Node_Event_bIsWeaponAimingAtTarget' has a wrong offset!");
static_assert(offsetof(WestSausageSwingingComponent_C_ExecuteUbergraph_WestSausageSwingingComponent, K2Node_Event_TargetPos) == 0x000008, "Member 'WestSausageSwingingComponent_C_ExecuteUbergraph_WestSausageSwingingComponent::K2Node_Event_TargetPos' has a wrong offset!");
static_assert(offsetof(WestSausageSwingingComponent_C_ExecuteUbergraph_WestSausageSwingingComponent, CallFunc_GetOwner_ReturnValue) == 0x000020, "Member 'WestSausageSwingingComponent_C_ExecuteUbergraph_WestSausageSwingingComponent::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(WestSausageSwingingComponent_C_ExecuteUbergraph_WestSausageSwingingComponent, K2Node_DynamicCast_AsB_Ranged_West_Sausage_Parallel_Athena) == 0x000028, "Member 'WestSausageSwingingComponent_C_ExecuteUbergraph_WestSausageSwingingComponent::K2Node_DynamicCast_AsB_Ranged_West_Sausage_Parallel_Athena' has a wrong offset!");
static_assert(offsetof(WestSausageSwingingComponent_C_ExecuteUbergraph_WestSausageSwingingComponent, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'WestSausageSwingingComponent_C_ExecuteUbergraph_WestSausageSwingingComponent::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WestSausageSwingingComponent_C_ExecuteUbergraph_WestSausageSwingingComponent, CallFunc_GetOwner_ReturnValue_1) == 0x000038, "Member 'WestSausageSwingingComponent_C_ExecuteUbergraph_WestSausageSwingingComponent::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WestSausageSwingingComponent_C_ExecuteUbergraph_WestSausageSwingingComponent, K2Node_DynamicCast_AsB_Ranged_West_Sausage_Parallel_Athena_1) == 0x000040, "Member 'WestSausageSwingingComponent_C_ExecuteUbergraph_WestSausageSwingingComponent::K2Node_DynamicCast_AsB_Ranged_West_Sausage_Parallel_Athena_1' has a wrong offset!");
static_assert(offsetof(WestSausageSwingingComponent_C_ExecuteUbergraph_WestSausageSwingingComponent, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'WestSausageSwingingComponent_C_ExecuteUbergraph_WestSausageSwingingComponent::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WestSausageSwingingComponent_C_ExecuteUbergraph_WestSausageSwingingComponent, CallFunc_GetOwner_ReturnValue_2) == 0x000050, "Member 'WestSausageSwingingComponent_C_ExecuteUbergraph_WestSausageSwingingComponent::CallFunc_GetOwner_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WestSausageSwingingComponent_C_ExecuteUbergraph_WestSausageSwingingComponent, K2Node_DynamicCast_AsB_Ranged_West_Sausage_Parallel_Athena_2) == 0x000058, "Member 'WestSausageSwingingComponent_C_ExecuteUbergraph_WestSausageSwingingComponent::K2Node_DynamicCast_AsB_Ranged_West_Sausage_Parallel_Athena_2' has a wrong offset!");
static_assert(offsetof(WestSausageSwingingComponent_C_ExecuteUbergraph_WestSausageSwingingComponent, K2Node_DynamicCast_bSuccess_2) == 0x000060, "Member 'WestSausageSwingingComponent_C_ExecuteUbergraph_WestSausageSwingingComponent::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");

// Function WestSausageSwingingComponent.WestSausageSwingingComponent_C.UpdateReticle
// 0x0020 (0x0020 - 0x0000)
struct WestSausageSwingingComponent_C_UpdateReticle final
{
public:
	bool                                          bHitSomething;                                     // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseBlocked;                                       // 0x0001(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsWeaponAimingAtTarget;                           // 0x0002(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetPos;                                         // 0x0008(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WestSausageSwingingComponent_C_UpdateReticle) == 0x000008, "Wrong alignment on WestSausageSwingingComponent_C_UpdateReticle");
static_assert(sizeof(WestSausageSwingingComponent_C_UpdateReticle) == 0x000020, "Wrong size on WestSausageSwingingComponent_C_UpdateReticle");
static_assert(offsetof(WestSausageSwingingComponent_C_UpdateReticle, bHitSomething) == 0x000000, "Member 'WestSausageSwingingComponent_C_UpdateReticle::bHitSomething' has a wrong offset!");
static_assert(offsetof(WestSausageSwingingComponent_C_UpdateReticle, bUseBlocked) == 0x000001, "Member 'WestSausageSwingingComponent_C_UpdateReticle::bUseBlocked' has a wrong offset!");
static_assert(offsetof(WestSausageSwingingComponent_C_UpdateReticle, bIsWeaponAimingAtTarget) == 0x000002, "Member 'WestSausageSwingingComponent_C_UpdateReticle::bIsWeaponAimingAtTarget' has a wrong offset!");
static_assert(offsetof(WestSausageSwingingComponent_C_UpdateReticle, TargetPos) == 0x000008, "Member 'WestSausageSwingingComponent_C_UpdateReticle::TargetPos' has a wrong offset!");

}

