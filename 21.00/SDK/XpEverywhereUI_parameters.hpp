#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: XpEverywhereUI

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"


namespace SDK::Params
{

// Function XpEverywhereUI.XpEverywhereAccoladesWidget.OpenWidget
// 0x0088 (0x0088 - 0x0000)
struct XpEverywhereAccoladesWidget_OpenWidget final
{
public:
	const class UFortAccoladeItemDefinition*      AccoladeDef;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XPValue;                                           // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              AccoladeLargePreviewImageOverride;                 // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   SimulatedName;                                     // 0x0050(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   SimulatedText;                                     // 0x0068(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EFortSimulatedXPSize                          SimulatedXpSize;                                   // 0x0080(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(XpEverywhereAccoladesWidget_OpenWidget) == 0x000008, "Wrong alignment on XpEverywhereAccoladesWidget_OpenWidget");
static_assert(sizeof(XpEverywhereAccoladesWidget_OpenWidget) == 0x000088, "Wrong size on XpEverywhereAccoladesWidget_OpenWidget");
static_assert(offsetof(XpEverywhereAccoladesWidget_OpenWidget, AccoladeDef) == 0x000000, "Member 'XpEverywhereAccoladesWidget_OpenWidget::AccoladeDef' has a wrong offset!");
static_assert(offsetof(XpEverywhereAccoladesWidget_OpenWidget, XPValue) == 0x000008, "Member 'XpEverywhereAccoladesWidget_OpenWidget::XPValue' has a wrong offset!");
static_assert(offsetof(XpEverywhereAccoladesWidget_OpenWidget, DisplayName) == 0x000010, "Member 'XpEverywhereAccoladesWidget_OpenWidget::DisplayName' has a wrong offset!");
static_assert(offsetof(XpEverywhereAccoladesWidget_OpenWidget, AccoladeLargePreviewImageOverride) == 0x000028, "Member 'XpEverywhereAccoladesWidget_OpenWidget::AccoladeLargePreviewImageOverride' has a wrong offset!");
static_assert(offsetof(XpEverywhereAccoladesWidget_OpenWidget, SimulatedName) == 0x000050, "Member 'XpEverywhereAccoladesWidget_OpenWidget::SimulatedName' has a wrong offset!");
static_assert(offsetof(XpEverywhereAccoladesWidget_OpenWidget, SimulatedText) == 0x000068, "Member 'XpEverywhereAccoladesWidget_OpenWidget::SimulatedText' has a wrong offset!");
static_assert(offsetof(XpEverywhereAccoladesWidget_OpenWidget, SimulatedXpSize) == 0x000080, "Member 'XpEverywhereAccoladesWidget_OpenWidget::SimulatedXpSize' has a wrong offset!");

// Function XpEverywhereUI.XpEverywhereAccoladesWidget.HasMoreXPEvents
// 0x0001 (0x0001 - 0x0000)
struct XpEverywhereAccoladesWidget_HasMoreXPEvents final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XpEverywhereAccoladesWidget_HasMoreXPEvents) == 0x000001, "Wrong alignment on XpEverywhereAccoladesWidget_HasMoreXPEvents");
static_assert(sizeof(XpEverywhereAccoladesWidget_HasMoreXPEvents) == 0x000001, "Wrong size on XpEverywhereAccoladesWidget_HasMoreXPEvents");
static_assert(offsetof(XpEverywhereAccoladesWidget_HasMoreXPEvents, ReturnValue) == 0x000000, "Member 'XpEverywhereAccoladesWidget_HasMoreXPEvents::ReturnValue' has a wrong offset!");

// Function XpEverywhereUI.XpEverywhereBar.OnXpBarInitialized
// 0x000C (0x000C - 0x0000)
struct XpEverywhereBar_OnXpBarInitialized final
{
public:
	int32                                         CurrentXp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentLevel;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentRemainingRestXP;                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XpEverywhereBar_OnXpBarInitialized) == 0x000004, "Wrong alignment on XpEverywhereBar_OnXpBarInitialized");
static_assert(sizeof(XpEverywhereBar_OnXpBarInitialized) == 0x00000C, "Wrong size on XpEverywhereBar_OnXpBarInitialized");
static_assert(offsetof(XpEverywhereBar_OnXpBarInitialized, CurrentXp) == 0x000000, "Member 'XpEverywhereBar_OnXpBarInitialized::CurrentXp' has a wrong offset!");
static_assert(offsetof(XpEverywhereBar_OnXpBarInitialized, CurrentLevel) == 0x000004, "Member 'XpEverywhereBar_OnXpBarInitialized::CurrentLevel' has a wrong offset!");
static_assert(offsetof(XpEverywhereBar_OnXpBarInitialized, CurrentRemainingRestXP) == 0x000008, "Member 'XpEverywhereBar_OnXpBarInitialized::CurrentRemainingRestXP' has a wrong offset!");

// Function XpEverywhereUI.XpEverywhereBar.OnXpBarUpdated
// 0x0014 (0x0014 - 0x0000)
struct XpEverywhereBar_OnXpBarUpdated final
{
public:
	int32                                         ShownXP;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShownLevel;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewDesiredXP;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewDesiredLevel;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewRemainingRestXP;                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XpEverywhereBar_OnXpBarUpdated) == 0x000004, "Wrong alignment on XpEverywhereBar_OnXpBarUpdated");
static_assert(sizeof(XpEverywhereBar_OnXpBarUpdated) == 0x000014, "Wrong size on XpEverywhereBar_OnXpBarUpdated");
static_assert(offsetof(XpEverywhereBar_OnXpBarUpdated, ShownXP) == 0x000000, "Member 'XpEverywhereBar_OnXpBarUpdated::ShownXP' has a wrong offset!");
static_assert(offsetof(XpEverywhereBar_OnXpBarUpdated, ShownLevel) == 0x000004, "Member 'XpEverywhereBar_OnXpBarUpdated::ShownLevel' has a wrong offset!");
static_assert(offsetof(XpEverywhereBar_OnXpBarUpdated, NewDesiredXP) == 0x000008, "Member 'XpEverywhereBar_OnXpBarUpdated::NewDesiredXP' has a wrong offset!");
static_assert(offsetof(XpEverywhereBar_OnXpBarUpdated, NewDesiredLevel) == 0x00000C, "Member 'XpEverywhereBar_OnXpBarUpdated::NewDesiredLevel' has a wrong offset!");
static_assert(offsetof(XpEverywhereBar_OnXpBarUpdated, NewRemainingRestXP) == 0x000010, "Member 'XpEverywhereBar_OnXpBarUpdated::NewRemainingRestXP' has a wrong offset!");

// Function XpEverywhereUI.XpEverywhereBar.GetTotalXpRequiredForLevel
// 0x0008 (0x0008 - 0x0000)
struct XpEverywhereBar_GetTotalXpRequiredForLevel final
{
public:
	int32                                         InLevel;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XpEverywhereBar_GetTotalXpRequiredForLevel) == 0x000004, "Wrong alignment on XpEverywhereBar_GetTotalXpRequiredForLevel");
static_assert(sizeof(XpEverywhereBar_GetTotalXpRequiredForLevel) == 0x000008, "Wrong size on XpEverywhereBar_GetTotalXpRequiredForLevel");
static_assert(offsetof(XpEverywhereBar_GetTotalXpRequiredForLevel, InLevel) == 0x000000, "Member 'XpEverywhereBar_GetTotalXpRequiredForLevel::InLevel' has a wrong offset!");
static_assert(offsetof(XpEverywhereBar_GetTotalXpRequiredForLevel, ReturnValue) == 0x000004, "Member 'XpEverywhereBar_GetTotalXpRequiredForLevel::ReturnValue' has a wrong offset!");

// Function XpEverywhereUI.XpEverywhereLevelUpWidget.OnShowWidget
// 0x0004 (0x0004 - 0x0000)
struct XpEverywhereLevelUpWidget_OnShowWidget final
{
public:
	int32                                         NewLevel;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XpEverywhereLevelUpWidget_OnShowWidget) == 0x000004, "Wrong alignment on XpEverywhereLevelUpWidget_OnShowWidget");
static_assert(sizeof(XpEverywhereLevelUpWidget_OnShowWidget) == 0x000004, "Wrong size on XpEverywhereLevelUpWidget_OnShowWidget");
static_assert(offsetof(XpEverywhereLevelUpWidget_OnShowWidget, NewLevel) == 0x000000, "Member 'XpEverywhereLevelUpWidget_OnShowWidget::NewLevel' has a wrong offset!");

// Function XpEverywhereUI.XpEverywhereReticleWidget.UpdateRestXP
// 0x0004 (0x0004 - 0x0000)
struct XpEverywhereReticleWidget_UpdateRestXP final
{
public:
	int32                                         RestXpRemaining;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XpEverywhereReticleWidget_UpdateRestXP) == 0x000004, "Wrong alignment on XpEverywhereReticleWidget_UpdateRestXP");
static_assert(sizeof(XpEverywhereReticleWidget_UpdateRestXP) == 0x000004, "Wrong size on XpEverywhereReticleWidget_UpdateRestXP");
static_assert(offsetof(XpEverywhereReticleWidget_UpdateRestXP, RestXpRemaining) == 0x000000, "Member 'XpEverywhereReticleWidget_UpdateRestXP::RestXpRemaining' has a wrong offset!");

// Function XpEverywhereUI.XpEverywhereReticleWidget.UpdateXPAmount
// 0x0018 (0x0018 - 0x0000)
struct XpEverywhereReticleWidget_UpdateXPAmount final
{
public:
	int32                                         NewAmount;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              Cue;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortSimulatedXPSize                          SimulatedXpSize;                                   // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(XpEverywhereReticleWidget_UpdateXPAmount) == 0x000008, "Wrong alignment on XpEverywhereReticleWidget_UpdateXPAmount");
static_assert(sizeof(XpEverywhereReticleWidget_UpdateXPAmount) == 0x000018, "Wrong size on XpEverywhereReticleWidget_UpdateXPAmount");
static_assert(offsetof(XpEverywhereReticleWidget_UpdateXPAmount, NewAmount) == 0x000000, "Member 'XpEverywhereReticleWidget_UpdateXPAmount::NewAmount' has a wrong offset!");
static_assert(offsetof(XpEverywhereReticleWidget_UpdateXPAmount, Cue) == 0x000008, "Member 'XpEverywhereReticleWidget_UpdateXPAmount::Cue' has a wrong offset!");
static_assert(offsetof(XpEverywhereReticleWidget_UpdateXPAmount, SimulatedXpSize) == 0x000010, "Member 'XpEverywhereReticleWidget_UpdateXPAmount::SimulatedXpSize' has a wrong offset!");

// Function XpEverywhereUI.XpEverywhereReticleWidget.UpdateXPSource
// 0x0018 (0x0018 - 0x0000)
struct XpEverywhereReticleWidget_UpdateXPSource final
{
public:
	class FText                                   NewSourceText;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(XpEverywhereReticleWidget_UpdateXPSource) == 0x000008, "Wrong alignment on XpEverywhereReticleWidget_UpdateXPSource");
static_assert(sizeof(XpEverywhereReticleWidget_UpdateXPSource) == 0x000018, "Wrong size on XpEverywhereReticleWidget_UpdateXPSource");
static_assert(offsetof(XpEverywhereReticleWidget_UpdateXPSource, NewSourceText) == 0x000000, "Member 'XpEverywhereReticleWidget_UpdateXPSource::NewSourceText' has a wrong offset!");

}

