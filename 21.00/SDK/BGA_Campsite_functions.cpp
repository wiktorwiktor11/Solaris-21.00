#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BGA_Campsite

#include "Basic.hpp"

#include "BGA_Campsite_classes.hpp"
#include "BGA_Campsite_parameters.hpp"


namespace SDK
{

// Function BGA_Campsite.BGA_Campsite_C.UpdateCampsiteLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          newCampsiteLoc                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGA_Campsite_C::UpdateCampsiteLocation(struct FVector* newCampsiteLoc)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGA_Campsite_C", "UpdateCampsiteLocation");

	Params::BGA_Campsite_C_UpdateCampsiteLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (newCampsiteLoc != nullptr)
		*newCampsiteLoc = std::move(Parms.newCampsiteLoc);
}


// Function BGA_Campsite.BGA_Campsite_C.TentColors
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Player_State                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   squad_ID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     squad_member_color                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   random_squadmember_index                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGA_Campsite_C::TentColors(class UObject* Player_State, uint8* squad_ID, struct FLinearColor* squad_member_color, int32* random_squadmember_index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGA_Campsite_C", "TentColors");

	Params::BGA_Campsite_C_TentColors Parms{};

	Parms.Player_State = Player_State;

	UObject::ProcessEvent(Func, &Parms);

	if (squad_ID != nullptr)
		*squad_ID = Parms.squad_ID;

	if (squad_member_color != nullptr)
		*squad_member_color = std::move(Parms.squad_member_color);

	if (random_squadmember_index != nullptr)
		*random_squadmember_index = Parms.random_squadmember_index;
}


// Function BGA_Campsite.BGA_Campsite_C.Spawn Secondary Blueprint
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Spawn_Transform_Location                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Spawn_Transform_Rotation                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class APlayerState*                     ImprovementOwner                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FStruct_Campsite_Improvement     Struct_Campsite_Improvement                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void ABGA_Campsite_C::Spawn_Secondary_Blueprint(const struct FVector& Spawn_Transform_Location, const struct FRotator& Spawn_Transform_Rotation, class APlayerState* ImprovementOwner, const struct FStruct_Campsite_Improvement& Struct_Campsite_Improvement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGA_Campsite_C", "Spawn Secondary Blueprint");

	Params::BGA_Campsite_C_Spawn_Secondary_Blueprint Parms{};

	Parms.Spawn_Transform_Location = std::move(Spawn_Transform_Location);
	Parms.Spawn_Transform_Rotation = std::move(Spawn_Transform_Rotation);
	Parms.ImprovementOwner = ImprovementOwner;
	Parms.Struct_Campsite_Improvement = std::move(Struct_Campsite_Improvement);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BGA_Campsite.BGA_Campsite_C.RegisterCampsite
// (Public, BlueprintCallable, BlueprintEvent)

void ABGA_Campsite_C::RegisterCampsite()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGA_Campsite_C", "RegisterCampsite");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BGA_Campsite.BGA_Campsite_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABGA_Campsite_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGA_Campsite_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BGA_Campsite.BGA_Campsite_C.Post Tent Campsite Setup
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABGA_Campsite_C::Post_Tent_Campsite_Setup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGA_Campsite_C", "Post Tent Campsite Setup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BGA_Campsite.BGA_Campsite_C.OnRep_isDying
// (BlueprintCallable, BlueprintEvent)

void ABGA_Campsite_C::OnRep_isDying()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGA_Campsite_C", "OnRep_isDying");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BGA_Campsite.BGA_Campsite_C.OnDeathServer
// (BlueprintAuthorityOnly, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTagContainer            DamageTags                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FVector                          Momentum                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       HitInfo                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// class AController*                      InstigatedBy                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayEffectContextHandle     EffectContext                                          (BlueprintVisible, BlueprintReadOnly, Parm)

void ABGA_Campsite_C::OnDeathServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGA_Campsite_C", "OnDeathServer");

	Params::BGA_Campsite_C_OnDeathServer Parms{};

	Parms.Damage = Damage;
	Parms.DamageTags = std::move(DamageTags);
	Parms.Momentum = std::move(Momentum);
	Parms.HitInfo = std::move(HitInfo);
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;
	Parms.EffectContext = std::move(EffectContext);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BGA_Campsite.BGA_Campsite_C.MoveCampsiteLocation
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          NewLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGA_Campsite_C::MoveCampsiteLocation(const struct FVector& NewLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGA_Campsite_C", "MoveCampsiteLocation");

	Params::BGA_Campsite_C_MoveCampsiteLocation Parms{};

	Parms.NewLocation = std::move(NewLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BGA_Campsite.BGA_Campsite_C.ImprovementDestroyed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DestroyedActor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGA_Campsite_C::ImprovementDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGA_Campsite_C", "ImprovementDestroyed");

	Params::BGA_Campsite_C_ImprovementDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BGA_Campsite.BGA_Campsite_C.Immediately Hide & Kill
// (BlueprintCallable, BlueprintEvent)

void ABGA_Campsite_C::Immediately_Hide___Kill()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGA_Campsite_C", "Immediately Hide & Kill");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BGA_Campsite.BGA_Campsite_C.GetIsDying?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGA_Campsite_C::GetIsDying_(bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGA_Campsite_C", "GetIsDying?");

	Params::BGA_Campsite_C_GetIsDying_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function BGA_Campsite.BGA_Campsite_C.Get Improvement by Type
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// Enum_Campsite_Improvements              ImprovementDef                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FStruct_Campsite_Improvement     Improvement                                            (Parm, OutParm, NoDestructor, HasGetValueTypeHash)

void ABGA_Campsite_C::Get_Improvement_by_Type(Enum_Campsite_Improvements ImprovementDef, struct FStruct_Campsite_Improvement* Improvement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGA_Campsite_C", "Get Improvement by Type");

	Params::BGA_Campsite_C_Get_Improvement_by_Type Parms{};

	Parms.ImprovementDef = ImprovementDef;

	UObject::ProcessEvent(Func, &Parms);

	if (Improvement != nullptr)
		*Improvement = std::move(Parms.Improvement);
}


// Function BGA_Campsite.BGA_Campsite_C.ExecuteUbergraph_BGA_Campsite
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGA_Campsite_C::ExecuteUbergraph_BGA_Campsite(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGA_Campsite_C", "ExecuteUbergraph_BGA_Campsite");

	Params::BGA_Campsite_C_ExecuteUbergraph_BGA_Campsite Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BGA_Campsite.BGA_Campsite_C.EstablishNewCampsite
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerState*                     New_Campsite_Instigator                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           SupportingActor                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FFortItemEntry                   Instigating_Item                                       (BlueprintVisible, BlueprintReadOnly, Parm)

void ABGA_Campsite_C::EstablishNewCampsite(class APlayerState* New_Campsite_Instigator, class AActor* SupportingActor, const struct FFortItemEntry& Instigating_Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGA_Campsite_C", "EstablishNewCampsite");

	Params::BGA_Campsite_C_EstablishNewCampsite Parms{};

	Parms.New_Campsite_Instigator = New_Campsite_Instigator;
	Parms.SupportingActor = SupportingActor;
	Parms.Instigating_Item = std::move(Instigating_Item);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BGA_Campsite.BGA_Campsite_C.EQS Query Finished
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UEnvQueryInstanceBlueprintWrapper*QueryInstance                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EEnvQueryStatus                         QueryStatus                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGA_Campsite_C::EQS_Query_Finished(class UEnvQueryInstanceBlueprintWrapper* QueryInstance, EEnvQueryStatus QueryStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGA_Campsite_C", "EQS Query Finished");

	Params::BGA_Campsite_C_EQS_Query_Finished Parms{};

	Parms.QueryInstance = QueryInstance;
	Parms.QueryStatus = QueryStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BGA_Campsite.BGA_Campsite_C.Destroy With Effects
// (BlueprintCallable, BlueprintEvent)

void ABGA_Campsite_C::Destroy_With_Effects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGA_Campsite_C", "Destroy With Effects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BGA_Campsite.BGA_Campsite_C.DebugShapeDrawingLoop
// (BlueprintCallable, BlueprintEvent)

void ABGA_Campsite_C::DebugShapeDrawingLoop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGA_Campsite_C", "DebugShapeDrawingLoop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BGA_Campsite.BGA_Campsite_C.CountImprovementByType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// Enum_Campsite_Improvements              Improvement_Type                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NumberBuilt                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGA_Campsite_C::CountImprovementByType(Enum_Campsite_Improvements Improvement_Type, int32* NumberBuilt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGA_Campsite_C", "CountImprovementByType");

	Params::BGA_Campsite_C_CountImprovementByType Parms{};

	Parms.Improvement_Type = Improvement_Type;

	UObject::ProcessEvent(Func, &Parms);

	if (NumberBuilt != nullptr)
		*NumberBuilt = Parms.NumberBuilt;
}


// Function BGA_Campsite.BGA_Campsite_C.CleanupCampsiteImprovement
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCampsite_Improvement_Component_C*Improvement                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGA_Campsite_C::CleanupCampsiteImprovement(class UCampsite_Improvement_Component_C* Improvement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGA_Campsite_C", "CleanupCampsiteImprovement");

	Params::BGA_Campsite_C_CleanupCampsiteImprovement Parms{};

	Parms.Improvement = Improvement;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BGA_Campsite.BGA_Campsite_C.Campsite  Improvement Spawn Feedback
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// Enum_Campsite_Improvements              Improvement_Type                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     DeplayGameplayCueTag                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void ABGA_Campsite_C::Campsite__Improvement_Spawn_Feedback(Enum_Campsite_Improvements Improvement_Type, class AActor* Target, const struct FGameplayTag& DeplayGameplayCueTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGA_Campsite_C", "Campsite  Improvement Spawn Feedback");

	Params::BGA_Campsite_C_Campsite__Improvement_Spawn_Feedback Parms{};

	Parms.Improvement_Type = Improvement_Type;
	Parms.Target = Target;
	Parms.DeplayGameplayCueTag = std::move(DeplayGameplayCueTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BGA_Campsite.BGA_Campsite_C.BuildEQSPositionedCampsiteImprovement
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// Enum_Campsite_Improvements              Improvement_Type                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APlayerState*                     Improvement_Owner                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGA_Campsite_C::BuildEQSPositionedCampsiteImprovement(Enum_Campsite_Improvements Improvement_Type, class APlayerState* Improvement_Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGA_Campsite_C", "BuildEQSPositionedCampsiteImprovement");

	Params::BGA_Campsite_C_BuildEQSPositionedCampsiteImprovement Parms{};

	Parms.Improvement_Type = Improvement_Type;
	Parms.Improvement_Owner = Improvement_Owner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BGA_Campsite.BGA_Campsite_C.Build Campsite Improvement
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// Enum_Campsite_Improvements              Improvement_Type                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APlayerState*                     Improvement_Owner                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Spawn_Location                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Spawn_Transform_Rotation                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AActor*                           SupportingActor                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FFortItemEntry                   InstigatingWeapon                                      (BlueprintVisible, BlueprintReadOnly, Parm)

void ABGA_Campsite_C::Build_Campsite_Improvement(Enum_Campsite_Improvements Improvement_Type, class APlayerState* Improvement_Owner, const struct FVector& Spawn_Location, const struct FRotator& Spawn_Transform_Rotation, class AActor* SupportingActor, const struct FFortItemEntry& InstigatingWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGA_Campsite_C", "Build Campsite Improvement");

	Params::BGA_Campsite_C_Build_Campsite_Improvement Parms{};

	Parms.Improvement_Type = Improvement_Type;
	Parms.Improvement_Owner = Improvement_Owner;
	Parms.Spawn_Location = std::move(Spawn_Location);
	Parms.Spawn_Transform_Rotation = std::move(Spawn_Transform_Rotation);
	Parms.SupportingActor = SupportingActor;
	Parms.InstigatingWeapon = std::move(InstigatingWeapon);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BGA_Campsite.BGA_Campsite_C.BindtoSurfaceOnStart
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Impact_Normal                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Impact_Point                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Hit_Actor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              Hit_Component                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Hit_Water_                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGA_Campsite_C::BindtoSurfaceOnStart(const struct FVector& Impact_Normal, const struct FVector& Impact_Point, class AActor* Hit_Actor, class UPrimitiveComponent* Hit_Component, bool Hit_Water_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGA_Campsite_C", "BindtoSurfaceOnStart");

	Params::BGA_Campsite_C_BindtoSurfaceOnStart Parms{};

	Parms.Impact_Normal = std::move(Impact_Normal);
	Parms.Impact_Point = std::move(Impact_Point);
	Parms.Hit_Actor = Hit_Actor;
	Parms.Hit_Component = Hit_Component;
	Parms.Hit_Water_ = Hit_Water_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BGA_Campsite.BGA_Campsite_C.BaseDied
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamagedActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AController*                      InstigatedBy                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              FHitComponent                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             BoneName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Momentum                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGA_Campsite_C::BaseDied(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGA_Campsite_C", "BaseDied");

	Params::BGA_Campsite_C_BaseDied Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.Damage = Damage;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;
	Parms.HitLocation = std::move(HitLocation);
	Parms.FHitComponent = FHitComponent;
	Parms.BoneName = BoneName;
	Parms.Momentum = std::move(Momentum);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BGA_Campsite.BGA_Campsite_C.BaseDestroyed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DestroyedActor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGA_Campsite_C::BaseDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGA_Campsite_C", "BaseDestroyed");

	Params::BGA_Campsite_C_BaseDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BGA_Campsite.BGA_Campsite_C.AttachToBindedActor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              Attach_Comp                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABGA_Campsite_C::AttachToBindedActor(class UPrimitiveComponent* Attach_Comp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGA_Campsite_C", "AttachToBindedActor");

	Params::BGA_Campsite_C_AttachToBindedActor Parms{};

	Parms.Attach_Comp = Attach_Comp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BGA_Campsite.BGA_Campsite_C.BlueprintGetInteractionTime
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class AFortPawn*                        InteractingPawn                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OutInteractionTime                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EInteractionBeingAttempted              InteractionBeingAttempted                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABGA_Campsite_C::BlueprintGetInteractionTime(const class AFortPawn* InteractingPawn, float* OutInteractionTime, const EInteractionBeingAttempted InteractionBeingAttempted) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGA_Campsite_C", "BlueprintGetInteractionTime");

	Params::BGA_Campsite_C_BlueprintGetInteractionTime Parms{};

	Parms.InteractingPawn = InteractingPawn;
	Parms.InteractionBeingAttempted = InteractionBeingAttempted;

	UObject::ProcessEvent(Func, &Parms);

	if (OutInteractionTime != nullptr)
		*OutInteractionTime = Parms.OutInteractionTime;

	return Parms.ReturnValue;
}


// Function BGA_Campsite.BGA_Campsite_C.BlueprintGetInteractionString
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class AFortPawn*                        InteractingPawn                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EInteractionBeingAttempted              InteractionBeingAttempted                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm)

class FText ABGA_Campsite_C::BlueprintGetInteractionString(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGA_Campsite_C", "BlueprintGetInteractionString");

	Params::BGA_Campsite_C_BlueprintGetInteractionString Parms{};

	Parms.InteractingPawn = InteractingPawn;
	Parms.InteractionBeingAttempted = InteractionBeingAttempted;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BGA_Campsite.BGA_Campsite_C.BlueprintCanInteract
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class AFortPawn*                        InteractingPawn                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EInteractionBeingAttempted              InteractionBeingAttempted                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ETInteractionType                       InteractionType                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABGA_Campsite_C::BlueprintCanInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted, const ETInteractionType InteractionType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BGA_Campsite_C", "BlueprintCanInteract");

	Params::BGA_Campsite_C_BlueprintCanInteract Parms{};

	Parms.InteractingPawn = InteractingPawn;
	Parms.InteractionBeingAttempted = InteractionBeingAttempted;
	Parms.InteractionType = InteractionType;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

