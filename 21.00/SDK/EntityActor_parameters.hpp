#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EntityActor

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function EntityActor.EntityDynamicActivationComponent.OnEnabledChanged
// 0x0001 (0x0001 - 0x0000)
struct EntityDynamicActivationComponent_OnEnabledChanged final
{
public:
	bool                                          bIsEnabled;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EntityDynamicActivationComponent_OnEnabledChanged) == 0x000001, "Wrong alignment on EntityDynamicActivationComponent_OnEnabledChanged");
static_assert(sizeof(EntityDynamicActivationComponent_OnEnabledChanged) == 0x000001, "Wrong size on EntityDynamicActivationComponent_OnEnabledChanged");
static_assert(offsetof(EntityDynamicActivationComponent_OnEnabledChanged, bIsEnabled) == 0x000000, "Member 'EntityDynamicActivationComponent_OnEnabledChanged::bIsEnabled' has a wrong offset!");

// Function EntityActor.EntityActorPositionComponent.OnRootComponentChanged
// 0x0010 (0x0010 - 0x0000)
struct EntityActorPositionComponent_OnRootComponentChanged final
{
public:
	class USceneComponent*                        InRootComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRootComponent;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EntityActorPositionComponent_OnRootComponentChanged) == 0x000008, "Wrong alignment on EntityActorPositionComponent_OnRootComponentChanged");
static_assert(sizeof(EntityActorPositionComponent_OnRootComponentChanged) == 0x000010, "Wrong size on EntityActorPositionComponent_OnRootComponentChanged");
static_assert(offsetof(EntityActorPositionComponent_OnRootComponentChanged, InRootComponent) == 0x000000, "Member 'EntityActorPositionComponent_OnRootComponentChanged::InRootComponent' has a wrong offset!");
static_assert(offsetof(EntityActorPositionComponent_OnRootComponentChanged, bIsRootComponent) == 0x000008, "Member 'EntityActorPositionComponent_OnRootComponentChanged::bIsRootComponent' has a wrong offset!");

// Function EntityActor.EntityActorCollisionComponent.OnEnabledChanged
// 0x0001 (0x0001 - 0x0000)
struct EntityActorCollisionComponent_OnEnabledChanged final
{
public:
	bool                                          bIsEnabled;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EntityActorCollisionComponent_OnEnabledChanged) == 0x000001, "Wrong alignment on EntityActorCollisionComponent_OnEnabledChanged");
static_assert(sizeof(EntityActorCollisionComponent_OnEnabledChanged) == 0x000001, "Wrong size on EntityActorCollisionComponent_OnEnabledChanged");
static_assert(offsetof(EntityActorCollisionComponent_OnEnabledChanged, bIsEnabled) == 0x000000, "Member 'EntityActorCollisionComponent_OnEnabledChanged::bIsEnabled' has a wrong offset!");

// Function EntityActor.EntityActorCollisionComponent.OnNativeComponentBeginOverlap
// 0x0100 (0x0100 - 0x0000)
struct EntityActorCollisionComponent_OnNativeComponentBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EntityActorCollisionComponent_OnNativeComponentBeginOverlap) == 0x000008, "Wrong alignment on EntityActorCollisionComponent_OnNativeComponentBeginOverlap");
static_assert(sizeof(EntityActorCollisionComponent_OnNativeComponentBeginOverlap) == 0x000100, "Wrong size on EntityActorCollisionComponent_OnNativeComponentBeginOverlap");
static_assert(offsetof(EntityActorCollisionComponent_OnNativeComponentBeginOverlap, OverlappedComponent) == 0x000000, "Member 'EntityActorCollisionComponent_OnNativeComponentBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(EntityActorCollisionComponent_OnNativeComponentBeginOverlap, OtherActor) == 0x000008, "Member 'EntityActorCollisionComponent_OnNativeComponentBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(EntityActorCollisionComponent_OnNativeComponentBeginOverlap, OtherComp) == 0x000010, "Member 'EntityActorCollisionComponent_OnNativeComponentBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(EntityActorCollisionComponent_OnNativeComponentBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'EntityActorCollisionComponent_OnNativeComponentBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(EntityActorCollisionComponent_OnNativeComponentBeginOverlap, bFromSweep) == 0x00001C, "Member 'EntityActorCollisionComponent_OnNativeComponentBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(EntityActorCollisionComponent_OnNativeComponentBeginOverlap, SweepResult) == 0x000020, "Member 'EntityActorCollisionComponent_OnNativeComponentBeginOverlap::SweepResult' has a wrong offset!");

// Function EntityActor.EntityActorCollisionComponent.OnNativeComponentEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct EntityActorCollisionComponent_OnNativeComponentEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EntityActorCollisionComponent_OnNativeComponentEndOverlap) == 0x000008, "Wrong alignment on EntityActorCollisionComponent_OnNativeComponentEndOverlap");
static_assert(sizeof(EntityActorCollisionComponent_OnNativeComponentEndOverlap) == 0x000020, "Wrong size on EntityActorCollisionComponent_OnNativeComponentEndOverlap");
static_assert(offsetof(EntityActorCollisionComponent_OnNativeComponentEndOverlap, OverlappedComponent) == 0x000000, "Member 'EntityActorCollisionComponent_OnNativeComponentEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(EntityActorCollisionComponent_OnNativeComponentEndOverlap, OtherActor) == 0x000008, "Member 'EntityActorCollisionComponent_OnNativeComponentEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(EntityActorCollisionComponent_OnNativeComponentEndOverlap, OtherComp) == 0x000010, "Member 'EntityActorCollisionComponent_OnNativeComponentEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(EntityActorCollisionComponent_OnNativeComponentEndOverlap, OtherBodyIndex) == 0x000018, "Member 'EntityActorCollisionComponent_OnNativeComponentEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function EntityActor.EntityActorCollisionComponent.OnNativeComponentHit
// 0x0110 (0x0110 - 0x0000)
struct EntityActorCollisionComponent_OnNativeComponentHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0030(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EntityActorCollisionComponent_OnNativeComponentHit) == 0x000008, "Wrong alignment on EntityActorCollisionComponent_OnNativeComponentHit");
static_assert(sizeof(EntityActorCollisionComponent_OnNativeComponentHit) == 0x000110, "Wrong size on EntityActorCollisionComponent_OnNativeComponentHit");
static_assert(offsetof(EntityActorCollisionComponent_OnNativeComponentHit, HitComponent) == 0x000000, "Member 'EntityActorCollisionComponent_OnNativeComponentHit::HitComponent' has a wrong offset!");
static_assert(offsetof(EntityActorCollisionComponent_OnNativeComponentHit, OtherActor) == 0x000008, "Member 'EntityActorCollisionComponent_OnNativeComponentHit::OtherActor' has a wrong offset!");
static_assert(offsetof(EntityActorCollisionComponent_OnNativeComponentHit, OtherComp) == 0x000010, "Member 'EntityActorCollisionComponent_OnNativeComponentHit::OtherComp' has a wrong offset!");
static_assert(offsetof(EntityActorCollisionComponent_OnNativeComponentHit, NormalImpulse) == 0x000018, "Member 'EntityActorCollisionComponent_OnNativeComponentHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(EntityActorCollisionComponent_OnNativeComponentHit, Hit) == 0x000030, "Member 'EntityActorCollisionComponent_OnNativeComponentHit::Hit' has a wrong offset!");

// Function EntityActor.EntityActorRotationComponent.OnRootComponentChanged
// 0x0010 (0x0010 - 0x0000)
struct EntityActorRotationComponent_OnRootComponentChanged final
{
public:
	class USceneComponent*                        InRootComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRootComponent;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EntityActorRotationComponent_OnRootComponentChanged) == 0x000008, "Wrong alignment on EntityActorRotationComponent_OnRootComponentChanged");
static_assert(sizeof(EntityActorRotationComponent_OnRootComponentChanged) == 0x000010, "Wrong size on EntityActorRotationComponent_OnRootComponentChanged");
static_assert(offsetof(EntityActorRotationComponent_OnRootComponentChanged, InRootComponent) == 0x000000, "Member 'EntityActorRotationComponent_OnRootComponentChanged::InRootComponent' has a wrong offset!");
static_assert(offsetof(EntityActorRotationComponent_OnRootComponentChanged, bIsRootComponent) == 0x000008, "Member 'EntityActorRotationComponent_OnRootComponentChanged::bIsRootComponent' has a wrong offset!");

// Function EntityActor.EntityActorScaleComponent.OnRootComponentChanged
// 0x0010 (0x0010 - 0x0000)
struct EntityActorScaleComponent_OnRootComponentChanged final
{
public:
	class USceneComponent*                        InRootComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRootComponent;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EntityActorScaleComponent_OnRootComponentChanged) == 0x000008, "Wrong alignment on EntityActorScaleComponent_OnRootComponentChanged");
static_assert(sizeof(EntityActorScaleComponent_OnRootComponentChanged) == 0x000010, "Wrong size on EntityActorScaleComponent_OnRootComponentChanged");
static_assert(offsetof(EntityActorScaleComponent_OnRootComponentChanged, InRootComponent) == 0x000000, "Member 'EntityActorScaleComponent_OnRootComponentChanged::InRootComponent' has a wrong offset!");
static_assert(offsetof(EntityActorScaleComponent_OnRootComponentChanged, bIsRootComponent) == 0x000008, "Member 'EntityActorScaleComponent_OnRootComponentChanged::bIsRootComponent' has a wrong offset!");

// Function EntityActor.EntityActorTextDisplayComponent.GetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct EntityActorTextDisplayComponent_GetHorizontalAlignment final
{
public:
	EHorizTextAligment                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EntityActorTextDisplayComponent_GetHorizontalAlignment) == 0x000001, "Wrong alignment on EntityActorTextDisplayComponent_GetHorizontalAlignment");
static_assert(sizeof(EntityActorTextDisplayComponent_GetHorizontalAlignment) == 0x000001, "Wrong size on EntityActorTextDisplayComponent_GetHorizontalAlignment");
static_assert(offsetof(EntityActorTextDisplayComponent_GetHorizontalAlignment, ReturnValue) == 0x000000, "Member 'EntityActorTextDisplayComponent_GetHorizontalAlignment::ReturnValue' has a wrong offset!");

// Function EntityActor.EntityActorTextDisplayComponent.GetRelativeLocation
// 0x0018 (0x0018 - 0x0000)
struct EntityActorTextDisplayComponent_GetRelativeLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EntityActorTextDisplayComponent_GetRelativeLocation) == 0x000008, "Wrong alignment on EntityActorTextDisplayComponent_GetRelativeLocation");
static_assert(sizeof(EntityActorTextDisplayComponent_GetRelativeLocation) == 0x000018, "Wrong size on EntityActorTextDisplayComponent_GetRelativeLocation");
static_assert(offsetof(EntityActorTextDisplayComponent_GetRelativeLocation, ReturnValue) == 0x000000, "Member 'EntityActorTextDisplayComponent_GetRelativeLocation::ReturnValue' has a wrong offset!");

// Function EntityActor.EntityActorTextDisplayComponent.GetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct EntityActorTextDisplayComponent_GetVerticalAlignment final
{
public:
	EVerticalTextAligment                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EntityActorTextDisplayComponent_GetVerticalAlignment) == 0x000001, "Wrong alignment on EntityActorTextDisplayComponent_GetVerticalAlignment");
static_assert(sizeof(EntityActorTextDisplayComponent_GetVerticalAlignment) == 0x000001, "Wrong size on EntityActorTextDisplayComponent_GetVerticalAlignment");
static_assert(offsetof(EntityActorTextDisplayComponent_GetVerticalAlignment, ReturnValue) == 0x000000, "Member 'EntityActorTextDisplayComponent_GetVerticalAlignment::ReturnValue' has a wrong offset!");

// Function EntityActor.EntityActorTextDisplayComponent.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct EntityActorTextDisplayComponent_SetHorizontalAlignment final
{
public:
	EHorizTextAligment                            Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EntityActorTextDisplayComponent_SetHorizontalAlignment) == 0x000001, "Wrong alignment on EntityActorTextDisplayComponent_SetHorizontalAlignment");
static_assert(sizeof(EntityActorTextDisplayComponent_SetHorizontalAlignment) == 0x000001, "Wrong size on EntityActorTextDisplayComponent_SetHorizontalAlignment");
static_assert(offsetof(EntityActorTextDisplayComponent_SetHorizontalAlignment, Value) == 0x000000, "Member 'EntityActorTextDisplayComponent_SetHorizontalAlignment::Value' has a wrong offset!");

// Function EntityActor.EntityActorTextDisplayComponent.SetRelativeLocation
// 0x0018 (0x0018 - 0x0000)
struct EntityActorTextDisplayComponent_SetRelativeLocation final
{
public:
	struct FVector                                RelativeLocation;                                  // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EntityActorTextDisplayComponent_SetRelativeLocation) == 0x000008, "Wrong alignment on EntityActorTextDisplayComponent_SetRelativeLocation");
static_assert(sizeof(EntityActorTextDisplayComponent_SetRelativeLocation) == 0x000018, "Wrong size on EntityActorTextDisplayComponent_SetRelativeLocation");
static_assert(offsetof(EntityActorTextDisplayComponent_SetRelativeLocation, RelativeLocation) == 0x000000, "Member 'EntityActorTextDisplayComponent_SetRelativeLocation::RelativeLocation' has a wrong offset!");

// Function EntityActor.EntityActorTextDisplayComponent.SetRelativeRotation
// 0x0018 (0x0018 - 0x0000)
struct EntityActorTextDisplayComponent_SetRelativeRotation final
{
public:
	struct FRotator                               RelativeRotation;                                  // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EntityActorTextDisplayComponent_SetRelativeRotation) == 0x000008, "Wrong alignment on EntityActorTextDisplayComponent_SetRelativeRotation");
static_assert(sizeof(EntityActorTextDisplayComponent_SetRelativeRotation) == 0x000018, "Wrong size on EntityActorTextDisplayComponent_SetRelativeRotation");
static_assert(offsetof(EntityActorTextDisplayComponent_SetRelativeRotation, RelativeRotation) == 0x000000, "Member 'EntityActorTextDisplayComponent_SetRelativeRotation::RelativeRotation' has a wrong offset!");

// Function EntityActor.EntityActorTextDisplayComponent.SetRelativeScale
// 0x0018 (0x0018 - 0x0000)
struct EntityActorTextDisplayComponent_SetRelativeScale final
{
public:
	struct FVector                                RelativeScale;                                     // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EntityActorTextDisplayComponent_SetRelativeScale) == 0x000008, "Wrong alignment on EntityActorTextDisplayComponent_SetRelativeScale");
static_assert(sizeof(EntityActorTextDisplayComponent_SetRelativeScale) == 0x000018, "Wrong size on EntityActorTextDisplayComponent_SetRelativeScale");
static_assert(offsetof(EntityActorTextDisplayComponent_SetRelativeScale, RelativeScale) == 0x000000, "Member 'EntityActorTextDisplayComponent_SetRelativeScale::RelativeScale' has a wrong offset!");

// Function EntityActor.EntityActorTextDisplayComponent.SetText
// 0x0018 (0x0018 - 0x0000)
struct EntityActorTextDisplayComponent_SetText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EntityActorTextDisplayComponent_SetText) == 0x000008, "Wrong alignment on EntityActorTextDisplayComponent_SetText");
static_assert(sizeof(EntityActorTextDisplayComponent_SetText) == 0x000018, "Wrong size on EntityActorTextDisplayComponent_SetText");
static_assert(offsetof(EntityActorTextDisplayComponent_SetText, Text) == 0x000000, "Member 'EntityActorTextDisplayComponent_SetText::Text' has a wrong offset!");

// Function EntityActor.EntityActorTextDisplayComponent.SetTextRenderColor
// 0x0004 (0x0004 - 0x0000)
struct EntityActorTextDisplayComponent_SetTextRenderColor final
{
public:
	struct FColor                                 Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EntityActorTextDisplayComponent_SetTextRenderColor) == 0x000004, "Wrong alignment on EntityActorTextDisplayComponent_SetTextRenderColor");
static_assert(sizeof(EntityActorTextDisplayComponent_SetTextRenderColor) == 0x000004, "Wrong size on EntityActorTextDisplayComponent_SetTextRenderColor");
static_assert(offsetof(EntityActorTextDisplayComponent_SetTextRenderColor, Value) == 0x000000, "Member 'EntityActorTextDisplayComponent_SetTextRenderColor::Value' has a wrong offset!");

// Function EntityActor.EntityActorTextDisplayComponent.SetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct EntityActorTextDisplayComponent_SetVerticalAlignment final
{
public:
	EVerticalTextAligment                         Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EntityActorTextDisplayComponent_SetVerticalAlignment) == 0x000001, "Wrong alignment on EntityActorTextDisplayComponent_SetVerticalAlignment");
static_assert(sizeof(EntityActorTextDisplayComponent_SetVerticalAlignment) == 0x000001, "Wrong size on EntityActorTextDisplayComponent_SetVerticalAlignment");
static_assert(offsetof(EntityActorTextDisplayComponent_SetVerticalAlignment, Value) == 0x000000, "Member 'EntityActorTextDisplayComponent_SetVerticalAlignment::Value' has a wrong offset!");

// Function EntityActor.EntityActorTextDisplayComponent.SetWorldSize
// 0x0004 (0x0004 - 0x0000)
struct EntityActorTextDisplayComponent_SetWorldSize final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EntityActorTextDisplayComponent_SetWorldSize) == 0x000004, "Wrong alignment on EntityActorTextDisplayComponent_SetWorldSize");
static_assert(sizeof(EntityActorTextDisplayComponent_SetWorldSize) == 0x000004, "Wrong size on EntityActorTextDisplayComponent_SetWorldSize");
static_assert(offsetof(EntityActorTextDisplayComponent_SetWorldSize, Value) == 0x000000, "Member 'EntityActorTextDisplayComponent_SetWorldSize::Value' has a wrong offset!");

// Function EntityActor.EntityActorTextDisplayComponent.GetText
// 0x0018 (0x0018 - 0x0000)
struct EntityActorTextDisplayComponent_GetText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EntityActorTextDisplayComponent_GetText) == 0x000008, "Wrong alignment on EntityActorTextDisplayComponent_GetText");
static_assert(sizeof(EntityActorTextDisplayComponent_GetText) == 0x000018, "Wrong size on EntityActorTextDisplayComponent_GetText");
static_assert(offsetof(EntityActorTextDisplayComponent_GetText, ReturnValue) == 0x000000, "Member 'EntityActorTextDisplayComponent_GetText::ReturnValue' has a wrong offset!");

// Function EntityActor.EntityActorTextDisplayComponent.GetTextRenderColor
// 0x0004 (0x0004 - 0x0000)
struct EntityActorTextDisplayComponent_GetTextRenderColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EntityActorTextDisplayComponent_GetTextRenderColor) == 0x000004, "Wrong alignment on EntityActorTextDisplayComponent_GetTextRenderColor");
static_assert(sizeof(EntityActorTextDisplayComponent_GetTextRenderColor) == 0x000004, "Wrong size on EntityActorTextDisplayComponent_GetTextRenderColor");
static_assert(offsetof(EntityActorTextDisplayComponent_GetTextRenderColor, ReturnValue) == 0x000000, "Member 'EntityActorTextDisplayComponent_GetTextRenderColor::ReturnValue' has a wrong offset!");

// Function EntityActor.EntityActorTextDisplayComponent.GetWorldSize
// 0x0004 (0x0004 - 0x0000)
struct EntityActorTextDisplayComponent_GetWorldSize final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EntityActorTextDisplayComponent_GetWorldSize) == 0x000004, "Wrong alignment on EntityActorTextDisplayComponent_GetWorldSize");
static_assert(sizeof(EntityActorTextDisplayComponent_GetWorldSize) == 0x000004, "Wrong size on EntityActorTextDisplayComponent_GetWorldSize");
static_assert(offsetof(EntityActorTextDisplayComponent_GetWorldSize, ReturnValue) == 0x000000, "Member 'EntityActorTextDisplayComponent_GetWorldSize::ReturnValue' has a wrong offset!");

}

