#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VerseFortnite

#include "Basic.hpp"

#include "ModularGameplay_classes.hpp"
#include "EntityCore_classes.hpp"
#include "FortniteGame_classes.hpp"
#include "VerseFortnite_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "EntityActor_classes.hpp"


namespace SDK
{

// Class VerseFortnite.BuildingActorEntityInteropComponent
// 0x0008 (0x0068 - 0x0060)
class UBuildingActorEntityInteropComponent final : public UEntityComponent
{
public:
	uint8                                         Pad_60[0x8];                                       // 0x0060(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BuildingActorEntityInteropComponent">();
	}
	static class UBuildingActorEntityInteropComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBuildingActorEntityInteropComponent>();
	}
};
static_assert(alignof(UBuildingActorEntityInteropComponent) == 0x000008, "Wrong alignment on UBuildingActorEntityInteropComponent");
static_assert(sizeof(UBuildingActorEntityInteropComponent) == 0x000068, "Wrong size on UBuildingActorEntityInteropComponent");

// Class VerseFortnite.HUDComponentBase
// 0x0088 (0x0108 - 0x0080)
class UHUDComponentBase : public UEntityEnableableComponent
{
public:
	TSoftClassPtr<class UClass>                   WidgetClass;                                       // 0x0080(0x0028)(Edit, Net, RepNotify, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct FUniqueNetIdRepl, class UUserWidget*> SpawnedWidgets;                                    // 0x00A8(0x0050)(ExportObject, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<struct FUniqueNetIdRepl>               RestrictedToPlayerList;                            // 0x00F8(0x0010)(Net, ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	void OnRep_WidgetClass();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HUDComponentBase">();
	}
	static class UHUDComponentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHUDComponentBase>();
	}
};
static_assert(alignof(UHUDComponentBase) == 0x000008, "Wrong alignment on UHUDComponentBase");
static_assert(sizeof(UHUDComponentBase) == 0x000108, "Wrong size on UHUDComponentBase");
static_assert(offsetof(UHUDComponentBase, WidgetClass) == 0x000080, "Member 'UHUDComponentBase::WidgetClass' has a wrong offset!");
static_assert(offsetof(UHUDComponentBase, SpawnedWidgets) == 0x0000A8, "Member 'UHUDComponentBase::SpawnedWidgets' has a wrong offset!");
static_assert(offsetof(UHUDComponentBase, RestrictedToPlayerList) == 0x0000F8, "Member 'UHUDComponentBase::RestrictedToPlayerList' has a wrong offset!");

// Class VerseFortnite.FortAthenaMutator_BuildingSettings
// 0x0018 (0x0330 - 0x0318)
class AFortAthenaMutator_BuildingSettings final : public AFortAthenaMutator
{
public:
	uint8                                         Pad_318[0x18];                                     // 0x0318(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaMutator_BuildingSettings">();
	}
	static class AFortAthenaMutator_BuildingSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortAthenaMutator_BuildingSettings>();
	}
};
static_assert(alignof(AFortAthenaMutator_BuildingSettings) == 0x000008, "Wrong alignment on AFortAthenaMutator_BuildingSettings");
static_assert(sizeof(AFortAthenaMutator_BuildingSettings) == 0x000330, "Wrong size on AFortAthenaMutator_BuildingSettings");

// Class VerseFortnite.HUDCountDownComponentBase
// 0x0020 (0x0128 - 0x0108)
class UHUDCountDownComponentBase : public UHUDComponentBase
{
public:
	uint8                                         Pad_108[0x18];                                     // 0x0108(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	int8                                          CurrentRound;                                      // 0x0120(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ServerCountDownEndTime;                            // 0x0124(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnRep_CountDownEndTime();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HUDCountDownComponentBase">();
	}
	static class UHUDCountDownComponentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHUDCountDownComponentBase>();
	}
};
static_assert(alignof(UHUDCountDownComponentBase) == 0x000008, "Wrong alignment on UHUDCountDownComponentBase");
static_assert(sizeof(UHUDCountDownComponentBase) == 0x000128, "Wrong size on UHUDCountDownComponentBase");
static_assert(offsetof(UHUDCountDownComponentBase, CurrentRound) == 0x000120, "Member 'UHUDCountDownComponentBase::CurrentRound' has a wrong offset!");
static_assert(offsetof(UHUDCountDownComponentBase, ServerCountDownEndTime) == 0x000124, "Member 'UHUDCountDownComponentBase::ServerCountDownEndTime' has a wrong offset!");

// Class VerseFortnite.FortBuildingSettingsComponentBase
// 0x0010 (0x0090 - 0x0080)
class UFortBuildingSettingsComponentBase : public UEntityEnableableComponent
{
public:
	class AFortAthenaMutator_BuildingSettings*    Mutator;                                           // 0x0080(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EPlayerSettingStateInternal                   Building;                                          // 0x0088(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EPlayerSettingStateInternal                   BuildingOnWater;                                   // 0x0089(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EPlayerSettingStateInternal                   Editing;                                           // 0x008A(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EPlayerSettingStateInternal                   EditingHostile;                                    // 0x008B(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EPlayerSettingStateInternal                   TrapPlacement;                                     // 0x008C(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_Settings();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBuildingSettingsComponentBase">();
	}
	static class UFortBuildingSettingsComponentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBuildingSettingsComponentBase>();
	}
};
static_assert(alignof(UFortBuildingSettingsComponentBase) == 0x000008, "Wrong alignment on UFortBuildingSettingsComponentBase");
static_assert(sizeof(UFortBuildingSettingsComponentBase) == 0x000090, "Wrong size on UFortBuildingSettingsComponentBase");
static_assert(offsetof(UFortBuildingSettingsComponentBase, Mutator) == 0x000080, "Member 'UFortBuildingSettingsComponentBase::Mutator' has a wrong offset!");
static_assert(offsetof(UFortBuildingSettingsComponentBase, Building) == 0x000088, "Member 'UFortBuildingSettingsComponentBase::Building' has a wrong offset!");
static_assert(offsetof(UFortBuildingSettingsComponentBase, BuildingOnWater) == 0x000089, "Member 'UFortBuildingSettingsComponentBase::BuildingOnWater' has a wrong offset!");
static_assert(offsetof(UFortBuildingSettingsComponentBase, Editing) == 0x00008A, "Member 'UFortBuildingSettingsComponentBase::Editing' has a wrong offset!");
static_assert(offsetof(UFortBuildingSettingsComponentBase, EditingHostile) == 0x00008B, "Member 'UFortBuildingSettingsComponentBase::EditingHostile' has a wrong offset!");
static_assert(offsetof(UFortBuildingSettingsComponentBase, TrapPlacement) == 0x00008C, "Member 'UFortBuildingSettingsComponentBase::TrapPlacement' has a wrong offset!");

// Class VerseFortnite.FortControllerStateHandlerComponent
// 0x0000 (0x00A0 - 0x00A0)
class UFortControllerStateHandlerComponent final : public UControllerComponent
{
public:
	void NotifyOfStateChange(class FString* State, bool Active);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortControllerStateHandlerComponent">();
	}
	static class UFortControllerStateHandlerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortControllerStateHandlerComponent>();
	}
};
static_assert(alignof(UFortControllerStateHandlerComponent) == 0x000008, "Wrong alignment on UFortControllerStateHandlerComponent");
static_assert(sizeof(UFortControllerStateHandlerComponent) == 0x0000A0, "Wrong size on UFortControllerStateHandlerComponent");

// Class VerseFortnite.FortPlayspaceComponentHelper
// 0x0008 (0x0030 - 0x0028)
class UFortPlayspaceComponentHelper final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandlePlayerDied(class AFortPlayerPawnAthena* FortPlayerPawnAthena);
	void HandlePlayerPawnPossessed(class APawn* Pawn);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPlayspaceComponentHelper">();
	}
	static class UFortPlayspaceComponentHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPlayspaceComponentHelper>();
	}
};
static_assert(alignof(UFortPlayspaceComponentHelper) == 0x000008, "Wrong alignment on UFortPlayspaceComponentHelper");
static_assert(sizeof(UFortPlayspaceComponentHelper) == 0x000030, "Wrong size on UFortPlayspaceComponentHelper");

// Class VerseFortnite.HUDDynamicDirectorBase
// 0x00F0 (0x01D0 - 0x00E0)
class UHUDDynamicDirectorBase : public UEntityActorPlayerComponent
{
public:
	bool                                          bBindDataStore;                                    // 0x00E0(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ServerActiveSceneNames;                            // 0x00E8(0x0010)(Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F8[0x10];                                      // 0x00F8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LoadSceneCatalog;                                  // 0x0108(0x0010)(Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 LoadWidgetCatalog;                                 // 0x0118(0x0010)(Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_128[0x8];                                      // 0x0128(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FDynamicHUDPulseEvent> ClientMessageEventCache;                           // 0x0130(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class FName, class FString>              ClientMessageDataCache;                            // 0x0180(0x0050)(NativeAccessSpecifierPrivate)

public:
	void ClientCreateScene(const class FString& SceneName);
	void ClientSetHUDCameraMode(const bool bCameraMode);
	void ClientSetSceneWidgetAlignment(const class FString& SceneName, const class FString& WidgetUniqueID, const int32 HorizontalAlignment, const int32 VerticalAlignment, const int32 Anchor);
	void ClientSetSceneWidgetAttachment(const class FString& SceneName, const class FString& WidgetUniqueID, const int32 WidgetAnchor, const class FString& TargetUniqueID, const class FString& TargetClassName, const int32 TargetAnchor);
	void ClientSetSceneWidgetClassAndUniqueID(const class FString& SceneName, const class FString& WidgetUniqueID, const class FString& WidgetClassName);
	void ClientSetSceneWidgetPosition(const class FString& SceneName, const class FString& WidgetUniqueID, const int32 X, const int32 Y);
	void OnRep_ActiveSceneNames();
	void OnRep_BindDataStore();
	void OnRep_LoadSceneCatalog();
	void OnRep_LoadWidgetCatalog();
	void ServerWidgetMessage(const class FString& MessageID, const class FString& MessageData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HUDDynamicDirectorBase">();
	}
	static class UHUDDynamicDirectorBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHUDDynamicDirectorBase>();
	}
};
static_assert(alignof(UHUDDynamicDirectorBase) == 0x000008, "Wrong alignment on UHUDDynamicDirectorBase");
static_assert(sizeof(UHUDDynamicDirectorBase) == 0x0001D0, "Wrong size on UHUDDynamicDirectorBase");
static_assert(offsetof(UHUDDynamicDirectorBase, bBindDataStore) == 0x0000E0, "Member 'UHUDDynamicDirectorBase::bBindDataStore' has a wrong offset!");
static_assert(offsetof(UHUDDynamicDirectorBase, ServerActiveSceneNames) == 0x0000E8, "Member 'UHUDDynamicDirectorBase::ServerActiveSceneNames' has a wrong offset!");
static_assert(offsetof(UHUDDynamicDirectorBase, LoadSceneCatalog) == 0x000108, "Member 'UHUDDynamicDirectorBase::LoadSceneCatalog' has a wrong offset!");
static_assert(offsetof(UHUDDynamicDirectorBase, LoadWidgetCatalog) == 0x000118, "Member 'UHUDDynamicDirectorBase::LoadWidgetCatalog' has a wrong offset!");
static_assert(offsetof(UHUDDynamicDirectorBase, ClientMessageEventCache) == 0x000130, "Member 'UHUDDynamicDirectorBase::ClientMessageEventCache' has a wrong offset!");
static_assert(offsetof(UHUDDynamicDirectorBase, ClientMessageDataCache) == 0x000180, "Member 'UHUDDynamicDirectorBase::ClientMessageDataCache' has a wrong offset!");

// Class VerseFortnite.HUDGameOverComponentBase
// 0x0020 (0x0128 - 0x0108)
class UHUDGameOverComponentBase : public UHUDComponentBase
{
public:
	int32                                         WinningTeam;                                       // 0x0108(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          IsDraw;                                            // 0x010C(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_10D[0x1B];                                     // 0x010D(0x001B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetIsDraw();
	int32 GetWinningTeam();
	void OnRep_IsDraw();
	void OnRep_WinningTeam();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HUDGameOverComponentBase">();
	}
	static class UHUDGameOverComponentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHUDGameOverComponentBase>();
	}
};
static_assert(alignof(UHUDGameOverComponentBase) == 0x000008, "Wrong alignment on UHUDGameOverComponentBase");
static_assert(sizeof(UHUDGameOverComponentBase) == 0x000128, "Wrong size on UHUDGameOverComponentBase");
static_assert(offsetof(UHUDGameOverComponentBase, WinningTeam) == 0x000108, "Member 'UHUDGameOverComponentBase::WinningTeam' has a wrong offset!");
static_assert(offsetof(UHUDGameOverComponentBase, IsDraw) == 0x00010C, "Member 'UHUDGameOverComponentBase::IsDraw' has a wrong offset!");

// Class VerseFortnite.HUDMapComponentBase
// 0x0050 (0x0158 - 0x0108)
class UHUDMapComponentBase : public UHUDComponentBase
{
public:
	uint8                                         Pad_108[0x18];                                     // 0x0108(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox                                   MapBounds;                                         // 0x0120(0x0038)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPrivate)

public:
	void HandleMapBoundsChanged(const struct FBox& newBounds);
	void OnRep_MapBounds();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HUDMapComponentBase">();
	}
	static class UHUDMapComponentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHUDMapComponentBase>();
	}
};
static_assert(alignof(UHUDMapComponentBase) == 0x000008, "Wrong alignment on UHUDMapComponentBase");
static_assert(sizeof(UHUDMapComponentBase) == 0x000158, "Wrong size on UHUDMapComponentBase");
static_assert(offsetof(UHUDMapComponentBase, MapBounds) == 0x000120, "Member 'UHUDMapComponentBase::MapBounds' has a wrong offset!");

// Class VerseFortnite.HUDMessageComponentBase
// 0x0028 (0x0130 - 0x0108)
class UHUDMessageComponentBase : public UHUDComponentBase
{
public:
	uint8                                         Pad_108[0x18];                                     // 0x0108(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0120(0x0010)(Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void Client_DirectorTestScene(const class FString& SceneName);
	void OnRep_Message();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HUDMessageComponentBase">();
	}
	static class UHUDMessageComponentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHUDMessageComponentBase>();
	}
};
static_assert(alignof(UHUDMessageComponentBase) == 0x000008, "Wrong alignment on UHUDMessageComponentBase");
static_assert(sizeof(UHUDMessageComponentBase) == 0x000130, "Wrong size on UHUDMessageComponentBase");
static_assert(offsetof(UHUDMessageComponentBase, Message) == 0x000120, "Member 'UHUDMessageComponentBase::Message' has a wrong offset!");

// Class VerseFortnite.HUDScoreboardComponentBase
// 0x0098 (0x01A0 - 0x0108)
class UHUDScoreboardComponentBase : public UHUDComponentBase
{
public:
	TArray<struct FPlayerScore>                   PlayerScores;                                      // 0x0108(0x0010)(Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate)
	uint32                                        CurrentRound;                                      // 0x0118(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint32                                        NumberOfRounds;                                    // 0x011C(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<struct FUniqueNetIdRepl, class UHUDScoreboardEntryData*> ClientScoreData;                                   // 0x0120(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_170[0x30];                                     // 0x0170(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_RoundInfo();
	void OnRep_ScoresUpdated();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HUDScoreboardComponentBase">();
	}
	static class UHUDScoreboardComponentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHUDScoreboardComponentBase>();
	}
};
static_assert(alignof(UHUDScoreboardComponentBase) == 0x000008, "Wrong alignment on UHUDScoreboardComponentBase");
static_assert(sizeof(UHUDScoreboardComponentBase) == 0x0001A0, "Wrong size on UHUDScoreboardComponentBase");
static_assert(offsetof(UHUDScoreboardComponentBase, PlayerScores) == 0x000108, "Member 'UHUDScoreboardComponentBase::PlayerScores' has a wrong offset!");
static_assert(offsetof(UHUDScoreboardComponentBase, CurrentRound) == 0x000118, "Member 'UHUDScoreboardComponentBase::CurrentRound' has a wrong offset!");
static_assert(offsetof(UHUDScoreboardComponentBase, NumberOfRounds) == 0x00011C, "Member 'UHUDScoreboardComponentBase::NumberOfRounds' has a wrong offset!");
static_assert(offsetof(UHUDScoreboardComponentBase, ClientScoreData) == 0x000120, "Member 'UHUDScoreboardComponentBase::ClientScoreData' has a wrong offset!");

// Class VerseFortnite.HUDScoreboardEntryData
// 0x0020 (0x0048 - 0x0028)
class UHUDScoreboardEntryData final : public UObject
{
public:
	TMulticastInlineDelegate<void(class UHUDScoreboardEntryData* PlayerData)> OnScoreboardDataChanged;                           // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class FString>                         RowData;                                           // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HUDScoreboardEntryData">();
	}
	static class UHUDScoreboardEntryData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHUDScoreboardEntryData>();
	}
};
static_assert(alignof(UHUDScoreboardEntryData) == 0x000008, "Wrong alignment on UHUDScoreboardEntryData");
static_assert(sizeof(UHUDScoreboardEntryData) == 0x000048, "Wrong size on UHUDScoreboardEntryData");
static_assert(offsetof(UHUDScoreboardEntryData, OnScoreboardDataChanged) == 0x000028, "Member 'UHUDScoreboardEntryData::OnScoreboardDataChanged' has a wrong offset!");
static_assert(offsetof(UHUDScoreboardEntryData, RowData) == 0x000038, "Member 'UHUDScoreboardEntryData::RowData' has a wrong offset!");

// Class VerseFortnite.VerseFortniteAbilityBase
// 0x0010 (0x0B20 - 0x0B10)
class UVerseFortniteAbilityBase : public UFortGameplayAbility
{
public:
	TArray<class UVerseFortniteAbilityMutator*>   Mutators;                                          // 0x0B10(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VerseFortniteAbilityBase">();
	}
	static class UVerseFortniteAbilityBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVerseFortniteAbilityBase>();
	}
};
static_assert(alignof(UVerseFortniteAbilityBase) == 0x000008, "Wrong alignment on UVerseFortniteAbilityBase");
static_assert(sizeof(UVerseFortniteAbilityBase) == 0x000B20, "Wrong size on UVerseFortniteAbilityBase");
static_assert(offsetof(UVerseFortniteAbilityBase, Mutators) == 0x000B10, "Member 'UVerseFortniteAbilityBase::Mutators' has a wrong offset!");

// Class VerseFortnite.VerseFortniteAbilityComponentBase
// 0x0008 (0x0098 - 0x0090)
class UVerseFortniteAbilityComponentBase : public UEntityActorComponent
{
public:
	uint8                                         Pad_90[0x8];                                       // 0x0090(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VerseFortniteAbilityComponentBase">();
	}
	static class UVerseFortniteAbilityComponentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVerseFortniteAbilityComponentBase>();
	}
};
static_assert(alignof(UVerseFortniteAbilityComponentBase) == 0x000008, "Wrong alignment on UVerseFortniteAbilityComponentBase");
static_assert(sizeof(UVerseFortniteAbilityComponentBase) == 0x000098, "Wrong size on UVerseFortniteAbilityComponentBase");

// Class VerseFortnite.VerseFortniteAbilityMutator
// 0x0000 (0x0028 - 0x0028)
class UVerseFortniteAbilityMutator : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VerseFortniteAbilityMutator">();
	}
	static class UVerseFortniteAbilityMutator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVerseFortniteAbilityMutator>();
	}
};
static_assert(alignof(UVerseFortniteAbilityMutator) == 0x000008, "Wrong alignment on UVerseFortniteAbilityMutator");
static_assert(sizeof(UVerseFortniteAbilityMutator) == 0x000028, "Wrong size on UVerseFortniteAbilityMutator");

// Class VerseFortnite.VerseFortniteAbilityMutator_Action
// 0x0018 (0x0040 - 0x0028)
class UVerseFortniteAbilityMutator_Action final : public UVerseFortniteAbilityMutator
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VerseFortniteAbilityMutator_Action">();
	}
	static class UVerseFortniteAbilityMutator_Action* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVerseFortniteAbilityMutator_Action>();
	}
};
static_assert(alignof(UVerseFortniteAbilityMutator_Action) == 0x000008, "Wrong alignment on UVerseFortniteAbilityMutator_Action");
static_assert(sizeof(UVerseFortniteAbilityMutator_Action) == 0x000040, "Wrong size on UVerseFortniteAbilityMutator_Action");

// Class VerseFortnite.VerseFortniteAbilityMutator_DefaultTargeting
// 0x0000 (0x0028 - 0x0028)
class UVerseFortniteAbilityMutator_DefaultTargeting final : public UVerseFortniteAbilityMutator
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VerseFortniteAbilityMutator_DefaultTargeting">();
	}
	static class UVerseFortniteAbilityMutator_DefaultTargeting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVerseFortniteAbilityMutator_DefaultTargeting>();
	}
};
static_assert(alignof(UVerseFortniteAbilityMutator_DefaultTargeting) == 0x000008, "Wrong alignment on UVerseFortniteAbilityMutator_DefaultTargeting");
static_assert(sizeof(UVerseFortniteAbilityMutator_DefaultTargeting) == 0x000028, "Wrong size on UVerseFortniteAbilityMutator_DefaultTargeting");

// Class VerseFortnite.VerseFortniteAbilityMutator_Effect
// 0x0010 (0x0038 - 0x0028)
class UVerseFortniteAbilityMutator_Effect final : public UVerseFortniteAbilityMutator
{
public:
	TSubclassOf<class UGameplayEffect>            EffectToApply;                                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VerseFortniteAbilityMutator_Effect">();
	}
	static class UVerseFortniteAbilityMutator_Effect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVerseFortniteAbilityMutator_Effect>();
	}
};
static_assert(alignof(UVerseFortniteAbilityMutator_Effect) == 0x000008, "Wrong alignment on UVerseFortniteAbilityMutator_Effect");
static_assert(sizeof(UVerseFortniteAbilityMutator_Effect) == 0x000038, "Wrong size on UVerseFortniteAbilityMutator_Effect");
static_assert(offsetof(UVerseFortniteAbilityMutator_Effect, EffectToApply) == 0x000028, "Member 'UVerseFortniteAbilityMutator_Effect::EffectToApply' has a wrong offset!");

// Class VerseFortnite.VerseFortniteAbilityMutator_Montage
// 0x0008 (0x0030 - 0x0028)
class UVerseFortniteAbilityMutator_Montage final : public UVerseFortniteAbilityMutator
{
public:
	class UAnimMontage*                           MontageToPlay;                                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VerseFortniteAbilityMutator_Montage">();
	}
	static class UVerseFortniteAbilityMutator_Montage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVerseFortniteAbilityMutator_Montage>();
	}
};
static_assert(alignof(UVerseFortniteAbilityMutator_Montage) == 0x000008, "Wrong alignment on UVerseFortniteAbilityMutator_Montage");
static_assert(sizeof(UVerseFortniteAbilityMutator_Montage) == 0x000030, "Wrong size on UVerseFortniteAbilityMutator_Montage");
static_assert(offsetof(UVerseFortniteAbilityMutator_Montage, MontageToPlay) == 0x000028, "Member 'UVerseFortniteAbilityMutator_Montage::MontageToPlay' has a wrong offset!");

// Class VerseFortnite.VerseFortniteEntitySubsystem
// 0x0010 (0x0040 - 0x0030)
class UVerseFortniteEntitySubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VerseFortniteEntitySubsystem">();
	}
	static class UVerseFortniteEntitySubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVerseFortniteEntitySubsystem>();
	}
};
static_assert(alignof(UVerseFortniteEntitySubsystem) == 0x000008, "Wrong alignment on UVerseFortniteEntitySubsystem");
static_assert(sizeof(UVerseFortniteEntitySubsystem) == 0x000040, "Wrong size on UVerseFortniteEntitySubsystem");

// Class VerseFortnite.VerseFortniteMovementComponentBase
// 0x0000 (0x0090 - 0x0090)
class UVerseFortniteMovementComponentBase : public UEntityActorComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VerseFortniteMovementComponentBase">();
	}
	static class UVerseFortniteMovementComponentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVerseFortniteMovementComponentBase>();
	}
};
static_assert(alignof(UVerseFortniteMovementComponentBase) == 0x000008, "Wrong alignment on UVerseFortniteMovementComponentBase");
static_assert(sizeof(UVerseFortniteMovementComponentBase) == 0x000090, "Wrong size on UVerseFortniteMovementComponentBase");

}

