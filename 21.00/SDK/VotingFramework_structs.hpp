#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VotingFramework

#include "Basic.hpp"

#include "GameplayTags_0_structs.hpp"
#include "NetCore_structs.hpp"


namespace SDK
{

// Enum VotingFramework.EVoteState
// NumValues: 0x0005
enum class EVoteState : uint8
{
	None                                     = 0,
	Setup                                    = 1,
	Active                                   = 2,
	Completed                                = 3,
	EVoteState_MAX                           = 4,
};

// Enum VotingFramework.EVoteSessionState
// NumValues: 0x0006
enum class EVoteSessionState : uint8
{
	None                                     = 0,
	Setup                                    = 1,
	Voting                                   = 2,
	Complete                                 = 3,
	Shutdown                                 = 4,
	EVoteSessionState_MAX                    = 5,
};

// Enum VotingFramework.EVoteSessionNetworkType
// NumValues: 0x0004
enum class EVoteSessionNetworkType : uint8
{
	NotDetermined                            = 0,
	DedicatedServer                          = 1,
	MeshNetwork                              = 2,
	EVoteSessionNetworkType_MAX              = 3,
};

// ScriptStruct VotingFramework.CastedVote
// 0x000C (0x000C - 0x0000)
struct FCastedVote final
{
public:
	class FName                                   VoteSessionId;                                     // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VoteId;                                            // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VoteSelectionId;                                   // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCastedVote) == 0x000004, "Wrong alignment on FCastedVote");
static_assert(sizeof(FCastedVote) == 0x00000C, "Wrong size on FCastedVote");
static_assert(offsetof(FCastedVote, VoteSessionId) == 0x000000, "Member 'FCastedVote::VoteSessionId' has a wrong offset!");
static_assert(offsetof(FCastedVote, VoteId) == 0x000004, "Member 'FCastedVote::VoteId' has a wrong offset!");
static_assert(offsetof(FCastedVote, VoteSelectionId) == 0x000008, "Member 'FCastedVote::VoteSelectionId' has a wrong offset!");

// ScriptStruct VotingFramework.VoteSelection
// 0x000C (0x000C - 0x0000)
struct FVoteSelection final
{
public:
	struct FGameplayTag                           VoteSessionId;                                     // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           VoteId;                                            // 0x0004(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           VoteSelectionId;                                   // 0x0008(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoteSelection) == 0x000004, "Wrong alignment on FVoteSelection");
static_assert(sizeof(FVoteSelection) == 0x00000C, "Wrong size on FVoteSelection");
static_assert(offsetof(FVoteSelection, VoteSessionId) == 0x000000, "Member 'FVoteSelection::VoteSessionId' has a wrong offset!");
static_assert(offsetof(FVoteSelection, VoteId) == 0x000004, "Member 'FVoteSelection::VoteId' has a wrong offset!");
static_assert(offsetof(FVoteSelection, VoteSelectionId) == 0x000008, "Member 'FVoteSelection::VoteSelectionId' has a wrong offset!");

// ScriptStruct VotingFramework.VoteSelectionSettings
// 0x0020 (0x0020 - 0x0000)
struct FVoteSelectionSettings final
{
public:
	struct FGameplayTag                           VoteSelectionId;                                   // 0x0000(0x0004)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   VoteSelectionText;                                 // 0x0008(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoteSelectionSettings) == 0x000008, "Wrong alignment on FVoteSelectionSettings");
static_assert(sizeof(FVoteSelectionSettings) == 0x000020, "Wrong size on FVoteSelectionSettings");
static_assert(offsetof(FVoteSelectionSettings, VoteSelectionId) == 0x000000, "Member 'FVoteSelectionSettings::VoteSelectionId' has a wrong offset!");
static_assert(offsetof(FVoteSelectionSettings, VoteSelectionText) == 0x000008, "Member 'FVoteSelectionSettings::VoteSelectionText' has a wrong offset!");

// ScriptStruct VotingFramework.VoteSettings
// 0x0030 (0x0030 - 0x0000)
struct FVoteSettings final
{
public:
	struct FGameplayTag                           VoteId;                                            // 0x0000(0x0004)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocksSelection;                                   // 0x0004(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   VoteText;                                          // 0x0008(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FVoteSelectionSettings>         VoteSelections;                                    // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoteSettings) == 0x000008, "Wrong alignment on FVoteSettings");
static_assert(sizeof(FVoteSettings) == 0x000030, "Wrong size on FVoteSettings");
static_assert(offsetof(FVoteSettings, VoteId) == 0x000000, "Member 'FVoteSettings::VoteId' has a wrong offset!");
static_assert(offsetof(FVoteSettings, bLocksSelection) == 0x000004, "Member 'FVoteSettings::bLocksSelection' has a wrong offset!");
static_assert(offsetof(FVoteSettings, VoteText) == 0x000008, "Member 'FVoteSettings::VoteText' has a wrong offset!");
static_assert(offsetof(FVoteSettings, VoteSelections) == 0x000020, "Member 'FVoteSettings::VoteSelections' has a wrong offset!");

// ScriptStruct VotingFramework.VoteSessionSettings
// 0x0038 (0x0038 - 0x0000)
struct FVoteSessionSettings final
{
public:
	struct FGameplayTag                           VoteSessionId;                                     // 0x0000(0x0004)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   VoteSessionText;                                   // 0x0008(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FVoteSettings>                  VoteSettingsList;                                  // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EVoteSessionNetworkType                       NetworkType;                                       // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoteSessionSettings) == 0x000008, "Wrong alignment on FVoteSessionSettings");
static_assert(sizeof(FVoteSessionSettings) == 0x000038, "Wrong size on FVoteSessionSettings");
static_assert(offsetof(FVoteSessionSettings, VoteSessionId) == 0x000000, "Member 'FVoteSessionSettings::VoteSessionId' has a wrong offset!");
static_assert(offsetof(FVoteSessionSettings, VoteSessionText) == 0x000008, "Member 'FVoteSessionSettings::VoteSessionText' has a wrong offset!");
static_assert(offsetof(FVoteSessionSettings, VoteSettingsList) == 0x000020, "Member 'FVoteSessionSettings::VoteSettingsList' has a wrong offset!");
static_assert(offsetof(FVoteSessionSettings, NetworkType) == 0x000030, "Member 'FVoteSessionSettings::NetworkType' has a wrong offset!");

// ScriptStruct VotingFramework.VoteSelectionResults
// 0x002C (0x0038 - 0x000C)
struct FVoteSelectionResults final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWorld*                                 WorldRef;                                          // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VoteSessionId;                                     // 0x0018(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   VoteId;                                            // 0x001C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   VoteSelectionId;                                   // 0x0020(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ServerVoteTotal;                                   // 0x0024(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         AllServersVoteTotal;                               // 0x0028(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Shadow_ServerVoteTotal;                            // 0x002C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Shadow_AllServersVoteTotal;                        // 0x0030(0x0004)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoteSelectionResults) == 0x000008, "Wrong alignment on FVoteSelectionResults");
static_assert(sizeof(FVoteSelectionResults) == 0x000038, "Wrong size on FVoteSelectionResults");
static_assert(offsetof(FVoteSelectionResults, WorldRef) == 0x000010, "Member 'FVoteSelectionResults::WorldRef' has a wrong offset!");
static_assert(offsetof(FVoteSelectionResults, VoteSessionId) == 0x000018, "Member 'FVoteSelectionResults::VoteSessionId' has a wrong offset!");
static_assert(offsetof(FVoteSelectionResults, VoteId) == 0x00001C, "Member 'FVoteSelectionResults::VoteId' has a wrong offset!");
static_assert(offsetof(FVoteSelectionResults, VoteSelectionId) == 0x000020, "Member 'FVoteSelectionResults::VoteSelectionId' has a wrong offset!");
static_assert(offsetof(FVoteSelectionResults, ServerVoteTotal) == 0x000024, "Member 'FVoteSelectionResults::ServerVoteTotal' has a wrong offset!");
static_assert(offsetof(FVoteSelectionResults, AllServersVoteTotal) == 0x000028, "Member 'FVoteSelectionResults::AllServersVoteTotal' has a wrong offset!");
static_assert(offsetof(FVoteSelectionResults, Shadow_ServerVoteTotal) == 0x00002C, "Member 'FVoteSelectionResults::Shadow_ServerVoteTotal' has a wrong offset!");
static_assert(offsetof(FVoteSelectionResults, Shadow_AllServersVoteTotal) == 0x000030, "Member 'FVoteSelectionResults::Shadow_AllServersVoteTotal' has a wrong offset!");

// ScriptStruct VotingFramework.VoteSelectionResultsArray
// 0x0018 (0x0120 - 0x0108)
struct FVoteSelectionResultsArray final : public FFastArraySerializer
{
public:
	class UWorld*                                 WorldRef;                                          // 0x0108(0x0008)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVoteSelectionResults>          VoteSelectionResults;                              // 0x0110(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FVoteSelectionResultsArray) == 0x000008, "Wrong alignment on FVoteSelectionResultsArray");
static_assert(sizeof(FVoteSelectionResultsArray) == 0x000120, "Wrong size on FVoteSelectionResultsArray");
static_assert(offsetof(FVoteSelectionResultsArray, WorldRef) == 0x000108, "Member 'FVoteSelectionResultsArray::WorldRef' has a wrong offset!");
static_assert(offsetof(FVoteSelectionResultsArray, VoteSelectionResults) == 0x000110, "Member 'FVoteSelectionResultsArray::VoteSelectionResults' has a wrong offset!");

// ScriptStruct VotingFramework.VoteRuntime
// 0x0034 (0x0040 - 0x000C)
struct FVoteRuntime final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWorld*                                 WorldRef;                                          // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VoteSessionId;                                     // 0x0018(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   VoteId;                                            // 0x001C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FName>                           VoteSelectionIds;                                  // 0x0020(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	EVoteState                                    VoteState;                                         // 0x0030(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   VoteSelectionWinningResult;                        // 0x0034(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   Shadow_VoteSelectionWinningResult;                 // 0x0038(0x0004)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVoteState                                    Shadow_VoteState;                                  // 0x003C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoteRuntime) == 0x000008, "Wrong alignment on FVoteRuntime");
static_assert(sizeof(FVoteRuntime) == 0x000040, "Wrong size on FVoteRuntime");
static_assert(offsetof(FVoteRuntime, WorldRef) == 0x000010, "Member 'FVoteRuntime::WorldRef' has a wrong offset!");
static_assert(offsetof(FVoteRuntime, VoteSessionId) == 0x000018, "Member 'FVoteRuntime::VoteSessionId' has a wrong offset!");
static_assert(offsetof(FVoteRuntime, VoteId) == 0x00001C, "Member 'FVoteRuntime::VoteId' has a wrong offset!");
static_assert(offsetof(FVoteRuntime, VoteSelectionIds) == 0x000020, "Member 'FVoteRuntime::VoteSelectionIds' has a wrong offset!");
static_assert(offsetof(FVoteRuntime, VoteState) == 0x000030, "Member 'FVoteRuntime::VoteState' has a wrong offset!");
static_assert(offsetof(FVoteRuntime, VoteSelectionWinningResult) == 0x000034, "Member 'FVoteRuntime::VoteSelectionWinningResult' has a wrong offset!");
static_assert(offsetof(FVoteRuntime, Shadow_VoteSelectionWinningResult) == 0x000038, "Member 'FVoteRuntime::Shadow_VoteSelectionWinningResult' has a wrong offset!");
static_assert(offsetof(FVoteRuntime, Shadow_VoteState) == 0x00003C, "Member 'FVoteRuntime::Shadow_VoteState' has a wrong offset!");

// ScriptStruct VotingFramework.VoteRuntimeArray
// 0x0018 (0x0120 - 0x0108)
struct FVoteRuntimeArray final : public FFastArraySerializer
{
public:
	class UWorld*                                 WorldRef;                                          // 0x0108(0x0008)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVoteRuntime>                   VotingResults;                                     // 0x0110(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FVoteRuntimeArray) == 0x000008, "Wrong alignment on FVoteRuntimeArray");
static_assert(sizeof(FVoteRuntimeArray) == 0x000120, "Wrong size on FVoteRuntimeArray");
static_assert(offsetof(FVoteRuntimeArray, WorldRef) == 0x000108, "Member 'FVoteRuntimeArray::WorldRef' has a wrong offset!");
static_assert(offsetof(FVoteRuntimeArray, VotingResults) == 0x000110, "Member 'FVoteRuntimeArray::VotingResults' has a wrong offset!");

// ScriptStruct VotingFramework.VoteSessionRuntime
// 0x001C (0x0028 - 0x000C)
struct FVoteSessionRuntime final : public FFastArraySerializerItem
{
public:
	class FName                                   VoteSessionId;                                     // 0x000C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVoteSessionNetworkType                       NetworkType;                                       // 0x0010(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVoteSessionState                             VoteSessionState;                                  // 0x0011(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CurrentVoteId;                                     // 0x0014(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWorld*                                 WorldRef;                                          // 0x0018(0x0008)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVoteSessionState                             Shadow_VoteSessionState;                           // 0x0020(0x0001)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVoteSessionRuntime) == 0x000008, "Wrong alignment on FVoteSessionRuntime");
static_assert(sizeof(FVoteSessionRuntime) == 0x000028, "Wrong size on FVoteSessionRuntime");
static_assert(offsetof(FVoteSessionRuntime, VoteSessionId) == 0x00000C, "Member 'FVoteSessionRuntime::VoteSessionId' has a wrong offset!");
static_assert(offsetof(FVoteSessionRuntime, NetworkType) == 0x000010, "Member 'FVoteSessionRuntime::NetworkType' has a wrong offset!");
static_assert(offsetof(FVoteSessionRuntime, VoteSessionState) == 0x000011, "Member 'FVoteSessionRuntime::VoteSessionState' has a wrong offset!");
static_assert(offsetof(FVoteSessionRuntime, CurrentVoteId) == 0x000014, "Member 'FVoteSessionRuntime::CurrentVoteId' has a wrong offset!");
static_assert(offsetof(FVoteSessionRuntime, WorldRef) == 0x000018, "Member 'FVoteSessionRuntime::WorldRef' has a wrong offset!");
static_assert(offsetof(FVoteSessionRuntime, Shadow_VoteSessionState) == 0x000020, "Member 'FVoteSessionRuntime::Shadow_VoteSessionState' has a wrong offset!");

// ScriptStruct VotingFramework.VoteSessionRuntimeArray
// 0x0018 (0x0120 - 0x0108)
struct FVoteSessionRuntimeArray final : public FFastArraySerializer
{
public:
	class UWorld*                                 WorldRef;                                          // 0x0108(0x0008)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVoteSessionRuntime>            VotingSessions;                                    // 0x0110(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FVoteSessionRuntimeArray) == 0x000008, "Wrong alignment on FVoteSessionRuntimeArray");
static_assert(sizeof(FVoteSessionRuntimeArray) == 0x000120, "Wrong size on FVoteSessionRuntimeArray");
static_assert(offsetof(FVoteSessionRuntimeArray, WorldRef) == 0x000108, "Member 'FVoteSessionRuntimeArray::WorldRef' has a wrong offset!");
static_assert(offsetof(FVoteSessionRuntimeArray, VotingSessions) == 0x000110, "Member 'FVoteSessionRuntimeArray::VotingSessions' has a wrong offset!");

}

