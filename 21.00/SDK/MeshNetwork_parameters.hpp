#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MeshNetwork

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "MeshNetwork_structs.hpp"


namespace SDK::Params
{

// Function MeshNetwork.MeshBeaconClient.ServerSetClientId
// 0x0010 (0x0010 - 0x0000)
struct MeshBeaconClient_ServerSetClientId final
{
public:
	class FString                                 NewClientId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeshBeaconClient_ServerSetClientId) == 0x000008, "Wrong alignment on MeshBeaconClient_ServerSetClientId");
static_assert(sizeof(MeshBeaconClient_ServerSetClientId) == 0x000010, "Wrong size on MeshBeaconClient_ServerSetClientId");
static_assert(offsetof(MeshBeaconClient_ServerSetClientId, NewClientId) == 0x000000, "Member 'MeshBeaconClient_ServerSetClientId::NewClientId' has a wrong offset!");

// Function MeshNetwork.MeshBeaconClient.ServerUpdateLevelVisibility
// 0x000C (0x000C - 0x0000)
struct MeshBeaconClient_ServerUpdateLevelVisibility final
{
public:
	struct FUpdateLevelVisibilityLevelInfo        LevelVisibility;                                   // 0x0000(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeshBeaconClient_ServerUpdateLevelVisibility) == 0x000004, "Wrong alignment on MeshBeaconClient_ServerUpdateLevelVisibility");
static_assert(sizeof(MeshBeaconClient_ServerUpdateLevelVisibility) == 0x00000C, "Wrong size on MeshBeaconClient_ServerUpdateLevelVisibility");
static_assert(offsetof(MeshBeaconClient_ServerUpdateLevelVisibility, LevelVisibility) == 0x000000, "Member 'MeshBeaconClient_ServerUpdateLevelVisibility::LevelVisibility' has a wrong offset!");

// Function MeshNetwork.MeshBeaconClient.ServerUpdateMultipleLevelsVisibility
// 0x0010 (0x0010 - 0x0000)
struct MeshBeaconClient_ServerUpdateMultipleLevelsVisibility final
{
public:
	TArray<struct FUpdateLevelVisibilityLevelInfo> LevelVisibilities;                                 // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeshBeaconClient_ServerUpdateMultipleLevelsVisibility) == 0x000008, "Wrong alignment on MeshBeaconClient_ServerUpdateMultipleLevelsVisibility");
static_assert(sizeof(MeshBeaconClient_ServerUpdateMultipleLevelsVisibility) == 0x000010, "Wrong size on MeshBeaconClient_ServerUpdateMultipleLevelsVisibility");
static_assert(offsetof(MeshBeaconClient_ServerUpdateMultipleLevelsVisibility, LevelVisibilities) == 0x000000, "Member 'MeshBeaconClient_ServerUpdateMultipleLevelsVisibility::LevelVisibilities' has a wrong offset!");

// Function MeshNetwork.MeshNetworkComponent.GetMeshNetworkNodeType
// 0x0001 (0x0001 - 0x0000)
struct MeshNetworkComponent_GetMeshNetworkNodeType final
{
public:
	EMeshNetworkNodeType                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeshNetworkComponent_GetMeshNetworkNodeType) == 0x000001, "Wrong alignment on MeshNetworkComponent_GetMeshNetworkNodeType");
static_assert(sizeof(MeshNetworkComponent_GetMeshNetworkNodeType) == 0x000001, "Wrong size on MeshNetworkComponent_GetMeshNetworkNodeType");
static_assert(offsetof(MeshNetworkComponent_GetMeshNetworkNodeType, ReturnValue) == 0x000000, "Member 'MeshNetworkComponent_GetMeshNetworkNodeType::ReturnValue' has a wrong offset!");

// Function MeshNetwork.MeshNetworkComponent.IsConnectedToMeshRoot
// 0x0001 (0x0001 - 0x0000)
struct MeshNetworkComponent_IsConnectedToMeshRoot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeshNetworkComponent_IsConnectedToMeshRoot) == 0x000001, "Wrong alignment on MeshNetworkComponent_IsConnectedToMeshRoot");
static_assert(sizeof(MeshNetworkComponent_IsConnectedToMeshRoot) == 0x000001, "Wrong size on MeshNetworkComponent_IsConnectedToMeshRoot");
static_assert(offsetof(MeshNetworkComponent_IsConnectedToMeshRoot, ReturnValue) == 0x000000, "Member 'MeshNetworkComponent_IsConnectedToMeshRoot::ReturnValue' has a wrong offset!");

// Function MeshNetwork.MeshNetworkSubsystem.DisableMeshReplication
// 0x0008 (0x0008 - 0x0000)
struct MeshNetworkSubsystem_DisableMeshReplication final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeshNetworkSubsystem_DisableMeshReplication) == 0x000008, "Wrong alignment on MeshNetworkSubsystem_DisableMeshReplication");
static_assert(sizeof(MeshNetworkSubsystem_DisableMeshReplication) == 0x000008, "Wrong size on MeshNetworkSubsystem_DisableMeshReplication");
static_assert(offsetof(MeshNetworkSubsystem_DisableMeshReplication, Actor) == 0x000000, "Member 'MeshNetworkSubsystem_DisableMeshReplication::Actor' has a wrong offset!");

// Function MeshNetwork.MeshNetworkSubsystem.EnableMeshReplication
// 0x0010 (0x0010 - 0x0000)
struct MeshNetworkSubsystem_EnableMeshReplication final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMeshNetworkComponent>      MeshComponentClass;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeshNetworkSubsystem_EnableMeshReplication) == 0x000008, "Wrong alignment on MeshNetworkSubsystem_EnableMeshReplication");
static_assert(sizeof(MeshNetworkSubsystem_EnableMeshReplication) == 0x000010, "Wrong size on MeshNetworkSubsystem_EnableMeshReplication");
static_assert(offsetof(MeshNetworkSubsystem_EnableMeshReplication, Actor) == 0x000000, "Member 'MeshNetworkSubsystem_EnableMeshReplication::Actor' has a wrong offset!");
static_assert(offsetof(MeshNetworkSubsystem_EnableMeshReplication, MeshComponentClass) == 0x000008, "Member 'MeshNetworkSubsystem_EnableMeshReplication::MeshComponentClass' has a wrong offset!");

// Function MeshNetwork.MeshNetworkSubsystem.GetMetaData
// 0x0001 (0x0001 - 0x0000)
struct MeshNetworkSubsystem_GetMetaData final
{
public:
	struct FMeshMetaDataStruct                    MetaData;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeshNetworkSubsystem_GetMetaData) == 0x000001, "Wrong alignment on MeshNetworkSubsystem_GetMetaData");
static_assert(sizeof(MeshNetworkSubsystem_GetMetaData) == 0x000001, "Wrong size on MeshNetworkSubsystem_GetMetaData");
static_assert(offsetof(MeshNetworkSubsystem_GetMetaData, MetaData) == 0x000000, "Member 'MeshNetworkSubsystem_GetMetaData::MetaData' has a wrong offset!");

// Function MeshNetwork.MeshNetworkSubsystem.GetMetaDataWithKey
// 0x0008 (0x0008 - 0x0000)
struct MeshNetworkSubsystem_GetMetaDataWithKey final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMeshMetaDataStruct                    MetaData;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MeshNetworkSubsystem_GetMetaDataWithKey) == 0x000004, "Wrong alignment on MeshNetworkSubsystem_GetMetaDataWithKey");
static_assert(sizeof(MeshNetworkSubsystem_GetMetaDataWithKey) == 0x000008, "Wrong size on MeshNetworkSubsystem_GetMetaDataWithKey");
static_assert(offsetof(MeshNetworkSubsystem_GetMetaDataWithKey, Key) == 0x000000, "Member 'MeshNetworkSubsystem_GetMetaDataWithKey::Key' has a wrong offset!");
static_assert(offsetof(MeshNetworkSubsystem_GetMetaDataWithKey, MetaData) == 0x000004, "Member 'MeshNetworkSubsystem_GetMetaDataWithKey::MetaData' has a wrong offset!");
static_assert(offsetof(MeshNetworkSubsystem_GetMetaDataWithKey, ReturnValue) == 0x000005, "Member 'MeshNetworkSubsystem_GetMetaDataWithKey::ReturnValue' has a wrong offset!");

// Function MeshNetwork.MeshNetworkSubsystem.SetMetaData
// 0x0001 (0x0001 - 0x0000)
struct MeshNetworkSubsystem_SetMetaData final
{
public:
	struct FMeshMetaDataStruct                    MetaData;                                          // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeshNetworkSubsystem_SetMetaData) == 0x000001, "Wrong alignment on MeshNetworkSubsystem_SetMetaData");
static_assert(sizeof(MeshNetworkSubsystem_SetMetaData) == 0x000001, "Wrong size on MeshNetworkSubsystem_SetMetaData");
static_assert(offsetof(MeshNetworkSubsystem_SetMetaData, MetaData) == 0x000000, "Member 'MeshNetworkSubsystem_SetMetaData::MetaData' has a wrong offset!");

// Function MeshNetwork.MeshNetworkSubsystem.SetMetaDataWithKey
// 0x0008 (0x0008 - 0x0000)
struct MeshNetworkSubsystem_SetMetaDataWithKey final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMeshMetaDataStruct                    MetaData;                                          // 0x0004(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MeshNetworkSubsystem_SetMetaDataWithKey) == 0x000004, "Wrong alignment on MeshNetworkSubsystem_SetMetaDataWithKey");
static_assert(sizeof(MeshNetworkSubsystem_SetMetaDataWithKey) == 0x000008, "Wrong size on MeshNetworkSubsystem_SetMetaDataWithKey");
static_assert(offsetof(MeshNetworkSubsystem_SetMetaDataWithKey, Key) == 0x000000, "Member 'MeshNetworkSubsystem_SetMetaDataWithKey::Key' has a wrong offset!");
static_assert(offsetof(MeshNetworkSubsystem_SetMetaDataWithKey, MetaData) == 0x000004, "Member 'MeshNetworkSubsystem_SetMetaDataWithKey::MetaData' has a wrong offset!");

// Function MeshNetwork.MeshNetworkSubsystem.GetConnectedToRoot
// 0x0001 (0x0001 - 0x0000)
struct MeshNetworkSubsystem_GetConnectedToRoot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeshNetworkSubsystem_GetConnectedToRoot) == 0x000001, "Wrong alignment on MeshNetworkSubsystem_GetConnectedToRoot");
static_assert(sizeof(MeshNetworkSubsystem_GetConnectedToRoot) == 0x000001, "Wrong size on MeshNetworkSubsystem_GetConnectedToRoot");
static_assert(offsetof(MeshNetworkSubsystem_GetConnectedToRoot, ReturnValue) == 0x000000, "Member 'MeshNetworkSubsystem_GetConnectedToRoot::ReturnValue' has a wrong offset!");

// Function MeshNetwork.MeshNetworkSubsystem.GetGameServerNodeType
// 0x0001 (0x0001 - 0x0000)
struct MeshNetworkSubsystem_GetGameServerNodeType final
{
public:
	EMeshNetworkNodeType                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeshNetworkSubsystem_GetGameServerNodeType) == 0x000001, "Wrong alignment on MeshNetworkSubsystem_GetGameServerNodeType");
static_assert(sizeof(MeshNetworkSubsystem_GetGameServerNodeType) == 0x000001, "Wrong size on MeshNetworkSubsystem_GetGameServerNodeType");
static_assert(offsetof(MeshNetworkSubsystem_GetGameServerNodeType, ReturnValue) == 0x000000, "Member 'MeshNetworkSubsystem_GetGameServerNodeType::ReturnValue' has a wrong offset!");

// Function MeshNetwork.MeshNetworkSubsystem.GetMeshNetworkNodeType
// 0x0001 (0x0001 - 0x0000)
struct MeshNetworkSubsystem_GetMeshNetworkNodeType final
{
public:
	EMeshNetworkNodeType                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeshNetworkSubsystem_GetMeshNetworkNodeType) == 0x000001, "Wrong alignment on MeshNetworkSubsystem_GetMeshNetworkNodeType");
static_assert(sizeof(MeshNetworkSubsystem_GetMeshNetworkNodeType) == 0x000001, "Wrong size on MeshNetworkSubsystem_GetMeshNetworkNodeType");
static_assert(offsetof(MeshNetworkSubsystem_GetMeshNetworkNodeType, ReturnValue) == 0x000000, "Member 'MeshNetworkSubsystem_GetMeshNetworkNodeType::ReturnValue' has a wrong offset!");

}

