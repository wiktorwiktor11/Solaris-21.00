#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EnergyRuntime

#include "Basic.hpp"

#include "EnergyRuntime_classes.hpp"
#include "EnergyRuntime_parameters.hpp"


namespace SDK
{

// Function EnergyRuntime.FortComponent_Energy.AddEnergy
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   OutAmountOfEnergyAdded                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AmountOfEnergyToAdd                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OptionalEnergySource                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bBroadcastEnergyPercentChanged                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortComponent_Energy::AddEnergy(float* OutAmountOfEnergyAdded, float AmountOfEnergyToAdd, class UObject* OptionalEnergySource, bool bBroadcastEnergyPercentChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortComponent_Energy", "AddEnergy");

	Params::FortComponent_Energy_AddEnergy Parms{};

	Parms.AmountOfEnergyToAdd = AmountOfEnergyToAdd;
	Parms.OptionalEnergySource = OptionalEnergySource;
	Parms.bBroadcastEnergyPercentChanged = bBroadcastEnergyPercentChanged;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAmountOfEnergyAdded != nullptr)
		*OutAmountOfEnergyAdded = Parms.OutAmountOfEnergyAdded;

	return Parms.ReturnValue;
}


// Function EnergyRuntime.FortComponent_Energy.HandleControllerChanged
// (Final, Native, Private)
// Parameters:
// class APawn*                            Pawn                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      OldController                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      NewController                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortComponent_Energy::HandleControllerChanged(class APawn* Pawn, class AController* OldController, class AController* NewController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortComponent_Energy", "HandleControllerChanged");

	Params::FortComponent_Energy_HandleControllerChanged Parms{};

	Parms.Pawn = Pawn;
	Parms.OldController = OldController;
	Parms.NewController = NewController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EnergyRuntime.FortComponent_Energy.SetAllEnergyUsageFree
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bShouldEnergyUsageBeFree                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortComponent_Energy::SetAllEnergyUsageFree(bool bShouldEnergyUsageBeFree)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortComponent_Energy", "SetAllEnergyUsageFree");

	Params::FortComponent_Energy_SetAllEnergyUsageFree Parms{};

	Parms.bShouldEnergyUsageBeFree = bShouldEnergyUsageBeFree;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EnergyRuntime.FortComponent_Energy.StartAddingEnergy
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   EnergyToAddPerSecond                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     EnergySourceIdentifier                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OptionalEnergySource                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortComponent_Energy::StartAddingEnergy(float EnergyToAddPerSecond, const struct FGameplayTag& EnergySourceIdentifier, class UObject* OptionalEnergySource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortComponent_Energy", "StartAddingEnergy");

	Params::FortComponent_Energy_StartAddingEnergy Parms{};

	Parms.EnergyToAddPerSecond = EnergyToAddPerSecond;
	Parms.EnergySourceIdentifier = std::move(EnergySourceIdentifier);
	Parms.OptionalEnergySource = OptionalEnergySource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EnergyRuntime.FortComponent_Energy.StartUsingEnergy
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   EnergyToUseToStart                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   EnergyToUsePerSecond                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     EnergyUseIdentifier                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OptionalEnergyUser                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortComponent_Energy::StartUsingEnergy(float EnergyToUseToStart, float EnergyToUsePerSecond, const struct FGameplayTag& EnergyUseIdentifier, class UObject* OptionalEnergyUser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortComponent_Energy", "StartUsingEnergy");

	Params::FortComponent_Energy_StartUsingEnergy Parms{};

	Parms.EnergyToUseToStart = EnergyToUseToStart;
	Parms.EnergyToUsePerSecond = EnergyToUsePerSecond;
	Parms.EnergyUseIdentifier = std::move(EnergyUseIdentifier);
	Parms.OptionalEnergyUser = OptionalEnergyUser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EnergyRuntime.FortComponent_Energy.StopAddingEnergy
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     EnergyUseIdentifier                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OptionalEnergySource                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortComponent_Energy::StopAddingEnergy(const struct FGameplayTag& EnergyUseIdentifier, class UObject* OptionalEnergySource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortComponent_Energy", "StopAddingEnergy");

	Params::FortComponent_Energy_StopAddingEnergy Parms{};

	Parms.EnergyUseIdentifier = std::move(EnergyUseIdentifier);
	Parms.OptionalEnergySource = OptionalEnergySource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EnergyRuntime.FortComponent_Energy.StopUsingEnergy
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     EnergyUseIdentifier                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OptionalEnergyUser                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortComponent_Energy::StopUsingEnergy(const struct FGameplayTag& EnergyUseIdentifier, class UObject* OptionalEnergyUser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortComponent_Energy", "StopUsingEnergy");

	Params::FortComponent_Energy_StopUsingEnergy Parms{};

	Parms.EnergyUseIdentifier = std::move(EnergyUseIdentifier);
	Parms.OptionalEnergyUser = OptionalEnergyUser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EnergyRuntime.FortComponent_Energy.UseEnergy
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   OutAmountOfEnergyUsed                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AmountOfEnergyToUse                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseEnergyEvenOnFailure                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OptionalEnergyUser                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bBroadcastEnergyPercentChanged                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortComponent_Energy::UseEnergy(float* OutAmountOfEnergyUsed, float AmountOfEnergyToUse, bool bUseEnergyEvenOnFailure, class UObject* OptionalEnergyUser, bool bBroadcastEnergyPercentChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortComponent_Energy", "UseEnergy");

	Params::FortComponent_Energy_UseEnergy Parms{};

	Parms.AmountOfEnergyToUse = AmountOfEnergyToUse;
	Parms.bUseEnergyEvenOnFailure = bUseEnergyEvenOnFailure;
	Parms.OptionalEnergyUser = OptionalEnergyUser;
	Parms.bBroadcastEnergyPercentChanged = bBroadcastEnergyPercentChanged;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAmountOfEnergyUsed != nullptr)
		*OutAmountOfEnergyUsed = Parms.OutAmountOfEnergyUsed;

	return Parms.ReturnValue;
}


// Function EnergyRuntime.FortComponent_Energy.GetCurrentEnergyPercentage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFortComponent_Energy::GetCurrentEnergyPercentage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortComponent_Energy", "GetCurrentEnergyPercentage");

	Params::FortComponent_Energy_GetCurrentEnergyPercentage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EnergyRuntime.FortComponent_Energy.HasSufficientEnergy
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   EnergyAmountToTest                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortComponent_Energy::HasSufficientEnergy(float EnergyAmountToTest) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortComponent_Energy", "HasSufficientEnergy");

	Params::FortComponent_Energy_HasSufficientEnergy Parms{};

	Parms.EnergyAmountToTest = EnergyAmountToTest;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

