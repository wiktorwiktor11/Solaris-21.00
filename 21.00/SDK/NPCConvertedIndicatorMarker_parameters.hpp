#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NPCConvertedIndicatorMarker

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"


namespace SDK::Params
{

// Function NPCConvertedIndicatorMarker.NPCConvertedIndicatorMarker_C.ExecuteUbergraph_NPCConvertedIndicatorMarker
// 0x01B0 (0x01B0 - 0x0000)
struct NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortWorldMarkerData                   K2Node_Event_FortWorldMarkerData;                  // 0x0008(0x0160)(ConstParm)
	class ANPC_Pawn_Wildlife_Parent_C*            K2Node_DynamicCast_AsNPC_Pawn_Wildlife_Parent;     // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortPawnComponent_Convert*             CallFunc_GetComponentByClass_ReturnValue;          // 0x0178(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        CallFunc_GetConverterPawn_ReturnValue;             // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0189(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x018A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18B[0x5];                                      // 0x018B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerState*                       CallFunc_AttemptGetPlayerStateForPawn_ReturnValue; // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_199[0x7];                                      // 0x0199(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerStateAthena*                 K2Node_DynamicCast_AsFort_Player_State_Athena;     // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker) == 0x000008, "Wrong alignment on NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker");
static_assert(sizeof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker) == 0x0001B0, "Wrong size on NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, EntryPoint) == 0x000000, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::EntryPoint' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, K2Node_Event_FortWorldMarkerData) == 0x000008, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::K2Node_Event_FortWorldMarkerData' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, K2Node_DynamicCast_AsNPC_Pawn_Wildlife_Parent) == 0x000168, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::K2Node_DynamicCast_AsNPC_Pawn_Wildlife_Parent' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, K2Node_DynamicCast_bSuccess) == 0x000170, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, CallFunc_GetComponentByClass_ReturnValue) == 0x000178, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, CallFunc_GetConverterPawn_ReturnValue) == 0x000180, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::CallFunc_GetConverterPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, CallFunc_IsValid_ReturnValue) == 0x000188, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, CallFunc_IsValid_ReturnValue_1) == 0x000189, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, CallFunc_IsLocallyControlled_ReturnValue) == 0x00018A, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, CallFunc_AttemptGetPlayerStateForPawn_ReturnValue) == 0x000190, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::CallFunc_AttemptGetPlayerStateForPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, CallFunc_IsValid_ReturnValue_2) == 0x000198, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, K2Node_DynamicCast_AsFort_Player_State_Athena) == 0x0001A0, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::K2Node_DynamicCast_AsFort_Player_State_Athena' has a wrong offset!");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker, K2Node_DynamicCast_bSuccess_1) == 0x0001A8, "Member 'NPCConvertedIndicatorMarker_C_ExecuteUbergraph_NPCConvertedIndicatorMarker::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function NPCConvertedIndicatorMarker.NPCConvertedIndicatorMarker_C.OnSetMarkerData
// 0x0160 (0x0160 - 0x0000)
struct NPCConvertedIndicatorMarker_C_OnSetMarkerData final
{
public:
	struct FFortWorldMarkerData                   FortWorldMarkerData;                               // 0x0000(0x0160)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(NPCConvertedIndicatorMarker_C_OnSetMarkerData) == 0x000008, "Wrong alignment on NPCConvertedIndicatorMarker_C_OnSetMarkerData");
static_assert(sizeof(NPCConvertedIndicatorMarker_C_OnSetMarkerData) == 0x000160, "Wrong size on NPCConvertedIndicatorMarker_C_OnSetMarkerData");
static_assert(offsetof(NPCConvertedIndicatorMarker_C_OnSetMarkerData, FortWorldMarkerData) == 0x000000, "Member 'NPCConvertedIndicatorMarker_C_OnSetMarkerData::FortWorldMarkerData' has a wrong offset!");

}

