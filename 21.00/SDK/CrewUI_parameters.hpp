#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CrewUI

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "CrewUI_structs.hpp"
#include "FortniteUI_structs.hpp"


namespace SDK::Params
{

// Function CrewUI.CrewPurchaseScreen.BeginProgress
// 0x0018 (0x0018 - 0x0000)
struct CrewPurchaseScreen_BeginProgress final
{
public:
	class FText                                   ProgressLabel;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrewPurchaseScreen_BeginProgress) == 0x000008, "Wrong alignment on CrewPurchaseScreen_BeginProgress");
static_assert(sizeof(CrewPurchaseScreen_BeginProgress) == 0x000018, "Wrong size on CrewPurchaseScreen_BeginProgress");
static_assert(offsetof(CrewPurchaseScreen_BeginProgress, ProgressLabel) == 0x000000, "Member 'CrewPurchaseScreen_BeginProgress::ProgressLabel' has a wrong offset!");

// Function CrewUI.CrewPurchaseScreen.OnContainerTabVisibilityUpdated
// 0x0008 (0x0008 - 0x0000)
struct CrewPurchaseScreen_OnContainerTabVisibilityUpdated final
{
public:
	bool                                          bTabsVisible;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpacingAdjustmentForTabs;                          // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrewPurchaseScreen_OnContainerTabVisibilityUpdated) == 0x000004, "Wrong alignment on CrewPurchaseScreen_OnContainerTabVisibilityUpdated");
static_assert(sizeof(CrewPurchaseScreen_OnContainerTabVisibilityUpdated) == 0x000008, "Wrong size on CrewPurchaseScreen_OnContainerTabVisibilityUpdated");
static_assert(offsetof(CrewPurchaseScreen_OnContainerTabVisibilityUpdated, bTabsVisible) == 0x000000, "Member 'CrewPurchaseScreen_OnContainerTabVisibilityUpdated::bTabsVisible' has a wrong offset!");
static_assert(offsetof(CrewPurchaseScreen_OnContainerTabVisibilityUpdated, SpacingAdjustmentForTabs) == 0x000004, "Member 'CrewPurchaseScreen_OnContainerTabVisibilityUpdated::SpacingAdjustmentForTabs' has a wrong offset!");

// Function CrewUI.CrewPurchaseScreen.OnSetNavButtonNotificationText
// 0x0018 (0x0018 - 0x0000)
struct CrewPurchaseScreen_OnSetNavButtonNotificationText final
{
public:
	class FText                                   NotificationText;                                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrewPurchaseScreen_OnSetNavButtonNotificationText) == 0x000008, "Wrong alignment on CrewPurchaseScreen_OnSetNavButtonNotificationText");
static_assert(sizeof(CrewPurchaseScreen_OnSetNavButtonNotificationText) == 0x000018, "Wrong size on CrewPurchaseScreen_OnSetNavButtonNotificationText");
static_assert(offsetof(CrewPurchaseScreen_OnSetNavButtonNotificationText, NotificationText) == 0x000000, "Member 'CrewPurchaseScreen_OnSetNavButtonNotificationText::NotificationText' has a wrong offset!");

// Function CrewUI.CrewPurchaseScreen.OnShowNavButtonNotification
// 0x0001 (0x0001 - 0x0000)
struct CrewPurchaseScreen_OnShowNavButtonNotification final
{
public:
	bool                                          bShowNotification;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrewPurchaseScreen_OnShowNavButtonNotification) == 0x000001, "Wrong alignment on CrewPurchaseScreen_OnShowNavButtonNotification");
static_assert(sizeof(CrewPurchaseScreen_OnShowNavButtonNotification) == 0x000001, "Wrong size on CrewPurchaseScreen_OnShowNavButtonNotification");
static_assert(offsetof(CrewPurchaseScreen_OnShowNavButtonNotification, bShowNotification) == 0x000000, "Member 'CrewPurchaseScreen_OnShowNavButtonNotification::bShowNotification' has a wrong offset!");

// Function CrewUI.CrewPurchaseScreen.OnUpdatePurchaseButtonState
// 0x0001 (0x0001 - 0x0000)
struct CrewPurchaseScreen_OnUpdatePurchaseButtonState final
{
public:
	ECrewPurchaseButtonState                      ButtonState;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrewPurchaseScreen_OnUpdatePurchaseButtonState) == 0x000001, "Wrong alignment on CrewPurchaseScreen_OnUpdatePurchaseButtonState");
static_assert(sizeof(CrewPurchaseScreen_OnUpdatePurchaseButtonState) == 0x000001, "Wrong size on CrewPurchaseScreen_OnUpdatePurchaseButtonState");
static_assert(offsetof(CrewPurchaseScreen_OnUpdatePurchaseButtonState, ButtonState) == 0x000000, "Member 'CrewPurchaseScreen_OnUpdatePurchaseButtonState::ButtonState' has a wrong offset!");

// Function CrewUI.CrewPurchaseScreen.OnUpdateVBuckRefundVisibility
// 0x0001 (0x0001 - 0x0000)
struct CrewPurchaseScreen_OnUpdateVBuckRefundVisibility final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrewPurchaseScreen_OnUpdateVBuckRefundVisibility) == 0x000001, "Wrong alignment on CrewPurchaseScreen_OnUpdateVBuckRefundVisibility");
static_assert(sizeof(CrewPurchaseScreen_OnUpdateVBuckRefundVisibility) == 0x000001, "Wrong size on CrewPurchaseScreen_OnUpdateVBuckRefundVisibility");
static_assert(offsetof(CrewPurchaseScreen_OnUpdateVBuckRefundVisibility, bVisible) == 0x000000, "Member 'CrewPurchaseScreen_OnUpdateVBuckRefundVisibility::bVisible' has a wrong offset!");

// Function CrewUI.CrewPurchaseScreen.OnUserInformationTextsUpdated
// 0x0038 (0x0038 - 0x0000)
struct CrewPurchaseScreen_OnUserInformationTextsUpdated final
{
public:
	class FText                                   UserInformationText1;                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   UserInformationText2;                              // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EMcpSubscriptionState                         SubscriptionState;                                 // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CrewPurchaseScreen_OnUserInformationTextsUpdated) == 0x000008, "Wrong alignment on CrewPurchaseScreen_OnUserInformationTextsUpdated");
static_assert(sizeof(CrewPurchaseScreen_OnUserInformationTextsUpdated) == 0x000038, "Wrong size on CrewPurchaseScreen_OnUserInformationTextsUpdated");
static_assert(offsetof(CrewPurchaseScreen_OnUserInformationTextsUpdated, UserInformationText1) == 0x000000, "Member 'CrewPurchaseScreen_OnUserInformationTextsUpdated::UserInformationText1' has a wrong offset!");
static_assert(offsetof(CrewPurchaseScreen_OnUserInformationTextsUpdated, UserInformationText2) == 0x000018, "Member 'CrewPurchaseScreen_OnUserInformationTextsUpdated::UserInformationText2' has a wrong offset!");
static_assert(offsetof(CrewPurchaseScreen_OnUserInformationTextsUpdated, SubscriptionState) == 0x000030, "Member 'CrewPurchaseScreen_OnUserInformationTextsUpdated::SubscriptionState' has a wrong offset!");

// Function CrewUI.BattlePassCrewPurchaseContainer.OnContentStateUpdated
// 0x0002 (0x0002 - 0x0000)
struct BattlePassCrewPurchaseContainer_OnContentStateUpdated final
{
public:
	EBattlePassCrewContentState                   InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInScreenOpened;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassCrewPurchaseContainer_OnContentStateUpdated) == 0x000001, "Wrong alignment on BattlePassCrewPurchaseContainer_OnContentStateUpdated");
static_assert(sizeof(BattlePassCrewPurchaseContainer_OnContentStateUpdated) == 0x000002, "Wrong size on BattlePassCrewPurchaseContainer_OnContentStateUpdated");
static_assert(offsetof(BattlePassCrewPurchaseContainer_OnContentStateUpdated, InState) == 0x000000, "Member 'BattlePassCrewPurchaseContainer_OnContentStateUpdated::InState' has a wrong offset!");
static_assert(offsetof(BattlePassCrewPurchaseContainer_OnContentStateUpdated, bInScreenOpened) == 0x000001, "Member 'BattlePassCrewPurchaseContainer_OnContentStateUpdated::bInScreenOpened' has a wrong offset!");

// Function CrewUI.BattlePassCrewPurchaseContainer.OnTriggerIntroAnimation
// 0x0001 (0x0001 - 0x0000)
struct BattlePassCrewPurchaseContainer_OnTriggerIntroAnimation final
{
public:
	bool                                          bCanClaimRewards;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassCrewPurchaseContainer_OnTriggerIntroAnimation) == 0x000001, "Wrong alignment on BattlePassCrewPurchaseContainer_OnTriggerIntroAnimation");
static_assert(sizeof(BattlePassCrewPurchaseContainer_OnTriggerIntroAnimation) == 0x000001, "Wrong size on BattlePassCrewPurchaseContainer_OnTriggerIntroAnimation");
static_assert(offsetof(BattlePassCrewPurchaseContainer_OnTriggerIntroAnimation, bCanClaimRewards) == 0x000000, "Member 'BattlePassCrewPurchaseContainer_OnTriggerIntroAnimation::bCanClaimRewards' has a wrong offset!");

// Function CrewUI.BattlePassPurchaseScreen.OnPurchaseStateChanged
// 0x0001 (0x0001 - 0x0000)
struct BattlePassPurchaseScreen_OnPurchaseStateChanged final
{
public:
	EBattlePassPurchaseState                      InCurrentState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassPurchaseScreen_OnPurchaseStateChanged) == 0x000001, "Wrong alignment on BattlePassPurchaseScreen_OnPurchaseStateChanged");
static_assert(sizeof(BattlePassPurchaseScreen_OnPurchaseStateChanged) == 0x000001, "Wrong size on BattlePassPurchaseScreen_OnPurchaseStateChanged");
static_assert(offsetof(BattlePassPurchaseScreen_OnPurchaseStateChanged, InCurrentState) == 0x000000, "Member 'BattlePassPurchaseScreen_OnPurchaseStateChanged::InCurrentState' has a wrong offset!");

// Function CrewUI.BattlePassPurchaseScreen.OnSetNavButtonNotificationText
// 0x0018 (0x0018 - 0x0000)
struct BattlePassPurchaseScreen_OnSetNavButtonNotificationText final
{
public:
	class FText                                   NotificationText;                                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassPurchaseScreen_OnSetNavButtonNotificationText) == 0x000008, "Wrong alignment on BattlePassPurchaseScreen_OnSetNavButtonNotificationText");
static_assert(sizeof(BattlePassPurchaseScreen_OnSetNavButtonNotificationText) == 0x000018, "Wrong size on BattlePassPurchaseScreen_OnSetNavButtonNotificationText");
static_assert(offsetof(BattlePassPurchaseScreen_OnSetNavButtonNotificationText, NotificationText) == 0x000000, "Member 'BattlePassPurchaseScreen_OnSetNavButtonNotificationText::NotificationText' has a wrong offset!");

// Function CrewUI.BattlePassPurchaseScreen.OnSetScreenInteractable
// 0x0001 (0x0001 - 0x0000)
struct BattlePassPurchaseScreen_OnSetScreenInteractable final
{
public:
	bool                                          bInteractable;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassPurchaseScreen_OnSetScreenInteractable) == 0x000001, "Wrong alignment on BattlePassPurchaseScreen_OnSetScreenInteractable");
static_assert(sizeof(BattlePassPurchaseScreen_OnSetScreenInteractable) == 0x000001, "Wrong size on BattlePassPurchaseScreen_OnSetScreenInteractable");
static_assert(offsetof(BattlePassPurchaseScreen_OnSetScreenInteractable, bInteractable) == 0x000000, "Member 'BattlePassPurchaseScreen_OnSetScreenInteractable::bInteractable' has a wrong offset!");

// Function CrewUI.BattlePassPurchaseScreen.OnShowNavButtonNotification
// 0x0001 (0x0001 - 0x0000)
struct BattlePassPurchaseScreen_OnShowNavButtonNotification final
{
public:
	bool                                          bShowNotification;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassPurchaseScreen_OnShowNavButtonNotification) == 0x000001, "Wrong alignment on BattlePassPurchaseScreen_OnShowNavButtonNotification");
static_assert(sizeof(BattlePassPurchaseScreen_OnShowNavButtonNotification) == 0x000001, "Wrong size on BattlePassPurchaseScreen_OnShowNavButtonNotification");
static_assert(offsetof(BattlePassPurchaseScreen_OnShowNavButtonNotification, bShowNotification) == 0x000000, "Member 'BattlePassPurchaseScreen_OnShowNavButtonNotification::bShowNotification' has a wrong offset!");

// Function CrewUI.CrewMultiSubscriptionAlertModal.OnSetHowToCancelURL
// 0x0010 (0x0010 - 0x0000)
struct CrewMultiSubscriptionAlertModal_OnSetHowToCancelURL final
{
public:
	class FString                                 MoreInfoUrl;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrewMultiSubscriptionAlertModal_OnSetHowToCancelURL) == 0x000008, "Wrong alignment on CrewMultiSubscriptionAlertModal_OnSetHowToCancelURL");
static_assert(sizeof(CrewMultiSubscriptionAlertModal_OnSetHowToCancelURL) == 0x000010, "Wrong size on CrewMultiSubscriptionAlertModal_OnSetHowToCancelURL");
static_assert(offsetof(CrewMultiSubscriptionAlertModal_OnSetHowToCancelURL, MoreInfoUrl) == 0x000000, "Member 'CrewMultiSubscriptionAlertModal_OnSetHowToCancelURL::MoreInfoUrl' has a wrong offset!");

// Function CrewUI.CrewPriceChangeAcknowledgeModal.OnSetPriceChangeAcknowledgeBodyTable
// 0x0010 (0x0010 - 0x0000)
struct CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeBodyTable final
{
public:
	TArray<struct FCrewTableRow>                  PriceChangeByRegionRows;                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeBodyTable) == 0x000008, "Wrong alignment on CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeBodyTable");
static_assert(sizeof(CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeBodyTable) == 0x000010, "Wrong size on CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeBodyTable");
static_assert(offsetof(CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeBodyTable, PriceChangeByRegionRows) == 0x000000, "Member 'CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeBodyTable::PriceChangeByRegionRows' has a wrong offset!");

// Function CrewUI.CrewPriceChangeAcknowledgeModal.OnSetPriceChangeAcknowledgeBodyText
// 0x0018 (0x0018 - 0x0000)
struct CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeBodyText final
{
public:
	class FText                                   BodyText;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeBodyText) == 0x000008, "Wrong alignment on CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeBodyText");
static_assert(sizeof(CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeBodyText) == 0x000018, "Wrong size on CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeBodyText");
static_assert(offsetof(CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeBodyText, BodyText) == 0x000000, "Member 'CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeBodyText::BodyText' has a wrong offset!");

// Function CrewUI.CrewPriceChangeAcknowledgeModal.OnSetPriceChangeAcknowledgeCancelSubscriptionButtonText
// 0x0018 (0x0018 - 0x0000)
struct CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeCancelSubscriptionButtonText final
{
public:
	class FText                                   CancelSubscriptionButtonText;                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeCancelSubscriptionButtonText) == 0x000008, "Wrong alignment on CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeCancelSubscriptionButtonText");
static_assert(sizeof(CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeCancelSubscriptionButtonText) == 0x000018, "Wrong size on CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeCancelSubscriptionButtonText");
static_assert(offsetof(CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeCancelSubscriptionButtonText, CancelSubscriptionButtonText) == 0x000000, "Member 'CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeCancelSubscriptionButtonText::CancelSubscriptionButtonText' has a wrong offset!");

// Function CrewUI.CrewPriceChangeAcknowledgeModal.OnSetPriceChangeAcknowledgeCheckboxText
// 0x0018 (0x0018 - 0x0000)
struct CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeCheckboxText final
{
public:
	class FText                                   CheckboxText;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeCheckboxText) == 0x000008, "Wrong alignment on CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeCheckboxText");
static_assert(sizeof(CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeCheckboxText) == 0x000018, "Wrong size on CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeCheckboxText");
static_assert(offsetof(CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeCheckboxText, CheckboxText) == 0x000000, "Member 'CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeCheckboxText::CheckboxText' has a wrong offset!");

// Function CrewUI.CrewPriceChangeAcknowledgeModal.OnSetPriceChangeAcknowledgeConfirmButtonText
// 0x0018 (0x0018 - 0x0000)
struct CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeConfirmButtonText final
{
public:
	class FText                                   ConfirmButtonText;                                 // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeConfirmButtonText) == 0x000008, "Wrong alignment on CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeConfirmButtonText");
static_assert(sizeof(CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeConfirmButtonText) == 0x000018, "Wrong size on CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeConfirmButtonText");
static_assert(offsetof(CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeConfirmButtonText, ConfirmButtonText) == 0x000000, "Member 'CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeConfirmButtonText::ConfirmButtonText' has a wrong offset!");

// Function CrewUI.CrewPriceChangeAcknowledgeModal.OnSetPriceChangeAcknowledgeMoreInfoText
// 0x0018 (0x0018 - 0x0000)
struct CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeMoreInfoText final
{
public:
	class FText                                   ConfirmButtonText;                                 // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeMoreInfoText) == 0x000008, "Wrong alignment on CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeMoreInfoText");
static_assert(sizeof(CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeMoreInfoText) == 0x000018, "Wrong size on CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeMoreInfoText");
static_assert(offsetof(CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeMoreInfoText, ConfirmButtonText) == 0x000000, "Member 'CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeMoreInfoText::ConfirmButtonText' has a wrong offset!");

// Function CrewUI.CrewPriceChangeAcknowledgeModal.OnSetPriceChangeAcknowledgeMoreInfoUrl
// 0x0018 (0x0018 - 0x0000)
struct CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeMoreInfoUrl final
{
public:
	class FText                                   MoreInfoUrl;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeMoreInfoUrl) == 0x000008, "Wrong alignment on CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeMoreInfoUrl");
static_assert(sizeof(CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeMoreInfoUrl) == 0x000018, "Wrong size on CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeMoreInfoUrl");
static_assert(offsetof(CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeMoreInfoUrl, MoreInfoUrl) == 0x000000, "Member 'CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeMoreInfoUrl::MoreInfoUrl' has a wrong offset!");

// Function CrewUI.CrewPriceChangeAcknowledgeModal.OnSetPriceChangeAcknowledgeTitle
// 0x0018 (0x0018 - 0x0000)
struct CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeTitle final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeTitle) == 0x000008, "Wrong alignment on CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeTitle");
static_assert(sizeof(CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeTitle) == 0x000018, "Wrong size on CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeTitle");
static_assert(offsetof(CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeTitle, Title) == 0x000000, "Member 'CrewPriceChangeAcknowledgeModal_OnSetPriceChangeAcknowledgeTitle::Title' has a wrong offset!");

// Function CrewUI.CrewRewardTile.OnDownloadTileImageComplete
// 0x0008 (0x0008 - 0x0000)
struct CrewRewardTile_OnDownloadTileImageComplete final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrewRewardTile_OnDownloadTileImageComplete) == 0x000008, "Wrong alignment on CrewRewardTile_OnDownloadTileImageComplete");
static_assert(sizeof(CrewRewardTile_OnDownloadTileImageComplete) == 0x000008, "Wrong size on CrewRewardTile_OnDownloadTileImageComplete");
static_assert(offsetof(CrewRewardTile_OnDownloadTileImageComplete, Texture) == 0x000000, "Member 'CrewRewardTile_OnDownloadTileImageComplete::Texture' has a wrong offset!");

// Function CrewUI.CrewRewardTile.OnUpdateOwnedState
// 0x0001 (0x0001 - 0x0000)
struct CrewRewardTile_OnUpdateOwnedState final
{
public:
	bool                                          bOwned;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrewRewardTile_OnUpdateOwnedState) == 0x000001, "Wrong alignment on CrewRewardTile_OnUpdateOwnedState");
static_assert(sizeof(CrewRewardTile_OnUpdateOwnedState) == 0x000001, "Wrong size on CrewRewardTile_OnUpdateOwnedState");
static_assert(offsetof(CrewRewardTile_OnUpdateOwnedState, bOwned) == 0x000000, "Member 'CrewRewardTile_OnUpdateOwnedState::bOwned' has a wrong offset!");

// Function CrewUI.CrewRewardTile.IsMonthlyBenefit
// 0x0001 (0x0001 - 0x0000)
struct CrewRewardTile_IsMonthlyBenefit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrewRewardTile_IsMonthlyBenefit) == 0x000001, "Wrong alignment on CrewRewardTile_IsMonthlyBenefit");
static_assert(sizeof(CrewRewardTile_IsMonthlyBenefit) == 0x000001, "Wrong size on CrewRewardTile_IsMonthlyBenefit");
static_assert(offsetof(CrewRewardTile_IsMonthlyBenefit, ReturnValue) == 0x000000, "Member 'CrewRewardTile_IsMonthlyBenefit::ReturnValue' has a wrong offset!");

// Function CrewUI.CrewSubscriptionContentContainer.OnTabSelected
// 0x0004 (0x0004 - 0x0000)
struct CrewSubscriptionContentContainer_OnTabSelected final
{
public:
	int32                                         TabIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrewSubscriptionContentContainer_OnTabSelected) == 0x000004, "Wrong alignment on CrewSubscriptionContentContainer_OnTabSelected");
static_assert(sizeof(CrewSubscriptionContentContainer_OnTabSelected) == 0x000004, "Wrong size on CrewSubscriptionContentContainer_OnTabSelected");
static_assert(offsetof(CrewSubscriptionContentContainer_OnTabSelected, TabIndex) == 0x000000, "Member 'CrewSubscriptionContentContainer_OnTabSelected::TabIndex' has a wrong offset!");

// Function CrewUI.CrewTileDetailsTag.OnTagSetup
// 0x0002 (0x0002 - 0x0000)
struct CrewTileDetailsTag_OnTagSetup final
{
public:
	ECrewDetailsTag                               RewardTag;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOwnedTag;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrewTileDetailsTag_OnTagSetup) == 0x000001, "Wrong alignment on CrewTileDetailsTag_OnTagSetup");
static_assert(sizeof(CrewTileDetailsTag_OnTagSetup) == 0x000002, "Wrong size on CrewTileDetailsTag_OnTagSetup");
static_assert(offsetof(CrewTileDetailsTag_OnTagSetup, RewardTag) == 0x000000, "Member 'CrewTileDetailsTag_OnTagSetup::RewardTag' has a wrong offset!");
static_assert(offsetof(CrewTileDetailsTag_OnTagSetup, bIsOwnedTag) == 0x000001, "Member 'CrewTileDetailsTag_OnTagSetup::bIsOwnedTag' has a wrong offset!");

// Function CrewUI.FortProgressiveItemScreen.OnContainerTabVisibilityUpdated
// 0x0008 (0x0008 - 0x0000)
struct FortProgressiveItemScreen_OnContainerTabVisibilityUpdated final
{
public:
	bool                                          bTabsVisible;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpacingAdjustmentForTabs;                          // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProgressiveItemScreen_OnContainerTabVisibilityUpdated) == 0x000004, "Wrong alignment on FortProgressiveItemScreen_OnContainerTabVisibilityUpdated");
static_assert(sizeof(FortProgressiveItemScreen_OnContainerTabVisibilityUpdated) == 0x000008, "Wrong size on FortProgressiveItemScreen_OnContainerTabVisibilityUpdated");
static_assert(offsetof(FortProgressiveItemScreen_OnContainerTabVisibilityUpdated, bTabsVisible) == 0x000000, "Member 'FortProgressiveItemScreen_OnContainerTabVisibilityUpdated::bTabsVisible' has a wrong offset!");
static_assert(offsetof(FortProgressiveItemScreen_OnContainerTabVisibilityUpdated, SpacingAdjustmentForTabs) == 0x000004, "Member 'FortProgressiveItemScreen_OnContainerTabVisibilityUpdated::SpacingAdjustmentForTabs' has a wrong offset!");

// Function CrewUI.FortProgressiveItemScreen.OnErrorStateTextUpdated
// 0x0018 (0x0018 - 0x0000)
struct FortProgressiveItemScreen_OnErrorStateTextUpdated final
{
public:
	class FText                                   ErrorStateText;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProgressiveItemScreen_OnErrorStateTextUpdated) == 0x000008, "Wrong alignment on FortProgressiveItemScreen_OnErrorStateTextUpdated");
static_assert(sizeof(FortProgressiveItemScreen_OnErrorStateTextUpdated) == 0x000018, "Wrong size on FortProgressiveItemScreen_OnErrorStateTextUpdated");
static_assert(offsetof(FortProgressiveItemScreen_OnErrorStateTextUpdated, ErrorStateText) == 0x000000, "Member 'FortProgressiveItemScreen_OnErrorStateTextUpdated::ErrorStateText' has a wrong offset!");

// Function CrewUI.FortProgressiveItemScreen.OnSetIsSoloScreen
// 0x0001 (0x0001 - 0x0000)
struct FortProgressiveItemScreen_OnSetIsSoloScreen final
{
public:
	bool                                          bInIsSoloScreen;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProgressiveItemScreen_OnSetIsSoloScreen) == 0x000001, "Wrong alignment on FortProgressiveItemScreen_OnSetIsSoloScreen");
static_assert(sizeof(FortProgressiveItemScreen_OnSetIsSoloScreen) == 0x000001, "Wrong size on FortProgressiveItemScreen_OnSetIsSoloScreen");
static_assert(offsetof(FortProgressiveItemScreen_OnSetIsSoloScreen, bInIsSoloScreen) == 0x000000, "Member 'FortProgressiveItemScreen_OnSetIsSoloScreen::bInIsSoloScreen' has a wrong offset!");

// Function CrewUI.FortProgressiveItemScreen.OnUpdateSubscriptionState
// 0x0001 (0x0001 - 0x0000)
struct FortProgressiveItemScreen_OnUpdateSubscriptionState final
{
public:
	bool                                          bSubscribed;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProgressiveItemScreen_OnUpdateSubscriptionState) == 0x000001, "Wrong alignment on FortProgressiveItemScreen_OnUpdateSubscriptionState");
static_assert(sizeof(FortProgressiveItemScreen_OnUpdateSubscriptionState) == 0x000001, "Wrong size on FortProgressiveItemScreen_OnUpdateSubscriptionState");
static_assert(offsetof(FortProgressiveItemScreen_OnUpdateSubscriptionState, bSubscribed) == 0x000000, "Member 'FortProgressiveItemScreen_OnUpdateSubscriptionState::bSubscribed' has a wrong offset!");

// Function CrewUI.FortProgressiveItemStateTitleWidget.BP_OnSetHeaderInfo
// 0x0028 (0x0028 - 0x0000)
struct FortProgressiveItemStateTitleWidget_BP_OnSetHeaderInfo final
{
public:
	class FText                                   Subheading;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bSubscribed;                                       // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UnlockedStages;                                    // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxStages;                                         // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortProgressiveItemStateTitleWidget_BP_OnSetHeaderInfo) == 0x000008, "Wrong alignment on FortProgressiveItemStateTitleWidget_BP_OnSetHeaderInfo");
static_assert(sizeof(FortProgressiveItemStateTitleWidget_BP_OnSetHeaderInfo) == 0x000028, "Wrong size on FortProgressiveItemStateTitleWidget_BP_OnSetHeaderInfo");
static_assert(offsetof(FortProgressiveItemStateTitleWidget_BP_OnSetHeaderInfo, Subheading) == 0x000000, "Member 'FortProgressiveItemStateTitleWidget_BP_OnSetHeaderInfo::Subheading' has a wrong offset!");
static_assert(offsetof(FortProgressiveItemStateTitleWidget_BP_OnSetHeaderInfo, bSubscribed) == 0x000018, "Member 'FortProgressiveItemStateTitleWidget_BP_OnSetHeaderInfo::bSubscribed' has a wrong offset!");
static_assert(offsetof(FortProgressiveItemStateTitleWidget_BP_OnSetHeaderInfo, UnlockedStages) == 0x00001C, "Member 'FortProgressiveItemStateTitleWidget_BP_OnSetHeaderInfo::UnlockedStages' has a wrong offset!");
static_assert(offsetof(FortProgressiveItemStateTitleWidget_BP_OnSetHeaderInfo, MaxStages) == 0x000020, "Member 'FortProgressiveItemStateTitleWidget_BP_OnSetHeaderInfo::MaxStages' has a wrong offset!");

// Function CrewUI.FortProgressiveItemWidget.OnPeekStateChanged
// 0x0001 (0x0001 - 0x0000)
struct FortProgressiveItemWidget_OnPeekStateChanged final
{
public:
	bool                                          bIsInPeekState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProgressiveItemWidget_OnPeekStateChanged) == 0x000001, "Wrong alignment on FortProgressiveItemWidget_OnPeekStateChanged");
static_assert(sizeof(FortProgressiveItemWidget_OnPeekStateChanged) == 0x000001, "Wrong size on FortProgressiveItemWidget_OnPeekStateChanged");
static_assert(offsetof(FortProgressiveItemWidget_OnPeekStateChanged, bIsInPeekState) == 0x000000, "Member 'FortProgressiveItemWidget_OnPeekStateChanged::bIsInPeekState' has a wrong offset!");

// Function CrewUI.FortProgressiveItemWidget.OnStageItemChanged
// 0x0070 (0x0070 - 0x0000)
struct FortProgressiveItemWidget_OnStageItemChanged final
{
public:
	struct FProgressiveStageItemInfo              InStageItemInfo;                                   // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProgressiveItemWidget_OnStageItemChanged) == 0x000008, "Wrong alignment on FortProgressiveItemWidget_OnStageItemChanged");
static_assert(sizeof(FortProgressiveItemWidget_OnStageItemChanged) == 0x000070, "Wrong size on FortProgressiveItemWidget_OnStageItemChanged");
static_assert(offsetof(FortProgressiveItemWidget_OnStageItemChanged, InStageItemInfo) == 0x000000, "Member 'FortProgressiveItemWidget_OnStageItemChanged::InStageItemInfo' has a wrong offset!");

// Function CrewUI.FortProgressiveSetDetailsWidget.BP_OnUpdateSetDetails
// 0x0038 (0x0038 - 0x0000)
struct FortProgressiveSetDetailsWidget_BP_OnUpdateSetDetails final
{
public:
	class FText                                   SetName;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ExpiringText;                                      // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bCompleted;                                        // 0x0030(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortProgressiveSetDetailsWidget_BP_OnUpdateSetDetails) == 0x000008, "Wrong alignment on FortProgressiveSetDetailsWidget_BP_OnUpdateSetDetails");
static_assert(sizeof(FortProgressiveSetDetailsWidget_BP_OnUpdateSetDetails) == 0x000038, "Wrong size on FortProgressiveSetDetailsWidget_BP_OnUpdateSetDetails");
static_assert(offsetof(FortProgressiveSetDetailsWidget_BP_OnUpdateSetDetails, SetName) == 0x000000, "Member 'FortProgressiveSetDetailsWidget_BP_OnUpdateSetDetails::SetName' has a wrong offset!");
static_assert(offsetof(FortProgressiveSetDetailsWidget_BP_OnUpdateSetDetails, ExpiringText) == 0x000018, "Member 'FortProgressiveSetDetailsWidget_BP_OnUpdateSetDetails::ExpiringText' has a wrong offset!");
static_assert(offsetof(FortProgressiveSetDetailsWidget_BP_OnUpdateSetDetails, bCompleted) == 0x000030, "Member 'FortProgressiveSetDetailsWidget_BP_OnUpdateSetDetails::bCompleted' has a wrong offset!");

// Function CrewUI.FortProgressiveSetList.AddSetTile
// 0x0008 (0x0008 - 0x0000)
struct FortProgressiveSetList_AddSetTile final
{
public:
	class UFortProgressiveSetTile*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProgressiveSetList_AddSetTile) == 0x000008, "Wrong alignment on FortProgressiveSetList_AddSetTile");
static_assert(sizeof(FortProgressiveSetList_AddSetTile) == 0x000008, "Wrong size on FortProgressiveSetList_AddSetTile");
static_assert(offsetof(FortProgressiveSetList_AddSetTile, ReturnValue) == 0x000000, "Member 'FortProgressiveSetList_AddSetTile::ReturnValue' has a wrong offset!");

// Function CrewUI.FortProgressiveSetTile.BP_OnInitializeSetInfo
// 0x00A0 (0x00A0 - 0x0000)
struct FortProgressiveSetTile_BP_OnInitializeSetInfo final
{
public:
	struct FProgressiveSetInfo                    InSetInfo;                                         // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   BottomText;                                        // 0x0068(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   BottomSubtext;                                     // 0x0080(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bSubscribed;                                       // 0x0098(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortProgressiveSetTile_BP_OnInitializeSetInfo) == 0x000008, "Wrong alignment on FortProgressiveSetTile_BP_OnInitializeSetInfo");
static_assert(sizeof(FortProgressiveSetTile_BP_OnInitializeSetInfo) == 0x0000A0, "Wrong size on FortProgressiveSetTile_BP_OnInitializeSetInfo");
static_assert(offsetof(FortProgressiveSetTile_BP_OnInitializeSetInfo, InSetInfo) == 0x000000, "Member 'FortProgressiveSetTile_BP_OnInitializeSetInfo::InSetInfo' has a wrong offset!");
static_assert(offsetof(FortProgressiveSetTile_BP_OnInitializeSetInfo, BottomText) == 0x000068, "Member 'FortProgressiveSetTile_BP_OnInitializeSetInfo::BottomText' has a wrong offset!");
static_assert(offsetof(FortProgressiveSetTile_BP_OnInitializeSetInfo, BottomSubtext) == 0x000080, "Member 'FortProgressiveSetTile_BP_OnInitializeSetInfo::BottomSubtext' has a wrong offset!");
static_assert(offsetof(FortProgressiveSetTile_BP_OnInitializeSetInfo, bSubscribed) == 0x000098, "Member 'FortProgressiveSetTile_BP_OnInitializeSetInfo::bSubscribed' has a wrong offset!");

// Function CrewUI.FortProgressiveStageList.AddStageWidget
// 0x0008 (0x0008 - 0x0000)
struct FortProgressiveStageList_AddStageWidget final
{
public:
	class UFortProgressiveStageWidget*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProgressiveStageList_AddStageWidget) == 0x000008, "Wrong alignment on FortProgressiveStageList_AddStageWidget");
static_assert(sizeof(FortProgressiveStageList_AddStageWidget) == 0x000008, "Wrong size on FortProgressiveStageList_AddStageWidget");
static_assert(offsetof(FortProgressiveStageList_AddStageWidget, ReturnValue) == 0x000000, "Member 'FortProgressiveStageList_AddStageWidget::ReturnValue' has a wrong offset!");

// Function CrewUI.FortProgressiveStageWidget.AddStageItemWidget
// 0x0008 (0x0008 - 0x0000)
struct FortProgressiveStageWidget_AddStageItemWidget final
{
public:
	class UFortProgressiveItemWidget*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProgressiveStageWidget_AddStageItemWidget) == 0x000008, "Wrong alignment on FortProgressiveStageWidget_AddStageItemWidget");
static_assert(sizeof(FortProgressiveStageWidget_AddStageItemWidget) == 0x000008, "Wrong size on FortProgressiveStageWidget_AddStageItemWidget");
static_assert(offsetof(FortProgressiveStageWidget_AddStageItemWidget, ReturnValue) == 0x000000, "Member 'FortProgressiveStageWidget_AddStageItemWidget::ReturnValue' has a wrong offset!");

// Function CrewUI.FortProgressiveStageWidget.OnPeekStateChanged
// 0x0001 (0x0001 - 0x0000)
struct FortProgressiveStageWidget_OnPeekStateChanged final
{
public:
	bool                                          bIsInPeekState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProgressiveStageWidget_OnPeekStateChanged) == 0x000001, "Wrong alignment on FortProgressiveStageWidget_OnPeekStateChanged");
static_assert(sizeof(FortProgressiveStageWidget_OnPeekStateChanged) == 0x000001, "Wrong size on FortProgressiveStageWidget_OnPeekStateChanged");
static_assert(offsetof(FortProgressiveStageWidget_OnPeekStateChanged, bIsInPeekState) == 0x000000, "Member 'FortProgressiveStageWidget_OnPeekStateChanged::bIsInPeekState' has a wrong offset!");

// Function CrewUI.FortProgressiveStageWidget.OnSetTooltipText
// 0x0018 (0x0018 - 0x0000)
struct FortProgressiveStageWidget_OnSetTooltipText final
{
public:
	class FText                                   InToolTipText;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProgressiveStageWidget_OnSetTooltipText) == 0x000008, "Wrong alignment on FortProgressiveStageWidget_OnSetTooltipText");
static_assert(sizeof(FortProgressiveStageWidget_OnSetTooltipText) == 0x000018, "Wrong size on FortProgressiveStageWidget_OnSetTooltipText");
static_assert(offsetof(FortProgressiveStageWidget_OnSetTooltipText, InToolTipText) == 0x000000, "Member 'FortProgressiveStageWidget_OnSetTooltipText::InToolTipText' has a wrong offset!");

// Function CrewUI.FortProgressiveStageWidget.OnSetTooltipVisible
// 0x0001 (0x0001 - 0x0000)
struct FortProgressiveStageWidget_OnSetTooltipVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProgressiveStageWidget_OnSetTooltipVisible) == 0x000001, "Wrong alignment on FortProgressiveStageWidget_OnSetTooltipVisible");
static_assert(sizeof(FortProgressiveStageWidget_OnSetTooltipVisible) == 0x000001, "Wrong size on FortProgressiveStageWidget_OnSetTooltipVisible");
static_assert(offsetof(FortProgressiveStageWidget_OnSetTooltipVisible, bVisible) == 0x000000, "Member 'FortProgressiveStageWidget_OnSetTooltipVisible::bVisible' has a wrong offset!");

// Function CrewUI.FortProgressiveTableOfContentsScreen.BP_OnContainerTabVisibilityUpdated
// 0x0008 (0x0008 - 0x0000)
struct FortProgressiveTableOfContentsScreen_BP_OnContainerTabVisibilityUpdated final
{
public:
	bool                                          bTabsVisible;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpacingAdjustmentForTabs;                          // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProgressiveTableOfContentsScreen_BP_OnContainerTabVisibilityUpdated) == 0x000004, "Wrong alignment on FortProgressiveTableOfContentsScreen_BP_OnContainerTabVisibilityUpdated");
static_assert(sizeof(FortProgressiveTableOfContentsScreen_BP_OnContainerTabVisibilityUpdated) == 0x000008, "Wrong size on FortProgressiveTableOfContentsScreen_BP_OnContainerTabVisibilityUpdated");
static_assert(offsetof(FortProgressiveTableOfContentsScreen_BP_OnContainerTabVisibilityUpdated, bTabsVisible) == 0x000000, "Member 'FortProgressiveTableOfContentsScreen_BP_OnContainerTabVisibilityUpdated::bTabsVisible' has a wrong offset!");
static_assert(offsetof(FortProgressiveTableOfContentsScreen_BP_OnContainerTabVisibilityUpdated, SpacingAdjustmentForTabs) == 0x000004, "Member 'FortProgressiveTableOfContentsScreen_BP_OnContainerTabVisibilityUpdated::SpacingAdjustmentForTabs' has a wrong offset!");

// Function CrewUI.FortProgressiveTableOfContentsScreen.BP_OnSetDescriptionText
// 0x0018 (0x0018 - 0x0000)
struct FortProgressiveTableOfContentsScreen_BP_OnSetDescriptionText final
{
public:
	class FText                                   ProductDescription;                                // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProgressiveTableOfContentsScreen_BP_OnSetDescriptionText) == 0x000008, "Wrong alignment on FortProgressiveTableOfContentsScreen_BP_OnSetDescriptionText");
static_assert(sizeof(FortProgressiveTableOfContentsScreen_BP_OnSetDescriptionText) == 0x000018, "Wrong size on FortProgressiveTableOfContentsScreen_BP_OnSetDescriptionText");
static_assert(offsetof(FortProgressiveTableOfContentsScreen_BP_OnSetDescriptionText, ProductDescription) == 0x000000, "Member 'FortProgressiveTableOfContentsScreen_BP_OnSetDescriptionText::ProductDescription' has a wrong offset!");

// Function CrewUI.FortProgressiveTableOfContentsScreen.BP_OnUpdateBanner
// 0x0020 (0x0020 - 0x0000)
struct FortProgressiveTableOfContentsScreen_BP_OnUpdateBanner final
{
public:
	class FText                                   BannerText;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bAllSetsCompleted;                                 // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSubscribed;                                       // 0x0019(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortProgressiveTableOfContentsScreen_BP_OnUpdateBanner) == 0x000008, "Wrong alignment on FortProgressiveTableOfContentsScreen_BP_OnUpdateBanner");
static_assert(sizeof(FortProgressiveTableOfContentsScreen_BP_OnUpdateBanner) == 0x000020, "Wrong size on FortProgressiveTableOfContentsScreen_BP_OnUpdateBanner");
static_assert(offsetof(FortProgressiveTableOfContentsScreen_BP_OnUpdateBanner, BannerText) == 0x000000, "Member 'FortProgressiveTableOfContentsScreen_BP_OnUpdateBanner::BannerText' has a wrong offset!");
static_assert(offsetof(FortProgressiveTableOfContentsScreen_BP_OnUpdateBanner, bAllSetsCompleted) == 0x000018, "Member 'FortProgressiveTableOfContentsScreen_BP_OnUpdateBanner::bAllSetsCompleted' has a wrong offset!");
static_assert(offsetof(FortProgressiveTableOfContentsScreen_BP_OnUpdateBanner, bSubscribed) == 0x000019, "Member 'FortProgressiveTableOfContentsScreen_BP_OnUpdateBanner::bSubscribed' has a wrong offset!");

// Function CrewUI.FortProgressiveTableOfContentsScreen.BP_OnUpdateErrorStateText
// 0x0018 (0x0018 - 0x0000)
struct FortProgressiveTableOfContentsScreen_BP_OnUpdateErrorStateText final
{
public:
	class FText                                   ErrorStateText;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProgressiveTableOfContentsScreen_BP_OnUpdateErrorStateText) == 0x000008, "Wrong alignment on FortProgressiveTableOfContentsScreen_BP_OnUpdateErrorStateText");
static_assert(sizeof(FortProgressiveTableOfContentsScreen_BP_OnUpdateErrorStateText) == 0x000018, "Wrong size on FortProgressiveTableOfContentsScreen_BP_OnUpdateErrorStateText");
static_assert(offsetof(FortProgressiveTableOfContentsScreen_BP_OnUpdateErrorStateText, ErrorStateText) == 0x000000, "Member 'FortProgressiveTableOfContentsScreen_BP_OnUpdateErrorStateText::ErrorStateText' has a wrong offset!");

// Function CrewUI.FortProgressiveTableOfContentsScreen.BP_OnUpdateSubscriptionState
// 0x0001 (0x0001 - 0x0000)
struct FortProgressiveTableOfContentsScreen_BP_OnUpdateSubscriptionState final
{
public:
	bool                                          bSubscribed;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProgressiveTableOfContentsScreen_BP_OnUpdateSubscriptionState) == 0x000001, "Wrong alignment on FortProgressiveTableOfContentsScreen_BP_OnUpdateSubscriptionState");
static_assert(sizeof(FortProgressiveTableOfContentsScreen_BP_OnUpdateSubscriptionState) == 0x000001, "Wrong size on FortProgressiveTableOfContentsScreen_BP_OnUpdateSubscriptionState");
static_assert(offsetof(FortProgressiveTableOfContentsScreen_BP_OnUpdateSubscriptionState, bSubscribed) == 0x000000, "Member 'FortProgressiveTableOfContentsScreen_BP_OnUpdateSubscriptionState::bSubscribed' has a wrong offset!");

}

