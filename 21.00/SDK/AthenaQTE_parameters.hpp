#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AthenaQTE

#include "Basic.hpp"


namespace SDK::Params
{

// Function AthenaQTE.AthenaQTE_C.ExecuteUbergraph_AthenaQTE
// 0x0038 (0x0038 - 0x0000)
struct AthenaQTE_C_ExecuteUbergraph_AthenaQTE final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(float Duration, float SweetSpot, float PerfectTolerance, float GreatTolerance, float GoodTolerance)> K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0010(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Duration;                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_SweetSpot;                      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_PerfectTolerance;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_GreatTolerance;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_GoodTolerance;                  // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAthenaHUDContext*                      CallFunc_GetContext_ReturnValue;                   // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AthenaQTE_C_ExecuteUbergraph_AthenaQTE) == 0x000008, "Wrong alignment on AthenaQTE_C_ExecuteUbergraph_AthenaQTE");
static_assert(sizeof(AthenaQTE_C_ExecuteUbergraph_AthenaQTE) == 0x000038, "Wrong size on AthenaQTE_C_ExecuteUbergraph_AthenaQTE");
static_assert(offsetof(AthenaQTE_C_ExecuteUbergraph_AthenaQTE, EntryPoint) == 0x000000, "Member 'AthenaQTE_C_ExecuteUbergraph_AthenaQTE::EntryPoint' has a wrong offset!");
static_assert(offsetof(AthenaQTE_C_ExecuteUbergraph_AthenaQTE, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'AthenaQTE_C_ExecuteUbergraph_AthenaQTE::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(AthenaQTE_C_ExecuteUbergraph_AthenaQTE, K2Node_CreateDelegate_OutputDelegate_1) == 0x000010, "Member 'AthenaQTE_C_ExecuteUbergraph_AthenaQTE::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(AthenaQTE_C_ExecuteUbergraph_AthenaQTE, K2Node_CustomEvent_Duration) == 0x00001C, "Member 'AthenaQTE_C_ExecuteUbergraph_AthenaQTE::K2Node_CustomEvent_Duration' has a wrong offset!");
static_assert(offsetof(AthenaQTE_C_ExecuteUbergraph_AthenaQTE, K2Node_CustomEvent_SweetSpot) == 0x000020, "Member 'AthenaQTE_C_ExecuteUbergraph_AthenaQTE::K2Node_CustomEvent_SweetSpot' has a wrong offset!");
static_assert(offsetof(AthenaQTE_C_ExecuteUbergraph_AthenaQTE, K2Node_CustomEvent_PerfectTolerance) == 0x000024, "Member 'AthenaQTE_C_ExecuteUbergraph_AthenaQTE::K2Node_CustomEvent_PerfectTolerance' has a wrong offset!");
static_assert(offsetof(AthenaQTE_C_ExecuteUbergraph_AthenaQTE, K2Node_CustomEvent_GreatTolerance) == 0x000028, "Member 'AthenaQTE_C_ExecuteUbergraph_AthenaQTE::K2Node_CustomEvent_GreatTolerance' has a wrong offset!");
static_assert(offsetof(AthenaQTE_C_ExecuteUbergraph_AthenaQTE, K2Node_CustomEvent_GoodTolerance) == 0x00002C, "Member 'AthenaQTE_C_ExecuteUbergraph_AthenaQTE::K2Node_CustomEvent_GoodTolerance' has a wrong offset!");
static_assert(offsetof(AthenaQTE_C_ExecuteUbergraph_AthenaQTE, CallFunc_GetContext_ReturnValue) == 0x000030, "Member 'AthenaQTE_C_ExecuteUbergraph_AthenaQTE::CallFunc_GetContext_ReturnValue' has a wrong offset!");

// Function AthenaQTE.AthenaQTE_C.OnQuickTimeEventWidgetStarted
// 0x0014 (0x0014 - 0x0000)
struct AthenaQTE_C_OnQuickTimeEventWidgetStarted final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SweetSpot;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PerfectTolerance;                                  // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GreatTolerance;                                    // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GoodTolerance;                                     // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AthenaQTE_C_OnQuickTimeEventWidgetStarted) == 0x000004, "Wrong alignment on AthenaQTE_C_OnQuickTimeEventWidgetStarted");
static_assert(sizeof(AthenaQTE_C_OnQuickTimeEventWidgetStarted) == 0x000014, "Wrong size on AthenaQTE_C_OnQuickTimeEventWidgetStarted");
static_assert(offsetof(AthenaQTE_C_OnQuickTimeEventWidgetStarted, Duration) == 0x000000, "Member 'AthenaQTE_C_OnQuickTimeEventWidgetStarted::Duration' has a wrong offset!");
static_assert(offsetof(AthenaQTE_C_OnQuickTimeEventWidgetStarted, SweetSpot) == 0x000004, "Member 'AthenaQTE_C_OnQuickTimeEventWidgetStarted::SweetSpot' has a wrong offset!");
static_assert(offsetof(AthenaQTE_C_OnQuickTimeEventWidgetStarted, PerfectTolerance) == 0x000008, "Member 'AthenaQTE_C_OnQuickTimeEventWidgetStarted::PerfectTolerance' has a wrong offset!");
static_assert(offsetof(AthenaQTE_C_OnQuickTimeEventWidgetStarted, GreatTolerance) == 0x00000C, "Member 'AthenaQTE_C_OnQuickTimeEventWidgetStarted::GreatTolerance' has a wrong offset!");
static_assert(offsetof(AthenaQTE_C_OnQuickTimeEventWidgetStarted, GoodTolerance) == 0x000010, "Member 'AthenaQTE_C_OnQuickTimeEventWidgetStarted::GoodTolerance' has a wrong offset!");

}

