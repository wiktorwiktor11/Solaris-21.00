#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ModularGameplay

#include "Basic.hpp"

#include "ModularGameplay_classes.hpp"
#include "ModularGameplay_parameters.hpp"


namespace SDK
{

// Function ModularGameplay.GameFrameworkComponentManager.AddReceiver
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Receiver                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAddOnlyInGameWorlds                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameFrameworkComponentManager::AddReceiver(class AActor* Receiver, bool bAddOnlyInGameWorlds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameFrameworkComponentManager", "AddReceiver");

	Params::GameFrameworkComponentManager_AddReceiver Parms{};

	Parms.Receiver = Receiver;
	Parms.bAddOnlyInGameWorlds = bAddOnlyInGameWorlds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ModularGameplay.GameFrameworkComponentManager.RemoveReceiver
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Receiver                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameFrameworkComponentManager::RemoveReceiver(class AActor* Receiver)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameFrameworkComponentManager", "RemoveReceiver");

	Params::GameFrameworkComponentManager_RemoveReceiver Parms{};

	Parms.Receiver = Receiver;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ModularGameplay.GameFrameworkComponentManager.SendExtensionEvent
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Receiver                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             EventName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOnlyInGameWorlds                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameFrameworkComponentManager::SendExtensionEvent(class AActor* Receiver, class FName EventName, bool bOnlyInGameWorlds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameFrameworkComponentManager", "SendExtensionEvent");

	Params::GameFrameworkComponentManager_SendExtensionEvent Parms{};

	Parms.Receiver = Receiver;
	Parms.EventName = EventName;
	Parms.bOnlyInGameWorlds = bOnlyInGameWorlds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

