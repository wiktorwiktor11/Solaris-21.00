#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BGA_Athena_Physics_Boulder

#include "Basic.hpp"

#include "BGA_Athena_Physics_Parent_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BGA_Athena_Physics_Boulder.BGA_Athena_Physics_Boulder_C
// 0x0590 (0x0F30 - 0x09A0)
class ABGA_Athena_Physics_Boulder_C final : public ABGA_Athena_Physics_Parent_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BGA_Athena_Physics_Boulder_C;       // 0x09A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      NS_Boulder_Speedlines;                             // 0x09A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Boulder_Wake;                                   // 0x09B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortActorComponent_Affiliation*        FortActorComponent_Affiliation;                    // 0x09B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAthenaPhysicsAIPerceptionStimuliSourceComponent* AthenaPhysicsAIPerceptionStimuliSource;            // 0x09C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortPhysicsObjectNavigationComponent*  FortPhysicsObjectNavigation;                       // 0x09C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  QuestTargetTags;                                   // 0x09D0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         DelayBetweenDamageFX;                              // 0x09F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9F4[0x4];                                      // 0x09F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             DamageSound;                                       // 0x09F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         AlreadyDamagedAndSelf;                             // 0x0A00(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          DamageEnabled;                                     // 0x0A10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A11[0x3];                                      // 0x0A11(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ImpactCueLarge;                                    // 0x0A14(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ImpactCueSmall;                                    // 0x0A18(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1C[0x4];                                      // 0x0A1C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           EnvironmentDestructionUpdateTimer;                 // 0x0A20(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ImpactCuePlayer;                                   // 0x0A28(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ImpactCueBuilds;                                   // 0x0A2C(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         MinSpeedForLowDamage;                              // 0x0A30(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         MinSpeedForHighDamage;                             // 0x0A58(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         DamageState;                                       // 0x0A80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaterialState;                                     // 0x0A84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         MinPlayerLaunchSpeed;                              // 0x0A88(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         MaxPlayerLaunchSpeed;                              // 0x0AB0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SmashEffectRadius;                                 // 0x0AD8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SmashLaunchSpeed;                                  // 0x0B00(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class AFortPawn*, float>                 PlayersRecentlyDamaged;                            // 0x0B28(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FScalableFloat                         PlayerImmunityTimeAfterHit;                        // 0x0B78(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	class APawn*                                  LastInstigator;                                    // 0x0BA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             LastHitInfo;                                       // 0x0BA8(0x00E0)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AController*                            LastServerInstigator;                              // 0x0C88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         PickaxeImpulse;                                    // 0x0C90(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         LaunchSpeedFromWeakpoint;                          // 0x0CB8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         DamageImpulseMultiplier;                           // 0x0CE0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         ImpactMagnitude;                                   // 0x0D08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastInstigationTime;                               // 0x0D0C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         SelfDamageImmunityTime;                            // 0x0D10(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class APawn*>                          AllInstigatorsSinceSleep;                          // 0x0D38(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         PlayerLaunchSpeedMultiplier;                       // 0x0D48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4C[0x4];                                      // 0x0D4C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         MaxDistanceFromWeakspot;                           // 0x0D50(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         PlayerLaunchSpeedMultiplier_;                      // 0x0D78(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                Effect_Location;                                   // 0x0DA0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Min_Large_Impulse_Magnitude;                       // 0x0DB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          KillWeakpoint;                                     // 0x0DBC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DBD[0x3];                                      // 0x0DBD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         LowVehicleDamage;                                  // 0x0DC0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         HighVehicleDamage;                                 // 0x0DE8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                NormalImpulseDir;                                  // 0x0E10(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             HitInfo;                                           // 0x0E28(0x00E0)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FScalableFloat                         IsSelfDamageAllowed_;                              // 0x0F08(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void Update();
	bool ShouldDie(float Damage, class AController* EventInstigator, class AActor* DamageCauser);
	void ReceiveBeginPlay();
	void OnPutDown();
	void OnPickedUp();
	void OnDamageServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo_0, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnDamagePlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo_0, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnDamage(const struct FHitResult& Hit, class APawn* Instigator_0, float Damage, class AActor* DamageCauser, const struct FGameplayTagContainer& DamageTags);
	bool IsWeakpointTooFarAway(const class UFortWeakPointComponent* WeakPointComponent, const struct FBuildingWeakSpotData& WeakSpotData);
	bool IsPlayerImmune(class AActor* HitActor);
	void ForceDamageCheck();
	void ExecuteUbergraph_BGA_Athena_Physics_Boulder(int32 EntryPoint);
	void DamageFX(const struct FVector& Location, class UPrimitiveComponent* HitComponent);
	void BreakCollisionLoop();
	void BndEvt__ParentMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BGA_Athena_Physics_Boulder_C">();
	}
	static class ABGA_Athena_Physics_Boulder_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABGA_Athena_Physics_Boulder_C>();
	}
};
static_assert(alignof(ABGA_Athena_Physics_Boulder_C) == 0x000008, "Wrong alignment on ABGA_Athena_Physics_Boulder_C");
static_assert(sizeof(ABGA_Athena_Physics_Boulder_C) == 0x000F30, "Wrong size on ABGA_Athena_Physics_Boulder_C");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, UberGraphFrame_BGA_Athena_Physics_Boulder_C) == 0x0009A0, "Member 'ABGA_Athena_Physics_Boulder_C::UberGraphFrame_BGA_Athena_Physics_Boulder_C' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, NS_Boulder_Speedlines) == 0x0009A8, "Member 'ABGA_Athena_Physics_Boulder_C::NS_Boulder_Speedlines' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, NS_Boulder_Wake) == 0x0009B0, "Member 'ABGA_Athena_Physics_Boulder_C::NS_Boulder_Wake' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, FortActorComponent_Affiliation) == 0x0009B8, "Member 'ABGA_Athena_Physics_Boulder_C::FortActorComponent_Affiliation' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, AthenaPhysicsAIPerceptionStimuliSource) == 0x0009C0, "Member 'ABGA_Athena_Physics_Boulder_C::AthenaPhysicsAIPerceptionStimuliSource' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, FortPhysicsObjectNavigation) == 0x0009C8, "Member 'ABGA_Athena_Physics_Boulder_C::FortPhysicsObjectNavigation' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, QuestTargetTags) == 0x0009D0, "Member 'ABGA_Athena_Physics_Boulder_C::QuestTargetTags' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, DelayBetweenDamageFX) == 0x0009F0, "Member 'ABGA_Athena_Physics_Boulder_C::DelayBetweenDamageFX' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, DamageSound) == 0x0009F8, "Member 'ABGA_Athena_Physics_Boulder_C::DamageSound' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, AlreadyDamagedAndSelf) == 0x000A00, "Member 'ABGA_Athena_Physics_Boulder_C::AlreadyDamagedAndSelf' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, DamageEnabled) == 0x000A10, "Member 'ABGA_Athena_Physics_Boulder_C::DamageEnabled' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, ImpactCueLarge) == 0x000A14, "Member 'ABGA_Athena_Physics_Boulder_C::ImpactCueLarge' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, ImpactCueSmall) == 0x000A18, "Member 'ABGA_Athena_Physics_Boulder_C::ImpactCueSmall' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, EnvironmentDestructionUpdateTimer) == 0x000A20, "Member 'ABGA_Athena_Physics_Boulder_C::EnvironmentDestructionUpdateTimer' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, ImpactCuePlayer) == 0x000A28, "Member 'ABGA_Athena_Physics_Boulder_C::ImpactCuePlayer' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, ImpactCueBuilds) == 0x000A2C, "Member 'ABGA_Athena_Physics_Boulder_C::ImpactCueBuilds' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, MinSpeedForLowDamage) == 0x000A30, "Member 'ABGA_Athena_Physics_Boulder_C::MinSpeedForLowDamage' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, MinSpeedForHighDamage) == 0x000A58, "Member 'ABGA_Athena_Physics_Boulder_C::MinSpeedForHighDamage' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, DamageState) == 0x000A80, "Member 'ABGA_Athena_Physics_Boulder_C::DamageState' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, MaterialState) == 0x000A84, "Member 'ABGA_Athena_Physics_Boulder_C::MaterialState' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, MinPlayerLaunchSpeed) == 0x000A88, "Member 'ABGA_Athena_Physics_Boulder_C::MinPlayerLaunchSpeed' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, MaxPlayerLaunchSpeed) == 0x000AB0, "Member 'ABGA_Athena_Physics_Boulder_C::MaxPlayerLaunchSpeed' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, SmashEffectRadius) == 0x000AD8, "Member 'ABGA_Athena_Physics_Boulder_C::SmashEffectRadius' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, SmashLaunchSpeed) == 0x000B00, "Member 'ABGA_Athena_Physics_Boulder_C::SmashLaunchSpeed' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, PlayersRecentlyDamaged) == 0x000B28, "Member 'ABGA_Athena_Physics_Boulder_C::PlayersRecentlyDamaged' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, PlayerImmunityTimeAfterHit) == 0x000B78, "Member 'ABGA_Athena_Physics_Boulder_C::PlayerImmunityTimeAfterHit' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, LastInstigator) == 0x000BA0, "Member 'ABGA_Athena_Physics_Boulder_C::LastInstigator' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, LastHitInfo) == 0x000BA8, "Member 'ABGA_Athena_Physics_Boulder_C::LastHitInfo' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, LastServerInstigator) == 0x000C88, "Member 'ABGA_Athena_Physics_Boulder_C::LastServerInstigator' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, PickaxeImpulse) == 0x000C90, "Member 'ABGA_Athena_Physics_Boulder_C::PickaxeImpulse' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, LaunchSpeedFromWeakpoint) == 0x000CB8, "Member 'ABGA_Athena_Physics_Boulder_C::LaunchSpeedFromWeakpoint' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, DamageImpulseMultiplier) == 0x000CE0, "Member 'ABGA_Athena_Physics_Boulder_C::DamageImpulseMultiplier' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, ImpactMagnitude) == 0x000D08, "Member 'ABGA_Athena_Physics_Boulder_C::ImpactMagnitude' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, LastInstigationTime) == 0x000D0C, "Member 'ABGA_Athena_Physics_Boulder_C::LastInstigationTime' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, SelfDamageImmunityTime) == 0x000D10, "Member 'ABGA_Athena_Physics_Boulder_C::SelfDamageImmunityTime' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, AllInstigatorsSinceSleep) == 0x000D38, "Member 'ABGA_Athena_Physics_Boulder_C::AllInstigatorsSinceSleep' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, PlayerLaunchSpeedMultiplier) == 0x000D48, "Member 'ABGA_Athena_Physics_Boulder_C::PlayerLaunchSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, MaxDistanceFromWeakspot) == 0x000D50, "Member 'ABGA_Athena_Physics_Boulder_C::MaxDistanceFromWeakspot' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, PlayerLaunchSpeedMultiplier_) == 0x000D78, "Member 'ABGA_Athena_Physics_Boulder_C::PlayerLaunchSpeedMultiplier_' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, Effect_Location) == 0x000DA0, "Member 'ABGA_Athena_Physics_Boulder_C::Effect_Location' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, Min_Large_Impulse_Magnitude) == 0x000DB8, "Member 'ABGA_Athena_Physics_Boulder_C::Min_Large_Impulse_Magnitude' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, KillWeakpoint) == 0x000DBC, "Member 'ABGA_Athena_Physics_Boulder_C::KillWeakpoint' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, LowVehicleDamage) == 0x000DC0, "Member 'ABGA_Athena_Physics_Boulder_C::LowVehicleDamage' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, HighVehicleDamage) == 0x000DE8, "Member 'ABGA_Athena_Physics_Boulder_C::HighVehicleDamage' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, NormalImpulseDir) == 0x000E10, "Member 'ABGA_Athena_Physics_Boulder_C::NormalImpulseDir' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, HitInfo) == 0x000E28, "Member 'ABGA_Athena_Physics_Boulder_C::HitInfo' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Physics_Boulder_C, IsSelfDamageAllowed_) == 0x000F08, "Member 'ABGA_Athena_Physics_Boulder_C::IsSelfDamageAllowed_' has a wrong offset!");

}

