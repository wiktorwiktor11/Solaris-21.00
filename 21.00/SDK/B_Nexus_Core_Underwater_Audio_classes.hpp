#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Nexus_Core_Underwater_Audio

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_Nexus_Core_Underwater_Audio.B_Nexus_Core_Underwater_Audio_C
// 0x0068 (0x02D8 - 0x0270)
class AB_Nexus_Core_Underwater_Audio_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0270(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        AudioBelowHaptics;                                 // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AudioBelow;                                        // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AudioAbove;                                        // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioGameplayVolumeProxyComponent*     AudioGameplayVolumeProxy;                          // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Crossfade_Crossfade_ACDE9F3C48AD5A37C0ABD0BDCDD91DC5; // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Crossfade__Direction_ACDE9F3C48AD5A37C0ABD0BDCDD91DC5; // 0x029C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29D[0x3];                                      // 0x029D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Crossfade;                                         // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRumbleIsActive;                                   // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A9[0x3];                                      // 0x02A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxEnvValue;                                       // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentEnvValue;                                   // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxRumbleValue;                                    // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RandomStartTime;                                   // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundWave*                             BelowLoopWave;                                     // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerController*                  LocalPC;                                           // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceFromZP;                                    // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AssignLocalPC();
	void BndEvt__B_Nexus_Core_Underwater_Audio_AudioBelowHaptics_K2Node_ComponentBoundEvent_0_OnAudioMultiEnvelopeValue__DelegateSignature(const float AverageEnvelopeValue, const float MaxEnvelope, const int32 NumWaveInstances);
	void BndEvt__B_RealityForest_ZP_Controller_AudioGameplayVolumeProxy_K2Node_ComponentBoundEvent_0_OnAudioGameplayVolumeProxyStateChange__DelegateSignature();
	void BndEvt__B_RealityForest_ZP_Controller_AudioGameplayVolumeProxy_K2Node_ComponentBoundEvent_1_OnAudioGameplayVolumeProxyStateChange__DelegateSignature();
	void Crossfade__FinishedFunc();
	void Crossfade__UpdateFunc();
	void ExecuteUbergraph_B_Nexus_Core_Underwater_Audio(int32 EntryPoint);
	void Start_Rumble();
	void Stop_Rumble();

	bool ConditionMet() const;
	bool ConditionMet_Position(const struct FVector& Position) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_Nexus_Core_Underwater_Audio_C">();
	}
	static class AB_Nexus_Core_Underwater_Audio_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_Nexus_Core_Underwater_Audio_C>();
	}
};
static_assert(alignof(AB_Nexus_Core_Underwater_Audio_C) == 0x000008, "Wrong alignment on AB_Nexus_Core_Underwater_Audio_C");
static_assert(sizeof(AB_Nexus_Core_Underwater_Audio_C) == 0x0002D8, "Wrong size on AB_Nexus_Core_Underwater_Audio_C");
static_assert(offsetof(AB_Nexus_Core_Underwater_Audio_C, UberGraphFrame) == 0x000270, "Member 'AB_Nexus_Core_Underwater_Audio_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_Nexus_Core_Underwater_Audio_C, AudioBelowHaptics) == 0x000278, "Member 'AB_Nexus_Core_Underwater_Audio_C::AudioBelowHaptics' has a wrong offset!");
static_assert(offsetof(AB_Nexus_Core_Underwater_Audio_C, AudioBelow) == 0x000280, "Member 'AB_Nexus_Core_Underwater_Audio_C::AudioBelow' has a wrong offset!");
static_assert(offsetof(AB_Nexus_Core_Underwater_Audio_C, AudioAbove) == 0x000288, "Member 'AB_Nexus_Core_Underwater_Audio_C::AudioAbove' has a wrong offset!");
static_assert(offsetof(AB_Nexus_Core_Underwater_Audio_C, AudioGameplayVolumeProxy) == 0x000290, "Member 'AB_Nexus_Core_Underwater_Audio_C::AudioGameplayVolumeProxy' has a wrong offset!");
static_assert(offsetof(AB_Nexus_Core_Underwater_Audio_C, Crossfade_Crossfade_ACDE9F3C48AD5A37C0ABD0BDCDD91DC5) == 0x000298, "Member 'AB_Nexus_Core_Underwater_Audio_C::Crossfade_Crossfade_ACDE9F3C48AD5A37C0ABD0BDCDD91DC5' has a wrong offset!");
static_assert(offsetof(AB_Nexus_Core_Underwater_Audio_C, Crossfade__Direction_ACDE9F3C48AD5A37C0ABD0BDCDD91DC5) == 0x00029C, "Member 'AB_Nexus_Core_Underwater_Audio_C::Crossfade__Direction_ACDE9F3C48AD5A37C0ABD0BDCDD91DC5' has a wrong offset!");
static_assert(offsetof(AB_Nexus_Core_Underwater_Audio_C, Crossfade) == 0x0002A0, "Member 'AB_Nexus_Core_Underwater_Audio_C::Crossfade' has a wrong offset!");
static_assert(offsetof(AB_Nexus_Core_Underwater_Audio_C, bRumbleIsActive) == 0x0002A8, "Member 'AB_Nexus_Core_Underwater_Audio_C::bRumbleIsActive' has a wrong offset!");
static_assert(offsetof(AB_Nexus_Core_Underwater_Audio_C, MaxEnvValue) == 0x0002AC, "Member 'AB_Nexus_Core_Underwater_Audio_C::MaxEnvValue' has a wrong offset!");
static_assert(offsetof(AB_Nexus_Core_Underwater_Audio_C, CurrentEnvValue) == 0x0002B0, "Member 'AB_Nexus_Core_Underwater_Audio_C::CurrentEnvValue' has a wrong offset!");
static_assert(offsetof(AB_Nexus_Core_Underwater_Audio_C, MaxRumbleValue) == 0x0002B4, "Member 'AB_Nexus_Core_Underwater_Audio_C::MaxRumbleValue' has a wrong offset!");
static_assert(offsetof(AB_Nexus_Core_Underwater_Audio_C, RandomStartTime) == 0x0002B8, "Member 'AB_Nexus_Core_Underwater_Audio_C::RandomStartTime' has a wrong offset!");
static_assert(offsetof(AB_Nexus_Core_Underwater_Audio_C, BelowLoopWave) == 0x0002C0, "Member 'AB_Nexus_Core_Underwater_Audio_C::BelowLoopWave' has a wrong offset!");
static_assert(offsetof(AB_Nexus_Core_Underwater_Audio_C, LocalPC) == 0x0002C8, "Member 'AB_Nexus_Core_Underwater_Audio_C::LocalPC' has a wrong offset!");
static_assert(offsetof(AB_Nexus_Core_Underwater_Audio_C, DistanceFromZP) == 0x0002D0, "Member 'AB_Nexus_Core_Underwater_Audio_C::DistanceFromZP' has a wrong offset!");

}

