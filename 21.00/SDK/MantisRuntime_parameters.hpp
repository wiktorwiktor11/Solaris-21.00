#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MantisRuntime

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_0_structs.hpp"


namespace SDK::Params
{

// Function MantisRuntime.FortGameplayAbility_Mantis.BP_MantisAbilityTechniqueStarted
// 0x0028 (0x0028 - 0x0000)
struct FortGameplayAbility_Mantis_BP_MantisAbilityTechniqueStarted final
{
public:
	struct FGameplayTagContainer                  OwningTags;                                        // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	class FName                                   SequenceName;                                      // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StartsSequence;                                    // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EndsSequence;                                      // 0x0025(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameplayAbility_Mantis_BP_MantisAbilityTechniqueStarted) == 0x000008, "Wrong alignment on FortGameplayAbility_Mantis_BP_MantisAbilityTechniqueStarted");
static_assert(sizeof(FortGameplayAbility_Mantis_BP_MantisAbilityTechniqueStarted) == 0x000028, "Wrong size on FortGameplayAbility_Mantis_BP_MantisAbilityTechniqueStarted");
static_assert(offsetof(FortGameplayAbility_Mantis_BP_MantisAbilityTechniqueStarted, OwningTags) == 0x000000, "Member 'FortGameplayAbility_Mantis_BP_MantisAbilityTechniqueStarted::OwningTags' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_Mantis_BP_MantisAbilityTechniqueStarted, SequenceName) == 0x000020, "Member 'FortGameplayAbility_Mantis_BP_MantisAbilityTechniqueStarted::SequenceName' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_Mantis_BP_MantisAbilityTechniqueStarted, StartsSequence) == 0x000024, "Member 'FortGameplayAbility_Mantis_BP_MantisAbilityTechniqueStarted::StartsSequence' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_Mantis_BP_MantisAbilityTechniqueStarted, EndsSequence) == 0x000025, "Member 'FortGameplayAbility_Mantis_BP_MantisAbilityTechniqueStarted::EndsSequence' has a wrong offset!");

// Function MantisRuntime.FortGameplayAbility_Mantis.BP_OnMantisTechniqueHit
// 0x0030 (0x0030 - 0x0000)
struct FortGameplayAbility_Mantis_BP_OnMantisTechniqueHit final
{
public:
	struct FGameplayAbilityTargetDataHandle       TargetDataHandle;                                  // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ApplicationTag;                                    // 0x0028(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameplayAbility_Mantis_BP_OnMantisTechniqueHit) == 0x000008, "Wrong alignment on FortGameplayAbility_Mantis_BP_OnMantisTechniqueHit");
static_assert(sizeof(FortGameplayAbility_Mantis_BP_OnMantisTechniqueHit) == 0x000030, "Wrong size on FortGameplayAbility_Mantis_BP_OnMantisTechniqueHit");
static_assert(offsetof(FortGameplayAbility_Mantis_BP_OnMantisTechniqueHit, TargetDataHandle) == 0x000000, "Member 'FortGameplayAbility_Mantis_BP_OnMantisTechniqueHit::TargetDataHandle' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_Mantis_BP_OnMantisTechniqueHit, ApplicationTag) == 0x000028, "Member 'FortGameplayAbility_Mantis_BP_OnMantisTechniqueHit::ApplicationTag' has a wrong offset!");

// Function MantisRuntime.FortGameplayAbility_Mantis.ConfigureRootMotionWarping
// 0x0010 (0x0010 - 0x0000)
struct FortGameplayAbility_Mantis_ConfigureRootMotionWarping final
{
public:
	class AActor*                                 OutTargetActor;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutAllowTranslationWarp;                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutAllowRotationWarp;                             // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutSnapshotTargetLocation;                        // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameplayAbility_Mantis_ConfigureRootMotionWarping) == 0x000008, "Wrong alignment on FortGameplayAbility_Mantis_ConfigureRootMotionWarping");
static_assert(sizeof(FortGameplayAbility_Mantis_ConfigureRootMotionWarping) == 0x000010, "Wrong size on FortGameplayAbility_Mantis_ConfigureRootMotionWarping");
static_assert(offsetof(FortGameplayAbility_Mantis_ConfigureRootMotionWarping, OutTargetActor) == 0x000000, "Member 'FortGameplayAbility_Mantis_ConfigureRootMotionWarping::OutTargetActor' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_Mantis_ConfigureRootMotionWarping, bOutAllowTranslationWarp) == 0x000008, "Member 'FortGameplayAbility_Mantis_ConfigureRootMotionWarping::bOutAllowTranslationWarp' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_Mantis_ConfigureRootMotionWarping, bOutAllowRotationWarp) == 0x000009, "Member 'FortGameplayAbility_Mantis_ConfigureRootMotionWarping::bOutAllowRotationWarp' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_Mantis_ConfigureRootMotionWarping, bOutSnapshotTargetLocation) == 0x00000A, "Member 'FortGameplayAbility_Mantis_ConfigureRootMotionWarping::bOutSnapshotTargetLocation' has a wrong offset!");

// Function MantisRuntime.FortMantisPawnComponent.OnCharacterMovementPreUpdate
// 0x0010 (0x0010 - 0x0000)
struct FortMantisPawnComponent_OnCharacterMovementPreUpdate final
{
public:
	class UCharacterMovementComponent*            CharMoveComp;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaSeconds;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMantisPawnComponent_OnCharacterMovementPreUpdate) == 0x000008, "Wrong alignment on FortMantisPawnComponent_OnCharacterMovementPreUpdate");
static_assert(sizeof(FortMantisPawnComponent_OnCharacterMovementPreUpdate) == 0x000010, "Wrong size on FortMantisPawnComponent_OnCharacterMovementPreUpdate");
static_assert(offsetof(FortMantisPawnComponent_OnCharacterMovementPreUpdate, CharMoveComp) == 0x000000, "Member 'FortMantisPawnComponent_OnCharacterMovementPreUpdate::CharMoveComp' has a wrong offset!");
static_assert(offsetof(FortMantisPawnComponent_OnCharacterMovementPreUpdate, DeltaSeconds) == 0x000008, "Member 'FortMantisPawnComponent_OnCharacterMovementPreUpdate::DeltaSeconds' has a wrong offset!");

// Function MantisRuntime.FortMantisPawnComponent.OnPostPhysicsRotation
// 0x0010 (0x0010 - 0x0000)
struct FortMantisPawnComponent_OnPostPhysicsRotation final
{
public:
	class UCharacterMovementComponent*            CharMoveComp;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaSeconds;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMantisPawnComponent_OnPostPhysicsRotation) == 0x000008, "Wrong alignment on FortMantisPawnComponent_OnPostPhysicsRotation");
static_assert(sizeof(FortMantisPawnComponent_OnPostPhysicsRotation) == 0x000010, "Wrong size on FortMantisPawnComponent_OnPostPhysicsRotation");
static_assert(offsetof(FortMantisPawnComponent_OnPostPhysicsRotation, CharMoveComp) == 0x000000, "Member 'FortMantisPawnComponent_OnPostPhysicsRotation::CharMoveComp' has a wrong offset!");
static_assert(offsetof(FortMantisPawnComponent_OnPostPhysicsRotation, DeltaSeconds) == 0x000008, "Member 'FortMantisPawnComponent_OnPostPhysicsRotation::DeltaSeconds' has a wrong offset!");

}

