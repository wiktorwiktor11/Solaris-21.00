#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Artemis_MovieScreen_DriveIn_Screen_Extended

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Artemis_MovieScreen_DriveIn_Screen_Extended.Artemis_MovieScreen_DriveIn_Screen_Extended_C
// 0x0130 (0x03E8 - 0x02B8)
class AArtemis_MovieScreen_DriveIn_Screen_Extended_C final : public AFortStaticMeshActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UApplicationLifecycleComponent*         ApplicationLifecycle;                              // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMediaTexture*                          Media_Texture;                                     // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             SoundShowStart;                                    // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             SoundShowLoop;                                     // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             SoundShowEnd;                                      // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMediaPlayer*                           MediaPlayer;                                       // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeBeforeLooping;                                 // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F4[0x4];                                      // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortStreamMediaSource*                 PlatformSource;                                    // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimespan                              PlayFromTimespan;                                  // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          HasBeenConstructed;                                // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_309[0x3];                                      // 0x0309(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VideoLength;                                       // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AutoPlay;                                          // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_311[0x7];                                      // 0x0311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAthena_Prop_Video_Stream_Trigger1_C*   StreamingTrigger;                                  // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CalendarEvent;                                     // 0x0320(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class UMaterialInstance*                      VideoStoppedMaterial;                              // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EventActive;                                       // 0x0338(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_339[0x7];                                      // 0x0339(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInstance>       Screen;                                            // 0x0340(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FScalableFloat                         HotfixValue;                                       // 0x0368(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          EnableVideo;                                       // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableAudio;                                       // 0x0391(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_392[0x6];                                      // 0x0392(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           SharingCheckTimer;                                 // 0x0398(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ScreenRecording;                                   // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ScreenRecordingLast;                               // 0x03A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A2[0x2];                                      // 0x03A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PIPVersionSinglePlayer;                            // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PIPVersionMirror;                                  // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DisabledSharing;                                   // 0x03AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AD[0x3];                                      // 0x03AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMediaSoundComponent*                   MediaSound;                                        // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForceDisableVideo;                                 // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForceDisableAudio;                                 // 0x03B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          VideoEnabledLast;                                  // 0x03BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AudioSubmixDefault;                                // 0x03BB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SubtitlesEnabled;                                  // 0x03BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BD[0x3];                                      // 0x03BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterial>               playingScreenMatSoftRef;                           // 0x03C0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void AudioEnable(bool Enable, bool FirstStart);
	void CheckBlocks(bool Video, bool* bLocked);
	void ExecuteUbergraph_Artemis_MovieScreen_DriveIn_Screen_Extended(int32 EntryPoint);
	void Flip_Audio_Submix(bool First, bool Default);
	void Foreground();
	void On_Video_Started(bool FirstStart);
	void OnAudioEnable(bool Enable, bool FirstStart);
	void OnLoaded_0262C34647634C0A92D13FB200770283(class UObject* Loaded);
	void OnReady_AB528D594097CED8314C7EABB9D42BCA(class AFortGameStateAthena* GameState, const class UFortPlaylist* Playlist, const struct FGameplayTagContainer& PlaylistContextTags);
	void OnVideoStopped();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void SharingCheck();
	void SubtitleEnable(bool Enable, bool FromStart);
	void UpdateBlocks();
	void VideoEnable(bool Enable);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Artemis_MovieScreen_DriveIn_Screen_Extended_C">();
	}
	static class AArtemis_MovieScreen_DriveIn_Screen_Extended_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AArtemis_MovieScreen_DriveIn_Screen_Extended_C>();
	}
};
static_assert(alignof(AArtemis_MovieScreen_DriveIn_Screen_Extended_C) == 0x000008, "Wrong alignment on AArtemis_MovieScreen_DriveIn_Screen_Extended_C");
static_assert(sizeof(AArtemis_MovieScreen_DriveIn_Screen_Extended_C) == 0x0003E8, "Wrong size on AArtemis_MovieScreen_DriveIn_Screen_Extended_C");
static_assert(offsetof(AArtemis_MovieScreen_DriveIn_Screen_Extended_C, UberGraphFrame) == 0x0002B8, "Member 'AArtemis_MovieScreen_DriveIn_Screen_Extended_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AArtemis_MovieScreen_DriveIn_Screen_Extended_C, ApplicationLifecycle) == 0x0002C0, "Member 'AArtemis_MovieScreen_DriveIn_Screen_Extended_C::ApplicationLifecycle' has a wrong offset!");
static_assert(offsetof(AArtemis_MovieScreen_DriveIn_Screen_Extended_C, Media_Texture) == 0x0002C8, "Member 'AArtemis_MovieScreen_DriveIn_Screen_Extended_C::Media_Texture' has a wrong offset!");
static_assert(offsetof(AArtemis_MovieScreen_DriveIn_Screen_Extended_C, SoundShowStart) == 0x0002D0, "Member 'AArtemis_MovieScreen_DriveIn_Screen_Extended_C::SoundShowStart' has a wrong offset!");
static_assert(offsetof(AArtemis_MovieScreen_DriveIn_Screen_Extended_C, SoundShowLoop) == 0x0002D8, "Member 'AArtemis_MovieScreen_DriveIn_Screen_Extended_C::SoundShowLoop' has a wrong offset!");
static_assert(offsetof(AArtemis_MovieScreen_DriveIn_Screen_Extended_C, SoundShowEnd) == 0x0002E0, "Member 'AArtemis_MovieScreen_DriveIn_Screen_Extended_C::SoundShowEnd' has a wrong offset!");
static_assert(offsetof(AArtemis_MovieScreen_DriveIn_Screen_Extended_C, MediaPlayer) == 0x0002E8, "Member 'AArtemis_MovieScreen_DriveIn_Screen_Extended_C::MediaPlayer' has a wrong offset!");
static_assert(offsetof(AArtemis_MovieScreen_DriveIn_Screen_Extended_C, TimeBeforeLooping) == 0x0002F0, "Member 'AArtemis_MovieScreen_DriveIn_Screen_Extended_C::TimeBeforeLooping' has a wrong offset!");
static_assert(offsetof(AArtemis_MovieScreen_DriveIn_Screen_Extended_C, PlatformSource) == 0x0002F8, "Member 'AArtemis_MovieScreen_DriveIn_Screen_Extended_C::PlatformSource' has a wrong offset!");
static_assert(offsetof(AArtemis_MovieScreen_DriveIn_Screen_Extended_C, PlayFromTimespan) == 0x000300, "Member 'AArtemis_MovieScreen_DriveIn_Screen_Extended_C::PlayFromTimespan' has a wrong offset!");
static_assert(offsetof(AArtemis_MovieScreen_DriveIn_Screen_Extended_C, HasBeenConstructed) == 0x000308, "Member 'AArtemis_MovieScreen_DriveIn_Screen_Extended_C::HasBeenConstructed' has a wrong offset!");
static_assert(offsetof(AArtemis_MovieScreen_DriveIn_Screen_Extended_C, VideoLength) == 0x00030C, "Member 'AArtemis_MovieScreen_DriveIn_Screen_Extended_C::VideoLength' has a wrong offset!");
static_assert(offsetof(AArtemis_MovieScreen_DriveIn_Screen_Extended_C, AutoPlay) == 0x000310, "Member 'AArtemis_MovieScreen_DriveIn_Screen_Extended_C::AutoPlay' has a wrong offset!");
static_assert(offsetof(AArtemis_MovieScreen_DriveIn_Screen_Extended_C, StreamingTrigger) == 0x000318, "Member 'AArtemis_MovieScreen_DriveIn_Screen_Extended_C::StreamingTrigger' has a wrong offset!");
static_assert(offsetof(AArtemis_MovieScreen_DriveIn_Screen_Extended_C, CalendarEvent) == 0x000320, "Member 'AArtemis_MovieScreen_DriveIn_Screen_Extended_C::CalendarEvent' has a wrong offset!");
static_assert(offsetof(AArtemis_MovieScreen_DriveIn_Screen_Extended_C, VideoStoppedMaterial) == 0x000330, "Member 'AArtemis_MovieScreen_DriveIn_Screen_Extended_C::VideoStoppedMaterial' has a wrong offset!");
static_assert(offsetof(AArtemis_MovieScreen_DriveIn_Screen_Extended_C, EventActive) == 0x000338, "Member 'AArtemis_MovieScreen_DriveIn_Screen_Extended_C::EventActive' has a wrong offset!");
static_assert(offsetof(AArtemis_MovieScreen_DriveIn_Screen_Extended_C, Screen) == 0x000340, "Member 'AArtemis_MovieScreen_DriveIn_Screen_Extended_C::Screen' has a wrong offset!");
static_assert(offsetof(AArtemis_MovieScreen_DriveIn_Screen_Extended_C, HotfixValue) == 0x000368, "Member 'AArtemis_MovieScreen_DriveIn_Screen_Extended_C::HotfixValue' has a wrong offset!");
static_assert(offsetof(AArtemis_MovieScreen_DriveIn_Screen_Extended_C, EnableVideo) == 0x000390, "Member 'AArtemis_MovieScreen_DriveIn_Screen_Extended_C::EnableVideo' has a wrong offset!");
static_assert(offsetof(AArtemis_MovieScreen_DriveIn_Screen_Extended_C, EnableAudio) == 0x000391, "Member 'AArtemis_MovieScreen_DriveIn_Screen_Extended_C::EnableAudio' has a wrong offset!");
static_assert(offsetof(AArtemis_MovieScreen_DriveIn_Screen_Extended_C, SharingCheckTimer) == 0x000398, "Member 'AArtemis_MovieScreen_DriveIn_Screen_Extended_C::SharingCheckTimer' has a wrong offset!");
static_assert(offsetof(AArtemis_MovieScreen_DriveIn_Screen_Extended_C, ScreenRecording) == 0x0003A0, "Member 'AArtemis_MovieScreen_DriveIn_Screen_Extended_C::ScreenRecording' has a wrong offset!");
static_assert(offsetof(AArtemis_MovieScreen_DriveIn_Screen_Extended_C, ScreenRecordingLast) == 0x0003A1, "Member 'AArtemis_MovieScreen_DriveIn_Screen_Extended_C::ScreenRecordingLast' has a wrong offset!");
static_assert(offsetof(AArtemis_MovieScreen_DriveIn_Screen_Extended_C, PIPVersionSinglePlayer) == 0x0003A4, "Member 'AArtemis_MovieScreen_DriveIn_Screen_Extended_C::PIPVersionSinglePlayer' has a wrong offset!");
static_assert(offsetof(AArtemis_MovieScreen_DriveIn_Screen_Extended_C, PIPVersionMirror) == 0x0003A8, "Member 'AArtemis_MovieScreen_DriveIn_Screen_Extended_C::PIPVersionMirror' has a wrong offset!");
static_assert(offsetof(AArtemis_MovieScreen_DriveIn_Screen_Extended_C, DisabledSharing) == 0x0003AC, "Member 'AArtemis_MovieScreen_DriveIn_Screen_Extended_C::DisabledSharing' has a wrong offset!");
static_assert(offsetof(AArtemis_MovieScreen_DriveIn_Screen_Extended_C, MediaSound) == 0x0003B0, "Member 'AArtemis_MovieScreen_DriveIn_Screen_Extended_C::MediaSound' has a wrong offset!");
static_assert(offsetof(AArtemis_MovieScreen_DriveIn_Screen_Extended_C, ForceDisableVideo) == 0x0003B8, "Member 'AArtemis_MovieScreen_DriveIn_Screen_Extended_C::ForceDisableVideo' has a wrong offset!");
static_assert(offsetof(AArtemis_MovieScreen_DriveIn_Screen_Extended_C, ForceDisableAudio) == 0x0003B9, "Member 'AArtemis_MovieScreen_DriveIn_Screen_Extended_C::ForceDisableAudio' has a wrong offset!");
static_assert(offsetof(AArtemis_MovieScreen_DriveIn_Screen_Extended_C, VideoEnabledLast) == 0x0003BA, "Member 'AArtemis_MovieScreen_DriveIn_Screen_Extended_C::VideoEnabledLast' has a wrong offset!");
static_assert(offsetof(AArtemis_MovieScreen_DriveIn_Screen_Extended_C, AudioSubmixDefault) == 0x0003BB, "Member 'AArtemis_MovieScreen_DriveIn_Screen_Extended_C::AudioSubmixDefault' has a wrong offset!");
static_assert(offsetof(AArtemis_MovieScreen_DriveIn_Screen_Extended_C, SubtitlesEnabled) == 0x0003BC, "Member 'AArtemis_MovieScreen_DriveIn_Screen_Extended_C::SubtitlesEnabled' has a wrong offset!");
static_assert(offsetof(AArtemis_MovieScreen_DriveIn_Screen_Extended_C, playingScreenMatSoftRef) == 0x0003C0, "Member 'AArtemis_MovieScreen_DriveIn_Screen_Extended_C::playingScreenMatSoftRef' has a wrong offset!");

}

