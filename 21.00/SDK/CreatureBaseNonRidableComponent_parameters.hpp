#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CreatureBaseNonRidableComponent

#include "Basic.hpp"


namespace SDK::Params
{

// Function CreatureBaseNonRidableComponent.CreatureBaseNonRidableComponent_C.ExecuteUbergraph_CreatureBaseNonRidableComponent
// 0x0020 (0x0020 - 0x0000)
struct CreatureBaseNonRidableComponent_C_ExecuteUbergraph_CreatureBaseNonRidableComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPawn*                              K2Node_DynamicCast_AsFort_Pawn;                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CreatureBaseNonRidableComponent_C_ExecuteUbergraph_CreatureBaseNonRidableComponent) == 0x000008, "Wrong alignment on CreatureBaseNonRidableComponent_C_ExecuteUbergraph_CreatureBaseNonRidableComponent");
static_assert(sizeof(CreatureBaseNonRidableComponent_C_ExecuteUbergraph_CreatureBaseNonRidableComponent) == 0x000020, "Wrong size on CreatureBaseNonRidableComponent_C_ExecuteUbergraph_CreatureBaseNonRidableComponent");
static_assert(offsetof(CreatureBaseNonRidableComponent_C_ExecuteUbergraph_CreatureBaseNonRidableComponent, EntryPoint) == 0x000000, "Member 'CreatureBaseNonRidableComponent_C_ExecuteUbergraph_CreatureBaseNonRidableComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(CreatureBaseNonRidableComponent_C_ExecuteUbergraph_CreatureBaseNonRidableComponent, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'CreatureBaseNonRidableComponent_C_ExecuteUbergraph_CreatureBaseNonRidableComponent::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(CreatureBaseNonRidableComponent_C_ExecuteUbergraph_CreatureBaseNonRidableComponent, K2Node_DynamicCast_AsFort_Pawn) == 0x000010, "Member 'CreatureBaseNonRidableComponent_C_ExecuteUbergraph_CreatureBaseNonRidableComponent::K2Node_DynamicCast_AsFort_Pawn' has a wrong offset!");
static_assert(offsetof(CreatureBaseNonRidableComponent_C_ExecuteUbergraph_CreatureBaseNonRidableComponent, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'CreatureBaseNonRidableComponent_C_ExecuteUbergraph_CreatureBaseNonRidableComponent::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function CreatureBaseNonRidableComponent.CreatureBaseNonRidableComponent_C.GetRidingInfoFromTarget
// 0x000C (0x000C - 0x0000)
struct CreatureBaseNonRidableComponent_C_GetRidingInfoFromTarget final
{
public:
	float                                         JumpAttachGroundHeightMin;                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         JumpAttachGroundHeightBuffer;                      // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UsesAltRidingMessage;                              // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CreatureBaseNonRidableComponent_C_GetRidingInfoFromTarget) == 0x000004, "Wrong alignment on CreatureBaseNonRidableComponent_C_GetRidingInfoFromTarget");
static_assert(sizeof(CreatureBaseNonRidableComponent_C_GetRidingInfoFromTarget) == 0x00000C, "Wrong size on CreatureBaseNonRidableComponent_C_GetRidingInfoFromTarget");
static_assert(offsetof(CreatureBaseNonRidableComponent_C_GetRidingInfoFromTarget, JumpAttachGroundHeightMin) == 0x000000, "Member 'CreatureBaseNonRidableComponent_C_GetRidingInfoFromTarget::JumpAttachGroundHeightMin' has a wrong offset!");
static_assert(offsetof(CreatureBaseNonRidableComponent_C_GetRidingInfoFromTarget, JumpAttachGroundHeightBuffer) == 0x000004, "Member 'CreatureBaseNonRidableComponent_C_GetRidingInfoFromTarget::JumpAttachGroundHeightBuffer' has a wrong offset!");
static_assert(offsetof(CreatureBaseNonRidableComponent_C_GetRidingInfoFromTarget, UsesAltRidingMessage) == 0x000008, "Member 'CreatureBaseNonRidableComponent_C_GetRidingInfoFromTarget::UsesAltRidingMessage' has a wrong offset!");

}

