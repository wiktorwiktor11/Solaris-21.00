#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CRDLevelInstanceRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK::Params
{

// Function CRDLevelInstanceRuntime.LevelInstanceGameplayVolume.CreateLevelInstanceSaveActor
// 0x0008 (0x0008 - 0x0000)
struct LevelInstanceGameplayVolume_CreateLevelInstanceSaveActor final
{
public:
	class AFortLevelInstanceSaveActor*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelInstanceGameplayVolume_CreateLevelInstanceSaveActor) == 0x000008, "Wrong alignment on LevelInstanceGameplayVolume_CreateLevelInstanceSaveActor");
static_assert(sizeof(LevelInstanceGameplayVolume_CreateLevelInstanceSaveActor) == 0x000008, "Wrong size on LevelInstanceGameplayVolume_CreateLevelInstanceSaveActor");
static_assert(offsetof(LevelInstanceGameplayVolume_CreateLevelInstanceSaveActor, ReturnValue) == 0x000000, "Member 'LevelInstanceGameplayVolume_CreateLevelInstanceSaveActor::ReturnValue' has a wrong offset!");

// Function CRDLevelInstanceRuntime.LevelInstanceGameplayVolume.HandleActorHealthChanged
// 0x0010 (0x0010 - 0x0000)
struct LevelInstanceGameplayVolume_HandleActorHealthChanged final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewHealth;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LevelInstanceGameplayVolume_HandleActorHealthChanged) == 0x000008, "Wrong alignment on LevelInstanceGameplayVolume_HandleActorHealthChanged");
static_assert(sizeof(LevelInstanceGameplayVolume_HandleActorHealthChanged) == 0x000010, "Wrong size on LevelInstanceGameplayVolume_HandleActorHealthChanged");
static_assert(offsetof(LevelInstanceGameplayVolume_HandleActorHealthChanged, Actor) == 0x000000, "Member 'LevelInstanceGameplayVolume_HandleActorHealthChanged::Actor' has a wrong offset!");
static_assert(offsetof(LevelInstanceGameplayVolume_HandleActorHealthChanged, NewHealth) == 0x000008, "Member 'LevelInstanceGameplayVolume_HandleActorHealthChanged::NewHealth' has a wrong offset!");

// Function CRDLevelInstanceRuntime.LevelInstanceGameplayVolume.LevelInstanceContentChanged
// 0x0008 (0x0008 - 0x0000)
struct LevelInstanceGameplayVolume_LevelInstanceContentChanged final
{
public:
	const class AActor*                           InstigatorActor;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelInstanceGameplayVolume_LevelInstanceContentChanged) == 0x000008, "Wrong alignment on LevelInstanceGameplayVolume_LevelInstanceContentChanged");
static_assert(sizeof(LevelInstanceGameplayVolume_LevelInstanceContentChanged) == 0x000008, "Wrong size on LevelInstanceGameplayVolume_LevelInstanceContentChanged");
static_assert(offsetof(LevelInstanceGameplayVolume_LevelInstanceContentChanged, InstigatorActor) == 0x000000, "Member 'LevelInstanceGameplayVolume_LevelInstanceContentChanged::InstigatorActor' has a wrong offset!");

// Function CRDLevelInstanceRuntime.LevelInstanceGameplayVolume.LevelInstanceContentCollectionChanged
// 0x0030 (0x0030 - 0x0000)
struct LevelInstanceGameplayVolume_LevelInstanceContentCollectionChanged final
{
public:
	const class AActor*                           InstigatorActor;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortCreativeActorCollection> ContentCollection;                                 // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelInstanceGameplayVolume_LevelInstanceContentCollectionChanged) == 0x000008, "Wrong alignment on LevelInstanceGameplayVolume_LevelInstanceContentCollectionChanged");
static_assert(sizeof(LevelInstanceGameplayVolume_LevelInstanceContentCollectionChanged) == 0x000030, "Wrong size on LevelInstanceGameplayVolume_LevelInstanceContentCollectionChanged");
static_assert(offsetof(LevelInstanceGameplayVolume_LevelInstanceContentCollectionChanged, InstigatorActor) == 0x000000, "Member 'LevelInstanceGameplayVolume_LevelInstanceContentCollectionChanged::InstigatorActor' has a wrong offset!");
static_assert(offsetof(LevelInstanceGameplayVolume_LevelInstanceContentCollectionChanged, ContentCollection) == 0x000008, "Member 'LevelInstanceGameplayVolume_LevelInstanceContentCollectionChanged::ContentCollection' has a wrong offset!");

// Function CRDLevelInstanceRuntime.LevelInstanceGameplayVolume.LevelInstanceNameChanged
// 0x0010 (0x0010 - 0x0000)
struct LevelInstanceGameplayVolume_LevelInstanceNameChanged final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelInstanceGameplayVolume_LevelInstanceNameChanged) == 0x000008, "Wrong alignment on LevelInstanceGameplayVolume_LevelInstanceNameChanged");
static_assert(sizeof(LevelInstanceGameplayVolume_LevelInstanceNameChanged) == 0x000010, "Wrong size on LevelInstanceGameplayVolume_LevelInstanceNameChanged");
static_assert(offsetof(LevelInstanceGameplayVolume_LevelInstanceNameChanged, Name_0) == 0x000000, "Member 'LevelInstanceGameplayVolume_LevelInstanceNameChanged::Name_0' has a wrong offset!");

// Function CRDLevelInstanceRuntime.LevelInstanceGameplayVolume.LevelInstanceSizeChanged
// 0x0008 (0x0008 - 0x0000)
struct LevelInstanceGameplayVolume_LevelInstanceSizeChanged final
{
public:
	const class AActor*                           InstigatorActor;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelInstanceGameplayVolume_LevelInstanceSizeChanged) == 0x000008, "Wrong alignment on LevelInstanceGameplayVolume_LevelInstanceSizeChanged");
static_assert(sizeof(LevelInstanceGameplayVolume_LevelInstanceSizeChanged) == 0x000008, "Wrong size on LevelInstanceGameplayVolume_LevelInstanceSizeChanged");
static_assert(offsetof(LevelInstanceGameplayVolume_LevelInstanceSizeChanged, InstigatorActor) == 0x000000, "Member 'LevelInstanceGameplayVolume_LevelInstanceSizeChanged::InstigatorActor' has a wrong offset!");

// Function CRDLevelInstanceRuntime.LevelInstanceGameplayVolume.OnMinigameStateChanged
// 0x0010 (0x0010 - 0x0000)
struct LevelInstanceGameplayVolume_OnMinigameStateChanged final
{
public:
	class AFortMinigame*                          Minigame;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMinigameState                            MinigameState;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LevelInstanceGameplayVolume_OnMinigameStateChanged) == 0x000008, "Wrong alignment on LevelInstanceGameplayVolume_OnMinigameStateChanged");
static_assert(sizeof(LevelInstanceGameplayVolume_OnMinigameStateChanged) == 0x000010, "Wrong size on LevelInstanceGameplayVolume_OnMinigameStateChanged");
static_assert(offsetof(LevelInstanceGameplayVolume_OnMinigameStateChanged, Minigame) == 0x000000, "Member 'LevelInstanceGameplayVolume_OnMinigameStateChanged::Minigame' has a wrong offset!");
static_assert(offsetof(LevelInstanceGameplayVolume_OnMinigameStateChanged, MinigameState) == 0x000008, "Member 'LevelInstanceGameplayVolume_OnMinigameStateChanged::MinigameState' has a wrong offset!");

// Function CRDLevelInstanceRuntime.LevelInstanceGameplayVolume.RemoveActorWhenDied
// 0x0060 (0x0060 - 0x0000)
struct LevelInstanceGameplayVolume_RemoveActorWhenDied final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelInstanceGameplayVolume_RemoveActorWhenDied) == 0x000008, "Wrong alignment on LevelInstanceGameplayVolume_RemoveActorWhenDied");
static_assert(sizeof(LevelInstanceGameplayVolume_RemoveActorWhenDied) == 0x000060, "Wrong size on LevelInstanceGameplayVolume_RemoveActorWhenDied");
static_assert(offsetof(LevelInstanceGameplayVolume_RemoveActorWhenDied, DamagedActor) == 0x000000, "Member 'LevelInstanceGameplayVolume_RemoveActorWhenDied::DamagedActor' has a wrong offset!");
static_assert(offsetof(LevelInstanceGameplayVolume_RemoveActorWhenDied, Damage) == 0x000008, "Member 'LevelInstanceGameplayVolume_RemoveActorWhenDied::Damage' has a wrong offset!");
static_assert(offsetof(LevelInstanceGameplayVolume_RemoveActorWhenDied, InstigatedBy) == 0x000010, "Member 'LevelInstanceGameplayVolume_RemoveActorWhenDied::InstigatedBy' has a wrong offset!");
static_assert(offsetof(LevelInstanceGameplayVolume_RemoveActorWhenDied, DamageCauser) == 0x000018, "Member 'LevelInstanceGameplayVolume_RemoveActorWhenDied::DamageCauser' has a wrong offset!");
static_assert(offsetof(LevelInstanceGameplayVolume_RemoveActorWhenDied, HitLocation) == 0x000020, "Member 'LevelInstanceGameplayVolume_RemoveActorWhenDied::HitLocation' has a wrong offset!");
static_assert(offsetof(LevelInstanceGameplayVolume_RemoveActorWhenDied, FHitComponent) == 0x000038, "Member 'LevelInstanceGameplayVolume_RemoveActorWhenDied::FHitComponent' has a wrong offset!");
static_assert(offsetof(LevelInstanceGameplayVolume_RemoveActorWhenDied, BoneName) == 0x000040, "Member 'LevelInstanceGameplayVolume_RemoveActorWhenDied::BoneName' has a wrong offset!");
static_assert(offsetof(LevelInstanceGameplayVolume_RemoveActorWhenDied, Momentum) == 0x000048, "Member 'LevelInstanceGameplayVolume_RemoveActorWhenDied::Momentum' has a wrong offset!");

// Function CRDLevelInstanceRuntime.LevelInstanceGameplayVolume.RemoveActorWhenEndPlay
// 0x0010 (0x0010 - 0x0000)
struct LevelInstanceGameplayVolume_RemoveActorWhenEndPlay final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LevelInstanceGameplayVolume_RemoveActorWhenEndPlay) == 0x000008, "Wrong alignment on LevelInstanceGameplayVolume_RemoveActorWhenEndPlay");
static_assert(sizeof(LevelInstanceGameplayVolume_RemoveActorWhenEndPlay) == 0x000010, "Wrong size on LevelInstanceGameplayVolume_RemoveActorWhenEndPlay");
static_assert(offsetof(LevelInstanceGameplayVolume_RemoveActorWhenEndPlay, Actor) == 0x000000, "Member 'LevelInstanceGameplayVolume_RemoveActorWhenEndPlay::Actor' has a wrong offset!");
static_assert(offsetof(LevelInstanceGameplayVolume_RemoveActorWhenEndPlay, EndPlayReason) == 0x000008, "Member 'LevelInstanceGameplayVolume_RemoveActorWhenEndPlay::EndPlayReason' has a wrong offset!");

// Function CRDLevelInstanceRuntime.LevelInstanceGameplayVolume.SetEditMode
// 0x0001 (0x0001 - 0x0000)
struct LevelInstanceGameplayVolume_SetEditMode final
{
public:
	bool                                          bInEditMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelInstanceGameplayVolume_SetEditMode) == 0x000001, "Wrong alignment on LevelInstanceGameplayVolume_SetEditMode");
static_assert(sizeof(LevelInstanceGameplayVolume_SetEditMode) == 0x000001, "Wrong size on LevelInstanceGameplayVolume_SetEditMode");
static_assert(offsetof(LevelInstanceGameplayVolume_SetEditMode, bInEditMode) == 0x000000, "Member 'LevelInstanceGameplayVolume_SetEditMode::bInEditMode' has a wrong offset!");

// Function CRDLevelInstanceRuntime.LevelInstanceGameplayVolume.SetLevelInstanceActorGuid
// 0x0010 (0x0010 - 0x0000)
struct LevelInstanceGameplayVolume_SetLevelInstanceActorGuid final
{
public:
	struct FGuid                                  InLevelInstanceActorGuid;                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelInstanceGameplayVolume_SetLevelInstanceActorGuid) == 0x000004, "Wrong alignment on LevelInstanceGameplayVolume_SetLevelInstanceActorGuid");
static_assert(sizeof(LevelInstanceGameplayVolume_SetLevelInstanceActorGuid) == 0x000010, "Wrong size on LevelInstanceGameplayVolume_SetLevelInstanceActorGuid");
static_assert(offsetof(LevelInstanceGameplayVolume_SetLevelInstanceActorGuid, InLevelInstanceActorGuid) == 0x000000, "Member 'LevelInstanceGameplayVolume_SetLevelInstanceActorGuid::InLevelInstanceActorGuid' has a wrong offset!");

// Function CRDLevelInstanceRuntime.LevelInstanceGameplayVolume.SetLevelInstanceContentCollection
// 0x0028 (0x0028 - 0x0000)
struct LevelInstanceGameplayVolume_SetLevelInstanceContentCollection final
{
public:
	TSoftObjectPtr<class UFortCreativeActorCollection> ContentCollection;                                 // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelInstanceGameplayVolume_SetLevelInstanceContentCollection) == 0x000008, "Wrong alignment on LevelInstanceGameplayVolume_SetLevelInstanceContentCollection");
static_assert(sizeof(LevelInstanceGameplayVolume_SetLevelInstanceContentCollection) == 0x000028, "Wrong size on LevelInstanceGameplayVolume_SetLevelInstanceContentCollection");
static_assert(offsetof(LevelInstanceGameplayVolume_SetLevelInstanceContentCollection, ContentCollection) == 0x000000, "Member 'LevelInstanceGameplayVolume_SetLevelInstanceContentCollection::ContentCollection' has a wrong offset!");

// Function CRDLevelInstanceRuntime.LevelInstanceGameplayVolume.SetLevelInstanceName
// 0x0010 (0x0010 - 0x0000)
struct LevelInstanceGameplayVolume_SetLevelInstanceName final
{
public:
	class FString                                 InName;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelInstanceGameplayVolume_SetLevelInstanceName) == 0x000008, "Wrong alignment on LevelInstanceGameplayVolume_SetLevelInstanceName");
static_assert(sizeof(LevelInstanceGameplayVolume_SetLevelInstanceName) == 0x000010, "Wrong size on LevelInstanceGameplayVolume_SetLevelInstanceName");
static_assert(offsetof(LevelInstanceGameplayVolume_SetLevelInstanceName, InName) == 0x000000, "Member 'LevelInstanceGameplayVolume_SetLevelInstanceName::InName' has a wrong offset!");

// Function CRDLevelInstanceRuntime.LevelInstanceGameplayVolume.SetReadyForInstantiation
// 0x0001 (0x0001 - 0x0000)
struct LevelInstanceGameplayVolume_SetReadyForInstantiation final
{
public:
	bool                                          bReady;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelInstanceGameplayVolume_SetReadyForInstantiation) == 0x000001, "Wrong alignment on LevelInstanceGameplayVolume_SetReadyForInstantiation");
static_assert(sizeof(LevelInstanceGameplayVolume_SetReadyForInstantiation) == 0x000001, "Wrong size on LevelInstanceGameplayVolume_SetReadyForInstantiation");
static_assert(offsetof(LevelInstanceGameplayVolume_SetReadyForInstantiation, bReady) == 0x000000, "Member 'LevelInstanceGameplayVolume_SetReadyForInstantiation::bReady' has a wrong offset!");

// Function CRDLevelInstanceRuntime.LevelInstanceGameplayVolume.SetWantsLevelLoaded
// 0x0001 (0x0001 - 0x0000)
struct LevelInstanceGameplayVolume_SetWantsLevelLoaded final
{
public:
	bool                                          bInWantsLevelLoaded;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelInstanceGameplayVolume_SetWantsLevelLoaded) == 0x000001, "Wrong alignment on LevelInstanceGameplayVolume_SetWantsLevelLoaded");
static_assert(sizeof(LevelInstanceGameplayVolume_SetWantsLevelLoaded) == 0x000001, "Wrong size on LevelInstanceGameplayVolume_SetWantsLevelLoaded");
static_assert(offsetof(LevelInstanceGameplayVolume_SetWantsLevelLoaded, bInWantsLevelLoaded) == 0x000000, "Member 'LevelInstanceGameplayVolume_SetWantsLevelLoaded::bInWantsLevelLoaded' has a wrong offset!");

// Function CRDLevelInstanceRuntime.LevelInstanceGameplayVolume.GetLevelInstanceName
// 0x0010 (0x0010 - 0x0000)
struct LevelInstanceGameplayVolume_GetLevelInstanceName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelInstanceGameplayVolume_GetLevelInstanceName) == 0x000008, "Wrong alignment on LevelInstanceGameplayVolume_GetLevelInstanceName");
static_assert(sizeof(LevelInstanceGameplayVolume_GetLevelInstanceName) == 0x000010, "Wrong size on LevelInstanceGameplayVolume_GetLevelInstanceName");
static_assert(offsetof(LevelInstanceGameplayVolume_GetLevelInstanceName, ReturnValue) == 0x000000, "Member 'LevelInstanceGameplayVolume_GetLevelInstanceName::ReturnValue' has a wrong offset!");

// Function CRDLevelInstanceRuntime.LevelInstanceGameplayVolume.IsDisabled
// 0x0001 (0x0001 - 0x0000)
struct LevelInstanceGameplayVolume_IsDisabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelInstanceGameplayVolume_IsDisabled) == 0x000001, "Wrong alignment on LevelInstanceGameplayVolume_IsDisabled");
static_assert(sizeof(LevelInstanceGameplayVolume_IsDisabled) == 0x000001, "Wrong size on LevelInstanceGameplayVolume_IsDisabled");
static_assert(offsetof(LevelInstanceGameplayVolume_IsDisabled, ReturnValue) == 0x000000, "Member 'LevelInstanceGameplayVolume_IsDisabled::ReturnValue' has a wrong offset!");

// Function CRDLevelInstanceRuntime.LevelInstanceGameplayVolume.IsInEditMode
// 0x0001 (0x0001 - 0x0000)
struct LevelInstanceGameplayVolume_IsInEditMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelInstanceGameplayVolume_IsInEditMode) == 0x000001, "Wrong alignment on LevelInstanceGameplayVolume_IsInEditMode");
static_assert(sizeof(LevelInstanceGameplayVolume_IsInEditMode) == 0x000001, "Wrong size on LevelInstanceGameplayVolume_IsInEditMode");
static_assert(offsetof(LevelInstanceGameplayVolume_IsInEditMode, ReturnValue) == 0x000000, "Member 'LevelInstanceGameplayVolume_IsInEditMode::ReturnValue' has a wrong offset!");

// Function CRDLevelInstanceRuntime.LevelInstanceGameplayVolume.IsPreviewActor
// 0x0001 (0x0001 - 0x0000)
struct LevelInstanceGameplayVolume_IsPreviewActor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelInstanceGameplayVolume_IsPreviewActor) == 0x000001, "Wrong alignment on LevelInstanceGameplayVolume_IsPreviewActor");
static_assert(sizeof(LevelInstanceGameplayVolume_IsPreviewActor) == 0x000001, "Wrong size on LevelInstanceGameplayVolume_IsPreviewActor");
static_assert(offsetof(LevelInstanceGameplayVolume_IsPreviewActor, ReturnValue) == 0x000000, "Member 'LevelInstanceGameplayVolume_IsPreviewActor::ReturnValue' has a wrong offset!");

}

