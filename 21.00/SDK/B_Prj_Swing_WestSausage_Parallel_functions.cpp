#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Prj_Swing_WestSausage_Parallel

#include "Basic.hpp"

#include "B_Prj_Swing_WestSausage_Parallel_classes.hpp"
#include "B_Prj_Swing_WestSausage_Parallel_parameters.hpp"


namespace SDK
{

// Function B_Prj_Swing_WestSausage_Parallel.B_Prj_Swing_WestSausage_Parallel_C.attach
// (BlueprintCallable, BlueprintEvent)

void AB_Prj_Swing_WestSausage_Parallel_C::attach()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Prj_Swing_WestSausage_Parallel_C", "attach");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Prj_Swing_WestSausage_Parallel.B_Prj_Swing_WestSausage_Parallel_C.AttachToProjectile
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           PickUp                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Projectile                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Prj_Swing_WestSausage_Parallel_C::AttachToProjectile(class AActor* PickUp, class AActor* Projectile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Prj_Swing_WestSausage_Parallel_C", "AttachToProjectile");

	Params::B_Prj_Swing_WestSausage_Parallel_C_AttachToProjectile Parms{};

	Parms.PickUp = PickUp;
	Parms.Projectile = Projectile;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Prj_Swing_WestSausage_Parallel.B_Prj_Swing_WestSausage_Parallel_C.DestroySelf
// (BlueprintCallable, BlueprintEvent)

void AB_Prj_Swing_WestSausage_Parallel_C::DestroySelf()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Prj_Swing_WestSausage_Parallel_C", "DestroySelf");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Prj_Swing_WestSausage_Parallel.B_Prj_Swing_WestSausage_Parallel_C.ExecuteUbergraph_B_Prj_Swing_WestSausage_Parallel
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Prj_Swing_WestSausage_Parallel_C::ExecuteUbergraph_B_Prj_Swing_WestSausage_Parallel(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Prj_Swing_WestSausage_Parallel_C", "ExecuteUbergraph_B_Prj_Swing_WestSausage_Parallel");

	Params::B_Prj_Swing_WestSausage_Parallel_C_ExecuteUbergraph_B_Prj_Swing_WestSausage_Parallel Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Prj_Swing_WestSausage_Parallel.B_Prj_Swing_WestSausage_Parallel_C.GetTargetPosition_
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsImpactPoint                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector AB_Prj_Swing_WestSausage_Parallel_C::GetTargetPosition_(bool* IsImpactPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Prj_Swing_WestSausage_Parallel_C", "GetTargetPosition_");

	Params::B_Prj_Swing_WestSausage_Parallel_C_GetTargetPosition_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsImpactPoint != nullptr)
		*IsImpactPoint = Parms.IsImpactPoint;

	return Parms.ReturnValue;
}


// Function B_Prj_Swing_WestSausage_Parallel.B_Prj_Swing_WestSausage_Parallel_C.Init
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    TargetingPickUp_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AB_Ranged_WestSausage_Parallel_Athena_C*Weapon_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HitSomething                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          TargetIfMissed_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Prj_Swing_WestSausage_Parallel_C::Init(const struct FHitResult& Hit, bool TargetingPickUp_0, class AB_Ranged_WestSausage_Parallel_Athena_C* Weapon_0, bool HitSomething, const struct FVector& TargetIfMissed_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Prj_Swing_WestSausage_Parallel_C", "Init");

	Params::B_Prj_Swing_WestSausage_Parallel_C_Init Parms{};

	Parms.Hit = std::move(Hit);
	Parms.TargetingPickUp_0 = TargetingPickUp_0;
	Parms.Weapon_0 = Weapon_0;
	Parms.HitSomething = HitSomething;
	Parms.TargetIfMissed_0 = std::move(TargetIfMissed_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Prj_Swing_WestSausage_Parallel.B_Prj_Swing_WestSausage_Parallel_C.Init_Server
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHitResult                       HitResult_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    TargetingPickUp_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AB_Ranged_WestSausage_Parallel_Athena_C*Weapon_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HitSomething                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          TargetIfMissed_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Prj_Swing_WestSausage_Parallel_C::Init_Server(const struct FHitResult& HitResult_0, bool TargetingPickUp_0, class AB_Ranged_WestSausage_Parallel_Athena_C* Weapon_0, bool HitSomething, const struct FVector& TargetIfMissed_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Prj_Swing_WestSausage_Parallel_C", "Init_Server");

	Params::B_Prj_Swing_WestSausage_Parallel_C_Init_Server Parms{};

	Parms.HitResult_0 = std::move(HitResult_0);
	Parms.TargetingPickUp_0 = TargetingPickUp_0;
	Parms.Weapon_0 = Weapon_0;
	Parms.HitSomething = HitSomething;
	Parms.TargetIfMissed_0 = std::move(TargetIfMissed_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Prj_Swing_WestSausage_Parallel.B_Prj_Swing_WestSausage_Parallel_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AB_Prj_Swing_WestSausage_Parallel_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Prj_Swing_WestSausage_Parallel_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Prj_Swing_WestSausage_Parallel.B_Prj_Swing_WestSausage_Parallel_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Prj_Swing_WestSausage_Parallel_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Prj_Swing_WestSausage_Parallel_C", "ReceiveTick");

	Params::B_Prj_Swing_WestSausage_Parallel_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Prj_Swing_WestSausage_Parallel.B_Prj_Swing_WestSausage_Parallel_C.UpdateRope
// (BlueprintCallable, BlueprintEvent)

void AB_Prj_Swing_WestSausage_Parallel_C::UpdateRope()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Prj_Swing_WestSausage_Parallel_C", "UpdateRope");

	UObject::ProcessEvent(Func, nullptr);
}

}

