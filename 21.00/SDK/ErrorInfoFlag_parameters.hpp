#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ErrorInfoFlag

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function ErrorInfoFlag.ErrorInfoFlag_C.ExecuteUbergraph_ErrorInfoFlag
// 0x0008 (0x0008 - 0x0000)
struct ErrorInfoFlag_C_ExecuteUbergraph_ErrorInfoFlag final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ErrorInfoFlag_C_ExecuteUbergraph_ErrorInfoFlag) == 0x000004, "Wrong alignment on ErrorInfoFlag_C_ExecuteUbergraph_ErrorInfoFlag");
static_assert(sizeof(ErrorInfoFlag_C_ExecuteUbergraph_ErrorInfoFlag) == 0x000008, "Wrong size on ErrorInfoFlag_C_ExecuteUbergraph_ErrorInfoFlag");
static_assert(offsetof(ErrorInfoFlag_C_ExecuteUbergraph_ErrorInfoFlag, EntryPoint) == 0x000000, "Member 'ErrorInfoFlag_C_ExecuteUbergraph_ErrorInfoFlag::EntryPoint' has a wrong offset!");
static_assert(offsetof(ErrorInfoFlag_C_ExecuteUbergraph_ErrorInfoFlag, K2Node_Event_IsDesignTime) == 0x000004, "Member 'ErrorInfoFlag_C_ExecuteUbergraph_ErrorInfoFlag::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function ErrorInfoFlag.ErrorInfoFlag_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct ErrorInfoFlag_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ErrorInfoFlag_C_PreConstruct) == 0x000001, "Wrong alignment on ErrorInfoFlag_C_PreConstruct");
static_assert(sizeof(ErrorInfoFlag_C_PreConstruct) == 0x000001, "Wrong size on ErrorInfoFlag_C_PreConstruct");
static_assert(offsetof(ErrorInfoFlag_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'ErrorInfoFlag_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function ErrorInfoFlag.ErrorInfoFlag_C.UpdateAccentColor
// 0x0010 (0x0010 - 0x0000)
struct ErrorInfoFlag_C_UpdateAccentColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ErrorInfoFlag_C_UpdateAccentColor) == 0x000004, "Wrong alignment on ErrorInfoFlag_C_UpdateAccentColor");
static_assert(sizeof(ErrorInfoFlag_C_UpdateAccentColor) == 0x000010, "Wrong size on ErrorInfoFlag_C_UpdateAccentColor");
static_assert(offsetof(ErrorInfoFlag_C_UpdateAccentColor, Color) == 0x000000, "Member 'ErrorInfoFlag_C_UpdateAccentColor::Color' has a wrong offset!");

// Function ErrorInfoFlag.ErrorInfoFlag_C.UpdateIconMaterial
// 0x0010 (0x0010 - 0x0000)
struct ErrorInfoFlag_C_UpdateIconMaterial final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ErrorInfoFlag_C_UpdateIconMaterial) == 0x000008, "Wrong alignment on ErrorInfoFlag_C_UpdateIconMaterial");
static_assert(sizeof(ErrorInfoFlag_C_UpdateIconMaterial) == 0x000010, "Wrong size on ErrorInfoFlag_C_UpdateIconMaterial");
static_assert(offsetof(ErrorInfoFlag_C_UpdateIconMaterial, Material) == 0x000000, "Member 'ErrorInfoFlag_C_UpdateIconMaterial::Material' has a wrong offset!");
static_assert(offsetof(ErrorInfoFlag_C_UpdateIconMaterial, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'ErrorInfoFlag_C_UpdateIconMaterial::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function ErrorInfoFlag.ErrorInfoFlag_C.UpdateText
// 0x0020 (0x0020 - 0x0000)
struct ErrorInfoFlag_C_UpdateText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ErrorInfoFlag_C_UpdateText) == 0x000008, "Wrong alignment on ErrorInfoFlag_C_UpdateText");
static_assert(sizeof(ErrorInfoFlag_C_UpdateText) == 0x000020, "Wrong size on ErrorInfoFlag_C_UpdateText");
static_assert(offsetof(ErrorInfoFlag_C_UpdateText, Text) == 0x000000, "Member 'ErrorInfoFlag_C_UpdateText::Text' has a wrong offset!");
static_assert(offsetof(ErrorInfoFlag_C_UpdateText, Temp_bool_Variable) == 0x000018, "Member 'ErrorInfoFlag_C_UpdateText::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ErrorInfoFlag_C_UpdateText, CallFunc_TextIsEmpty_ReturnValue) == 0x000019, "Member 'ErrorInfoFlag_C_UpdateText::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(ErrorInfoFlag_C_UpdateText, Temp_byte_Variable) == 0x00001A, "Member 'ErrorInfoFlag_C_UpdateText::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ErrorInfoFlag_C_UpdateText, Temp_byte_Variable_1) == 0x00001B, "Member 'ErrorInfoFlag_C_UpdateText::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ErrorInfoFlag_C_UpdateText, K2Node_Select_Default) == 0x00001C, "Member 'ErrorInfoFlag_C_UpdateText::K2Node_Select_Default' has a wrong offset!");

}

