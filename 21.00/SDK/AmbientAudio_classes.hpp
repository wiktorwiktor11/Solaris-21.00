#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AmbientAudio

#include "Basic.hpp"

#include "AudioGameplay_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "AmbientAudio_structs.hpp"
#include "GameplayTags_0_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class AmbientAudio.AmbientAudioComponent
// 0x0030 (0x00D8 - 0x00A8)
class UAmbientAudioComponent final : public UAudioGameplayComponent
{
public:
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UAmbientAudioDataAsset*                 AmbientAsset;                                      // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Priority;                                          // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CrossfadeTime;                                     // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGuid                                  AmbientGuid;                                       // 0x00C0(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   DisplayName;                                       // 0x00D0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetAmbientAsset(class UAmbientAudioDataAsset* InAmbientAsset);
	void SetCrossfadeTime(float InCrossfadeTime);
	void SetPriority(int32 InPriority);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AmbientAudioComponent">();
	}
	static class UAmbientAudioComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAmbientAudioComponent>();
	}
};
static_assert(alignof(UAmbientAudioComponent) == 0x000008, "Wrong alignment on UAmbientAudioComponent");
static_assert(sizeof(UAmbientAudioComponent) == 0x0000D8, "Wrong size on UAmbientAudioComponent");
static_assert(offsetof(UAmbientAudioComponent, AmbientAsset) == 0x0000B0, "Member 'UAmbientAudioComponent::AmbientAsset' has a wrong offset!");
static_assert(offsetof(UAmbientAudioComponent, Priority) == 0x0000B8, "Member 'UAmbientAudioComponent::Priority' has a wrong offset!");
static_assert(offsetof(UAmbientAudioComponent, CrossfadeTime) == 0x0000BC, "Member 'UAmbientAudioComponent::CrossfadeTime' has a wrong offset!");
static_assert(offsetof(UAmbientAudioComponent, AmbientGuid) == 0x0000C0, "Member 'UAmbientAudioComponent::AmbientGuid' has a wrong offset!");
static_assert(offsetof(UAmbientAudioComponent, DisplayName) == 0x0000D0, "Member 'UAmbientAudioComponent::DisplayName' has a wrong offset!");

// Class AmbientAudio.AmbientAudioDataAsset
// 0x0028 (0x0058 - 0x0030)
class UAmbientAudioDataAsset : public UDataAsset
{
public:
	TArray<struct FAmbientAudioLoop>              LoopingSounds;                                     // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FAmbientAudioOneShot>           OneShotSounds;                                     // 0x0040(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         TagCrossfadeTime;                                  // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AmbientAudioDataAsset">();
	}
	static class UAmbientAudioDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAmbientAudioDataAsset>();
	}
};
static_assert(alignof(UAmbientAudioDataAsset) == 0x000008, "Wrong alignment on UAmbientAudioDataAsset");
static_assert(sizeof(UAmbientAudioDataAsset) == 0x000058, "Wrong size on UAmbientAudioDataAsset");
static_assert(offsetof(UAmbientAudioDataAsset, LoopingSounds) == 0x000030, "Member 'UAmbientAudioDataAsset::LoopingSounds' has a wrong offset!");
static_assert(offsetof(UAmbientAudioDataAsset, OneShotSounds) == 0x000040, "Member 'UAmbientAudioDataAsset::OneShotSounds' has a wrong offset!");
static_assert(offsetof(UAmbientAudioDataAsset, TagCrossfadeTime) == 0x000050, "Member 'UAmbientAudioDataAsset::TagCrossfadeTime' has a wrong offset!");

// Class AmbientAudio.AmbientAudioSubsystem
// 0x0220 (0x0250 - 0x0030)
class UAmbientAudioSubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(struct FGameplayTag& GameplayTag, EAmbientAudioTagActionType ActionType)> OnTagChanged;                                      // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName AmbientName, EAmbientAudioEntryActionType ActionType)> OnEntryChanged;                                    // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class UAmbientAudioComponent*>         AmbientComponents;                                 // 0x0058(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_68[0x1E8];                                     // 0x0068(0x01E8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddAmbientEntry(class FName AmbientName, class UAmbientAudioDataAsset* Asset, int32 Priority, float CrossfadeTime);
	void AddGameplayTag(const struct FGameplayTag& GameplayTag);
	void RemoveAmbientEntry(class FName AmbientName, float CrossfadeOverride);
	void RemoveGameplayTag(const struct FGameplayTag& GameplayTag);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AmbientAudioSubsystem">();
	}
	static class UAmbientAudioSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAmbientAudioSubsystem>();
	}
};
static_assert(alignof(UAmbientAudioSubsystem) == 0x000008, "Wrong alignment on UAmbientAudioSubsystem");
static_assert(sizeof(UAmbientAudioSubsystem) == 0x000250, "Wrong size on UAmbientAudioSubsystem");
static_assert(offsetof(UAmbientAudioSubsystem, OnTagChanged) == 0x000038, "Member 'UAmbientAudioSubsystem::OnTagChanged' has a wrong offset!");
static_assert(offsetof(UAmbientAudioSubsystem, OnEntryChanged) == 0x000048, "Member 'UAmbientAudioSubsystem::OnEntryChanged' has a wrong offset!");
static_assert(offsetof(UAmbientAudioSubsystem, AmbientComponents) == 0x000058, "Member 'UAmbientAudioSubsystem::AmbientComponents' has a wrong offset!");

// Class AmbientAudio.AmbientVolume
// 0x0028 (0x02D0 - 0x02A8)
class AAmbientVolume final : public AVolume
{
public:
	class UAmbientAudioDataAsset*                 AmbientAsset;                                      // 0x02A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Priority;                                          // 0x02B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CrossfadeTime;                                     // 0x02B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bEnabled : 1;                                      // 0x02B8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bGlobal : 1;                                       // 0x02B8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_2B9[0x3];                                      // 0x02B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  AmbientGuid;                                       // 0x02BC(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2CC[0x4];                                      // 0x02CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_bEnabled();
	void SetAmbientAsset(class UAmbientAudioDataAsset* NewAmbientAsset);
	void SetCrossfadeTime(float NewCrossfadeTime);
	void SetEnabled(bool bNewEnabled);
	void SetPriority(int32 NewPriority);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AmbientVolume">();
	}
	static class AAmbientVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAmbientVolume>();
	}
};
static_assert(alignof(AAmbientVolume) == 0x000008, "Wrong alignment on AAmbientVolume");
static_assert(sizeof(AAmbientVolume) == 0x0002D0, "Wrong size on AAmbientVolume");
static_assert(offsetof(AAmbientVolume, AmbientAsset) == 0x0002A8, "Member 'AAmbientVolume::AmbientAsset' has a wrong offset!");
static_assert(offsetof(AAmbientVolume, Priority) == 0x0002B0, "Member 'AAmbientVolume::Priority' has a wrong offset!");
static_assert(offsetof(AAmbientVolume, CrossfadeTime) == 0x0002B4, "Member 'AAmbientVolume::CrossfadeTime' has a wrong offset!");
static_assert(offsetof(AAmbientVolume, AmbientGuid) == 0x0002BC, "Member 'AAmbientVolume::AmbientGuid' has a wrong offset!");

}

