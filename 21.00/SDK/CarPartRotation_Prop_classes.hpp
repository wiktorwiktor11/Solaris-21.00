#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CarPartRotation_Prop

#include "Basic.hpp"

#include "CarPartVisibiltyEnum_structs.hpp"
#include "RandomColor_Prop_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass CarPartRotation_Prop.CarPartRotation_Prop_C
// 0x0038 (0x0F08 - 0x0ED0)
class ACarPartRotation_Prop_C : public ARandomColor_Prop_C
{
public:
	class UStaticMeshComponent*                   Engine;                                            // 0x0ED0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Trunk;                                             // 0x0ED8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Hood;                                              // 0x0EE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         HoodAngleLimit;                                    // 0x0EE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TrunkAngleLimit;                                   // 0x0EEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseRandomRotation;                                 // 0x0EF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InvertTrunkAngle;                                  // 0x0EF1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EF2[0x2];                                      // 0x0EF2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HoodAngle;                                         // 0x0EF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TrunkAngle;                                        // 0x0EF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RemoveEngine;                                      // 0x0EFC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RemoveTrunk;                                       // 0x0EFD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RemoveHood;                                        // 0x0EFE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RemoveRandomParts;                                 // 0x0EFF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECarPartVisibiltyEnum                         TrunkVisibility;                                   // 0x0F00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECarPartVisibiltyEnum                         HoodVisibility;                                    // 0x0F01(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECarPartVisibiltyEnum                         EngineVisibility;                                  // 0x0F02(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Close_All();
	void Close_Hood();
	void Close_Trunk();
	void Destroy_Part(class UStaticMeshComponent* Part, bool BeRandom, float Offset, float DestroyChance);
	void Engine_Removal();
	void Randomize_All();
	void Randomize_Hood();
	void Randomize_Trunk();
	void RemoveComponents();
	void Set_Hood_Rotation();
	void Set_Trunk_Rotation();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CarPartRotation_Prop_C">();
	}
	static class ACarPartRotation_Prop_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACarPartRotation_Prop_C>();
	}
};
static_assert(alignof(ACarPartRotation_Prop_C) == 0x000008, "Wrong alignment on ACarPartRotation_Prop_C");
static_assert(sizeof(ACarPartRotation_Prop_C) == 0x000F08, "Wrong size on ACarPartRotation_Prop_C");
static_assert(offsetof(ACarPartRotation_Prop_C, Engine) == 0x000ED0, "Member 'ACarPartRotation_Prop_C::Engine' has a wrong offset!");
static_assert(offsetof(ACarPartRotation_Prop_C, Trunk) == 0x000ED8, "Member 'ACarPartRotation_Prop_C::Trunk' has a wrong offset!");
static_assert(offsetof(ACarPartRotation_Prop_C, Hood) == 0x000EE0, "Member 'ACarPartRotation_Prop_C::Hood' has a wrong offset!");
static_assert(offsetof(ACarPartRotation_Prop_C, HoodAngleLimit) == 0x000EE8, "Member 'ACarPartRotation_Prop_C::HoodAngleLimit' has a wrong offset!");
static_assert(offsetof(ACarPartRotation_Prop_C, TrunkAngleLimit) == 0x000EEC, "Member 'ACarPartRotation_Prop_C::TrunkAngleLimit' has a wrong offset!");
static_assert(offsetof(ACarPartRotation_Prop_C, UseRandomRotation) == 0x000EF0, "Member 'ACarPartRotation_Prop_C::UseRandomRotation' has a wrong offset!");
static_assert(offsetof(ACarPartRotation_Prop_C, InvertTrunkAngle) == 0x000EF1, "Member 'ACarPartRotation_Prop_C::InvertTrunkAngle' has a wrong offset!");
static_assert(offsetof(ACarPartRotation_Prop_C, HoodAngle) == 0x000EF4, "Member 'ACarPartRotation_Prop_C::HoodAngle' has a wrong offset!");
static_assert(offsetof(ACarPartRotation_Prop_C, TrunkAngle) == 0x000EF8, "Member 'ACarPartRotation_Prop_C::TrunkAngle' has a wrong offset!");
static_assert(offsetof(ACarPartRotation_Prop_C, RemoveEngine) == 0x000EFC, "Member 'ACarPartRotation_Prop_C::RemoveEngine' has a wrong offset!");
static_assert(offsetof(ACarPartRotation_Prop_C, RemoveTrunk) == 0x000EFD, "Member 'ACarPartRotation_Prop_C::RemoveTrunk' has a wrong offset!");
static_assert(offsetof(ACarPartRotation_Prop_C, RemoveHood) == 0x000EFE, "Member 'ACarPartRotation_Prop_C::RemoveHood' has a wrong offset!");
static_assert(offsetof(ACarPartRotation_Prop_C, RemoveRandomParts) == 0x000EFF, "Member 'ACarPartRotation_Prop_C::RemoveRandomParts' has a wrong offset!");
static_assert(offsetof(ACarPartRotation_Prop_C, TrunkVisibility) == 0x000F00, "Member 'ACarPartRotation_Prop_C::TrunkVisibility' has a wrong offset!");
static_assert(offsetof(ACarPartRotation_Prop_C, HoodVisibility) == 0x000F01, "Member 'ACarPartRotation_Prop_C::HoodVisibility' has a wrong offset!");
static_assert(offsetof(ACarPartRotation_Prop_C, EngineVisibility) == 0x000F02, "Member 'ACarPartRotation_Prop_C::EngineVisibility' has a wrong offset!");

}

