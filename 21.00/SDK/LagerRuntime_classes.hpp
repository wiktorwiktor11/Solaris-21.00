#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LagerRuntime

#include "Basic.hpp"

#include "GameplayTags_0_structs.hpp"
#include "Engine_classes.hpp"
#include "GameplayAbilities_structs.hpp"
#include "LagerRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "FortniteGame_classes.hpp"
#include "SlateCore_structs.hpp"
#include "ModularGameplay_classes.hpp"
#include "AIModule_structs.hpp"
#include "GameFeatures_classes.hpp"


namespace SDK
{

// Class LagerRuntime.FortAthenaLivingWorldManager
// 0x0840 (0x08E0 - 0x00A0)
class UFortAthenaLivingWorldManager : public UGameStateComponent
{
public:
	TSoftObjectPtr<class UFortAthenaLivingWorldConfigData> DefaultLagerConfig;                                // 0x00A0(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FFortLivingWorldConfigOverride> LagerConfigOverrides;                              // 0x00C8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         LagerEnabled;                                      // 0x00D8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TMap<struct FGameplayTag, TSubclassOf<class UFortAthenaLivingWorldSpawnAction>> TaggedSpawnActionClassMap;                         // 0x0100(0x0050)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>> PointProviders;                                    // 0x0150(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	struct FSlateBrush                            SpecialActorMinimapIconBrush;                      // 0x0160(0x00C0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FVector2D                              SpecialActorMinimapIconScale;                      // 0x0220(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSlateBrush                            SpecialActorCompassIconBrush;                      // 0x0230(0x00C0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FVector2D                              SpecialActorCompassIconScale;                      // 0x02F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<TSubclassOf<class UFortAthenaSpawnerDataBase>> LoadedSpawnerDataClass;                            // 0x0300(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TSubclassOf<class UFortAthenaSpawnerDataBase>> SpawnedSingleUseSpawnerData;                       // 0x0310(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TSubclassOf<class AActor>>             LoadedActorDataClass;                              // 0x0320(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UWorld*                                 CachedWorld;                                       // 0x0330(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortAthenaLivingWorldConfigData*       CachedConfig;                                      // 0x0338(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UFortAthenaLivingWorldEncounterInstance*> RunningEncounterInstances;                         // 0x0340(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	class UFortSeasonalEventManager*              CachedSeasonalEventManager;                        // 0x0350(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<TSoftClassPtr<class UClass>>           ActorClassToPreloadOnClient;                       // 0x0358(0x0010)(Net, ZeroConstructor, RepNotify, UObjectWrapper, NativeAccessSpecifierPrivate)
	struct FFortAthenaLivingWorldPlayerTracker    PlayerTracker;                                     // 0x0368(0x00B0)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_418[0x208];                                    // 0x0418(0x0208)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         RuntimePointProviderList;                          // 0x0620(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TSet<class AActor*>                           RuntimePointProviderOwners;                        // 0x0630(0x0050)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_680[0x1F8];                                    // 0x0680(0x01F8)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<TSubclassOf<class UFortAthenaLivingWorldSpawnAction>, class UFortAthenaLivingWorldSpawnAction*> SpawnActionCache;                                  // 0x0878(0x0050)(Transient, NativeAccessSpecifierPrivate)
	class AActor*                                 EQSHelper;                                         // 0x08C8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortAthenaLivingWorldDebugDensityMiniMapIndicator* DebugDensityMinimapIndicator;                      // 0x08D0(0x0008)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8D8[0x8];                                      // 0x08D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UFortAthenaLivingWorldManager* GetLivingWorldManager(class UObject* WorldContextObject);
	static void LivingWorldManagerRegisterPointProvider(class AActor* PointProvider);
	static void LivingWorldManagerUnregisterPointProvider(class AActor* PointProvider);

	void EndEncounter(class UFortAthenaLivingWorldEncounterInstance* EncounterInstance);
	void LivingWorldManagerFlush();
	void LivingWorldManagerGenerateEvents();
	void LivingWorldManagerProviderDebugActor(int32 ProviderIndex);
	void LivingWorldManagerToggleActorMinimap();
	void LivingWorldManagerToggleDensityDisplay();
	void LivingWorldManagerToggleGenerateEvents();
	void LivingWorldManagerToggleVerboseLogging();
	void OnActorSpawned(class AActor* Actor, int32 RequestId);
	void OnCurrentPlaylistLoaded(class FName PlaylistName, const struct FGameplayTagContainer& PlaylistContextTags);
	void OnDebugSpawnEventSpawned(const TArray<class AActor*>& SpawnedActors, bool bSuccess);
	void OnPatrolPathAdded(class AFortAthenaPatrolPath* PatrolPath);
	void OnRep_ActorClassToPreloadOnClient();
	void OnRep_DebugDensityMinimapIndicator(class UFortAthenaLivingWorldDebugDensityMiniMapIndicator* OldMapIndicator);
	void OnSpawnedActorDestroy(class AActor* DestroyedActor);
	void OnUnmanagedDensityReservoirActorDestroy(class AActor* DestroyedActor);
	void OnWorldFinishedInitialization(const struct FGameplayTagContainer& ContextTags);
	int32 QueryEventBudget(const struct FDataTableRowHandle& EventEntry, const class AActor* SpawnLocation);
	void RegisterDensityReservoir(class AActor* ActorDensityReservoir, float Density, float Range);
	void RequestEventGeneration();
	class UFortAthenaLivingWorldEncounterInstance* StartEncounter(const TSoftObjectPtr<class UFortAthenaLivingWorldEncounter> EncounterType, const TArray<TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>>& EncounterPointProviders, class AActor* ActorDensityReservoir);
	bool TrySpawnEvent(const struct FDataTableRowHandle& EventEntry, const struct FTransform& SpawnLocation, const TDelegate<void(TArray<class AActor*>& SpawnedActors, bool bSuccess)>& OnRequestFinished);
	void UnregisterDensityReservoir(class AActor* ActorDensityReservoir);

	bool IsEncounterCategoryActive(const TSoftObjectPtr<class UFortAthenaLivingWorldEncounter> EncounterType) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldManager">();
	}
	static class UFortAthenaLivingWorldManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaLivingWorldManager>();
	}
};
static_assert(alignof(UFortAthenaLivingWorldManager) == 0x000010, "Wrong alignment on UFortAthenaLivingWorldManager");
static_assert(sizeof(UFortAthenaLivingWorldManager) == 0x0008E0, "Wrong size on UFortAthenaLivingWorldManager");
static_assert(offsetof(UFortAthenaLivingWorldManager, DefaultLagerConfig) == 0x0000A0, "Member 'UFortAthenaLivingWorldManager::DefaultLagerConfig' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, LagerConfigOverrides) == 0x0000C8, "Member 'UFortAthenaLivingWorldManager::LagerConfigOverrides' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, LagerEnabled) == 0x0000D8, "Member 'UFortAthenaLivingWorldManager::LagerEnabled' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, TaggedSpawnActionClassMap) == 0x000100, "Member 'UFortAthenaLivingWorldManager::TaggedSpawnActionClassMap' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, PointProviders) == 0x000150, "Member 'UFortAthenaLivingWorldManager::PointProviders' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, SpecialActorMinimapIconBrush) == 0x000160, "Member 'UFortAthenaLivingWorldManager::SpecialActorMinimapIconBrush' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, SpecialActorMinimapIconScale) == 0x000220, "Member 'UFortAthenaLivingWorldManager::SpecialActorMinimapIconScale' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, SpecialActorCompassIconBrush) == 0x000230, "Member 'UFortAthenaLivingWorldManager::SpecialActorCompassIconBrush' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, SpecialActorCompassIconScale) == 0x0002F0, "Member 'UFortAthenaLivingWorldManager::SpecialActorCompassIconScale' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, LoadedSpawnerDataClass) == 0x000300, "Member 'UFortAthenaLivingWorldManager::LoadedSpawnerDataClass' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, SpawnedSingleUseSpawnerData) == 0x000310, "Member 'UFortAthenaLivingWorldManager::SpawnedSingleUseSpawnerData' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, LoadedActorDataClass) == 0x000320, "Member 'UFortAthenaLivingWorldManager::LoadedActorDataClass' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, CachedWorld) == 0x000330, "Member 'UFortAthenaLivingWorldManager::CachedWorld' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, CachedConfig) == 0x000338, "Member 'UFortAthenaLivingWorldManager::CachedConfig' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, RunningEncounterInstances) == 0x000340, "Member 'UFortAthenaLivingWorldManager::RunningEncounterInstances' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, CachedSeasonalEventManager) == 0x000350, "Member 'UFortAthenaLivingWorldManager::CachedSeasonalEventManager' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, ActorClassToPreloadOnClient) == 0x000358, "Member 'UFortAthenaLivingWorldManager::ActorClassToPreloadOnClient' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, PlayerTracker) == 0x000368, "Member 'UFortAthenaLivingWorldManager::PlayerTracker' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, RuntimePointProviderList) == 0x000620, "Member 'UFortAthenaLivingWorldManager::RuntimePointProviderList' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, RuntimePointProviderOwners) == 0x000630, "Member 'UFortAthenaLivingWorldManager::RuntimePointProviderOwners' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, SpawnActionCache) == 0x000878, "Member 'UFortAthenaLivingWorldManager::SpawnActionCache' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, EQSHelper) == 0x0008C8, "Member 'UFortAthenaLivingWorldManager::EQSHelper' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldManager, DebugDensityMinimapIndicator) == 0x0008D0, "Member 'UFortAthenaLivingWorldManager::DebugDensityMinimapIndicator' has a wrong offset!");

// Class LagerRuntime.FortAthenaLinearEncounterAnalyticComponent
// 0x0058 (0x00F8 - 0x00A0)
class UFortAthenaLinearEncounterAnalyticComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x58];                                      // 0x00A0(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAttackerSpawned(class AActor* SpawnedAttacker);
	void OnDefenderDamaged(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void OnDefenderDidDamage(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void OnDefenderDied(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void OnDefenderSpawned(class AActor* SpawnedDefender);
	void OnEncounterEnd();
	void OnEncounterStart(class UFortAthenaLivingWorldEncounterInstance* InAttackerEncounter, class UFortAthenaLivingWorldEncounterInstance* InDefenderEncounter);
	void OnStageCompleted(const TArray<class AFortPickup*>& SpawnedRewards);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLinearEncounterAnalyticComponent">();
	}
	static class UFortAthenaLinearEncounterAnalyticComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaLinearEncounterAnalyticComponent>();
	}
};
static_assert(alignof(UFortAthenaLinearEncounterAnalyticComponent) == 0x000008, "Wrong alignment on UFortAthenaLinearEncounterAnalyticComponent");
static_assert(sizeof(UFortAthenaLinearEncounterAnalyticComponent) == 0x0000F8, "Wrong size on UFortAthenaLinearEncounterAnalyticComponent");

// Class LagerRuntime.FortAthenaLivingWorldPointProviderInterface
// 0x0000 (0x0028 - 0x0028)
class IFortAthenaLivingWorldPointProviderInterface final : public IInterface
{
public:
	void DisablePointProvider();
	void EnablePointProvider();
	struct FVector GetPointProviderLocation();
	void OnEventRequested();
	void OnSpawnedActor(class AActor* SpawnedActor, const struct FVector& PositionFromProvider);
	void OnSpawnedActorDestroyed(class AActor* DestroyedActor);
	void OnSpawnedActorFailed();

	void GetFiltersTags(struct FGameplayTagContainer* FilterTags) const;
	bool GetValidLocation(const struct FFortAthenaLivingWorldPointProviderFilterRules& PointFilter, struct FVector* OutPosition, struct FRotator* OutRotation) const;
	bool IsEnabled(const struct FFortAthenaLivingWorldPointProviderFilterRules& PointFilter) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldPointProviderInterface">();
	}
	static class IFortAthenaLivingWorldPointProviderInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFortAthenaLivingWorldPointProviderInterface>();
	}
};
static_assert(alignof(IFortAthenaLivingWorldPointProviderInterface) == 0x000008, "Wrong alignment on IFortAthenaLivingWorldPointProviderInterface");
static_assert(sizeof(IFortAthenaLivingWorldPointProviderInterface) == 0x000028, "Wrong size on IFortAthenaLivingWorldPointProviderInterface");

// Class LagerRuntime.FortAthenaLivingWorldConfigData
// 0x01F0 (0x0220 - 0x0030)
class UFortAthenaLivingWorldConfigData final : public UDataAsset
{
public:
	TSoftObjectPtr<class UDataTable>              CategoryTable;                                     // 0x0030(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MaxActorCount;                                     // 0x0058(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MaxEventSpawnPerTick;                              // 0x0080(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MaxActorDespawnPerTick;                            // 0x00A8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MinimumEventGenerationInterval;                    // 0x00D0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MaxActorDensity;                                   // 0x00F8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MaxActorUpdatesPerTick;                            // 0x0120(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         ActorDensityGridCellSize;                          // 0x0148(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         PointClusterSize;                                  // 0x0170(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MinNumberOfPlayerForAggressiveSpawning;            // 0x0198(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TArray<struct FFortAthenaLivingWorldTagDensityGridData> TagDensityGridData;                                // 0x01C0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FGameplayTagQuery                      SingleUseSpawnerDataQuery;                         // 0x01D0(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TSubclassOf<class AActor>                     EQSActorHelperClass;                               // 0x0218(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldConfigData">();
	}
	static class UFortAthenaLivingWorldConfigData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaLivingWorldConfigData>();
	}
};
static_assert(alignof(UFortAthenaLivingWorldConfigData) == 0x000008, "Wrong alignment on UFortAthenaLivingWorldConfigData");
static_assert(sizeof(UFortAthenaLivingWorldConfigData) == 0x000220, "Wrong size on UFortAthenaLivingWorldConfigData");
static_assert(offsetof(UFortAthenaLivingWorldConfigData, CategoryTable) == 0x000030, "Member 'UFortAthenaLivingWorldConfigData::CategoryTable' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldConfigData, MaxActorCount) == 0x000058, "Member 'UFortAthenaLivingWorldConfigData::MaxActorCount' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldConfigData, MaxEventSpawnPerTick) == 0x000080, "Member 'UFortAthenaLivingWorldConfigData::MaxEventSpawnPerTick' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldConfigData, MaxActorDespawnPerTick) == 0x0000A8, "Member 'UFortAthenaLivingWorldConfigData::MaxActorDespawnPerTick' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldConfigData, MinimumEventGenerationInterval) == 0x0000D0, "Member 'UFortAthenaLivingWorldConfigData::MinimumEventGenerationInterval' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldConfigData, MaxActorDensity) == 0x0000F8, "Member 'UFortAthenaLivingWorldConfigData::MaxActorDensity' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldConfigData, MaxActorUpdatesPerTick) == 0x000120, "Member 'UFortAthenaLivingWorldConfigData::MaxActorUpdatesPerTick' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldConfigData, ActorDensityGridCellSize) == 0x000148, "Member 'UFortAthenaLivingWorldConfigData::ActorDensityGridCellSize' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldConfigData, PointClusterSize) == 0x000170, "Member 'UFortAthenaLivingWorldConfigData::PointClusterSize' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldConfigData, MinNumberOfPlayerForAggressiveSpawning) == 0x000198, "Member 'UFortAthenaLivingWorldConfigData::MinNumberOfPlayerForAggressiveSpawning' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldConfigData, TagDensityGridData) == 0x0001C0, "Member 'UFortAthenaLivingWorldConfigData::TagDensityGridData' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldConfigData, SingleUseSpawnerDataQuery) == 0x0001D0, "Member 'UFortAthenaLivingWorldConfigData::SingleUseSpawnerDataQuery' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldConfigData, EQSActorHelperClass) == 0x000218, "Member 'UFortAthenaLivingWorldConfigData::EQSActorHelperClass' has a wrong offset!");

// Class LagerRuntime.FortAthenaLivingWorldDebugDensityMiniMapIndicator
// 0x0050 (0x0188 - 0x0138)
class UFortAthenaLivingWorldDebugDensityMiniMapIndicator final : public UFortMiniMapIndicator
{
public:
	TArray<struct FFortAthenaActorDensityDebugInfo> ActorDebugInfos;                                   // 0x0138(0x0010)(Net, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 DensityGridValues;                                 // 0x0148(0x0010)(Net, ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FVector                                GridOrigin;                                        // 0x0158(0x0018)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FIntVector                             MaxGridSize;                                       // 0x0170(0x000C)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CellSize;                                          // 0x017C(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxDensity;                                        // 0x0180(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldDebugDensityMiniMapIndicator">();
	}
	static class UFortAthenaLivingWorldDebugDensityMiniMapIndicator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaLivingWorldDebugDensityMiniMapIndicator>();
	}
};
static_assert(alignof(UFortAthenaLivingWorldDebugDensityMiniMapIndicator) == 0x000008, "Wrong alignment on UFortAthenaLivingWorldDebugDensityMiniMapIndicator");
static_assert(sizeof(UFortAthenaLivingWorldDebugDensityMiniMapIndicator) == 0x000188, "Wrong size on UFortAthenaLivingWorldDebugDensityMiniMapIndicator");
static_assert(offsetof(UFortAthenaLivingWorldDebugDensityMiniMapIndicator, ActorDebugInfos) == 0x000138, "Member 'UFortAthenaLivingWorldDebugDensityMiniMapIndicator::ActorDebugInfos' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldDebugDensityMiniMapIndicator, DensityGridValues) == 0x000148, "Member 'UFortAthenaLivingWorldDebugDensityMiniMapIndicator::DensityGridValues' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldDebugDensityMiniMapIndicator, GridOrigin) == 0x000158, "Member 'UFortAthenaLivingWorldDebugDensityMiniMapIndicator::GridOrigin' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldDebugDensityMiniMapIndicator, MaxGridSize) == 0x000170, "Member 'UFortAthenaLivingWorldDebugDensityMiniMapIndicator::MaxGridSize' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldDebugDensityMiniMapIndicator, CellSize) == 0x00017C, "Member 'UFortAthenaLivingWorldDebugDensityMiniMapIndicator::CellSize' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldDebugDensityMiniMapIndicator, MaxDensity) == 0x000180, "Member 'UFortAthenaLivingWorldDebugDensityMiniMapIndicator::MaxDensity' has a wrong offset!");

// Class LagerRuntime.FortAthenaLivingWorldEncounter
// 0x0038 (0x0068 - 0x0030)
class UFortAthenaLivingWorldEncounter final : public UDataAsset
{
public:
	struct FScalableFloat                         IntervalBetweenEventGeneration;                    // 0x0030(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TArray<struct FFortAthenaLivingWorldEncounterStage> Stages;                                            // 0x0058(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldEncounter">();
	}
	static class UFortAthenaLivingWorldEncounter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaLivingWorldEncounter>();
	}
};
static_assert(alignof(UFortAthenaLivingWorldEncounter) == 0x000008, "Wrong alignment on UFortAthenaLivingWorldEncounter");
static_assert(sizeof(UFortAthenaLivingWorldEncounter) == 0x000068, "Wrong size on UFortAthenaLivingWorldEncounter");
static_assert(offsetof(UFortAthenaLivingWorldEncounter, IntervalBetweenEventGeneration) == 0x000030, "Member 'UFortAthenaLivingWorldEncounter::IntervalBetweenEventGeneration' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEncounter, Stages) == 0x000058, "Member 'UFortAthenaLivingWorldEncounter::Stages' has a wrong offset!");

// Class LagerRuntime.FortAthenaLivingWorldEncounterInstance
// 0x00D8 (0x0100 - 0x0028)
class UFortAthenaLivingWorldEncounterInstance final : public UObject
{
public:
	TMulticastInlineDelegate<void(class AActor* SpawnedActor)> OnActorSpawned;                                    // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* DestroyedActor)> OnActorDestroyed;                                  // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x50];                                      // 0x0048(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>> OriginalPointProviders;                            // 0x0098(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>> RegisteredPointProviders;                          // 0x00A8(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UFortAthenaLivingWorldEncounter> EncounterDefinition;                               // 0x00B8(0x0028)(Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                 ActorDensityReservoir;                             // 0x00E0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentStageIndex;                                 // 0x00F0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsPaused;                                         // 0x00F8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AdvanceEncounterStage();
	void PauseEncounter();
	void RequestEventGeneration();
	void ResumeEncounter();
	void StartEncounterStage(const int32 StageIndex);

	int32 GetTotalActorCount() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldEncounterInstance">();
	}
	static class UFortAthenaLivingWorldEncounterInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaLivingWorldEncounterInstance>();
	}
};
static_assert(alignof(UFortAthenaLivingWorldEncounterInstance) == 0x000008, "Wrong alignment on UFortAthenaLivingWorldEncounterInstance");
static_assert(sizeof(UFortAthenaLivingWorldEncounterInstance) == 0x000100, "Wrong size on UFortAthenaLivingWorldEncounterInstance");
static_assert(offsetof(UFortAthenaLivingWorldEncounterInstance, OnActorSpawned) == 0x000028, "Member 'UFortAthenaLivingWorldEncounterInstance::OnActorSpawned' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEncounterInstance, OnActorDestroyed) == 0x000038, "Member 'UFortAthenaLivingWorldEncounterInstance::OnActorDestroyed' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEncounterInstance, OriginalPointProviders) == 0x000098, "Member 'UFortAthenaLivingWorldEncounterInstance::OriginalPointProviders' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEncounterInstance, RegisteredPointProviders) == 0x0000A8, "Member 'UFortAthenaLivingWorldEncounterInstance::RegisteredPointProviders' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEncounterInstance, EncounterDefinition) == 0x0000B8, "Member 'UFortAthenaLivingWorldEncounterInstance::EncounterDefinition' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEncounterInstance, ActorDensityReservoir) == 0x0000E0, "Member 'UFortAthenaLivingWorldEncounterInstance::ActorDensityReservoir' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEncounterInstance, CurrentStageIndex) == 0x0000F0, "Member 'UFortAthenaLivingWorldEncounterInstance::CurrentStageIndex' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEncounterInstance, bIsPaused) == 0x0000F8, "Member 'UFortAthenaLivingWorldEncounterInstance::bIsPaused' has a wrong offset!");

// Class LagerRuntime.FortAthenaLivingWorldEventData
// 0x00D8 (0x0108 - 0x0030)
class UFortAthenaLivingWorldEventData final : public UDataAsset
{
public:
	int32                                         TimeOfDayFilters;                                  // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         WaterLevelIndexMin;                                // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         WaterLevelIndexMax;                                // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      ProviderFiltersTagQuery;                           // 0x0040(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TArray<struct FPointProviderFilterEntry>      ProviderFiltersEntries;                            // 0x0088(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TArray<struct FFortAthenaLivingWorldTaggedSpawnActionClass> SpawnActions;                                      // 0x0098(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MinActorCountToSpawn;                              // 0x00A8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MaxActorCountToSpawn;                              // 0x00D0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TArray<struct FFortAthenaLivingWorldEventDataActorSpawnDescription> ActorDescriptions;                                 // 0x00F8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldEventData">();
	}
	static class UFortAthenaLivingWorldEventData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaLivingWorldEventData>();
	}
};
static_assert(alignof(UFortAthenaLivingWorldEventData) == 0x000008, "Wrong alignment on UFortAthenaLivingWorldEventData");
static_assert(sizeof(UFortAthenaLivingWorldEventData) == 0x000108, "Wrong size on UFortAthenaLivingWorldEventData");
static_assert(offsetof(UFortAthenaLivingWorldEventData, TimeOfDayFilters) == 0x000030, "Member 'UFortAthenaLivingWorldEventData::TimeOfDayFilters' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEventData, WaterLevelIndexMin) == 0x000034, "Member 'UFortAthenaLivingWorldEventData::WaterLevelIndexMin' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEventData, WaterLevelIndexMax) == 0x000038, "Member 'UFortAthenaLivingWorldEventData::WaterLevelIndexMax' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEventData, ProviderFiltersTagQuery) == 0x000040, "Member 'UFortAthenaLivingWorldEventData::ProviderFiltersTagQuery' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEventData, ProviderFiltersEntries) == 0x000088, "Member 'UFortAthenaLivingWorldEventData::ProviderFiltersEntries' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEventData, SpawnActions) == 0x000098, "Member 'UFortAthenaLivingWorldEventData::SpawnActions' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEventData, MinActorCountToSpawn) == 0x0000A8, "Member 'UFortAthenaLivingWorldEventData::MinActorCountToSpawn' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEventData, MaxActorCountToSpawn) == 0x0000D0, "Member 'UFortAthenaLivingWorldEventData::MaxActorCountToSpawn' has a wrong offset!");
static_assert(offsetof(UFortAthenaLivingWorldEventData, ActorDescriptions) == 0x0000F8, "Member 'UFortAthenaLivingWorldEventData::ActorDescriptions' has a wrong offset!");

// Class LagerRuntime.FortAthenaLivingWorldPointProvidersEnabler
// 0x00B8 (0x0328 - 0x0270)
class AFortAthenaLivingWorldPointProvidersEnabler : public AActor
{
public:
	TArray<TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>> EnabledLinkedPointProviders;                       // 0x0270(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>> AvailableLinkedPointProviders;                     // 0x0280(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  EnablerTags;                                       // 0x0290(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPrivate)
	TArray<TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>> LinkedPointProviders;                              // 0x02B0(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         PointProvidersToEnable;                            // 0x02C0(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         EvaluateAutomatically;                             // 0x02E8(0x0028)(Edit, NativeAccessSpecifierPrivate)
	uint8                                         Pad_310[0x8];                                      // 0x0310(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(TArray<TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>>& EnabledPointProviders)> OnCompletedEvaluationDelegate;                     // 0x0318(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)

public:
	void EvaluateAndEnablePointProviders();
	void OnCurrentPlaylistLoaded(class FName PlaylistName, const struct FGameplayTagContainer& PlaylistContextTags);
	void RemoveClosestPointProvidersToPoint(const struct FVector& Point, const float MaximumDistance, const int32 PointsToDisable);

	bool DoesStartEnabled() const;
	const TArray<TScriptInterface<class IFortAthenaLivingWorldPointProviderInterface>> GetEnabledLinkedPointProviders() const;
	const struct FGameplayTagContainer GetEnablerTags() const;
	bool HasCompletedEvaluation() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldPointProvidersEnabler">();
	}
	static class AFortAthenaLivingWorldPointProvidersEnabler* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortAthenaLivingWorldPointProvidersEnabler>();
	}
};
static_assert(alignof(AFortAthenaLivingWorldPointProvidersEnabler) == 0x000008, "Wrong alignment on AFortAthenaLivingWorldPointProvidersEnabler");
static_assert(sizeof(AFortAthenaLivingWorldPointProvidersEnabler) == 0x000328, "Wrong size on AFortAthenaLivingWorldPointProvidersEnabler");
static_assert(offsetof(AFortAthenaLivingWorldPointProvidersEnabler, EnabledLinkedPointProviders) == 0x000270, "Member 'AFortAthenaLivingWorldPointProvidersEnabler::EnabledLinkedPointProviders' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldPointProvidersEnabler, AvailableLinkedPointProviders) == 0x000280, "Member 'AFortAthenaLivingWorldPointProvidersEnabler::AvailableLinkedPointProviders' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldPointProvidersEnabler, EnablerTags) == 0x000290, "Member 'AFortAthenaLivingWorldPointProvidersEnabler::EnablerTags' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldPointProvidersEnabler, LinkedPointProviders) == 0x0002B0, "Member 'AFortAthenaLivingWorldPointProvidersEnabler::LinkedPointProviders' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldPointProvidersEnabler, PointProvidersToEnable) == 0x0002C0, "Member 'AFortAthenaLivingWorldPointProvidersEnabler::PointProvidersToEnable' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldPointProvidersEnabler, EvaluateAutomatically) == 0x0002E8, "Member 'AFortAthenaLivingWorldPointProvidersEnabler::EvaluateAutomatically' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldPointProvidersEnabler, OnCompletedEvaluationDelegate) == 0x000318, "Member 'AFortAthenaLivingWorldPointProvidersEnabler::OnCompletedEvaluationDelegate' has a wrong offset!");

// Class LagerRuntime.FortAthenaLivingWorldPointProvidersEnabler_MiniMapDataOverride
// 0x0000 (0x0328 - 0x0328)
class AFortAthenaLivingWorldPointProvidersEnabler_MiniMapDataOverride final : public AFortAthenaLivingWorldPointProvidersEnabler
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldPointProvidersEnabler_MiniMapDataOverride">();
	}
	static class AFortAthenaLivingWorldPointProvidersEnabler_MiniMapDataOverride* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortAthenaLivingWorldPointProvidersEnabler_MiniMapDataOverride>();
	}
};
static_assert(alignof(AFortAthenaLivingWorldPointProvidersEnabler_MiniMapDataOverride) == 0x000008, "Wrong alignment on AFortAthenaLivingWorldPointProvidersEnabler_MiniMapDataOverride");
static_assert(sizeof(AFortAthenaLivingWorldPointProvidersEnabler_MiniMapDataOverride) == 0x000328, "Wrong size on AFortAthenaLivingWorldPointProvidersEnabler_MiniMapDataOverride");

// Class LagerRuntime.FortAthenaLivingWorldSpawnAction
// 0x0000 (0x0028 - 0x0028)
class UFortAthenaLivingWorldSpawnAction : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldSpawnAction">();
	}
	static class UFortAthenaLivingWorldSpawnAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaLivingWorldSpawnAction>();
	}
};
static_assert(alignof(UFortAthenaLivingWorldSpawnAction) == 0x000008, "Wrong alignment on UFortAthenaLivingWorldSpawnAction");
static_assert(sizeof(UFortAthenaLivingWorldSpawnAction) == 0x000028, "Wrong size on UFortAthenaLivingWorldSpawnAction");

// Class LagerRuntime.FortAthenaLivingWorldSpawnActionBlueprint
// 0x0000 (0x0028 - 0x0028)
class UFortAthenaLivingWorldSpawnActionBlueprint final : public UFortAthenaLivingWorldSpawnAction
{
public:
	void K2_OnAllActorSpawned(const TArray<class AActor*>& SpawnedActor) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldSpawnActionBlueprint">();
	}
	static class UFortAthenaLivingWorldSpawnActionBlueprint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaLivingWorldSpawnActionBlueprint>();
	}
};
static_assert(alignof(UFortAthenaLivingWorldSpawnActionBlueprint) == 0x000008, "Wrong alignment on UFortAthenaLivingWorldSpawnActionBlueprint");
static_assert(sizeof(UFortAthenaLivingWorldSpawnActionBlueprint) == 0x000028, "Wrong size on UFortAthenaLivingWorldSpawnActionBlueprint");

// Class LagerRuntime.FortAthenaLivingWorldSpawnAction_AddAIToGroup
// 0x0000 (0x0028 - 0x0028)
class UFortAthenaLivingWorldSpawnAction_AddAIToGroup final : public UFortAthenaLivingWorldSpawnAction
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldSpawnAction_AddAIToGroup">();
	}
	static class UFortAthenaLivingWorldSpawnAction_AddAIToGroup* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaLivingWorldSpawnAction_AddAIToGroup>();
	}
};
static_assert(alignof(UFortAthenaLivingWorldSpawnAction_AddAIToGroup) == 0x000008, "Wrong alignment on UFortAthenaLivingWorldSpawnAction_AddAIToGroup");
static_assert(sizeof(UFortAthenaLivingWorldSpawnAction_AddAIToGroup) == 0x000028, "Wrong size on UFortAthenaLivingWorldSpawnAction_AddAIToGroup");

// Class LagerRuntime.FortAthenaLivingWorldSpawnAction_SeatPawnInVehicle
// 0x0010 (0x0038 - 0x0028)
class UFortAthenaLivingWorldSpawnAction_SeatPawnInVehicle final : public UFortAthenaLivingWorldSpawnAction
{
public:
	TArray<struct FFortAthenaLivingWorldTagQueryToSeatMapping> SeatMappings;                                      // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldSpawnAction_SeatPawnInVehicle">();
	}
	static class UFortAthenaLivingWorldSpawnAction_SeatPawnInVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaLivingWorldSpawnAction_SeatPawnInVehicle>();
	}
};
static_assert(alignof(UFortAthenaLivingWorldSpawnAction_SeatPawnInVehicle) == 0x000008, "Wrong alignment on UFortAthenaLivingWorldSpawnAction_SeatPawnInVehicle");
static_assert(sizeof(UFortAthenaLivingWorldSpawnAction_SeatPawnInVehicle) == 0x000038, "Wrong size on UFortAthenaLivingWorldSpawnAction_SeatPawnInVehicle");
static_assert(offsetof(UFortAthenaLivingWorldSpawnAction_SeatPawnInVehicle, SeatMappings) == 0x000028, "Member 'UFortAthenaLivingWorldSpawnAction_SeatPawnInVehicle::SeatMappings' has a wrong offset!");

// Class LagerRuntime.FortAthenaLivingWorldStaticPointProvider
// 0x0090 (0x0300 - 0x0270)
class AFortAthenaLivingWorldStaticPointProvider final : public AActor
{
public:
	uint8                                         Pad_270[0x8];                                      // 0x0270(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortAthenaLivingWorldPointProviderSpawnLimiter SpawnLimiter;                                      // 0x0278(0x0038)(Edit, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  FiltersTags;                                       // 0x02B0(0x0020)(Edit, NativeAccessSpecifierPrivate)
	TArray<struct FTransform>                     SpawnPoints;                                       // 0x02D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	bool                                          bStartEnabled;                                     // 0x02E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2E1[0x7];                                      // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortGameStateAthena*                   CachedGameState;                                   // 0x02E8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortAthenaLivingWorldManager*          CachedLivingWorldManager;                          // 0x02F0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2F8[0x8];                                      // 0x02F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisablePointProvider();
	void EnablePointProvider();
	void OnCurrentPlaylistLoaded(class FName PlaylistName, const struct FGameplayTagContainer& PlaylistContextTags);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldStaticPointProvider">();
	}
	static class AFortAthenaLivingWorldStaticPointProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortAthenaLivingWorldStaticPointProvider>();
	}
};
static_assert(alignof(AFortAthenaLivingWorldStaticPointProvider) == 0x000008, "Wrong alignment on AFortAthenaLivingWorldStaticPointProvider");
static_assert(sizeof(AFortAthenaLivingWorldStaticPointProvider) == 0x000300, "Wrong size on AFortAthenaLivingWorldStaticPointProvider");
static_assert(offsetof(AFortAthenaLivingWorldStaticPointProvider, SpawnLimiter) == 0x000278, "Member 'AFortAthenaLivingWorldStaticPointProvider::SpawnLimiter' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldStaticPointProvider, FiltersTags) == 0x0002B0, "Member 'AFortAthenaLivingWorldStaticPointProvider::FiltersTags' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldStaticPointProvider, SpawnPoints) == 0x0002D0, "Member 'AFortAthenaLivingWorldStaticPointProvider::SpawnPoints' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldStaticPointProvider, bStartEnabled) == 0x0002E0, "Member 'AFortAthenaLivingWorldStaticPointProvider::bStartEnabled' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldStaticPointProvider, CachedGameState) == 0x0002E8, "Member 'AFortAthenaLivingWorldStaticPointProvider::CachedGameState' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldStaticPointProvider, CachedLivingWorldManager) == 0x0002F0, "Member 'AFortAthenaLivingWorldStaticPointProvider::CachedLivingWorldManager' has a wrong offset!");

// Class LagerRuntime.FortAthenaLivingWorldVolume
// 0x0288 (0x0530 - 0x02A8)
class AFortAthenaLivingWorldVolume final : public AVolume
{
public:
	uint8                                         Pad_2A8[0x8];                                      // 0x02A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bStartEnabled;                                     // 0x02B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2B1[0x7];                                      // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  FiltersTags;                                       // 0x02B8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPrivate)
	class UEnvQuery*                              EnvironmentQuery;                                  // 0x02D8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FAIDynamicParam>                QueryConfig;                                       // 0x02E0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	bool                                          bRemoveUsedPoint;                                  // 0x02F0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bRemoveUsedPointPermenantly;                       // 0x02F1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2F2[0x6];                                      // 0x02F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortAthenaLivingWorldPointProviderSpawnLimiter SpawnLimiter;                                      // 0x02F8(0x0038)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         EQSRefreshInterval;                                // 0x0330(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         WaterLevelIndexMin;                                // 0x0358(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         WaterLevelIndexMax;                                // 0x0380(0x0028)(Edit, NativeAccessSpecifierPrivate)
	class AFortGameStateAthena*                   CachedGameState;                                   // 0x03A8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(class AActor* SpawnedActor, bool bResult)> OnActorSpawnedResult;                              // 0x03B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(class AFortAthenaLivingWorldVolume* PointProviderVolume)> OnPointProviderRegistered;                         // 0x03C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	class UFortAthenaLivingWorldManager*          CachedLivingWorldManager;                          // 0x03D0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3D8[0x158];                                    // 0x03D8(0x0158)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisablePointProvider();
	void EnablePointProvider();
	void OnCurrentPlaylistLoaded(class FName PlaylistName, const struct FGameplayTagContainer& PlaylistContextTags);
	void OnWorldFinishedInitialization(const struct FGameplayTagContainer& ContextTags);
	void ResetSpawnRotation();
	void RunEQS();
	void SetEQSQuery(class UEnvQuery* Query);
	void SetEQSQueryConfigParam(const class FName ParameterName, float Value);
	void SetFiltersTags(const struct FGameplayTagContainer& TagContainer);
	void SetSpawnRotation(const struct FRotator& Rotation);

	bool DoesStartEnabled() const;
	bool IsPointProviderEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaLivingWorldVolume">();
	}
	static class AFortAthenaLivingWorldVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortAthenaLivingWorldVolume>();
	}
};
static_assert(alignof(AFortAthenaLivingWorldVolume) == 0x000008, "Wrong alignment on AFortAthenaLivingWorldVolume");
static_assert(sizeof(AFortAthenaLivingWorldVolume) == 0x000530, "Wrong size on AFortAthenaLivingWorldVolume");
static_assert(offsetof(AFortAthenaLivingWorldVolume, bStartEnabled) == 0x0002B0, "Member 'AFortAthenaLivingWorldVolume::bStartEnabled' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldVolume, FiltersTags) == 0x0002B8, "Member 'AFortAthenaLivingWorldVolume::FiltersTags' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldVolume, EnvironmentQuery) == 0x0002D8, "Member 'AFortAthenaLivingWorldVolume::EnvironmentQuery' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldVolume, QueryConfig) == 0x0002E0, "Member 'AFortAthenaLivingWorldVolume::QueryConfig' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldVolume, bRemoveUsedPoint) == 0x0002F0, "Member 'AFortAthenaLivingWorldVolume::bRemoveUsedPoint' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldVolume, bRemoveUsedPointPermenantly) == 0x0002F1, "Member 'AFortAthenaLivingWorldVolume::bRemoveUsedPointPermenantly' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldVolume, SpawnLimiter) == 0x0002F8, "Member 'AFortAthenaLivingWorldVolume::SpawnLimiter' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldVolume, EQSRefreshInterval) == 0x000330, "Member 'AFortAthenaLivingWorldVolume::EQSRefreshInterval' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldVolume, WaterLevelIndexMin) == 0x000358, "Member 'AFortAthenaLivingWorldVolume::WaterLevelIndexMin' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldVolume, WaterLevelIndexMax) == 0x000380, "Member 'AFortAthenaLivingWorldVolume::WaterLevelIndexMax' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldVolume, CachedGameState) == 0x0003A8, "Member 'AFortAthenaLivingWorldVolume::CachedGameState' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldVolume, OnActorSpawnedResult) == 0x0003B0, "Member 'AFortAthenaLivingWorldVolume::OnActorSpawnedResult' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldVolume, OnPointProviderRegistered) == 0x0003C0, "Member 'AFortAthenaLivingWorldVolume::OnPointProviderRegistered' has a wrong offset!");
static_assert(offsetof(AFortAthenaLivingWorldVolume, CachedLivingWorldManager) == 0x0003D0, "Member 'AFortAthenaLivingWorldVolume::CachedLivingWorldManager' has a wrong offset!");

// Class LagerRuntime.FortAthenaPatrolPathPointProvider
// 0x00A0 (0x0310 - 0x0270)
class AFortAthenaPatrolPathPointProvider final : public AActor
{
public:
	uint8                                         Pad_270[0x8];                                      // 0x0270(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  FiltersTags;                                       // 0x0278(0x0020)(Edit, NativeAccessSpecifierPrivate)
	class AFortAthenaPatrolPath*                  AssociatedPatrolPath;                              // 0x0298(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bStartEnabled : 1;                                 // 0x02A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bSpawnOnPatrolPath : 1;                            // 0x02A0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bAlignOrientationToPath : 1;                       // 0x02A0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortAthenaLivingWorldPointProviderSpawnLimiter SpawnLimiter;                                      // 0x02A8(0x0038)(Edit, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(class AActor* SpawnedActor, bool bResult)> OnActorSpawnedResult;                              // 0x02E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class AFortAthenaPatrolPath>   RuntimePatrolPathWeakPtr;                          // 0x02F0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AFortGameStateAthena*                   CachedGameState;                                   // 0x02F8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortAthenaLivingWorldManager*          CachedLivingWorldManager;                          // 0x0300(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_308[0x8];                                      // 0x0308(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisablePointProvider();
	void EnablePointProvider();
	void OnCurrentPlaylistLoaded(class FName PlaylistName, const struct FGameplayTagContainer& PlaylistContextTags);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaPatrolPathPointProvider">();
	}
	static class AFortAthenaPatrolPathPointProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortAthenaPatrolPathPointProvider>();
	}
};
static_assert(alignof(AFortAthenaPatrolPathPointProvider) == 0x000008, "Wrong alignment on AFortAthenaPatrolPathPointProvider");
static_assert(sizeof(AFortAthenaPatrolPathPointProvider) == 0x000310, "Wrong size on AFortAthenaPatrolPathPointProvider");
static_assert(offsetof(AFortAthenaPatrolPathPointProvider, FiltersTags) == 0x000278, "Member 'AFortAthenaPatrolPathPointProvider::FiltersTags' has a wrong offset!");
static_assert(offsetof(AFortAthenaPatrolPathPointProvider, AssociatedPatrolPath) == 0x000298, "Member 'AFortAthenaPatrolPathPointProvider::AssociatedPatrolPath' has a wrong offset!");
static_assert(offsetof(AFortAthenaPatrolPathPointProvider, SpawnLimiter) == 0x0002A8, "Member 'AFortAthenaPatrolPathPointProvider::SpawnLimiter' has a wrong offset!");
static_assert(offsetof(AFortAthenaPatrolPathPointProvider, OnActorSpawnedResult) == 0x0002E0, "Member 'AFortAthenaPatrolPathPointProvider::OnActorSpawnedResult' has a wrong offset!");
static_assert(offsetof(AFortAthenaPatrolPathPointProvider, RuntimePatrolPathWeakPtr) == 0x0002F0, "Member 'AFortAthenaPatrolPathPointProvider::RuntimePatrolPathWeakPtr' has a wrong offset!");
static_assert(offsetof(AFortAthenaPatrolPathPointProvider, CachedGameState) == 0x0002F8, "Member 'AFortAthenaPatrolPathPointProvider::CachedGameState' has a wrong offset!");
static_assert(offsetof(AFortAthenaPatrolPathPointProvider, CachedLivingWorldManager) == 0x000300, "Member 'AFortAthenaPatrolPathPointProvider::CachedLivingWorldManager' has a wrong offset!");

// Class LagerRuntime.FortAthenaPointAroundPlayerProvider
// 0x0088 (0x02F8 - 0x0270)
class AFortAthenaPointAroundPlayerProvider final : public AActor
{
public:
	uint8                                         Pad_270[0x8];                                      // 0x0270(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  FiltersTags;                                       // 0x0278(0x0020)(Edit, NativeAccessSpecifierPrivate)
	class UEnvQuery*                              QueryTemplate;                                     // 0x0298(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EEnvQueryRunMode                              RunMode;                                           // 0x02A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bStartEnabled : 1;                                 // 0x02A1(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bGenerateAroundPlayerBots : 1;                     // 0x02A1(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_2A2[0x2];                                      // 0x02A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           IgnorePlayerWithTag;                               // 0x02A4(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFortAthenaLivingWorldPointProviderSpawnLimiter SpawnLimiter;                                      // 0x02A8(0x0038)(Edit, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(class AActor* SpawnedActor, bool bResult)> OnActorSpawnedResult;                              // 0x02E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	class AFortGameStateAthena*                   CachedGameState;                                   // 0x02F0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void DisablePointProvider();
	void EnablePointProvider();
	void OnCurrentPlaylistLoaded(class FName PlaylistName, const struct FGameplayTagContainer& PlaylistContextTags);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaPointAroundPlayerProvider">();
	}
	static class AFortAthenaPointAroundPlayerProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortAthenaPointAroundPlayerProvider>();
	}
};
static_assert(alignof(AFortAthenaPointAroundPlayerProvider) == 0x000008, "Wrong alignment on AFortAthenaPointAroundPlayerProvider");
static_assert(sizeof(AFortAthenaPointAroundPlayerProvider) == 0x0002F8, "Wrong size on AFortAthenaPointAroundPlayerProvider");
static_assert(offsetof(AFortAthenaPointAroundPlayerProvider, FiltersTags) == 0x000278, "Member 'AFortAthenaPointAroundPlayerProvider::FiltersTags' has a wrong offset!");
static_assert(offsetof(AFortAthenaPointAroundPlayerProvider, QueryTemplate) == 0x000298, "Member 'AFortAthenaPointAroundPlayerProvider::QueryTemplate' has a wrong offset!");
static_assert(offsetof(AFortAthenaPointAroundPlayerProvider, RunMode) == 0x0002A0, "Member 'AFortAthenaPointAroundPlayerProvider::RunMode' has a wrong offset!");
static_assert(offsetof(AFortAthenaPointAroundPlayerProvider, IgnorePlayerWithTag) == 0x0002A4, "Member 'AFortAthenaPointAroundPlayerProvider::IgnorePlayerWithTag' has a wrong offset!");
static_assert(offsetof(AFortAthenaPointAroundPlayerProvider, SpawnLimiter) == 0x0002A8, "Member 'AFortAthenaPointAroundPlayerProvider::SpawnLimiter' has a wrong offset!");
static_assert(offsetof(AFortAthenaPointAroundPlayerProvider, OnActorSpawnedResult) == 0x0002E0, "Member 'AFortAthenaPointAroundPlayerProvider::OnActorSpawnedResult' has a wrong offset!");
static_assert(offsetof(AFortAthenaPointAroundPlayerProvider, CachedGameState) == 0x0002F0, "Member 'AFortAthenaPointAroundPlayerProvider::CachedGameState' has a wrong offset!");

// Class LagerRuntime.FortCheatManager_LivingWorldManager
// 0x0018 (0x0040 - 0x0028)
class UFortCheatManager_LivingWorldManager final : public UChildCheatManager
{
public:
	int32                                         CheatTeleportToCount;                              // 0x0028(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CheatLastEventDataName;                            // 0x0030(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void LivingWorldManagerSpawn(const class FString& EventDataName);
	void LivingWorldManagerSpawnAtLocation(const class FString& EventDataName, const struct FVector& Location, const struct FRotator& Rotation);
	void LivingWorldManagerSpawnEvent(const class FString& EventDataName);
	void LivingWorldManagerTeleportTo(const class FString& EventDataName);
	void LivingWorldManagerTeleportToSpawnPosition(const class FString& EventDataName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCheatManager_LivingWorldManager">();
	}
	static class UFortCheatManager_LivingWorldManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCheatManager_LivingWorldManager>();
	}
};
static_assert(alignof(UFortCheatManager_LivingWorldManager) == 0x000008, "Wrong alignment on UFortCheatManager_LivingWorldManager");
static_assert(sizeof(UFortCheatManager_LivingWorldManager) == 0x000040, "Wrong size on UFortCheatManager_LivingWorldManager");
static_assert(offsetof(UFortCheatManager_LivingWorldManager, CheatTeleportToCount) == 0x000028, "Member 'UFortCheatManager_LivingWorldManager::CheatTeleportToCount' has a wrong offset!");
static_assert(offsetof(UFortCheatManager_LivingWorldManager, CheatLastEventDataName) == 0x000030, "Member 'UFortCheatManager_LivingWorldManager::CheatLastEventDataName' has a wrong offset!");

// Class LagerRuntime.FortGameFeatureAction_AddLagerConfig
// 0x0010 (0x0038 - 0x0028)
class UFortGameFeatureAction_AddLagerConfig final : public UGameFeatureAction
{
public:
	TArray<struct FFortLivingWorldConfigOverride> LagerConfigOverrides;                              // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGameFeatureAction_AddLagerConfig">();
	}
	static class UFortGameFeatureAction_AddLagerConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGameFeatureAction_AddLagerConfig>();
	}
};
static_assert(alignof(UFortGameFeatureAction_AddLagerConfig) == 0x000008, "Wrong alignment on UFortGameFeatureAction_AddLagerConfig");
static_assert(sizeof(UFortGameFeatureAction_AddLagerConfig) == 0x000038, "Wrong size on UFortGameFeatureAction_AddLagerConfig");
static_assert(offsetof(UFortGameFeatureAction_AddLagerConfig, LagerConfigOverrides) == 0x000028, "Member 'UFortGameFeatureAction_AddLagerConfig::LagerConfigOverrides' has a wrong offset!");

}

