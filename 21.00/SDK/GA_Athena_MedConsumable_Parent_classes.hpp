#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Athena_MedConsumable_Parent

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Athena_MedConsumable_Parent.GA_Athena_MedConsumable_Parent_C
// 0x01E8 (0x0CF8 - 0x0B10)
class UGA_Athena_MedConsumable_Parent_C : public UFortGameplayAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0B10(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0B18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HealsHealth;                                       // 0x0B20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasHealthCap;                                      // 0x0B21(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B22[0x2];                                      // 0x0B22(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HealthHealAmount;                                  // 0x0B24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TriggerDuration;                                   // 0x0B28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldHolster;                                     // 0x0B2C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B2D[0x3];                                      // 0x0B2D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ItemIDToHolster;                                   // 0x0B30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B34[0x4];                                      // 0x0B34(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 GE_EffectToApply;                                  // 0x0B38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HealsShields;                                      // 0x0B40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasShieldCap;                                      // 0x0B41(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B42[0x2];                                      // 0x0B42(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShieldHealAmount;                                  // 0x0B44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         Row_ShieldCap;                                     // 0x0B48(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_ShieldAmount;                                  // 0x0B70(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           GC_PotionConsumed;                                 // 0x0B98(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9C[0x4];                                      // 0x0B9C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Row_HealthCap;                                     // 0x0BA0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_HealthAmount;                                  // 0x0BC8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  Tags_FailedResponse;                               // 0x0BF0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IgnoreCalcsForEffectApplication;                   // 0x0C10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AlwaysActivate;                                    // 0x0C11(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C12[0x2];                                      // 0x0C12(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           GC_EquippingCue;                                   // 0x0C14(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         OverHealing;                                       // 0x0C18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HealthIsEffective;                                 // 0x0C1C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1D[0x3];                                      // 0x0C1D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UForceFeedbackEffect*                   ForceFeedback;                                     // 0x0C20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_HealthHealUsed;                                 // 0x0C28(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C2C[0x4];                                      // 0x0C2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 GE_Channeling;                                     // 0x0C30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            GEH_Channeling;                                    // 0x0C38(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  QuestTags;                                         // 0x0C40(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FGameplayTagContainer                  QuestWeaponTags;                                   // 0x0C60(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  QuestSourceTags;                                   // 0x0C80(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          EndAbilityWhenTriggered;                           // 0x0CA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CA1[0x3];                                      // 0x0CA1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffectHandle            Handle_AppliedGE;                                  // 0x0CA4(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	EFortAbilityTargetDataPolicy                  MontageTargetDataPolicy;                           // 0x0CAC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CAD[0x3];                                      // 0x0CAD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  Tags_UseNullFailedActivateReason;                  // 0x0CB0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Wildlife_Pct_Heal_Amount;                          // 0x0CD0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void Cancelled_4C02BFB04B18D9E79F84848FFE6D2C32(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Completed_4C02BFB04B18D9E79F84848FFE6D2C32(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void ExecuteUbergraph_GA_Athena_MedConsumable_Parent(int32 EntryPoint);
	void HealthCalc();
	void K2_ActivateAbility();
	void K2_OnEndAbility(bool bWasCancelled);
	void K2_OverrideFailedReason(const struct FGameplayTagContainer& FailedReason, struct FGameplayTagContainer* OverridenFailedReason);
	void MakeCustomMontageInfo();
	void OnMontageTriggeredPostCommitSuccess();
	void OnMontageTriggeredPreCommit();
	void SetupGE(struct FGameplayEffectSpecHandle* Effect_Out);
	void ShieldCalc();
	void Triggered_4C02BFB04B18D9E79F84848FFE6D2C32(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);

	bool K2_CanActivateAbility(const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayAbilitySpecHandle& Handle, struct FGameplayTagContainer* RelevantTags) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Athena_MedConsumable_Parent_C">();
	}
	static class UGA_Athena_MedConsumable_Parent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Athena_MedConsumable_Parent_C>();
	}
};
static_assert(alignof(UGA_Athena_MedConsumable_Parent_C) == 0x000008, "Wrong alignment on UGA_Athena_MedConsumable_Parent_C");
static_assert(sizeof(UGA_Athena_MedConsumable_Parent_C) == 0x000CF8, "Wrong size on UGA_Athena_MedConsumable_Parent_C");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, UberGraphFrame) == 0x000B10, "Member 'UGA_Athena_MedConsumable_Parent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, PlayerPawn) == 0x000B18, "Member 'UGA_Athena_MedConsumable_Parent_C::PlayerPawn' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, HealsHealth) == 0x000B20, "Member 'UGA_Athena_MedConsumable_Parent_C::HealsHealth' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, HasHealthCap) == 0x000B21, "Member 'UGA_Athena_MedConsumable_Parent_C::HasHealthCap' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, HealthHealAmount) == 0x000B24, "Member 'UGA_Athena_MedConsumable_Parent_C::HealthHealAmount' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, TriggerDuration) == 0x000B28, "Member 'UGA_Athena_MedConsumable_Parent_C::TriggerDuration' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, ShouldHolster) == 0x000B2C, "Member 'UGA_Athena_MedConsumable_Parent_C::ShouldHolster' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, ItemIDToHolster) == 0x000B30, "Member 'UGA_Athena_MedConsumable_Parent_C::ItemIDToHolster' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, GE_EffectToApply) == 0x000B38, "Member 'UGA_Athena_MedConsumable_Parent_C::GE_EffectToApply' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, HealsShields) == 0x000B40, "Member 'UGA_Athena_MedConsumable_Parent_C::HealsShields' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, HasShieldCap) == 0x000B41, "Member 'UGA_Athena_MedConsumable_Parent_C::HasShieldCap' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, ShieldHealAmount) == 0x000B44, "Member 'UGA_Athena_MedConsumable_Parent_C::ShieldHealAmount' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, Row_ShieldCap) == 0x000B48, "Member 'UGA_Athena_MedConsumable_Parent_C::Row_ShieldCap' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, Row_ShieldAmount) == 0x000B70, "Member 'UGA_Athena_MedConsumable_Parent_C::Row_ShieldAmount' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, GC_PotionConsumed) == 0x000B98, "Member 'UGA_Athena_MedConsumable_Parent_C::GC_PotionConsumed' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, Row_HealthCap) == 0x000BA0, "Member 'UGA_Athena_MedConsumable_Parent_C::Row_HealthCap' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, Row_HealthAmount) == 0x000BC8, "Member 'UGA_Athena_MedConsumable_Parent_C::Row_HealthAmount' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, Tags_FailedResponse) == 0x000BF0, "Member 'UGA_Athena_MedConsumable_Parent_C::Tags_FailedResponse' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, IgnoreCalcsForEffectApplication) == 0x000C10, "Member 'UGA_Athena_MedConsumable_Parent_C::IgnoreCalcsForEffectApplication' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, AlwaysActivate) == 0x000C11, "Member 'UGA_Athena_MedConsumable_Parent_C::AlwaysActivate' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, GC_EquippingCue) == 0x000C14, "Member 'UGA_Athena_MedConsumable_Parent_C::GC_EquippingCue' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, OverHealing) == 0x000C18, "Member 'UGA_Athena_MedConsumable_Parent_C::OverHealing' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, HealthIsEffective) == 0x000C1C, "Member 'UGA_Athena_MedConsumable_Parent_C::HealthIsEffective' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, ForceFeedback) == 0x000C20, "Member 'UGA_Athena_MedConsumable_Parent_C::ForceFeedback' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, GC_HealthHealUsed) == 0x000C28, "Member 'UGA_Athena_MedConsumable_Parent_C::GC_HealthHealUsed' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, GE_Channeling) == 0x000C30, "Member 'UGA_Athena_MedConsumable_Parent_C::GE_Channeling' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, GEH_Channeling) == 0x000C38, "Member 'UGA_Athena_MedConsumable_Parent_C::GEH_Channeling' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, QuestTags) == 0x000C40, "Member 'UGA_Athena_MedConsumable_Parent_C::QuestTags' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, QuestWeaponTags) == 0x000C60, "Member 'UGA_Athena_MedConsumable_Parent_C::QuestWeaponTags' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, QuestSourceTags) == 0x000C80, "Member 'UGA_Athena_MedConsumable_Parent_C::QuestSourceTags' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, EndAbilityWhenTriggered) == 0x000CA0, "Member 'UGA_Athena_MedConsumable_Parent_C::EndAbilityWhenTriggered' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, Handle_AppliedGE) == 0x000CA4, "Member 'UGA_Athena_MedConsumable_Parent_C::Handle_AppliedGE' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, MontageTargetDataPolicy) == 0x000CAC, "Member 'UGA_Athena_MedConsumable_Parent_C::MontageTargetDataPolicy' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, Tags_UseNullFailedActivateReason) == 0x000CB0, "Member 'UGA_Athena_MedConsumable_Parent_C::Tags_UseNullFailedActivateReason' has a wrong offset!");
static_assert(offsetof(UGA_Athena_MedConsumable_Parent_C, Wildlife_Pct_Heal_Amount) == 0x000CD0, "Member 'UGA_Athena_MedConsumable_Parent_C::Wildlife_Pct_Heal_Amount' has a wrong offset!");

}

