#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FN_RadialForce

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FieldSystemEngine_classes.hpp"
#include "Chaos_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass FN_RadialForce.FN_RadialForce_C
// 0x0088 (0x0300 - 0x0278)
class AFN_RadialForce_C final : public AFieldSystemActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0278(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UOperatorField*                         DistanceFadMult;                                   // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URadialFalloff*                         DistanceFalloff;                                   // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWaveScalar*                            DecayScalar;                                       // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UOperatorField*                         DecayMult;                                         // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWaveScalar*                            RadialFalloffWave;                                 // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UOperatorField*                         RadialVecMultiplyRadialFallOff;                    // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URadialVector*                          RadialVector;                                      // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_Radius_CD3BE591473F9A800DF08A8AC8690190; // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_CD3BE591473F9A800DF08A8AC8690190; // 0x02BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BD[0x3];                                      // 0x02BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Wave_Period;                                       // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Force_Duration;                                    // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Magnitude;                                         // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayRate;                                          // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Impact_Time;                                       // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Period;                                            // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaveLength;                                        // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time_Decay;                                        // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	EFieldFalloffType                             Falloff_Type;                                      // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F1[0x3];                                      // 0x02F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Expansion;                                         // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Impact_Radius;                                     // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         Strength;                                          // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_FN_RadialForce(int32 EntryPoint);
	struct FTransform NewFunction_0(float Roll, float Scale_0);
	void ReceiveBeginPlay();
	void Timeline_0__FinishedFunc();
	void Timeline_0__UpdateFunc();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"FN_RadialForce_C">();
	}
	static class AFN_RadialForce_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFN_RadialForce_C>();
	}
};
static_assert(alignof(AFN_RadialForce_C) == 0x000008, "Wrong alignment on AFN_RadialForce_C");
static_assert(sizeof(AFN_RadialForce_C) == 0x000300, "Wrong size on AFN_RadialForce_C");
static_assert(offsetof(AFN_RadialForce_C, UberGraphFrame) == 0x000278, "Member 'AFN_RadialForce_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AFN_RadialForce_C, DistanceFadMult) == 0x000280, "Member 'AFN_RadialForce_C::DistanceFadMult' has a wrong offset!");
static_assert(offsetof(AFN_RadialForce_C, DistanceFalloff) == 0x000288, "Member 'AFN_RadialForce_C::DistanceFalloff' has a wrong offset!");
static_assert(offsetof(AFN_RadialForce_C, DecayScalar) == 0x000290, "Member 'AFN_RadialForce_C::DecayScalar' has a wrong offset!");
static_assert(offsetof(AFN_RadialForce_C, DecayMult) == 0x000298, "Member 'AFN_RadialForce_C::DecayMult' has a wrong offset!");
static_assert(offsetof(AFN_RadialForce_C, RadialFalloffWave) == 0x0002A0, "Member 'AFN_RadialForce_C::RadialFalloffWave' has a wrong offset!");
static_assert(offsetof(AFN_RadialForce_C, RadialVecMultiplyRadialFallOff) == 0x0002A8, "Member 'AFN_RadialForce_C::RadialVecMultiplyRadialFallOff' has a wrong offset!");
static_assert(offsetof(AFN_RadialForce_C, RadialVector) == 0x0002B0, "Member 'AFN_RadialForce_C::RadialVector' has a wrong offset!");
static_assert(offsetof(AFN_RadialForce_C, Timeline_0_Radius_CD3BE591473F9A800DF08A8AC8690190) == 0x0002B8, "Member 'AFN_RadialForce_C::Timeline_0_Radius_CD3BE591473F9A800DF08A8AC8690190' has a wrong offset!");
static_assert(offsetof(AFN_RadialForce_C, Timeline_0__Direction_CD3BE591473F9A800DF08A8AC8690190) == 0x0002BC, "Member 'AFN_RadialForce_C::Timeline_0__Direction_CD3BE591473F9A800DF08A8AC8690190' has a wrong offset!");
static_assert(offsetof(AFN_RadialForce_C, Timeline_0) == 0x0002C0, "Member 'AFN_RadialForce_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(AFN_RadialForce_C, Wave_Period) == 0x0002C8, "Member 'AFN_RadialForce_C::Wave_Period' has a wrong offset!");
static_assert(offsetof(AFN_RadialForce_C, Force_Duration) == 0x0002CC, "Member 'AFN_RadialForce_C::Force_Duration' has a wrong offset!");
static_assert(offsetof(AFN_RadialForce_C, Radius) == 0x0002D0, "Member 'AFN_RadialForce_C::Radius' has a wrong offset!");
static_assert(offsetof(AFN_RadialForce_C, Magnitude) == 0x0002D4, "Member 'AFN_RadialForce_C::Magnitude' has a wrong offset!");
static_assert(offsetof(AFN_RadialForce_C, PlayRate) == 0x0002D8, "Member 'AFN_RadialForce_C::PlayRate' has a wrong offset!");
static_assert(offsetof(AFN_RadialForce_C, Scale) == 0x0002DC, "Member 'AFN_RadialForce_C::Scale' has a wrong offset!");
static_assert(offsetof(AFN_RadialForce_C, Impact_Time) == 0x0002E0, "Member 'AFN_RadialForce_C::Impact_Time' has a wrong offset!");
static_assert(offsetof(AFN_RadialForce_C, Period) == 0x0002E4, "Member 'AFN_RadialForce_C::Period' has a wrong offset!");
static_assert(offsetof(AFN_RadialForce_C, WaveLength) == 0x0002E8, "Member 'AFN_RadialForce_C::WaveLength' has a wrong offset!");
static_assert(offsetof(AFN_RadialForce_C, Time_Decay) == 0x0002EC, "Member 'AFN_RadialForce_C::Time_Decay' has a wrong offset!");
static_assert(offsetof(AFN_RadialForce_C, Falloff_Type) == 0x0002F0, "Member 'AFN_RadialForce_C::Falloff_Type' has a wrong offset!");
static_assert(offsetof(AFN_RadialForce_C, Expansion) == 0x0002F4, "Member 'AFN_RadialForce_C::Expansion' has a wrong offset!");
static_assert(offsetof(AFN_RadialForce_C, Impact_Radius) == 0x0002F8, "Member 'AFN_RadialForce_C::Impact_Radius' has a wrong offset!");
static_assert(offsetof(AFN_RadialForce_C, Strength) == 0x0002FC, "Member 'AFN_RadialForce_C::Strength' has a wrong offset!");

}

