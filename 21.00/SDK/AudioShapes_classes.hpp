#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AudioShapes

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AudioGameplay_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class AudioShapes.AudioShapeComponent
// 0x0098 (0x0140 - 0x00A8)
class UAudioShapeComponent : public UAudioGameplayComponent
{
public:
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxDistanceOffset;                                 // 0x00B0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmoothingDistance;                                 // 0x00B4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x00B8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool bIsAudible)> OnAudibleStateChanged;                             // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMap<class FName, class UAudioComponent*>     AudioComponents;                                   // 0x00D0(0x0050)(ExportObject, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class APlayerController*>              LocalControllers;                                  // 0x0120(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_130[0x10];                                     // 0x0130(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void UpdateAudioShape(const TArray<class APlayerController*>& InLocalControllers);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioShapeComponent">();
	}
	static class UAudioShapeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioShapeComponent>();
	}
};
static_assert(alignof(UAudioShapeComponent) == 0x000008, "Wrong alignment on UAudioShapeComponent");
static_assert(sizeof(UAudioShapeComponent) == 0x000140, "Wrong size on UAudioShapeComponent");
static_assert(offsetof(UAudioShapeComponent, MaxDistanceOffset) == 0x0000B0, "Member 'UAudioShapeComponent::MaxDistanceOffset' has a wrong offset!");
static_assert(offsetof(UAudioShapeComponent, SmoothingDistance) == 0x0000B4, "Member 'UAudioShapeComponent::SmoothingDistance' has a wrong offset!");
static_assert(offsetof(UAudioShapeComponent, FadeTime) == 0x0000B8, "Member 'UAudioShapeComponent::FadeTime' has a wrong offset!");
static_assert(offsetof(UAudioShapeComponent, OnAudibleStateChanged) == 0x0000C0, "Member 'UAudioShapeComponent::OnAudibleStateChanged' has a wrong offset!");
static_assert(offsetof(UAudioShapeComponent, AudioComponents) == 0x0000D0, "Member 'UAudioShapeComponent::AudioComponents' has a wrong offset!");
static_assert(offsetof(UAudioShapeComponent, LocalControllers) == 0x000120, "Member 'UAudioShapeComponent::LocalControllers' has a wrong offset!");

// Class AudioShapes.AudioShapePrimitiveComponent
// 0x0088 (0x01C8 - 0x0140)
class UAudioShapePrimitiveComponent : public UAudioShapeComponent
{
public:
	class USoundBase*                             SoundOnEdge;                                       // 0x0140(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             SoundOnInside;                                     // 0x0148(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bIsInside)> OnInsideStateChanged;                              // 0x0150(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bUseOwningActorTransform;                          // 0x0160(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoRefreshShape;                                 // 0x0161(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_162[0x6];                                      // 0x0162(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ActorTransformScale;                               // 0x0168(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_180[0x48];                                     // 0x0180(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UAudioComponent* GetEdgeAudioComponent();
	class UAudioComponent* GetInsideAudioComponent();

	bool GetIsPlayerInside() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioShapePrimitiveComponent">();
	}
	static class UAudioShapePrimitiveComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioShapePrimitiveComponent>();
	}
};
static_assert(alignof(UAudioShapePrimitiveComponent) == 0x000008, "Wrong alignment on UAudioShapePrimitiveComponent");
static_assert(sizeof(UAudioShapePrimitiveComponent) == 0x0001C8, "Wrong size on UAudioShapePrimitiveComponent");
static_assert(offsetof(UAudioShapePrimitiveComponent, SoundOnEdge) == 0x000140, "Member 'UAudioShapePrimitiveComponent::SoundOnEdge' has a wrong offset!");
static_assert(offsetof(UAudioShapePrimitiveComponent, SoundOnInside) == 0x000148, "Member 'UAudioShapePrimitiveComponent::SoundOnInside' has a wrong offset!");
static_assert(offsetof(UAudioShapePrimitiveComponent, OnInsideStateChanged) == 0x000150, "Member 'UAudioShapePrimitiveComponent::OnInsideStateChanged' has a wrong offset!");
static_assert(offsetof(UAudioShapePrimitiveComponent, bUseOwningActorTransform) == 0x000160, "Member 'UAudioShapePrimitiveComponent::bUseOwningActorTransform' has a wrong offset!");
static_assert(offsetof(UAudioShapePrimitiveComponent, bAutoRefreshShape) == 0x000161, "Member 'UAudioShapePrimitiveComponent::bAutoRefreshShape' has a wrong offset!");
static_assert(offsetof(UAudioShapePrimitiveComponent, ActorTransformScale) == 0x000168, "Member 'UAudioShapePrimitiveComponent::ActorTransformScale' has a wrong offset!");

// Class AudioShapes.AudioShapeBoxComponent
// 0x0068 (0x0230 - 0x01C8)
class UAudioShapeBoxComponent final : public UAudioShapePrimitiveComponent
{
public:
	uint8                                         Pad_1C8[0x8];                                      // 0x01C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             BoxTransform;                                      // 0x01D0(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetBoxTransform(const struct FTransform& InTransform);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioShapeBoxComponent">();
	}
	static class UAudioShapeBoxComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioShapeBoxComponent>();
	}
};
static_assert(alignof(UAudioShapeBoxComponent) == 0x000010, "Wrong alignment on UAudioShapeBoxComponent");
static_assert(sizeof(UAudioShapeBoxComponent) == 0x000230, "Wrong size on UAudioShapeBoxComponent");
static_assert(offsetof(UAudioShapeBoxComponent, BoxTransform) == 0x0001D0, "Member 'UAudioShapeBoxComponent::BoxTransform' has a wrong offset!");

// Class AudioShapes.AudioShapeCylinderComponent
// 0x0008 (0x01D0 - 0x01C8)
class UAudioShapeCylinderComponent final : public UAudioShapePrimitiveComponent
{
public:
	float                                         HalfHeight;                                        // 0x01C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x01CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetHalfHeight(float InHalfHeight);
	void SetRadius(float InRadius);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioShapeCylinderComponent">();
	}
	static class UAudioShapeCylinderComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioShapeCylinderComponent>();
	}
};
static_assert(alignof(UAudioShapeCylinderComponent) == 0x000008, "Wrong alignment on UAudioShapeCylinderComponent");
static_assert(sizeof(UAudioShapeCylinderComponent) == 0x0001D0, "Wrong size on UAudioShapeCylinderComponent");
static_assert(offsetof(UAudioShapeCylinderComponent, HalfHeight) == 0x0001C8, "Member 'UAudioShapeCylinderComponent::HalfHeight' has a wrong offset!");
static_assert(offsetof(UAudioShapeCylinderComponent, Radius) == 0x0001CC, "Member 'UAudioShapeCylinderComponent::Radius' has a wrong offset!");

// Class AudioShapes.AudioShapeLineComponent
// 0x0030 (0x01F8 - 0x01C8)
class UAudioShapeLineComponent final : public UAudioShapePrimitiveComponent
{
public:
	struct FVector                                StartPoint;                                        // 0x01C8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndPoint;                                          // 0x01E0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetEndPoint(const struct FVector& InEndPoint);
	void SetStartPoint(const struct FVector& InStartPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioShapeLineComponent">();
	}
	static class UAudioShapeLineComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioShapeLineComponent>();
	}
};
static_assert(alignof(UAudioShapeLineComponent) == 0x000008, "Wrong alignment on UAudioShapeLineComponent");
static_assert(sizeof(UAudioShapeLineComponent) == 0x0001F8, "Wrong size on UAudioShapeLineComponent");
static_assert(offsetof(UAudioShapeLineComponent, StartPoint) == 0x0001C8, "Member 'UAudioShapeLineComponent::StartPoint' has a wrong offset!");
static_assert(offsetof(UAudioShapeLineComponent, EndPoint) == 0x0001E0, "Member 'UAudioShapeLineComponent::EndPoint' has a wrong offset!");

// Class AudioShapes.AudioShapeSphereComponent
// 0x0008 (0x01D0 - 0x01C8)
class UAudioShapeSphereComponent final : public UAudioShapePrimitiveComponent
{
public:
	float                                         Radius;                                            // 0x01C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CC[0x4];                                      // 0x01CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetRadius(float InRadius);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioShapeSphereComponent">();
	}
	static class UAudioShapeSphereComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioShapeSphereComponent>();
	}
};
static_assert(alignof(UAudioShapeSphereComponent) == 0x000008, "Wrong alignment on UAudioShapeSphereComponent");
static_assert(sizeof(UAudioShapeSphereComponent) == 0x0001D0, "Wrong size on UAudioShapeSphereComponent");
static_assert(offsetof(UAudioShapeSphereComponent, Radius) == 0x0001C8, "Member 'UAudioShapeSphereComponent::Radius' has a wrong offset!");

// Class AudioShapes.AudioShapeSubsystem
// 0x0058 (0x0088 - 0x0030)
class UAudioShapeSubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0x28];                                      // 0x0030(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAudioShapeComponent*>           AudioShapes;                                       // 0x0058(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class APlayerController*>              LocalControllers;                                  // 0x0068(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_78[0x10];                                      // 0x0078(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioShapeSubsystem">();
	}
	static class UAudioShapeSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioShapeSubsystem>();
	}
};
static_assert(alignof(UAudioShapeSubsystem) == 0x000008, "Wrong alignment on UAudioShapeSubsystem");
static_assert(sizeof(UAudioShapeSubsystem) == 0x000088, "Wrong size on UAudioShapeSubsystem");
static_assert(offsetof(UAudioShapeSubsystem, AudioShapes) == 0x000058, "Member 'UAudioShapeSubsystem::AudioShapes' has a wrong offset!");
static_assert(offsetof(UAudioShapeSubsystem, LocalControllers) == 0x000068, "Member 'UAudioShapeSubsystem::LocalControllers' has a wrong offset!");

}

