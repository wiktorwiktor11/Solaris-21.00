#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BattlePassBase

#include "Basic.hpp"

#include "BattlePassBase_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteUI_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BattlePassBase.BattlePassLandingPageButton.OnDisplayDetailsUpdated
// 0x0070 (0x0070 - 0x0000)
struct BattlePassLandingPageButton_OnDisplayDetailsUpdated final
{
public:
	struct FBattlePassLandingPageButtonDisplayDetails NewDisplayDetails;                                 // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassLandingPageButton_OnDisplayDetailsUpdated) == 0x000008, "Wrong alignment on BattlePassLandingPageButton_OnDisplayDetailsUpdated");
static_assert(sizeof(BattlePassLandingPageButton_OnDisplayDetailsUpdated) == 0x000070, "Wrong size on BattlePassLandingPageButton_OnDisplayDetailsUpdated");
static_assert(offsetof(BattlePassLandingPageButton_OnDisplayDetailsUpdated, NewDisplayDetails) == 0x000000, "Member 'BattlePassLandingPageButton_OnDisplayDetailsUpdated::NewDisplayDetails' has a wrong offset!");

// Function BattlePassBase.BattlePassLandingPageButton.OnSubscriptionOwnershipUpdated
// 0x0001 (0x0001 - 0x0000)
struct BattlePassLandingPageButton_OnSubscriptionOwnershipUpdated final
{
public:
	bool                                          bOwnsSubsciption;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassLandingPageButton_OnSubscriptionOwnershipUpdated) == 0x000001, "Wrong alignment on BattlePassLandingPageButton_OnSubscriptionOwnershipUpdated");
static_assert(sizeof(BattlePassLandingPageButton_OnSubscriptionOwnershipUpdated) == 0x000001, "Wrong size on BattlePassLandingPageButton_OnSubscriptionOwnershipUpdated");
static_assert(offsetof(BattlePassLandingPageButton_OnSubscriptionOwnershipUpdated, bOwnsSubsciption) == 0x000000, "Member 'BattlePassLandingPageButton_OnSubscriptionOwnershipUpdated::bOwnsSubsciption' has a wrong offset!");

// Function BattlePassBase.BattlePassLandingPageButton.OnSubscriptionTextureLoaded
// 0x0008 (0x0008 - 0x0000)
struct BattlePassLandingPageButton_OnSubscriptionTextureLoaded final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassLandingPageButton_OnSubscriptionTextureLoaded) == 0x000008, "Wrong alignment on BattlePassLandingPageButton_OnSubscriptionTextureLoaded");
static_assert(sizeof(BattlePassLandingPageButton_OnSubscriptionTextureLoaded) == 0x000008, "Wrong size on BattlePassLandingPageButton_OnSubscriptionTextureLoaded");
static_assert(offsetof(BattlePassLandingPageButton_OnSubscriptionTextureLoaded, Texture) == 0x000000, "Member 'BattlePassLandingPageButton_OnSubscriptionTextureLoaded::Texture' has a wrong offset!");

// Function BattlePassBase.BattlePassLandingPageButton.GetBattlePassDisplayDetails
// 0x0070 (0x0070 - 0x0000)
struct BattlePassLandingPageButton_GetBattlePassDisplayDetails final
{
public:
	struct FBattlePassLandingPageButtonDisplayDetails ReturnValue;                                       // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassLandingPageButton_GetBattlePassDisplayDetails) == 0x000008, "Wrong alignment on BattlePassLandingPageButton_GetBattlePassDisplayDetails");
static_assert(sizeof(BattlePassLandingPageButton_GetBattlePassDisplayDetails) == 0x000070, "Wrong size on BattlePassLandingPageButton_GetBattlePassDisplayDetails");
static_assert(offsetof(BattlePassLandingPageButton_GetBattlePassDisplayDetails, ReturnValue) == 0x000000, "Member 'BattlePassLandingPageButton_GetBattlePassDisplayDetails::ReturnValue' has a wrong offset!");

// Function BattlePassBase.FortBattlePassContext.CanPurchaseBattlePassLevel
// 0x0001 (0x0001 - 0x0000)
struct FortBattlePassContext_CanPurchaseBattlePassLevel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassContext_CanPurchaseBattlePassLevel) == 0x000001, "Wrong alignment on FortBattlePassContext_CanPurchaseBattlePassLevel");
static_assert(sizeof(FortBattlePassContext_CanPurchaseBattlePassLevel) == 0x000001, "Wrong size on FortBattlePassContext_CanPurchaseBattlePassLevel");
static_assert(offsetof(FortBattlePassContext_CanPurchaseBattlePassLevel, ReturnValue) == 0x000000, "Member 'FortBattlePassContext_CanPurchaseBattlePassLevel::ReturnValue' has a wrong offset!");

// Function BattlePassBase.FortBattlePassContext.GetCurrentChapterAsText
// 0x0020 (0x0020 - 0x0000)
struct FortBattlePassContext_GetCurrentChapterAsText final
{
public:
	bool                                          bFullText;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassContext_GetCurrentChapterAsText) == 0x000008, "Wrong alignment on FortBattlePassContext_GetCurrentChapterAsText");
static_assert(sizeof(FortBattlePassContext_GetCurrentChapterAsText) == 0x000020, "Wrong size on FortBattlePassContext_GetCurrentChapterAsText");
static_assert(offsetof(FortBattlePassContext_GetCurrentChapterAsText, bFullText) == 0x000000, "Member 'FortBattlePassContext_GetCurrentChapterAsText::bFullText' has a wrong offset!");
static_assert(offsetof(FortBattlePassContext_GetCurrentChapterAsText, ReturnValue) == 0x000008, "Member 'FortBattlePassContext_GetCurrentChapterAsText::ReturnValue' has a wrong offset!");

// Function BattlePassBase.FortBattlePassContext.GetCurrentSeasonNumberAsText
// 0x0020 (0x0020 - 0x0000)
struct FortBattlePassContext_GetCurrentSeasonNumberAsText final
{
public:
	bool                                          bFullText;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassContext_GetCurrentSeasonNumberAsText) == 0x000008, "Wrong alignment on FortBattlePassContext_GetCurrentSeasonNumberAsText");
static_assert(sizeof(FortBattlePassContext_GetCurrentSeasonNumberAsText) == 0x000020, "Wrong size on FortBattlePassContext_GetCurrentSeasonNumberAsText");
static_assert(offsetof(FortBattlePassContext_GetCurrentSeasonNumberAsText, bFullText) == 0x000000, "Member 'FortBattlePassContext_GetCurrentSeasonNumberAsText::bFullText' has a wrong offset!");
static_assert(offsetof(FortBattlePassContext_GetCurrentSeasonNumberAsText, ReturnValue) == 0x000008, "Member 'FortBattlePassContext_GetCurrentSeasonNumberAsText::ReturnValue' has a wrong offset!");

// Function BattlePassBase.FortBattlePassContext.GetDefaultDisclaimerText
// 0x0018 (0x0018 - 0x0000)
struct FortBattlePassContext_GetDefaultDisclaimerText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassContext_GetDefaultDisclaimerText) == 0x000008, "Wrong alignment on FortBattlePassContext_GetDefaultDisclaimerText");
static_assert(sizeof(FortBattlePassContext_GetDefaultDisclaimerText) == 0x000018, "Wrong size on FortBattlePassContext_GetDefaultDisclaimerText");
static_assert(offsetof(FortBattlePassContext_GetDefaultDisclaimerText, ReturnValue) == 0x000000, "Member 'FortBattlePassContext_GetDefaultDisclaimerText::ReturnValue' has a wrong offset!");

// Function BattlePassBase.FortBattlePassContext.GetLevelPurchaseDisclaimerText
// 0x0018 (0x0018 - 0x0000)
struct FortBattlePassContext_GetLevelPurchaseDisclaimerText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassContext_GetLevelPurchaseDisclaimerText) == 0x000008, "Wrong alignment on FortBattlePassContext_GetLevelPurchaseDisclaimerText");
static_assert(sizeof(FortBattlePassContext_GetLevelPurchaseDisclaimerText) == 0x000018, "Wrong size on FortBattlePassContext_GetLevelPurchaseDisclaimerText");
static_assert(offsetof(FortBattlePassContext_GetLevelPurchaseDisclaimerText, ReturnValue) == 0x000000, "Member 'FortBattlePassContext_GetLevelPurchaseDisclaimerText::ReturnValue' has a wrong offset!");

// Function BattlePassBase.FortBattlePassContext.GetSeasonalCurrencies
// 0x0010 (0x0010 - 0x0000)
struct FortBattlePassContext_GetSeasonalCurrencies final
{
public:
	TArray<struct FSeasonCurrencyMcpData>         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassContext_GetSeasonalCurrencies) == 0x000008, "Wrong alignment on FortBattlePassContext_GetSeasonalCurrencies");
static_assert(sizeof(FortBattlePassContext_GetSeasonalCurrencies) == 0x000010, "Wrong size on FortBattlePassContext_GetSeasonalCurrencies");
static_assert(offsetof(FortBattlePassContext_GetSeasonalCurrencies, ReturnValue) == 0x000000, "Member 'FortBattlePassContext_GetSeasonalCurrencies::ReturnValue' has a wrong offset!");

// Function BattlePassBase.FortBattlePassBulkBuyPageBase.HandleUserScrolled
// 0x0004 (0x0004 - 0x0000)
struct FortBattlePassBulkBuyPageBase_HandleUserScrolled final
{
public:
	float                                         ScrollAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassBulkBuyPageBase_HandleUserScrolled) == 0x000004, "Wrong alignment on FortBattlePassBulkBuyPageBase_HandleUserScrolled");
static_assert(sizeof(FortBattlePassBulkBuyPageBase_HandleUserScrolled) == 0x000004, "Wrong size on FortBattlePassBulkBuyPageBase_HandleUserScrolled");
static_assert(offsetof(FortBattlePassBulkBuyPageBase_HandleUserScrolled, ScrollAmount) == 0x000000, "Member 'FortBattlePassBulkBuyPageBase_HandleUserScrolled::ScrollAmount' has a wrong offset!");

// Function BattlePassBase.FortBattlePassBulkBuyPageBase.OnCostChanged
// 0x0004 (0x0004 - 0x0000)
struct FortBattlePassBulkBuyPageBase_OnCostChanged final
{
public:
	int32                                         Cost;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassBulkBuyPageBase_OnCostChanged) == 0x000004, "Wrong alignment on FortBattlePassBulkBuyPageBase_OnCostChanged");
static_assert(sizeof(FortBattlePassBulkBuyPageBase_OnCostChanged) == 0x000004, "Wrong size on FortBattlePassBulkBuyPageBase_OnCostChanged");
static_assert(offsetof(FortBattlePassBulkBuyPageBase_OnCostChanged, Cost) == 0x000000, "Member 'FortBattlePassBulkBuyPageBase_OnCostChanged::Cost' has a wrong offset!");

// Function BattlePassBase.FortBattlePassBulkBuyPageBase.OnPageRangeChanged
// 0x0008 (0x0008 - 0x0000)
struct FortBattlePassBulkBuyPageBase_OnPageRangeChanged final
{
public:
	int32                                         FromPage;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ToPage;                                            // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassBulkBuyPageBase_OnPageRangeChanged) == 0x000004, "Wrong alignment on FortBattlePassBulkBuyPageBase_OnPageRangeChanged");
static_assert(sizeof(FortBattlePassBulkBuyPageBase_OnPageRangeChanged) == 0x000008, "Wrong size on FortBattlePassBulkBuyPageBase_OnPageRangeChanged");
static_assert(offsetof(FortBattlePassBulkBuyPageBase_OnPageRangeChanged, FromPage) == 0x000000, "Member 'FortBattlePassBulkBuyPageBase_OnPageRangeChanged::FromPage' has a wrong offset!");
static_assert(offsetof(FortBattlePassBulkBuyPageBase_OnPageRangeChanged, ToPage) == 0x000004, "Member 'FortBattlePassBulkBuyPageBase_OnPageRangeChanged::ToPage' has a wrong offset!");

// Function BattlePassBase.FortBattlePassBulkBuyPageBase.OnRewardCountChanged
// 0x0004 (0x0004 - 0x0000)
struct FortBattlePassBulkBuyPageBase_OnRewardCountChanged final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassBulkBuyPageBase_OnRewardCountChanged) == 0x000004, "Wrong alignment on FortBattlePassBulkBuyPageBase_OnRewardCountChanged");
static_assert(sizeof(FortBattlePassBulkBuyPageBase_OnRewardCountChanged) == 0x000004, "Wrong size on FortBattlePassBulkBuyPageBase_OnRewardCountChanged");
static_assert(offsetof(FortBattlePassBulkBuyPageBase_OnRewardCountChanged, Count) == 0x000000, "Member 'FortBattlePassBulkBuyPageBase_OnRewardCountChanged::Count' has a wrong offset!");

// Function BattlePassBase.FortBattlePassCheckBoxButton.OnStateChanged
// 0x0001 (0x0001 - 0x0000)
struct FortBattlePassCheckBoxButton_OnStateChanged final
{
public:
	bool                                          bNewIsChecked;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassCheckBoxButton_OnStateChanged) == 0x000001, "Wrong alignment on FortBattlePassCheckBoxButton_OnStateChanged");
static_assert(sizeof(FortBattlePassCheckBoxButton_OnStateChanged) == 0x000001, "Wrong size on FortBattlePassCheckBoxButton_OnStateChanged");
static_assert(offsetof(FortBattlePassCheckBoxButton_OnStateChanged, bNewIsChecked) == 0x000000, "Member 'FortBattlePassCheckBoxButton_OnStateChanged::bNewIsChecked' has a wrong offset!");

// Function BattlePassBase.FortBattlePassResourcesWidgetBase.OnShowMoreInfo
// 0x0001 (0x0001 - 0x0000)
struct FortBattlePassResourcesWidgetBase_OnShowMoreInfo final
{
public:
	bool                                          bShouldShowMoreInfo;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassResourcesWidgetBase_OnShowMoreInfo) == 0x000001, "Wrong alignment on FortBattlePassResourcesWidgetBase_OnShowMoreInfo");
static_assert(sizeof(FortBattlePassResourcesWidgetBase_OnShowMoreInfo) == 0x000001, "Wrong size on FortBattlePassResourcesWidgetBase_OnShowMoreInfo");
static_assert(offsetof(FortBattlePassResourcesWidgetBase_OnShowMoreInfo, bShouldShowMoreInfo) == 0x000000, "Member 'FortBattlePassResourcesWidgetBase_OnShowMoreInfo::bShouldShowMoreInfo' has a wrong offset!");

// Function BattlePassBase.FortBattlePassCustomSkinCategoryTile.FocusTile
// 0x0004 (0x0004 - 0x0000)
struct FortBattlePassCustomSkinCategoryTile_FocusTile final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassCustomSkinCategoryTile_FocusTile) == 0x000004, "Wrong alignment on FortBattlePassCustomSkinCategoryTile_FocusTile");
static_assert(sizeof(FortBattlePassCustomSkinCategoryTile_FocusTile) == 0x000004, "Wrong size on FortBattlePassCustomSkinCategoryTile_FocusTile");
static_assert(offsetof(FortBattlePassCustomSkinCategoryTile_FocusTile, Index_0) == 0x000000, "Member 'FortBattlePassCustomSkinCategoryTile_FocusTile::Index_0' has a wrong offset!");

// Function BattlePassBase.FortBattlePassCustomSkinCategoryTile.OnLockedProgressUpdated
// 0x000C (0x000C - 0x0000)
struct FortBattlePassCustomSkinCategoryTile_OnLockedProgressUpdated final
{
public:
	int32                                         CurrentlyOwnedBeforeCategory;                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalRewardsBeforeCategory;                        // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LockedProgress;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassCustomSkinCategoryTile_OnLockedProgressUpdated) == 0x000004, "Wrong alignment on FortBattlePassCustomSkinCategoryTile_OnLockedProgressUpdated");
static_assert(sizeof(FortBattlePassCustomSkinCategoryTile_OnLockedProgressUpdated) == 0x00000C, "Wrong size on FortBattlePassCustomSkinCategoryTile_OnLockedProgressUpdated");
static_assert(offsetof(FortBattlePassCustomSkinCategoryTile_OnLockedProgressUpdated, CurrentlyOwnedBeforeCategory) == 0x000000, "Member 'FortBattlePassCustomSkinCategoryTile_OnLockedProgressUpdated::CurrentlyOwnedBeforeCategory' has a wrong offset!");
static_assert(offsetof(FortBattlePassCustomSkinCategoryTile_OnLockedProgressUpdated, TotalRewardsBeforeCategory) == 0x000004, "Member 'FortBattlePassCustomSkinCategoryTile_OnLockedProgressUpdated::TotalRewardsBeforeCategory' has a wrong offset!");
static_assert(offsetof(FortBattlePassCustomSkinCategoryTile_OnLockedProgressUpdated, LockedProgress) == 0x000008, "Member 'FortBattlePassCustomSkinCategoryTile_OnLockedProgressUpdated::LockedProgress' has a wrong offset!");

// Function BattlePassBase.FortBattlePassCustomSkinCategoryTile.OnLockedStateChanged
// 0x0001 (0x0001 - 0x0000)
struct FortBattlePassCustomSkinCategoryTile_OnLockedStateChanged final
{
public:
	bool                                          bCategoryLocked;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassCustomSkinCategoryTile_OnLockedStateChanged) == 0x000001, "Wrong alignment on FortBattlePassCustomSkinCategoryTile_OnLockedStateChanged");
static_assert(sizeof(FortBattlePassCustomSkinCategoryTile_OnLockedStateChanged) == 0x000001, "Wrong size on FortBattlePassCustomSkinCategoryTile_OnLockedStateChanged");
static_assert(offsetof(FortBattlePassCustomSkinCategoryTile_OnLockedStateChanged, bCategoryLocked) == 0x000000, "Member 'FortBattlePassCustomSkinCategoryTile_OnLockedStateChanged::bCategoryLocked' has a wrong offset!");

// Function BattlePassBase.FortBattlePassCustomSkinCategoryTile.OnOwnedTilesUpdated
// 0x000C (0x000C - 0x0000)
struct FortBattlePassCustomSkinCategoryTile_OnOwnedTilesUpdated final
{
public:
	int32                                         CurrentlyOwnedRewards;                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalRewards;                                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CategoryProgress;                                  // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassCustomSkinCategoryTile_OnOwnedTilesUpdated) == 0x000004, "Wrong alignment on FortBattlePassCustomSkinCategoryTile_OnOwnedTilesUpdated");
static_assert(sizeof(FortBattlePassCustomSkinCategoryTile_OnOwnedTilesUpdated) == 0x00000C, "Wrong size on FortBattlePassCustomSkinCategoryTile_OnOwnedTilesUpdated");
static_assert(offsetof(FortBattlePassCustomSkinCategoryTile_OnOwnedTilesUpdated, CurrentlyOwnedRewards) == 0x000000, "Member 'FortBattlePassCustomSkinCategoryTile_OnOwnedTilesUpdated::CurrentlyOwnedRewards' has a wrong offset!");
static_assert(offsetof(FortBattlePassCustomSkinCategoryTile_OnOwnedTilesUpdated, TotalRewards) == 0x000004, "Member 'FortBattlePassCustomSkinCategoryTile_OnOwnedTilesUpdated::TotalRewards' has a wrong offset!");
static_assert(offsetof(FortBattlePassCustomSkinCategoryTile_OnOwnedTilesUpdated, CategoryProgress) == 0x000008, "Member 'FortBattlePassCustomSkinCategoryTile_OnOwnedTilesUpdated::CategoryProgress' has a wrong offset!");

// Function BattlePassBase.FortBattlePassCustomSkinCategoryTile.SetPreviewedTile
// 0x0004 (0x0004 - 0x0000)
struct FortBattlePassCustomSkinCategoryTile_SetPreviewedTile final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassCustomSkinCategoryTile_SetPreviewedTile) == 0x000004, "Wrong alignment on FortBattlePassCustomSkinCategoryTile_SetPreviewedTile");
static_assert(sizeof(FortBattlePassCustomSkinCategoryTile_SetPreviewedTile) == 0x000004, "Wrong size on FortBattlePassCustomSkinCategoryTile_SetPreviewedTile");
static_assert(offsetof(FortBattlePassCustomSkinCategoryTile_SetPreviewedTile, Index_0) == 0x000000, "Member 'FortBattlePassCustomSkinCategoryTile_SetPreviewedTile::Index_0' has a wrong offset!");

// Function BattlePassBase.FortBattlePassPurchaseResourcesWidget.HandlePurchaseComplete
// 0x0028 (0x0028 - 0x0000)
struct FortBattlePassPurchaseResourcesWidget_HandlePurchaseComplete final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPurchasedItemInfo>             PurchasedItems;                                    // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 OfferId;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassPurchaseResourcesWidget_HandlePurchaseComplete) == 0x000008, "Wrong alignment on FortBattlePassPurchaseResourcesWidget_HandlePurchaseComplete");
static_assert(sizeof(FortBattlePassPurchaseResourcesWidget_HandlePurchaseComplete) == 0x000028, "Wrong size on FortBattlePassPurchaseResourcesWidget_HandlePurchaseComplete");
static_assert(offsetof(FortBattlePassPurchaseResourcesWidget_HandlePurchaseComplete, bSuccess) == 0x000000, "Member 'FortBattlePassPurchaseResourcesWidget_HandlePurchaseComplete::bSuccess' has a wrong offset!");
static_assert(offsetof(FortBattlePassPurchaseResourcesWidget_HandlePurchaseComplete, PurchasedItems) == 0x000008, "Member 'FortBattlePassPurchaseResourcesWidget_HandlePurchaseComplete::PurchasedItems' has a wrong offset!");
static_assert(offsetof(FortBattlePassPurchaseResourcesWidget_HandlePurchaseComplete, OfferId) == 0x000018, "Member 'FortBattlePassPurchaseResourcesWidget_HandlePurchaseComplete::OfferId' has a wrong offset!");

// Function BattlePassBase.FortBattlePassPurchaseResourcesWidget.HandlePurchaseMultiComplete
// 0x0028 (0x0028 - 0x0000)
struct FortBattlePassPurchaseResourcesWidget_HandlePurchaseMultiComplete final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPurchasedItemInfo>             PurchasedItems;                                    // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         OfferIdList;                                       // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassPurchaseResourcesWidget_HandlePurchaseMultiComplete) == 0x000008, "Wrong alignment on FortBattlePassPurchaseResourcesWidget_HandlePurchaseMultiComplete");
static_assert(sizeof(FortBattlePassPurchaseResourcesWidget_HandlePurchaseMultiComplete) == 0x000028, "Wrong size on FortBattlePassPurchaseResourcesWidget_HandlePurchaseMultiComplete");
static_assert(offsetof(FortBattlePassPurchaseResourcesWidget_HandlePurchaseMultiComplete, bSuccess) == 0x000000, "Member 'FortBattlePassPurchaseResourcesWidget_HandlePurchaseMultiComplete::bSuccess' has a wrong offset!");
static_assert(offsetof(FortBattlePassPurchaseResourcesWidget_HandlePurchaseMultiComplete, PurchasedItems) == 0x000008, "Member 'FortBattlePassPurchaseResourcesWidget_HandlePurchaseMultiComplete::PurchasedItems' has a wrong offset!");
static_assert(offsetof(FortBattlePassPurchaseResourcesWidget_HandlePurchaseMultiComplete, OfferIdList) == 0x000018, "Member 'FortBattlePassPurchaseResourcesWidget_HandlePurchaseMultiComplete::OfferIdList' has a wrong offset!");

// Function BattlePassBase.FortBattlePassPurchaseResourcesWidget.IsReloadMtxEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortBattlePassPurchaseResourcesWidget_IsReloadMtxEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassPurchaseResourcesWidget_IsReloadMtxEnabled) == 0x000001, "Wrong alignment on FortBattlePassPurchaseResourcesWidget_IsReloadMtxEnabled");
static_assert(sizeof(FortBattlePassPurchaseResourcesWidget_IsReloadMtxEnabled) == 0x000001, "Wrong size on FortBattlePassPurchaseResourcesWidget_IsReloadMtxEnabled");
static_assert(offsetof(FortBattlePassPurchaseResourcesWidget_IsReloadMtxEnabled, ReturnValue) == 0x000000, "Member 'FortBattlePassPurchaseResourcesWidget_IsReloadMtxEnabled::ReturnValue' has a wrong offset!");

// Function BattlePassBase.FortBattlePassPurchaseResourcesWidget.OnPurchaseAmountChanged
// 0x0008 (0x0008 - 0x0000)
struct FortBattlePassPurchaseResourcesWidget_OnPurchaseAmountChanged final
{
public:
	int32                                         NewAmount;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelsLeft;                                        // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassPurchaseResourcesWidget_OnPurchaseAmountChanged) == 0x000004, "Wrong alignment on FortBattlePassPurchaseResourcesWidget_OnPurchaseAmountChanged");
static_assert(sizeof(FortBattlePassPurchaseResourcesWidget_OnPurchaseAmountChanged) == 0x000008, "Wrong size on FortBattlePassPurchaseResourcesWidget_OnPurchaseAmountChanged");
static_assert(offsetof(FortBattlePassPurchaseResourcesWidget_OnPurchaseAmountChanged, NewAmount) == 0x000000, "Member 'FortBattlePassPurchaseResourcesWidget_OnPurchaseAmountChanged::NewAmount' has a wrong offset!");
static_assert(offsetof(FortBattlePassPurchaseResourcesWidget_OnPurchaseAmountChanged, LevelsLeft) == 0x000004, "Member 'FortBattlePassPurchaseResourcesWidget_OnPurchaseAmountChanged::LevelsLeft' has a wrong offset!");

// Function BattlePassBase.FortBattlePassPurchaseResourcesWidget.OnTotalPriceChanged
// 0x0004 (0x0004 - 0x0000)
struct FortBattlePassPurchaseResourcesWidget_OnTotalPriceChanged final
{
public:
	int32                                         NewPrice;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassPurchaseResourcesWidget_OnTotalPriceChanged) == 0x000004, "Wrong alignment on FortBattlePassPurchaseResourcesWidget_OnTotalPriceChanged");
static_assert(sizeof(FortBattlePassPurchaseResourcesWidget_OnTotalPriceChanged) == 0x000004, "Wrong size on FortBattlePassPurchaseResourcesWidget_OnTotalPriceChanged");
static_assert(offsetof(FortBattlePassPurchaseResourcesWidget_OnTotalPriceChanged, NewPrice) == 0x000000, "Member 'FortBattlePassPurchaseResourcesWidget_OnTotalPriceChanged::NewPrice' has a wrong offset!");

// Function BattlePassBase.FortBattlePassRewardGridHeader.OnBattlePassLevelSet
// 0x0004 (0x0004 - 0x0000)
struct FortBattlePassRewardGridHeader_OnBattlePassLevelSet final
{
public:
	int32                                         BattlePassLevel;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassRewardGridHeader_OnBattlePassLevelSet) == 0x000004, "Wrong alignment on FortBattlePassRewardGridHeader_OnBattlePassLevelSet");
static_assert(sizeof(FortBattlePassRewardGridHeader_OnBattlePassLevelSet) == 0x000004, "Wrong size on FortBattlePassRewardGridHeader_OnBattlePassLevelSet");
static_assert(offsetof(FortBattlePassRewardGridHeader_OnBattlePassLevelSet, BattlePassLevel) == 0x000000, "Member 'FortBattlePassRewardGridHeader_OnBattlePassLevelSet::BattlePassLevel' has a wrong offset!");

// Function BattlePassBase.FortBattlePassRewardGridHeader.OnPageLocked
// 0x0008 (0x0008 - 0x0000)
struct FortBattlePassRewardGridHeader_OnPageLocked final
{
public:
	int32                                         RequiredLevel;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredRewards;                                   // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassRewardGridHeader_OnPageLocked) == 0x000004, "Wrong alignment on FortBattlePassRewardGridHeader_OnPageLocked");
static_assert(sizeof(FortBattlePassRewardGridHeader_OnPageLocked) == 0x000008, "Wrong size on FortBattlePassRewardGridHeader_OnPageLocked");
static_assert(offsetof(FortBattlePassRewardGridHeader_OnPageLocked, RequiredLevel) == 0x000000, "Member 'FortBattlePassRewardGridHeader_OnPageLocked::RequiredLevel' has a wrong offset!");
static_assert(offsetof(FortBattlePassRewardGridHeader_OnPageLocked, RequiredRewards) == 0x000004, "Member 'FortBattlePassRewardGridHeader_OnPageLocked::RequiredRewards' has a wrong offset!");

// Function BattlePassBase.FortBattlePassRewardGridHeader.OnPageNumberSet
// 0x0004 (0x0004 - 0x0000)
struct FortBattlePassRewardGridHeader_OnPageNumberSet final
{
public:
	int32                                         InPageNumber;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassRewardGridHeader_OnPageNumberSet) == 0x000004, "Wrong alignment on FortBattlePassRewardGridHeader_OnPageNumberSet");
static_assert(sizeof(FortBattlePassRewardGridHeader_OnPageNumberSet) == 0x000004, "Wrong size on FortBattlePassRewardGridHeader_OnPageNumberSet");
static_assert(offsetof(FortBattlePassRewardGridHeader_OnPageNumberSet, InPageNumber) == 0x000000, "Member 'FortBattlePassRewardGridHeader_OnPageNumberSet::InPageNumber' has a wrong offset!");

// Function BattlePassBase.FortBattlePassRewardGridHeader.OnPageUnlocked
// 0x0008 (0x0008 - 0x0000)
struct FortBattlePassRewardGridHeader_OnPageUnlocked final
{
public:
	int32                                         PurchasedRewards;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalRewards;                                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassRewardGridHeader_OnPageUnlocked) == 0x000004, "Wrong alignment on FortBattlePassRewardGridHeader_OnPageUnlocked");
static_assert(sizeof(FortBattlePassRewardGridHeader_OnPageUnlocked) == 0x000008, "Wrong size on FortBattlePassRewardGridHeader_OnPageUnlocked");
static_assert(offsetof(FortBattlePassRewardGridHeader_OnPageUnlocked, PurchasedRewards) == 0x000000, "Member 'FortBattlePassRewardGridHeader_OnPageUnlocked::PurchasedRewards' has a wrong offset!");
static_assert(offsetof(FortBattlePassRewardGridHeader_OnPageUnlocked, TotalRewards) == 0x000004, "Member 'FortBattlePassRewardGridHeader_OnPageUnlocked::TotalRewards' has a wrong offset!");

// Function BattlePassBase.FortBattlePassRewardGridHeader.OnSetPageCustomName
// 0x0018 (0x0018 - 0x0000)
struct FortBattlePassRewardGridHeader_OnSetPageCustomName final
{
public:
	class FText                                   CustomName;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassRewardGridHeader_OnSetPageCustomName) == 0x000008, "Wrong alignment on FortBattlePassRewardGridHeader_OnSetPageCustomName");
static_assert(sizeof(FortBattlePassRewardGridHeader_OnSetPageCustomName) == 0x000018, "Wrong size on FortBattlePassRewardGridHeader_OnSetPageCustomName");
static_assert(offsetof(FortBattlePassRewardGridHeader_OnSetPageCustomName, CustomName) == 0x000000, "Member 'FortBattlePassRewardGridHeader_OnSetPageCustomName::CustomName' has a wrong offset!");

// Function BattlePassBase.FortBattlePassRewardGridHeader.OnSetPageType
// 0x0001 (0x0001 - 0x0000)
struct FortBattlePassRewardGridHeader_OnSetPageType final
{
public:
	ERewardPageType                               PageType;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassRewardGridHeader_OnSetPageType) == 0x000001, "Wrong alignment on FortBattlePassRewardGridHeader_OnSetPageType");
static_assert(sizeof(FortBattlePassRewardGridHeader_OnSetPageType) == 0x000001, "Wrong size on FortBattlePassRewardGridHeader_OnSetPageType");
static_assert(offsetof(FortBattlePassRewardGridHeader_OnSetPageType, PageType) == 0x000000, "Member 'FortBattlePassRewardGridHeader_OnSetPageType::PageType' has a wrong offset!");

// Function BattlePassBase.FortBattlePassRewardGridHeader.GetPageNumber
// 0x0004 (0x0004 - 0x0000)
struct FortBattlePassRewardGridHeader_GetPageNumber final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassRewardGridHeader_GetPageNumber) == 0x000004, "Wrong alignment on FortBattlePassRewardGridHeader_GetPageNumber");
static_assert(sizeof(FortBattlePassRewardGridHeader_GetPageNumber) == 0x000004, "Wrong size on FortBattlePassRewardGridHeader_GetPageNumber");
static_assert(offsetof(FortBattlePassRewardGridHeader_GetPageNumber, ReturnValue) == 0x000000, "Member 'FortBattlePassRewardGridHeader_GetPageNumber::ReturnValue' has a wrong offset!");

// Function BattlePassBase.FortBattlePassTileBase.OnSetRequiresBattlePass
// 0x0001 (0x0001 - 0x0000)
struct FortBattlePassTileBase_OnSetRequiresBattlePass final
{
public:
	bool                                          bRequiresBP;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassTileBase_OnSetRequiresBattlePass) == 0x000001, "Wrong alignment on FortBattlePassTileBase_OnSetRequiresBattlePass");
static_assert(sizeof(FortBattlePassTileBase_OnSetRequiresBattlePass) == 0x000001, "Wrong size on FortBattlePassTileBase_OnSetRequiresBattlePass");
static_assert(offsetof(FortBattlePassTileBase_OnSetRequiresBattlePass, bRequiresBP) == 0x000000, "Member 'FortBattlePassTileBase_OnSetRequiresBattlePass::bRequiresBP' has a wrong offset!");

// Function BattlePassBase.FortBattlePassTileBase.OnSizeChanged
// 0x0010 (0x0010 - 0x0000)
struct FortBattlePassTileBase_OnSizeChanged final
{
public:
	struct FVector2D                              NewSize;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassTileBase_OnSizeChanged) == 0x000008, "Wrong alignment on FortBattlePassTileBase_OnSizeChanged");
static_assert(sizeof(FortBattlePassTileBase_OnSizeChanged) == 0x000010, "Wrong size on FortBattlePassTileBase_OnSizeChanged");
static_assert(offsetof(FortBattlePassTileBase_OnSizeChanged, NewSize) == 0x000000, "Member 'FortBattlePassTileBase_OnSizeChanged::NewSize' has a wrong offset!");

// Function BattlePassBase.FortBattlePassTileBase.OnStateChanged
// 0x0001 (0x0001 - 0x0000)
struct FortBattlePassTileBase_OnStateChanged final
{
public:
	EBattlePassTileAvailabilityStates             NewState;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassTileBase_OnStateChanged) == 0x000001, "Wrong alignment on FortBattlePassTileBase_OnStateChanged");
static_assert(sizeof(FortBattlePassTileBase_OnStateChanged) == 0x000001, "Wrong size on FortBattlePassTileBase_OnStateChanged");
static_assert(offsetof(FortBattlePassTileBase_OnStateChanged, NewState) == 0x000000, "Member 'FortBattlePassTileBase_OnStateChanged::NewState' has a wrong offset!");

// Function BattlePassBase.FortBattlePassTileBase.SetSize
// 0x0018 (0x0018 - 0x0000)
struct FortBattlePassTileBase_SetSize final
{
public:
	EPageItemTileSize                             TileSize;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CellSpacing;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassTileBase_SetSize) == 0x000008, "Wrong alignment on FortBattlePassTileBase_SetSize");
static_assert(sizeof(FortBattlePassTileBase_SetSize) == 0x000018, "Wrong size on FortBattlePassTileBase_SetSize");
static_assert(offsetof(FortBattlePassTileBase_SetSize, TileSize) == 0x000000, "Member 'FortBattlePassTileBase_SetSize::TileSize' has a wrong offset!");
static_assert(offsetof(FortBattlePassTileBase_SetSize, CellSpacing) == 0x000008, "Member 'FortBattlePassTileBase_SetSize::CellSpacing' has a wrong offset!");

// Function BattlePassBase.FortBattlePassTileBase.SetState
// 0x0001 (0x0001 - 0x0000)
struct FortBattlePassTileBase_SetState final
{
public:
	EBattlePassTileAvailabilityStates             NewState;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassTileBase_SetState) == 0x000001, "Wrong alignment on FortBattlePassTileBase_SetState");
static_assert(sizeof(FortBattlePassTileBase_SetState) == 0x000001, "Wrong size on FortBattlePassTileBase_SetState");
static_assert(offsetof(FortBattlePassTileBase_SetState, NewState) == 0x000000, "Member 'FortBattlePassTileBase_SetState::NewState' has a wrong offset!");

// Function BattlePassBase.FortBattlePassTileBase.GetState
// 0x0001 (0x0001 - 0x0000)
struct FortBattlePassTileBase_GetState final
{
public:
	EBattlePassTileAvailabilityStates             ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassTileBase_GetState) == 0x000001, "Wrong alignment on FortBattlePassTileBase_GetState");
static_assert(sizeof(FortBattlePassTileBase_GetState) == 0x000001, "Wrong size on FortBattlePassTileBase_GetState");
static_assert(offsetof(FortBattlePassTileBase_GetState, ReturnValue) == 0x000000, "Member 'FortBattlePassTileBase_GetState::ReturnValue' has a wrong offset!");

// Function BattlePassBase.FortBattlePassTileBase.IsAvailable
// 0x0001 (0x0001 - 0x0000)
struct FortBattlePassTileBase_IsAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassTileBase_IsAvailable) == 0x000001, "Wrong alignment on FortBattlePassTileBase_IsAvailable");
static_assert(sizeof(FortBattlePassTileBase_IsAvailable) == 0x000001, "Wrong size on FortBattlePassTileBase_IsAvailable");
static_assert(offsetof(FortBattlePassTileBase_IsAvailable, ReturnValue) == 0x000000, "Member 'FortBattlePassTileBase_IsAvailable::ReturnValue' has a wrong offset!");

// Function BattlePassBase.FortBattlePassTileBase.IsLocked
// 0x0001 (0x0001 - 0x0000)
struct FortBattlePassTileBase_IsLocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassTileBase_IsLocked) == 0x000001, "Wrong alignment on FortBattlePassTileBase_IsLocked");
static_assert(sizeof(FortBattlePassTileBase_IsLocked) == 0x000001, "Wrong size on FortBattlePassTileBase_IsLocked");
static_assert(offsetof(FortBattlePassTileBase_IsLocked, ReturnValue) == 0x000000, "Member 'FortBattlePassTileBase_IsLocked::ReturnValue' has a wrong offset!");

// Function BattlePassBase.FortBattlePassTileBase.IsOwned
// 0x0001 (0x0001 - 0x0000)
struct FortBattlePassTileBase_IsOwned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassTileBase_IsOwned) == 0x000001, "Wrong alignment on FortBattlePassTileBase_IsOwned");
static_assert(sizeof(FortBattlePassTileBase_IsOwned) == 0x000001, "Wrong size on FortBattlePassTileBase_IsOwned");
static_assert(offsetof(FortBattlePassTileBase_IsOwned, ReturnValue) == 0x000000, "Member 'FortBattlePassTileBase_IsOwned::ReturnValue' has a wrong offset!");

// Function BattlePassBase.FortBattlePassTile.OnAffordabilityChanged
// 0x0001 (0x0001 - 0x0000)
struct FortBattlePassTile_OnAffordabilityChanged final
{
public:
	bool                                          bHasEnougCurrency;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassTile_OnAffordabilityChanged) == 0x000001, "Wrong alignment on FortBattlePassTile_OnAffordabilityChanged");
static_assert(sizeof(FortBattlePassTile_OnAffordabilityChanged) == 0x000001, "Wrong size on FortBattlePassTile_OnAffordabilityChanged");
static_assert(offsetof(FortBattlePassTile_OnAffordabilityChanged, bHasEnougCurrency) == 0x000000, "Member 'FortBattlePassTile_OnAffordabilityChanged::bHasEnougCurrency' has a wrong offset!");

// Function BattlePassBase.FortBattlePassTile.OnLockedProgressUpdated
// 0x000C (0x000C - 0x0000)
struct FortBattlePassTile_OnLockedProgressUpdated final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentlyOwnedRewards;                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeededRewards;                                     // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassTile_OnLockedProgressUpdated) == 0x000004, "Wrong alignment on FortBattlePassTile_OnLockedProgressUpdated");
static_assert(sizeof(FortBattlePassTile_OnLockedProgressUpdated) == 0x00000C, "Wrong size on FortBattlePassTile_OnLockedProgressUpdated");
static_assert(offsetof(FortBattlePassTile_OnLockedProgressUpdated, Progress) == 0x000000, "Member 'FortBattlePassTile_OnLockedProgressUpdated::Progress' has a wrong offset!");
static_assert(offsetof(FortBattlePassTile_OnLockedProgressUpdated, CurrentlyOwnedRewards) == 0x000004, "Member 'FortBattlePassTile_OnLockedProgressUpdated::CurrentlyOwnedRewards' has a wrong offset!");
static_assert(offsetof(FortBattlePassTile_OnLockedProgressUpdated, NeededRewards) == 0x000008, "Member 'FortBattlePassTile_OnLockedProgressUpdated::NeededRewards' has a wrong offset!");

// Function BattlePassBase.FortBattlePassTile.OnLockedStateUpdated
// 0x0004 (0x0004 - 0x0000)
struct FortBattlePassTile_OnLockedStateUpdated final
{
public:
	bool                                          OwnsBattlePass;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ParentUnlocked;                                    // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasRemainingPrerequisites;                         // 0x0002(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDelayed;                                        // 0x0003(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassTile_OnLockedStateUpdated) == 0x000001, "Wrong alignment on FortBattlePassTile_OnLockedStateUpdated");
static_assert(sizeof(FortBattlePassTile_OnLockedStateUpdated) == 0x000004, "Wrong size on FortBattlePassTile_OnLockedStateUpdated");
static_assert(offsetof(FortBattlePassTile_OnLockedStateUpdated, OwnsBattlePass) == 0x000000, "Member 'FortBattlePassTile_OnLockedStateUpdated::OwnsBattlePass' has a wrong offset!");
static_assert(offsetof(FortBattlePassTile_OnLockedStateUpdated, ParentUnlocked) == 0x000001, "Member 'FortBattlePassTile_OnLockedStateUpdated::ParentUnlocked' has a wrong offset!");
static_assert(offsetof(FortBattlePassTile_OnLockedStateUpdated, HasRemainingPrerequisites) == 0x000002, "Member 'FortBattlePassTile_OnLockedStateUpdated::HasRemainingPrerequisites' has a wrong offset!");
static_assert(offsetof(FortBattlePassTile_OnLockedStateUpdated, bIsDelayed) == 0x000003, "Member 'FortBattlePassTile_OnLockedStateUpdated::bIsDelayed' has a wrong offset!");

// Function BattlePassBase.FortBattlePassTile.OnSetCurrencyAndPrice
// 0x0008 (0x0008 - 0x0000)
struct FortBattlePassTile_OnSetCurrencyAndPrice final
{
public:
	EBattlePassCurrencyType                       Currency;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Price;                                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassTile_OnSetCurrencyAndPrice) == 0x000004, "Wrong alignment on FortBattlePassTile_OnSetCurrencyAndPrice");
static_assert(sizeof(FortBattlePassTile_OnSetCurrencyAndPrice) == 0x000008, "Wrong size on FortBattlePassTile_OnSetCurrencyAndPrice");
static_assert(offsetof(FortBattlePassTile_OnSetCurrencyAndPrice, Currency) == 0x000000, "Member 'FortBattlePassTile_OnSetCurrencyAndPrice::Currency' has a wrong offset!");
static_assert(offsetof(FortBattlePassTile_OnSetCurrencyAndPrice, Price) == 0x000004, "Member 'FortBattlePassTile_OnSetCurrencyAndPrice::Price' has a wrong offset!");

// Function BattlePassBase.FortBattlePassTile.OnSetTrack
// 0x0002 (0x0002 - 0x0000)
struct FortBattlePassTile_OnSetTrack final
{
public:
	bool                                          bIsFreeTrack;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOwnsBattlePass;                                   // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassTile_OnSetTrack) == 0x000001, "Wrong alignment on FortBattlePassTile_OnSetTrack");
static_assert(sizeof(FortBattlePassTile_OnSetTrack) == 0x000002, "Wrong size on FortBattlePassTile_OnSetTrack");
static_assert(offsetof(FortBattlePassTile_OnSetTrack, bIsFreeTrack) == 0x000000, "Member 'FortBattlePassTile_OnSetTrack::bIsFreeTrack' has a wrong offset!");
static_assert(offsetof(FortBattlePassTile_OnSetTrack, bOwnsBattlePass) == 0x000001, "Member 'FortBattlePassTile_OnSetTrack::bOwnsBattlePass' has a wrong offset!");

// Function BattlePassBase.FortBattlePassTile.HasPrerequisites
// 0x0001 (0x0001 - 0x0000)
struct FortBattlePassTile_HasPrerequisites final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassTile_HasPrerequisites) == 0x000001, "Wrong alignment on FortBattlePassTile_HasPrerequisites");
static_assert(sizeof(FortBattlePassTile_HasPrerequisites) == 0x000001, "Wrong size on FortBattlePassTile_HasPrerequisites");
static_assert(offsetof(FortBattlePassTile_HasPrerequisites, ReturnValue) == 0x000000, "Member 'FortBattlePassTile_HasPrerequisites::ReturnValue' has a wrong offset!");

// Function BattlePassBase.FortBattlePassTile.IsAffordable
// 0x0001 (0x0001 - 0x0000)
struct FortBattlePassTile_IsAffordable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassTile_IsAffordable) == 0x000001, "Wrong alignment on FortBattlePassTile_IsAffordable");
static_assert(sizeof(FortBattlePassTile_IsAffordable) == 0x000001, "Wrong size on FortBattlePassTile_IsAffordable");
static_assert(offsetof(FortBattlePassTile_IsAffordable, ReturnValue) == 0x000000, "Member 'FortBattlePassTile_IsAffordable::ReturnValue' has a wrong offset!");

// Function BattlePassBase.FortBattlePassTutorialTooltip.SetText
// 0x0018 (0x0018 - 0x0000)
struct FortBattlePassTutorialTooltip_SetText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassTutorialTooltip_SetText) == 0x000008, "Wrong alignment on FortBattlePassTutorialTooltip_SetText");
static_assert(sizeof(FortBattlePassTutorialTooltip_SetText) == 0x000018, "Wrong size on FortBattlePassTutorialTooltip_SetText");
static_assert(offsetof(FortBattlePassTutorialTooltip_SetText, Text) == 0x000000, "Member 'FortBattlePassTutorialTooltip_SetText::Text' has a wrong offset!");

// Function BattlePassBase.FortBattlePassTutorialTooltip.SetTooltipEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortBattlePassTutorialTooltip_SetTooltipEnabled final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassTutorialTooltip_SetTooltipEnabled) == 0x000001, "Wrong alignment on FortBattlePassTutorialTooltip_SetTooltipEnabled");
static_assert(sizeof(FortBattlePassTutorialTooltip_SetTooltipEnabled) == 0x000001, "Wrong size on FortBattlePassTutorialTooltip_SetTooltipEnabled");
static_assert(offsetof(FortBattlePassTutorialTooltip_SetTooltipEnabled, bEnable) == 0x000000, "Member 'FortBattlePassTutorialTooltip_SetTooltipEnabled::bEnable' has a wrong offset!");

}

