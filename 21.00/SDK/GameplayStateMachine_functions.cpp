#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameplayStateMachine

#include "Basic.hpp"

#include "GameplayStateMachine_classes.hpp"
#include "GameplayStateMachine_parameters.hpp"


namespace SDK
{

// Function GameplayStateMachine.GameplayState.AddStateRuntimeTag
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     AddedTag                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameplayState::AddStateRuntimeTag(const struct FGameplayTag& AddedTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayState", "AddStateRuntimeTag");

	Params::GameplayState_AddStateRuntimeTag Parms{};

	Parms.AddedTag = std::move(AddedTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameplayStateMachine.GameplayState.BeginStateEvent
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     PrevStateId                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameplayState::BeginStateEvent(const struct FGameplayTag& PrevStateId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayState", "BeginStateEvent");

	Params::GameplayState_BeginStateEvent Parms{};

	Parms.PrevStateId = std::move(PrevStateId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GameplayStateMachine.GameplayState.BeginStateEventClient
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     PrevStateId                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameplayState::BeginStateEventClient(const struct FGameplayTag& PrevStateId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayState", "BeginStateEventClient");

	Params::GameplayState_BeginStateEventClient Parms{};

	Parms.PrevStateId = std::move(PrevStateId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GameplayStateMachine.GameplayState.BeginStateEventServer
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     PrevStateId                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameplayState::BeginStateEventServer(const struct FGameplayTag& PrevStateId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayState", "BeginStateEventServer");

	Params::GameplayState_BeginStateEventServer Parms{};

	Parms.PrevStateId = std::move(PrevStateId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GameplayStateMachine.GameplayState.EndStateEvent
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     NextStateId                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameplayState::EndStateEvent(const struct FGameplayTag& NextStateId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayState", "EndStateEvent");

	Params::GameplayState_EndStateEvent Parms{};

	Parms.NextStateId = std::move(NextStateId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GameplayStateMachine.GameplayState.EndStateEventClient
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     NextStateId                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameplayState::EndStateEventClient(const struct FGameplayTag& NextStateId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayState", "EndStateEventClient");

	Params::GameplayState_EndStateEventClient Parms{};

	Parms.NextStateId = std::move(NextStateId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GameplayStateMachine.GameplayState.EndStateEventServer
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     NextStateId                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameplayState::EndStateEventServer(const struct FGameplayTag& NextStateId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayState", "EndStateEventServer");

	Params::GameplayState_EndStateEventServer Parms{};

	Parms.NextStateId = std::move(NextStateId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GameplayStateMachine.GameplayState.HasStateRuntimeTag
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     QueryTag                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameplayState::HasStateRuntimeTag(const struct FGameplayTag& QueryTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayState", "HasStateRuntimeTag");

	Params::GameplayState_HasStateRuntimeTag Parms{};

	Parms.QueryTag = std::move(QueryTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayStateMachine.GameplayState.InitializeStateEvent
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     PrevStateId                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameplayState::InitializeStateEvent(const struct FGameplayTag& PrevStateId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayState", "InitializeStateEvent");

	Params::GameplayState_InitializeStateEvent Parms{};

	Parms.PrevStateId = std::move(PrevStateId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GameplayStateMachine.GameplayState.InitializeStateEventClient
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     PrevStateId                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameplayState::InitializeStateEventClient(const struct FGameplayTag& PrevStateId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayState", "InitializeStateEventClient");

	Params::GameplayState_InitializeStateEventClient Parms{};

	Parms.PrevStateId = std::move(PrevStateId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GameplayStateMachine.GameplayState.InitializeStateEventServer
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     PrevStateId                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameplayState::InitializeStateEventServer(const struct FGameplayTag& PrevStateId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayState", "InitializeStateEventServer");

	Params::GameplayState_InitializeStateEventServer Parms{};

	Parms.PrevStateId = std::move(PrevStateId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GameplayStateMachine.GameplayState.MarkStateToEvaluateTransitions
// (Final, Native, Public, BlueprintCallable)

void UGameplayState::MarkStateToEvaluateTransitions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayState", "MarkStateToEvaluateTransitions");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GameplayStateMachine.GameplayState.RemoveStateRuntimeTag
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     RemovedTag                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameplayState::RemoveStateRuntimeTag(const struct FGameplayTag& RemovedTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayState", "RemoveStateRuntimeTag");

	Params::GameplayState_RemoveStateRuntimeTag Parms{};

	Parms.RemovedTag = std::move(RemovedTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameplayStateMachine.GameplayState.UpdateStateEvent
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameplayState::UpdateStateEvent(const float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayState", "UpdateStateEvent");

	Params::GameplayState_UpdateStateEvent Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GameplayStateMachine.GameplayState.UpdateStateEventClient
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameplayState::UpdateStateEventClient(const float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayState", "UpdateStateEventClient");

	Params::GameplayState_UpdateStateEventClient Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GameplayStateMachine.GameplayState.UpdateStateEventServer
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameplayState::UpdateStateEventServer(const float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayState", "UpdateStateEventServer");

	Params::GameplayState_UpdateStateEventServer Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GameplayStateMachine.GameplayState.GetGameplayStateMachine
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGameplayStateMachine*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGameplayStateMachine* UGameplayState::GetGameplayStateMachine() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayState", "GetGameplayStateMachine");

	Params::GameplayState_GetGameplayStateMachine Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayStateMachine.GameplayState.GetOwningActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UGameplayState::GetOwningActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayState", "GetOwningActor");

	Params::GameplayState_GetOwningActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayStateMachine.GameplayState.GetStateId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UGameplayState::GetStateId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayState", "GetStateId");

	Params::GameplayState_GetStateId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayStateMachine.GameplayState.GetStateRuntimeTags
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTagContainer      ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FGameplayTagContainer UGameplayState::GetStateRuntimeTags() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayState", "GetStateRuntimeTags");

	Params::GameplayState_GetStateRuntimeTags Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayStateMachine.GameplayState.HasAuthority
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameplayState::HasAuthority() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayState", "HasAuthority");

	Params::GameplayState_HasAuthority Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayStateMachine.GameplayStateMachine.EvaluateStateTransition
// (Native, Event, Protected, BlueprintEvent)

void UGameplayStateMachine::EvaluateStateTransition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayStateMachine", "EvaluateStateTransition");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GameplayStateMachine.GameplayStateMachine.OnRep_ActiveGameplayStateData
// (Final, Native, Private)

void UGameplayStateMachine::OnRep_ActiveGameplayStateData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayStateMachine", "OnRep_ActiveGameplayStateData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GameplayStateMachine.GameplayStateMachine.SetState
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     InStateId                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InBeginStateDelay                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameplayStateMachine::SetState(const struct FGameplayTag& InStateId, float InBeginStateDelay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayStateMachine", "SetState");

	Params::GameplayStateMachine_SetState Parms{};

	Parms.InStateId = std::move(InStateId);
	Parms.InBeginStateDelay = InBeginStateDelay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameplayStateMachine.GameplayStateMachine.GetActiveStateId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UGameplayStateMachine::GetActiveStateId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayStateMachine", "GetActiveStateId");

	Params::GameplayStateMachine_GetActiveStateId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayStateMachine.GameplayStateMachine.GetActiveStateObject
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGameplayState*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGameplayState* UGameplayStateMachine::GetActiveStateObject() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayStateMachine", "GetActiveStateObject");

	Params::GameplayStateMachine_GetActiveStateObject Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayStateMachine.GameplayStateMachine.GetStateMachineId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UGameplayStateMachine::GetStateMachineId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayStateMachine", "GetStateMachineId");

	Params::GameplayStateMachine_GetStateMachineId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

