#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ButterCakeRuntime

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "ButterCakeRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ButterCakeRuntime.ButterCakeUnstuckComponent.HandleAthenaGamePhaseChanged
// 0x0001 (0x0001 - 0x0000)
struct ButterCakeUnstuckComponent_HandleAthenaGamePhaseChanged final
{
public:
	EAthenaGamePhase                              GamePhase;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ButterCakeUnstuckComponent_HandleAthenaGamePhaseChanged) == 0x000001, "Wrong alignment on ButterCakeUnstuckComponent_HandleAthenaGamePhaseChanged");
static_assert(sizeof(ButterCakeUnstuckComponent_HandleAthenaGamePhaseChanged) == 0x000001, "Wrong size on ButterCakeUnstuckComponent_HandleAthenaGamePhaseChanged");
static_assert(offsetof(ButterCakeUnstuckComponent_HandleAthenaGamePhaseChanged, GamePhase) == 0x000000, "Member 'ButterCakeUnstuckComponent_HandleAthenaGamePhaseChanged::GamePhase' has a wrong offset!");

// Function ButterCakeRuntime.FortAIAnimInstance_ButterCake.ComputeFootPhase
// 0x0001 (0x0001 - 0x0000)
struct FortAIAnimInstance_ButterCake_ComputeFootPhase final
{
public:
	EFortButterCakeFootPhase                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIAnimInstance_ButterCake_ComputeFootPhase) == 0x000001, "Wrong alignment on FortAIAnimInstance_ButterCake_ComputeFootPhase");
static_assert(sizeof(FortAIAnimInstance_ButterCake_ComputeFootPhase) == 0x000001, "Wrong size on FortAIAnimInstance_ButterCake_ComputeFootPhase");
static_assert(offsetof(FortAIAnimInstance_ButterCake_ComputeFootPhase, ReturnValue) == 0x000000, "Member 'FortAIAnimInstance_ButterCake_ComputeFootPhase::ReturnValue' has a wrong offset!");

// Function ButterCakeRuntime.FortAIAnimInstance_ButterCake.ComputeLeanAngleByVelocity
// 0x0004 (0x0004 - 0x0000)
struct FortAIAnimInstance_ButterCake_ComputeLeanAngleByVelocity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIAnimInstance_ButterCake_ComputeLeanAngleByVelocity) == 0x000004, "Wrong alignment on FortAIAnimInstance_ButterCake_ComputeLeanAngleByVelocity");
static_assert(sizeof(FortAIAnimInstance_ButterCake_ComputeLeanAngleByVelocity) == 0x000004, "Wrong size on FortAIAnimInstance_ButterCake_ComputeLeanAngleByVelocity");
static_assert(offsetof(FortAIAnimInstance_ButterCake_ComputeLeanAngleByVelocity, ReturnValue) == 0x000000, "Member 'FortAIAnimInstance_ButterCake_ComputeLeanAngleByVelocity::ReturnValue' has a wrong offset!");

// Function ButterCakeRuntime.FortButterCakeComponent_Telemetry.OnEnterBerserk
// 0x0008 (0x0008 - 0x0000)
struct FortButterCakeComponent_Telemetry_OnEnterBerserk final
{
public:
	const class AController*                      Instigator;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortButterCakeComponent_Telemetry_OnEnterBerserk) == 0x000008, "Wrong alignment on FortButterCakeComponent_Telemetry_OnEnterBerserk");
static_assert(sizeof(FortButterCakeComponent_Telemetry_OnEnterBerserk) == 0x000008, "Wrong size on FortButterCakeComponent_Telemetry_OnEnterBerserk");
static_assert(offsetof(FortButterCakeComponent_Telemetry_OnEnterBerserk, Instigator) == 0x000000, "Member 'FortButterCakeComponent_Telemetry_OnEnterBerserk::Instigator' has a wrong offset!");

// Function ButterCakeRuntime.FortButterCakeComponent_Telemetry.OnItemsEaten
// 0x0004 (0x0004 - 0x0000)
struct FortButterCakeComponent_Telemetry_OnItemsEaten final
{
public:
	int32                                         ItemsCount;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortButterCakeComponent_Telemetry_OnItemsEaten) == 0x000004, "Wrong alignment on FortButterCakeComponent_Telemetry_OnItemsEaten");
static_assert(sizeof(FortButterCakeComponent_Telemetry_OnItemsEaten) == 0x000004, "Wrong size on FortButterCakeComponent_Telemetry_OnItemsEaten");
static_assert(offsetof(FortButterCakeComponent_Telemetry_OnItemsEaten, ItemsCount) == 0x000000, "Member 'FortButterCakeComponent_Telemetry_OnItemsEaten::ItemsCount' has a wrong offset!");

// Function ButterCakeRuntime.FortButterCakeComponent_Telemetry.OnItemsSneezed
// 0x0004 (0x0004 - 0x0000)
struct FortButterCakeComponent_Telemetry_OnItemsSneezed final
{
public:
	int32                                         ItemsCount;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortButterCakeComponent_Telemetry_OnItemsSneezed) == 0x000004, "Wrong alignment on FortButterCakeComponent_Telemetry_OnItemsSneezed");
static_assert(sizeof(FortButterCakeComponent_Telemetry_OnItemsSneezed) == 0x000004, "Wrong size on FortButterCakeComponent_Telemetry_OnItemsSneezed");
static_assert(offsetof(FortButterCakeComponent_Telemetry_OnItemsSneezed, ItemsCount) == 0x000000, "Member 'FortButterCakeComponent_Telemetry_OnItemsSneezed::ItemsCount' has a wrong offset!");

// Function ButterCakeRuntime.FortButterCakeControlRig.GetGroundHitLocationAt
// 0x0020 (0x0020 - 0x0000)
struct FortButterCakeControlRig_GetGroundHitLocationAt final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortButterCakeControlRig_GetGroundHitLocationAt) == 0x000008, "Wrong alignment on FortButterCakeControlRig_GetGroundHitLocationAt");
static_assert(sizeof(FortButterCakeControlRig_GetGroundHitLocationAt) == 0x000020, "Wrong size on FortButterCakeControlRig_GetGroundHitLocationAt");
static_assert(offsetof(FortButterCakeControlRig_GetGroundHitLocationAt, Index_0) == 0x000000, "Member 'FortButterCakeControlRig_GetGroundHitLocationAt::Index_0' has a wrong offset!");
static_assert(offsetof(FortButterCakeControlRig_GetGroundHitLocationAt, ReturnValue) == 0x000008, "Member 'FortButterCakeControlRig_GetGroundHitLocationAt::ReturnValue' has a wrong offset!");

// Function ButterCakeRuntime.FortButterCakeControlRig.GetGroundHitNormalAt
// 0x0020 (0x0020 - 0x0000)
struct FortButterCakeControlRig_GetGroundHitNormalAt final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortButterCakeControlRig_GetGroundHitNormalAt) == 0x000008, "Wrong alignment on FortButterCakeControlRig_GetGroundHitNormalAt");
static_assert(sizeof(FortButterCakeControlRig_GetGroundHitNormalAt) == 0x000020, "Wrong size on FortButterCakeControlRig_GetGroundHitNormalAt");
static_assert(offsetof(FortButterCakeControlRig_GetGroundHitNormalAt, Index_0) == 0x000000, "Member 'FortButterCakeControlRig_GetGroundHitNormalAt::Index_0' has a wrong offset!");
static_assert(offsetof(FortButterCakeControlRig_GetGroundHitNormalAt, ReturnValue) == 0x000008, "Member 'FortButterCakeControlRig_GetGroundHitNormalAt::ReturnValue' has a wrong offset!");

}

