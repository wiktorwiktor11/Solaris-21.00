#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WindManager

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "StaticMeshMaterialArrayCombo_structs.hpp"
#include "FlowMapMaterials_structs.hpp"
#include "ArrayOfWaterMeshWaterBlueprintPairs_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass WindManager.WindManager_C
// 0x0120 (0x0620 - 0x0500)
class AWindManager_C final : public AFortWindManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0500(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   EmptyStaticMesh;                                   // 0x0508(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0510(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         SmallerRenderTargetOrthoWidth;                     // 0x0518(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51C[0x4];                                      // 0x051C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         External_Test_Actor;                               // 0x0520(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class AFortStaticMeshActor*>           World_Terrain_Meshes;                              // 0x0530(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FVector                                Camera_Height_Offset;                              // 0x0540(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Particle_Z_Offset;                                 // 0x0558(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Water_Interaction_Enabled;                      // 0x055C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55D[0x3];                                      // 0x055D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStaticMeshMaterialArrayCombo>  WorldStaticMeshArray;                              // 0x0560(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FArrayOfWaterMeshWaterBlueprintPairs   Array_Of_Water_Assets;                             // 0x0570(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<class UStaticMesh*>                    PrototypicalStaticMeshes;                          // 0x0580(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Current_Water_Mesh_Index;                          // 0x0590(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_594[0x4];                                      // 0x0594(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFlowMapMaterials>              WaterVectorMatToDefaultMaterialPairing;            // 0x0598(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          MaterialPairingFound;                              // 0x05A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A9[0x3];                                      // 0x05A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           WorldBoundsMinMax;                                 // 0x05AC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BC[0x4];                                      // 0x05BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Black_Scene_Capture_Material;                      // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBox                                   Max_level_bounds___used_to_isolate_the_level_from_the_vista; // 0x05C8(0x0038)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class UStaticMeshComponent*>           StormCylinderMeshes;                               // 0x0600(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          Storm_Cyl_Mesh_Match;                              // 0x0610(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_611[0x3];                                      // 0x0611(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Wind_Cyl_Mesh_Array_Match_Index;                   // 0x0614(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Delta_Wind_Falloff_in_World_Units;                 // 0x0618(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFortWindImpulseHandle                 NewVar_1;                                          // 0x061C(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)

public:
	void Add_Render_To_Texture_Particle(class UParticleSystem* EmitterTemplate, const struct FTransform& InTransform);
	void Add_Wind_Component(class UPrimitiveComponent* InComponent);
	void AddWindParticleSystemComponent(class UParticleSystemComponent* ParticleSystemComponent);
	struct FVector Calculate_Camera_Position(float Scale, class USceneCaptureComponent2D* Scene_Capture);
	void ExecuteUbergraph_WindManager(int32 EntryPoint);
	void Find_Matching_Wind_Mesh_Index_And_Write_Bool(const struct FVector& Wind_location, bool* Storm_Cyl_Mesh_Match_0, int32* Wind_Cyl_Mesh_Array_Match_Index_0);
	void OnWindImpulseCylinderCreation(const struct FFortWindImpulseCylinder& WindImpulseCylinder, const struct FFortWindImpulseCylinderDelta& WindImpulseCylinderDelta);
	void OnWindImpulseCylinderDeath(const struct FFortWindImpulseCylinder& WindImpulseCylinder);
	void OnWindImpulseCylinderDeltaComplete(const struct FFortWindImpulseCylinder& WindImpulseCylinder);
	void Play_Water_Splash_Particle_System_At_Location(const struct FTransform& Particle_Transform);
	void ReceiveBeginPlay();
	void Register_player_for_render_to_texture_purposes(class UPrimitiveComponent* Effect_Water_Interaction_FX, class UPrimitiveComponent* Gameplay_Wind_INteraction_Effects);
	void RemoveWindCylinder(const struct FFortWindImpulseCylinder& WindImpulseCylinder);
	void SetWindMatVariables(class UMaterialInstanceDynamic* Mid, bool Set_AnimatedCylinderCenter, const struct FVector& AnimatedCylinderCenter, bool Set_Animating_Wind_Magnitude, float Animating_Wind_Magnitude, bool Set_Static_Wind_Magnitude, float Static_Wind_Magnitude, bool Set_CylinderCenter, const struct FVector& CylinderCenter, bool Set_WindVector, const struct FVector& WindVector, bool Set_WindCrossVector, const struct FVector& WindCrossVector, bool Set_OverallOuterRadius, float OverallOuterRadius, bool Set_OverallInnerRadius, float OverallInnerRadius, bool Set_Wind_Still_0_or_Animating_1, float Wind_Still_0_or_Animating_1, bool Set_Circular_Shader_, float Circular_Shader_, bool* NewParam);
	void SpawnTestWind(float Radius, float ImpulseMagnitude);
	void Update_Test(float NewMagnitude);
	void UpdateStormWindCylinder(const struct FFortWindImpulseCylinder& Wind_Impulse, const struct FFortWindImpulseCylinderDelta& Wind_Delta);
	void UpdateWindDeltaCyl(float Static_Cylinder_Outer_Radius, float Duration, class UMaterialInstanceDynamic* Mid, bool Is_Wind_Circular_);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WindManager_C">();
	}
	static class AWindManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWindManager_C>();
	}
};
static_assert(alignof(AWindManager_C) == 0x000008, "Wrong alignment on AWindManager_C");
static_assert(sizeof(AWindManager_C) == 0x000620, "Wrong size on AWindManager_C");
static_assert(offsetof(AWindManager_C, UberGraphFrame) == 0x000500, "Member 'AWindManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AWindManager_C, EmptyStaticMesh) == 0x000508, "Member 'AWindManager_C::EmptyStaticMesh' has a wrong offset!");
static_assert(offsetof(AWindManager_C, DefaultSceneRoot) == 0x000510, "Member 'AWindManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AWindManager_C, SmallerRenderTargetOrthoWidth) == 0x000518, "Member 'AWindManager_C::SmallerRenderTargetOrthoWidth' has a wrong offset!");
static_assert(offsetof(AWindManager_C, External_Test_Actor) == 0x000520, "Member 'AWindManager_C::External_Test_Actor' has a wrong offset!");
static_assert(offsetof(AWindManager_C, World_Terrain_Meshes) == 0x000530, "Member 'AWindManager_C::World_Terrain_Meshes' has a wrong offset!");
static_assert(offsetof(AWindManager_C, Camera_Height_Offset) == 0x000540, "Member 'AWindManager_C::Camera_Height_Offset' has a wrong offset!");
static_assert(offsetof(AWindManager_C, Particle_Z_Offset) == 0x000558, "Member 'AWindManager_C::Particle_Z_Offset' has a wrong offset!");
static_assert(offsetof(AWindManager_C, Is_Water_Interaction_Enabled) == 0x00055C, "Member 'AWindManager_C::Is_Water_Interaction_Enabled' has a wrong offset!");
static_assert(offsetof(AWindManager_C, WorldStaticMeshArray) == 0x000560, "Member 'AWindManager_C::WorldStaticMeshArray' has a wrong offset!");
static_assert(offsetof(AWindManager_C, Array_Of_Water_Assets) == 0x000570, "Member 'AWindManager_C::Array_Of_Water_Assets' has a wrong offset!");
static_assert(offsetof(AWindManager_C, PrototypicalStaticMeshes) == 0x000580, "Member 'AWindManager_C::PrototypicalStaticMeshes' has a wrong offset!");
static_assert(offsetof(AWindManager_C, Current_Water_Mesh_Index) == 0x000590, "Member 'AWindManager_C::Current_Water_Mesh_Index' has a wrong offset!");
static_assert(offsetof(AWindManager_C, WaterVectorMatToDefaultMaterialPairing) == 0x000598, "Member 'AWindManager_C::WaterVectorMatToDefaultMaterialPairing' has a wrong offset!");
static_assert(offsetof(AWindManager_C, MaterialPairingFound) == 0x0005A8, "Member 'AWindManager_C::MaterialPairingFound' has a wrong offset!");
static_assert(offsetof(AWindManager_C, WorldBoundsMinMax) == 0x0005AC, "Member 'AWindManager_C::WorldBoundsMinMax' has a wrong offset!");
static_assert(offsetof(AWindManager_C, Black_Scene_Capture_Material) == 0x0005C0, "Member 'AWindManager_C::Black_Scene_Capture_Material' has a wrong offset!");
static_assert(offsetof(AWindManager_C, Max_level_bounds___used_to_isolate_the_level_from_the_vista) == 0x0005C8, "Member 'AWindManager_C::Max_level_bounds___used_to_isolate_the_level_from_the_vista' has a wrong offset!");
static_assert(offsetof(AWindManager_C, StormCylinderMeshes) == 0x000600, "Member 'AWindManager_C::StormCylinderMeshes' has a wrong offset!");
static_assert(offsetof(AWindManager_C, Storm_Cyl_Mesh_Match) == 0x000610, "Member 'AWindManager_C::Storm_Cyl_Mesh_Match' has a wrong offset!");
static_assert(offsetof(AWindManager_C, Wind_Cyl_Mesh_Array_Match_Index) == 0x000614, "Member 'AWindManager_C::Wind_Cyl_Mesh_Array_Match_Index' has a wrong offset!");
static_assert(offsetof(AWindManager_C, Delta_Wind_Falloff_in_World_Units) == 0x000618, "Member 'AWindManager_C::Delta_Wind_Falloff_in_World_Units' has a wrong offset!");
static_assert(offsetof(AWindManager_C, NewVar_1) == 0x00061C, "Member 'AWindManager_C::NewVar_1' has a wrong offset!");

}

