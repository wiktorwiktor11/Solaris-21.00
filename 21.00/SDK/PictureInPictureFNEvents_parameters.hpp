#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PictureInPictureFNEvents

#include "Basic.hpp"

#include "PictureInPictureDescriptors_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK::Params
{

// Function PictureInPictureFNEvents.LiveEventHUDAd.ShowAdvertisement
// 0x0001 (0x0001 - 0x0000)
struct LiveEventHUDAd_ShowAdvertisement final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LiveEventHUDAd_ShowAdvertisement) == 0x000001, "Wrong alignment on LiveEventHUDAd_ShowAdvertisement");
static_assert(sizeof(LiveEventHUDAd_ShowAdvertisement) == 0x000001, "Wrong size on LiveEventHUDAd_ShowAdvertisement");
static_assert(offsetof(LiveEventHUDAd_ShowAdvertisement, Result) == 0x000000, "Member 'LiveEventHUDAd_ShowAdvertisement::Result' has a wrong offset!");

// Function PictureInPictureFNEvents.PictureInPictureFNEventsCheatManager.AddPiPEvent
// 0x0020 (0x0020 - 0x0000)
struct PictureInPictureFNEventsCheatManager_AddPiPEvent final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VUID;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureFNEventsCheatManager_AddPiPEvent) == 0x000008, "Wrong alignment on PictureInPictureFNEventsCheatManager_AddPiPEvent");
static_assert(sizeof(PictureInPictureFNEventsCheatManager_AddPiPEvent) == 0x000020, "Wrong size on PictureInPictureFNEventsCheatManager_AddPiPEvent");
static_assert(offsetof(PictureInPictureFNEventsCheatManager_AddPiPEvent, EventName) == 0x000000, "Member 'PictureInPictureFNEventsCheatManager_AddPiPEvent::EventName' has a wrong offset!");
static_assert(offsetof(PictureInPictureFNEventsCheatManager_AddPiPEvent, VUID) == 0x000010, "Member 'PictureInPictureFNEventsCheatManager_AddPiPEvent::VUID' has a wrong offset!");

// Function PictureInPictureFNEvents.PictureInPictureFNEventsCheatManager.RemovePiPEvent
// 0x0010 (0x0010 - 0x0000)
struct PictureInPictureFNEventsCheatManager_RemovePiPEvent final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureFNEventsCheatManager_RemovePiPEvent) == 0x000008, "Wrong alignment on PictureInPictureFNEventsCheatManager_RemovePiPEvent");
static_assert(sizeof(PictureInPictureFNEventsCheatManager_RemovePiPEvent) == 0x000010, "Wrong size on PictureInPictureFNEventsCheatManager_RemovePiPEvent");
static_assert(offsetof(PictureInPictureFNEventsCheatManager_RemovePiPEvent, EventName) == 0x000000, "Member 'PictureInPictureFNEventsCheatManager_RemovePiPEvent::EventName' has a wrong offset!");

// Function PictureInPictureFNEvents.PictureInPictureFNEventsCheatManager.SelectPiPEvent
// 0x0010 (0x0010 - 0x0000)
struct PictureInPictureFNEventsCheatManager_SelectPiPEvent final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureFNEventsCheatManager_SelectPiPEvent) == 0x000008, "Wrong alignment on PictureInPictureFNEventsCheatManager_SelectPiPEvent");
static_assert(sizeof(PictureInPictureFNEventsCheatManager_SelectPiPEvent) == 0x000010, "Wrong size on PictureInPictureFNEventsCheatManager_SelectPiPEvent");
static_assert(offsetof(PictureInPictureFNEventsCheatManager_SelectPiPEvent, EventName) == 0x000000, "Member 'PictureInPictureFNEventsCheatManager_SelectPiPEvent::EventName' has a wrong offset!");

// Function PictureInPictureFNEvents.PictureInPictureFNEventsController.AddPartnerActionAnalytics
// 0x0018 (0x0018 - 0x0000)
struct PictureInPictureFNEventsController_AddPartnerActionAnalytics final
{
public:
	class FString                                 InPartnerName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPictureInPictureAction                       InActionType;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PictureInPictureFNEventsController_AddPartnerActionAnalytics) == 0x000008, "Wrong alignment on PictureInPictureFNEventsController_AddPartnerActionAnalytics");
static_assert(sizeof(PictureInPictureFNEventsController_AddPartnerActionAnalytics) == 0x000018, "Wrong size on PictureInPictureFNEventsController_AddPartnerActionAnalytics");
static_assert(offsetof(PictureInPictureFNEventsController_AddPartnerActionAnalytics, InPartnerName) == 0x000000, "Member 'PictureInPictureFNEventsController_AddPartnerActionAnalytics::InPartnerName' has a wrong offset!");
static_assert(offsetof(PictureInPictureFNEventsController_AddPartnerActionAnalytics, InActionType) == 0x000010, "Member 'PictureInPictureFNEventsController_AddPartnerActionAnalytics::InActionType' has a wrong offset!");

// Function PictureInPictureFNEvents.PictureInPictureFNEventsController.HandleFNMediaEventsStreams
// 0x0060 (0x0060 - 0x0000)
struct PictureInPictureFNEventsController_HandleFNMediaEventsStreams final
{
public:
	struct FFortMediaEventsStreamAssets           VideoStreamAssets;                                 // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureFNEventsController_HandleFNMediaEventsStreams) == 0x000008, "Wrong alignment on PictureInPictureFNEventsController_HandleFNMediaEventsStreams");
static_assert(sizeof(PictureInPictureFNEventsController_HandleFNMediaEventsStreams) == 0x000060, "Wrong size on PictureInPictureFNEventsController_HandleFNMediaEventsStreams");
static_assert(offsetof(PictureInPictureFNEventsController_HandleFNMediaEventsStreams, VideoStreamAssets) == 0x000000, "Member 'PictureInPictureFNEventsController_HandleFNMediaEventsStreams::VideoStreamAssets' has a wrong offset!");

// Function PictureInPictureFNEvents.PictureInPictureFNEventsController.HandleFNMediaRemoveEventsStream
// 0x0010 (0x0010 - 0x0000)
struct PictureInPictureFNEventsController_HandleFNMediaRemoveEventsStream final
{
public:
	class FString                                 InEventName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureFNEventsController_HandleFNMediaRemoveEventsStream) == 0x000008, "Wrong alignment on PictureInPictureFNEventsController_HandleFNMediaRemoveEventsStream");
static_assert(sizeof(PictureInPictureFNEventsController_HandleFNMediaRemoveEventsStream) == 0x000010, "Wrong size on PictureInPictureFNEventsController_HandleFNMediaRemoveEventsStream");
static_assert(offsetof(PictureInPictureFNEventsController_HandleFNMediaRemoveEventsStream, InEventName) == 0x000000, "Member 'PictureInPictureFNEventsController_HandleFNMediaRemoveEventsStream::InEventName' has a wrong offset!");

// Function PictureInPictureFNEvents.PictureInPictureFNEventsController.UpdateClientLoginState
// 0x0010 (0x0010 - 0x0000)
struct PictureInPictureFNEventsController_UpdateClientLoginState final
{
public:
	TArray<struct FPiPPartnerSource>              UpdatedSources;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureFNEventsController_UpdateClientLoginState) == 0x000008, "Wrong alignment on PictureInPictureFNEventsController_UpdateClientLoginState");
static_assert(sizeof(PictureInPictureFNEventsController_UpdateClientLoginState) == 0x000010, "Wrong size on PictureInPictureFNEventsController_UpdateClientLoginState");
static_assert(offsetof(PictureInPictureFNEventsController_UpdateClientLoginState, UpdatedSources) == 0x000000, "Member 'PictureInPictureFNEventsController_UpdateClientLoginState::UpdatedSources' has a wrong offset!");

}

