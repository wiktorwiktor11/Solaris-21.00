#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VideoMeshTrigger

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "MeshNetwork_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_VideoMeshTrigger.BP_VideoMeshTrigger_C
// 0x04A0 (0x0710 - 0x0270)
class ABP_VideoMeshTrigger_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0270(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UMeshNetworkComponent*                  MeshNetwork;                                       // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              PlayUTCTime;                                       // 0x0288(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         PlayServerTimeSeconds;                             // 0x0290(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         VideoPlayStartTime;                                // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(float PlayStartTime, const class FString& VideoUID, const class FString& ScreenName, bool LIVE, const class FString& RegionData)> onReadyToPlay;                                     // 0x0298(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(const class FString& VideoScreen, bool LeaveScreen, const class FString& RegionData)> onStopPlayback;                                    // 0x02A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FDateTime                              StopUTCTime;                                       // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         MinutesBetweenPlays;                               // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         MinBetweenPlays;                                   // 0x02C8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FDateTime                              StartWarmingUTCTime;                               // 0x02F0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         StartWarmingServerTimeSeconds;                     // 0x02F8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(float StartWarmingTime, const class FString& ScreenName, bool SimpleWarming, const class FString& RegionData)> onStartWarming;                                    // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         VideoWarmingStartTime;                             // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LoopVideo;                                         // 0x0314(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_315[0x3];                                      // 0x0315(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const class FString& ScreenName, const class FString& RegionData)> onEnableLoopVideo;                                 // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(const class FString& ScreenName, const class FString& RegionData)> onDisableLoopVideo;                                // 0x0328(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class FString                                 VideoUID;                                          // 0x0338(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 ScreenName;                                        // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	struct FDateTime                              RootUtcTime;                                       // 0x0358(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(const class FString& VideoScreen, bool SimpleWarming, const class FString& RegionData)> onStopWarming;                                     // 0x0360(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         MaxBandwidth;                                      // 0x0370(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_374[0x4];                                      // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const class FString& ScreenName, int32 MaxBW, const class FString& RegionData)> onSetBandwidthLimit;                               // 0x0378(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(const class FString& ScreenName, float SeekTime, bool Exact, const class FString& RegionData)> onSeekPlayback;                                    // 0x0388(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(const class FString& ScreenName, bool Enable, const class FString& RegionData)> onSetMirrorScreen;                                 // 0x0398(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(const class FString& ScreenName, const class FString& VideoUID, bool Enable, bool LIVE, const class FString& RegionData)> OnStartPiP;                                        // 0x03A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          LeaveScreen;                                       // 0x03B8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B9[0x7];                                      // 0x03B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const class FString& Screen, int64 Counter, const class FString& RegionData)> onForcePiP;                                        // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FDateTime                              PiPPlayUTCTIme;                                    // 0x03D0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         PiPPlayerServerTimeSeconds;                        // 0x03D8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DC[0x4];                                      // 0x03DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PiPVideoUID;                                       // 0x03E0(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          PiPEnable;                                         // 0x03F0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PiPMirrorEnable;                                   // 0x03F1(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F2[0x6];                                      // 0x03F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         PiPForceCounter;                                   // 0x03F8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayWithPiP;                                       // 0x0400(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_401[0x7];                                      // 0x0401(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CDNWeights;                                        // 0x0408(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(const class FString& Weights, const class FString& RegionData)> onCDNWeights;                                      // 0x0418(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          PIPCDNDistroSet;                                   // 0x0428(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLive;                                            // 0x0429(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPIPLive;                                         // 0x042A(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42B[0x1];                                      // 0x042B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PIPVersion;                                        // 0x042C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PIPVersionOff;                                     // 0x0430(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SimpleWarming;                                     // 0x0434(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_435[0x3];                                      // 0x0435(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 WarmingCDNWeights;                                 // 0x0438(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         ScreenDistance;                                    // 0x0448(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44C[0x4];                                      // 0x044C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int32 Distance, const class FString& RegionData)> OnScreenPrio;                                      // 0x0450(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<struct FMeshRegionLockData_Float>      Region_VideoPlayStartTime;                         // 0x0460(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<struct FMeshRegionLockData_DateTime>   Region_RootUtcTime;                                // 0x0470(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	struct FMeshRegionLockData_DateTime           Region_PlayUTCTime;                                // 0x0480(0x0020)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify)
	struct FMeshRegionLockData_Float              Region_PlayServerTimeSeconds;                      // 0x04A0(0x0020)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify)
	struct FMeshRegionLockData_DateTime           Region_StartWarmingUTCTime;                        // 0x04C0(0x0020)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify)
	TArray<struct FMeshRegionLockData_Bool>       Region_LeaveScreen;                                // 0x04E0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<struct FMeshRegionLockData_Bool>       Region_IsLive;                                     // 0x04F0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<struct FMeshRegionLockData_String>     Region_VideoUID;                                   // 0x0500(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<struct FMeshRegionLockData_Int>        Region_ScreenDistance;                             // 0x0510(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify)
	TArray<struct FMeshRegionLockData_String>     Region_WarmingCDNWeights;                          // 0x0520(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<struct FMeshRegionLockData_Bool>       Region_SimpleWarming;                              // 0x0530(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	struct FMeshRegionLockData_Float              Region_StartWarmingServerTimeSeconds;              // 0x0540(0x0020)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify)
	TArray<struct FMeshRegionLockData_Float>      Region_VideoWarmingStartTime;                      // 0x0560(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	struct FMeshRegionLockData_Bool               Region_LoopVideo;                                  // 0x0570(0x0020)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify)
	struct FMeshRegionLockData_Int                Region_MaxBandwidth;                               // 0x0590(0x0020)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify)
	TArray<struct FMeshRegionLockData_Bool>       Region_PlaywithPiP;                                // 0x05B0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<struct FMeshRegionLockData_Float>      Region_SeekTime;                                   // 0x05C0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<struct FMeshRegionLockData_Int>        Region_PIPVersion;                                 // 0x05D0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<struct FMeshRegionLockData_Bool>       Region_PiPMirrorEnable;                            // 0x05E0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<struct FMeshRegionLockData_Bool>       Region_PiPEnable;                                  // 0x05F0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<struct FMeshRegionLockData_Bool>       Region_IsPIPLive;                                  // 0x0600(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	struct FMeshRegionLockData_DateTime           Region_PiPPlayUTCTime;                             // 0x0610(0x0020)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify)
	TArray<struct FMeshRegionLockData_Int64>      Region_PiPForceCounter;                            // 0x0630(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<struct FMeshRegionLockData_Bool>       Region_PIPCDNDistroSet;                            // 0x0640(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<struct FMeshRegionLockData_String>     Region_CDNWeights;                                 // 0x0650(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	struct FMeshRegionLockData_Float              Region_PiPPlayerServerTimeSeconds;                 // 0x0660(0x0020)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify)
	TArray<struct FMeshRegionLockData_String>     Region_PiPVideoUID;                                // 0x0680(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<struct FMeshRegionLockData_DateTime>   Region_PlayUTCTime_GS;                             // 0x0690(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<struct FMeshRegionLockData_DateTime>   Region_WarmingStartUTCTime_GS;                     // 0x06A0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<struct FMeshRegionLockData_Float>      Region_PlayServerTimeSeconds_GS;                   // 0x06B0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<struct FMeshRegionLockData_Float>      Region_StartWarmingServerTimeSeconds_GS;           // 0x06C0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<struct FMeshRegionLockData_Bool>       Region_LoopVideo_GS;                               // 0x06D0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<struct FMeshRegionLockData_Int>        Region_MaxBandwidth_GS;                            // 0x06E0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<struct FMeshRegionLockData_DateTime>   Region_PiPPlayUTCTime_GS;                          // 0x06F0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<struct FMeshRegionLockData_Float>      Region_PiPPlayerServerTimeSeconds_GS;              // 0x0700(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)

public:
	void RootStopVideo(const class FString& ScreenName_0, bool LeaveScreen_0, const class FString& RegionData);
	void RootStartWarming(const class FString& ScreenName_0, bool Enable, bool Simple, const class FString& CDNWeights_0, const class FString& RegionData);
	void RootStartPiP(const class FString& ScreenName_0, const class FString& VideoUID_0, bool Enable, bool LIVE, const class FString& RegionData);
	void RootSetScreenPrio(const class FString& ScreenName_0, int32 Distance, const class FString& RegionData);
	void RootSetScreenMirror(const class FString& ScreenName_0, bool Enable, const class FString& RegionData);
	void RootSetMaxBW(const class FString& ScreenName_0, int32 MaxBW, const class FString& RegionData);
	void RootSetCDNWeights(const class FString& ScreenName_0, const class FString& Weights, bool PIPToo, bool Clear, const class FString& RegionData);
	void RootSeekVideo(const class FString& ScreenName_0, float Time, bool Exact, const class FString& RegionData);
	void RootPlayVideo(const class FString& ScreenName_0, const class FString& VideoUID_0, int32 PIP, bool LIVE, int32 Distance, const class FString& RegionData);
	void RootForcePiP(const class FString& ScreenName_0, int64 Counter, const class FString& RegionData);
	void RootEnableLoopVideo(const class FString& ScreenName_0, const class FString& RegionData);
	void RootDisableLoopVideo(const class FString& ScreenName_0, const class FString& RegionData);
	void RootClearAllData(const class FString& ScreeName);
	void ReceiveBeginPlay();
	void PrintIncomingData(const class FString& ScreenName_0, const class FString& VideoUID_0, const class FString& Command);
	void PIPAlso_Version(int32 Version, bool LIVE, const class FString& VUID, bool Enable, const class FString& RegionData);
	void OnRep_StartWarmingUTCTime();
	void OnRep_StartWarmingServerTimeSeconds();
	void OnRep_ScreenName();
	void OnRep_ScreenDistance();
	void OnRep_Region_StartWarmingUTCTime();
	void OnRep_Region_StartWarmingServerTimeSeconds();
	void OnRep_Region_ScreenDistance();
	void OnRep_Region_PlayUTCTime();
	void OnRep_Region_PlayServerTimeSeconds();
	void OnRep_Region_PiPPlayUTCTime();
	void OnRep_Region_PiPPlayerServerTimeSeconds();
	void OnRep_Region_MaxBandwidth();
	void OnRep_Region_LoopVideo();
	void OnRep_PlayUTCTime();
	void OnRep_PlayServerTimeSeconds();
	void OnRep_PiPPlayUTCTIme();
	void OnRep_PiPPlayerServerTimeSeconds();
	void OnRep_MaxBandwidth();
	void OnRep_LoopVideo();
	void ExecuteUbergraph_BP_VideoMeshTrigger(int32 EntryPoint);
	void CheckScreen(const class FString& ScreenName_0, bool* ThisScreen);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_VideoMeshTrigger_C">();
	}
	static class ABP_VideoMeshTrigger_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_VideoMeshTrigger_C>();
	}
};
static_assert(alignof(ABP_VideoMeshTrigger_C) == 0x000008, "Wrong alignment on ABP_VideoMeshTrigger_C");
static_assert(sizeof(ABP_VideoMeshTrigger_C) == 0x000710, "Wrong size on ABP_VideoMeshTrigger_C");
static_assert(offsetof(ABP_VideoMeshTrigger_C, UberGraphFrame) == 0x000270, "Member 'ABP_VideoMeshTrigger_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, MeshNetwork) == 0x000278, "Member 'ABP_VideoMeshTrigger_C::MeshNetwork' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, DefaultSceneRoot) == 0x000280, "Member 'ABP_VideoMeshTrigger_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, PlayUTCTime) == 0x000288, "Member 'ABP_VideoMeshTrigger_C::PlayUTCTime' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, PlayServerTimeSeconds) == 0x000290, "Member 'ABP_VideoMeshTrigger_C::PlayServerTimeSeconds' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, VideoPlayStartTime) == 0x000294, "Member 'ABP_VideoMeshTrigger_C::VideoPlayStartTime' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, onReadyToPlay) == 0x000298, "Member 'ABP_VideoMeshTrigger_C::onReadyToPlay' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, onStopPlayback) == 0x0002A8, "Member 'ABP_VideoMeshTrigger_C::onStopPlayback' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, StopUTCTime) == 0x0002B8, "Member 'ABP_VideoMeshTrigger_C::StopUTCTime' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, MinutesBetweenPlays) == 0x0002C0, "Member 'ABP_VideoMeshTrigger_C::MinutesBetweenPlays' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, MinBetweenPlays) == 0x0002C8, "Member 'ABP_VideoMeshTrigger_C::MinBetweenPlays' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, StartWarmingUTCTime) == 0x0002F0, "Member 'ABP_VideoMeshTrigger_C::StartWarmingUTCTime' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, StartWarmingServerTimeSeconds) == 0x0002F8, "Member 'ABP_VideoMeshTrigger_C::StartWarmingServerTimeSeconds' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, onStartWarming) == 0x000300, "Member 'ABP_VideoMeshTrigger_C::onStartWarming' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, VideoWarmingStartTime) == 0x000310, "Member 'ABP_VideoMeshTrigger_C::VideoWarmingStartTime' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, LoopVideo) == 0x000314, "Member 'ABP_VideoMeshTrigger_C::LoopVideo' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, onEnableLoopVideo) == 0x000318, "Member 'ABP_VideoMeshTrigger_C::onEnableLoopVideo' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, onDisableLoopVideo) == 0x000328, "Member 'ABP_VideoMeshTrigger_C::onDisableLoopVideo' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, VideoUID) == 0x000338, "Member 'ABP_VideoMeshTrigger_C::VideoUID' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, ScreenName) == 0x000348, "Member 'ABP_VideoMeshTrigger_C::ScreenName' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, RootUtcTime) == 0x000358, "Member 'ABP_VideoMeshTrigger_C::RootUtcTime' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, onStopWarming) == 0x000360, "Member 'ABP_VideoMeshTrigger_C::onStopWarming' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, MaxBandwidth) == 0x000370, "Member 'ABP_VideoMeshTrigger_C::MaxBandwidth' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, onSetBandwidthLimit) == 0x000378, "Member 'ABP_VideoMeshTrigger_C::onSetBandwidthLimit' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, onSeekPlayback) == 0x000388, "Member 'ABP_VideoMeshTrigger_C::onSeekPlayback' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, onSetMirrorScreen) == 0x000398, "Member 'ABP_VideoMeshTrigger_C::onSetMirrorScreen' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, OnStartPiP) == 0x0003A8, "Member 'ABP_VideoMeshTrigger_C::OnStartPiP' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, LeaveScreen) == 0x0003B8, "Member 'ABP_VideoMeshTrigger_C::LeaveScreen' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, onForcePiP) == 0x0003C0, "Member 'ABP_VideoMeshTrigger_C::onForcePiP' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, PiPPlayUTCTIme) == 0x0003D0, "Member 'ABP_VideoMeshTrigger_C::PiPPlayUTCTIme' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, PiPPlayerServerTimeSeconds) == 0x0003D8, "Member 'ABP_VideoMeshTrigger_C::PiPPlayerServerTimeSeconds' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, PiPVideoUID) == 0x0003E0, "Member 'ABP_VideoMeshTrigger_C::PiPVideoUID' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, PiPEnable) == 0x0003F0, "Member 'ABP_VideoMeshTrigger_C::PiPEnable' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, PiPMirrorEnable) == 0x0003F1, "Member 'ABP_VideoMeshTrigger_C::PiPMirrorEnable' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, PiPForceCounter) == 0x0003F8, "Member 'ABP_VideoMeshTrigger_C::PiPForceCounter' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, PlayWithPiP) == 0x000400, "Member 'ABP_VideoMeshTrigger_C::PlayWithPiP' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, CDNWeights) == 0x000408, "Member 'ABP_VideoMeshTrigger_C::CDNWeights' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, onCDNWeights) == 0x000418, "Member 'ABP_VideoMeshTrigger_C::onCDNWeights' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, PIPCDNDistroSet) == 0x000428, "Member 'ABP_VideoMeshTrigger_C::PIPCDNDistroSet' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, IsLive) == 0x000429, "Member 'ABP_VideoMeshTrigger_C::IsLive' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, IsPIPLive) == 0x00042A, "Member 'ABP_VideoMeshTrigger_C::IsPIPLive' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, PIPVersion) == 0x00042C, "Member 'ABP_VideoMeshTrigger_C::PIPVersion' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, PIPVersionOff) == 0x000430, "Member 'ABP_VideoMeshTrigger_C::PIPVersionOff' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, SimpleWarming) == 0x000434, "Member 'ABP_VideoMeshTrigger_C::SimpleWarming' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, WarmingCDNWeights) == 0x000438, "Member 'ABP_VideoMeshTrigger_C::WarmingCDNWeights' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, ScreenDistance) == 0x000448, "Member 'ABP_VideoMeshTrigger_C::ScreenDistance' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, OnScreenPrio) == 0x000450, "Member 'ABP_VideoMeshTrigger_C::OnScreenPrio' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, Region_VideoPlayStartTime) == 0x000460, "Member 'ABP_VideoMeshTrigger_C::Region_VideoPlayStartTime' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, Region_RootUtcTime) == 0x000470, "Member 'ABP_VideoMeshTrigger_C::Region_RootUtcTime' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, Region_PlayUTCTime) == 0x000480, "Member 'ABP_VideoMeshTrigger_C::Region_PlayUTCTime' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, Region_PlayServerTimeSeconds) == 0x0004A0, "Member 'ABP_VideoMeshTrigger_C::Region_PlayServerTimeSeconds' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, Region_StartWarmingUTCTime) == 0x0004C0, "Member 'ABP_VideoMeshTrigger_C::Region_StartWarmingUTCTime' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, Region_LeaveScreen) == 0x0004E0, "Member 'ABP_VideoMeshTrigger_C::Region_LeaveScreen' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, Region_IsLive) == 0x0004F0, "Member 'ABP_VideoMeshTrigger_C::Region_IsLive' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, Region_VideoUID) == 0x000500, "Member 'ABP_VideoMeshTrigger_C::Region_VideoUID' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, Region_ScreenDistance) == 0x000510, "Member 'ABP_VideoMeshTrigger_C::Region_ScreenDistance' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, Region_WarmingCDNWeights) == 0x000520, "Member 'ABP_VideoMeshTrigger_C::Region_WarmingCDNWeights' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, Region_SimpleWarming) == 0x000530, "Member 'ABP_VideoMeshTrigger_C::Region_SimpleWarming' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, Region_StartWarmingServerTimeSeconds) == 0x000540, "Member 'ABP_VideoMeshTrigger_C::Region_StartWarmingServerTimeSeconds' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, Region_VideoWarmingStartTime) == 0x000560, "Member 'ABP_VideoMeshTrigger_C::Region_VideoWarmingStartTime' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, Region_LoopVideo) == 0x000570, "Member 'ABP_VideoMeshTrigger_C::Region_LoopVideo' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, Region_MaxBandwidth) == 0x000590, "Member 'ABP_VideoMeshTrigger_C::Region_MaxBandwidth' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, Region_PlaywithPiP) == 0x0005B0, "Member 'ABP_VideoMeshTrigger_C::Region_PlaywithPiP' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, Region_SeekTime) == 0x0005C0, "Member 'ABP_VideoMeshTrigger_C::Region_SeekTime' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, Region_PIPVersion) == 0x0005D0, "Member 'ABP_VideoMeshTrigger_C::Region_PIPVersion' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, Region_PiPMirrorEnable) == 0x0005E0, "Member 'ABP_VideoMeshTrigger_C::Region_PiPMirrorEnable' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, Region_PiPEnable) == 0x0005F0, "Member 'ABP_VideoMeshTrigger_C::Region_PiPEnable' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, Region_IsPIPLive) == 0x000600, "Member 'ABP_VideoMeshTrigger_C::Region_IsPIPLive' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, Region_PiPPlayUTCTime) == 0x000610, "Member 'ABP_VideoMeshTrigger_C::Region_PiPPlayUTCTime' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, Region_PiPForceCounter) == 0x000630, "Member 'ABP_VideoMeshTrigger_C::Region_PiPForceCounter' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, Region_PIPCDNDistroSet) == 0x000640, "Member 'ABP_VideoMeshTrigger_C::Region_PIPCDNDistroSet' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, Region_CDNWeights) == 0x000650, "Member 'ABP_VideoMeshTrigger_C::Region_CDNWeights' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, Region_PiPPlayerServerTimeSeconds) == 0x000660, "Member 'ABP_VideoMeshTrigger_C::Region_PiPPlayerServerTimeSeconds' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, Region_PiPVideoUID) == 0x000680, "Member 'ABP_VideoMeshTrigger_C::Region_PiPVideoUID' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, Region_PlayUTCTime_GS) == 0x000690, "Member 'ABP_VideoMeshTrigger_C::Region_PlayUTCTime_GS' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, Region_WarmingStartUTCTime_GS) == 0x0006A0, "Member 'ABP_VideoMeshTrigger_C::Region_WarmingStartUTCTime_GS' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, Region_PlayServerTimeSeconds_GS) == 0x0006B0, "Member 'ABP_VideoMeshTrigger_C::Region_PlayServerTimeSeconds_GS' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, Region_StartWarmingServerTimeSeconds_GS) == 0x0006C0, "Member 'ABP_VideoMeshTrigger_C::Region_StartWarmingServerTimeSeconds_GS' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, Region_LoopVideo_GS) == 0x0006D0, "Member 'ABP_VideoMeshTrigger_C::Region_LoopVideo_GS' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, Region_MaxBandwidth_GS) == 0x0006E0, "Member 'ABP_VideoMeshTrigger_C::Region_MaxBandwidth_GS' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, Region_PiPPlayUTCTime_GS) == 0x0006F0, "Member 'ABP_VideoMeshTrigger_C::Region_PiPPlayUTCTime_GS' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, Region_PiPPlayerServerTimeSeconds_GS) == 0x000700, "Member 'ABP_VideoMeshTrigger_C::Region_PiPPlayerServerTimeSeconds_GS' has a wrong offset!");

}

