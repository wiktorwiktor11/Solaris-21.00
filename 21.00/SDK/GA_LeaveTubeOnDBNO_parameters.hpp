#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_LeaveTubeOnDBNO

#include "Basic.hpp"


namespace SDK::Params
{

// Function GA_LeaveTubeOnDBNO.GA_LeaveTubeOnDBNO_C.K2_OnEndAbility
// 0x0001 (0x0001 - 0x0000)
struct GA_LeaveTubeOnDBNO_C_K2_OnEndAbility final
{
public:
	bool                                          bWasCancelled;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_LeaveTubeOnDBNO_C_K2_OnEndAbility) == 0x000001, "Wrong alignment on GA_LeaveTubeOnDBNO_C_K2_OnEndAbility");
static_assert(sizeof(GA_LeaveTubeOnDBNO_C_K2_OnEndAbility) == 0x000001, "Wrong size on GA_LeaveTubeOnDBNO_C_K2_OnEndAbility");
static_assert(offsetof(GA_LeaveTubeOnDBNO_C_K2_OnEndAbility, bWasCancelled) == 0x000000, "Member 'GA_LeaveTubeOnDBNO_C_K2_OnEndAbility::bWasCancelled' has a wrong offset!");

// Function GA_LeaveTubeOnDBNO.GA_LeaveTubeOnDBNO_C.ExecuteUbergraph_GA_LeaveTubeOnDBNO
// 0x0058 (0x0058 - 0x0000)
struct GA_LeaveTubeOnDBNO_C_ExecuteUbergraph_GA_LeaveTubeOnDBNO final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponent_ReturnValue;    // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortSkyTube*                           CallFunc_GetCurrentSkyTube_ReturnValue;            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ExitSkyTube_bOutIsLastTube;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AFortPawn* FortPawn, bool bInIsDBNO)> K2Node_CreateDelegate_OutputDelegate;              // 0x001C(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bWasCancelled;                        // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue;  // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        K2Node_DynamicCast_AsFort_Player_Pawn;             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPawn*                              K2Node_CustomEvent_FortPawn;                       // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bInIsDBNO;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_LeaveTubeOnDBNO_C_ExecuteUbergraph_GA_LeaveTubeOnDBNO) == 0x000008, "Wrong alignment on GA_LeaveTubeOnDBNO_C_ExecuteUbergraph_GA_LeaveTubeOnDBNO");
static_assert(sizeof(GA_LeaveTubeOnDBNO_C_ExecuteUbergraph_GA_LeaveTubeOnDBNO) == 0x000058, "Wrong size on GA_LeaveTubeOnDBNO_C_ExecuteUbergraph_GA_LeaveTubeOnDBNO");
static_assert(offsetof(GA_LeaveTubeOnDBNO_C_ExecuteUbergraph_GA_LeaveTubeOnDBNO, EntryPoint) == 0x000000, "Member 'GA_LeaveTubeOnDBNO_C_ExecuteUbergraph_GA_LeaveTubeOnDBNO::EntryPoint' has a wrong offset!");
static_assert(offsetof(GA_LeaveTubeOnDBNO_C_ExecuteUbergraph_GA_LeaveTubeOnDBNO, CallFunc_GetAbilitySystemComponent_ReturnValue) == 0x000008, "Member 'GA_LeaveTubeOnDBNO_C_ExecuteUbergraph_GA_LeaveTubeOnDBNO::CallFunc_GetAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_LeaveTubeOnDBNO_C_ExecuteUbergraph_GA_LeaveTubeOnDBNO, CallFunc_GetCurrentSkyTube_ReturnValue) == 0x000010, "Member 'GA_LeaveTubeOnDBNO_C_ExecuteUbergraph_GA_LeaveTubeOnDBNO::CallFunc_GetCurrentSkyTube_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_LeaveTubeOnDBNO_C_ExecuteUbergraph_GA_LeaveTubeOnDBNO, CallFunc_ExitSkyTube_bOutIsLastTube) == 0x000018, "Member 'GA_LeaveTubeOnDBNO_C_ExecuteUbergraph_GA_LeaveTubeOnDBNO::CallFunc_ExitSkyTube_bOutIsLastTube' has a wrong offset!");
static_assert(offsetof(GA_LeaveTubeOnDBNO_C_ExecuteUbergraph_GA_LeaveTubeOnDBNO, K2Node_CreateDelegate_OutputDelegate) == 0x00001C, "Member 'GA_LeaveTubeOnDBNO_C_ExecuteUbergraph_GA_LeaveTubeOnDBNO::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GA_LeaveTubeOnDBNO_C_ExecuteUbergraph_GA_LeaveTubeOnDBNO, K2Node_Event_bWasCancelled) == 0x000028, "Member 'GA_LeaveTubeOnDBNO_C_ExecuteUbergraph_GA_LeaveTubeOnDBNO::K2Node_Event_bWasCancelled' has a wrong offset!");
static_assert(offsetof(GA_LeaveTubeOnDBNO_C_ExecuteUbergraph_GA_LeaveTubeOnDBNO, CallFunc_GetAvatarActorFromActorInfo_ReturnValue) == 0x000030, "Member 'GA_LeaveTubeOnDBNO_C_ExecuteUbergraph_GA_LeaveTubeOnDBNO::CallFunc_GetAvatarActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_LeaveTubeOnDBNO_C_ExecuteUbergraph_GA_LeaveTubeOnDBNO, K2Node_DynamicCast_AsFort_Player_Pawn) == 0x000038, "Member 'GA_LeaveTubeOnDBNO_C_ExecuteUbergraph_GA_LeaveTubeOnDBNO::K2Node_DynamicCast_AsFort_Player_Pawn' has a wrong offset!");
static_assert(offsetof(GA_LeaveTubeOnDBNO_C_ExecuteUbergraph_GA_LeaveTubeOnDBNO, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'GA_LeaveTubeOnDBNO_C_ExecuteUbergraph_GA_LeaveTubeOnDBNO::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_LeaveTubeOnDBNO_C_ExecuteUbergraph_GA_LeaveTubeOnDBNO, K2Node_CustomEvent_FortPawn) == 0x000048, "Member 'GA_LeaveTubeOnDBNO_C_ExecuteUbergraph_GA_LeaveTubeOnDBNO::K2Node_CustomEvent_FortPawn' has a wrong offset!");
static_assert(offsetof(GA_LeaveTubeOnDBNO_C_ExecuteUbergraph_GA_LeaveTubeOnDBNO, K2Node_CustomEvent_bInIsDBNO) == 0x000050, "Member 'GA_LeaveTubeOnDBNO_C_ExecuteUbergraph_GA_LeaveTubeOnDBNO::K2Node_CustomEvent_bInIsDBNO' has a wrong offset!");

// Function GA_LeaveTubeOnDBNO.GA_LeaveTubeOnDBNO_C.DownButNotOut
// 0x0010 (0x0010 - 0x0000)
struct GA_LeaveTubeOnDBNO_C_DownButNotOut final
{
public:
	class AFortPawn*                              FortPawn;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInIsDBNO;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_LeaveTubeOnDBNO_C_DownButNotOut) == 0x000008, "Wrong alignment on GA_LeaveTubeOnDBNO_C_DownButNotOut");
static_assert(sizeof(GA_LeaveTubeOnDBNO_C_DownButNotOut) == 0x000010, "Wrong size on GA_LeaveTubeOnDBNO_C_DownButNotOut");
static_assert(offsetof(GA_LeaveTubeOnDBNO_C_DownButNotOut, FortPawn) == 0x000000, "Member 'GA_LeaveTubeOnDBNO_C_DownButNotOut::FortPawn' has a wrong offset!");
static_assert(offsetof(GA_LeaveTubeOnDBNO_C_DownButNotOut, bInIsDBNO) == 0x000008, "Member 'GA_LeaveTubeOnDBNO_C_DownButNotOut::bInIsDBNO' has a wrong offset!");

}

