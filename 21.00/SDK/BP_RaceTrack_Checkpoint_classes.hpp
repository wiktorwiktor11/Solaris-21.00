#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RaceTrack_Checkpoint

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_RaceTrack_Checkpoint.BP_RaceTrack_Checkpoint_C
// 0x00B0 (0x0320 - 0x0270)
class ABP_RaceTrack_Checkpoint_C final : public AFortStaticReplicatedActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0270(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        CheckPointParticles;                               // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_HalfTube_Thin;                                  // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CheckPointVisuals;                                 // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          CollisionExtents;                                  // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class AFortPlayerPawn*>                RacersThroughCheckpoint;                           // 0x02A0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class ABP_RaceTrack_Checkpoint_C*             PreviousCheckpointBP;                              // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FirstCP;                                           // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_RaceTrack_Checkpoint_C*             FinalCheckpointBP_BeforeFinish;                    // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_RaceTrack_C*                        RaceTrackBP;                                       // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 RacerStartTime;                                    // 0x02D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<float>                                 RacerTotalTime;                                    // 0x02E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class AFortPlayerPawn*>                FinishedRacers;                                    // 0x02F0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class AFortPlayerPawn*>                DisqualifiedRacers;                                // 0x0300(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          UseGreenlightAsStartTime;                          // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_311[0x7];                                      // 0x0311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        CurrentPawnBeingChecked;                           // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ExecuteUbergraph_BP_RaceTrack_Checkpoint(int32 EntryPoint);
	void ResetCheckpoint(bool EnableCollision);
	void UpdateCheckpointFX(bool FX_Visibility, class AFortPlayerPawn* FPP_01);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_RaceTrack_Checkpoint_C">();
	}
	static class ABP_RaceTrack_Checkpoint_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_RaceTrack_Checkpoint_C>();
	}
};
static_assert(alignof(ABP_RaceTrack_Checkpoint_C) == 0x000008, "Wrong alignment on ABP_RaceTrack_Checkpoint_C");
static_assert(sizeof(ABP_RaceTrack_Checkpoint_C) == 0x000320, "Wrong size on ABP_RaceTrack_Checkpoint_C");
static_assert(offsetof(ABP_RaceTrack_Checkpoint_C, UberGraphFrame) == 0x000270, "Member 'ABP_RaceTrack_Checkpoint_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_RaceTrack_Checkpoint_C, CheckPointParticles) == 0x000278, "Member 'ABP_RaceTrack_Checkpoint_C::CheckPointParticles' has a wrong offset!");
static_assert(offsetof(ABP_RaceTrack_Checkpoint_C, SM_HalfTube_Thin) == 0x000280, "Member 'ABP_RaceTrack_Checkpoint_C::SM_HalfTube_Thin' has a wrong offset!");
static_assert(offsetof(ABP_RaceTrack_Checkpoint_C, CheckPointVisuals) == 0x000288, "Member 'ABP_RaceTrack_Checkpoint_C::CheckPointVisuals' has a wrong offset!");
static_assert(offsetof(ABP_RaceTrack_Checkpoint_C, CollisionExtents) == 0x000290, "Member 'ABP_RaceTrack_Checkpoint_C::CollisionExtents' has a wrong offset!");
static_assert(offsetof(ABP_RaceTrack_Checkpoint_C, DefaultSceneRoot) == 0x000298, "Member 'ABP_RaceTrack_Checkpoint_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_RaceTrack_Checkpoint_C, RacersThroughCheckpoint) == 0x0002A0, "Member 'ABP_RaceTrack_Checkpoint_C::RacersThroughCheckpoint' has a wrong offset!");
static_assert(offsetof(ABP_RaceTrack_Checkpoint_C, PreviousCheckpointBP) == 0x0002B0, "Member 'ABP_RaceTrack_Checkpoint_C::PreviousCheckpointBP' has a wrong offset!");
static_assert(offsetof(ABP_RaceTrack_Checkpoint_C, FirstCP) == 0x0002B8, "Member 'ABP_RaceTrack_Checkpoint_C::FirstCP' has a wrong offset!");
static_assert(offsetof(ABP_RaceTrack_Checkpoint_C, FinalCheckpointBP_BeforeFinish) == 0x0002C0, "Member 'ABP_RaceTrack_Checkpoint_C::FinalCheckpointBP_BeforeFinish' has a wrong offset!");
static_assert(offsetof(ABP_RaceTrack_Checkpoint_C, RaceTrackBP) == 0x0002C8, "Member 'ABP_RaceTrack_Checkpoint_C::RaceTrackBP' has a wrong offset!");
static_assert(offsetof(ABP_RaceTrack_Checkpoint_C, RacerStartTime) == 0x0002D0, "Member 'ABP_RaceTrack_Checkpoint_C::RacerStartTime' has a wrong offset!");
static_assert(offsetof(ABP_RaceTrack_Checkpoint_C, RacerTotalTime) == 0x0002E0, "Member 'ABP_RaceTrack_Checkpoint_C::RacerTotalTime' has a wrong offset!");
static_assert(offsetof(ABP_RaceTrack_Checkpoint_C, FinishedRacers) == 0x0002F0, "Member 'ABP_RaceTrack_Checkpoint_C::FinishedRacers' has a wrong offset!");
static_assert(offsetof(ABP_RaceTrack_Checkpoint_C, DisqualifiedRacers) == 0x000300, "Member 'ABP_RaceTrack_Checkpoint_C::DisqualifiedRacers' has a wrong offset!");
static_assert(offsetof(ABP_RaceTrack_Checkpoint_C, UseGreenlightAsStartTime) == 0x000310, "Member 'ABP_RaceTrack_Checkpoint_C::UseGreenlightAsStartTime' has a wrong offset!");
static_assert(offsetof(ABP_RaceTrack_Checkpoint_C, CurrentPawnBeingChecked) == 0x000318, "Member 'ABP_RaceTrack_Checkpoint_C::CurrentPawnBeingChecked' has a wrong offset!");

}

