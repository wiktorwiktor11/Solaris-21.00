#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BuildingInfoIndicator

#include "Basic.hpp"

#include "BuildingInfoIndicator_classes.hpp"
#include "BuildingInfoIndicator_parameters.hpp"


namespace SDK
{

// Function BuildingInfoIndicator.BuildingInfoIndicator_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UBuildingInfoIndicator_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingInfoIndicator_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BuildingInfoIndicator.BuildingInfoIndicator_C.CustomEvent_0
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFortFocusedBuildingInfo         FocusedBuildingInfo                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void UBuildingInfoIndicator_C::CustomEvent_0(const struct FFortFocusedBuildingInfo& FocusedBuildingInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingInfoIndicator_C", "CustomEvent_0");

	Params::BuildingInfoIndicator_C_CustomEvent_0 Parms{};

	Parms.FocusedBuildingInfo = std::move(FocusedBuildingInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BuildingInfoIndicator.BuildingInfoIndicator_C.ExecuteUbergraph_BuildingInfoIndicator
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBuildingInfoIndicator_C::ExecuteUbergraph_BuildingInfoIndicator(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingInfoIndicator_C", "ExecuteUbergraph_BuildingInfoIndicator");

	Params::BuildingInfoIndicator_C_ExecuteUbergraph_BuildingInfoIndicator Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BuildingInfoIndicator.BuildingInfoIndicator_C.HandleAttachedTrapChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABuildingTrap*                    BuildingTrap                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBuildingInfoIndicator_C::HandleAttachedTrapChanged(class ABuildingTrap* BuildingTrap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingInfoIndicator_C", "HandleAttachedTrapChanged");

	Params::BuildingInfoIndicator_C_HandleAttachedTrapChanged Parms{};

	Parms.BuildingTrap = BuildingTrap;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BuildingInfoIndicator.BuildingInfoIndicator_C.HandleBuildingBigHealthChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             HP_Value                                               (BlueprintVisible, BlueprintReadOnly, Parm)
// float                                   HP_Percent                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBuildingInfoIndicator_C::HandleBuildingBigHealthChanged(const class FText& HP_Value, float HP_Percent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingInfoIndicator_C", "HandleBuildingBigHealthChanged");

	Params::BuildingInfoIndicator_C_HandleBuildingBigHealthChanged Parms{};

	Parms.HP_Value = std::move(HP_Value);
	Parms.HP_Percent = HP_Percent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BuildingInfoIndicator.BuildingInfoIndicator_C.HandleBuildingFocused
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABuildingActor*                   FocusedBuilding                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBuildingInfoIndicator_C::HandleBuildingFocused(class ABuildingActor* FocusedBuilding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingInfoIndicator_C", "HandleBuildingFocused");

	Params::BuildingInfoIndicator_C_HandleBuildingFocused Parms{};

	Parms.FocusedBuilding = FocusedBuilding;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BuildingInfoIndicator.BuildingInfoIndicator_C.HandleBuildingHealthChanged
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Health                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBuildingInfoIndicator_C::HandleBuildingHealthChanged(float Health)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingInfoIndicator_C", "HandleBuildingHealthChanged");

	Params::BuildingInfoIndicator_C_HandleBuildingHealthChanged Parms{};

	Parms.Health = Health;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BuildingInfoIndicator.BuildingInfoIndicator_C.HandleBuildPreviewMarkerVisibilityChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Hidden                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBuildingInfoIndicator_C::HandleBuildPreviewMarkerVisibilityChanged(bool Hidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingInfoIndicator_C", "HandleBuildPreviewMarkerVisibilityChanged");

	Params::BuildingInfoIndicator_C_HandleBuildPreviewMarkerVisibilityChanged Parms{};

	Parms.Hidden = Hidden;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BuildingInfoIndicator.BuildingInfoIndicator_C.HandlePlayerTargetingChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsTargeting                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBuildingInfoIndicator_C::HandlePlayerTargetingChanged(bool bIsTargeting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingInfoIndicator_C", "HandlePlayerTargetingChanged");

	Params::BuildingInfoIndicator_C_HandlePlayerTargetingChanged Parms{};

	Parms.bIsTargeting = bIsTargeting;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BuildingInfoIndicator.BuildingInfoIndicator_C.HandleQuickbarFocusChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EFortQuickBars                          QuickBar                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   QuickBarSlot                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBuildingInfoIndicator_C::HandleQuickbarFocusChanged(EFortQuickBars QuickBar, int32 QuickBarSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingInfoIndicator_C", "HandleQuickbarFocusChanged");

	Params::BuildingInfoIndicator_C_HandleQuickbarFocusChanged Parms{};

	Parms.QuickBar = QuickBar;
	Parms.QuickBarSlot = QuickBarSlot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BuildingInfoIndicator.BuildingInfoIndicator_C.HandleQuickEditOptionChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Building_Class_Name                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Is_Mirrored                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   Rotations                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBuildingInfoIndicator_C::HandleQuickEditOptionChanged(class FName Building_Class_Name, bool Is_Mirrored, uint8 Rotations)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingInfoIndicator_C", "HandleQuickEditOptionChanged");

	Params::BuildingInfoIndicator_C_HandleQuickEditOptionChanged Parms{};

	Parms.Building_Class_Name = Building_Class_Name;
	Parms.Is_Mirrored = Is_Mirrored;
	Parms.Rotations = Rotations;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BuildingInfoIndicator.BuildingInfoIndicator_C.HandleTrapDurabilityChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CurrentDurability                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MaxDurability                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBuildingInfoIndicator_C::HandleTrapDurabilityChanged(float CurrentDurability, float MaxDurability)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingInfoIndicator_C", "HandleTrapDurabilityChanged");

	Params::BuildingInfoIndicator_C_HandleTrapDurabilityChanged Parms{};

	Parms.CurrentDurability = CurrentDurability;
	Parms.MaxDurability = MaxDurability;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BuildingInfoIndicator.BuildingInfoIndicator_C.HideHealth
// (Public, BlueprintCallable, BlueprintEvent)

void UBuildingInfoIndicator_C::HideHealth()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingInfoIndicator_C", "HideHealth");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BuildingInfoIndicator.BuildingInfoIndicator_C.IsCurrentBuildingBeingRepaired
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBuildingInfoIndicator_C::IsCurrentBuildingBeingRepaired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingInfoIndicator_C", "IsCurrentBuildingBeingRepaired");

	Params::BuildingInfoIndicator_C_IsCurrentBuildingBeingRepaired Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BuildingInfoIndicator.BuildingInfoIndicator_C.IsCurrentWeaponTheMoveTool
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBuildingInfoIndicator_C::IsCurrentWeaponTheMoveTool(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingInfoIndicator_C", "IsCurrentWeaponTheMoveTool");

	Params::BuildingInfoIndicator_C_IsCurrentWeaponTheMoveTool Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BuildingInfoIndicator.BuildingInfoIndicator_C.OnInputTypeChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECommonInputType                        Input_Type                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBuildingInfoIndicator_C::OnInputTypeChanged(ECommonInputType Input_Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingInfoIndicator_C", "OnInputTypeChanged");

	Params::BuildingInfoIndicator_C_OnInputTypeChanged Parms{};

	Parms.Input_Type = Input_Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BuildingInfoIndicator.BuildingInfoIndicator_C.RefreshBuildingInfo
// (Public, BlueprintCallable, BlueprintEvent)

void UBuildingInfoIndicator_C::RefreshBuildingInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingInfoIndicator_C", "RefreshBuildingInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BuildingInfoIndicator.BuildingInfoIndicator_C.UpdateBuildingInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFortFocusedBuildingInfo         NewBuildingInfo                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void UBuildingInfoIndicator_C::UpdateBuildingInfo(struct FFortFocusedBuildingInfo& NewBuildingInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingInfoIndicator_C", "UpdateBuildingInfo");

	Params::BuildingInfoIndicator_C_UpdateBuildingInfo Parms{};

	Parms.NewBuildingInfo = std::move(NewBuildingInfo);

	UObject::ProcessEvent(Func, &Parms);

	NewBuildingInfo = std::move(Parms.NewBuildingInfo);
}


// Function BuildingInfoIndicator.BuildingInfoIndicator_C.UpdateBuildingInfo_InteractionWidgets
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Interactable                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CanBePlayerEdited                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsAnyTrapAttached                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsTrapAttachedFacingPlayer                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsPreviewTrapAttached                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EFortBuildingInteraction                InteractionType                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InteractionCost                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EFortResourceType                       BuildingMaterial                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBuildingInfoIndicator_C::UpdateBuildingInfo_InteractionWidgets(bool Interactable, bool CanBePlayerEdited, bool IsAnyTrapAttached, bool IsTrapAttachedFacingPlayer, bool IsPreviewTrapAttached, EFortBuildingInteraction InteractionType, int32 InteractionCost, EFortResourceType BuildingMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingInfoIndicator_C", "UpdateBuildingInfo_InteractionWidgets");

	Params::BuildingInfoIndicator_C_UpdateBuildingInfo_InteractionWidgets Parms{};

	Parms.Interactable = Interactable;
	Parms.CanBePlayerEdited = CanBePlayerEdited;
	Parms.IsAnyTrapAttached = IsAnyTrapAttached;
	Parms.IsTrapAttachedFacingPlayer = IsTrapAttachedFacingPlayer;
	Parms.IsPreviewTrapAttached = IsPreviewTrapAttached;
	Parms.InteractionType = InteractionType;
	Parms.InteractionCost = InteractionCost;
	Parms.BuildingMaterial = BuildingMaterial;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BuildingInfoIndicator.BuildingInfoIndicator_C.UpdateBuildingRepairCost
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NewInteractionCost                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBuildingInfoIndicator_C::UpdateBuildingRepairCost(int32 NewInteractionCost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingInfoIndicator_C", "UpdateBuildingRepairCost");

	Params::BuildingInfoIndicator_C_UpdateBuildingRepairCost Parms{};

	Parms.NewInteractionCost = NewInteractionCost;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BuildingInfoIndicator.BuildingInfoIndicator_C.UpdateTrapWidgets
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Place_Trap_Available                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EFortBuildingInteraction                Interaction_Type                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UKeybindWidgetDark_C*             KeyBind                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCommonTextBlock*                 Text                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBuildingInfoIndicator_C::UpdateTrapWidgets(bool Place_Trap_Available, EFortBuildingInteraction Interaction_Type, class UKeybindWidgetDark_C* KeyBind, class UCommonTextBlock* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingInfoIndicator_C", "UpdateTrapWidgets");

	Params::BuildingInfoIndicator_C_UpdateTrapWidgets Parms{};

	Parms.Place_Trap_Available = Place_Trap_Available;
	Parms.Interaction_Type = Interaction_Type;
	Parms.KeyBind = KeyBind;
	Parms.Text = Text;

	UObject::ProcessEvent(Func, &Parms);
}

}

