#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CampsiteFunctionLibrary

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Enum_Campsite_Improvements_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass CampsiteFunctionLibrary.CampsiteFunctionLibrary_C
// 0x0000 (0x0028 - 0x0028)
class UCampsiteFunctionLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static void Trajectory_Placement_Preview_Campsite(TScriptInterface<class IFortTrajectoryAbilityInterface> Target, Enum_Campsite_Improvements ImprovementType, class ABP_ProjectileTrajectory_C* TrajectoryIndicator, class ABP_ProjectileTrajectory_C* TrajectoryIndicatorRed, class APawn* ThrowingPlayerActor, bool isTrajHidden_, class UClass* Class_0, float MinDistanceFromObstacles, class UObject* __WorldContext, class ABGA_Campsite_C** target_campsite, bool* valid_);
	static void TentBouncePlayerOnHit(class AFortPlayerPawn* HitPlayerPawn, class AActor* Tent, const struct FGameplayTag& Bounce_GC, const struct FVector& Hit_Location, const struct FVector& Hit_Normal, const TArray<class AFortPlayerPawn*>& Recently_Launched, class UObject* __WorldContext, class AFortPlayerPawn** Launched_Pawn);
	static void Surface_Supports_Campsite_Deployment_(const struct FHitResult& Hit, float MinDistanceFromObstacles, class AActor* InstigatingActor, const struct FRotator& ProjRotation, class UObject* __WorldContext, bool* validSurface);
	static void Spawn_And_Establish_New_Campsite(class AFortPlayerStateAthena* Player_State_Athena, const struct FTransform& Transform, class AActor* SupportingActor, const struct FFortItemEntry& Instigating_Item, class UObject* __WorldContext, class ABGA_Campsite_C** AsBGA_Campsite);
	static struct FRotator RotatorFacingTargetAlongNormal(const struct FVector& Start, const struct FVector& Target, const struct FVector& RotationAxis, float Xdirection, class UObject* __WorldContext);
	static void Raycast_Improvement_Positioning(const struct FVector& Desired_Location, const TArray<class AActor*>& ActorsToIgnore, class UObject* __WorldContext, struct FHitResult* Hit);
	static void RandomRotationOnSurfaceNormal(const struct FVector& inputNormal, class UObject* __WorldContext, struct FRotator* Rotation);
	static void GetNearestCampsite(TArray<class ABGA_Campsite_C*>& Campsites, const struct FVector& targetLoc, class UObject* __WorldContext, class ABGA_Campsite_C** nearest_camp);
	static void Get_Nearby_Campsites(class AFortPlayerStateAthena* ReferencePlayerState, const struct FVector& InquiryLocation, const TArray<class AActor*>& ActorsToIgnore, class UObject* __WorldContext, TArray<class ABGA_Campsite_C*>* FriendlyCampsites, TArray<class ABGA_Campsite_C*>* EnemyCampsites);
	static void FilterPlayerStatesForActivePlayers(TArray<class AFortPlayerStateAthena*>& InPlayerStates, class UObject* __WorldContext, TArray<class AFortPlayerStateAthena*>* FilteredPlayerStates);
	static void BestCampsiteForNewImprovement(Enum_Campsite_Improvements ImprovementType, TArray<class ABGA_Campsite_C*>& NearbyCampsites, const struct FVector& QueryLocation, class UObject* __WorldContext, class ABGA_Campsite_C** BestCampsite);
	static void Best_Squadmate_And_Campsite_To_Add_New_Tent(TArray<class ABGA_Campsite_C*>& Campsites_to_Search, class AFortPlayerStateAthena* Reference_Player_State, const struct FVector& Reference_Location, class UObject* __WorldContext, class ABGA_Campsite_C** Campsite, class APlayerState** Player);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CampsiteFunctionLibrary_C">();
	}
	static class UCampsiteFunctionLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCampsiteFunctionLibrary_C>();
	}
};
static_assert(alignof(UCampsiteFunctionLibrary_C) == 0x000008, "Wrong alignment on UCampsiteFunctionLibrary_C");
static_assert(sizeof(UCampsiteFunctionLibrary_C) == 0x000028, "Wrong size on UCampsiteFunctionLibrary_C");

}

