#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CampsiteRuntime

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CampsiteRuntime_structs.hpp"
#include "AIModule_classes.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// Class CampsiteRuntime.AbandonedCampsiteManager
// 0x0180 (0x03F0 - 0x0270)
class AAbandonedCampsiteManager final : public AActor
{
public:
	struct FScalableFloat                         MinNumAbandonedCampsites;                          // 0x0270(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MaxNumAbandonedCampsites;                          // 0x0298(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         AbandonedCampsitesEnabled;                         // 0x02C0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TMap<EAbandonedCampsiteSpawnType, struct FScalableFloat> SpawnTypeWeights;                                  // 0x02E8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UEnvQuery>               Spawn_EnvironmentalQuery;                          // 0x0338(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   AbandonedCampsiteAsset;                            // 0x0360(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AAbandonedCampsitePlacedSpawner*> PreplacedCampsiteSpawnPoints;                      // 0x0388(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class AAbandonedCampsitePlacedSpawner*> DeferredPreplacedCampsiteSpawns;                   // 0x0398(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_3A8[0x10];                                     // 0x03A8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UCampsiteAnalytics*                     Analytics;                                         // 0x03B8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C0[0x30];                                     // 0x03C0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnGamePhaseStepChanged(const TScriptInterface<class IFortSafeZoneInterface>& SafeZoneInterface, const EAthenaGamePhaseStep GamePhaseStep);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbandonedCampsiteManager">();
	}
	static class AAbandonedCampsiteManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAbandonedCampsiteManager>();
	}
};
static_assert(alignof(AAbandonedCampsiteManager) == 0x000008, "Wrong alignment on AAbandonedCampsiteManager");
static_assert(sizeof(AAbandonedCampsiteManager) == 0x0003F0, "Wrong size on AAbandonedCampsiteManager");
static_assert(offsetof(AAbandonedCampsiteManager, MinNumAbandonedCampsites) == 0x000270, "Member 'AAbandonedCampsiteManager::MinNumAbandonedCampsites' has a wrong offset!");
static_assert(offsetof(AAbandonedCampsiteManager, MaxNumAbandonedCampsites) == 0x000298, "Member 'AAbandonedCampsiteManager::MaxNumAbandonedCampsites' has a wrong offset!");
static_assert(offsetof(AAbandonedCampsiteManager, AbandonedCampsitesEnabled) == 0x0002C0, "Member 'AAbandonedCampsiteManager::AbandonedCampsitesEnabled' has a wrong offset!");
static_assert(offsetof(AAbandonedCampsiteManager, SpawnTypeWeights) == 0x0002E8, "Member 'AAbandonedCampsiteManager::SpawnTypeWeights' has a wrong offset!");
static_assert(offsetof(AAbandonedCampsiteManager, Spawn_EnvironmentalQuery) == 0x000338, "Member 'AAbandonedCampsiteManager::Spawn_EnvironmentalQuery' has a wrong offset!");
static_assert(offsetof(AAbandonedCampsiteManager, AbandonedCampsiteAsset) == 0x000360, "Member 'AAbandonedCampsiteManager::AbandonedCampsiteAsset' has a wrong offset!");
static_assert(offsetof(AAbandonedCampsiteManager, PreplacedCampsiteSpawnPoints) == 0x000388, "Member 'AAbandonedCampsiteManager::PreplacedCampsiteSpawnPoints' has a wrong offset!");
static_assert(offsetof(AAbandonedCampsiteManager, DeferredPreplacedCampsiteSpawns) == 0x000398, "Member 'AAbandonedCampsiteManager::DeferredPreplacedCampsiteSpawns' has a wrong offset!");
static_assert(offsetof(AAbandonedCampsiteManager, Analytics) == 0x0003B8, "Member 'AAbandonedCampsiteManager::Analytics' has a wrong offset!");

// Class CampsiteRuntime.AbandonedCampsitePlacedSpawner
// 0x0028 (0x0298 - 0x0270)
class AAbandonedCampsitePlacedSpawner final : public AActor
{
public:
	TSoftClassPtr<class UClass>                   AbandonedTentAsset;                                // 0x0270(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SpawnCampsite();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbandonedCampsitePlacedSpawner">();
	}
	static class AAbandonedCampsitePlacedSpawner* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAbandonedCampsitePlacedSpawner>();
	}
};
static_assert(alignof(AAbandonedCampsitePlacedSpawner) == 0x000008, "Wrong alignment on AAbandonedCampsitePlacedSpawner");
static_assert(sizeof(AAbandonedCampsitePlacedSpawner) == 0x000298, "Wrong size on AAbandonedCampsitePlacedSpawner");
static_assert(offsetof(AAbandonedCampsitePlacedSpawner, AbandonedTentAsset) == 0x000270, "Member 'AAbandonedCampsitePlacedSpawner::AbandonedTentAsset' has a wrong offset!");

// Class CampsiteRuntime.AbandonedTentSpawnPointComponent
// 0x0030 (0x0600 - 0x05D0)
class UAbandonedTentSpawnPointComponent final : public UStaticMeshComponent
{
public:
	struct FScalableFloat                         SpawnChance;                                       // 0x05D0(0x0028)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_5F8[0x8];                                      // 0x05F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbandonedTentSpawnPointComponent">();
	}
	static class UAbandonedTentSpawnPointComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbandonedTentSpawnPointComponent>();
	}
};
static_assert(alignof(UAbandonedTentSpawnPointComponent) == 0x000010, "Wrong alignment on UAbandonedTentSpawnPointComponent");
static_assert(sizeof(UAbandonedTentSpawnPointComponent) == 0x000600, "Wrong size on UAbandonedTentSpawnPointComponent");
static_assert(offsetof(UAbandonedTentSpawnPointComponent, SpawnChance) == 0x0005D0, "Member 'UAbandonedTentSpawnPointComponent::SpawnChance' has a wrong offset!");

// Class CampsiteRuntime.CampsiteAnalytics
// 0x0010 (0x0038 - 0x0028)
class UCampsiteAnalytics final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CampsiteAnalytics">();
	}
	static class UCampsiteAnalytics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCampsiteAnalytics>();
	}
};
static_assert(alignof(UCampsiteAnalytics) == 0x000008, "Wrong alignment on UCampsiteAnalytics");
static_assert(sizeof(UCampsiteAnalytics) == 0x000038, "Wrong size on UCampsiteAnalytics");

// Class CampsiteRuntime.CampsiteConversationComponent
// 0x0000 (0x00A0 - 0x00A0)
class UCampsiteConversationComponent final : public UActorComponent
{
public:
	void StartConversation(class AFortPlayerController* InstigatingController);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CampsiteConversationComponent">();
	}
	static class UCampsiteConversationComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCampsiteConversationComponent>();
	}
};
static_assert(alignof(UCampsiteConversationComponent) == 0x000008, "Wrong alignment on UCampsiteConversationComponent");
static_assert(sizeof(UCampsiteConversationComponent) == 0x0000A0, "Wrong size on UCampsiteConversationComponent");

// Class CampsiteRuntime.CampsiteFunctionLibraryNative
// 0x0000 (0x0028 - 0x0028)
class UCampsiteFunctionLibraryNative final : public UBlueprintFunctionLibrary
{
public:
	static const struct FFortItemEntry GetItemEntryCopyFromWeapon(const class AFortWeapon* Weapon);
	static bool IsItemAvailable(class UObject* WorldContextObject, const class UFortItem* FortItem);
	static bool IsItemDefinitionAvailable(class UObject* WorldContextObject, const class UFortItemDefinition* FortItem);
	static bool IsItemEntryAvailable(class UObject* WorldContextObject, const struct FFortItemEntry& FortItem);
	static void SetHealthOnPropFromItemEntry(const struct FFortItemEntry& FortItem, class ABuildingProp* BuildingProp);
	static void StoreHealthOnPickupFromProp(const class ABuildingProp* BuildingProp, class AFortPickup* PickUp);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CampsiteFunctionLibraryNative">();
	}
	static class UCampsiteFunctionLibraryNative* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCampsiteFunctionLibraryNative>();
	}
};
static_assert(alignof(UCampsiteFunctionLibraryNative) == 0x000008, "Wrong alignment on UCampsiteFunctionLibraryNative");
static_assert(sizeof(UCampsiteFunctionLibraryNative) == 0x000028, "Wrong size on UCampsiteFunctionLibraryNative");

// Class CampsiteRuntime.CampsiteImprovementComponent
// 0x00D0 (0x0170 - 0x00A0)
class UCampsiteImprovementComponent final : public UActorComponent
{
public:
	struct FSlateBrush                            MiniMapIconBrush;                                  // 0x00A0(0x00C0)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	int32                                         ImprovementOwnerSquadId;                           // 0x0160(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortSimpleMiniMapIndicator*            MinimapIndicator;                                  // 0x0168(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void CreateIndicator();
	void OnRep_ImprovementOwnerSquadId();
	void RemoveIndicator();
	void SetImprovementOwnerSquadId(int32 SquadId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CampsiteImprovementComponent">();
	}
	static class UCampsiteImprovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCampsiteImprovementComponent>();
	}
};
static_assert(alignof(UCampsiteImprovementComponent) == 0x000010, "Wrong alignment on UCampsiteImprovementComponent");
static_assert(sizeof(UCampsiteImprovementComponent) == 0x000170, "Wrong size on UCampsiteImprovementComponent");
static_assert(offsetof(UCampsiteImprovementComponent, MiniMapIconBrush) == 0x0000A0, "Member 'UCampsiteImprovementComponent::MiniMapIconBrush' has a wrong offset!");
static_assert(offsetof(UCampsiteImprovementComponent, ImprovementOwnerSquadId) == 0x000160, "Member 'UCampsiteImprovementComponent::ImprovementOwnerSquadId' has a wrong offset!");
static_assert(offsetof(UCampsiteImprovementComponent, MinimapIndicator) == 0x000168, "Member 'UCampsiteImprovementComponent::MinimapIndicator' has a wrong offset!");

// Class CampsiteRuntime.FortControllerComponent_CampsiteAccountItem
// 0x0040 (0x00E0 - 0x00A0)
class UFortControllerComponent_CampsiteAccountItem final : public UActorComponent
{
public:
	class UFortCampsiteAccountItemDefinition*     CampsiteAccountItemDefinition;                     // 0x00A0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FCampsiteAccountData                   CampsiteAccountData;                               // 0x00A8(0x0028)(Transient, NativeAccessSpecifierPrivate)
	TArray<struct FFortItemEntry>                 CurrentlyStashedItemEntries;                       // 0x00D0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

public:
	void CacheAccountItemData();
	void ClearStashedItem(const int32 StashedItemIndex);
	bool ClearStashedItemAndGiveToPlayer(const class AActor* SourceActor, const int32 StashedItemIndex);
	void ClearStoredCampsiteLocations();
	void OnAthenaProfileInitialized();
	bool StashCurrentlyHeldItemAndRemoveFromInventory(const int32 StashedItemIndex);
	bool SwapStashedItem(const class AActor* SourceActor, const int32 StashedItemIndex);
	void WriteStashedItem(class AFortPlayerControllerAthena* PlayerController, const class UFortWorldItem* Item, const int32 StashedItemIndex);
	void WriteStashedItemFromEntry(class AFortPlayerControllerAthena* PlayerController, const struct FFortItemEntry& ItemEntry, const int32 StashedItemIndex);

	struct FFortItemEntry GetCurrentlyStashedItemAsItemEntry(const int32 StashedItemIndex) const;
	bool HasCurrentlyStashedItem(const int32 StashedItemIndex) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortControllerComponent_CampsiteAccountItem">();
	}
	static class UFortControllerComponent_CampsiteAccountItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortControllerComponent_CampsiteAccountItem>();
	}
};
static_assert(alignof(UFortControllerComponent_CampsiteAccountItem) == 0x000008, "Wrong alignment on UFortControllerComponent_CampsiteAccountItem");
static_assert(sizeof(UFortControllerComponent_CampsiteAccountItem) == 0x0000E0, "Wrong size on UFortControllerComponent_CampsiteAccountItem");
static_assert(offsetof(UFortControllerComponent_CampsiteAccountItem, CampsiteAccountItemDefinition) == 0x0000A0, "Member 'UFortControllerComponent_CampsiteAccountItem::CampsiteAccountItemDefinition' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_CampsiteAccountItem, CampsiteAccountData) == 0x0000A8, "Member 'UFortControllerComponent_CampsiteAccountItem::CampsiteAccountData' has a wrong offset!");
static_assert(offsetof(UFortControllerComponent_CampsiteAccountItem, CurrentlyStashedItemEntries) == 0x0000D0, "Member 'UFortControllerComponent_CampsiteAccountItem::CurrentlyStashedItemEntries' has a wrong offset!");

// Class CampsiteRuntime.FortGameStateComponent_Campsite
// 0x0118 (0x01B8 - 0x00A0)
class UFortGameStateComponent_Campsite final : public UFortGameStateComponent
{
public:
	TSet<class UFortItemDefinition*>              AllowedItemDefinitions;                            // 0x00A0(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	TArray<TSoftObjectPtr<class UFortItemDefinition>> BlacklistedItemDefinitions;                        // 0x00F0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class FString>                         BlacklistedItemPaths;                              // 0x0100(0x0010)(Edit, ZeroConstructor, Config, DisableEditOnInstance, EditConst, Protected, NativeAccessSpecifierProtected)
	TArray<class AAbandonedCampsitePlacedSpawner*> PlacedCampsiteSpawnPoints;                         // 0x0110(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_120[0x18];                                     // 0x0120(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UFortAthenaAIBotNameDataAsset> BotNameDataAsset;                                  // 0x0138(0x0028)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_160[0x50];                                     // 0x0160(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             BotNameDataTable;                                  // 0x01B0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ClaimUnusedBotName(class FString* OutBotName);
	void RegisterCampsiteLocation(const struct FVector& NewCampsiteLocation);
	void RegisterPreplacedCampsite(class AAbandonedCampsitePlacedSpawner* PreplacedCampsiteSpawnPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGameStateComponent_Campsite">();
	}
	static class UFortGameStateComponent_Campsite* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGameStateComponent_Campsite>();
	}
};
static_assert(alignof(UFortGameStateComponent_Campsite) == 0x000008, "Wrong alignment on UFortGameStateComponent_Campsite");
static_assert(sizeof(UFortGameStateComponent_Campsite) == 0x0001B8, "Wrong size on UFortGameStateComponent_Campsite");
static_assert(offsetof(UFortGameStateComponent_Campsite, AllowedItemDefinitions) == 0x0000A0, "Member 'UFortGameStateComponent_Campsite::AllowedItemDefinitions' has a wrong offset!");
static_assert(offsetof(UFortGameStateComponent_Campsite, BlacklistedItemDefinitions) == 0x0000F0, "Member 'UFortGameStateComponent_Campsite::BlacklistedItemDefinitions' has a wrong offset!");
static_assert(offsetof(UFortGameStateComponent_Campsite, BlacklistedItemPaths) == 0x000100, "Member 'UFortGameStateComponent_Campsite::BlacklistedItemPaths' has a wrong offset!");
static_assert(offsetof(UFortGameStateComponent_Campsite, PlacedCampsiteSpawnPoints) == 0x000110, "Member 'UFortGameStateComponent_Campsite::PlacedCampsiteSpawnPoints' has a wrong offset!");
static_assert(offsetof(UFortGameStateComponent_Campsite, BotNameDataAsset) == 0x000138, "Member 'UFortGameStateComponent_Campsite::BotNameDataAsset' has a wrong offset!");
static_assert(offsetof(UFortGameStateComponent_Campsite, BotNameDataTable) == 0x0001B0, "Member 'UFortGameStateComponent_Campsite::BotNameDataTable' has a wrong offset!");

// Class CampsiteRuntime.FortQueryTest_AbandonedCampsite
// 0x0068 (0x0260 - 0x01F8)
class UFortQueryTest_AbandonedCampsite final : public UEnvQueryTest
{
public:
	float                                         TraceRadius;                                       // 0x01F8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1FC[0x4];                                      // 0x01FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TraceStartOffset;                                  // 0x0200(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                TraceEndOffset;                                    // 0x0218(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ECollisionChannel                             BlockingChannel;                                   // 0x0230(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_231[0x7];                                      // 0x0231(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UPhysicalMaterial>       BlockingMaterial;                                  // 0x0238(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortQueryTest_AbandonedCampsite">();
	}
	static class UFortQueryTest_AbandonedCampsite* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortQueryTest_AbandonedCampsite>();
	}
};
static_assert(alignof(UFortQueryTest_AbandonedCampsite) == 0x000008, "Wrong alignment on UFortQueryTest_AbandonedCampsite");
static_assert(sizeof(UFortQueryTest_AbandonedCampsite) == 0x000260, "Wrong size on UFortQueryTest_AbandonedCampsite");
static_assert(offsetof(UFortQueryTest_AbandonedCampsite, TraceRadius) == 0x0001F8, "Member 'UFortQueryTest_AbandonedCampsite::TraceRadius' has a wrong offset!");
static_assert(offsetof(UFortQueryTest_AbandonedCampsite, TraceStartOffset) == 0x000200, "Member 'UFortQueryTest_AbandonedCampsite::TraceStartOffset' has a wrong offset!");
static_assert(offsetof(UFortQueryTest_AbandonedCampsite, TraceEndOffset) == 0x000218, "Member 'UFortQueryTest_AbandonedCampsite::TraceEndOffset' has a wrong offset!");
static_assert(offsetof(UFortQueryTest_AbandonedCampsite, BlockingChannel) == 0x000230, "Member 'UFortQueryTest_AbandonedCampsite::BlockingChannel' has a wrong offset!");
static_assert(offsetof(UFortQueryTest_AbandonedCampsite, BlockingMaterial) == 0x000238, "Member 'UFortQueryTest_AbandonedCampsite::BlockingMaterial' has a wrong offset!");

}

