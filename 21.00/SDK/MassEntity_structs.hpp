#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MassEntity

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "StructUtils_structs.hpp"


namespace SDK
{

// Enum MassEntity.EProcessorExecutionFlags
// NumValues: 0x0006
enum class EProcessorExecutionFlags : uint8
{
	None                                     = 0,
	Standalone                               = 1,
	Server                                   = 2,
	Client                                   = 4,
	All                                      = 7,
	EProcessorExecutionFlags_MAX             = 8,
};

// Enum MassEntity.EMassProcessingPhase
// NumValues: 0x0007
enum class EMassProcessingPhase : uint8
{
	PrePhysics                               = 0,
	StartPhysics                             = 1,
	DuringPhysics                            = 2,
	EndPhysics                               = 3,
	PostPhysics                              = 4,
	FrameEnd                                 = 5,
	MAX                                      = 6,
};

// ScriptStruct MassEntity.MassFragment
// 0x0000 (0x0000 - 0x0000)
#pragma pack(push, 0x1)
struct alignas(0x01) FMassFragment
{
};
#pragma pack(pop)
static_assert(alignof(FMassFragment) == 0x000001, "Wrong alignment on FMassFragment");
static_assert(sizeof(FMassFragment) == 0x000001, "Wrong size on FMassFragment");

// ScriptStruct MassEntity.MassSharedFragment
// 0x0000 (0x0000 - 0x0000)
#pragma pack(push, 0x1)
struct alignas(0x01) FMassSharedFragment
{
};
#pragma pack(pop)
static_assert(alignof(FMassSharedFragment) == 0x000001, "Wrong alignment on FMassSharedFragment");
static_assert(sizeof(FMassSharedFragment) == 0x000001, "Wrong size on FMassSharedFragment");

// ScriptStruct MassEntity.CommandBufferEntryBase
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FCommandBufferEntryBase
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommandBufferEntryBase) == 0x000008, "Wrong alignment on FCommandBufferEntryBase");
static_assert(sizeof(FCommandBufferEntryBase) == 0x000010, "Wrong size on FCommandBufferEntryBase");

// ScriptStruct MassEntity.DeferredCommand
// 0x0040 (0x0050 - 0x0010)
struct alignas(0x10) FDeferredCommand final : public FCommandBufferEntryBase
{
public:
	uint8                                         Pad_10[0x40];                                      // 0x0010(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDeferredCommand) == 0x000010, "Wrong alignment on FDeferredCommand");
static_assert(sizeof(FDeferredCommand) == 0x000050, "Wrong size on FDeferredCommand");

// ScriptStruct MassEntity.BuildEntityFromFragmentInstance
// 0x0038 (0x0048 - 0x0010)
struct FBuildEntityFromFragmentInstance final : public FCommandBufferEntryBase
{
public:
	uint8                                         Pad_10[0x38];                                      // 0x0010(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildEntityFromFragmentInstance) == 0x000008, "Wrong alignment on FBuildEntityFromFragmentInstance");
static_assert(sizeof(FBuildEntityFromFragmentInstance) == 0x000048, "Wrong size on FBuildEntityFromFragmentInstance");

// ScriptStruct MassEntity.BuildEntityFromFragmentInstances
// 0x0038 (0x0048 - 0x0010)
struct FBuildEntityFromFragmentInstances final : public FCommandBufferEntryBase
{
public:
	uint8                                         Pad_10[0x38];                                      // 0x0010(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildEntityFromFragmentInstances) == 0x000008, "Wrong alignment on FBuildEntityFromFragmentInstances");
static_assert(sizeof(FBuildEntityFromFragmentInstances) == 0x000048, "Wrong size on FBuildEntityFromFragmentInstances");

// ScriptStruct MassEntity.CommandAddFragment
// 0x0008 (0x0018 - 0x0010)
struct FCommandAddFragment final : public FCommandBufferEntryBase
{
public:
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommandAddFragment) == 0x000008, "Wrong alignment on FCommandAddFragment");
static_assert(sizeof(FCommandAddFragment) == 0x000018, "Wrong size on FCommandAddFragment");

// ScriptStruct MassEntity.CommandAddFragmentInstance
// 0x0010 (0x0020 - 0x0010)
struct FCommandAddFragmentInstance final : public FCommandBufferEntryBase
{
public:
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommandAddFragmentInstance) == 0x000008, "Wrong alignment on FCommandAddFragmentInstance");
static_assert(sizeof(FCommandAddFragmentInstance) == 0x000020, "Wrong size on FCommandAddFragmentInstance");

// ScriptStruct MassEntity.MassCommandAddFragmentInstanceList
// 0x0010 (0x0020 - 0x0010)
struct FMassCommandAddFragmentInstanceList final : public FCommandBufferEntryBase
{
public:
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassCommandAddFragmentInstanceList) == 0x000008, "Wrong alignment on FMassCommandAddFragmentInstanceList");
static_assert(sizeof(FMassCommandAddFragmentInstanceList) == 0x000020, "Wrong size on FMassCommandAddFragmentInstanceList");

// ScriptStruct MassEntity.CommandRemoveFragment
// 0x0008 (0x0018 - 0x0010)
struct FCommandRemoveFragment final : public FCommandBufferEntryBase
{
public:
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommandRemoveFragment) == 0x000008, "Wrong alignment on FCommandRemoveFragment");
static_assert(sizeof(FCommandRemoveFragment) == 0x000018, "Wrong size on FCommandRemoveFragment");

// ScriptStruct MassEntity.CommandAddFragmentList
// 0x0010 (0x0020 - 0x0010)
struct FCommandAddFragmentList final : public FCommandBufferEntryBase
{
public:
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommandAddFragmentList) == 0x000008, "Wrong alignment on FCommandAddFragmentList");
static_assert(sizeof(FCommandAddFragmentList) == 0x000020, "Wrong size on FCommandAddFragmentList");

// ScriptStruct MassEntity.CommandRemoveFragmentList
// 0x0010 (0x0020 - 0x0010)
struct FCommandRemoveFragmentList final : public FCommandBufferEntryBase
{
public:
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommandRemoveFragmentList) == 0x000008, "Wrong alignment on FCommandRemoveFragmentList");
static_assert(sizeof(FCommandRemoveFragmentList) == 0x000020, "Wrong size on FCommandRemoveFragmentList");

// ScriptStruct MassEntity.CommandAddTag
// 0x0008 (0x0018 - 0x0010)
struct FCommandAddTag final : public FCommandBufferEntryBase
{
public:
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommandAddTag) == 0x000008, "Wrong alignment on FCommandAddTag");
static_assert(sizeof(FCommandAddTag) == 0x000018, "Wrong size on FCommandAddTag");

// ScriptStruct MassEntity.CommandRemoveTag
// 0x0008 (0x0018 - 0x0010)
struct FCommandRemoveTag final : public FCommandBufferEntryBase
{
public:
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommandRemoveTag) == 0x000008, "Wrong alignment on FCommandRemoveTag");
static_assert(sizeof(FCommandRemoveTag) == 0x000018, "Wrong size on FCommandRemoveTag");

// ScriptStruct MassEntity.CommandSwapTags
// 0x0010 (0x0020 - 0x0010)
struct FCommandSwapTags final : public FCommandBufferEntryBase
{
public:
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommandSwapTags) == 0x000008, "Wrong alignment on FCommandSwapTags");
static_assert(sizeof(FCommandSwapTags) == 0x000020, "Wrong size on FCommandSwapTags");

// ScriptStruct MassEntity.CommandRemoveComposition
// 0x0080 (0x0090 - 0x0010)
struct FCommandRemoveComposition final : public FCommandBufferEntryBase
{
public:
	uint8                                         Pad_10[0x80];                                      // 0x0010(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommandRemoveComposition) == 0x000008, "Wrong alignment on FCommandRemoveComposition");
static_assert(sizeof(FCommandRemoveComposition) == 0x000090, "Wrong size on FCommandRemoveComposition");

// ScriptStruct MassEntity.MassEntityQuery
// 0x0290 (0x0290 - 0x0000)
struct alignas(0x10) FMassEntityQuery final
{
public:
	uint8                                         Pad_0[0x290];                                      // 0x0000(0x0290)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassEntityQuery) == 0x000010, "Wrong alignment on FMassEntityQuery");
static_assert(sizeof(FMassEntityQuery) == 0x000290, "Wrong size on FMassEntityQuery");

// ScriptStruct MassEntity.MassProcessingPhaseConfig
// 0x0030 (0x0030 - 0x0000)
struct FMassProcessingPhaseConfig final
{
public:
	class FName                                   PhaseName;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMassCompositeProcessor>    PhaseGroupClass;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, Config, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           OffGameThreadGroupNames;                           // 0x0010(0x0010)(Edit, ZeroConstructor, Config, NoClear, NativeAccessSpecifierPublic)
	TArray<class UMassProcessor*>                 ProcessorCDOs;                                     // 0x0020(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassProcessingPhaseConfig) == 0x000008, "Wrong alignment on FMassProcessingPhaseConfig");
static_assert(sizeof(FMassProcessingPhaseConfig) == 0x000030, "Wrong size on FMassProcessingPhaseConfig");
static_assert(offsetof(FMassProcessingPhaseConfig, PhaseName) == 0x000000, "Member 'FMassProcessingPhaseConfig::PhaseName' has a wrong offset!");
static_assert(offsetof(FMassProcessingPhaseConfig, PhaseGroupClass) == 0x000008, "Member 'FMassProcessingPhaseConfig::PhaseGroupClass' has a wrong offset!");
static_assert(offsetof(FMassProcessingPhaseConfig, OffGameThreadGroupNames) == 0x000010, "Member 'FMassProcessingPhaseConfig::OffGameThreadGroupNames' has a wrong offset!");
static_assert(offsetof(FMassProcessingPhaseConfig, ProcessorCDOs) == 0x000020, "Member 'FMassProcessingPhaseConfig::ProcessorCDOs' has a wrong offset!");

// ScriptStruct MassEntity.MassTag
// 0x0001 (0x0001 - 0x0000)
struct FMassTag final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassTag) == 0x000001, "Wrong alignment on FMassTag");
static_assert(sizeof(FMassTag) == 0x000001, "Wrong size on FMassTag");

// ScriptStruct MassEntity.MassChunkFragment
// 0x0001 (0x0001 - 0x0000)
struct FMassChunkFragment final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassChunkFragment) == 0x000001, "Wrong alignment on FMassChunkFragment");
static_assert(sizeof(FMassChunkFragment) == 0x000001, "Wrong size on FMassChunkFragment");

// ScriptStruct MassEntity.MassEntityHandle
// 0x0008 (0x0008 - 0x0000)
struct FMassEntityHandle final
{
public:
	int32                                         Index;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SerialNumber;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassEntityHandle) == 0x000004, "Wrong alignment on FMassEntityHandle");
static_assert(sizeof(FMassEntityHandle) == 0x000008, "Wrong size on FMassEntityHandle");
static_assert(offsetof(FMassEntityHandle, Index) == 0x000000, "Member 'FMassEntityHandle::Index' has a wrong offset!");
static_assert(offsetof(FMassEntityHandle, SerialNumber) == 0x000004, "Member 'FMassEntityHandle::SerialNumber' has a wrong offset!");

// ScriptStruct MassEntity.MassEntityView
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FMassEntityView final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassEntityView) == 0x000008, "Wrong alignment on FMassEntityView");
static_assert(sizeof(FMassEntityView) == 0x000020, "Wrong size on FMassEntityView");

// ScriptStruct MassEntity.MassRuntimePipeline
// 0x0010 (0x0010 - 0x0000)
struct FMassRuntimePipeline final
{
public:
	TArray<class UMassProcessor*>                 Processors;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassRuntimePipeline) == 0x000008, "Wrong alignment on FMassRuntimePipeline");
static_assert(sizeof(FMassRuntimePipeline) == 0x000010, "Wrong size on FMassRuntimePipeline");
static_assert(offsetof(FMassRuntimePipeline, Processors) == 0x000000, "Member 'FMassRuntimePipeline::Processors' has a wrong offset!");

// ScriptStruct MassEntity.MassObserverManager
// 0x0100 (0x0100 - 0x0000)
struct FMassObserverManager final
{
public:
	uint8                                         Pad_0[0x58];                                       // 0x0000(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UScriptStruct*, struct FMassRuntimePipeline> OnFragmentAddedObservers;                          // 0x0058(0x0050)(Protected, NativeAccessSpecifierProtected)
	TMap<class UScriptStruct*, struct FMassRuntimePipeline> OnFragmentRemovedObservers;                        // 0x00A8(0x0050)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassObserverManager) == 0x000008, "Wrong alignment on FMassObserverManager");
static_assert(sizeof(FMassObserverManager) == 0x000100, "Wrong size on FMassObserverManager");
static_assert(offsetof(FMassObserverManager, OnFragmentAddedObservers) == 0x000058, "Member 'FMassObserverManager::OnFragmentAddedObservers' has a wrong offset!");
static_assert(offsetof(FMassObserverManager, OnFragmentRemovedObservers) == 0x0000A8, "Member 'FMassObserverManager::OnFragmentRemovedObservers' has a wrong offset!");

// ScriptStruct MassEntity.MassProcessorClassCollection
// 0x0010 (0x0010 - 0x0000)
struct FMassProcessorClassCollection final
{
public:
	TArray<TSubclassOf<class UMassProcessor>>     ClassCollection;                                   // 0x0000(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassProcessorClassCollection) == 0x000008, "Wrong alignment on FMassProcessorClassCollection");
static_assert(sizeof(FMassProcessorClassCollection) == 0x000010, "Wrong size on FMassProcessorClassCollection");
static_assert(offsetof(FMassProcessorClassCollection, ClassCollection) == 0x000000, "Member 'FMassProcessorClassCollection::ClassCollection' has a wrong offset!");

// ScriptStruct MassEntity.MassProcessingPhase
// 0x0050 (0x0078 - 0x0028)
struct FMassProcessingPhase final : public FTickFunction
{
public:
	class UMassCompositeProcessor*                PhaseProcessor;                                    // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMassProcessingPhaseManager*            Manager;                                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_38[0x40];                                      // 0x0038(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassProcessingPhase) == 0x000008, "Wrong alignment on FMassProcessingPhase");
static_assert(sizeof(FMassProcessingPhase) == 0x000078, "Wrong size on FMassProcessingPhase");
static_assert(offsetof(FMassProcessingPhase, PhaseProcessor) == 0x000028, "Member 'FMassProcessingPhase::PhaseProcessor' has a wrong offset!");
static_assert(offsetof(FMassProcessingPhase, Manager) == 0x000030, "Member 'FMassProcessingPhase::Manager' has a wrong offset!");

// ScriptStruct MassEntity.ProcessorAuxDataBase
// 0x0001 (0x0001 - 0x0000)
struct FProcessorAuxDataBase final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProcessorAuxDataBase) == 0x000001, "Wrong alignment on FProcessorAuxDataBase");
static_assert(sizeof(FProcessorAuxDataBase) == 0x000001, "Wrong size on FProcessorAuxDataBase");

// ScriptStruct MassEntity.MassProcessingContext
// 0x0038 (0x0038 - 0x0000)
struct FMassProcessingContext final
{
public:
	class UMassEntitySubsystem*                   EntitySubsystem;                                   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaSeconds;                                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInstancedStruct                       AuxData;                                           // 0x0010(0x0010)(NativeAccessSpecifierPublic)
	bool                                          bFlushCommandBuffer;                               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x17];                                      // 0x0021(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassProcessingContext) == 0x000008, "Wrong alignment on FMassProcessingContext");
static_assert(sizeof(FMassProcessingContext) == 0x000038, "Wrong size on FMassProcessingContext");
static_assert(offsetof(FMassProcessingContext, EntitySubsystem) == 0x000000, "Member 'FMassProcessingContext::EntitySubsystem' has a wrong offset!");
static_assert(offsetof(FMassProcessingContext, DeltaSeconds) == 0x000008, "Member 'FMassProcessingContext::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(FMassProcessingContext, AuxData) == 0x000010, "Member 'FMassProcessingContext::AuxData' has a wrong offset!");
static_assert(offsetof(FMassProcessingContext, bFlushCommandBuffer) == 0x000020, "Member 'FMassProcessingContext::bFlushCommandBuffer' has a wrong offset!");

// ScriptStruct MassEntity.MassProcessorExecutionOrder
// 0x0028 (0x0028 - 0x0000)
struct FMassProcessorExecutionOrder final
{
public:
	class FName                                   ExecuteInGroup;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ExecuteBefore;                                     // 0x0008(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<class FName>                           ExecuteAfter;                                      // 0x0018(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassProcessorExecutionOrder) == 0x000008, "Wrong alignment on FMassProcessorExecutionOrder");
static_assert(sizeof(FMassProcessorExecutionOrder) == 0x000028, "Wrong size on FMassProcessorExecutionOrder");
static_assert(offsetof(FMassProcessorExecutionOrder, ExecuteInGroup) == 0x000000, "Member 'FMassProcessorExecutionOrder::ExecuteInGroup' has a wrong offset!");
static_assert(offsetof(FMassProcessorExecutionOrder, ExecuteBefore) == 0x000008, "Member 'FMassProcessorExecutionOrder::ExecuteBefore' has a wrong offset!");
static_assert(offsetof(FMassProcessorExecutionOrder, ExecuteAfter) == 0x000018, "Member 'FMassProcessorExecutionOrder::ExecuteAfter' has a wrong offset!");

}

