#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VGameplayRst

#include "Basic.hpp"

#include "NetCore_structs.hpp"
#include "VerseGameplay_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// ScriptStruct VGameplayRst.TaggedObjectFinderEntry
// 0x0030 (0x0030 - 0x0000)
struct FTaggedObjectFinderEntry final
{
public:
	struct FVerseGameplayTagContainer             RequiredTags;                                      // 0x0000(0x0010)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVerseGameplayTagContainer             PreferredTags;                                     // 0x0010(0x0010)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVerseGameplayTagContainer             ExclusionTags;                                     // 0x0020(0x0010)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTaggedObjectFinderEntry) == 0x000008, "Wrong alignment on FTaggedObjectFinderEntry");
static_assert(sizeof(FTaggedObjectFinderEntry) == 0x000030, "Wrong size on FTaggedObjectFinderEntry");
static_assert(offsetof(FTaggedObjectFinderEntry, RequiredTags) == 0x000000, "Member 'FTaggedObjectFinderEntry::RequiredTags' has a wrong offset!");
static_assert(offsetof(FTaggedObjectFinderEntry, PreferredTags) == 0x000010, "Member 'FTaggedObjectFinderEntry::PreferredTags' has a wrong offset!");
static_assert(offsetof(FTaggedObjectFinderEntry, ExclusionTags) == 0x000020, "Member 'FTaggedObjectFinderEntry::ExclusionTags' has a wrong offset!");

// ScriptStruct VGameplayRst.ActiveSoundInfo
// 0x0008 (0x0008 - 0x0000)
struct FActiveSoundInfo final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartTime;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActiveSoundInfo) == 0x000004, "Wrong alignment on FActiveSoundInfo");
static_assert(sizeof(FActiveSoundInfo) == 0x000008, "Wrong size on FActiveSoundInfo");
static_assert(offsetof(FActiveSoundInfo, bActive) == 0x000000, "Member 'FActiveSoundInfo::bActive' has a wrong offset!");
static_assert(offsetof(FActiveSoundInfo, StartTime) == 0x000004, "Member 'FActiveSoundInfo::StartTime' has a wrong offset!");

// ScriptStruct VGameplayRst.DatastoreEntry
// 0x0014 (0x0020 - 0x000C)
struct FDatastoreEntry final : public FFastArraySerializerItem
{
public:
	class FName                                   KeyName;                                           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ValueData;                                         // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatastoreEntry) == 0x000008, "Wrong alignment on FDatastoreEntry");
static_assert(sizeof(FDatastoreEntry) == 0x000020, "Wrong size on FDatastoreEntry");
static_assert(offsetof(FDatastoreEntry, KeyName) == 0x00000C, "Member 'FDatastoreEntry::KeyName' has a wrong offset!");
static_assert(offsetof(FDatastoreEntry, ValueData) == 0x000010, "Member 'FDatastoreEntry::ValueData' has a wrong offset!");

// ScriptStruct VGameplayRst.DatastoreState
// 0x0020 (0x0128 - 0x0108)
struct FDatastoreState final : public FFastArraySerializer
{
public:
	uint8                                         Pad_108[0x8];                                      // 0x0108(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDatastoreEntry>                EntriesArray;                                      // 0x0110(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class UDatastoreComponentBase*                OwningComponent;                                   // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FDatastoreState) == 0x000008, "Wrong alignment on FDatastoreState");
static_assert(sizeof(FDatastoreState) == 0x000128, "Wrong size on FDatastoreState");
static_assert(offsetof(FDatastoreState, EntriesArray) == 0x000110, "Member 'FDatastoreState::EntriesArray' has a wrong offset!");
static_assert(offsetof(FDatastoreState, OwningComponent) == 0x000120, "Member 'FDatastoreState::OwningComponent' has a wrong offset!");

// ScriptStruct VGameplayRst.VerseLevelStreamingLevelStatus
// 0x0028 (0x0028 - 0x0000)
struct FVerseLevelStreamingLevelStatus final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelStreamingDynamic*                 Streamer;                                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVerseAssetPtr*                         LevelAsset;                                        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVerseLevelStreamingLevelStatus) == 0x000008, "Wrong alignment on FVerseLevelStreamingLevelStatus");
static_assert(sizeof(FVerseLevelStreamingLevelStatus) == 0x000028, "Wrong size on FVerseLevelStreamingLevelStatus");
static_assert(offsetof(FVerseLevelStreamingLevelStatus, Streamer) == 0x000010, "Member 'FVerseLevelStreamingLevelStatus::Streamer' has a wrong offset!");
static_assert(offsetof(FVerseLevelStreamingLevelStatus, LevelAsset) == 0x000018, "Member 'FVerseLevelStreamingLevelStatus::LevelAsset' has a wrong offset!");

// ScriptStruct VGameplayRst.VerseLevelStreamingLevelIdentifier
// 0x0028 (0x0028 - 0x0000)
struct FVerseLevelStreamingLevelIdentifier final
{
public:
	struct FSoftObjectPath                        LevelPath;                                         // 0x0000(0x0018)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LevelNameOverride;                                 // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVerseLevelStreamingLevelIdentifier) == 0x000008, "Wrong alignment on FVerseLevelStreamingLevelIdentifier");
static_assert(sizeof(FVerseLevelStreamingLevelIdentifier) == 0x000028, "Wrong size on FVerseLevelStreamingLevelIdentifier");
static_assert(offsetof(FVerseLevelStreamingLevelIdentifier, LevelPath) == 0x000000, "Member 'FVerseLevelStreamingLevelIdentifier::LevelPath' has a wrong offset!");
static_assert(offsetof(FVerseLevelStreamingLevelIdentifier, LevelNameOverride) == 0x000018, "Member 'FVerseLevelStreamingLevelIdentifier::LevelNameOverride' has a wrong offset!");

}

