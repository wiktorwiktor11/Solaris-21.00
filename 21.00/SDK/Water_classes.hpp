#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Water

#include "Basic.hpp"

#include "Water_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Niagara_classes.hpp"
#include "AIModule_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class Water.GerstnerWaterWaveGeneratorBase
// 0x0000 (0x0028 - 0x0028)
class UGerstnerWaterWaveGeneratorBase : public UObject
{
public:
	void GenerateGerstnerWaves(TArray<struct FGerstnerWave>* OutWaves) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GerstnerWaterWaveGeneratorBase">();
	}
	static class UGerstnerWaterWaveGeneratorBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGerstnerWaterWaveGeneratorBase>();
	}
};
static_assert(alignof(UGerstnerWaterWaveGeneratorBase) == 0x000008, "Wrong alignment on UGerstnerWaterWaveGeneratorBase");
static_assert(sizeof(UGerstnerWaterWaveGeneratorBase) == 0x000028, "Wrong size on UGerstnerWaterWaveGeneratorBase");

// Class Water.GerstnerWaterWaveGeneratorSpectrum
// 0x0018 (0x0040 - 0x0028)
class UGerstnerWaterWaveGeneratorSpectrum final : public UGerstnerWaterWaveGeneratorBase
{
public:
	EWaveSpectrumType                             SpectrumType;                                      // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGerstnerWaveOctave>            Octaves;                                           // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GerstnerWaterWaveGeneratorSpectrum">();
	}
	static class UGerstnerWaterWaveGeneratorSpectrum* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGerstnerWaterWaveGeneratorSpectrum>();
	}
};
static_assert(alignof(UGerstnerWaterWaveGeneratorSpectrum) == 0x000008, "Wrong alignment on UGerstnerWaterWaveGeneratorSpectrum");
static_assert(sizeof(UGerstnerWaterWaveGeneratorSpectrum) == 0x000040, "Wrong size on UGerstnerWaterWaveGeneratorSpectrum");
static_assert(offsetof(UGerstnerWaterWaveGeneratorSpectrum, SpectrumType) == 0x000028, "Member 'UGerstnerWaterWaveGeneratorSpectrum::SpectrumType' has a wrong offset!");
static_assert(offsetof(UGerstnerWaterWaveGeneratorSpectrum, Octaves) == 0x000030, "Member 'UGerstnerWaterWaveGeneratorSpectrum::Octaves' has a wrong offset!");

// Class Water.BuoyancyComponent
// 0x0160 (0x0200 - 0x00A0)
class UBuoyancyComponent : public UActorComponent
{
public:
	TArray<struct FSphericalPontoon>              Pontoons;                                          // 0x00A0(0x0010)(ZeroConstructor, Deprecated, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FSphericalPontoon& Pontoon)> OnEnteredWaterDelegate;                            // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FSphericalPontoon& Pontoon)> OnExitedWaterDelegate;                             // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FBuoyancyData                          BuoyancyData;                                      // 0x00D0(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UWaterBodyComponent*>            CurrentWaterBodyComponents;                        // 0x0158(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UPrimitiveComponent*                    SimulatingComponent;                               // 0x0168(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_170[0x90];                                     // 0x0170(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GetLastWaterSurfaceInfo(struct FVector* OutWaterPlaneLocation, struct FVector* OutWaterPlaneNormal, struct FVector* OutWaterSurfacePosition, float* OutWaterDepth, int32* OutWaterBodyIdx, struct FVector* OutWaterVelocity);
	void OnPontoonEnteredWater(const struct FSphericalPontoon& Pontoon);
	void OnPontoonExitedWater(const struct FSphericalPontoon& Pontoon);

	const TArray<class UWaterBodyComponent*> GetCurrentWaterBodyComponents() const;
	bool IsInWaterBody() const;
	bool IsOverlappingWaterBody() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BuoyancyComponent">();
	}
	static class UBuoyancyComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBuoyancyComponent>();
	}
};
static_assert(alignof(UBuoyancyComponent) == 0x000008, "Wrong alignment on UBuoyancyComponent");
static_assert(sizeof(UBuoyancyComponent) == 0x000200, "Wrong size on UBuoyancyComponent");
static_assert(offsetof(UBuoyancyComponent, Pontoons) == 0x0000A0, "Member 'UBuoyancyComponent::Pontoons' has a wrong offset!");
static_assert(offsetof(UBuoyancyComponent, OnEnteredWaterDelegate) == 0x0000B0, "Member 'UBuoyancyComponent::OnEnteredWaterDelegate' has a wrong offset!");
static_assert(offsetof(UBuoyancyComponent, OnExitedWaterDelegate) == 0x0000C0, "Member 'UBuoyancyComponent::OnExitedWaterDelegate' has a wrong offset!");
static_assert(offsetof(UBuoyancyComponent, BuoyancyData) == 0x0000D0, "Member 'UBuoyancyComponent::BuoyancyData' has a wrong offset!");
static_assert(offsetof(UBuoyancyComponent, CurrentWaterBodyComponents) == 0x000158, "Member 'UBuoyancyComponent::CurrentWaterBodyComponents' has a wrong offset!");
static_assert(offsetof(UBuoyancyComponent, SimulatingComponent) == 0x000168, "Member 'UBuoyancyComponent::SimulatingComponent' has a wrong offset!");

// Class Water.WaterWavesBase
// 0x0000 (0x0028 - 0x0028)
class UWaterWavesBase : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterWavesBase">();
	}
	static class UWaterWavesBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterWavesBase>();
	}
};
static_assert(alignof(UWaterWavesBase) == 0x000008, "Wrong alignment on UWaterWavesBase");
static_assert(sizeof(UWaterWavesBase) == 0x000028, "Wrong size on UWaterWavesBase");

// Class Water.BuoyancyManager
// 0x00B8 (0x0328 - 0x0270)
class ABuoyancyManager final : public AActor
{
public:
	uint8                                         Pad_270[0x50];                                     // 0x0270(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBuoyancyComponent*>             BuoyancyComponents;                                // 0x02C0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D0[0x58];                                     // 0x02D0(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static bool GetBuoyancyComponentManager(const class UObject* WorldContextObject, class ABuoyancyManager** Manager);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BuoyancyManager">();
	}
	static class ABuoyancyManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABuoyancyManager>();
	}
};
static_assert(alignof(ABuoyancyManager) == 0x000008, "Wrong alignment on ABuoyancyManager");
static_assert(sizeof(ABuoyancyManager) == 0x000328, "Wrong size on ABuoyancyManager");
static_assert(offsetof(ABuoyancyManager, BuoyancyComponents) == 0x0002C0, "Member 'ABuoyancyManager::BuoyancyComponents' has a wrong offset!");

// Class Water.EnvQueryTest_InsideWaterBody
// 0x0008 (0x0200 - 0x01F8)
class UEnvQueryTest_InsideWaterBody final : public UEnvQueryTest
{
public:
	bool                                          bIncludeWaves;                                     // 0x01F8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSimpleWaves;                                      // 0x01F9(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreExclusionVolumes;                           // 0x01FA(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FB[0x5];                                      // 0x01FB(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnvQueryTest_InsideWaterBody">();
	}
	static class UEnvQueryTest_InsideWaterBody* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnvQueryTest_InsideWaterBody>();
	}
};
static_assert(alignof(UEnvQueryTest_InsideWaterBody) == 0x000008, "Wrong alignment on UEnvQueryTest_InsideWaterBody");
static_assert(sizeof(UEnvQueryTest_InsideWaterBody) == 0x000200, "Wrong size on UEnvQueryTest_InsideWaterBody");
static_assert(offsetof(UEnvQueryTest_InsideWaterBody, bIncludeWaves) == 0x0001F8, "Member 'UEnvQueryTest_InsideWaterBody::bIncludeWaves' has a wrong offset!");
static_assert(offsetof(UEnvQueryTest_InsideWaterBody, bSimpleWaves) == 0x0001F9, "Member 'UEnvQueryTest_InsideWaterBody::bSimpleWaves' has a wrong offset!");
static_assert(offsetof(UEnvQueryTest_InsideWaterBody, bIgnoreExclusionVolumes) == 0x0001FA, "Member 'UEnvQueryTest_InsideWaterBody::bIgnoreExclusionVolumes' has a wrong offset!");

// Class Water.GerstnerWaterWaveGeneratorSimple
// 0x0038 (0x0060 - 0x0028)
class UGerstnerWaterWaveGeneratorSimple final : public UGerstnerWaterWaveGeneratorBase
{
public:
	int32                                         NumWaves;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Seed;                                              // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Randomness;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinWavelength;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxWavelength;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WavelengthFalloff;                                 // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinAmplitude;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAmplitude;                                      // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmplitudeFalloff;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindAngleDeg;                                      // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionAngularSpreadDeg;                         // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmallWaveSteepness;                                // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LargeWaveSteepness;                                // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteepnessFalloff;                                  // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GerstnerWaterWaveGeneratorSimple">();
	}
	static class UGerstnerWaterWaveGeneratorSimple* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGerstnerWaterWaveGeneratorSimple>();
	}
};
static_assert(alignof(UGerstnerWaterWaveGeneratorSimple) == 0x000008, "Wrong alignment on UGerstnerWaterWaveGeneratorSimple");
static_assert(sizeof(UGerstnerWaterWaveGeneratorSimple) == 0x000060, "Wrong size on UGerstnerWaterWaveGeneratorSimple");
static_assert(offsetof(UGerstnerWaterWaveGeneratorSimple, NumWaves) == 0x000028, "Member 'UGerstnerWaterWaveGeneratorSimple::NumWaves' has a wrong offset!");
static_assert(offsetof(UGerstnerWaterWaveGeneratorSimple, Seed) == 0x00002C, "Member 'UGerstnerWaterWaveGeneratorSimple::Seed' has a wrong offset!");
static_assert(offsetof(UGerstnerWaterWaveGeneratorSimple, Randomness) == 0x000030, "Member 'UGerstnerWaterWaveGeneratorSimple::Randomness' has a wrong offset!");
static_assert(offsetof(UGerstnerWaterWaveGeneratorSimple, MinWavelength) == 0x000034, "Member 'UGerstnerWaterWaveGeneratorSimple::MinWavelength' has a wrong offset!");
static_assert(offsetof(UGerstnerWaterWaveGeneratorSimple, MaxWavelength) == 0x000038, "Member 'UGerstnerWaterWaveGeneratorSimple::MaxWavelength' has a wrong offset!");
static_assert(offsetof(UGerstnerWaterWaveGeneratorSimple, WavelengthFalloff) == 0x00003C, "Member 'UGerstnerWaterWaveGeneratorSimple::WavelengthFalloff' has a wrong offset!");
static_assert(offsetof(UGerstnerWaterWaveGeneratorSimple, MinAmplitude) == 0x000040, "Member 'UGerstnerWaterWaveGeneratorSimple::MinAmplitude' has a wrong offset!");
static_assert(offsetof(UGerstnerWaterWaveGeneratorSimple, MaxAmplitude) == 0x000044, "Member 'UGerstnerWaterWaveGeneratorSimple::MaxAmplitude' has a wrong offset!");
static_assert(offsetof(UGerstnerWaterWaveGeneratorSimple, AmplitudeFalloff) == 0x000048, "Member 'UGerstnerWaterWaveGeneratorSimple::AmplitudeFalloff' has a wrong offset!");
static_assert(offsetof(UGerstnerWaterWaveGeneratorSimple, WindAngleDeg) == 0x00004C, "Member 'UGerstnerWaterWaveGeneratorSimple::WindAngleDeg' has a wrong offset!");
static_assert(offsetof(UGerstnerWaterWaveGeneratorSimple, DirectionAngularSpreadDeg) == 0x000050, "Member 'UGerstnerWaterWaveGeneratorSimple::DirectionAngularSpreadDeg' has a wrong offset!");
static_assert(offsetof(UGerstnerWaterWaveGeneratorSimple, SmallWaveSteepness) == 0x000054, "Member 'UGerstnerWaterWaveGeneratorSimple::SmallWaveSteepness' has a wrong offset!");
static_assert(offsetof(UGerstnerWaterWaveGeneratorSimple, LargeWaveSteepness) == 0x000058, "Member 'UGerstnerWaterWaveGeneratorSimple::LargeWaveSteepness' has a wrong offset!");
static_assert(offsetof(UGerstnerWaterWaveGeneratorSimple, SteepnessFalloff) == 0x00005C, "Member 'UGerstnerWaterWaveGeneratorSimple::SteepnessFalloff' has a wrong offset!");

// Class Water.WaterWaves
// 0x0000 (0x0028 - 0x0028)
class UWaterWaves : public UWaterWavesBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterWaves">();
	}
	static class UWaterWaves* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterWaves>();
	}
};
static_assert(alignof(UWaterWaves) == 0x000008, "Wrong alignment on UWaterWaves");
static_assert(sizeof(UWaterWaves) == 0x000028, "Wrong size on UWaterWaves");

// Class Water.GerstnerWaterWaves
// 0x0020 (0x0048 - 0x0028)
class UGerstnerWaterWaves final : public UWaterWaves
{
public:
	class UGerstnerWaterWaveGeneratorBase*        GerstnerWaveGenerator;                             // 0x0028(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGerstnerWave>                  GerstnerWaves;                                     // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	float                                         MaxWaveHeight;                                     // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GerstnerWaterWaves">();
	}
	static class UGerstnerWaterWaves* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGerstnerWaterWaves>();
	}
};
static_assert(alignof(UGerstnerWaterWaves) == 0x000008, "Wrong alignment on UGerstnerWaterWaves");
static_assert(sizeof(UGerstnerWaterWaves) == 0x000048, "Wrong size on UGerstnerWaterWaves");
static_assert(offsetof(UGerstnerWaterWaves, GerstnerWaveGenerator) == 0x000028, "Member 'UGerstnerWaterWaves::GerstnerWaveGenerator' has a wrong offset!");
static_assert(offsetof(UGerstnerWaterWaves, GerstnerWaves) == 0x000030, "Member 'UGerstnerWaterWaves::GerstnerWaves' has a wrong offset!");
static_assert(offsetof(UGerstnerWaterWaves, MaxWaveHeight) == 0x000040, "Member 'UGerstnerWaterWaves::MaxWaveHeight' has a wrong offset!");

// Class Water.GerstnerWaterWaveSubsystem
// 0x0018 (0x0048 - 0x0030)
class UGerstnerWaterWaveSubsystem final : public UEngineSubsystem
{
public:
	uint8                                         Pad_30[0x18];                                      // 0x0030(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GerstnerWaterWaveSubsystem">();
	}
	static class UGerstnerWaterWaveSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGerstnerWaterWaveSubsystem>();
	}
};
static_assert(alignof(UGerstnerWaterWaveSubsystem) == 0x000008, "Wrong alignment on UGerstnerWaterWaveSubsystem");
static_assert(sizeof(UGerstnerWaterWaveSubsystem) == 0x000048, "Wrong size on UGerstnerWaterWaveSubsystem");

// Class Water.LakeCollisionComponent
// 0x0020 (0x0550 - 0x0530)
class ULakeCollisionComponent final : public UPrimitiveComponent
{
public:
	class UBodySetup*                             CachedBodySetup;                                   // 0x0530(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                BoxExtent;                                         // 0x0538(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LakeCollisionComponent">();
	}
	static class ULakeCollisionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULakeCollisionComponent>();
	}
};
static_assert(alignof(ULakeCollisionComponent) == 0x000010, "Wrong alignment on ULakeCollisionComponent");
static_assert(sizeof(ULakeCollisionComponent) == 0x000550, "Wrong size on ULakeCollisionComponent");
static_assert(offsetof(ULakeCollisionComponent, CachedBodySetup) == 0x000530, "Member 'ULakeCollisionComponent::CachedBodySetup' has a wrong offset!");
static_assert(offsetof(ULakeCollisionComponent, BoxExtent) == 0x000538, "Member 'ULakeCollisionComponent::BoxExtent' has a wrong offset!");

// Class Water.NiagaraDataInterfaceWater
// 0x0008 (0x0040 - 0x0038)
class UNiagaraDataInterfaceWater final : public UNiagaraDataInterface
{
public:
	class UWaterBodyComponent*                    SourceBodyComponent;                               // 0x0038(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NiagaraDataInterfaceWater">();
	}
	static class UNiagaraDataInterfaceWater* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNiagaraDataInterfaceWater>();
	}
};
static_assert(alignof(UNiagaraDataInterfaceWater) == 0x000008, "Wrong alignment on UNiagaraDataInterfaceWater");
static_assert(sizeof(UNiagaraDataInterfaceWater) == 0x000040, "Wrong size on UNiagaraDataInterfaceWater");
static_assert(offsetof(UNiagaraDataInterfaceWater, SourceBodyComponent) == 0x000038, "Member 'UNiagaraDataInterfaceWater::SourceBodyComponent' has a wrong offset!");

// Class Water.NiagaraWaterFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UNiagaraWaterFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void SetWaterBody(class UNiagaraComponent* NiagaraSystem, const class FString& OverrideName, class AWaterBody* WaterBody);
	static void SetWaterBodyComponent(class UNiagaraComponent* NiagaraSystem, const class FString& OverrideName, class UWaterBodyComponent* WaterBodyComponent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NiagaraWaterFunctionLibrary">();
	}
	static class UNiagaraWaterFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNiagaraWaterFunctionLibrary>();
	}
};
static_assert(alignof(UNiagaraWaterFunctionLibrary) == 0x000008, "Wrong alignment on UNiagaraWaterFunctionLibrary");
static_assert(sizeof(UNiagaraWaterFunctionLibrary) == 0x000028, "Wrong size on UNiagaraWaterFunctionLibrary");

// Class Water.OceanCollisionComponent
// 0x0040 (0x0570 - 0x0530)
class UOceanCollisionComponent final : public UPrimitiveComponent
{
public:
	class UBodySetup*                             CachedBodySetup;                                   // 0x0530(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_538[0x38];                                     // 0x0538(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OceanCollisionComponent">();
	}
	static class UOceanCollisionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOceanCollisionComponent>();
	}
};
static_assert(alignof(UOceanCollisionComponent) == 0x000010, "Wrong alignment on UOceanCollisionComponent");
static_assert(sizeof(UOceanCollisionComponent) == 0x000570, "Wrong size on UOceanCollisionComponent");
static_assert(offsetof(UOceanCollisionComponent, CachedBodySetup) == 0x000530, "Member 'UOceanCollisionComponent::CachedBodySetup' has a wrong offset!");

// Class Water.OceanBoxCollisionComponent
// 0x0000 (0x0570 - 0x0570)
class UOceanBoxCollisionComponent final : public UBoxComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OceanBoxCollisionComponent">();
	}
	static class UOceanBoxCollisionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOceanBoxCollisionComponent>();
	}
};
static_assert(alignof(UOceanBoxCollisionComponent) == 0x000010, "Wrong alignment on UOceanBoxCollisionComponent");
static_assert(sizeof(UOceanBoxCollisionComponent) == 0x000570, "Wrong size on UOceanBoxCollisionComponent");

// Class Water.WaterBody
// 0x0030 (0x02A0 - 0x0270)
class AWaterBody : public AActor
{
public:
	uint8                                         Pad_270[0x8];                                      // 0x0270(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UWaterSplineComponent*                  SplineComp;                                        // 0x0278(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWaterSplineMetadata*                   WaterSplineMetadata;                               // 0x0280(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWaterBodyComponent*                    WaterBodyComponent;                                // 0x0288(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         WaterBodyIndex;                                    // 0x0290(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NonTransactional, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EWaterBodyType                                WaterBodyType;                                     // 0x0294(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_295[0x3];                                      // 0x0295(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UWaterWavesBase*                        WaterWaves;                                        // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UMaterialInstanceDynamic* GetRiverToLakeTransitionMaterialInstance();
	class UMaterialInstanceDynamic* GetRiverToOceanTransitionMaterialInstance();
	class UMaterialInstanceDynamic* GetWaterMaterialInstance();
	void OnWaterBodyChanged(bool bShapeOrPositionChanged, bool bWeightmapSettingsChanged);
	void SetWaterMaterial(class UMaterialInterface* InMaterial);
	void SetWaterWaves(class UWaterWavesBase* InWaterWaves);

	float GetAudioIntensityAtSplineInputKey(float InKey) const;
	TArray<class AWaterBodyExclusionVolume*> GetExclusionVolumes() const;
	TArray<class AWaterBodyIsland*> GetIslands() const;
	class UWaterBodyComponent* GetWaterBodyComponent() const;
	EWaterBodyType GetWaterBodyType() const;
	class UWaterSplineComponent* GetWaterSpline() const;
	float GetWaterVelocityAtSplineInputKey(float InKey) const;
	struct FVector GetWaterVelocityVectorAtSplineInputKey(float InKey) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterBody">();
	}
	static class AWaterBody* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWaterBody>();
	}
};
static_assert(alignof(AWaterBody) == 0x000008, "Wrong alignment on AWaterBody");
static_assert(sizeof(AWaterBody) == 0x0002A0, "Wrong size on AWaterBody");
static_assert(offsetof(AWaterBody, SplineComp) == 0x000278, "Member 'AWaterBody::SplineComp' has a wrong offset!");
static_assert(offsetof(AWaterBody, WaterSplineMetadata) == 0x000280, "Member 'AWaterBody::WaterSplineMetadata' has a wrong offset!");
static_assert(offsetof(AWaterBody, WaterBodyComponent) == 0x000288, "Member 'AWaterBody::WaterBodyComponent' has a wrong offset!");
static_assert(offsetof(AWaterBody, WaterBodyIndex) == 0x000290, "Member 'AWaterBody::WaterBodyIndex' has a wrong offset!");
static_assert(offsetof(AWaterBody, WaterBodyType) == 0x000294, "Member 'AWaterBody::WaterBodyType' has a wrong offset!");
static_assert(offsetof(AWaterBody, WaterWaves) == 0x000298, "Member 'AWaterBody::WaterWaves' has a wrong offset!");

// Class Water.WaterBodyGenerator
// 0x0000 (0x0028 - 0x0028)
class UWaterBodyGenerator : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterBodyGenerator">();
	}
	static class UWaterBodyGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterBodyGenerator>();
	}
};
static_assert(alignof(UWaterBodyGenerator) == 0x000008, "Wrong alignment on UWaterBodyGenerator");
static_assert(sizeof(UWaterBodyGenerator) == 0x000028, "Wrong size on UWaterBodyGenerator");

// Class Water.WaterBodyComponent
// 0x0EC0 (0x13F0 - 0x0530)
#pragma pack(push, 0x1)
class alignas(0x10) UWaterBodyComponent : public UPrimitiveComponent
{
public:
	class UPhysicalMaterial*                      PhysicalMaterial;                                  // 0x0530(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetWaveMaskDepth;                               // 0x0538(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxWaveHeightOffset;                               // 0x053C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFillCollisionUnderWaterBodiesForNavmesh;          // 0x0540(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_541[0xF];                                      // 0x0541(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUnderwaterPostProcessSettings         UnderwaterPostProcessSettings;                     // 0x0550(0x06B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FWaterCurveSettings                    CurveSettings;                                     // 0x0C00(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     WaterMaterial;                                     // 0x0C20(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     UnderwaterPostProcessMaterial;                     // 0x0C28(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     WaterInfoMaterial;                                 // 0x0C30(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWaterBodyHeightmapSettings            WaterHeightmapSettings;                            // 0x0C38(0x0080)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ShapeDilation;                                     // 0x0CB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionHeightOffset;                             // 0x0CBC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectsLandscape;                                 // 0x0CC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGenerateCollisions;                               // 0x0CC1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC2[0x2];                                      // 0x0CC2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WaterBodyIndex;                                    // 0x0CC4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, DuplicateTransient, IsPlainOldData, NonTransactional, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMesh*                            WaterMeshOverride;                                 // 0x0CC8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         OverlapMaterialPriority;                           // 0x0CD0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   CollisionProfileName;                              // 0x0CD4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWaterSplineMetadata*                   WaterSplineMetadata;                               // 0x0CD8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               WaterMID;                                          // 0x0CE0(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, TextExportTransient, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               UnderwaterPostProcessMID;                          // 0x0CE8(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, TextExportTransient, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               WaterInfoMID;                                      // 0x0CF0(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, TextExportTransient, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TLazyObjectPtr<class AWaterBodyIsland>> Islands;                                           // 0x0CF8(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, AdvancedDisplay, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TLazyObjectPtr<class AWaterBodyExclusionVolume>> ExclusionVolumes;                                  // 0x0D08(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, AdvancedDisplay, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ALandscapeProxy>         Landscape;                                         // 0x0D18(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPostProcessSettings                   CurrentPostProcessSettings;                        // 0x0D20(0x0690)(Transient, Protected, NativeAccessSpecifierProtected)
	bool                                          bCanAffectNavigation;                              // 0x13B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_13B1[0x7];                                     // 0x13B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UNavAreaBase>               WaterNavAreaClass;                                 // 0x13B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ShapeDilationZOffset;                              // 0x13C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_13C4[0x24];                                    // 0x13C4(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UMaterialInstanceDynamic* GetRiverToLakeTransitionMaterialInstance();
	class UMaterialInstanceDynamic* GetRiverToOceanTransitionMaterialInstance();
	class UMaterialInstanceDynamic* GetUnderwaterPostProcessMaterialInstance();
	class UMaterialInstanceDynamic* GetWaterInfoMaterialInstance();
	class UMaterialInstanceDynamic* GetWaterMaterialInstance();
	void OnWaterBodyChanged(bool bShapeOrPositionChanged, bool bWeightmapSettingsChanged);

	TArray<class UPrimitiveComponent*> GetCollisionComponents() const;
	TArray<class AWaterBodyExclusionVolume*> GetExclusionVolumes() const;
	TArray<class AWaterBodyIsland*> GetIslands() const;
	float GetMaxWaveHeight() const;
	TArray<class UPrimitiveComponent*> GetStandardRenderableComponents() const;
	class AWaterBody* GetWaterBodyActor() const;
	class UMaterialInterface* GetWaterMaterial() const;
	class UWaterSplineComponent* GetWaterSpline() const;
	void GetWaterSurfaceInfoAtLocation(const struct FVector& InLocation, struct FVector* OutWaterSurfaceLocation, struct FVector* OutWaterSurfaceNormal, struct FVector* OutWaterVelocity, float* OutWaterDepth, bool bIncludeDepth) const;
	float GetWaterVelocityAtSplineInputKey(float InKey) const;
	class UWaterWavesBase* GetWaterWaves() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterBodyComponent">();
	}
	static class UWaterBodyComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterBodyComponent>();
	}
};
#pragma pack(pop)
static_assert(alignof(UWaterBodyComponent) == 0x000010, "Wrong alignment on UWaterBodyComponent");
static_assert(sizeof(UWaterBodyComponent) == 0x0013F0, "Wrong size on UWaterBodyComponent");
static_assert(offsetof(UWaterBodyComponent, PhysicalMaterial) == 0x000530, "Member 'UWaterBodyComponent::PhysicalMaterial' has a wrong offset!");
static_assert(offsetof(UWaterBodyComponent, TargetWaveMaskDepth) == 0x000538, "Member 'UWaterBodyComponent::TargetWaveMaskDepth' has a wrong offset!");
static_assert(offsetof(UWaterBodyComponent, MaxWaveHeightOffset) == 0x00053C, "Member 'UWaterBodyComponent::MaxWaveHeightOffset' has a wrong offset!");
static_assert(offsetof(UWaterBodyComponent, bFillCollisionUnderWaterBodiesForNavmesh) == 0x000540, "Member 'UWaterBodyComponent::bFillCollisionUnderWaterBodiesForNavmesh' has a wrong offset!");
static_assert(offsetof(UWaterBodyComponent, UnderwaterPostProcessSettings) == 0x000550, "Member 'UWaterBodyComponent::UnderwaterPostProcessSettings' has a wrong offset!");
static_assert(offsetof(UWaterBodyComponent, CurveSettings) == 0x000C00, "Member 'UWaterBodyComponent::CurveSettings' has a wrong offset!");
static_assert(offsetof(UWaterBodyComponent, WaterMaterial) == 0x000C20, "Member 'UWaterBodyComponent::WaterMaterial' has a wrong offset!");
static_assert(offsetof(UWaterBodyComponent, UnderwaterPostProcessMaterial) == 0x000C28, "Member 'UWaterBodyComponent::UnderwaterPostProcessMaterial' has a wrong offset!");
static_assert(offsetof(UWaterBodyComponent, WaterInfoMaterial) == 0x000C30, "Member 'UWaterBodyComponent::WaterInfoMaterial' has a wrong offset!");
static_assert(offsetof(UWaterBodyComponent, WaterHeightmapSettings) == 0x000C38, "Member 'UWaterBodyComponent::WaterHeightmapSettings' has a wrong offset!");
static_assert(offsetof(UWaterBodyComponent, ShapeDilation) == 0x000CB8, "Member 'UWaterBodyComponent::ShapeDilation' has a wrong offset!");
static_assert(offsetof(UWaterBodyComponent, CollisionHeightOffset) == 0x000CBC, "Member 'UWaterBodyComponent::CollisionHeightOffset' has a wrong offset!");
static_assert(offsetof(UWaterBodyComponent, bAffectsLandscape) == 0x000CC0, "Member 'UWaterBodyComponent::bAffectsLandscape' has a wrong offset!");
static_assert(offsetof(UWaterBodyComponent, bGenerateCollisions) == 0x000CC1, "Member 'UWaterBodyComponent::bGenerateCollisions' has a wrong offset!");
static_assert(offsetof(UWaterBodyComponent, WaterBodyIndex) == 0x000CC4, "Member 'UWaterBodyComponent::WaterBodyIndex' has a wrong offset!");
static_assert(offsetof(UWaterBodyComponent, WaterMeshOverride) == 0x000CC8, "Member 'UWaterBodyComponent::WaterMeshOverride' has a wrong offset!");
static_assert(offsetof(UWaterBodyComponent, OverlapMaterialPriority) == 0x000CD0, "Member 'UWaterBodyComponent::OverlapMaterialPriority' has a wrong offset!");
static_assert(offsetof(UWaterBodyComponent, CollisionProfileName) == 0x000CD4, "Member 'UWaterBodyComponent::CollisionProfileName' has a wrong offset!");
static_assert(offsetof(UWaterBodyComponent, WaterSplineMetadata) == 0x000CD8, "Member 'UWaterBodyComponent::WaterSplineMetadata' has a wrong offset!");
static_assert(offsetof(UWaterBodyComponent, WaterMID) == 0x000CE0, "Member 'UWaterBodyComponent::WaterMID' has a wrong offset!");
static_assert(offsetof(UWaterBodyComponent, UnderwaterPostProcessMID) == 0x000CE8, "Member 'UWaterBodyComponent::UnderwaterPostProcessMID' has a wrong offset!");
static_assert(offsetof(UWaterBodyComponent, WaterInfoMID) == 0x000CF0, "Member 'UWaterBodyComponent::WaterInfoMID' has a wrong offset!");
static_assert(offsetof(UWaterBodyComponent, Islands) == 0x000CF8, "Member 'UWaterBodyComponent::Islands' has a wrong offset!");
static_assert(offsetof(UWaterBodyComponent, ExclusionVolumes) == 0x000D08, "Member 'UWaterBodyComponent::ExclusionVolumes' has a wrong offset!");
static_assert(offsetof(UWaterBodyComponent, Landscape) == 0x000D18, "Member 'UWaterBodyComponent::Landscape' has a wrong offset!");
static_assert(offsetof(UWaterBodyComponent, CurrentPostProcessSettings) == 0x000D20, "Member 'UWaterBodyComponent::CurrentPostProcessSettings' has a wrong offset!");
static_assert(offsetof(UWaterBodyComponent, bCanAffectNavigation) == 0x0013B0, "Member 'UWaterBodyComponent::bCanAffectNavigation' has a wrong offset!");
static_assert(offsetof(UWaterBodyComponent, WaterNavAreaClass) == 0x0013B8, "Member 'UWaterBodyComponent::WaterNavAreaClass' has a wrong offset!");
static_assert(offsetof(UWaterBodyComponent, ShapeDilationZOffset) == 0x0013C0, "Member 'UWaterBodyComponent::ShapeDilationZOffset' has a wrong offset!");

// Class Water.CustomMeshGenerator
// 0x0008 (0x0030 - 0x0028)
class UCustomMeshGenerator final : public UWaterBodyGenerator
{
public:
	class UStaticMeshComponent*                   MeshComp;                                          // 0x0028(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomMeshGenerator">();
	}
	static class UCustomMeshGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomMeshGenerator>();
	}
};
static_assert(alignof(UCustomMeshGenerator) == 0x000008, "Wrong alignment on UCustomMeshGenerator");
static_assert(sizeof(UCustomMeshGenerator) == 0x000030, "Wrong size on UCustomMeshGenerator");
static_assert(offsetof(UCustomMeshGenerator, MeshComp) == 0x000028, "Member 'UCustomMeshGenerator::MeshComp' has a wrong offset!");

// Class Water.WaterBodyCustom
// 0x0000 (0x02A0 - 0x02A0)
class AWaterBodyCustom final : public AWaterBody
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterBodyCustom">();
	}
	static class AWaterBodyCustom* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWaterBodyCustom>();
	}
};
static_assert(alignof(AWaterBodyCustom) == 0x000008, "Wrong alignment on AWaterBodyCustom");
static_assert(sizeof(AWaterBodyCustom) == 0x0002A0, "Wrong size on AWaterBodyCustom");

// Class Water.WaterBodyCustomComponent
// 0x0000 (0x13F0 - 0x13F0)
class UWaterBodyCustomComponent : public UWaterBodyComponent
{
public:
	class UStaticMeshComponent*                   MeshComp;                                          // 0x13E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterBodyCustomComponent">();
	}
	static class UWaterBodyCustomComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterBodyCustomComponent>();
	}
};
static_assert(alignof(UWaterBodyCustomComponent) == 0x000010, "Wrong alignment on UWaterBodyCustomComponent");
static_assert(sizeof(UWaterBodyCustomComponent) == 0x0013F0, "Wrong size on UWaterBodyCustomComponent");
static_assert(offsetof(UWaterBodyCustomComponent, MeshComp) == 0x0013E8, "Member 'UWaterBodyCustomComponent::MeshComp' has a wrong offset!");

// Class Water.WaterBodyExclusionVolume
// 0x0018 (0x02D0 - 0x02B8)
class AWaterBodyExclusionVolume : public APhysicsVolume
{
public:
	bool                                          bIgnoreAllOverlappingWaterBodies;                  // 0x02B8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AWaterBody*>                     WaterBodiesToIgnore;                               // 0x02C0(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterBodyExclusionVolume">();
	}
	static class AWaterBodyExclusionVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWaterBodyExclusionVolume>();
	}
};
static_assert(alignof(AWaterBodyExclusionVolume) == 0x000008, "Wrong alignment on AWaterBodyExclusionVolume");
static_assert(sizeof(AWaterBodyExclusionVolume) == 0x0002D0, "Wrong size on AWaterBodyExclusionVolume");
static_assert(offsetof(AWaterBodyExclusionVolume, bIgnoreAllOverlappingWaterBodies) == 0x0002B8, "Member 'AWaterBodyExclusionVolume::bIgnoreAllOverlappingWaterBodies' has a wrong offset!");
static_assert(offsetof(AWaterBodyExclusionVolume, WaterBodiesToIgnore) == 0x0002C0, "Member 'AWaterBodyExclusionVolume::WaterBodiesToIgnore' has a wrong offset!");

// Class Water.WaterBodyIsland
// 0x0010 (0x0280 - 0x0270)
class AWaterBodyIsland : public AActor
{
public:
	uint8                                         Pad_270[0x8];                                      // 0x0270(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UWaterSplineComponent*                  SplineComp;                                        // 0x0278(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UWaterSplineComponent* GetWaterSpline() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterBodyIsland">();
	}
	static class AWaterBodyIsland* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWaterBodyIsland>();
	}
};
static_assert(alignof(AWaterBodyIsland) == 0x000008, "Wrong alignment on AWaterBodyIsland");
static_assert(sizeof(AWaterBodyIsland) == 0x000280, "Wrong size on AWaterBodyIsland");
static_assert(offsetof(AWaterBodyIsland, SplineComp) == 0x000278, "Member 'AWaterBodyIsland::SplineComp' has a wrong offset!");

// Class Water.LakeGenerator
// 0x0018 (0x0040 - 0x0028)
class ULakeGenerator final : public UWaterBodyGenerator
{
public:
	class UStaticMeshComponent*                   LakeMeshComp;                                      // 0x0028(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                          LakeCollisionComp;                                 // 0x0030(0x0008)(ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULakeCollisionComponent*                LakeCollision;                                     // 0x0038(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LakeGenerator">();
	}
	static class ULakeGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULakeGenerator>();
	}
};
static_assert(alignof(ULakeGenerator) == 0x000008, "Wrong alignment on ULakeGenerator");
static_assert(sizeof(ULakeGenerator) == 0x000040, "Wrong size on ULakeGenerator");
static_assert(offsetof(ULakeGenerator, LakeMeshComp) == 0x000028, "Member 'ULakeGenerator::LakeMeshComp' has a wrong offset!");
static_assert(offsetof(ULakeGenerator, LakeCollisionComp) == 0x000030, "Member 'ULakeGenerator::LakeCollisionComp' has a wrong offset!");
static_assert(offsetof(ULakeGenerator, LakeCollision) == 0x000038, "Member 'ULakeGenerator::LakeCollision' has a wrong offset!");

// Class Water.WaterBodyLake
// 0x0000 (0x02A0 - 0x02A0)
class AWaterBodyLake final : public AWaterBody
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterBodyLake">();
	}
	static class AWaterBodyLake* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWaterBodyLake>();
	}
};
static_assert(alignof(AWaterBodyLake) == 0x000008, "Wrong alignment on AWaterBodyLake");
static_assert(sizeof(AWaterBodyLake) == 0x0002A0, "Wrong size on AWaterBodyLake");

// Class Water.WaterBodyLakeComponent
// 0x0010 (0x1400 - 0x13F0)
#pragma pack(push, 0x1)
class alignas(0x10) UWaterBodyLakeComponent : public UWaterBodyComponent
{
public:
	class UStaticMeshComponent*                   LakeMeshComp;                                      // 0x13E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULakeCollisionComponent*                LakeCollision;                                     // 0x13F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterBodyLakeComponent">();
	}
	static class UWaterBodyLakeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterBodyLakeComponent>();
	}
};
#pragma pack(pop)
static_assert(alignof(UWaterBodyLakeComponent) == 0x000010, "Wrong alignment on UWaterBodyLakeComponent");
static_assert(sizeof(UWaterBodyLakeComponent) == 0x001400, "Wrong size on UWaterBodyLakeComponent");
static_assert(offsetof(UWaterBodyLakeComponent, LakeMeshComp) == 0x0013E8, "Member 'UWaterBodyLakeComponent::LakeMeshComp' has a wrong offset!");
static_assert(offsetof(UWaterBodyLakeComponent, LakeCollision) == 0x0013F0, "Member 'UWaterBodyLakeComponent::LakeCollision' has a wrong offset!");

// Class Water.OceanGenerator
// 0x0020 (0x0048 - 0x0028)
class UOceanGenerator final : public UWaterBodyGenerator
{
public:
	TArray<class UOceanBoxCollisionComponent*>    CollisionBoxes;                                    // 0x0028(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NonPIEDuplicateTransient, NativeAccessSpecifierPublic)
	TArray<class UOceanCollisionComponent*>       CollisionHullSets;                                 // 0x0038(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NonPIEDuplicateTransient, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OceanGenerator">();
	}
	static class UOceanGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOceanGenerator>();
	}
};
static_assert(alignof(UOceanGenerator) == 0x000008, "Wrong alignment on UOceanGenerator");
static_assert(sizeof(UOceanGenerator) == 0x000048, "Wrong size on UOceanGenerator");
static_assert(offsetof(UOceanGenerator, CollisionBoxes) == 0x000028, "Member 'UOceanGenerator::CollisionBoxes' has a wrong offset!");
static_assert(offsetof(UOceanGenerator, CollisionHullSets) == 0x000038, "Member 'UOceanGenerator::CollisionHullSets' has a wrong offset!");

// Class Water.WaterBodyOcean
// 0x0000 (0x02A0 - 0x02A0)
class AWaterBodyOcean final : public AWaterBody
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterBodyOcean">();
	}
	static class AWaterBodyOcean* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWaterBodyOcean>();
	}
};
static_assert(alignof(AWaterBodyOcean) == 0x000008, "Wrong alignment on AWaterBodyOcean");
static_assert(sizeof(AWaterBodyOcean) == 0x0002A0, "Wrong size on AWaterBodyOcean");

// Class Water.WaterBodyOceanComponent
// 0x0050 (0x1440 - 0x13F0)
#pragma pack(push, 0x1)
class alignas(0x10) UWaterBodyOceanComponent : public UWaterBodyComponent
{
public:
	TArray<class UOceanBoxCollisionComponent*>    CollisionBoxes;                                    // 0x13E8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NonPIEDuplicateTransient, NativeAccessSpecifierProtected)
	TArray<class UOceanCollisionComponent*>       CollisionHullSets;                                 // 0x13F8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NonPIEDuplicateTransient, NativeAccessSpecifierProtected)
	struct FVector2D                              VisualExtents;                                     // 0x1408(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                CollisionExtents;                                  // 0x1418(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HeightOffset;                                      // 0x1430(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1434[0x4];                                     // 0x1434(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterBodyOceanComponent">();
	}
	static class UWaterBodyOceanComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterBodyOceanComponent>();
	}
};
#pragma pack(pop)
static_assert(alignof(UWaterBodyOceanComponent) == 0x000010, "Wrong alignment on UWaterBodyOceanComponent");
static_assert(sizeof(UWaterBodyOceanComponent) == 0x001440, "Wrong size on UWaterBodyOceanComponent");
static_assert(offsetof(UWaterBodyOceanComponent, CollisionBoxes) == 0x0013E8, "Member 'UWaterBodyOceanComponent::CollisionBoxes' has a wrong offset!");
static_assert(offsetof(UWaterBodyOceanComponent, CollisionHullSets) == 0x0013F8, "Member 'UWaterBodyOceanComponent::CollisionHullSets' has a wrong offset!");
static_assert(offsetof(UWaterBodyOceanComponent, VisualExtents) == 0x001408, "Member 'UWaterBodyOceanComponent::VisualExtents' has a wrong offset!");
static_assert(offsetof(UWaterBodyOceanComponent, CollisionExtents) == 0x001418, "Member 'UWaterBodyOceanComponent::CollisionExtents' has a wrong offset!");
static_assert(offsetof(UWaterBodyOceanComponent, HeightOffset) == 0x001430, "Member 'UWaterBodyOceanComponent::HeightOffset' has a wrong offset!");

// Class Water.RiverGenerator
// 0x0010 (0x0038 - 0x0028)
class URiverGenerator final : public UWaterBodyGenerator
{
public:
	TArray<class USplineMeshComponent*>           SplineMeshComponents;                              // 0x0028(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NonPIEDuplicateTransient, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RiverGenerator">();
	}
	static class URiverGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<URiverGenerator>();
	}
};
static_assert(alignof(URiverGenerator) == 0x000008, "Wrong alignment on URiverGenerator");
static_assert(sizeof(URiverGenerator) == 0x000038, "Wrong size on URiverGenerator");
static_assert(offsetof(URiverGenerator, SplineMeshComponents) == 0x000028, "Member 'URiverGenerator::SplineMeshComponents' has a wrong offset!");

// Class Water.WaterBodyRiver
// 0x0000 (0x02A0 - 0x02A0)
class AWaterBodyRiver final : public AWaterBody
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterBodyRiver">();
	}
	static class AWaterBodyRiver* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWaterBodyRiver>();
	}
};
static_assert(alignof(AWaterBodyRiver) == 0x000008, "Wrong alignment on AWaterBodyRiver");
static_assert(sizeof(AWaterBodyRiver) == 0x0002A0, "Wrong size on AWaterBodyRiver");

// Class Water.WaterBodyRiverComponent
// 0x0030 (0x1420 - 0x13F0)
class UWaterBodyRiverComponent : public UWaterBodyComponent
{
public:
	TArray<class USplineMeshComponent*>           SplineMeshComponents;                              // 0x13E8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NonPIEDuplicateTransient, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     LakeTransitionMaterial;                            // 0x13F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               LakeTransitionMID;                                 // 0x1400(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, TextExportTransient, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     OceanTransitionMaterial;                           // 0x1408(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               OceanTransitionMID;                                // 0x1410(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, TextExportTransient, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ShapeDilationZOffsetFar;                           // 0x1418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_141C[0x4];                                     // 0x141C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterBodyRiverComponent">();
	}
	static class UWaterBodyRiverComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterBodyRiverComponent>();
	}
};
static_assert(alignof(UWaterBodyRiverComponent) == 0x000010, "Wrong alignment on UWaterBodyRiverComponent");
static_assert(sizeof(UWaterBodyRiverComponent) == 0x001420, "Wrong size on UWaterBodyRiverComponent");
static_assert(offsetof(UWaterBodyRiverComponent, SplineMeshComponents) == 0x0013E8, "Member 'UWaterBodyRiverComponent::SplineMeshComponents' has a wrong offset!");
static_assert(offsetof(UWaterBodyRiverComponent, LakeTransitionMaterial) == 0x0013F8, "Member 'UWaterBodyRiverComponent::LakeTransitionMaterial' has a wrong offset!");
static_assert(offsetof(UWaterBodyRiverComponent, LakeTransitionMID) == 0x001400, "Member 'UWaterBodyRiverComponent::LakeTransitionMID' has a wrong offset!");
static_assert(offsetof(UWaterBodyRiverComponent, OceanTransitionMaterial) == 0x001408, "Member 'UWaterBodyRiverComponent::OceanTransitionMaterial' has a wrong offset!");
static_assert(offsetof(UWaterBodyRiverComponent, OceanTransitionMID) == 0x001410, "Member 'UWaterBodyRiverComponent::OceanTransitionMID' has a wrong offset!");
static_assert(offsetof(UWaterBodyRiverComponent, ShapeDilationZOffsetFar) == 0x001418, "Member 'UWaterBodyRiverComponent::ShapeDilationZOffsetFar' has a wrong offset!");

// Class Water.WaterBrushActorInterface
// 0x0000 (0x0028 - 0x0028)
class IWaterBrushActorInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterBrushActorInterface">();
	}
	static class IWaterBrushActorInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IWaterBrushActorInterface>();
	}
};
static_assert(alignof(IWaterBrushActorInterface) == 0x000008, "Wrong alignment on IWaterBrushActorInterface");
static_assert(sizeof(IWaterBrushActorInterface) == 0x000028, "Wrong size on IWaterBrushActorInterface");

// Class Water.WaterMeshComponent
// 0x0120 (0x0690 - 0x0570)
class UWaterMeshComponent final : public UMeshComponent
{
public:
	int32                                         ForceCollapseDensityLevel;                         // 0x0568(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_56C[0x4];                                      // 0x056C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     FarDistanceMaterial;                               // 0x0570(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FarDistanceMeshExtent;                             // 0x0578(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TileSize;                                          // 0x057C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FIntPoint                              ExtentInTiles;                                     // 0x0580(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_588[0x98];                                     // 0x0588(0x0098)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class UMaterialInterface*>               UsedMaterials;                                     // 0x0620(0x0050)(Transient, TextExportTransient, NonPIEDuplicateTransient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_670[0x10];                                     // 0x0670(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TessellationFactor;                                // 0x0680(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LODScale;                                          // 0x0684(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_688[0x8];                                      // 0x0688(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterMeshComponent">();
	}
	static class UWaterMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterMeshComponent>();
	}
};
static_assert(alignof(UWaterMeshComponent) == 0x000010, "Wrong alignment on UWaterMeshComponent");
static_assert(sizeof(UWaterMeshComponent) == 0x000690, "Wrong size on UWaterMeshComponent");
static_assert(offsetof(UWaterMeshComponent, ForceCollapseDensityLevel) == 0x000568, "Member 'UWaterMeshComponent::ForceCollapseDensityLevel' has a wrong offset!");
static_assert(offsetof(UWaterMeshComponent, FarDistanceMaterial) == 0x000570, "Member 'UWaterMeshComponent::FarDistanceMaterial' has a wrong offset!");
static_assert(offsetof(UWaterMeshComponent, FarDistanceMeshExtent) == 0x000578, "Member 'UWaterMeshComponent::FarDistanceMeshExtent' has a wrong offset!");
static_assert(offsetof(UWaterMeshComponent, TileSize) == 0x00057C, "Member 'UWaterMeshComponent::TileSize' has a wrong offset!");
static_assert(offsetof(UWaterMeshComponent, ExtentInTiles) == 0x000580, "Member 'UWaterMeshComponent::ExtentInTiles' has a wrong offset!");
static_assert(offsetof(UWaterMeshComponent, UsedMaterials) == 0x000620, "Member 'UWaterMeshComponent::UsedMaterials' has a wrong offset!");
static_assert(offsetof(UWaterMeshComponent, TessellationFactor) == 0x000680, "Member 'UWaterMeshComponent::TessellationFactor' has a wrong offset!");
static_assert(offsetof(UWaterMeshComponent, LODScale) == 0x000684, "Member 'UWaterMeshComponent::LODScale' has a wrong offset!");

// Class Water.WaterRuntimeSettings
// 0x0080 (0x00B0 - 0x0030)
class UWaterRuntimeSettings final : public UDeveloperSettings
{
public:
	ECollisionChannel                             CollisionChannelForWaterTraces;                    // 0x0030(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialParameterCollection> MaterialParameterCollection;                       // 0x0038(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaterBodyIconWorldZOffset;                         // 0x0060(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DefaultWaterCollisionProfileName;                  // 0x0064(0x0004)(Edit, ZeroConstructor, Config, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UMaterialInterface>      DefaultWaterInfoMaterial;                          // 0x0068(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UWaterBodyRiverComponent>   WaterBodyRiverComponentClass;                      // 0x0090(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UWaterBodyLakeComponent>    WaterBodyLakeComponentClass;                       // 0x0098(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UWaterBodyOceanComponent>   WaterBodyOceanComponentClass;                      // 0x00A0(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UWaterBodyCustomComponent>  WaterBodyCustomComponentClass;                     // 0x00A8(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterRuntimeSettings">();
	}
	static class UWaterRuntimeSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterRuntimeSettings>();
	}
};
static_assert(alignof(UWaterRuntimeSettings) == 0x000008, "Wrong alignment on UWaterRuntimeSettings");
static_assert(sizeof(UWaterRuntimeSettings) == 0x0000B0, "Wrong size on UWaterRuntimeSettings");
static_assert(offsetof(UWaterRuntimeSettings, CollisionChannelForWaterTraces) == 0x000030, "Member 'UWaterRuntimeSettings::CollisionChannelForWaterTraces' has a wrong offset!");
static_assert(offsetof(UWaterRuntimeSettings, MaterialParameterCollection) == 0x000038, "Member 'UWaterRuntimeSettings::MaterialParameterCollection' has a wrong offset!");
static_assert(offsetof(UWaterRuntimeSettings, WaterBodyIconWorldZOffset) == 0x000060, "Member 'UWaterRuntimeSettings::WaterBodyIconWorldZOffset' has a wrong offset!");
static_assert(offsetof(UWaterRuntimeSettings, DefaultWaterCollisionProfileName) == 0x000064, "Member 'UWaterRuntimeSettings::DefaultWaterCollisionProfileName' has a wrong offset!");
static_assert(offsetof(UWaterRuntimeSettings, DefaultWaterInfoMaterial) == 0x000068, "Member 'UWaterRuntimeSettings::DefaultWaterInfoMaterial' has a wrong offset!");
static_assert(offsetof(UWaterRuntimeSettings, WaterBodyRiverComponentClass) == 0x000090, "Member 'UWaterRuntimeSettings::WaterBodyRiverComponentClass' has a wrong offset!");
static_assert(offsetof(UWaterRuntimeSettings, WaterBodyLakeComponentClass) == 0x000098, "Member 'UWaterRuntimeSettings::WaterBodyLakeComponentClass' has a wrong offset!");
static_assert(offsetof(UWaterRuntimeSettings, WaterBodyOceanComponentClass) == 0x0000A0, "Member 'UWaterRuntimeSettings::WaterBodyOceanComponentClass' has a wrong offset!");
static_assert(offsetof(UWaterRuntimeSettings, WaterBodyCustomComponentClass) == 0x0000A8, "Member 'UWaterRuntimeSettings::WaterBodyCustomComponentClass' has a wrong offset!");

// Class Water.WaterSplineComponent
// 0x0020 (0x0650 - 0x0630)
class UWaterSplineComponent final : public USplineComponent
{
public:
	struct FWaterSplineCurveDefaults              WaterSplineDefaults;                               // 0x0630(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FWaterSplineCurveDefaults              PreviousWaterSplineDefaults;                       // 0x0640(0x0010)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterSplineComponent">();
	}
	static class UWaterSplineComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterSplineComponent>();
	}
};
static_assert(alignof(UWaterSplineComponent) == 0x000010, "Wrong alignment on UWaterSplineComponent");
static_assert(sizeof(UWaterSplineComponent) == 0x000650, "Wrong size on UWaterSplineComponent");
static_assert(offsetof(UWaterSplineComponent, WaterSplineDefaults) == 0x000630, "Member 'UWaterSplineComponent::WaterSplineDefaults' has a wrong offset!");
static_assert(offsetof(UWaterSplineComponent, PreviousWaterSplineDefaults) == 0x000640, "Member 'UWaterSplineComponent::PreviousWaterSplineDefaults' has a wrong offset!");

// Class Water.WaterSplineMetadata
// 0x0078 (0x00A0 - 0x0028)
class UWaterSplineMetadata final : public USplineMetadata
{
public:
	struct FInterpCurveFloat                      Depth;                                             // 0x0028(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveFloat                      WaterVelocityScalar;                               // 0x0040(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveFloat                      RiverWidth;                                        // 0x0058(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveFloat                      AudioIntensity;                                    // 0x0070(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveVector                     WaterVelocity;                                     // 0x0088(0x0018)(ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterSplineMetadata">();
	}
	static class UWaterSplineMetadata* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterSplineMetadata>();
	}
};
static_assert(alignof(UWaterSplineMetadata) == 0x000008, "Wrong alignment on UWaterSplineMetadata");
static_assert(sizeof(UWaterSplineMetadata) == 0x0000A0, "Wrong size on UWaterSplineMetadata");
static_assert(offsetof(UWaterSplineMetadata, Depth) == 0x000028, "Member 'UWaterSplineMetadata::Depth' has a wrong offset!");
static_assert(offsetof(UWaterSplineMetadata, WaterVelocityScalar) == 0x000040, "Member 'UWaterSplineMetadata::WaterVelocityScalar' has a wrong offset!");
static_assert(offsetof(UWaterSplineMetadata, RiverWidth) == 0x000058, "Member 'UWaterSplineMetadata::RiverWidth' has a wrong offset!");
static_assert(offsetof(UWaterSplineMetadata, AudioIntensity) == 0x000070, "Member 'UWaterSplineMetadata::AudioIntensity' has a wrong offset!");
static_assert(offsetof(UWaterSplineMetadata, WaterVelocity) == 0x000088, "Member 'UWaterSplineMetadata::WaterVelocity' has a wrong offset!");

// Class Water.WaterSubsystem
// 0x00D0 (0x0110 - 0x0040)
class UWaterSubsystem final : public UTickableWorldSubsystem
{
public:
	uint8                                         Pad_40[0x38];                                      // 0x0040(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class ABuoyancyManager*                       BuoyancyManager;                                   // 0x0078(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bIsUnderWater, float DepthUnderwater)> OnCameraUnderwaterStateChanged;                    // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnWaterScalabilityChanged;                         // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UStaticMesh*                            DefaultRiverMesh;                                  // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            DefaultLakeMesh;                                   // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B0[0x28];                                      // 0x00B0(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialParameterCollection*           MaterialParameterCollection;                       // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E0[0x30];                                      // 0x00E0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static int32 GetShallowWaterMaxDynamicForces();
	static int32 GetShallowWaterMaxImpulseForces();
	static int32 GetShallowWaterSimulationRenderTargetSize();

	void PrintToWaterLog(const class FString& Message, bool bWarning);
	void SetOceanFloodHeight(float InFloodHeight);

	float GetCameraUnderwaterDepth() const;
	float GetOceanBaseHeight() const;
	float GetOceanFloodHeight() const;
	float GetOceanTotalHeight() const;
	float GetSmoothedWorldTimeSeconds() const;
	float GetWaterTimeSeconds() const;
	bool IsShallowWaterSimulationEnabled() const;
	bool IsUnderwaterPostProcessEnabled() const;
	bool IsWaterRenderingEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterSubsystem">();
	}
	static class UWaterSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterSubsystem>();
	}
};
static_assert(alignof(UWaterSubsystem) == 0x000008, "Wrong alignment on UWaterSubsystem");
static_assert(sizeof(UWaterSubsystem) == 0x000110, "Wrong size on UWaterSubsystem");
static_assert(offsetof(UWaterSubsystem, BuoyancyManager) == 0x000078, "Member 'UWaterSubsystem::BuoyancyManager' has a wrong offset!");
static_assert(offsetof(UWaterSubsystem, OnCameraUnderwaterStateChanged) == 0x000080, "Member 'UWaterSubsystem::OnCameraUnderwaterStateChanged' has a wrong offset!");
static_assert(offsetof(UWaterSubsystem, OnWaterScalabilityChanged) == 0x000090, "Member 'UWaterSubsystem::OnWaterScalabilityChanged' has a wrong offset!");
static_assert(offsetof(UWaterSubsystem, DefaultRiverMesh) == 0x0000A0, "Member 'UWaterSubsystem::DefaultRiverMesh' has a wrong offset!");
static_assert(offsetof(UWaterSubsystem, DefaultLakeMesh) == 0x0000A8, "Member 'UWaterSubsystem::DefaultLakeMesh' has a wrong offset!");
static_assert(offsetof(UWaterSubsystem, MaterialParameterCollection) == 0x0000D8, "Member 'UWaterSubsystem::MaterialParameterCollection' has a wrong offset!");

// Class Water.WaterWavesAsset
// 0x0008 (0x0030 - 0x0028)
class UWaterWavesAsset final : public UObject
{
public:
	class UWaterWaves*                            WaterWaves;                                        // 0x0028(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterWavesAsset">();
	}
	static class UWaterWavesAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterWavesAsset>();
	}
};
static_assert(alignof(UWaterWavesAsset) == 0x000008, "Wrong alignment on UWaterWavesAsset");
static_assert(sizeof(UWaterWavesAsset) == 0x000030, "Wrong size on UWaterWavesAsset");
static_assert(offsetof(UWaterWavesAsset, WaterWaves) == 0x000028, "Member 'UWaterWavesAsset::WaterWaves' has a wrong offset!");

// Class Water.WaterWavesAssetReference
// 0x0008 (0x0030 - 0x0028)
class UWaterWavesAssetReference final : public UWaterWavesBase
{
public:
	class UWaterWavesAsset*                       WaterWavesAsset;                                   // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterWavesAssetReference">();
	}
	static class UWaterWavesAssetReference* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterWavesAssetReference>();
	}
};
static_assert(alignof(UWaterWavesAssetReference) == 0x000008, "Wrong alignment on UWaterWavesAssetReference");
static_assert(sizeof(UWaterWavesAssetReference) == 0x000030, "Wrong size on UWaterWavesAssetReference");
static_assert(offsetof(UWaterWavesAssetReference, WaterWavesAsset) == 0x000028, "Member 'UWaterWavesAssetReference::WaterWavesAsset' has a wrong offset!");

// Class Water.WaterZone
// 0x0048 (0x02B8 - 0x0270)
class AWaterZone final : public AActor
{
public:
	class UTextureRenderTarget2D*                 WaterInfoTexture;                                  // 0x0270(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              RenderTargetResolution;                            // 0x0278(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWaterMeshComponent*                    WaterMesh;                                         // 0x0280(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector2D                              ZoneExtent;                                        // 0x0288(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CaptureZOffset;                                    // 0x0298(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bHalfPrecisionTexture;                             // 0x029C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_29D[0x3];                                      // 0x029D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VelocityBlurRadius;                                // 0x02A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A4[0x14];                                     // 0x02A4(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterZone">();
	}
	static class AWaterZone* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWaterZone>();
	}
};
static_assert(alignof(AWaterZone) == 0x000008, "Wrong alignment on AWaterZone");
static_assert(sizeof(AWaterZone) == 0x0002B8, "Wrong size on AWaterZone");
static_assert(offsetof(AWaterZone, WaterInfoTexture) == 0x000270, "Member 'AWaterZone::WaterInfoTexture' has a wrong offset!");
static_assert(offsetof(AWaterZone, RenderTargetResolution) == 0x000278, "Member 'AWaterZone::RenderTargetResolution' has a wrong offset!");
static_assert(offsetof(AWaterZone, WaterMesh) == 0x000280, "Member 'AWaterZone::WaterMesh' has a wrong offset!");
static_assert(offsetof(AWaterZone, ZoneExtent) == 0x000288, "Member 'AWaterZone::ZoneExtent' has a wrong offset!");
static_assert(offsetof(AWaterZone, CaptureZOffset) == 0x000298, "Member 'AWaterZone::CaptureZOffset' has a wrong offset!");
static_assert(offsetof(AWaterZone, bHalfPrecisionTexture) == 0x00029C, "Member 'AWaterZone::bHalfPrecisionTexture' has a wrong offset!");
static_assert(offsetof(AWaterZone, VelocityBlurRadius) == 0x0002A0, "Member 'AWaterZone::VelocityBlurRadius' has a wrong offset!");

}

