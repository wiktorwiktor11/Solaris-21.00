#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_PhysicsTree_Reporter

#include "Basic.hpp"

#include "B_PhysicsTree_Reporter_classes.hpp"
#include "B_PhysicsTree_Reporter_parameters.hpp"


namespace SDK
{

// Function B_PhysicsTree_Reporter.B_PhysicsTree_Reporter_C.EndMatchReport
// (BlueprintCallable, BlueprintEvent)

void AB_PhysicsTree_Reporter_C::EndMatchReport()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PhysicsTree_Reporter_C", "EndMatchReport");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PhysicsTree_Reporter.B_PhysicsTree_Reporter_C.ExecuteUbergraph_B_PhysicsTree_Reporter
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PhysicsTree_Reporter_C::ExecuteUbergraph_B_PhysicsTree_Reporter(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PhysicsTree_Reporter_C", "ExecuteUbergraph_B_PhysicsTree_Reporter");

	Params::B_PhysicsTree_Reporter_C_ExecuteUbergraph_B_PhysicsTree_Reporter Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PhysicsTree_Reporter.B_PhysicsTree_Reporter_C.GetLogDataByInstanceName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           InstanceName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FPhysicsLogAnalyticsStruct       Data                                                   (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   Index_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PhysicsTree_Reporter_C::GetLogDataByInstanceName(const class FString& InstanceName, struct FPhysicsLogAnalyticsStruct* Data, int32* Index_0, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PhysicsTree_Reporter_C", "GetLogDataByInstanceName");

	Params::B_PhysicsTree_Reporter_C_GetLogDataByInstanceName Parms{};

	Parms.InstanceName = std::move(InstanceName);

	UObject::ProcessEvent(Func, &Parms);

	if (Data != nullptr)
		*Data = std::move(Parms.Data);

	if (Index_0 != nullptr)
		*Index_0 = Parms.Index_0;

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function B_PhysicsTree_Reporter.B_PhysicsTree_Reporter_C.OnReady_FFF47C8E40A1C412A19C8B8828BD5787
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AFortGameStateAthena*             GameState                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UFortPlaylist*                    Playlist                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTagContainer            PlaylistContextTags                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AB_PhysicsTree_Reporter_C::OnReady_FFF47C8E40A1C412A19C8B8828BD5787(class AFortGameStateAthena* GameState, const class UFortPlaylist* Playlist, const struct FGameplayTagContainer& PlaylistContextTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PhysicsTree_Reporter_C", "OnReady_FFF47C8E40A1C412A19C8B8828BD5787");

	Params::B_PhysicsTree_Reporter_C_OnReady_FFF47C8E40A1C412A19C8B8828BD5787 Parms{};

	Parms.GameState = GameState;
	Parms.Playlist = Playlist;
	Parms.PlaylistContextTags = std::move(PlaylistContextTags);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PhysicsTree_Reporter.B_PhysicsTree_Reporter_C.PhaseChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EAthenaGamePhase                        GamePhase                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PhysicsTree_Reporter_C::PhaseChanged(EAthenaGamePhase GamePhase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PhysicsTree_Reporter_C", "PhaseChanged");

	Params::B_PhysicsTree_Reporter_C_PhaseChanged Parms{};

	Parms.GamePhase = GamePhase;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PhysicsTree_Reporter.B_PhysicsTree_Reporter_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AB_PhysicsTree_Reporter_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PhysicsTree_Reporter_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PhysicsTree_Reporter.B_PhysicsTree_Reporter_C.ReportDamageInflicted
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           InstanceName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// EPhysicsLogAnalytics_DamageCategory     DamageCategory                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PhysicsTree_Reporter_C::ReportDamageInflicted(const class FString& InstanceName, EPhysicsLogAnalytics_DamageCategory DamageCategory, float Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PhysicsTree_Reporter_C", "ReportDamageInflicted");

	Params::B_PhysicsTree_Reporter_C_ReportDamageInflicted Parms{};

	Parms.InstanceName = std::move(InstanceName);
	Parms.DamageCategory = DamageCategory;
	Parms.Amount = Amount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PhysicsTree_Reporter.B_PhysicsTree_Reporter_C.ReportLogDestroyed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Instance_Name                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PhysicsTree_Reporter_C::ReportLogDestroyed(const class FString& Instance_Name, const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PhysicsTree_Reporter_C", "ReportLogDestroyed");

	Params::B_PhysicsTree_Reporter_C_ReportLogDestroyed Parms{};

	Parms.Instance_Name = std::move(Instance_Name);
	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PhysicsTree_Reporter.B_PhysicsTree_Reporter_C.ReportLogFelled
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Instance_Name                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Felled_By                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PhysicsTree_Reporter_C::ReportLogFelled(const class FString& Instance_Name, const class FString& Felled_By, const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PhysicsTree_Reporter_C", "ReportLogFelled");

	Params::B_PhysicsTree_Reporter_C_ReportLogFelled Parms{};

	Parms.Instance_Name = std::move(Instance_Name);
	Parms.Felled_By = std::move(Felled_By);
	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PhysicsTree_Reporter.B_PhysicsTree_Reporter_C.ReportTreeAnalytics
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_PhysicsTree_Reporter_C::ReportTreeAnalytics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PhysicsTree_Reporter_C", "ReportTreeAnalytics");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PhysicsTree_Reporter.B_PhysicsTree_Reporter_C.WrapString
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           Prepend                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           String                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Append                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Result                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void AB_PhysicsTree_Reporter_C::WrapString(const class FString& Prepend, const class FString& String, const class FString& Append, class FString* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PhysicsTree_Reporter_C", "WrapString");

	Params::B_PhysicsTree_Reporter_C_WrapString Parms{};

	Parms.Prepend = std::move(Prepend);
	Parms.String = std::move(String);
	Parms.Append = std::move(Append);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}

}

