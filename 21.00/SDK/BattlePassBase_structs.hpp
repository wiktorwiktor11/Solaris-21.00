#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BattlePassBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "GameplayTags_0_structs.hpp"


namespace SDK
{

// Enum BattlePassBase.EBattlePassLandingPageSpecialEntryType
// NumValues: 0x0006
enum class EBattlePassLandingPageSpecialEntryType : uint8
{
	None                                     = 0,
	Subscription                             = 1,
	CharacterCustomizer                      = 2,
	SpecialCharacter                         = 3,
	COUNT                                    = 4,
	EBattlePassLandingPageSpecialEntryType_MAX = 5,
};

// Enum BattlePassBase.BattlePassTileAvailabilityStates
// NumValues: 0x0005
enum class EBattlePassTileAvailabilityStates : uint8
{
	Invalid                                  = 0,
	Available                                = 1,
	Owned                                    = 2,
	Locked                                   = 3,
	BattlePassTileAvailabilityStates_MAX     = 4,
};

// ScriptStruct BattlePassBase.BattlePassLandingPageButtonTexts
// 0x0048 (0x0048 - 0x0000)
struct FBattlePassLandingPageButtonTexts final
{
public:
	class FText                                   TileText;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   LandingPageTitleText;                              // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   LandingPageDescriptionText;                        // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattlePassLandingPageButtonTexts) == 0x000008, "Wrong alignment on FBattlePassLandingPageButtonTexts");
static_assert(sizeof(FBattlePassLandingPageButtonTexts) == 0x000048, "Wrong size on FBattlePassLandingPageButtonTexts");
static_assert(offsetof(FBattlePassLandingPageButtonTexts, TileText) == 0x000000, "Member 'FBattlePassLandingPageButtonTexts::TileText' has a wrong offset!");
static_assert(offsetof(FBattlePassLandingPageButtonTexts, LandingPageTitleText) == 0x000018, "Member 'FBattlePassLandingPageButtonTexts::LandingPageTitleText' has a wrong offset!");
static_assert(offsetof(FBattlePassLandingPageButtonTexts, LandingPageDescriptionText) == 0x000030, "Member 'FBattlePassLandingPageButtonTexts::LandingPageDescriptionText' has a wrong offset!");

// ScriptStruct BattlePassBase.BattlePassLandingPageButtonDisplayDetails
// 0x0070 (0x0070 - 0x0000)
struct FBattlePassLandingPageButtonDisplayDetails final
{
public:
	struct FBattlePassLandingPageButtonTexts      ButtonTexts;                                       // 0x0000(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bIsBPLocked;                                       // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   MissingCosmeticNameText;                           // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FTimespan                              DelayTimespan;                                     // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattlePassLandingPageButtonDisplayDetails) == 0x000008, "Wrong alignment on FBattlePassLandingPageButtonDisplayDetails");
static_assert(sizeof(FBattlePassLandingPageButtonDisplayDetails) == 0x000070, "Wrong size on FBattlePassLandingPageButtonDisplayDetails");
static_assert(offsetof(FBattlePassLandingPageButtonDisplayDetails, ButtonTexts) == 0x000000, "Member 'FBattlePassLandingPageButtonDisplayDetails::ButtonTexts' has a wrong offset!");
static_assert(offsetof(FBattlePassLandingPageButtonDisplayDetails, bIsBPLocked) == 0x000048, "Member 'FBattlePassLandingPageButtonDisplayDetails::bIsBPLocked' has a wrong offset!");
static_assert(offsetof(FBattlePassLandingPageButtonDisplayDetails, MissingCosmeticNameText) == 0x000050, "Member 'FBattlePassLandingPageButtonDisplayDetails::MissingCosmeticNameText' has a wrong offset!");
static_assert(offsetof(FBattlePassLandingPageButtonDisplayDetails, DelayTimespan) == 0x000068, "Member 'FBattlePassLandingPageButtonDisplayDetails::DelayTimespan' has a wrong offset!");

// ScriptStruct BattlePassBase.BattlePassLandingPageEntryPreviewInfo
// 0x0038 (0x0038 - 0x0000)
struct FBattlePassLandingPageEntryPreviewInfo final
{
public:
	EBattlePassLandingPageSpecialEntryType        SpecialEntryType;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EFortItemType>                         SubscriptionItemTypesToDisplay;                    // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SpecialCharacterVariantChannelToModify;            // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SpecialCharacterActiveVariantTag;                  // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UFortItemDefinition>> PreviewItems;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBattlePassLandingPageEntryPreviewInfo) == 0x000008, "Wrong alignment on FBattlePassLandingPageEntryPreviewInfo");
static_assert(sizeof(FBattlePassLandingPageEntryPreviewInfo) == 0x000038, "Wrong size on FBattlePassLandingPageEntryPreviewInfo");
static_assert(offsetof(FBattlePassLandingPageEntryPreviewInfo, SpecialEntryType) == 0x000000, "Member 'FBattlePassLandingPageEntryPreviewInfo::SpecialEntryType' has a wrong offset!");
static_assert(offsetof(FBattlePassLandingPageEntryPreviewInfo, SubscriptionItemTypesToDisplay) == 0x000008, "Member 'FBattlePassLandingPageEntryPreviewInfo::SubscriptionItemTypesToDisplay' has a wrong offset!");
static_assert(offsetof(FBattlePassLandingPageEntryPreviewInfo, SpecialCharacterVariantChannelToModify) == 0x000018, "Member 'FBattlePassLandingPageEntryPreviewInfo::SpecialCharacterVariantChannelToModify' has a wrong offset!");
static_assert(offsetof(FBattlePassLandingPageEntryPreviewInfo, SpecialCharacterActiveVariantTag) == 0x00001C, "Member 'FBattlePassLandingPageEntryPreviewInfo::SpecialCharacterActiveVariantTag' has a wrong offset!");
static_assert(offsetof(FBattlePassLandingPageEntryPreviewInfo, PreviewItems) == 0x000020, "Member 'FBattlePassLandingPageEntryPreviewInfo::PreviewItems' has a wrong offset!");
static_assert(offsetof(FBattlePassLandingPageEntryPreviewInfo, TransitionTime) == 0x000030, "Member 'FBattlePassLandingPageEntryPreviewInfo::TransitionTime' has a wrong offset!");

// ScriptStruct BattlePassBase.BattlePassEntrySelectedParams
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FBattlePassEntrySelectedParams final
{
public:
	uint8                                         Pad_0[0x58];                                       // 0x0000(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBattlePassEntrySelectedParams) == 0x000008, "Wrong alignment on FBattlePassEntrySelectedParams");
static_assert(sizeof(FBattlePassEntrySelectedParams) == 0x000058, "Wrong size on FBattlePassEntrySelectedParams");

// ScriptStruct BattlePassBase.SeasonalResourceList
// 0x0010 (0x0010 - 0x0000)
struct FSeasonalResourceList final
{
public:
	TArray<class UFortPersistentResourceItemDefinition*> SeasonalResources;                                 // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSeasonalResourceList) == 0x000008, "Wrong alignment on FSeasonalResourceList");
static_assert(sizeof(FSeasonalResourceList) == 0x000010, "Wrong size on FSeasonalResourceList");
static_assert(offsetof(FSeasonalResourceList, SeasonalResources) == 0x000000, "Member 'FSeasonalResourceList::SeasonalResources' has a wrong offset!");

}

