#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MotherGameplayRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// ScriptStruct MotherGameplayRuntime.GoopAudioMapRangeClamped
// 0x0020 (0x0020 - 0x0000)
struct FGoopAudioMapRangeClamped final
{
public:
	struct FVector2D                              InRange;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutRange;                                          // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGoopAudioMapRangeClamped) == 0x000008, "Wrong alignment on FGoopAudioMapRangeClamped");
static_assert(sizeof(FGoopAudioMapRangeClamped) == 0x000020, "Wrong size on FGoopAudioMapRangeClamped");
static_assert(offsetof(FGoopAudioMapRangeClamped, InRange) == 0x000000, "Member 'FGoopAudioMapRangeClamped::InRange' has a wrong offset!");
static_assert(offsetof(FGoopAudioMapRangeClamped, OutRange) == 0x000010, "Member 'FGoopAudioMapRangeClamped::OutRange' has a wrong offset!");

// ScriptStruct MotherGameplayRuntime.PaddleGingerPropData
// 0x0030 (0x0030 - 0x0000)
struct FPaddleGingerPropData final
{
public:
	class FText                                   CategoryLabelText;                                 // 0x0000(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         PropIndex;                                         // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPropCount;                                      // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CategoryIndex;                                     // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCategoryCount;                                  // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           Sender;                                            // 0x0028(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaddleGingerPropData) == 0x000008, "Wrong alignment on FPaddleGingerPropData");
static_assert(sizeof(FPaddleGingerPropData) == 0x000030, "Wrong size on FPaddleGingerPropData");
static_assert(offsetof(FPaddleGingerPropData, CategoryLabelText) == 0x000000, "Member 'FPaddleGingerPropData::CategoryLabelText' has a wrong offset!");
static_assert(offsetof(FPaddleGingerPropData, PropIndex) == 0x000018, "Member 'FPaddleGingerPropData::PropIndex' has a wrong offset!");
static_assert(offsetof(FPaddleGingerPropData, MaxPropCount) == 0x00001C, "Member 'FPaddleGingerPropData::MaxPropCount' has a wrong offset!");
static_assert(offsetof(FPaddleGingerPropData, CategoryIndex) == 0x000020, "Member 'FPaddleGingerPropData::CategoryIndex' has a wrong offset!");
static_assert(offsetof(FPaddleGingerPropData, MaxCategoryCount) == 0x000024, "Member 'FPaddleGingerPropData::MaxCategoryCount' has a wrong offset!");
static_assert(offsetof(FPaddleGingerPropData, Sender) == 0x000028, "Member 'FPaddleGingerPropData::Sender' has a wrong offset!");

// ScriptStruct MotherGameplayRuntime.PaddleGingerPropActivatedData
// 0x0010 (0x0010 - 0x0000)
struct FPaddleGingerPropActivatedData final
{
public:
	bool                                          bActivated;                                        // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           Sender;                                            // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaddleGingerPropActivatedData) == 0x000008, "Wrong alignment on FPaddleGingerPropActivatedData");
static_assert(sizeof(FPaddleGingerPropActivatedData) == 0x000010, "Wrong size on FPaddleGingerPropActivatedData");
static_assert(offsetof(FPaddleGingerPropActivatedData, bActivated) == 0x000000, "Member 'FPaddleGingerPropActivatedData::bActivated' has a wrong offset!");
static_assert(offsetof(FPaddleGingerPropActivatedData, Sender) == 0x000008, "Member 'FPaddleGingerPropActivatedData::Sender' has a wrong offset!");

}

