#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ParallelRuntime

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "GameplayTags_0_structs.hpp"
#include "ParallelRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// Class ParallelRuntime.FortCameraModifier_WestSausage
// 0x0240 (0x0288 - 0x0048)
class UFortCameraModifier_WestSausage final : public UCameraModifier
{
public:
	float                                         MaxVelocityDeltaPerSecond;                         // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            BlendInCurve;                                      // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            BlendOutCurve;                                     // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSpeedScaledAxisOffsetData             ForwardOffsetData;                                 // 0x0060(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVector2D                              TotalForwardOffsetBounds;                          // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSpeedScaledAxisOffsetData             RightOffsetData;                                   // 0x00D0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVector2D                              RightForwardOffsetMultiplierBounds;                // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSpeedScaledAxisOffsetData             UpOffsetData;                                      // 0x0140(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVector2D                              UpPositiveForwardOffsetMultiplierBounds;           // 0x01A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              UpNegativeForwardOffsetMultiplierBounds;           // 0x01B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FOVInterpSpeed;                                    // 0x01C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C4[0x4];                                      // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              FOVBounds;                                         // 0x01C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            BoostCurve;                                        // 0x01D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         BoostModifier;                                     // 0x01E0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         AttachBoostDuration;                               // 0x0208(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttachBoostMagnitude;                              // 0x020C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DetachBoostDuration;                               // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DetachBoostMagnitude;                              // 0x0214(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SlidingHeightCurve;                                // 0x0218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SlidingGameplayTag;                                // 0x0220(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlideHeightTransitionDuration;                     // 0x0224(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSlidingSpeedMultiplierOffset;                   // 0x0228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C[0x4];                                      // 0x022C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawnAthena*                  CachedPlayer;                                      // 0x0230(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AFortWeaponRangedDualSwing*             CachedWeapon;                                      // 0x0238(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_240[0x48];                                     // 0x0240(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RemoveSelfFromCameraManager();

	void CalculateDynamicMultipliers(float* OutFOVBoundsMultiplier, float* OutBoostOffsetMultiplier) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCameraModifier_WestSausage">();
	}
	static class UFortCameraModifier_WestSausage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCameraModifier_WestSausage>();
	}
};
static_assert(alignof(UFortCameraModifier_WestSausage) == 0x000008, "Wrong alignment on UFortCameraModifier_WestSausage");
static_assert(sizeof(UFortCameraModifier_WestSausage) == 0x000288, "Wrong size on UFortCameraModifier_WestSausage");
static_assert(offsetof(UFortCameraModifier_WestSausage, MaxVelocityDeltaPerSecond) == 0x000048, "Member 'UFortCameraModifier_WestSausage::MaxVelocityDeltaPerSecond' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_WestSausage, BlendInCurve) == 0x000050, "Member 'UFortCameraModifier_WestSausage::BlendInCurve' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_WestSausage, BlendOutCurve) == 0x000058, "Member 'UFortCameraModifier_WestSausage::BlendOutCurve' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_WestSausage, ForwardOffsetData) == 0x000060, "Member 'UFortCameraModifier_WestSausage::ForwardOffsetData' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_WestSausage, TotalForwardOffsetBounds) == 0x0000C0, "Member 'UFortCameraModifier_WestSausage::TotalForwardOffsetBounds' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_WestSausage, RightOffsetData) == 0x0000D0, "Member 'UFortCameraModifier_WestSausage::RightOffsetData' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_WestSausage, RightForwardOffsetMultiplierBounds) == 0x000130, "Member 'UFortCameraModifier_WestSausage::RightForwardOffsetMultiplierBounds' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_WestSausage, UpOffsetData) == 0x000140, "Member 'UFortCameraModifier_WestSausage::UpOffsetData' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_WestSausage, UpPositiveForwardOffsetMultiplierBounds) == 0x0001A0, "Member 'UFortCameraModifier_WestSausage::UpPositiveForwardOffsetMultiplierBounds' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_WestSausage, UpNegativeForwardOffsetMultiplierBounds) == 0x0001B0, "Member 'UFortCameraModifier_WestSausage::UpNegativeForwardOffsetMultiplierBounds' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_WestSausage, FOVInterpSpeed) == 0x0001C0, "Member 'UFortCameraModifier_WestSausage::FOVInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_WestSausage, FOVBounds) == 0x0001C8, "Member 'UFortCameraModifier_WestSausage::FOVBounds' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_WestSausage, BoostCurve) == 0x0001D8, "Member 'UFortCameraModifier_WestSausage::BoostCurve' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_WestSausage, BoostModifier) == 0x0001E0, "Member 'UFortCameraModifier_WestSausage::BoostModifier' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_WestSausage, AttachBoostDuration) == 0x000208, "Member 'UFortCameraModifier_WestSausage::AttachBoostDuration' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_WestSausage, AttachBoostMagnitude) == 0x00020C, "Member 'UFortCameraModifier_WestSausage::AttachBoostMagnitude' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_WestSausage, DetachBoostDuration) == 0x000210, "Member 'UFortCameraModifier_WestSausage::DetachBoostDuration' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_WestSausage, DetachBoostMagnitude) == 0x000214, "Member 'UFortCameraModifier_WestSausage::DetachBoostMagnitude' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_WestSausage, SlidingHeightCurve) == 0x000218, "Member 'UFortCameraModifier_WestSausage::SlidingHeightCurve' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_WestSausage, SlidingGameplayTag) == 0x000220, "Member 'UFortCameraModifier_WestSausage::SlidingGameplayTag' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_WestSausage, SlideHeightTransitionDuration) == 0x000224, "Member 'UFortCameraModifier_WestSausage::SlideHeightTransitionDuration' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_WestSausage, MaxSlidingSpeedMultiplierOffset) == 0x000228, "Member 'UFortCameraModifier_WestSausage::MaxSlidingSpeedMultiplierOffset' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_WestSausage, CachedPlayer) == 0x000230, "Member 'UFortCameraModifier_WestSausage::CachedPlayer' has a wrong offset!");
static_assert(offsetof(UFortCameraModifier_WestSausage, CachedWeapon) == 0x000238, "Member 'UFortCameraModifier_WestSausage::CachedWeapon' has a wrong offset!");

// Class ParallelRuntime.FortSwingingLayerAnimInstance
// 0x01A0 (0x0590 - 0x03F0)
class UFortSwingingLayerAnimInstance final : public UFortBaseLayerAnimInstance
{
public:
	class UAnimInstance*                          MainAnimBP;                                        // 0x03E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerPawnAthena*                  Player;                                            // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsGroundSwing;                                     // 0x03F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFemale;                                          // 0x03F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3FA[0x2];                                      // 0x03FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayerDistanceToGround;                            // 0x03FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CalculateRotation;                                 // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_401[0x7];                                      // 0x0401(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         ForwardInfluenceOnRotation;                        // 0x0408(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FScalableFloat                         TimeForMaxRotationSpeed;                           // 0x0430(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MaxRotationSpeed;                                  // 0x0458(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FScalableFloat                         RotationSpeedWhileNotAttached;                     // 0x0480(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FScalableFloat                         RotationSpeedWhileNotRotated;                      // 0x04A8(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class AActor*                                 GetAttachedActor;                                  // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isFreeFalling;                                     // 0x04D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAttached;                                        // 0x04D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNotAttachedToCliff;                              // 0x04DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4DB[0x5];                                      // 0x04DB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Velocity;                                          // 0x04E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                XYVelocity;                                        // 0x04F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VecFromPlayerToAttachPoint;                        // 0x0510(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchAngleFromAttachPoint;                         // 0x0528(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollAngle;                                         // 0x052C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawAngleToAttachTarget;                            // 0x0530(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CurveName_SwingPhase;                              // 0x0534(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CurveName_BlendOut;                                // 0x0538(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwingPhase;                                        // 0x053C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CurrentRootRotation;                               // 0x0540(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                CurrentRootTranslation;                            // 0x0558(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSwingRelease1;                                   // 0x0570(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSwingRelease2;                                   // 0x0571(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSwingRelease3;                                   // 0x0572(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSwingRelease4;                                   // 0x0573(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSwingRelease5;                                   // 0x0574(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSwingReleaseSkid;                                // 0x0575(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMovingAttachPoint;                               // 0x0576(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBlendOut;                                        // 0x0577(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WebCastAttachDirection;                            // 0x0578(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsWebCastDown;                                     // 0x057C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSwingOneHand;                                    // 0x057D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRandomHandBool;                                  // 0x057E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRandomSwingReleaseBool;                          // 0x057F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRandomeReleaseBool;                              // 0x0580(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsWithin100UnitsOfGround;                          // 0x0581(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHanging;                                         // 0x0582(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFallRelease;                                     // 0x0583(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOnGroundWebCast;                                 // 0x0584(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSwingNearGroundToSkid;                           // 0x0585(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHangToSwingInAir;                                // 0x0586(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHangToSwingNearGround;                           // 0x0587(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_588[0x8];                                      // 0x0588(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FVector GetAttachVectorInPlayerSpace(const struct FVector& InPlayerToAttachPoint);
	void GetPlayerAnglesFromAttachPoint(float* Pitch, float* Roll, float* Yaw);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSwingingLayerAnimInstance">();
	}
	static class UFortSwingingLayerAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSwingingLayerAnimInstance>();
	}
};
static_assert(alignof(UFortSwingingLayerAnimInstance) == 0x000010, "Wrong alignment on UFortSwingingLayerAnimInstance");
static_assert(sizeof(UFortSwingingLayerAnimInstance) == 0x000590, "Wrong size on UFortSwingingLayerAnimInstance");
static_assert(offsetof(UFortSwingingLayerAnimInstance, MainAnimBP) == 0x0003E8, "Member 'UFortSwingingLayerAnimInstance::MainAnimBP' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, Player) == 0x0003F0, "Member 'UFortSwingingLayerAnimInstance::Player' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsGroundSwing) == 0x0003F8, "Member 'UFortSwingingLayerAnimInstance::IsGroundSwing' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsFemale) == 0x0003F9, "Member 'UFortSwingingLayerAnimInstance::IsFemale' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, PlayerDistanceToGround) == 0x0003FC, "Member 'UFortSwingingLayerAnimInstance::PlayerDistanceToGround' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, CalculateRotation) == 0x000400, "Member 'UFortSwingingLayerAnimInstance::CalculateRotation' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, ForwardInfluenceOnRotation) == 0x000408, "Member 'UFortSwingingLayerAnimInstance::ForwardInfluenceOnRotation' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, TimeForMaxRotationSpeed) == 0x000430, "Member 'UFortSwingingLayerAnimInstance::TimeForMaxRotationSpeed' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, MaxRotationSpeed) == 0x000458, "Member 'UFortSwingingLayerAnimInstance::MaxRotationSpeed' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, RotationSpeedWhileNotAttached) == 0x000480, "Member 'UFortSwingingLayerAnimInstance::RotationSpeedWhileNotAttached' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, RotationSpeedWhileNotRotated) == 0x0004A8, "Member 'UFortSwingingLayerAnimInstance::RotationSpeedWhileNotRotated' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, GetAttachedActor) == 0x0004D0, "Member 'UFortSwingingLayerAnimInstance::GetAttachedActor' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, isFreeFalling) == 0x0004D8, "Member 'UFortSwingingLayerAnimInstance::isFreeFalling' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsAttached) == 0x0004D9, "Member 'UFortSwingingLayerAnimInstance::IsAttached' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsNotAttachedToCliff) == 0x0004DA, "Member 'UFortSwingingLayerAnimInstance::IsNotAttachedToCliff' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, Velocity) == 0x0004E0, "Member 'UFortSwingingLayerAnimInstance::Velocity' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, XYVelocity) == 0x0004F8, "Member 'UFortSwingingLayerAnimInstance::XYVelocity' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, VecFromPlayerToAttachPoint) == 0x000510, "Member 'UFortSwingingLayerAnimInstance::VecFromPlayerToAttachPoint' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, PitchAngleFromAttachPoint) == 0x000528, "Member 'UFortSwingingLayerAnimInstance::PitchAngleFromAttachPoint' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, RollAngle) == 0x00052C, "Member 'UFortSwingingLayerAnimInstance::RollAngle' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, YawAngleToAttachTarget) == 0x000530, "Member 'UFortSwingingLayerAnimInstance::YawAngleToAttachTarget' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, CurveName_SwingPhase) == 0x000534, "Member 'UFortSwingingLayerAnimInstance::CurveName_SwingPhase' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, CurveName_BlendOut) == 0x000538, "Member 'UFortSwingingLayerAnimInstance::CurveName_BlendOut' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, SwingPhase) == 0x00053C, "Member 'UFortSwingingLayerAnimInstance::SwingPhase' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, CurrentRootRotation) == 0x000540, "Member 'UFortSwingingLayerAnimInstance::CurrentRootRotation' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, CurrentRootTranslation) == 0x000558, "Member 'UFortSwingingLayerAnimInstance::CurrentRootTranslation' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsSwingRelease1) == 0x000570, "Member 'UFortSwingingLayerAnimInstance::IsSwingRelease1' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsSwingRelease2) == 0x000571, "Member 'UFortSwingingLayerAnimInstance::IsSwingRelease2' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsSwingRelease3) == 0x000572, "Member 'UFortSwingingLayerAnimInstance::IsSwingRelease3' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsSwingRelease4) == 0x000573, "Member 'UFortSwingingLayerAnimInstance::IsSwingRelease4' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsSwingRelease5) == 0x000574, "Member 'UFortSwingingLayerAnimInstance::IsSwingRelease5' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsSwingReleaseSkid) == 0x000575, "Member 'UFortSwingingLayerAnimInstance::IsSwingReleaseSkid' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsMovingAttachPoint) == 0x000576, "Member 'UFortSwingingLayerAnimInstance::IsMovingAttachPoint' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsBlendOut) == 0x000577, "Member 'UFortSwingingLayerAnimInstance::IsBlendOut' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, WebCastAttachDirection) == 0x000578, "Member 'UFortSwingingLayerAnimInstance::WebCastAttachDirection' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsWebCastDown) == 0x00057C, "Member 'UFortSwingingLayerAnimInstance::IsWebCastDown' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsSwingOneHand) == 0x00057D, "Member 'UFortSwingingLayerAnimInstance::IsSwingOneHand' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsRandomHandBool) == 0x00057E, "Member 'UFortSwingingLayerAnimInstance::IsRandomHandBool' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsRandomSwingReleaseBool) == 0x00057F, "Member 'UFortSwingingLayerAnimInstance::IsRandomSwingReleaseBool' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsRandomeReleaseBool) == 0x000580, "Member 'UFortSwingingLayerAnimInstance::IsRandomeReleaseBool' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsWithin100UnitsOfGround) == 0x000581, "Member 'UFortSwingingLayerAnimInstance::IsWithin100UnitsOfGround' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsHanging) == 0x000582, "Member 'UFortSwingingLayerAnimInstance::IsHanging' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsFallRelease) == 0x000583, "Member 'UFortSwingingLayerAnimInstance::IsFallRelease' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsOnGroundWebCast) == 0x000584, "Member 'UFortSwingingLayerAnimInstance::IsOnGroundWebCast' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsSwingNearGroundToSkid) == 0x000585, "Member 'UFortSwingingLayerAnimInstance::IsSwingNearGroundToSkid' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsHangToSwingInAir) == 0x000586, "Member 'UFortSwingingLayerAnimInstance::IsHangToSwingInAir' has a wrong offset!");
static_assert(offsetof(UFortSwingingLayerAnimInstance, IsHangToSwingNearGround) == 0x000587, "Member 'UFortSwingingLayerAnimInstance::IsHangToSwingNearGround' has a wrong offset!");

}

