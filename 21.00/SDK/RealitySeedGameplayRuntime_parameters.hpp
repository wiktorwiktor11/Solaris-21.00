#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RealitySeedGameplayRuntime

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_0_structs.hpp"
#include "RealitySeedGameplayRuntime_structs.hpp"


namespace SDK::Params
{

// Function RealitySeedGameplayRuntime.BuildingRealitySapling.OverrideMarkerDisplayInfo
// 0x0098 (0x0098 - 0x0000)
struct BuildingRealitySapling_OverrideMarkerDisplayInfo final
{
public:
	struct FMarkedActorDisplayInfo                NewDisplayInfo;                                    // 0x0000(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingRealitySapling_OverrideMarkerDisplayInfo) == 0x000008, "Wrong alignment on BuildingRealitySapling_OverrideMarkerDisplayInfo");
static_assert(sizeof(BuildingRealitySapling_OverrideMarkerDisplayInfo) == 0x000098, "Wrong size on BuildingRealitySapling_OverrideMarkerDisplayInfo");
static_assert(offsetof(BuildingRealitySapling_OverrideMarkerDisplayInfo, NewDisplayInfo) == 0x000000, "Member 'BuildingRealitySapling_OverrideMarkerDisplayInfo::NewDisplayInfo' has a wrong offset!");

// Function RealitySeedGameplayRuntime.BuildingRealitySapling.SetShouldEnterGhostStateOnDeath
// 0x0001 (0x0001 - 0x0000)
struct BuildingRealitySapling_SetShouldEnterGhostStateOnDeath final
{
public:
	bool                                          bShouldEnterGhostState;                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingRealitySapling_SetShouldEnterGhostStateOnDeath) == 0x000001, "Wrong alignment on BuildingRealitySapling_SetShouldEnterGhostStateOnDeath");
static_assert(sizeof(BuildingRealitySapling_SetShouldEnterGhostStateOnDeath) == 0x000001, "Wrong size on BuildingRealitySapling_SetShouldEnterGhostStateOnDeath");
static_assert(offsetof(BuildingRealitySapling_SetShouldEnterGhostStateOnDeath, bShouldEnterGhostState) == 0x000000, "Member 'BuildingRealitySapling_SetShouldEnterGhostStateOnDeath::bShouldEnterGhostState' has a wrong offset!");

// Function RealitySeedGameplayRuntime.BuildingRealitySapling.GetEventManagerCalendarTime
// 0x0008 (0x0008 - 0x0000)
struct BuildingRealitySapling_GetEventManagerCalendarTime final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingRealitySapling_GetEventManagerCalendarTime) == 0x000008, "Wrong alignment on BuildingRealitySapling_GetEventManagerCalendarTime");
static_assert(sizeof(BuildingRealitySapling_GetEventManagerCalendarTime) == 0x000008, "Wrong size on BuildingRealitySapling_GetEventManagerCalendarTime");
static_assert(offsetof(BuildingRealitySapling_GetEventManagerCalendarTime, ReturnValue) == 0x000000, "Member 'BuildingRealitySapling_GetEventManagerCalendarTime::ReturnValue' has a wrong offset!");

// Function RealitySeedGameplayRuntime.BuildingRealitySapling.WillEnterGhostStateOnDeath
// 0x0001 (0x0001 - 0x0000)
struct BuildingRealitySapling_WillEnterGhostStateOnDeath final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingRealitySapling_WillEnterGhostStateOnDeath) == 0x000001, "Wrong alignment on BuildingRealitySapling_WillEnterGhostStateOnDeath");
static_assert(sizeof(BuildingRealitySapling_WillEnterGhostStateOnDeath) == 0x000001, "Wrong size on BuildingRealitySapling_WillEnterGhostStateOnDeath");
static_assert(offsetof(BuildingRealitySapling_WillEnterGhostStateOnDeath, ReturnValue) == 0x000000, "Member 'BuildingRealitySapling_WillEnterGhostStateOnDeath::ReturnValue' has a wrong offset!");

// Function RealitySeedGameplayRuntime.FortCheatManager_RealitySeed.RealitySaplingLogSaplingData
// 0x0001 (0x0001 - 0x0000)
struct FortCheatManager_RealitySeed_RealitySaplingLogSaplingData final
{
public:
	bool                                          bOnlyForCallingPlayer;                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_RealitySeed_RealitySaplingLogSaplingData) == 0x000001, "Wrong alignment on FortCheatManager_RealitySeed_RealitySaplingLogSaplingData");
static_assert(sizeof(FortCheatManager_RealitySeed_RealitySaplingLogSaplingData) == 0x000001, "Wrong size on FortCheatManager_RealitySeed_RealitySaplingLogSaplingData");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingLogSaplingData, bOnlyForCallingPlayer) == 0x000000, "Member 'FortCheatManager_RealitySeed_RealitySaplingLogSaplingData::bOnlyForCallingPlayer' has a wrong offset!");

// Function RealitySeedGameplayRuntime.FortCheatManager_RealitySeed.RealitySaplingQueueToSpawnAtLocation
// 0x0018 (0x0018 - 0x0000)
struct FortCheatManager_RealitySeed_RealitySaplingQueueToSpawnAtLocation final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaturityLevelOverride;                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NurturingLevelOverride;                            // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetOwningController;                              // 0x0014(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCheatManager_RealitySeed_RealitySaplingQueueToSpawnAtLocation) == 0x000004, "Wrong alignment on FortCheatManager_RealitySeed_RealitySaplingQueueToSpawnAtLocation");
static_assert(sizeof(FortCheatManager_RealitySeed_RealitySaplingQueueToSpawnAtLocation) == 0x000018, "Wrong size on FortCheatManager_RealitySeed_RealitySaplingQueueToSpawnAtLocation");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingQueueToSpawnAtLocation, X) == 0x000000, "Member 'FortCheatManager_RealitySeed_RealitySaplingQueueToSpawnAtLocation::X' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingQueueToSpawnAtLocation, Y) == 0x000004, "Member 'FortCheatManager_RealitySeed_RealitySaplingQueueToSpawnAtLocation::Y' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingQueueToSpawnAtLocation, Z) == 0x000008, "Member 'FortCheatManager_RealitySeed_RealitySaplingQueueToSpawnAtLocation::Z' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingQueueToSpawnAtLocation, MaturityLevelOverride) == 0x00000C, "Member 'FortCheatManager_RealitySeed_RealitySaplingQueueToSpawnAtLocation::MaturityLevelOverride' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingQueueToSpawnAtLocation, NurturingLevelOverride) == 0x000010, "Member 'FortCheatManager_RealitySeed_RealitySaplingQueueToSpawnAtLocation::NurturingLevelOverride' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingQueueToSpawnAtLocation, bSetOwningController) == 0x000014, "Member 'FortCheatManager_RealitySeed_RealitySaplingQueueToSpawnAtLocation::bSetOwningController' has a wrong offset!");

// Function RealitySeedGameplayRuntime.FortCheatManager_RealitySeed.RealitySaplingQueueToSpawnAtPlayerLocation
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_RealitySeed_RealitySaplingQueueToSpawnAtPlayerLocation final
{
public:
	int32                                         MaturityLevelOverride;                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NurturingLevelOverride;                            // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetOwningController;                              // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCheatManager_RealitySeed_RealitySaplingQueueToSpawnAtPlayerLocation) == 0x000004, "Wrong alignment on FortCheatManager_RealitySeed_RealitySaplingQueueToSpawnAtPlayerLocation");
static_assert(sizeof(FortCheatManager_RealitySeed_RealitySaplingQueueToSpawnAtPlayerLocation) == 0x00000C, "Wrong size on FortCheatManager_RealitySeed_RealitySaplingQueueToSpawnAtPlayerLocation");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingQueueToSpawnAtPlayerLocation, MaturityLevelOverride) == 0x000000, "Member 'FortCheatManager_RealitySeed_RealitySaplingQueueToSpawnAtPlayerLocation::MaturityLevelOverride' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingQueueToSpawnAtPlayerLocation, NurturingLevelOverride) == 0x000004, "Member 'FortCheatManager_RealitySeed_RealitySaplingQueueToSpawnAtPlayerLocation::NurturingLevelOverride' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingQueueToSpawnAtPlayerLocation, bSetOwningController) == 0x000008, "Member 'FortCheatManager_RealitySeed_RealitySaplingQueueToSpawnAtPlayerLocation::bSetOwningController' has a wrong offset!");

// Function RealitySeedGameplayRuntime.FortCheatManager_RealitySeed.RealitySaplingSendToGhostState
// 0x0001 (0x0001 - 0x0000)
struct FortCheatManager_RealitySeed_RealitySaplingSendToGhostState final
{
public:
	bool                                          bOnlyForCallingPlayer;                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_RealitySeed_RealitySaplingSendToGhostState) == 0x000001, "Wrong alignment on FortCheatManager_RealitySeed_RealitySaplingSendToGhostState");
static_assert(sizeof(FortCheatManager_RealitySeed_RealitySaplingSendToGhostState) == 0x000001, "Wrong size on FortCheatManager_RealitySeed_RealitySaplingSendToGhostState");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingSendToGhostState, bOnlyForCallingPlayer) == 0x000000, "Member 'FortCheatManager_RealitySeed_RealitySaplingSendToGhostState::bOnlyForCallingPlayer' has a wrong offset!");

// Function RealitySeedGameplayRuntime.FortCheatManager_RealitySeed.RealitySaplingSpawnAtLocation
// 0x0024 (0x0024 - 0x0000)
struct FortCheatManager_RealitySeed_RealitySaplingSpawnAtLocation final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSaplings;                                       // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaturityLevelOverride;                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NurturingLevelOverride;                            // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GridHalfSizeOverride;                              // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GridSpaceBetweenOverride;                          // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetOwningController;                              // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCheatManager_RealitySeed_RealitySaplingSpawnAtLocation) == 0x000004, "Wrong alignment on FortCheatManager_RealitySeed_RealitySaplingSpawnAtLocation");
static_assert(sizeof(FortCheatManager_RealitySeed_RealitySaplingSpawnAtLocation) == 0x000024, "Wrong size on FortCheatManager_RealitySeed_RealitySaplingSpawnAtLocation");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingSpawnAtLocation, X) == 0x000000, "Member 'FortCheatManager_RealitySeed_RealitySaplingSpawnAtLocation::X' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingSpawnAtLocation, Y) == 0x000004, "Member 'FortCheatManager_RealitySeed_RealitySaplingSpawnAtLocation::Y' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingSpawnAtLocation, Z) == 0x000008, "Member 'FortCheatManager_RealitySeed_RealitySaplingSpawnAtLocation::Z' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingSpawnAtLocation, NumSaplings) == 0x00000C, "Member 'FortCheatManager_RealitySeed_RealitySaplingSpawnAtLocation::NumSaplings' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingSpawnAtLocation, MaturityLevelOverride) == 0x000010, "Member 'FortCheatManager_RealitySeed_RealitySaplingSpawnAtLocation::MaturityLevelOverride' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingSpawnAtLocation, NurturingLevelOverride) == 0x000014, "Member 'FortCheatManager_RealitySeed_RealitySaplingSpawnAtLocation::NurturingLevelOverride' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingSpawnAtLocation, GridHalfSizeOverride) == 0x000018, "Member 'FortCheatManager_RealitySeed_RealitySaplingSpawnAtLocation::GridHalfSizeOverride' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingSpawnAtLocation, GridSpaceBetweenOverride) == 0x00001C, "Member 'FortCheatManager_RealitySeed_RealitySaplingSpawnAtLocation::GridSpaceBetweenOverride' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingSpawnAtLocation, bSetOwningController) == 0x000020, "Member 'FortCheatManager_RealitySeed_RealitySaplingSpawnAtLocation::bSetOwningController' has a wrong offset!");

// Function RealitySeedGameplayRuntime.FortCheatManager_RealitySeed.RealitySaplingSpawnAtPlayerLocation
// 0x0018 (0x0018 - 0x0000)
struct FortCheatManager_RealitySeed_RealitySaplingSpawnAtPlayerLocation final
{
public:
	int32                                         NumSaplings;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaturityLevelOverride;                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NurturingLevelOverride;                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GridHalfSizeOverride;                              // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GridSpaceBetweenOverride;                          // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetOwningController;                              // 0x0014(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCheatManager_RealitySeed_RealitySaplingSpawnAtPlayerLocation) == 0x000004, "Wrong alignment on FortCheatManager_RealitySeed_RealitySaplingSpawnAtPlayerLocation");
static_assert(sizeof(FortCheatManager_RealitySeed_RealitySaplingSpawnAtPlayerLocation) == 0x000018, "Wrong size on FortCheatManager_RealitySeed_RealitySaplingSpawnAtPlayerLocation");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingSpawnAtPlayerLocation, NumSaplings) == 0x000000, "Member 'FortCheatManager_RealitySeed_RealitySaplingSpawnAtPlayerLocation::NumSaplings' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingSpawnAtPlayerLocation, MaturityLevelOverride) == 0x000004, "Member 'FortCheatManager_RealitySeed_RealitySaplingSpawnAtPlayerLocation::MaturityLevelOverride' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingSpawnAtPlayerLocation, NurturingLevelOverride) == 0x000008, "Member 'FortCheatManager_RealitySeed_RealitySaplingSpawnAtPlayerLocation::NurturingLevelOverride' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingSpawnAtPlayerLocation, GridHalfSizeOverride) == 0x00000C, "Member 'FortCheatManager_RealitySeed_RealitySaplingSpawnAtPlayerLocation::GridHalfSizeOverride' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingSpawnAtPlayerLocation, GridSpaceBetweenOverride) == 0x000010, "Member 'FortCheatManager_RealitySeed_RealitySaplingSpawnAtPlayerLocation::GridSpaceBetweenOverride' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingSpawnAtPlayerLocation, bSetOwningController) == 0x000014, "Member 'FortCheatManager_RealitySeed_RealitySaplingSpawnAtPlayerLocation::bSetOwningController' has a wrong offset!");

// Function RealitySeedGameplayRuntime.FortCheatManager_RealitySeed.RealitySaplingSpawnInRadiusAtLocation
// 0x0028 (0x0028 - 0x0000)
struct FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtLocation final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSaplings;                                       // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaturityLevelOverride;                             // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NurturingLevelOverride;                            // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GridHalfSizeOverride;                              // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GridSpaceBetweenOverride;                          // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetOwningController;                              // 0x0024(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtLocation) == 0x000004, "Wrong alignment on FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtLocation");
static_assert(sizeof(FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtLocation) == 0x000028, "Wrong size on FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtLocation");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtLocation, X) == 0x000000, "Member 'FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtLocation::X' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtLocation, Y) == 0x000004, "Member 'FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtLocation::Y' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtLocation, Z) == 0x000008, "Member 'FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtLocation::Z' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtLocation, Radius) == 0x00000C, "Member 'FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtLocation::Radius' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtLocation, NumSaplings) == 0x000010, "Member 'FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtLocation::NumSaplings' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtLocation, MaturityLevelOverride) == 0x000014, "Member 'FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtLocation::MaturityLevelOverride' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtLocation, NurturingLevelOverride) == 0x000018, "Member 'FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtLocation::NurturingLevelOverride' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtLocation, GridHalfSizeOverride) == 0x00001C, "Member 'FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtLocation::GridHalfSizeOverride' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtLocation, GridSpaceBetweenOverride) == 0x000020, "Member 'FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtLocation::GridSpaceBetweenOverride' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtLocation, bSetOwningController) == 0x000024, "Member 'FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtLocation::bSetOwningController' has a wrong offset!");

// Function RealitySeedGameplayRuntime.FortCheatManager_RealitySeed.RealitySaplingSpawnInRadiusAtPlayerLocation
// 0x001C (0x001C - 0x0000)
struct FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtPlayerLocation final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSaplings;                                       // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaturityLevelOverride;                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NurturingLevelOverride;                            // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GridHalfSizeOverride;                              // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GridSpaceBetweenOverride;                          // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetOwningController;                              // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtPlayerLocation) == 0x000004, "Wrong alignment on FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtPlayerLocation");
static_assert(sizeof(FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtPlayerLocation) == 0x00001C, "Wrong size on FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtPlayerLocation");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtPlayerLocation, Radius) == 0x000000, "Member 'FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtPlayerLocation::Radius' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtPlayerLocation, NumSaplings) == 0x000004, "Member 'FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtPlayerLocation::NumSaplings' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtPlayerLocation, MaturityLevelOverride) == 0x000008, "Member 'FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtPlayerLocation::MaturityLevelOverride' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtPlayerLocation, NurturingLevelOverride) == 0x00000C, "Member 'FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtPlayerLocation::NurturingLevelOverride' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtPlayerLocation, GridHalfSizeOverride) == 0x000010, "Member 'FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtPlayerLocation::GridHalfSizeOverride' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtPlayerLocation, GridSpaceBetweenOverride) == 0x000014, "Member 'FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtPlayerLocation::GridSpaceBetweenOverride' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtPlayerLocation, bSetOwningController) == 0x000018, "Member 'FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtPlayerLocation::bSetOwningController' has a wrong offset!");

// Function RealitySeedGameplayRuntime.FortCheatManager_RealitySeed.RealitySaplingSpawnOwnedAtPlayerLocation
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_RealitySeed_RealitySaplingSpawnOwnedAtPlayerLocation final
{
public:
	int32                                         MaturityLevelOverride;                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NurturingLevelOverride;                            // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_RealitySeed_RealitySaplingSpawnOwnedAtPlayerLocation) == 0x000004, "Wrong alignment on FortCheatManager_RealitySeed_RealitySaplingSpawnOwnedAtPlayerLocation");
static_assert(sizeof(FortCheatManager_RealitySeed_RealitySaplingSpawnOwnedAtPlayerLocation) == 0x000008, "Wrong size on FortCheatManager_RealitySeed_RealitySaplingSpawnOwnedAtPlayerLocation");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingSpawnOwnedAtPlayerLocation, MaturityLevelOverride) == 0x000000, "Member 'FortCheatManager_RealitySeed_RealitySaplingSpawnOwnedAtPlayerLocation::MaturityLevelOverride' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingSpawnOwnedAtPlayerLocation, NurturingLevelOverride) == 0x000004, "Member 'FortCheatManager_RealitySeed_RealitySaplingSpawnOwnedAtPlayerLocation::NurturingLevelOverride' has a wrong offset!");

// Function RealitySeedGameplayRuntime.FortCheatManager_RealitySeed.RealitySaplingSpawnWeeds
// 0x0001 (0x0001 - 0x0000)
struct FortCheatManager_RealitySeed_RealitySaplingSpawnWeeds final
{
public:
	bool                                          bOnlyForCallingPlayer;                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_RealitySeed_RealitySaplingSpawnWeeds) == 0x000001, "Wrong alignment on FortCheatManager_RealitySeed_RealitySaplingSpawnWeeds");
static_assert(sizeof(FortCheatManager_RealitySeed_RealitySaplingSpawnWeeds) == 0x000001, "Wrong size on FortCheatManager_RealitySeed_RealitySaplingSpawnWeeds");
static_assert(offsetof(FortCheatManager_RealitySeed_RealitySaplingSpawnWeeds, bOnlyForCallingPlayer) == 0x000000, "Member 'FortCheatManager_RealitySeed_RealitySaplingSpawnWeeds::bOnlyForCallingPlayer' has a wrong offset!");

// Function RealitySeedGameplayRuntime.FortControllerComponent_RealitySapling.GetMaxSaplingsPerPlayer
// 0x0004 (0x0004 - 0x0000)
struct FortControllerComponent_RealitySapling_GetMaxSaplingsPerPlayer final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_RealitySapling_GetMaxSaplingsPerPlayer) == 0x000004, "Wrong alignment on FortControllerComponent_RealitySapling_GetMaxSaplingsPerPlayer");
static_assert(sizeof(FortControllerComponent_RealitySapling_GetMaxSaplingsPerPlayer) == 0x000004, "Wrong size on FortControllerComponent_RealitySapling_GetMaxSaplingsPerPlayer");
static_assert(offsetof(FortControllerComponent_RealitySapling_GetMaxSaplingsPerPlayer, ReturnValue) == 0x000000, "Member 'FortControllerComponent_RealitySapling_GetMaxSaplingsPerPlayer::ReturnValue' has a wrong offset!");

// Function RealitySeedGameplayRuntime.FortControllerComponent_RealitySapling.ClientRegisterPlantedSapling
// 0x0001 (0x0001 - 0x0000)
struct FortControllerComponent_RealitySapling_ClientRegisterPlantedSapling final
{
public:
	bool                                          bIsNewSapling;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_RealitySapling_ClientRegisterPlantedSapling) == 0x000001, "Wrong alignment on FortControllerComponent_RealitySapling_ClientRegisterPlantedSapling");
static_assert(sizeof(FortControllerComponent_RealitySapling_ClientRegisterPlantedSapling) == 0x000001, "Wrong size on FortControllerComponent_RealitySapling_ClientRegisterPlantedSapling");
static_assert(offsetof(FortControllerComponent_RealitySapling_ClientRegisterPlantedSapling, bIsNewSapling) == 0x000000, "Member 'FortControllerComponent_RealitySapling_ClientRegisterPlantedSapling::bIsNewSapling' has a wrong offset!");

// Function RealitySeedGameplayRuntime.FortControllerComponent_RealitySapling.HandleSaplingDestroyedDirectly
// 0x0008 (0x0008 - 0x0000)
struct FortControllerComponent_RealitySapling_HandleSaplingDestroyedDirectly final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_RealitySapling_HandleSaplingDestroyedDirectly) == 0x000008, "Wrong alignment on FortControllerComponent_RealitySapling_HandleSaplingDestroyedDirectly");
static_assert(sizeof(FortControllerComponent_RealitySapling_HandleSaplingDestroyedDirectly) == 0x000008, "Wrong size on FortControllerComponent_RealitySapling_HandleSaplingDestroyedDirectly");
static_assert(offsetof(FortControllerComponent_RealitySapling_HandleSaplingDestroyedDirectly, DestroyedActor) == 0x000000, "Member 'FortControllerComponent_RealitySapling_HandleSaplingDestroyedDirectly::DestroyedActor' has a wrong offset!");

// Function RealitySeedGameplayRuntime.FortControllerComponent_RealitySapling.RegisterPlantedSapling
// 0x0010 (0x0010 - 0x0000)
struct FortControllerComponent_RealitySapling_RegisterPlantedSapling final
{
public:
	class ABuildingRealitySapling*                RealitySapling;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNewSapling;                                     // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortControllerComponent_RealitySapling_RegisterPlantedSapling) == 0x000008, "Wrong alignment on FortControllerComponent_RealitySapling_RegisterPlantedSapling");
static_assert(sizeof(FortControllerComponent_RealitySapling_RegisterPlantedSapling) == 0x000010, "Wrong size on FortControllerComponent_RealitySapling_RegisterPlantedSapling");
static_assert(offsetof(FortControllerComponent_RealitySapling_RegisterPlantedSapling, RealitySapling) == 0x000000, "Member 'FortControllerComponent_RealitySapling_RegisterPlantedSapling::RealitySapling' has a wrong offset!");
static_assert(offsetof(FortControllerComponent_RealitySapling_RegisterPlantedSapling, bIsNewSapling) == 0x000008, "Member 'FortControllerComponent_RealitySapling_RegisterPlantedSapling::bIsNewSapling' has a wrong offset!");

// Function RealitySeedGameplayRuntime.FortControllerComponent_RealitySapling.SetFirstOwnedSaplingData
// 0x0050 (0x0050 - 0x0000)
struct FortControllerComponent_RealitySapling_SetFirstOwnedSaplingData final
{
public:
	struct FOwnedRealitySaplingData               InSaplingData;                                     // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_RealitySapling_SetFirstOwnedSaplingData) == 0x000008, "Wrong alignment on FortControllerComponent_RealitySapling_SetFirstOwnedSaplingData");
static_assert(sizeof(FortControllerComponent_RealitySapling_SetFirstOwnedSaplingData) == 0x000050, "Wrong size on FortControllerComponent_RealitySapling_SetFirstOwnedSaplingData");
static_assert(offsetof(FortControllerComponent_RealitySapling_SetFirstOwnedSaplingData, InSaplingData) == 0x000000, "Member 'FortControllerComponent_RealitySapling_SetFirstOwnedSaplingData::InSaplingData' has a wrong offset!");

// Function RealitySeedGameplayRuntime.FortControllerComponent_RealitySapling.GetFirstOwnedSapling
// 0x0008 (0x0008 - 0x0000)
struct FortControllerComponent_RealitySapling_GetFirstOwnedSapling final
{
public:
	class ABuildingRealitySapling*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_RealitySapling_GetFirstOwnedSapling) == 0x000008, "Wrong alignment on FortControllerComponent_RealitySapling_GetFirstOwnedSapling");
static_assert(sizeof(FortControllerComponent_RealitySapling_GetFirstOwnedSapling) == 0x000008, "Wrong size on FortControllerComponent_RealitySapling_GetFirstOwnedSapling");
static_assert(offsetof(FortControllerComponent_RealitySapling_GetFirstOwnedSapling, ReturnValue) == 0x000000, "Member 'FortControllerComponent_RealitySapling_GetFirstOwnedSapling::ReturnValue' has a wrong offset!");

// Function RealitySeedGameplayRuntime.FortControllerComponent_RealitySapling.GetFirstOwnedSaplingData
// 0x0058 (0x0058 - 0x0000)
struct FortControllerComponent_RealitySapling_GetFirstOwnedSaplingData final
{
public:
	struct FOwnedRealitySaplingData               OutSaplingData;                                    // 0x0000(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortControllerComponent_RealitySapling_GetFirstOwnedSaplingData) == 0x000008, "Wrong alignment on FortControllerComponent_RealitySapling_GetFirstOwnedSaplingData");
static_assert(sizeof(FortControllerComponent_RealitySapling_GetFirstOwnedSaplingData) == 0x000058, "Wrong size on FortControllerComponent_RealitySapling_GetFirstOwnedSaplingData");
static_assert(offsetof(FortControllerComponent_RealitySapling_GetFirstOwnedSaplingData, OutSaplingData) == 0x000000, "Member 'FortControllerComponent_RealitySapling_GetFirstOwnedSaplingData::OutSaplingData' has a wrong offset!");
static_assert(offsetof(FortControllerComponent_RealitySapling_GetFirstOwnedSaplingData, ReturnValue) == 0x000050, "Member 'FortControllerComponent_RealitySapling_GetFirstOwnedSaplingData::ReturnValue' has a wrong offset!");

// Function RealitySeedGameplayRuntime.FortControllerComponent_RealitySapling.GetOwnedSaplings
// 0x0010 (0x0010 - 0x0000)
struct FortControllerComponent_RealitySapling_GetOwnedSaplings final
{
public:
	TArray<struct FOwnedRealitySaplingData>       ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_RealitySapling_GetOwnedSaplings) == 0x000008, "Wrong alignment on FortControllerComponent_RealitySapling_GetOwnedSaplings");
static_assert(sizeof(FortControllerComponent_RealitySapling_GetOwnedSaplings) == 0x000010, "Wrong size on FortControllerComponent_RealitySapling_GetOwnedSaplings");
static_assert(offsetof(FortControllerComponent_RealitySapling_GetOwnedSaplings, ReturnValue) == 0x000000, "Member 'FortControllerComponent_RealitySapling_GetOwnedSaplings::ReturnValue' has a wrong offset!");

// Function RealitySeedGameplayRuntime.FortControllerComponent_RealitySapling.HasActiveSapling
// 0x0001 (0x0001 - 0x0000)
struct FortControllerComponent_RealitySapling_HasActiveSapling final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_RealitySapling_HasActiveSapling) == 0x000001, "Wrong alignment on FortControllerComponent_RealitySapling_HasActiveSapling");
static_assert(sizeof(FortControllerComponent_RealitySapling_HasActiveSapling) == 0x000001, "Wrong size on FortControllerComponent_RealitySapling_HasActiveSapling");
static_assert(offsetof(FortControllerComponent_RealitySapling_HasActiveSapling, ReturnValue) == 0x000000, "Member 'FortControllerComponent_RealitySapling_HasActiveSapling::ReturnValue' has a wrong offset!");

// Function RealitySeedGameplayRuntime.FortControllerComponent_RealitySapling.HasPersistentSapling
// 0x0001 (0x0001 - 0x0000)
struct FortControllerComponent_RealitySapling_HasPersistentSapling final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortControllerComponent_RealitySapling_HasPersistentSapling) == 0x000001, "Wrong alignment on FortControllerComponent_RealitySapling_HasPersistentSapling");
static_assert(sizeof(FortControllerComponent_RealitySapling_HasPersistentSapling) == 0x000001, "Wrong size on FortControllerComponent_RealitySapling_HasPersistentSapling");
static_assert(offsetof(FortControllerComponent_RealitySapling_HasPersistentSapling, ReturnValue) == 0x000000, "Member 'FortControllerComponent_RealitySapling_HasPersistentSapling::ReturnValue' has a wrong offset!");

// Function RealitySeedGameplayRuntime.FortGameStateComponent_RealitySapling.HandleCurrentPlaylistLoaded
// 0x0028 (0x0028 - 0x0000)
struct FortGameStateComponent_RealitySapling_HandleCurrentPlaylistLoaded final
{
public:
	class FName                                   PlaylistName;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  PlaylistContextTags;                               // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateComponent_RealitySapling_HandleCurrentPlaylistLoaded) == 0x000008, "Wrong alignment on FortGameStateComponent_RealitySapling_HandleCurrentPlaylistLoaded");
static_assert(sizeof(FortGameStateComponent_RealitySapling_HandleCurrentPlaylistLoaded) == 0x000028, "Wrong size on FortGameStateComponent_RealitySapling_HandleCurrentPlaylistLoaded");
static_assert(offsetof(FortGameStateComponent_RealitySapling_HandleCurrentPlaylistLoaded, PlaylistName) == 0x000000, "Member 'FortGameStateComponent_RealitySapling_HandleCurrentPlaylistLoaded::PlaylistName' has a wrong offset!");
static_assert(offsetof(FortGameStateComponent_RealitySapling_HandleCurrentPlaylistLoaded, PlaylistContextTags) == 0x000008, "Member 'FortGameStateComponent_RealitySapling_HandleCurrentPlaylistLoaded::PlaylistContextTags' has a wrong offset!");

// Function RealitySeedGameplayRuntime.FortGameStateComponent_RealitySapling.HandleGamePhaseStepChanged
// 0x0018 (0x0018 - 0x0000)
struct FortGameStateComponent_RealitySapling_HandleGamePhaseStepChanged final
{
public:
	TScriptInterface<class IFortSafeZoneInterface> SafeZoneInterface;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAthenaGamePhaseStep                          GamePhaseStep;                                     // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameStateComponent_RealitySapling_HandleGamePhaseStepChanged) == 0x000008, "Wrong alignment on FortGameStateComponent_RealitySapling_HandleGamePhaseStepChanged");
static_assert(sizeof(FortGameStateComponent_RealitySapling_HandleGamePhaseStepChanged) == 0x000018, "Wrong size on FortGameStateComponent_RealitySapling_HandleGamePhaseStepChanged");
static_assert(offsetof(FortGameStateComponent_RealitySapling_HandleGamePhaseStepChanged, SafeZoneInterface) == 0x000000, "Member 'FortGameStateComponent_RealitySapling_HandleGamePhaseStepChanged::SafeZoneInterface' has a wrong offset!");
static_assert(offsetof(FortGameStateComponent_RealitySapling_HandleGamePhaseStepChanged, GamePhaseStep) == 0x000010, "Member 'FortGameStateComponent_RealitySapling_HandleGamePhaseStepChanged::GamePhaseStep' has a wrong offset!");

// Function RealitySeedGameplayRuntime.FortGameStateComponent_RealitySapling.GetNumSaplingsInRadius
// 0x0020 (0x0020 - 0x0000)
struct FortGameStateComponent_RealitySapling_GetNumSaplingsInRadius final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateComponent_RealitySapling_GetNumSaplingsInRadius) == 0x000008, "Wrong alignment on FortGameStateComponent_RealitySapling_GetNumSaplingsInRadius");
static_assert(sizeof(FortGameStateComponent_RealitySapling_GetNumSaplingsInRadius) == 0x000020, "Wrong size on FortGameStateComponent_RealitySapling_GetNumSaplingsInRadius");
static_assert(offsetof(FortGameStateComponent_RealitySapling_GetNumSaplingsInRadius, Location) == 0x000000, "Member 'FortGameStateComponent_RealitySapling_GetNumSaplingsInRadius::Location' has a wrong offset!");
static_assert(offsetof(FortGameStateComponent_RealitySapling_GetNumSaplingsInRadius, Radius) == 0x000018, "Member 'FortGameStateComponent_RealitySapling_GetNumSaplingsInRadius::Radius' has a wrong offset!");
static_assert(offsetof(FortGameStateComponent_RealitySapling_GetNumSaplingsInRadius, ReturnValue) == 0x00001C, "Member 'FortGameStateComponent_RealitySapling_GetNumSaplingsInRadius::ReturnValue' has a wrong offset!");

// Function RealitySeedGameplayRuntime.FortGameStateComponent_RealitySapling.GetSaplingSpawnEnvQueryActorsToAvoidByBounds
// 0x0010 (0x0010 - 0x0000)
struct FortGameStateComponent_RealitySapling_GetSaplingSpawnEnvQueryActorsToAvoidByBounds final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateComponent_RealitySapling_GetSaplingSpawnEnvQueryActorsToAvoidByBounds) == 0x000008, "Wrong alignment on FortGameStateComponent_RealitySapling_GetSaplingSpawnEnvQueryActorsToAvoidByBounds");
static_assert(sizeof(FortGameStateComponent_RealitySapling_GetSaplingSpawnEnvQueryActorsToAvoidByBounds) == 0x000010, "Wrong size on FortGameStateComponent_RealitySapling_GetSaplingSpawnEnvQueryActorsToAvoidByBounds");
static_assert(offsetof(FortGameStateComponent_RealitySapling_GetSaplingSpawnEnvQueryActorsToAvoidByBounds, ReturnValue) == 0x000000, "Member 'FortGameStateComponent_RealitySapling_GetSaplingSpawnEnvQueryActorsToAvoidByBounds::ReturnValue' has a wrong offset!");

}

