#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VerseAIBase

#include "Basic.hpp"

#include "EntityCore_classes.hpp"
#include "FortniteGame_classes.hpp"
#include "FortniteAI_classes.hpp"


namespace SDK
{

// Class VerseAIBase.AIComponentBase
// 0x0018 (0x0098 - 0x0080)
class UAIComponentBase : public UEntityEnableableComponent
{
public:
	class AFortPawn*                              CachedPawn;                                        // 0x0080(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AAIController*                          CachedAIController;                                // 0x0088(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBlackboardComponent*                   CachedBlackboardComponent;                         // 0x0090(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AIComponentBase">();
	}
	static class UAIComponentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAIComponentBase>();
	}
};
static_assert(alignof(UAIComponentBase) == 0x000008, "Wrong alignment on UAIComponentBase");
static_assert(sizeof(UAIComponentBase) == 0x000098, "Wrong size on UAIComponentBase");
static_assert(offsetof(UAIComponentBase, CachedPawn) == 0x000080, "Member 'UAIComponentBase::CachedPawn' has a wrong offset!");
static_assert(offsetof(UAIComponentBase, CachedAIController) == 0x000088, "Member 'UAIComponentBase::CachedAIController' has a wrong offset!");
static_assert(offsetof(UAIComponentBase, CachedBlackboardComponent) == 0x000090, "Member 'UAIComponentBase::CachedBlackboardComponent' has a wrong offset!");

// Class VerseAIBase.FortAthenaAISpawnerDataComponent_Verse
// 0x0010 (0x0040 - 0x0030)
class UFortAthenaAISpawnerDataComponent_Verse final : public UFortAthenaAISpawnerDataComponent_ScriptBase
{
public:
	TArray<TSubclassOf<class UEntityComponent>>   EntityComponents;                                  // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaAISpawnerDataComponent_Verse">();
	}
	static class UFortAthenaAISpawnerDataComponent_Verse* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaAISpawnerDataComponent_Verse>();
	}
};
static_assert(alignof(UFortAthenaAISpawnerDataComponent_Verse) == 0x000008, "Wrong alignment on UFortAthenaAISpawnerDataComponent_Verse");
static_assert(sizeof(UFortAthenaAISpawnerDataComponent_Verse) == 0x000040, "Wrong size on UFortAthenaAISpawnerDataComponent_Verse");
static_assert(offsetof(UFortAthenaAISpawnerDataComponent_Verse, EntityComponents) == 0x000030, "Member 'UFortAthenaAISpawnerDataComponent_Verse::EntityComponents' has a wrong offset!");

// Class VerseAIBase.VerseAISpawner
// 0x0088 (0x0F08 - 0x0E80)
class AVerseAISpawner final : public AFortCreativeDeviceProp
{
public:
	TArray<TSubclassOf<class UEntityScriptComponent>> VerseScriptComponents;                             // 0x0E80(0x0010)(Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortAthenaAISpawnerData>   AISpawnerData;                                     // 0x0E90(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AFortPawn*>                      SpawnedList;                                       // 0x0E98(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, Protected, NativeAccessSpecifierProtected)
	class UFortMinigameProgressComponent*         MinigameProgress;                                  // 0x0EA8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortAISpawnerUtilityComponent*         AISpawnerUtilityComponent;                         // 0x0EB0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortActorOptionsComponent*             OptionsComponent;                                  // 0x0EB8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UEnvQuery>               SpawnEQSQuery;                                     // 0x0EC0(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_EE8[0x20];                                     // 0x0EE8(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InternalOnAIDied(class AController* KilledController, bool bIsABot, class AFortPawn* KilledAIPawn, class AFortPlayerPawn* KilledPlayerPawn, class AController* KillerController);
	void InternalOnSpawned(class APawn* Pawn, const int32 RequestId);
	void KillAllBots(const bool bForceDoNotDropLoot);
	void OnEQSFinished(const TArray<struct FVector>& QueryResultLocations);
	void OnPreSpawn(class UFortAthenaAISpawnerDataComponentList* ComponentList);
	void OnPropertiesLoaded();
	void OnSpawned(class AFortPawn* Pawn);
	void RequestSpawn();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VerseAISpawner">();
	}
	static class AVerseAISpawner* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVerseAISpawner>();
	}
};
static_assert(alignof(AVerseAISpawner) == 0x000008, "Wrong alignment on AVerseAISpawner");
static_assert(sizeof(AVerseAISpawner) == 0x000F08, "Wrong size on AVerseAISpawner");
static_assert(offsetof(AVerseAISpawner, VerseScriptComponents) == 0x000E80, "Member 'AVerseAISpawner::VerseScriptComponents' has a wrong offset!");
static_assert(offsetof(AVerseAISpawner, AISpawnerData) == 0x000E90, "Member 'AVerseAISpawner::AISpawnerData' has a wrong offset!");
static_assert(offsetof(AVerseAISpawner, SpawnedList) == 0x000E98, "Member 'AVerseAISpawner::SpawnedList' has a wrong offset!");
static_assert(offsetof(AVerseAISpawner, MinigameProgress) == 0x000EA8, "Member 'AVerseAISpawner::MinigameProgress' has a wrong offset!");
static_assert(offsetof(AVerseAISpawner, AISpawnerUtilityComponent) == 0x000EB0, "Member 'AVerseAISpawner::AISpawnerUtilityComponent' has a wrong offset!");
static_assert(offsetof(AVerseAISpawner, OptionsComponent) == 0x000EB8, "Member 'AVerseAISpawner::OptionsComponent' has a wrong offset!");
static_assert(offsetof(AVerseAISpawner, SpawnEQSQuery) == 0x000EC0, "Member 'AVerseAISpawner::SpawnEQSQuery' has a wrong offset!");

}

