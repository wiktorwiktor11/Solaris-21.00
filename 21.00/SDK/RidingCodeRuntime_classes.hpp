#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RidingCodeRuntime

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "RidingCodeRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GameplayTags_0_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "ModularGameplay_classes.hpp"


namespace SDK
{

// Class RidingCodeRuntime.RidableComponent
// 0x01C0 (0x0260 - 0x00A0)
class URidableComponent : public UGameFrameworkComponent
{
public:
	TMulticastInlineDelegate<void(class URidableComponent* Ridable, class URiderComponent* Rider)> OnRiderStartedRiding;                              // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class URidableComponent* Ridable, class URiderComponent* Rider)> OnRiderStoppedRiding;                              // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class UAnimInstance>              RiderAnimLayerOverlayClass;                        // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   AttachSocket;                                      // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AttachLocationOffset;                              // 0x00D0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               AttachRotationOffset;                              // 0x00E8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class FName                                   ClientAttachGuideSocket;                           // 0x0100(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ClientAttachGuideLocationOffset;                   // 0x0108(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RidablePropAttachSocket;                           // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RidablePropAttachLocationOffset;                   // 0x0128(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               RidablePropAttachRotationOffset;                   // 0x0140(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         RidablePropAttachScale;                            // 0x0158(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RidablePropAttachRiderVerticalBuffer;              // 0x015C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRidingAttachmentBoundsOverride        RiderPropAttachBoundsOverride;                     // 0x0160(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bOverrideNoiseGeneration;                          // 0x0198(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_199[0x3];                                      // 0x0199(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortPlayerPawnAthenaMovementNoiseOverride RiderMovementNoiseOverride;                        // 0x019C(0x000C)(Edit, Config, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTag                           RidableTag;                                        // 0x01A8(0x0004)(Edit, Config, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           EnergyDepletedTag;                                 // 0x01AC(0x0004)(Edit, Config, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    PlaylistTagBlacklistRowHandle;                     // 0x01B0(0x0010)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class URiderComponent*                        ActiveRider;                                       // 0x01C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URiderComponent*                        LastRider;                                         // 0x01C8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USceneComponent*                        RidableProp;                                       // 0x01D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OriginalCapsuleRadius;                             // 0x01D8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OriginalCapsuleHalfHeight;                         // 0x01DC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RidingCapsuleRadius;                               // 0x01E0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RidingCapsuleHalfHeight;                           // 0x01E4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOriginalClientPositionSmoothingThrottlingSetting; // 0x01E8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1E9[0x7];                                      // 0x01E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         MaxHalfAimingAngle;                                // 0x01F0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TArray<struct FPrimaryFireAnimMontageAnimCoreTypeOverride> PrimaryFireMontageAnimCoreTypeOverrides;           // 0x0218(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FPrimaryFireAnimMontageTagOverride> PrimaryFireMontageTagOverrides;                    // 0x0228(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FTimerHandle                           RestoreCollisionHandle;                            // 0x0238(0x0008)(Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_240[0x20];                                     // 0x0240(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CheatSetStaminaPercent(const float StaminaPercent);
	void HandleRiderStartedRiding(class URiderComponent* Rider);
	void HandleRiderStoppedRiding(class URiderComponent* Rider);
	void OnRep_ActiveRider();
	void OnRiderStartedEmote(class UFortItemDefinition* MontageItemDef, class AFortPawn* PawnEmoting);
	void OnRiderStoppedEmote(class UFortItemDefinition* MontageItemDef, class AFortPawn* PawnEmoting);

	bool CanBeRiddenBP(class URiderComponent* Rider) const;
	bool CanRiderPlayEmote(const class URiderComponent* Rider) const;
	class USceneComponent* GetRidingAttachComponent() const;
	void GetRidingCapsuleSize(const class URiderComponent* Rider, float OriginalRadius, float OriginalHalfHeight, float* OutRadius, float* OutHalfHeight) const;
	void GetRidingEmoteCapsuleSize(const class URiderComponent* Rider, float OriginalRadius, float OriginalHalfHeight, float* OutRadius, float* OutHalfHeight) const;
	bool IsBeingRidden() const;
	bool IsSprinting() const;
	void PredictRunSpeedForClient(const float NewRunSpeed) const;
	bool ShouldCameraFocusOnRidable(const class URiderComponent* Rider) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RidableComponent">();
	}
	static class URidableComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<URidableComponent>();
	}
};
static_assert(alignof(URidableComponent) == 0x000008, "Wrong alignment on URidableComponent");
static_assert(sizeof(URidableComponent) == 0x000260, "Wrong size on URidableComponent");
static_assert(offsetof(URidableComponent, OnRiderStartedRiding) == 0x0000A0, "Member 'URidableComponent::OnRiderStartedRiding' has a wrong offset!");
static_assert(offsetof(URidableComponent, OnRiderStoppedRiding) == 0x0000B0, "Member 'URidableComponent::OnRiderStoppedRiding' has a wrong offset!");
static_assert(offsetof(URidableComponent, RiderAnimLayerOverlayClass) == 0x0000C0, "Member 'URidableComponent::RiderAnimLayerOverlayClass' has a wrong offset!");
static_assert(offsetof(URidableComponent, AttachSocket) == 0x0000C8, "Member 'URidableComponent::AttachSocket' has a wrong offset!");
static_assert(offsetof(URidableComponent, AttachLocationOffset) == 0x0000D0, "Member 'URidableComponent::AttachLocationOffset' has a wrong offset!");
static_assert(offsetof(URidableComponent, AttachRotationOffset) == 0x0000E8, "Member 'URidableComponent::AttachRotationOffset' has a wrong offset!");
static_assert(offsetof(URidableComponent, ClientAttachGuideSocket) == 0x000100, "Member 'URidableComponent::ClientAttachGuideSocket' has a wrong offset!");
static_assert(offsetof(URidableComponent, ClientAttachGuideLocationOffset) == 0x000108, "Member 'URidableComponent::ClientAttachGuideLocationOffset' has a wrong offset!");
static_assert(offsetof(URidableComponent, RidablePropAttachSocket) == 0x000120, "Member 'URidableComponent::RidablePropAttachSocket' has a wrong offset!");
static_assert(offsetof(URidableComponent, RidablePropAttachLocationOffset) == 0x000128, "Member 'URidableComponent::RidablePropAttachLocationOffset' has a wrong offset!");
static_assert(offsetof(URidableComponent, RidablePropAttachRotationOffset) == 0x000140, "Member 'URidableComponent::RidablePropAttachRotationOffset' has a wrong offset!");
static_assert(offsetof(URidableComponent, RidablePropAttachScale) == 0x000158, "Member 'URidableComponent::RidablePropAttachScale' has a wrong offset!");
static_assert(offsetof(URidableComponent, RidablePropAttachRiderVerticalBuffer) == 0x00015C, "Member 'URidableComponent::RidablePropAttachRiderVerticalBuffer' has a wrong offset!");
static_assert(offsetof(URidableComponent, RiderPropAttachBoundsOverride) == 0x000160, "Member 'URidableComponent::RiderPropAttachBoundsOverride' has a wrong offset!");
static_assert(offsetof(URidableComponent, bOverrideNoiseGeneration) == 0x000198, "Member 'URidableComponent::bOverrideNoiseGeneration' has a wrong offset!");
static_assert(offsetof(URidableComponent, RiderMovementNoiseOverride) == 0x00019C, "Member 'URidableComponent::RiderMovementNoiseOverride' has a wrong offset!");
static_assert(offsetof(URidableComponent, RidableTag) == 0x0001A8, "Member 'URidableComponent::RidableTag' has a wrong offset!");
static_assert(offsetof(URidableComponent, EnergyDepletedTag) == 0x0001AC, "Member 'URidableComponent::EnergyDepletedTag' has a wrong offset!");
static_assert(offsetof(URidableComponent, PlaylistTagBlacklistRowHandle) == 0x0001B0, "Member 'URidableComponent::PlaylistTagBlacklistRowHandle' has a wrong offset!");
static_assert(offsetof(URidableComponent, ActiveRider) == 0x0001C0, "Member 'URidableComponent::ActiveRider' has a wrong offset!");
static_assert(offsetof(URidableComponent, LastRider) == 0x0001C8, "Member 'URidableComponent::LastRider' has a wrong offset!");
static_assert(offsetof(URidableComponent, RidableProp) == 0x0001D0, "Member 'URidableComponent::RidableProp' has a wrong offset!");
static_assert(offsetof(URidableComponent, OriginalCapsuleRadius) == 0x0001D8, "Member 'URidableComponent::OriginalCapsuleRadius' has a wrong offset!");
static_assert(offsetof(URidableComponent, OriginalCapsuleHalfHeight) == 0x0001DC, "Member 'URidableComponent::OriginalCapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(URidableComponent, RidingCapsuleRadius) == 0x0001E0, "Member 'URidableComponent::RidingCapsuleRadius' has a wrong offset!");
static_assert(offsetof(URidableComponent, RidingCapsuleHalfHeight) == 0x0001E4, "Member 'URidableComponent::RidingCapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(URidableComponent, bOriginalClientPositionSmoothingThrottlingSetting) == 0x0001E8, "Member 'URidableComponent::bOriginalClientPositionSmoothingThrottlingSetting' has a wrong offset!");
static_assert(offsetof(URidableComponent, MaxHalfAimingAngle) == 0x0001F0, "Member 'URidableComponent::MaxHalfAimingAngle' has a wrong offset!");
static_assert(offsetof(URidableComponent, PrimaryFireMontageAnimCoreTypeOverrides) == 0x000218, "Member 'URidableComponent::PrimaryFireMontageAnimCoreTypeOverrides' has a wrong offset!");
static_assert(offsetof(URidableComponent, PrimaryFireMontageTagOverrides) == 0x000228, "Member 'URidableComponent::PrimaryFireMontageTagOverrides' has a wrong offset!");
static_assert(offsetof(URidableComponent, RestoreCollisionHandle) == 0x000238, "Member 'URidableComponent::RestoreCollisionHandle' has a wrong offset!");

// Class RidingCodeRuntime.ControllableRidableComponent
// 0x0248 (0x04A8 - 0x0260)
class UControllableRidableComponent : public URidableComponent
{
public:
	bool                                          bIsControllable;                                   // 0x0260(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasAbility;                                       // 0x0261(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_262[0x6];                                      // 0x0262(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   AbilityDisplayText;                                // 0x0268(0x0018)(Edit, Config, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          bCanJump;                                          // 0x0280(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAlwaysMoveForward;                                // 0x0281(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_282[0x2];                                      // 0x0282(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ForwardMoveSpeedMultiplier;                        // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BackwardMoveSpeedMultiplier;                       // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SidewaysMoveRotationOffset;                        // 0x028C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EFortMovementUrgency                          MovementUrgency;                                   // 0x0290(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsBeingControlled;                                // 0x0291(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_292[0x26];                                     // 0x0292(0x0026)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRidableControlParams                  RidableControlParams;                              // 0x02B8(0x01E0)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_498[0x10];                                     // 0x0498(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CancelBuildBar();
	void HandleAbilityHeld();
	void HandleAbilityStarted();
	void HandleAbilityStopped();
	void HandleCancelSprint(const bool bAbilityInputHeld, const bool bForceCancel);
	void HandleJumpHeld();
	void HandleJumpStarted();
	void HandleJumpStopped();
	void OnCapsuleBeginOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnRep_IsBeingControlled();
	void UpdateFromInput(float DeltaTime, const struct FRidingControlInputState& InputState);

	bool CanBeControlled(class URiderComponent* Rider) const;
	bool IsSprintToggleable() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControllableRidableComponent">();
	}
	static class UControllableRidableComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControllableRidableComponent>();
	}
};
static_assert(alignof(UControllableRidableComponent) == 0x000008, "Wrong alignment on UControllableRidableComponent");
static_assert(sizeof(UControllableRidableComponent) == 0x0004A8, "Wrong size on UControllableRidableComponent");
static_assert(offsetof(UControllableRidableComponent, bIsControllable) == 0x000260, "Member 'UControllableRidableComponent::bIsControllable' has a wrong offset!");
static_assert(offsetof(UControllableRidableComponent, bHasAbility) == 0x000261, "Member 'UControllableRidableComponent::bHasAbility' has a wrong offset!");
static_assert(offsetof(UControllableRidableComponent, AbilityDisplayText) == 0x000268, "Member 'UControllableRidableComponent::AbilityDisplayText' has a wrong offset!");
static_assert(offsetof(UControllableRidableComponent, bCanJump) == 0x000280, "Member 'UControllableRidableComponent::bCanJump' has a wrong offset!");
static_assert(offsetof(UControllableRidableComponent, bAlwaysMoveForward) == 0x000281, "Member 'UControllableRidableComponent::bAlwaysMoveForward' has a wrong offset!");
static_assert(offsetof(UControllableRidableComponent, ForwardMoveSpeedMultiplier) == 0x000284, "Member 'UControllableRidableComponent::ForwardMoveSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UControllableRidableComponent, BackwardMoveSpeedMultiplier) == 0x000288, "Member 'UControllableRidableComponent::BackwardMoveSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UControllableRidableComponent, SidewaysMoveRotationOffset) == 0x00028C, "Member 'UControllableRidableComponent::SidewaysMoveRotationOffset' has a wrong offset!");
static_assert(offsetof(UControllableRidableComponent, MovementUrgency) == 0x000290, "Member 'UControllableRidableComponent::MovementUrgency' has a wrong offset!");
static_assert(offsetof(UControllableRidableComponent, bIsBeingControlled) == 0x000291, "Member 'UControllableRidableComponent::bIsBeingControlled' has a wrong offset!");
static_assert(offsetof(UControllableRidableComponent, RidableControlParams) == 0x0002B8, "Member 'UControllableRidableComponent::RidableControlParams' has a wrong offset!");

// Class RidingCodeRuntime.RiderComponent
// 0x04F8 (0x0598 - 0x00A0)
class URiderComponent : public UFortPawnComponent
{
public:
	TMulticastInlineDelegate<void(class URiderComponent* Rider, class URidableComponent* Ridable)> OnStartedRiding;                                   // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class URiderComponent* Rider, class URidableComponent* Ridable)> OnStoppedRiding;                                   // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortCameraMode_Riding>     RidingCameraModeClass;                             // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortCameraMode_Riding>     RidingCameraModeEmotingClass;                      // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortCameraMode_Riding>     RidingSprintCameraModeClass;                       // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RidingCameraModeBlendTime;                         // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInterpOffset                          TargetingAdditionalViewTargetSpaceViewOffset;      // 0x00E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class USceneComponent>            RiderPropClass;                                    // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class USceneComponent>            RidablePropClass;                                  // 0x00F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                RiderPropAttachLocationOffset;                     // 0x0100(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               RiderPropAttachRotationOffset;                     // 0x0118(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         RiderPropAttachScale;                              // 0x0130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RiderPropAttachSocket;                             // 0x0134(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseClientAttachGuideSocket;                       // 0x0138(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RiderPropAttachSoftBounds;                         // 0x0140(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RiderPropAttachSoftBoundsScalar;                   // 0x0158(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RiderPropAttachHardBounds;                         // 0x0160(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RiderPropAttachSoftBoundsTargetingScalar;          // 0x0178(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RiderPropAttachHardBoundsTargetingScalar;          // 0x017C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RiderPropAttachVerticalBufferTargetingScalar;      // 0x0180(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RidingExitHoldTime;                                // 0x0184(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FScalableFloat                         TimeBeforeReenteringRiding;                        // 0x0188(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTag                           RidingExitStartedEventTag;                         // 0x01B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           RidingExitStoppedEventTag;                         // 0x01B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFXSystemAsset*                         ConnectorFXAsset;                                  // 0x01B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ConnectorPropSourceMeshParameterName;              // 0x01C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ConnectorPropTargetMeshParameterName;              // 0x01C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SimulatedSmoothedRotationSpeed;                    // 0x01C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1CC[0x4];                                      // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RidingFiringOffset;                                // 0x01D0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  ExcludedEmoteTags;                                 // 0x01E8(0x0020)(Edit, Config, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_208[0x8];                                      // 0x0208(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class URidableComponent*                      ActiveRidable;                                     // 0x0210(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URidableComponent*                      LastRidable;                                       // 0x0218(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USceneComponent*                        RiderProp;                                         // 0x0220(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFXSystemComponent*                     ConnectorProp;                                     // 0x0228(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                PropAttachSeparation;                              // 0x0230(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                AdditionalAttachOffset;                            // 0x0248(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                SoftBoundsAttachmentOffset;                        // 0x0260(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                HardBoundsAttachmentOffset;                        // 0x0278(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    PlaylistTagBlacklistRowHandle;                     // 0x0290(0x0010)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UFortInputComponent*                    RiderInputComponent;                               // 0x02A0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  PendingFailedEmoteErrorTags;                       // 0x02A8(0x0020)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FRiderDismountLaunchVelocity           ExitLaunchVelocity;                                // 0x02C8(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FRiderDismountLaunchVelocity           JumpExitLaunchVelocity;                            // 0x0368(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_408[0x20];                                     // 0x0408(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRidingAnalyticsData_Stopped           ActiveAnaltyicsData;                               // 0x0428(0x0090)(Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FVector                                RidableLocationLastFrame;                          // 0x04B8(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4D0[0x8];                                      // 0x04D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           RestoreCollisionHandle;                            // 0x04D8(0x0008)(Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRidableControlRuntimeData             RidableControlRuntimeData;                         // 0x04E0(0x0038)(Net, Transient, RepNotify, Protected, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AFortPlayerController>   ClampedController;                                 // 0x0518(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_520[0x78];                                     // 0x0520(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClientHandleFinishedCharacterCustomization(class AFortPlayerPawn* PlayerPawn);
	void ClientNotifyEmoteFailure(const struct FGameplayTagContainer& ErrorTags);
	void HandleActorEndPlayWhileRiding(class AActor* Actor, EEndPlayReason EndPlayReason);
	void HandleDBNOWhileRiding();
	void HandleDeferredExitVelocity(const struct FVector& ExitVelocity);
	void HandleGamepadRidingExitReleased();
	void HandleOnWeaponEquipped(class AFortWeapon* NewWeapon, class AFortWeapon* PrevWeapon);
	void HandlePawnDiedWhileRiding(class AFortPawn* DeadPawn);
	void HandlePawnTeleported(class AFortPawn* TeleportedPawn);
	void HandleRiderDidDamage(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* HitComponent, class FName BoneName, const struct FVector& Momentum);
	void HandleRiderTakenDamage(class AActor* DamageOnOwnerPawnDamageddActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void HandleRidingExitPressed();
	void HandleRidingExitReleased();
	void HandleStartedRiding(class URidableComponent* Ridable);
	void HandleStoppedRiding(class URidableComponent* Ridable);
	void HandleTrackingRidables();
	void OnRep_ActiveRidable();
	void OnRep_RidableControlRuntimeUpdated();
	void ServerRidingExit();
	bool StartRidingActor(class AActor* TargetActor);
	bool StopRidingActor(bool bLaunchRider, bool bFindDismountLocation, bool bIsJumpExit);

	bool IsRidingActor() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RiderComponent">();
	}
	static class URiderComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<URiderComponent>();
	}
};
static_assert(alignof(URiderComponent) == 0x000008, "Wrong alignment on URiderComponent");
static_assert(sizeof(URiderComponent) == 0x000598, "Wrong size on URiderComponent");
static_assert(offsetof(URiderComponent, OnStartedRiding) == 0x0000A0, "Member 'URiderComponent::OnStartedRiding' has a wrong offset!");
static_assert(offsetof(URiderComponent, OnStoppedRiding) == 0x0000B0, "Member 'URiderComponent::OnStoppedRiding' has a wrong offset!");
static_assert(offsetof(URiderComponent, RidingCameraModeClass) == 0x0000C0, "Member 'URiderComponent::RidingCameraModeClass' has a wrong offset!");
static_assert(offsetof(URiderComponent, RidingCameraModeEmotingClass) == 0x0000C8, "Member 'URiderComponent::RidingCameraModeEmotingClass' has a wrong offset!");
static_assert(offsetof(URiderComponent, RidingSprintCameraModeClass) == 0x0000D0, "Member 'URiderComponent::RidingSprintCameraModeClass' has a wrong offset!");
static_assert(offsetof(URiderComponent, RidingCameraModeBlendTime) == 0x0000D8, "Member 'URiderComponent::RidingCameraModeBlendTime' has a wrong offset!");
static_assert(offsetof(URiderComponent, TargetingAdditionalViewTargetSpaceViewOffset) == 0x0000E0, "Member 'URiderComponent::TargetingAdditionalViewTargetSpaceViewOffset' has a wrong offset!");
static_assert(offsetof(URiderComponent, RiderPropClass) == 0x0000F0, "Member 'URiderComponent::RiderPropClass' has a wrong offset!");
static_assert(offsetof(URiderComponent, RidablePropClass) == 0x0000F8, "Member 'URiderComponent::RidablePropClass' has a wrong offset!");
static_assert(offsetof(URiderComponent, RiderPropAttachLocationOffset) == 0x000100, "Member 'URiderComponent::RiderPropAttachLocationOffset' has a wrong offset!");
static_assert(offsetof(URiderComponent, RiderPropAttachRotationOffset) == 0x000118, "Member 'URiderComponent::RiderPropAttachRotationOffset' has a wrong offset!");
static_assert(offsetof(URiderComponent, RiderPropAttachScale) == 0x000130, "Member 'URiderComponent::RiderPropAttachScale' has a wrong offset!");
static_assert(offsetof(URiderComponent, RiderPropAttachSocket) == 0x000134, "Member 'URiderComponent::RiderPropAttachSocket' has a wrong offset!");
static_assert(offsetof(URiderComponent, bUseClientAttachGuideSocket) == 0x000138, "Member 'URiderComponent::bUseClientAttachGuideSocket' has a wrong offset!");
static_assert(offsetof(URiderComponent, RiderPropAttachSoftBounds) == 0x000140, "Member 'URiderComponent::RiderPropAttachSoftBounds' has a wrong offset!");
static_assert(offsetof(URiderComponent, RiderPropAttachSoftBoundsScalar) == 0x000158, "Member 'URiderComponent::RiderPropAttachSoftBoundsScalar' has a wrong offset!");
static_assert(offsetof(URiderComponent, RiderPropAttachHardBounds) == 0x000160, "Member 'URiderComponent::RiderPropAttachHardBounds' has a wrong offset!");
static_assert(offsetof(URiderComponent, RiderPropAttachSoftBoundsTargetingScalar) == 0x000178, "Member 'URiderComponent::RiderPropAttachSoftBoundsTargetingScalar' has a wrong offset!");
static_assert(offsetof(URiderComponent, RiderPropAttachHardBoundsTargetingScalar) == 0x00017C, "Member 'URiderComponent::RiderPropAttachHardBoundsTargetingScalar' has a wrong offset!");
static_assert(offsetof(URiderComponent, RiderPropAttachVerticalBufferTargetingScalar) == 0x000180, "Member 'URiderComponent::RiderPropAttachVerticalBufferTargetingScalar' has a wrong offset!");
static_assert(offsetof(URiderComponent, RidingExitHoldTime) == 0x000184, "Member 'URiderComponent::RidingExitHoldTime' has a wrong offset!");
static_assert(offsetof(URiderComponent, TimeBeforeReenteringRiding) == 0x000188, "Member 'URiderComponent::TimeBeforeReenteringRiding' has a wrong offset!");
static_assert(offsetof(URiderComponent, RidingExitStartedEventTag) == 0x0001B0, "Member 'URiderComponent::RidingExitStartedEventTag' has a wrong offset!");
static_assert(offsetof(URiderComponent, RidingExitStoppedEventTag) == 0x0001B4, "Member 'URiderComponent::RidingExitStoppedEventTag' has a wrong offset!");
static_assert(offsetof(URiderComponent, ConnectorFXAsset) == 0x0001B8, "Member 'URiderComponent::ConnectorFXAsset' has a wrong offset!");
static_assert(offsetof(URiderComponent, ConnectorPropSourceMeshParameterName) == 0x0001C0, "Member 'URiderComponent::ConnectorPropSourceMeshParameterName' has a wrong offset!");
static_assert(offsetof(URiderComponent, ConnectorPropTargetMeshParameterName) == 0x0001C4, "Member 'URiderComponent::ConnectorPropTargetMeshParameterName' has a wrong offset!");
static_assert(offsetof(URiderComponent, SimulatedSmoothedRotationSpeed) == 0x0001C8, "Member 'URiderComponent::SimulatedSmoothedRotationSpeed' has a wrong offset!");
static_assert(offsetof(URiderComponent, RidingFiringOffset) == 0x0001D0, "Member 'URiderComponent::RidingFiringOffset' has a wrong offset!");
static_assert(offsetof(URiderComponent, ExcludedEmoteTags) == 0x0001E8, "Member 'URiderComponent::ExcludedEmoteTags' has a wrong offset!");
static_assert(offsetof(URiderComponent, ActiveRidable) == 0x000210, "Member 'URiderComponent::ActiveRidable' has a wrong offset!");
static_assert(offsetof(URiderComponent, LastRidable) == 0x000218, "Member 'URiderComponent::LastRidable' has a wrong offset!");
static_assert(offsetof(URiderComponent, RiderProp) == 0x000220, "Member 'URiderComponent::RiderProp' has a wrong offset!");
static_assert(offsetof(URiderComponent, ConnectorProp) == 0x000228, "Member 'URiderComponent::ConnectorProp' has a wrong offset!");
static_assert(offsetof(URiderComponent, PropAttachSeparation) == 0x000230, "Member 'URiderComponent::PropAttachSeparation' has a wrong offset!");
static_assert(offsetof(URiderComponent, AdditionalAttachOffset) == 0x000248, "Member 'URiderComponent::AdditionalAttachOffset' has a wrong offset!");
static_assert(offsetof(URiderComponent, SoftBoundsAttachmentOffset) == 0x000260, "Member 'URiderComponent::SoftBoundsAttachmentOffset' has a wrong offset!");
static_assert(offsetof(URiderComponent, HardBoundsAttachmentOffset) == 0x000278, "Member 'URiderComponent::HardBoundsAttachmentOffset' has a wrong offset!");
static_assert(offsetof(URiderComponent, PlaylistTagBlacklistRowHandle) == 0x000290, "Member 'URiderComponent::PlaylistTagBlacklistRowHandle' has a wrong offset!");
static_assert(offsetof(URiderComponent, RiderInputComponent) == 0x0002A0, "Member 'URiderComponent::RiderInputComponent' has a wrong offset!");
static_assert(offsetof(URiderComponent, PendingFailedEmoteErrorTags) == 0x0002A8, "Member 'URiderComponent::PendingFailedEmoteErrorTags' has a wrong offset!");
static_assert(offsetof(URiderComponent, ExitLaunchVelocity) == 0x0002C8, "Member 'URiderComponent::ExitLaunchVelocity' has a wrong offset!");
static_assert(offsetof(URiderComponent, JumpExitLaunchVelocity) == 0x000368, "Member 'URiderComponent::JumpExitLaunchVelocity' has a wrong offset!");
static_assert(offsetof(URiderComponent, ActiveAnaltyicsData) == 0x000428, "Member 'URiderComponent::ActiveAnaltyicsData' has a wrong offset!");
static_assert(offsetof(URiderComponent, RidableLocationLastFrame) == 0x0004B8, "Member 'URiderComponent::RidableLocationLastFrame' has a wrong offset!");
static_assert(offsetof(URiderComponent, RestoreCollisionHandle) == 0x0004D8, "Member 'URiderComponent::RestoreCollisionHandle' has a wrong offset!");
static_assert(offsetof(URiderComponent, RidableControlRuntimeData) == 0x0004E0, "Member 'URiderComponent::RidableControlRuntimeData' has a wrong offset!");
static_assert(offsetof(URiderComponent, ClampedController) == 0x000518, "Member 'URiderComponent::ClampedController' has a wrong offset!");

// Class RidingCodeRuntime.ControllingRiderComponent
// 0x0048 (0x05E0 - 0x0598)
class UControllingRiderComponent : public URiderComponent
{
public:
	bool                                          bCanControlRidable;                                // 0x0598(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsControllingRidable;                             // 0x0599(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ERidingControlInputStyle                      ControlInputStyle;                                 // 0x059A(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_59B[0x11];                                     // 0x059B(0x0011)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRidingControlInputState               ReplicatedControlInputState;                       // 0x05AC(0x0010)(Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRidingControlInputStateReliable       ReplicatedControlInputStateReliable;               // 0x05BC(0x0001)(Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_5BD[0x1];                                      // 0x05BD(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRidingControlInputStateUnreliable     ReplicatedControlInputStateUnreliable;             // 0x05BE(0x0004)(Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_5C2[0x6];                                      // 0x05C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortInputComponent*                    ControllingRiderInputComponent;                    // 0x05C8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5D0[0x8];                                      // 0x05D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AutoRunDoubleTapTimestamp;                         // 0x05D8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5DC[0x4];                                      // 0x05DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ControllingActor_OnJumpInput(bool bPressed);
	void ControllingActor_OnMoveForward(float Val);
	void ControllingActor_OnMoveRight(float Val);
	void HandleGamepadRidingAbilityPressed();
	void HandleRidingAbilityPressed();
	void HandleRidingAbilityReleased();
	void OnRep_ControlInputReliable();
	void OnRep_ControlInputUnreliable();
	void OnRep_IsControllingRidable();
	void OnSprintCanceled();
	void ReloadPressed();
	void ServerUpdateControlInputStateReliable(const struct FRidingControlInputStateReliable& InputState);
	void ServerUpdateControlInputStateUnreliable(const struct FRidingControlInputStateUnreliable& InputState);
	void UpdateFromInput(float DeltaTime, const struct FRidingControlInputState& InputState);

	const struct FRidingControlInputState GetControlInputState() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControllingRiderComponent">();
	}
	static class UControllingRiderComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControllingRiderComponent>();
	}
};
static_assert(alignof(UControllingRiderComponent) == 0x000008, "Wrong alignment on UControllingRiderComponent");
static_assert(sizeof(UControllingRiderComponent) == 0x0005E0, "Wrong size on UControllingRiderComponent");
static_assert(offsetof(UControllingRiderComponent, bCanControlRidable) == 0x000598, "Member 'UControllingRiderComponent::bCanControlRidable' has a wrong offset!");
static_assert(offsetof(UControllingRiderComponent, bIsControllingRidable) == 0x000599, "Member 'UControllingRiderComponent::bIsControllingRidable' has a wrong offset!");
static_assert(offsetof(UControllingRiderComponent, ControlInputStyle) == 0x00059A, "Member 'UControllingRiderComponent::ControlInputStyle' has a wrong offset!");
static_assert(offsetof(UControllingRiderComponent, ReplicatedControlInputState) == 0x0005AC, "Member 'UControllingRiderComponent::ReplicatedControlInputState' has a wrong offset!");
static_assert(offsetof(UControllingRiderComponent, ReplicatedControlInputStateReliable) == 0x0005BC, "Member 'UControllingRiderComponent::ReplicatedControlInputStateReliable' has a wrong offset!");
static_assert(offsetof(UControllingRiderComponent, ReplicatedControlInputStateUnreliable) == 0x0005BE, "Member 'UControllingRiderComponent::ReplicatedControlInputStateUnreliable' has a wrong offset!");
static_assert(offsetof(UControllingRiderComponent, ControllingRiderInputComponent) == 0x0005C8, "Member 'UControllingRiderComponent::ControllingRiderInputComponent' has a wrong offset!");
static_assert(offsetof(UControllingRiderComponent, AutoRunDoubleTapTimestamp) == 0x0005D8, "Member 'UControllingRiderComponent::AutoRunDoubleTapTimestamp' has a wrong offset!");

// Class RidingCodeRuntime.FortCameraMode_Riding
// 0x0020 (0x1AD0 - 0x1AB0)
class UFortCameraMode_Riding : public UFortCameraMode_ThirdPerson
{
public:
	struct FVector                                OriginOffset;                                      // 0x1AA8(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AC0[0x10];                                    // 0x1AC0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCameraMode_Riding">();
	}
	static class UFortCameraMode_Riding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCameraMode_Riding>();
	}
};
static_assert(alignof(UFortCameraMode_Riding) == 0x000010, "Wrong alignment on UFortCameraMode_Riding");
static_assert(sizeof(UFortCameraMode_Riding) == 0x001AD0, "Wrong size on UFortCameraMode_Riding");
static_assert(offsetof(UFortCameraMode_Riding, OriginOffset) == 0x001AA8, "Member 'UFortCameraMode_Riding::OriginOffset' has a wrong offset!");

// Class RidingCodeRuntime.FortVehicleLayerAnimInstance_Riding
// 0x0250 (0x0A10 - 0x07C0)
class UFortVehicleLayerAnimInstance_Riding : public UFortVehicleOccupantAnimInstance
{
public:
	struct FCachedAnimRelevancyData               IntoVehicleCachedData;                             // 0x07C0(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FCachedAnimRelevancyData               OutOfVehicleCachedData;                            // 0x07D4(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InTime;                                            // 0x07E8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutTime;                                           // 0x07EC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodyYawOffset;                                     // 0x07F0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7F4[0x4];                                      // 0x07F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               BodyCounterRotation;                               // 0x07F8(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsReloading;                                      // 0x0810(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTargeting;                                      // 0x0811(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFiring;                                         // 0x0812(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUsingConsumable;                                // 0x0813(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInAction;                                       // 0x0814(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsThrowConsumable;                                // 0x0815(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTargetingOrThrowingConsumable;                  // 0x0816(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTurningInPlace;                                 // 0x0817(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRidingSprinting;                                // 0x0818(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_819[0x3];                                      // 0x0819(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TurnInPlaceRotationSpeed;                          // 0x081C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnInPlaceAngleDelta;                             // 0x0820(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRidingMovingBackward;                           // 0x0824(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSlopeSliding;                                   // 0x0825(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_826[0x2];                                      // 0x0826(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SlopeSlidingPitch;                                 // 0x0828(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlopeSlidingRoll;                                  // 0x082C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RiderReferentialRidableYaw;                        // 0x0830(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimYawDegreesCoverage;                             // 0x0834(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmoothedAimYaw;                                    // 0x0838(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bJustEntered;                                      // 0x083C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRidableMoving;                                  // 0x083D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRideMode;                                       // 0x083E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_83F[0x1];                                      // 0x083F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RidableVelocity;                                   // 0x0840(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodyYaw;                                           // 0x0844(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostPlayRate;                                     // 0x0848(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RidingMovePlayRate;                                // 0x084C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FalseBlendTime;                                    // 0x0850(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CombatToRideYaw;                                   // 0x0854(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlaceYaw;                                        // 0x0858(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeadAOAlpha;                                       // 0x085C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               MeleeTwistRot;                                     // 0x0860(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsDualWield;                                      // 0x0878(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOneHandedDualWield;                             // 0x0879(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTwoHandedSword;                                 // 0x087A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldAdjustBodyTwistForMelee;                    // 0x087B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_87C[0x4];                                      // 0x087C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PlayerOffset;                                      // 0x0880(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseAlpha;                                        // 0x0898(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLobsterBlockActive;                             // 0x089C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89D[0x3];                                      // 0x089D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SlopePitch;                                        // 0x08A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A4[0x4];                                      // 0x08A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HandAttachLeft;                                    // 0x08A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HandAttachRight;                                   // 0x08C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandAttachAlpha;                                   // 0x08D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERidingFootPhase                              FootPhase;                                         // 0x08DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFootPhase_FeetInAir;                            // 0x08DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFootPhase_FrontFeetPlanted;                     // 0x08DE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFootPhase_BackFeetPlanted;                      // 0x08DF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFootPhase_LeftBackFeetForward;                  // 0x08E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFootPhase_RightBackFeetForward;                 // 0x08E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFootPhase_LeftPlantedRightPass;                 // 0x08E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFootPhase_RightPlantedLeftPass;                 // 0x08E3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnInPlaceModulatedSpeed;                         // 0x08E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTurnInPlaceAngleDeltaPositive;                  // 0x08E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8E9[0x3];                                      // 0x08E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MovingVelocityLowerBound;                          // 0x08EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JustEnteredDelayTimeSec;                           // 0x08F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FalseBlendTime_Moving;                             // 0x08F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FalseBlendTime_NotMoving;                          // 0x08F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8FC[0x4];                                      // 0x08FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PlayerOffsetMale;                                  // 0x0900(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PlayerOffsetFemale;                                // 0x0918(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ScytheMontage;                                     // 0x0930(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        BRSwordMontage;                                    // 0x0948(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortWeaponCoreAnimation                      MeleeDualWieldCoreAnimation;                       // 0x0960(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_961[0x7];                                      // 0x0961(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SlopePitchTraceStart;                              // 0x0968(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SlopePitchTraceEnd;                                // 0x0980(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HandAttachLocationLeftMale;                        // 0x0998(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HandAttachLocationRightMale;                       // 0x09B0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HandAttachLocationLeftFemale;                      // 0x09C8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HandAttachLocationRightFemale;                     // 0x09E0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerHandAttachLeft;                              // 0x09F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerHandAttachRight;                             // 0x09FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DisableHandAttachCurveName;                        // 0x0A00(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A04[0xC];                                      // 0x0A04(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BlueprintCollectRidableAnimBPData(const class UAnimInstance* RidableAnimInstance);
	void PlaceHandIKTargets();
	void SetFootPhase(const ERidingFootPhase InFootPhase);
	void UpdateBoostPlayRate();
	void UpdateSlopePitchForRiding();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortVehicleLayerAnimInstance_Riding">();
	}
	static class UFortVehicleLayerAnimInstance_Riding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortVehicleLayerAnimInstance_Riding>();
	}
};
static_assert(alignof(UFortVehicleLayerAnimInstance_Riding) == 0x000010, "Wrong alignment on UFortVehicleLayerAnimInstance_Riding");
static_assert(sizeof(UFortVehicleLayerAnimInstance_Riding) == 0x000A10, "Wrong size on UFortVehicleLayerAnimInstance_Riding");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, IntoVehicleCachedData) == 0x0007C0, "Member 'UFortVehicleLayerAnimInstance_Riding::IntoVehicleCachedData' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, OutOfVehicleCachedData) == 0x0007D4, "Member 'UFortVehicleLayerAnimInstance_Riding::OutOfVehicleCachedData' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, InTime) == 0x0007E8, "Member 'UFortVehicleLayerAnimInstance_Riding::InTime' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, OutTime) == 0x0007EC, "Member 'UFortVehicleLayerAnimInstance_Riding::OutTime' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, BodyYawOffset) == 0x0007F0, "Member 'UFortVehicleLayerAnimInstance_Riding::BodyYawOffset' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, BodyCounterRotation) == 0x0007F8, "Member 'UFortVehicleLayerAnimInstance_Riding::BodyCounterRotation' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsReloading) == 0x000810, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsReloading' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsTargeting) == 0x000811, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsTargeting' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsFiring) == 0x000812, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsFiring' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsUsingConsumable) == 0x000813, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsUsingConsumable' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsInAction) == 0x000814, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsInAction' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsThrowConsumable) == 0x000815, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsThrowConsumable' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsTargetingOrThrowingConsumable) == 0x000816, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsTargetingOrThrowingConsumable' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsTurningInPlace) == 0x000817, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsTurningInPlace' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsRidingSprinting) == 0x000818, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsRidingSprinting' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, TurnInPlaceRotationSpeed) == 0x00081C, "Member 'UFortVehicleLayerAnimInstance_Riding::TurnInPlaceRotationSpeed' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, TurnInPlaceAngleDelta) == 0x000820, "Member 'UFortVehicleLayerAnimInstance_Riding::TurnInPlaceAngleDelta' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsRidingMovingBackward) == 0x000824, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsRidingMovingBackward' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsSlopeSliding) == 0x000825, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsSlopeSliding' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, SlopeSlidingPitch) == 0x000828, "Member 'UFortVehicleLayerAnimInstance_Riding::SlopeSlidingPitch' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, SlopeSlidingRoll) == 0x00082C, "Member 'UFortVehicleLayerAnimInstance_Riding::SlopeSlidingRoll' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, RiderReferentialRidableYaw) == 0x000830, "Member 'UFortVehicleLayerAnimInstance_Riding::RiderReferentialRidableYaw' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, AimYawDegreesCoverage) == 0x000834, "Member 'UFortVehicleLayerAnimInstance_Riding::AimYawDegreesCoverage' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, SmoothedAimYaw) == 0x000838, "Member 'UFortVehicleLayerAnimInstance_Riding::SmoothedAimYaw' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bJustEntered) == 0x00083C, "Member 'UFortVehicleLayerAnimInstance_Riding::bJustEntered' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsRidableMoving) == 0x00083D, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsRidableMoving' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsRideMode) == 0x00083E, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsRideMode' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, RidableVelocity) == 0x000840, "Member 'UFortVehicleLayerAnimInstance_Riding::RidableVelocity' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, BodyYaw) == 0x000844, "Member 'UFortVehicleLayerAnimInstance_Riding::BodyYaw' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, BoostPlayRate) == 0x000848, "Member 'UFortVehicleLayerAnimInstance_Riding::BoostPlayRate' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, RidingMovePlayRate) == 0x00084C, "Member 'UFortVehicleLayerAnimInstance_Riding::RidingMovePlayRate' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, FalseBlendTime) == 0x000850, "Member 'UFortVehicleLayerAnimInstance_Riding::FalseBlendTime' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, CombatToRideYaw) == 0x000854, "Member 'UFortVehicleLayerAnimInstance_Riding::CombatToRideYaw' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, InPlaceYaw) == 0x000858, "Member 'UFortVehicleLayerAnimInstance_Riding::InPlaceYaw' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, HeadAOAlpha) == 0x00085C, "Member 'UFortVehicleLayerAnimInstance_Riding::HeadAOAlpha' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, MeleeTwistRot) == 0x000860, "Member 'UFortVehicleLayerAnimInstance_Riding::MeleeTwistRot' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsDualWield) == 0x000878, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsDualWield' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsOneHandedDualWield) == 0x000879, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsOneHandedDualWield' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsTwoHandedSword) == 0x00087A, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsTwoHandedSword' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bShouldAdjustBodyTwistForMelee) == 0x00087B, "Member 'UFortVehicleLayerAnimInstance_Riding::bShouldAdjustBodyTwistForMelee' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, PlayerOffset) == 0x000880, "Member 'UFortVehicleLayerAnimInstance_Riding::PlayerOffset' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, NoiseAlpha) == 0x000898, "Member 'UFortVehicleLayerAnimInstance_Riding::NoiseAlpha' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsLobsterBlockActive) == 0x00089C, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsLobsterBlockActive' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, SlopePitch) == 0x0008A0, "Member 'UFortVehicleLayerAnimInstance_Riding::SlopePitch' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, HandAttachLeft) == 0x0008A8, "Member 'UFortVehicleLayerAnimInstance_Riding::HandAttachLeft' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, HandAttachRight) == 0x0008C0, "Member 'UFortVehicleLayerAnimInstance_Riding::HandAttachRight' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, HandAttachAlpha) == 0x0008D8, "Member 'UFortVehicleLayerAnimInstance_Riding::HandAttachAlpha' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, FootPhase) == 0x0008DC, "Member 'UFortVehicleLayerAnimInstance_Riding::FootPhase' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsFootPhase_FeetInAir) == 0x0008DD, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsFootPhase_FeetInAir' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsFootPhase_FrontFeetPlanted) == 0x0008DE, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsFootPhase_FrontFeetPlanted' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsFootPhase_BackFeetPlanted) == 0x0008DF, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsFootPhase_BackFeetPlanted' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsFootPhase_LeftBackFeetForward) == 0x0008E0, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsFootPhase_LeftBackFeetForward' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsFootPhase_RightBackFeetForward) == 0x0008E1, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsFootPhase_RightBackFeetForward' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsFootPhase_LeftPlantedRightPass) == 0x0008E2, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsFootPhase_LeftPlantedRightPass' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsFootPhase_RightPlantedLeftPass) == 0x0008E3, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsFootPhase_RightPlantedLeftPass' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, TurnInPlaceModulatedSpeed) == 0x0008E4, "Member 'UFortVehicleLayerAnimInstance_Riding::TurnInPlaceModulatedSpeed' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, bIsTurnInPlaceAngleDeltaPositive) == 0x0008E8, "Member 'UFortVehicleLayerAnimInstance_Riding::bIsTurnInPlaceAngleDeltaPositive' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, MovingVelocityLowerBound) == 0x0008EC, "Member 'UFortVehicleLayerAnimInstance_Riding::MovingVelocityLowerBound' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, JustEnteredDelayTimeSec) == 0x0008F0, "Member 'UFortVehicleLayerAnimInstance_Riding::JustEnteredDelayTimeSec' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, FalseBlendTime_Moving) == 0x0008F4, "Member 'UFortVehicleLayerAnimInstance_Riding::FalseBlendTime_Moving' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, FalseBlendTime_NotMoving) == 0x0008F8, "Member 'UFortVehicleLayerAnimInstance_Riding::FalseBlendTime_NotMoving' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, PlayerOffsetMale) == 0x000900, "Member 'UFortVehicleLayerAnimInstance_Riding::PlayerOffsetMale' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, PlayerOffsetFemale) == 0x000918, "Member 'UFortVehicleLayerAnimInstance_Riding::PlayerOffsetFemale' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, ScytheMontage) == 0x000930, "Member 'UFortVehicleLayerAnimInstance_Riding::ScytheMontage' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, BRSwordMontage) == 0x000948, "Member 'UFortVehicleLayerAnimInstance_Riding::BRSwordMontage' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, MeleeDualWieldCoreAnimation) == 0x000960, "Member 'UFortVehicleLayerAnimInstance_Riding::MeleeDualWieldCoreAnimation' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, SlopePitchTraceStart) == 0x000968, "Member 'UFortVehicleLayerAnimInstance_Riding::SlopePitchTraceStart' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, SlopePitchTraceEnd) == 0x000980, "Member 'UFortVehicleLayerAnimInstance_Riding::SlopePitchTraceEnd' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, HandAttachLocationLeftMale) == 0x000998, "Member 'UFortVehicleLayerAnimInstance_Riding::HandAttachLocationLeftMale' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, HandAttachLocationRightMale) == 0x0009B0, "Member 'UFortVehicleLayerAnimInstance_Riding::HandAttachLocationRightMale' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, HandAttachLocationLeftFemale) == 0x0009C8, "Member 'UFortVehicleLayerAnimInstance_Riding::HandAttachLocationLeftFemale' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, HandAttachLocationRightFemale) == 0x0009E0, "Member 'UFortVehicleLayerAnimInstance_Riding::HandAttachLocationRightFemale' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, PlayerHandAttachLeft) == 0x0009F8, "Member 'UFortVehicleLayerAnimInstance_Riding::PlayerHandAttachLeft' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, PlayerHandAttachRight) == 0x0009FC, "Member 'UFortVehicleLayerAnimInstance_Riding::PlayerHandAttachRight' has a wrong offset!");
static_assert(offsetof(UFortVehicleLayerAnimInstance_Riding, DisableHandAttachCurveName) == 0x000A00, "Member 'UFortVehicleLayerAnimInstance_Riding::DisableHandAttachCurveName' has a wrong offset!");

// Class RidingCodeRuntime.RidingAnalytics
// 0x0000 (0x0028 - 0x0028)
class URidingAnalytics final : public UBlueprintFunctionLibrary
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RidingAnalytics">();
	}
	static class URidingAnalytics* GetDefaultObj()
	{
		return GetDefaultObjImpl<URidingAnalytics>();
	}
};
static_assert(alignof(URidingAnalytics) == 0x000008, "Wrong alignment on URidingAnalytics");
static_assert(sizeof(URidingAnalytics) == 0x000028, "Wrong size on URidingAnalytics");

// Class RidingCodeRuntime.RidingCheatManager
// 0x0000 (0x0028 - 0x0028)
class URidingCheatManager final : public UChildCheatManager
{
public:
	void RidingSetStaminaPercent(const float StaminaPercent);
	void StartRidingActor();
	void StopRidingActor();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RidingCheatManager">();
	}
	static class URidingCheatManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<URidingCheatManager>();
	}
};
static_assert(alignof(URidingCheatManager) == 0x000008, "Wrong alignment on URidingCheatManager");
static_assert(sizeof(URidingCheatManager) == 0x000028, "Wrong size on URidingCheatManager");

// Class RidingCodeRuntime.RidingGameStateMutator
// 0x0000 (0x0318 - 0x0318)
class ARidingGameStateMutator final : public AFortAthenaMutator
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RidingGameStateMutator">();
	}
	static class ARidingGameStateMutator* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARidingGameStateMutator>();
	}
};
static_assert(alignof(ARidingGameStateMutator) == 0x000008, "Wrong alignment on ARidingGameStateMutator");
static_assert(sizeof(ARidingGameStateMutator) == 0x000318, "Wrong size on ARidingGameStateMutator");

}

