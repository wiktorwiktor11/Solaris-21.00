#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NevadaRuntime

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum NevadaRuntime.ETractorBeamState
// NumValues: 0x0004
enum class ETractorBeamState : uint8
{
	TBS_Inactive                             = 0,
	TBS_Charging                             = 1,
	TBS_Active                               = 2,
	TBS_MAX                                  = 3,
};

// Enum NevadaRuntime.ENevadaFlightStates
// NumValues: 0x0009
enum class ENevadaFlightStates : uint8
{
	FLIGHT                                   = 0,
	CRASHING                                 = 1,
	CRASHED                                  = 2,
	REBOOTING                                = 3,
	LANDING                                  = 4,
	LANDED                                   = 5,
	IDLE                                     = 6,
	NONE                                     = 7,
	ENevadaFlightStates_MAX                  = 8,
};

// ScriptStruct NevadaRuntime.NevadaAudioUpdateContext
// 0x0001 (0x0001 - 0x0000)
struct FNevadaAudioUpdateContext final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNevadaAudioUpdateContext) == 0x000001, "Wrong alignment on FNevadaAudioUpdateContext");
static_assert(sizeof(FNevadaAudioUpdateContext) == 0x000001, "Wrong size on FNevadaAudioUpdateContext");

// ScriptStruct NevadaRuntime.NevadaOutContinuous
// 0x0008 (0x0040 - 0x0038)
struct FNevadaOutContinuous final : public FFortVehicleOutContinuous
{
public:
	float                                         AltimeterTraceHitDistance;                         // 0x0038(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TractorBeamAppliedForceMagnitude;                  // 0x003C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNevadaOutContinuous) == 0x000008, "Wrong alignment on FNevadaOutContinuous");
static_assert(sizeof(FNevadaOutContinuous) == 0x000040, "Wrong size on FNevadaOutContinuous");
static_assert(offsetof(FNevadaOutContinuous, AltimeterTraceHitDistance) == 0x000038, "Member 'FNevadaOutContinuous::AltimeterTraceHitDistance' has a wrong offset!");
static_assert(offsetof(FNevadaOutContinuous, TractorBeamAppliedForceMagnitude) == 0x00003C, "Member 'FNevadaOutContinuous::TractorBeamAppliedForceMagnitude' has a wrong offset!");

// ScriptStruct NevadaRuntime.NevadaOutPersistent
// 0x0420 (0x0430 - 0x0010)
struct FNevadaOutPersistent final : public FFortVehicleOutPersistent
{
public:
	uint8                                         Pad_10[0x420];                                     // 0x0010(0x0420)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNevadaOutPersistent) == 0x000008, "Wrong alignment on FNevadaOutPersistent");
static_assert(sizeof(FNevadaOutPersistent) == 0x000430, "Wrong size on FNevadaOutPersistent");

// ScriptStruct NevadaRuntime.NevadaState
// 0x0014 (0x0014 - 0x0000)
struct FNevadaState final
{
public:
	ENevadaFlightStates                           CurrentStatus;                                     // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LivesRemaining;                                    // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHijackingActive;                                  // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPilotBubbleCollisionEnabled;                      // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentBatteryCharge;                              // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCannonEnabled;                                    // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTractorBeamEnabled;                               // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNevadaState) == 0x000004, "Wrong alignment on FNevadaState");
static_assert(sizeof(FNevadaState) == 0x000014, "Wrong size on FNevadaState");
static_assert(offsetof(FNevadaState, CurrentStatus) == 0x000000, "Member 'FNevadaState::CurrentStatus' has a wrong offset!");
static_assert(offsetof(FNevadaState, LivesRemaining) == 0x000004, "Member 'FNevadaState::LivesRemaining' has a wrong offset!");
static_assert(offsetof(FNevadaState, bHijackingActive) == 0x000008, "Member 'FNevadaState::bHijackingActive' has a wrong offset!");
static_assert(offsetof(FNevadaState, bPilotBubbleCollisionEnabled) == 0x000009, "Member 'FNevadaState::bPilotBubbleCollisionEnabled' has a wrong offset!");
static_assert(offsetof(FNevadaState, CurrentBatteryCharge) == 0x00000C, "Member 'FNevadaState::CurrentBatteryCharge' has a wrong offset!");
static_assert(offsetof(FNevadaState, bCannonEnabled) == 0x000010, "Member 'FNevadaState::bCannonEnabled' has a wrong offset!");
static_assert(offsetof(FNevadaState, bTractorBeamEnabled) == 0x000011, "Member 'FNevadaState::bTractorBeamEnabled' has a wrong offset!");

// ScriptStruct NevadaRuntime.NevadaMoveModeConfig
// 0x0014 (0x0014 - 0x0000)
struct FNevadaMoveModeConfig final
{
public:
	float                                         ThrustForce;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LiftForce;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHorizontalSpeed;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxVerticalSpeed;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragForceMultiplier;                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNevadaMoveModeConfig) == 0x000004, "Wrong alignment on FNevadaMoveModeConfig");
static_assert(sizeof(FNevadaMoveModeConfig) == 0x000014, "Wrong size on FNevadaMoveModeConfig");
static_assert(offsetof(FNevadaMoveModeConfig, ThrustForce) == 0x000000, "Member 'FNevadaMoveModeConfig::ThrustForce' has a wrong offset!");
static_assert(offsetof(FNevadaMoveModeConfig, LiftForce) == 0x000004, "Member 'FNevadaMoveModeConfig::LiftForce' has a wrong offset!");
static_assert(offsetof(FNevadaMoveModeConfig, MaxHorizontalSpeed) == 0x000008, "Member 'FNevadaMoveModeConfig::MaxHorizontalSpeed' has a wrong offset!");
static_assert(offsetof(FNevadaMoveModeConfig, MaxVerticalSpeed) == 0x00000C, "Member 'FNevadaMoveModeConfig::MaxVerticalSpeed' has a wrong offset!");
static_assert(offsetof(FNevadaMoveModeConfig, DragForceMultiplier) == 0x000010, "Member 'FNevadaMoveModeConfig::DragForceMultiplier' has a wrong offset!");

// ScriptStruct NevadaRuntime.DampedSpringConfig
// 0x000C (0x000C - 0x0000)
struct FDampedSpringConfig final
{
public:
	float                                         Stiffness;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damping;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAccel;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDampedSpringConfig) == 0x000004, "Wrong alignment on FDampedSpringConfig");
static_assert(sizeof(FDampedSpringConfig) == 0x00000C, "Wrong size on FDampedSpringConfig");
static_assert(offsetof(FDampedSpringConfig, Stiffness) == 0x000000, "Member 'FDampedSpringConfig::Stiffness' has a wrong offset!");
static_assert(offsetof(FDampedSpringConfig, Damping) == 0x000004, "Member 'FDampedSpringConfig::Damping' has a wrong offset!");
static_assert(offsetof(FDampedSpringConfig, MaxAccel) == 0x000008, "Member 'FDampedSpringConfig::MaxAccel' has a wrong offset!");

// ScriptStruct NevadaRuntime.NevadaInPersistent
// 0x0110 (0x0280 - 0x0170)
struct FNevadaInPersistent final : public FFortVehicleInPersistent
{
public:
	class UFortNevadaVehicleConfigs*              FortNevadaVehicleConfigs;                          // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBoostThrust;                                      // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBoostDrag;                                        // 0x0179(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17A[0x2];                                      // 0x017A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TractorBeamExtraLengthForExtents;                  // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTractorBeamUprightForce;                       // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_181[0x7];                                      // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CrashingDesiredUp;                                 // 0x0188(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENevadaFlightStates                           CurrentVehicleState;                               // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A1[0xDF];                                     // 0x01A1(0x00DF)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNevadaInPersistent) == 0x000008, "Wrong alignment on FNevadaInPersistent");
static_assert(sizeof(FNevadaInPersistent) == 0x000280, "Wrong size on FNevadaInPersistent");
static_assert(offsetof(FNevadaInPersistent, FortNevadaVehicleConfigs) == 0x000170, "Member 'FNevadaInPersistent::FortNevadaVehicleConfigs' has a wrong offset!");
static_assert(offsetof(FNevadaInPersistent, bBoostThrust) == 0x000178, "Member 'FNevadaInPersistent::bBoostThrust' has a wrong offset!");
static_assert(offsetof(FNevadaInPersistent, bBoostDrag) == 0x000179, "Member 'FNevadaInPersistent::bBoostDrag' has a wrong offset!");
static_assert(offsetof(FNevadaInPersistent, TractorBeamExtraLengthForExtents) == 0x00017C, "Member 'FNevadaInPersistent::TractorBeamExtraLengthForExtents' has a wrong offset!");
static_assert(offsetof(FNevadaInPersistent, bUseTractorBeamUprightForce) == 0x000180, "Member 'FNevadaInPersistent::bUseTractorBeamUprightForce' has a wrong offset!");
static_assert(offsetof(FNevadaInPersistent, CrashingDesiredUp) == 0x000188, "Member 'FNevadaInPersistent::CrashingDesiredUp' has a wrong offset!");
static_assert(offsetof(FNevadaInPersistent, CurrentVehicleState) == 0x0001A0, "Member 'FNevadaInPersistent::CurrentVehicleState' has a wrong offset!");

}

