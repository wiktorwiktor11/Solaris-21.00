#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EntityCore

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum EntityCore.EMovementType
// NumValues: 0x0004
enum class EMovementType : uint8
{
	SweepPhysics                             = 0,
	TeleportPhysics                          = 1,
	ResetPhysics                             = 2,
	EMovementType_MAX                        = 3,
};

// Enum EntityCore.EScriptDiagnosticMessageType
// NumValues: 0x0007
enum class EScriptDiagnosticMessageType : uint8
{
	Debug                                    = 0,
	Verbose                                  = 1,
	Normal                                   = 2,
	Warning                                  = 3,
	Error                                    = 4,
	Fatal                                    = 5,
	EScriptDiagnosticMessageType_MAX         = 6,
};

// ScriptStruct EntityCore.EntityComponentContainer
// 0x0010 (0x0010 - 0x0000)
struct FEntityComponentContainer final
{
public:
	TArray<class UEntityComponent*>               Array;                                             // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEntityComponentContainer) == 0x000008, "Wrong alignment on FEntityComponentContainer");
static_assert(sizeof(FEntityComponentContainer) == 0x000010, "Wrong size on FEntityComponentContainer");
static_assert(offsetof(FEntityComponentContainer, Array) == 0x000000, "Member 'FEntityComponentContainer::Array' has a wrong offset!");

// ScriptStruct EntityCore.ComponentData
// 0x0000 (0x0000 - 0x0000)
#pragma pack(push, 0x1)
struct alignas(0x01) FComponentData
{
};
#pragma pack(pop)
static_assert(alignof(FComponentData) == 0x000001, "Wrong alignment on FComponentData");
static_assert(sizeof(FComponentData) == 0x000001, "Wrong size on FComponentData");

// ScriptStruct EntityCore.EntityPositionComponentData
// 0x0018 (0x0018 - 0x0000)
struct FEntityPositionComponentData final : public FComponentData
{
public:
	struct FVector                                WorldPosition;                                     // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEntityPositionComponentData) == 0x000008, "Wrong alignment on FEntityPositionComponentData");
static_assert(sizeof(FEntityPositionComponentData) == 0x000018, "Wrong size on FEntityPositionComponentData");
static_assert(offsetof(FEntityPositionComponentData, WorldPosition) == 0x000000, "Member 'FEntityPositionComponentData::WorldPosition' has a wrong offset!");

// ScriptStruct EntityCore.EntityRotationComponentData
// 0x0018 (0x0018 - 0x0000)
struct FEntityRotationComponentData final : public FComponentData
{
public:
	struct FRotator                               WorldRotation;                                     // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEntityRotationComponentData) == 0x000008, "Wrong alignment on FEntityRotationComponentData");
static_assert(sizeof(FEntityRotationComponentData) == 0x000018, "Wrong size on FEntityRotationComponentData");
static_assert(offsetof(FEntityRotationComponentData, WorldRotation) == 0x000000, "Member 'FEntityRotationComponentData::WorldRotation' has a wrong offset!");

// ScriptStruct EntityCore.EntityScaleComponentData
// 0x0018 (0x0018 - 0x0000)
struct FEntityScaleComponentData final : public FComponentData
{
public:
	struct FVector                                WorldScale3D;                                      // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEntityScaleComponentData) == 0x000008, "Wrong alignment on FEntityScaleComponentData");
static_assert(sizeof(FEntityScaleComponentData) == 0x000018, "Wrong size on FEntityScaleComponentData");
static_assert(offsetof(FEntityScaleComponentData, WorldScale3D) == 0x000000, "Member 'FEntityScaleComponentData::WorldScale3D' has a wrong offset!");

// ScriptStruct EntityCore.EntityCoreSystemRelativePositionComponentData
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FEntityCoreSystemRelativePositionComponentData final : public FComponentData
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEntityCoreSystemRelativePositionComponentData) == 0x000008, "Wrong alignment on FEntityCoreSystemRelativePositionComponentData");
static_assert(sizeof(FEntityCoreSystemRelativePositionComponentData) == 0x000020, "Wrong size on FEntityCoreSystemRelativePositionComponentData");

// ScriptStruct EntityCore.EntityTickFunction
// 0x0008 (0x0030 - 0x0028)
struct FEntityTickFunction final : public FTickFunction
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEntityTickFunction) == 0x000008, "Wrong alignment on FEntityTickFunction");
static_assert(sizeof(FEntityTickFunction) == 0x000030, "Wrong size on FEntityTickFunction");

// ScriptStruct EntityCore.ScriptDiagnosticSourceLocation
// 0x0020 (0x0020 - 0x0000)
struct FScriptDiagnosticSourceLocation final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              RowSpan;                                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              ColSpan;                                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FScriptDiagnosticSourceLocation) == 0x000008, "Wrong alignment on FScriptDiagnosticSourceLocation");
static_assert(sizeof(FScriptDiagnosticSourceLocation) == 0x000020, "Wrong size on FScriptDiagnosticSourceLocation");
static_assert(offsetof(FScriptDiagnosticSourceLocation, FilePath) == 0x000000, "Member 'FScriptDiagnosticSourceLocation::FilePath' has a wrong offset!");
static_assert(offsetof(FScriptDiagnosticSourceLocation, RowSpan) == 0x000010, "Member 'FScriptDiagnosticSourceLocation::RowSpan' has a wrong offset!");
static_assert(offsetof(FScriptDiagnosticSourceLocation, ColSpan) == 0x000018, "Member 'FScriptDiagnosticSourceLocation::ColSpan' has a wrong offset!");

// ScriptStruct EntityCore.ScriptDiagnosticMessage
// 0x0058 (0x0058 - 0x0000)
struct FScriptDiagnosticMessage final
{
public:
	EScriptDiagnosticMessageType                  MessageType;                                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Timestamp;                                         // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Channel;                                           // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   MessageStr;                                        // 0x0020(0x0018)(NativeAccessSpecifierPublic)
	struct FScriptDiagnosticSourceLocation        SourceLocation;                                    // 0x0038(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FScriptDiagnosticMessage) == 0x000008, "Wrong alignment on FScriptDiagnosticMessage");
static_assert(sizeof(FScriptDiagnosticMessage) == 0x000058, "Wrong size on FScriptDiagnosticMessage");
static_assert(offsetof(FScriptDiagnosticMessage, MessageType) == 0x000000, "Member 'FScriptDiagnosticMessage::MessageType' has a wrong offset!");
static_assert(offsetof(FScriptDiagnosticMessage, Timestamp) == 0x000008, "Member 'FScriptDiagnosticMessage::Timestamp' has a wrong offset!");
static_assert(offsetof(FScriptDiagnosticMessage, Channel) == 0x000010, "Member 'FScriptDiagnosticMessage::Channel' has a wrong offset!");
static_assert(offsetof(FScriptDiagnosticMessage, MessageStr) == 0x000020, "Member 'FScriptDiagnosticMessage::MessageStr' has a wrong offset!");
static_assert(offsetof(FScriptDiagnosticMessage, SourceLocation) == 0x000038, "Member 'FScriptDiagnosticMessage::SourceLocation' has a wrong offset!");

}

