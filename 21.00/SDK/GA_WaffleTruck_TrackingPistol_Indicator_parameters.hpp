#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_WaffleTruck_TrackingPistol_Indicator

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function GA_WaffleTruck_TrackingPistol_Indicator.GA_WaffleTruck_TrackingPistol_Indicator_C.ExecuteUbergraph_GA_WaffleTruck_TrackingPistol_Indicator
// 0x0240 (0x0240 - 0x0000)
struct GA_WaffleTruck_TrackingPistol_Indicator_C_ExecuteUbergraph_GA_WaffleTruck_TrackingPistol_Indicator final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  CallFunc_GetAvatarAsFortPlayerController_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponent_ReturnValue;    // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEventData                     K2Node_Event_EventData;                            // 0x0038(0x00B0)(ConstParm)
	TArray<class AActor*>                         CallFunc_GetHitActorsFromEventData_ReturnValue;    // 0x00E8(0x0010)(ReferenceParm)
	bool                                          CallFunc_IsDamgeFromSourceWeapon_ReturnValue;      // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawnAthena*                  K2Node_DynamicCast_AsFort_Player_Pawn_Athena;      // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIndicatedActorParticleSystemData      CallFunc_MakeIndicatedActorParticleSystemData_ReturnValue; // 0x0120(0x0048)(NoDestructor)
	struct FIndicatedActorData                    CallFunc_MakeIndicatedActorData_ReturnValue;       // 0x0168(0x00D8)(ContainsInstancedReference)
};
static_assert(alignof(GA_WaffleTruck_TrackingPistol_Indicator_C_ExecuteUbergraph_GA_WaffleTruck_TrackingPistol_Indicator) == 0x000008, "Wrong alignment on GA_WaffleTruck_TrackingPistol_Indicator_C_ExecuteUbergraph_GA_WaffleTruck_TrackingPistol_Indicator");
static_assert(sizeof(GA_WaffleTruck_TrackingPistol_Indicator_C_ExecuteUbergraph_GA_WaffleTruck_TrackingPistol_Indicator) == 0x000240, "Wrong size on GA_WaffleTruck_TrackingPistol_Indicator_C_ExecuteUbergraph_GA_WaffleTruck_TrackingPistol_Indicator");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_ExecuteUbergraph_GA_WaffleTruck_TrackingPistol_Indicator, EntryPoint) == 0x000000, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_ExecuteUbergraph_GA_WaffleTruck_TrackingPistol_Indicator::EntryPoint' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_ExecuteUbergraph_GA_WaffleTruck_TrackingPistol_Indicator, CallFunc_GetAvatarAsFortPlayerController_ReturnValue) == 0x000008, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_ExecuteUbergraph_GA_WaffleTruck_TrackingPistol_Indicator::CallFunc_GetAvatarAsFortPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_ExecuteUbergraph_GA_WaffleTruck_TrackingPistol_Indicator, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000010, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_ExecuteUbergraph_GA_WaffleTruck_TrackingPistol_Indicator::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_ExecuteUbergraph_GA_WaffleTruck_TrackingPistol_Indicator, CallFunc_GetAbilitySystemComponent_ReturnValue) == 0x000028, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_ExecuteUbergraph_GA_WaffleTruck_TrackingPistol_Indicator::CallFunc_GetAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_ExecuteUbergraph_GA_WaffleTruck_TrackingPistol_Indicator, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_ExecuteUbergraph_GA_WaffleTruck_TrackingPistol_Indicator::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_ExecuteUbergraph_GA_WaffleTruck_TrackingPistol_Indicator, K2Node_Event_EventData) == 0x000038, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_ExecuteUbergraph_GA_WaffleTruck_TrackingPistol_Indicator::K2Node_Event_EventData' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_ExecuteUbergraph_GA_WaffleTruck_TrackingPistol_Indicator, CallFunc_GetHitActorsFromEventData_ReturnValue) == 0x0000E8, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_ExecuteUbergraph_GA_WaffleTruck_TrackingPistol_Indicator::CallFunc_GetHitActorsFromEventData_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_ExecuteUbergraph_GA_WaffleTruck_TrackingPistol_Indicator, CallFunc_IsDamgeFromSourceWeapon_ReturnValue) == 0x0000F8, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_ExecuteUbergraph_GA_WaffleTruck_TrackingPistol_Indicator::CallFunc_IsDamgeFromSourceWeapon_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_ExecuteUbergraph_GA_WaffleTruck_TrackingPistol_Indicator, CallFunc_Array_Length_ReturnValue) == 0x0000FC, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_ExecuteUbergraph_GA_WaffleTruck_TrackingPistol_Indicator::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_ExecuteUbergraph_GA_WaffleTruck_TrackingPistol_Indicator, CallFunc_Greater_IntInt_ReturnValue) == 0x000100, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_ExecuteUbergraph_GA_WaffleTruck_TrackingPistol_Indicator::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_ExecuteUbergraph_GA_WaffleTruck_TrackingPistol_Indicator, CallFunc_Array_Get_Item) == 0x000108, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_ExecuteUbergraph_GA_WaffleTruck_TrackingPistol_Indicator::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_ExecuteUbergraph_GA_WaffleTruck_TrackingPistol_Indicator, K2Node_DynamicCast_AsFort_Player_Pawn_Athena) == 0x000110, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_ExecuteUbergraph_GA_WaffleTruck_TrackingPistol_Indicator::K2Node_DynamicCast_AsFort_Player_Pawn_Athena' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_ExecuteUbergraph_GA_WaffleTruck_TrackingPistol_Indicator, K2Node_DynamicCast_bSuccess) == 0x000118, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_ExecuteUbergraph_GA_WaffleTruck_TrackingPistol_Indicator::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_ExecuteUbergraph_GA_WaffleTruck_TrackingPistol_Indicator, CallFunc_MakeIndicatedActorParticleSystemData_ReturnValue) == 0x000120, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_ExecuteUbergraph_GA_WaffleTruck_TrackingPistol_Indicator::CallFunc_MakeIndicatedActorParticleSystemData_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_ExecuteUbergraph_GA_WaffleTruck_TrackingPistol_Indicator, CallFunc_MakeIndicatedActorData_ReturnValue) == 0x000168, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_ExecuteUbergraph_GA_WaffleTruck_TrackingPistol_Indicator::CallFunc_MakeIndicatedActorData_ReturnValue' has a wrong offset!");

// Function GA_WaffleTruck_TrackingPistol_Indicator.GA_WaffleTruck_TrackingPistol_Indicator_C.GetAvatarAsFortPawn
// 0x0020 (0x0020 - 0x0000)
struct GA_WaffleTruck_TrackingPistol_Indicator_C_GetAvatarAsFortPawn final
{
public:
	class AFortPawn*                              AsFort_Pawn;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue;  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPawn*                              K2Node_DynamicCast_AsFort_Pawn;                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_WaffleTruck_TrackingPistol_Indicator_C_GetAvatarAsFortPawn) == 0x000008, "Wrong alignment on GA_WaffleTruck_TrackingPistol_Indicator_C_GetAvatarAsFortPawn");
static_assert(sizeof(GA_WaffleTruck_TrackingPistol_Indicator_C_GetAvatarAsFortPawn) == 0x000020, "Wrong size on GA_WaffleTruck_TrackingPistol_Indicator_C_GetAvatarAsFortPawn");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_GetAvatarAsFortPawn, AsFort_Pawn) == 0x000000, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_GetAvatarAsFortPawn::AsFort_Pawn' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_GetAvatarAsFortPawn, CallFunc_GetAvatarActorFromActorInfo_ReturnValue) == 0x000008, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_GetAvatarAsFortPawn::CallFunc_GetAvatarActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_GetAvatarAsFortPawn, K2Node_DynamicCast_AsFort_Pawn) == 0x000010, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_GetAvatarAsFortPawn::K2Node_DynamicCast_AsFort_Pawn' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_GetAvatarAsFortPawn, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_GetAvatarAsFortPawn::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function GA_WaffleTruck_TrackingPistol_Indicator.GA_WaffleTruck_TrackingPistol_Indicator_C.GetAvatarAsFortPlayerController
// 0x0028 (0x0028 - 0x0000)
struct GA_WaffleTruck_TrackingPistol_Indicator_C_GetAvatarAsFortPlayerController final
{
public:
	class AFortPlayerController*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortGetPlayerPawnExecutions                  CallFunc_GetAvatarAsValidFortPlayerPawn_OutExec;   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        CallFunc_GetAvatarAsValidFortPlayerPawn_OutFortPlayerPawn; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerController*                  CallFunc_GetFortPlayerControllerFromActor_ReturnValue; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_WaffleTruck_TrackingPistol_Indicator_C_GetAvatarAsFortPlayerController) == 0x000008, "Wrong alignment on GA_WaffleTruck_TrackingPistol_Indicator_C_GetAvatarAsFortPlayerController");
static_assert(sizeof(GA_WaffleTruck_TrackingPistol_Indicator_C_GetAvatarAsFortPlayerController) == 0x000028, "Wrong size on GA_WaffleTruck_TrackingPistol_Indicator_C_GetAvatarAsFortPlayerController");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_GetAvatarAsFortPlayerController, ReturnValue) == 0x000000, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_GetAvatarAsFortPlayerController::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_GetAvatarAsFortPlayerController, CallFunc_GetAvatarAsValidFortPlayerPawn_OutExec) == 0x000008, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_GetAvatarAsFortPlayerController::CallFunc_GetAvatarAsValidFortPlayerPawn_OutExec' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_GetAvatarAsFortPlayerController, CallFunc_GetAvatarAsValidFortPlayerPawn_OutFortPlayerPawn) == 0x000010, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_GetAvatarAsFortPlayerController::CallFunc_GetAvatarAsValidFortPlayerPawn_OutFortPlayerPawn' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_GetAvatarAsFortPlayerController, CallFunc_GetFortPlayerControllerFromActor_ReturnValue) == 0x000018, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_GetAvatarAsFortPlayerController::CallFunc_GetFortPlayerControllerFromActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_GetAvatarAsFortPlayerController, K2Node_SwitchEnum_CmpSuccess) == 0x000020, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_GetAvatarAsFortPlayerController::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_GetAvatarAsFortPlayerController, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_GetAvatarAsFortPlayerController::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function GA_WaffleTruck_TrackingPistol_Indicator.GA_WaffleTruck_TrackingPistol_Indicator_C.GetHitActorsFromEventData
// 0x00F0 (0x00F0 - 0x0000)
struct GA_WaffleTruck_TrackingPistol_Indicator_C_GetHitActorsFromEventData final
{
public:
	struct FGameplayEventData                     GameplayEventData;                                 // 0x0000(0x00B0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<class AActor*>                         ReturnValue;                                       // 0x00B0(0x0010)(Parm, OutParm, ReturnParm)
	class AActor*                                 LocalTarget;                                       // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerController*                  CallFunc_GetAvatarAsFortPlayerController_ReturnValue; // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x00D8(0x0010)(ReferenceParm)
	bool                                          CallFunc_IsPawnAndNotFriendly_ReturnValue;         // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_WaffleTruck_TrackingPistol_Indicator_C_GetHitActorsFromEventData) == 0x000008, "Wrong alignment on GA_WaffleTruck_TrackingPistol_Indicator_C_GetHitActorsFromEventData");
static_assert(sizeof(GA_WaffleTruck_TrackingPistol_Indicator_C_GetHitActorsFromEventData) == 0x0000F0, "Wrong size on GA_WaffleTruck_TrackingPistol_Indicator_C_GetHitActorsFromEventData");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_GetHitActorsFromEventData, GameplayEventData) == 0x000000, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_GetHitActorsFromEventData::GameplayEventData' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_GetHitActorsFromEventData, ReturnValue) == 0x0000B0, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_GetHitActorsFromEventData::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_GetHitActorsFromEventData, LocalTarget) == 0x0000C0, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_GetHitActorsFromEventData::LocalTarget' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_GetHitActorsFromEventData, CallFunc_GetAvatarAsFortPlayerController_ReturnValue) == 0x0000C8, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_GetHitActorsFromEventData::CallFunc_GetAvatarAsFortPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_GetHitActorsFromEventData, CallFunc_IsValid_ReturnValue) == 0x0000D0, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_GetHitActorsFromEventData::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_GetHitActorsFromEventData, K2Node_MakeArray_Array) == 0x0000D8, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_GetHitActorsFromEventData::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_GetHitActorsFromEventData, CallFunc_IsPawnAndNotFriendly_ReturnValue) == 0x0000E8, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_GetHitActorsFromEventData::CallFunc_IsPawnAndNotFriendly_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_GetHitActorsFromEventData, CallFunc_IsValid_ReturnValue_1) == 0x0000E9, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_GetHitActorsFromEventData::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function GA_WaffleTruck_TrackingPistol_Indicator.GA_WaffleTruck_TrackingPistol_Indicator_C.IsDamgeFromSourceWeapon
// 0x00D0 (0x00D0 - 0x0000)
struct GA_WaffleTruck_TrackingPistol_Indicator_C_IsDamgeFromSourceWeapon final
{
public:
	struct FGameplayEventData                     GameplayEventData;                                 // 0x0000(0x00B0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPawn*                              CallFunc_GetAvatarAsFortPawn_AsFort_Pawn;          // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_EffectContextGetSourceObject_ReturnValue; // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_WaffleTruck_TrackingPistol_Indicator_C_IsDamgeFromSourceWeapon) == 0x000008, "Wrong alignment on GA_WaffleTruck_TrackingPistol_Indicator_C_IsDamgeFromSourceWeapon");
static_assert(sizeof(GA_WaffleTruck_TrackingPistol_Indicator_C_IsDamgeFromSourceWeapon) == 0x0000D0, "Wrong size on GA_WaffleTruck_TrackingPistol_Indicator_C_IsDamgeFromSourceWeapon");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_IsDamgeFromSourceWeapon, GameplayEventData) == 0x000000, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_IsDamgeFromSourceWeapon::GameplayEventData' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_IsDamgeFromSourceWeapon, ReturnValue) == 0x0000B0, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_IsDamgeFromSourceWeapon::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_IsDamgeFromSourceWeapon, CallFunc_GetAvatarAsFortPawn_AsFort_Pawn) == 0x0000B8, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_IsDamgeFromSourceWeapon::CallFunc_GetAvatarAsFortPawn_AsFort_Pawn' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_IsDamgeFromSourceWeapon, CallFunc_EffectContextGetSourceObject_ReturnValue) == 0x0000C0, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_IsDamgeFromSourceWeapon::CallFunc_EffectContextGetSourceObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_IsDamgeFromSourceWeapon, CallFunc_IsValid_ReturnValue) == 0x0000C8, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_IsDamgeFromSourceWeapon::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_IsDamgeFromSourceWeapon, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0000C9, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_IsDamgeFromSourceWeapon::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function GA_WaffleTruck_TrackingPistol_Indicator.GA_WaffleTruck_TrackingPistol_Indicator_C.IsPawnAndNotFriendly
// 0x0028 (0x0028 - 0x0000)
struct GA_WaffleTruck_TrackingPistol_Indicator_C_IsPawnAndNotFriendly final
{
public:
	const class AActor*                           OwningController;                                  // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class AActor*                           HitActor;                                          // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortTeamAffiliation                          CallFunc_GetTeamAffiliation_ReturnValue;           // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        K2Node_DynamicCast_AsFort_Player_Pawn;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_WaffleTruck_TrackingPistol_Indicator_C_IsPawnAndNotFriendly) == 0x000008, "Wrong alignment on GA_WaffleTruck_TrackingPistol_Indicator_C_IsPawnAndNotFriendly");
static_assert(sizeof(GA_WaffleTruck_TrackingPistol_Indicator_C_IsPawnAndNotFriendly) == 0x000028, "Wrong size on GA_WaffleTruck_TrackingPistol_Indicator_C_IsPawnAndNotFriendly");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_IsPawnAndNotFriendly, OwningController) == 0x000000, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_IsPawnAndNotFriendly::OwningController' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_IsPawnAndNotFriendly, HitActor) == 0x000008, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_IsPawnAndNotFriendly::HitActor' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_IsPawnAndNotFriendly, ReturnValue) == 0x000010, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_IsPawnAndNotFriendly::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_IsPawnAndNotFriendly, CallFunc_GetTeamAffiliation_ReturnValue) == 0x000011, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_IsPawnAndNotFriendly::CallFunc_GetTeamAffiliation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_IsPawnAndNotFriendly, K2Node_DynamicCast_AsFort_Player_Pawn) == 0x000018, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_IsPawnAndNotFriendly::K2Node_DynamicCast_AsFort_Player_Pawn' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_IsPawnAndNotFriendly, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_IsPawnAndNotFriendly::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_IsPawnAndNotFriendly, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000021, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_IsPawnAndNotFriendly::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_IsPawnAndNotFriendly, CallFunc_BooleanAND_ReturnValue) == 0x000022, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_IsPawnAndNotFriendly::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function GA_WaffleTruck_TrackingPistol_Indicator.GA_WaffleTruck_TrackingPistol_Indicator_C.K2_ActivateAbilityFromEvent
// 0x00B0 (0x00B0 - 0x0000)
struct GA_WaffleTruck_TrackingPistol_Indicator_C_K2_ActivateAbilityFromEvent final
{
public:
	struct FGameplayEventData                     EventData;                                         // 0x0000(0x00B0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(GA_WaffleTruck_TrackingPistol_Indicator_C_K2_ActivateAbilityFromEvent) == 0x000008, "Wrong alignment on GA_WaffleTruck_TrackingPistol_Indicator_C_K2_ActivateAbilityFromEvent");
static_assert(sizeof(GA_WaffleTruck_TrackingPistol_Indicator_C_K2_ActivateAbilityFromEvent) == 0x0000B0, "Wrong size on GA_WaffleTruck_TrackingPistol_Indicator_C_K2_ActivateAbilityFromEvent");
static_assert(offsetof(GA_WaffleTruck_TrackingPistol_Indicator_C_K2_ActivateAbilityFromEvent, EventData) == 0x000000, "Member 'GA_WaffleTruck_TrackingPistol_Indicator_C_K2_ActivateAbilityFromEvent::EventData' has a wrong offset!");

}

