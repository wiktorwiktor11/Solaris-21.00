#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: XpMatchProgression

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "CommonUI_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass XpMatchProgression.XpMatchProgression_C
// 0x0050 (0x0330 - 0x02E0)
class UXpMatchProgression_C final : public UCommonUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USmallLevelUpReward_C*                  LevelUpReward;                                     // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAthenaPlayerLevel_C*                   PlayerLevelBar;                                    // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonNumericTextBlock*                TotalScore;                                        // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonNumericTextBlock*                TotalXp;                                           // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UXpReasonFeed_C*                        XpReasonFeed;                                      // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TArray<struct FAthenaMatchXpReward>           XpRewards;                                         // 0x0310(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         XpRewardIndex;                                     // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayingLeveling;                                   // 0x0324(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_325[0x3];                                      // 0x0325(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAthenaPlayerMatchReport*               Report;                                            // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__PlayerLevelBar_K2Node_ComponentBoundEvent_3_LevelChanged__DelegateSignature(int32 Level);
	void Destruct();
	void ExecuteUbergraph_XpMatchProgression(int32 EntryPoint);
	void Finished_Playing_Animation();
	bool IsReadyForNextXpEvent();
	void Play_Xp_Rewards(class UAthenaPlayerMatchReport* Report_0);
	void SetPlayerState(class AFortPlayerControllerAthena* PlayerController, const struct FAthenaLevelInfo& AthenaLevelInfo);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void TickRewardAnimation();
	void UpdateRewardForLevel(int32 SeasonLevel);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"XpMatchProgression_C">();
	}
	static class UXpMatchProgression_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UXpMatchProgression_C>();
	}
};
static_assert(alignof(UXpMatchProgression_C) == 0x000008, "Wrong alignment on UXpMatchProgression_C");
static_assert(sizeof(UXpMatchProgression_C) == 0x000330, "Wrong size on UXpMatchProgression_C");
static_assert(offsetof(UXpMatchProgression_C, UberGraphFrame) == 0x0002E0, "Member 'UXpMatchProgression_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UXpMatchProgression_C, LevelUpReward) == 0x0002E8, "Member 'UXpMatchProgression_C::LevelUpReward' has a wrong offset!");
static_assert(offsetof(UXpMatchProgression_C, PlayerLevelBar) == 0x0002F0, "Member 'UXpMatchProgression_C::PlayerLevelBar' has a wrong offset!");
static_assert(offsetof(UXpMatchProgression_C, TotalScore) == 0x0002F8, "Member 'UXpMatchProgression_C::TotalScore' has a wrong offset!");
static_assert(offsetof(UXpMatchProgression_C, TotalXp) == 0x000300, "Member 'UXpMatchProgression_C::TotalXp' has a wrong offset!");
static_assert(offsetof(UXpMatchProgression_C, XpReasonFeed) == 0x000308, "Member 'UXpMatchProgression_C::XpReasonFeed' has a wrong offset!");
static_assert(offsetof(UXpMatchProgression_C, XpRewards) == 0x000310, "Member 'UXpMatchProgression_C::XpRewards' has a wrong offset!");
static_assert(offsetof(UXpMatchProgression_C, XpRewardIndex) == 0x000320, "Member 'UXpMatchProgression_C::XpRewardIndex' has a wrong offset!");
static_assert(offsetof(UXpMatchProgression_C, PlayingLeveling) == 0x000324, "Member 'UXpMatchProgression_C::PlayingLeveling' has a wrong offset!");
static_assert(offsetof(UXpMatchProgression_C, Report) == 0x000328, "Member 'UXpMatchProgression_C::Report' has a wrong offset!");

}

