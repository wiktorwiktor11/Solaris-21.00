#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CustomizableObject

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "CustomizableObject_structs.hpp"


namespace SDK
{

// Class CustomizableObject.MutableTextureMipDataProviderFactory
// 0x0000 (0x0028 - 0x0028)
class UMutableTextureMipDataProviderFactory final : public UTextureMipDataProviderFactory
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MutableTextureMipDataProviderFactory">();
	}
	static class UMutableTextureMipDataProviderFactory* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMutableTextureMipDataProviderFactory>();
	}
};
static_assert(alignof(UMutableTextureMipDataProviderFactory) == 0x000008, "Wrong alignment on UMutableTextureMipDataProviderFactory");
static_assert(sizeof(UMutableTextureMipDataProviderFactory) == 0x000028, "Wrong size on UMutableTextureMipDataProviderFactory");

// Class CustomizableObject.CustomizableInstanceLODManagementBase
// 0x0000 (0x0028 - 0x0028)
class UCustomizableInstanceLODManagementBase : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomizableInstanceLODManagementBase">();
	}
	static class UCustomizableInstanceLODManagementBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomizableInstanceLODManagementBase>();
	}
};
static_assert(alignof(UCustomizableInstanceLODManagementBase) == 0x000008, "Wrong alignment on UCustomizableInstanceLODManagementBase");
static_assert(sizeof(UCustomizableInstanceLODManagementBase) == 0x000028, "Wrong size on UCustomizableInstanceLODManagementBase");

// Class CustomizableObject.CustomizableSystemImageProvider
// 0x0000 (0x0028 - 0x0028)
class UCustomizableSystemImageProvider : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomizableSystemImageProvider">();
	}
	static class UCustomizableSystemImageProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomizableSystemImageProvider>();
	}
};
static_assert(alignof(UCustomizableSystemImageProvider) == 0x000008, "Wrong alignment on UCustomizableSystemImageProvider");
static_assert(sizeof(UCustomizableSystemImageProvider) == 0x000028, "Wrong size on UCustomizableSystemImageProvider");

// Class CustomizableObject.CustomizableInstanceLODManagement
// 0x0060 (0x0088 - 0x0028)
class UCustomizableInstanceLODManagement final : public UCustomizableInstanceLODManagementBase
{
public:
	uint8                                         Pad_28[0x60];                                      // 0x0028(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomizableInstanceLODManagement">();
	}
	static class UCustomizableInstanceLODManagement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomizableInstanceLODManagement>();
	}
};
static_assert(alignof(UCustomizableInstanceLODManagement) == 0x000008, "Wrong alignment on UCustomizableInstanceLODManagement");
static_assert(sizeof(UCustomizableInstanceLODManagement) == 0x000088, "Wrong size on UCustomizableInstanceLODManagement");

// Class CustomizableObject.CustomizableInstancePrivateData
// 0x0320 (0x0348 - 0x0028)
class UCustomizableInstancePrivateData final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGeneratedMaterial>             GeneratedMaterials;                                // 0x0030(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FGeneratedMesh>                 GeneratedMeshes;                                   // 0x0040(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FGeneratedTexture>              GeneratedTextures;                                 // 0x0050(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x50];                                      // 0x0060(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FParameterDecorations>          ParameterDecorations;                              // 0x00B0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_C0[0x10];                                      // 0x00C0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, TWeakObjectPtr<class UTexture2D>> TextureReuseCache;                                 // 0x00D0(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_120[0xE8];                                     // 0x0120(0x00E8)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             ReferencedMaterials;                               // 0x0208(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_218[0xA0];                                     // 0x0218(0x00A0)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPhysicsAsset*>                  PhysicsAssetsToMerge;                              // 0x02B8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C8[0x10];                                     // 0x02C8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FComponentSkeletons>       SkeletonsToMerge;                                  // 0x02D8(0x0050)(Transient, NativeAccessSpecifierPublic)
	TArray<struct FComponentAnimBPs>              ComponentAnimBPs;                                  // 0x0328(0x0010)(Edit, EditFixedSize, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UAnimInstance>>      GatheredAnimBPs;                                   // 0x0338(0x0010)(Edit, EditFixedSize, ZeroConstructor, Transient, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomizableInstancePrivateData">();
	}
	static class UCustomizableInstancePrivateData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomizableInstancePrivateData>();
	}
};
static_assert(alignof(UCustomizableInstancePrivateData) == 0x000008, "Wrong alignment on UCustomizableInstancePrivateData");
static_assert(sizeof(UCustomizableInstancePrivateData) == 0x000348, "Wrong size on UCustomizableInstancePrivateData");
static_assert(offsetof(UCustomizableInstancePrivateData, GeneratedMaterials) == 0x000030, "Member 'UCustomizableInstancePrivateData::GeneratedMaterials' has a wrong offset!");
static_assert(offsetof(UCustomizableInstancePrivateData, GeneratedMeshes) == 0x000040, "Member 'UCustomizableInstancePrivateData::GeneratedMeshes' has a wrong offset!");
static_assert(offsetof(UCustomizableInstancePrivateData, GeneratedTextures) == 0x000050, "Member 'UCustomizableInstancePrivateData::GeneratedTextures' has a wrong offset!");
static_assert(offsetof(UCustomizableInstancePrivateData, ParameterDecorations) == 0x0000B0, "Member 'UCustomizableInstancePrivateData::ParameterDecorations' has a wrong offset!");
static_assert(offsetof(UCustomizableInstancePrivateData, TextureReuseCache) == 0x0000D0, "Member 'UCustomizableInstancePrivateData::TextureReuseCache' has a wrong offset!");
static_assert(offsetof(UCustomizableInstancePrivateData, ReferencedMaterials) == 0x000208, "Member 'UCustomizableInstancePrivateData::ReferencedMaterials' has a wrong offset!");
static_assert(offsetof(UCustomizableInstancePrivateData, PhysicsAssetsToMerge) == 0x0002B8, "Member 'UCustomizableInstancePrivateData::PhysicsAssetsToMerge' has a wrong offset!");
static_assert(offsetof(UCustomizableInstancePrivateData, SkeletonsToMerge) == 0x0002D8, "Member 'UCustomizableInstancePrivateData::SkeletonsToMerge' has a wrong offset!");
static_assert(offsetof(UCustomizableInstancePrivateData, ComponentAnimBPs) == 0x000328, "Member 'UCustomizableInstancePrivateData::ComponentAnimBPs' has a wrong offset!");
static_assert(offsetof(UCustomizableInstancePrivateData, GatheredAnimBPs) == 0x000338, "Member 'UCustomizableInstancePrivateData::GatheredAnimBPs' has a wrong offset!");

// Class CustomizableObject.MutableMaskOutCache
// 0x00A0 (0x00C8 - 0x0028)
class UMutableMaskOutCache final : public UObject
{
public:
	TMap<class FString, class FString>            Materials;                                         // 0x0028(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FString, struct FMaskOutTexture>   Textures;                                          // 0x0078(0x0050)(NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MutableMaskOutCache">();
	}
	static class UMutableMaskOutCache* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMutableMaskOutCache>();
	}
};
static_assert(alignof(UMutableMaskOutCache) == 0x000008, "Wrong alignment on UMutableMaskOutCache");
static_assert(sizeof(UMutableMaskOutCache) == 0x0000C8, "Wrong size on UMutableMaskOutCache");
static_assert(offsetof(UMutableMaskOutCache, Materials) == 0x000028, "Member 'UMutableMaskOutCache::Materials' has a wrong offset!");
static_assert(offsetof(UMutableMaskOutCache, Textures) == 0x000078, "Member 'UMutableMaskOutCache::Textures' has a wrong offset!");

// Class CustomizableObject.CustomizableObject
// 0x03C0 (0x03E8 - 0x0028)
class UCustomizableObject final : public UObject
{
public:
	class USkeletalMesh*                          ReferenceSkeletalMesh;                             // 0x0028(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USkeletalMesh*>                  ReferenceSkeletalMeshes;                           // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class UStaticMesh*                            ReferenceStaticMesh;                               // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UMaterialInterface>> ReferencedMaterials;                               // 0x0048(0x0010)(Edit, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class USkeleton>>       ReferencedSkeletons;                               // 0x0058(0x0010)(Edit, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FMutableModelImageProperties>   ImageProperties;                                   // 0x0068(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FMorphTargetInfo>               ContributingMorphTargetsInfo;                      // 0x0078(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FMorphTargetVertexData>         MorphTargetReconstructionData;                     // 0x0088(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TMap<class FName, class UClothSharedConfigCommon*> ClothSharedConfigs;                                // 0x0098(0x0050)(Transient, NativeAccessSpecifierPublic)
	TArray<class UClothingAssetCommon*>           ContributingClothingAssets;                        // 0x00E8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FCustomizableObjectMeshToMeshVertData> ClothMeshToMeshVertData;                           // 0x00F8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FMutableModelParameterProperties> ParameterProperties;                               // 0x0108(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_118[0x50];                                     // 0x0118(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FParameterUIData>  ParameterUIDataMap;                                // 0x0168(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FString, struct FParameterUIData>  StateUIDataMap;                                    // 0x01B8(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FString, TSoftObjectPtr<class UPhysicsAsset>> PhysicsAssetsMap;                                  // 0x0208(0x0050)(UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<class FString, TSoftClassPtr<class UClass>> AnimBPAssetsMap;                                   // 0x0258(0x0050)(UObjectWrapper, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMutableMaskOutCache>    MaskOutCache;                                      // 0x02A8(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<uint64, struct FMutableStreamableBlock>  HashToStreamableBlock;                             // 0x02D0(0x0050)(NativeAccessSpecifierPublic)
	TArray<class FString>                         CustomizableObjectClassTags;                       // 0x0320(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         PopulationClassTags;                               // 0x0330(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FParameterTags>    CustomizableObjectParametersTags;                  // 0x0340(0x0050)(NativeAccessSpecifierPublic)
	class UMutableMaskOutCache*                   MaskOutCache_HardRef;                              // 0x0390(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGuid                                  Identifier;                                        // 0x0398(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3A8[0x40];                                     // 0x03A8(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UCustomizableObjectInstance* CreateInstance();
	void LoadMaskOutCache();
	void UnloadMaskOutCache();

	int32 FindParameter(const class FString& Name_0) const;
	class FString GetIntParameterAvailableOption(int32 ParamIndex, int32 K) const;
	int32 GetIntParameterNumOptions(int32 ParamIndex) const;
	int32 GetParameterCount() const;
	int32 GetParameterDescriptionCount(const class FString& ParamName) const;
	class FString GetParameterName(int32 ParamIndex) const;
	EMutableParameterType GetParameterType(int32 ParamIndex) const;
	EMutableParameterType GetParameterTypeByName(const class FString& Name_0) const;
	struct FParameterUIData GetParameterUIMetadata(const class FString& ParamName) const;
	struct FParameterUIData GetParameterUIMetadataFromIndex(int32 ParamIndex) const;
	int32 GetStateCount() const;
	class FString GetStateName(int32 StateIndex) const;
	int32 GetStateParameterCount(const class FString& StateName) const;
	class FString GetStateParameterName(const class FString& StateName, int32 ParameterIndex) const;
	struct FParameterUIData GetStateUIMetadata(const class FString& StateName) const;
	struct FParameterUIData GetStateUIMetadataFromIndex(int32 StateIndex) const;
	bool IsCompiled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomizableObject">();
	}
	static class UCustomizableObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomizableObject>();
	}
};
static_assert(alignof(UCustomizableObject) == 0x000008, "Wrong alignment on UCustomizableObject");
static_assert(sizeof(UCustomizableObject) == 0x0003E8, "Wrong size on UCustomizableObject");
static_assert(offsetof(UCustomizableObject, ReferenceSkeletalMesh) == 0x000028, "Member 'UCustomizableObject::ReferenceSkeletalMesh' has a wrong offset!");
static_assert(offsetof(UCustomizableObject, ReferenceSkeletalMeshes) == 0x000030, "Member 'UCustomizableObject::ReferenceSkeletalMeshes' has a wrong offset!");
static_assert(offsetof(UCustomizableObject, ReferenceStaticMesh) == 0x000040, "Member 'UCustomizableObject::ReferenceStaticMesh' has a wrong offset!");
static_assert(offsetof(UCustomizableObject, ReferencedMaterials) == 0x000048, "Member 'UCustomizableObject::ReferencedMaterials' has a wrong offset!");
static_assert(offsetof(UCustomizableObject, ReferencedSkeletons) == 0x000058, "Member 'UCustomizableObject::ReferencedSkeletons' has a wrong offset!");
static_assert(offsetof(UCustomizableObject, ImageProperties) == 0x000068, "Member 'UCustomizableObject::ImageProperties' has a wrong offset!");
static_assert(offsetof(UCustomizableObject, ContributingMorphTargetsInfo) == 0x000078, "Member 'UCustomizableObject::ContributingMorphTargetsInfo' has a wrong offset!");
static_assert(offsetof(UCustomizableObject, MorphTargetReconstructionData) == 0x000088, "Member 'UCustomizableObject::MorphTargetReconstructionData' has a wrong offset!");
static_assert(offsetof(UCustomizableObject, ClothSharedConfigs) == 0x000098, "Member 'UCustomizableObject::ClothSharedConfigs' has a wrong offset!");
static_assert(offsetof(UCustomizableObject, ContributingClothingAssets) == 0x0000E8, "Member 'UCustomizableObject::ContributingClothingAssets' has a wrong offset!");
static_assert(offsetof(UCustomizableObject, ClothMeshToMeshVertData) == 0x0000F8, "Member 'UCustomizableObject::ClothMeshToMeshVertData' has a wrong offset!");
static_assert(offsetof(UCustomizableObject, ParameterProperties) == 0x000108, "Member 'UCustomizableObject::ParameterProperties' has a wrong offset!");
static_assert(offsetof(UCustomizableObject, ParameterUIDataMap) == 0x000168, "Member 'UCustomizableObject::ParameterUIDataMap' has a wrong offset!");
static_assert(offsetof(UCustomizableObject, StateUIDataMap) == 0x0001B8, "Member 'UCustomizableObject::StateUIDataMap' has a wrong offset!");
static_assert(offsetof(UCustomizableObject, PhysicsAssetsMap) == 0x000208, "Member 'UCustomizableObject::PhysicsAssetsMap' has a wrong offset!");
static_assert(offsetof(UCustomizableObject, AnimBPAssetsMap) == 0x000258, "Member 'UCustomizableObject::AnimBPAssetsMap' has a wrong offset!");
static_assert(offsetof(UCustomizableObject, MaskOutCache) == 0x0002A8, "Member 'UCustomizableObject::MaskOutCache' has a wrong offset!");
static_assert(offsetof(UCustomizableObject, HashToStreamableBlock) == 0x0002D0, "Member 'UCustomizableObject::HashToStreamableBlock' has a wrong offset!");
static_assert(offsetof(UCustomizableObject, CustomizableObjectClassTags) == 0x000320, "Member 'UCustomizableObject::CustomizableObjectClassTags' has a wrong offset!");
static_assert(offsetof(UCustomizableObject, PopulationClassTags) == 0x000330, "Member 'UCustomizableObject::PopulationClassTags' has a wrong offset!");
static_assert(offsetof(UCustomizableObject, CustomizableObjectParametersTags) == 0x000340, "Member 'UCustomizableObject::CustomizableObjectParametersTags' has a wrong offset!");
static_assert(offsetof(UCustomizableObject, MaskOutCache_HardRef) == 0x000390, "Member 'UCustomizableObject::MaskOutCache_HardRef' has a wrong offset!");
static_assert(offsetof(UCustomizableObject, Identifier) == 0x000398, "Member 'UCustomizableObject::Identifier' has a wrong offset!");

// Class CustomizableObject.CustomizableObjectInstance
// 0x01A8 (0x01D0 - 0x0028)
class UCustomizableObjectInstance final : public UObject
{
public:
	class UCustomizableObject*                    CustomizableObject;                                // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USkeletalMesh*>                  SkeletalMeshes;                                    // 0x0030(0x0010)(Edit, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FCustomizableObjectBoolParameterValue> BoolParameters;                                    // 0x0040(0x0010)(Edit, EditFixedSize, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FCustomizableObjectIntParameterValue> IntParameters;                                     // 0x0050(0x0010)(Edit, EditFixedSize, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FCustomizableObjectFloatParameterValue> FloatParameters;                                   // 0x0060(0x0010)(Edit, EditFixedSize, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FCustomizableObjectTextureParameterValue> TextureParameters;                                 // 0x0070(0x0010)(Edit, EditFixedSize, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FCustomizableObjectVectorParameterValue> VectorParameters;                                  // 0x0080(0x0010)(Edit, EditFixedSize, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FCustomizableObjectProjectorParameterValue> ProjectorParameters;                               // 0x0090(0x0010)(Edit, EditFixedSize, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	bool                                          bBuildParameterDecorations;                        // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UCustomizableObjectInstance* Instance)> UpdatedDelegate;                                   // 0x00A8(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x60];                                      // 0x00B8(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SkeletalMeshStatus;                                // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_128[0x98];                                     // 0x0128(0x0098)(Fixing Size After Last Property [ Dumper-7 ])
	class UCustomizableInstancePrivateData*       PrivateData;                                       // 0x01C0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C8[0x8];                                      // 0x01C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 AddValueToFloatRange(const class FString& ParamName);
	int32 AddValueToIntRange(const class FString& ParamName);
	int32 AddValueToProjectorRange(const class FString& ParamName);
	class UCustomizableObjectInstance* Clone();
	class UCustomizableObjectInstance* CloneStatic(class UObject* Outer_0);
	class UTexture2D* GetParameterDescription(const class FString& ParamName, int32 DescIndex);
	class USkeletalMesh* GetSkeletalMesh(int32 ComponentIndex);
	int32 RemoveValueFromFloatRange(const class FString& ParamName);
	int32 RemoveValueFromIntRange(const class FString& ParamName);
	int32 RemoveValueFromProjectorRange(const class FString& ParamName);
	void SetBoolParameterSelectedOption(const class FString& BoolParamName, bool BoolValue);
	void SetColorParameterSelectedOption(const class FString& ColorParamName, const struct FLinearColor& ColorValue);
	void SetCurrentState(const class FString& StateName);
	void SetFloatParameterSelectedOption(const class FString& FloatParamName, float FloatValue, int32 RangeIndex);
	void SetIntParameterSelectedOption(const class FString& ParamName, const class FString& SelectedOptionName, int32 RangeIndex);
	void SetProjectorValue(const class FString& ProjectorParamName, const struct FVector& Pos, const struct FVector& Direction, const struct FVector& Up, const struct FVector& Scale, float Angle, int32 RangeIndex);
	void SetRandomValues();
	void SetVectorParameterSelectedOption(const class FString& VectorParamName, const struct FLinearColor& VectorValue);
	void UpdateSkeletalMeshAsync(bool bIgnoreCloseDist, bool bForceHighPriority);

	int32 CurrentParamRange(const class FString& ParamName) const;
	int32 FindBoolParameterNameIndex(const class FString& ParamName) const;
	int32 FindFloatParameterNameIndex(const class FString& ParamName) const;
	int32 FindIntParameterNameIndex(const class FString& ParamName) const;
	int32 FindProjectorParameterNameIndex(const class FString& ParamName) const;
	int32 FindVectorParameterNameIndex(const class FString& ParamName) const;
	void ForEachAnimInstance(int32 ComponentIndex, TDelegate<void(int32 SlotIndex, TSubclassOf<class UAnimInstance> AnimInstClass)> Delegate) const;
	TSubclassOf<class UAnimInstance> GetAnimBP(int32 ComponentIndex, int32 SlotIndex) const;
	bool GetBoolParameterSelectedOption(const class FString& BoolParamName) const;
	struct FLinearColor GetColorParameterSelectedOption(const class FString& ColorParamName) const;
	class FString GetCurrentState() const;
	float GetFloatParameterSelectedOption(const class FString& FloatParamName, int32 RangeIndex) const;
	class FString GetIntParameterSelectedOption(const class FString& ParamName, int32 RangeIndex) const;
	float GetProjectorAngle(const class FString& ParamName, int32 RangeIndex) const;
	struct FVector GetProjectorDirection(const class FString& ParamName, int32 RangeIndex) const;
	ECustomizableObjectProjectorType GetProjectorParameterType(const class FString& ParamName, int32 RangeIndex) const;
	struct FVector GetProjectorPosition(const class FString& ParamName, int32 RangeIndex) const;
	struct FVector GetProjectorScale(const class FString& ParamName, int32 RangeIndex) const;
	struct FVector GetProjectorUp(const class FString& ParamName, int32 RangeIndex) const;
	void GetProjectorValue(const class FString& ProjectorParamName, struct FVector* Pos, struct FVector* Direction, struct FVector* Up, struct FVector* Scale, float* Angle, ECustomizableObjectProjectorType* Type, int32 RangeIndex) const;
	bool HasAnySkeletalMesh() const;
	bool IsParameterRelevant(const class FString& ParamName) const;
	bool IsParamMultidimensional(const class FString& ParamName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomizableObjectInstance">();
	}
	static class UCustomizableObjectInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomizableObjectInstance>();
	}
};
static_assert(alignof(UCustomizableObjectInstance) == 0x000008, "Wrong alignment on UCustomizableObjectInstance");
static_assert(sizeof(UCustomizableObjectInstance) == 0x0001D0, "Wrong size on UCustomizableObjectInstance");
static_assert(offsetof(UCustomizableObjectInstance, CustomizableObject) == 0x000028, "Member 'UCustomizableObjectInstance::CustomizableObject' has a wrong offset!");
static_assert(offsetof(UCustomizableObjectInstance, SkeletalMeshes) == 0x000030, "Member 'UCustomizableObjectInstance::SkeletalMeshes' has a wrong offset!");
static_assert(offsetof(UCustomizableObjectInstance, BoolParameters) == 0x000040, "Member 'UCustomizableObjectInstance::BoolParameters' has a wrong offset!");
static_assert(offsetof(UCustomizableObjectInstance, IntParameters) == 0x000050, "Member 'UCustomizableObjectInstance::IntParameters' has a wrong offset!");
static_assert(offsetof(UCustomizableObjectInstance, FloatParameters) == 0x000060, "Member 'UCustomizableObjectInstance::FloatParameters' has a wrong offset!");
static_assert(offsetof(UCustomizableObjectInstance, TextureParameters) == 0x000070, "Member 'UCustomizableObjectInstance::TextureParameters' has a wrong offset!");
static_assert(offsetof(UCustomizableObjectInstance, VectorParameters) == 0x000080, "Member 'UCustomizableObjectInstance::VectorParameters' has a wrong offset!");
static_assert(offsetof(UCustomizableObjectInstance, ProjectorParameters) == 0x000090, "Member 'UCustomizableObjectInstance::ProjectorParameters' has a wrong offset!");
static_assert(offsetof(UCustomizableObjectInstance, bBuildParameterDecorations) == 0x0000A0, "Member 'UCustomizableObjectInstance::bBuildParameterDecorations' has a wrong offset!");
static_assert(offsetof(UCustomizableObjectInstance, UpdatedDelegate) == 0x0000A8, "Member 'UCustomizableObjectInstance::UpdatedDelegate' has a wrong offset!");
static_assert(offsetof(UCustomizableObjectInstance, SkeletalMeshStatus) == 0x000118, "Member 'UCustomizableObjectInstance::SkeletalMeshStatus' has a wrong offset!");
static_assert(offsetof(UCustomizableObjectInstance, PrivateData) == 0x0001C0, "Member 'UCustomizableObjectInstance::PrivateData' has a wrong offset!");

// Class CustomizableObject.CustomizableObjectImageProviderArray
// 0x0030 (0x0058 - 0x0028)
class UCustomizableObjectImageProviderArray final : public UCustomizableSystemImageProvider
{
public:
	TArray<class UTexture2D*>                     Textures;                                          // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x20];                                      // 0x0038(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomizableObjectImageProviderArray">();
	}
	static class UCustomizableObjectImageProviderArray* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomizableObjectImageProviderArray>();
	}
};
static_assert(alignof(UCustomizableObjectImageProviderArray) == 0x000008, "Wrong alignment on UCustomizableObjectImageProviderArray");
static_assert(sizeof(UCustomizableObjectImageProviderArray) == 0x000058, "Wrong size on UCustomizableObjectImageProviderArray");
static_assert(offsetof(UCustomizableObjectImageProviderArray, Textures) == 0x000028, "Member 'UCustomizableObjectImageProviderArray::Textures' has a wrong offset!");

// Class CustomizableObject.CustomizableObjectSystem
// 0x0148 (0x0170 - 0x0028)
class UCustomizableObjectSystem final : public UObject
{
public:
	TArray<struct FPendingReleaseSkeletalMeshInfo> PendingReleaseSkeletalMesh;                        // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class UCustomizableObjectImageProviderArray*  PreviewExternalImageProvider;                      // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x100];                                     // 0x0040(0x0100)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTexture2D*>                     ProtectedCachedTextures;                           // 0x0140(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_150[0x10];                                     // 0x0150(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UCustomizableInstanceLODManagementBase* DefaultInstanceLODManagement;                      // 0x0160(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCustomizableInstanceLODManagementBase* CurrentInstanceLODManagement;                      // 0x0168(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UCustomizableObjectSystem* GetInstance();

	void SetReleaseMutableTexturesImmediately(bool bReleaseTextures);

	bool AreEnginePatchesPresent() const;
	int32 GetAverageBuildTime() const;
	int32 GetNumInstances() const;
	int32 GetNumPendingInstances() const;
	class FString GetPluginVersion() const;
	int32 GetTextureMemoryUsed() const;
	int32 GetTotalInstances() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomizableObjectSystem">();
	}
	static class UCustomizableObjectSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomizableObjectSystem>();
	}
};
static_assert(alignof(UCustomizableObjectSystem) == 0x000008, "Wrong alignment on UCustomizableObjectSystem");
static_assert(sizeof(UCustomizableObjectSystem) == 0x000170, "Wrong size on UCustomizableObjectSystem");
static_assert(offsetof(UCustomizableObjectSystem, PendingReleaseSkeletalMesh) == 0x000028, "Member 'UCustomizableObjectSystem::PendingReleaseSkeletalMesh' has a wrong offset!");
static_assert(offsetof(UCustomizableObjectSystem, PreviewExternalImageProvider) == 0x000038, "Member 'UCustomizableObjectSystem::PreviewExternalImageProvider' has a wrong offset!");
static_assert(offsetof(UCustomizableObjectSystem, ProtectedCachedTextures) == 0x000140, "Member 'UCustomizableObjectSystem::ProtectedCachedTextures' has a wrong offset!");
static_assert(offsetof(UCustomizableObjectSystem, DefaultInstanceLODManagement) == 0x000160, "Member 'UCustomizableObjectSystem::DefaultInstanceLODManagement' has a wrong offset!");
static_assert(offsetof(UCustomizableObjectSystem, CurrentInstanceLODManagement) == 0x000168, "Member 'UCustomizableObjectSystem::CurrentInstanceLODManagement' has a wrong offset!");

// Class CustomizableObject.CustomizableSkeletalComponent
// 0x0030 (0x02D0 - 0x02A0)
class UCustomizableSkeletalComponent final : public USceneComponent
{
public:
	uint8                                         Pad_2A0[0x4];                                      // 0x02A0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SkippedLastRenderTime;                             // 0x02A4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCustomizableObjectInstance*            CustomizableObjectInstance;                        // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComponentIndex;                                    // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B4[0x1C];                                     // 0x02B4(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void UpdateSkeletalMeshAsync(bool bNeverSkipUpdate);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomizableSkeletalComponent">();
	}
	static class UCustomizableSkeletalComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomizableSkeletalComponent>();
	}
};
static_assert(alignof(UCustomizableSkeletalComponent) == 0x000010, "Wrong alignment on UCustomizableSkeletalComponent");
static_assert(sizeof(UCustomizableSkeletalComponent) == 0x0002D0, "Wrong size on UCustomizableSkeletalComponent");
static_assert(offsetof(UCustomizableSkeletalComponent, SkippedLastRenderTime) == 0x0002A4, "Member 'UCustomizableSkeletalComponent::SkippedLastRenderTime' has a wrong offset!");
static_assert(offsetof(UCustomizableSkeletalComponent, CustomizableObjectInstance) == 0x0002A8, "Member 'UCustomizableSkeletalComponent::CustomizableObjectInstance' has a wrong offset!");
static_assert(offsetof(UCustomizableSkeletalComponent, ComponentIndex) == 0x0002B0, "Member 'UCustomizableSkeletalComponent::ComponentIndex' has a wrong offset!");

// Class CustomizableObject.CustomizableSkeletalMeshActor
// 0x0028 (0x0318 - 0x02F0)
class ACustomizableSkeletalMeshActor final : public ASkeletalMeshActor
{
public:
	TArray<class UCustomizableSkeletalComponent*> CustomizableSkeletalComponents;                    // 0x02F0(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class USkeletalMeshComponent*>         SkeletalMeshComponents;                            // 0x0300(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UCustomizableSkeletalComponent*         CustomizableSkeletalComponent;                     // 0x0310(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomizableSkeletalMeshActor">();
	}
	static class ACustomizableSkeletalMeshActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACustomizableSkeletalMeshActor>();
	}
};
static_assert(alignof(ACustomizableSkeletalMeshActor) == 0x000008, "Wrong alignment on ACustomizableSkeletalMeshActor");
static_assert(sizeof(ACustomizableSkeletalMeshActor) == 0x000318, "Wrong size on ACustomizableSkeletalMeshActor");
static_assert(offsetof(ACustomizableSkeletalMeshActor, CustomizableSkeletalComponents) == 0x0002F0, "Member 'ACustomizableSkeletalMeshActor::CustomizableSkeletalComponents' has a wrong offset!");
static_assert(offsetof(ACustomizableSkeletalMeshActor, SkeletalMeshComponents) == 0x000300, "Member 'ACustomizableSkeletalMeshActor::SkeletalMeshComponents' has a wrong offset!");
static_assert(offsetof(ACustomizableSkeletalMeshActor, CustomizableSkeletalComponent) == 0x000310, "Member 'ACustomizableSkeletalMeshActor::CustomizableSkeletalComponent' has a wrong offset!");

}

