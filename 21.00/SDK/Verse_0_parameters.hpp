#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Verse_0

#include "Basic.hpp"

#include "SolarisInterop_structs.hpp"
#include "Verse_0_structs.hpp"
#include "Verse_structs.hpp"


namespace SDK::Params
{

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector2_M_Nfloat_R
// 0x0028 (0x0028 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector2_M_Nfloat_R final
{
public:
	struct Ftuple_Lvector2_Mfloat_R               __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0018)(Parm, HasGetValueTypeHash)
	struct Fvector2                               RetVal;                                            // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector2_M_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector2_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector2_M_Nfloat_R) == 0x000028, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector2_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector2_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector2_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector2_M_Nfloat_R, RetVal) == 0x000018, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector2_M_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector2i_M_Nint_R
// 0x0028 (0x0028 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector2i_M_Nint_R final
{
public:
	struct Ftuple_Lvector2i_Mint_R                __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0018)(Parm, HasGetValueTypeHash)
	struct Fvector2i                              RetVal;                                            // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector2i_M_Nint_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector2i_M_Nint_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector2i_M_Nint_R) == 0x000028, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector2i_M_Nint_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector2i_M_Nint_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector2i_M_Nint_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector2i_M_Nint_R, RetVal) == 0x000018, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector2i_M_Nint_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector3_M_Nfloat_R
// 0x0038 (0x0038 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector3_M_Nfloat_R final
{
public:
	struct Ftuple_Lvector3_Mfloat_R               __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, HasGetValueTypeHash)
	struct Fvector3                               RetVal;                                            // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector3_M_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector3_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector3_M_Nfloat_R) == 0x000038, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector3_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector3_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector3_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector3_M_Nfloat_R, RetVal) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector3_M_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector4__v_M_Nfloat_R
// 0x0058 (0x0058 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector4__v_M_Nfloat_R final
{
public:
	struct Ftuple_Lvector4__v_Mfloat_R            __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0030)(Parm, HasGetValueTypeHash)
	struct Fvector4_v                             RetVal;                                            // 0x0030(0x0028)(Parm, OutParm, ReturnParm, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector4__v_M_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector4__v_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector4__v_M_Nfloat_R) == 0x000058, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector4__v_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector4__v_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector4__v_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector4__v_M_Nfloat_R, RetVal) == 0x000030, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RAddScalar_L_Nvector4__v_M_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyPitch_L_Nrotation_M_Nfloat_R
// 0x0050 (0x0050 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyPitch_L_Nrotation_M_Nfloat_R final
{
public:
	struct Ftuple_Lrotation_Mfloat_R              __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0030)(Parm, HasGetValueTypeHash)
	struct FVerseRotation                         RetVal;                                            // 0x0030(0x0020)(Parm, OutParm, ReturnParm, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyPitch_L_Nrotation_M_Nfloat_R) == 0x000010, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyPitch_L_Nrotation_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyPitch_L_Nrotation_M_Nfloat_R) == 0x000050, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyPitch_L_Nrotation_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyPitch_L_Nrotation_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyPitch_L_Nrotation_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyPitch_L_Nrotation_M_Nfloat_R, RetVal) == 0x000030, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyPitch_L_Nrotation_M_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyRoll_L_Nrotation_M_Nfloat_R
// 0x0050 (0x0050 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyRoll_L_Nrotation_M_Nfloat_R final
{
public:
	struct Ftuple_Lrotation_Mfloat_R              __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0030)(Parm, HasGetValueTypeHash)
	struct FVerseRotation                         RetVal;                                            // 0x0030(0x0020)(Parm, OutParm, ReturnParm, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyRoll_L_Nrotation_M_Nfloat_R) == 0x000010, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyRoll_L_Nrotation_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyRoll_L_Nrotation_M_Nfloat_R) == 0x000050, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyRoll_L_Nrotation_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyRoll_L_Nrotation_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyRoll_L_Nrotation_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyRoll_L_Nrotation_M_Nfloat_R, RetVal) == 0x000030, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyRoll_L_Nrotation_M_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyWorldRotationX_L_Nrotation_M_Nfloat_R
// 0x0050 (0x0050 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyWorldRotationX_L_Nrotation_M_Nfloat_R final
{
public:
	struct Ftuple_Lrotation_Mfloat_R              __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0030)(Parm, HasGetValueTypeHash)
	struct FVerseRotation                         RetVal;                                            // 0x0030(0x0020)(Parm, OutParm, ReturnParm, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyWorldRotationX_L_Nrotation_M_Nfloat_R) == 0x000010, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyWorldRotationX_L_Nrotation_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyWorldRotationX_L_Nrotation_M_Nfloat_R) == 0x000050, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyWorldRotationX_L_Nrotation_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyWorldRotationX_L_Nrotation_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyWorldRotationX_L_Nrotation_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyWorldRotationX_L_Nrotation_M_Nfloat_R, RetVal) == 0x000030, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyWorldRotationX_L_Nrotation_M_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyWorldRotationY_L_Nrotation_M_Nfloat_R
// 0x0050 (0x0050 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyWorldRotationY_L_Nrotation_M_Nfloat_R final
{
public:
	struct Ftuple_Lrotation_Mfloat_R              __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0030)(Parm, HasGetValueTypeHash)
	struct FVerseRotation                         RetVal;                                            // 0x0030(0x0020)(Parm, OutParm, ReturnParm, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyWorldRotationY_L_Nrotation_M_Nfloat_R) == 0x000010, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyWorldRotationY_L_Nrotation_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyWorldRotationY_L_Nrotation_M_Nfloat_R) == 0x000050, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyWorldRotationY_L_Nrotation_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyWorldRotationY_L_Nrotation_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyWorldRotationY_L_Nrotation_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyWorldRotationY_L_Nrotation_M_Nfloat_R, RetVal) == 0x000030, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyWorldRotationY_L_Nrotation_M_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyWorldRotationZ_L_Nrotation_M_Nfloat_R
// 0x0050 (0x0050 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyWorldRotationZ_L_Nrotation_M_Nfloat_R final
{
public:
	struct Ftuple_Lrotation_Mfloat_R              __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0030)(Parm, HasGetValueTypeHash)
	struct FVerseRotation                         RetVal;                                            // 0x0030(0x0020)(Parm, OutParm, ReturnParm, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyWorldRotationZ_L_Nrotation_M_Nfloat_R) == 0x000010, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyWorldRotationZ_L_Nrotation_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyWorldRotationZ_L_Nrotation_M_Nfloat_R) == 0x000050, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyWorldRotationZ_L_Nrotation_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyWorldRotationZ_L_Nrotation_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyWorldRotationZ_L_Nrotation_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyWorldRotationZ_L_Nrotation_M_Nfloat_R, RetVal) == 0x000030, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyWorldRotationZ_L_Nrotation_M_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyYaw_L_Nrotation_M_Nfloat_R
// 0x0050 (0x0050 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyYaw_L_Nrotation_M_Nfloat_R final
{
public:
	struct Ftuple_Lrotation_Mfloat_R              __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0030)(Parm, HasGetValueTypeHash)
	struct FVerseRotation                         RetVal;                                            // 0x0030(0x0020)(Parm, OutParm, ReturnParm, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyYaw_L_Nrotation_M_Nfloat_R) == 0x000010, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyYaw_L_Nrotation_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyYaw_L_Nrotation_M_Nfloat_R) == 0x000050, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyYaw_L_Nrotation_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyYaw_L_Nrotation_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyYaw_L_Nrotation_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyYaw_L_Nrotation_M_Nfloat_R, RetVal) == 0x000030, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RApplyYaw_L_Nrotation_M_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RArcCos_L_Nfloat_R
// 0x0010 (0x0010 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArcCos_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArcCos_L_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArcCos_L_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArcCos_L_Nfloat_R) == 0x000010, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArcCos_L_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArcCos_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArcCos_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArcCos_L_Nfloat_R, RetVal) == 0x000008, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArcCos_L_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RArCosh_L_Nfloat_R
// 0x0010 (0x0010 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArCosh_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArCosh_L_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArCosh_L_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArCosh_L_Nfloat_R) == 0x000010, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArCosh_L_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArCosh_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArCosh_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArCosh_L_Nfloat_R, RetVal) == 0x000008, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArCosh_L_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RArcSin_L_Nfloat_R
// 0x0010 (0x0010 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArcSin_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArcSin_L_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArcSin_L_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArcSin_L_Nfloat_R) == 0x000010, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArcSin_L_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArcSin_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArcSin_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArcSin_L_Nfloat_R, RetVal) == 0x000008, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArcSin_L_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RArcTan_L_Nfloat_M_Nfloat_R
// 0x0018 (0x0018 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArcTan_L_Nfloat_M_Nfloat_R final
{
public:
	struct Verse_0::Ftuple_Lfloat_Mfloat_R        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0010)(Parm, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArcTan_L_Nfloat_M_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArcTan_L_Nfloat_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArcTan_L_Nfloat_M_Nfloat_R) == 0x000018, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArcTan_L_Nfloat_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArcTan_L_Nfloat_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArcTan_L_Nfloat_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArcTan_L_Nfloat_M_Nfloat_R, RetVal) == 0x000010, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArcTan_L_Nfloat_M_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RArcTan_L_Nfloat_R
// 0x0010 (0x0010 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArcTan_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArcTan_L_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArcTan_L_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArcTan_L_Nfloat_R) == 0x000010, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArcTan_L_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArcTan_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArcTan_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArcTan_L_Nfloat_R, RetVal) == 0x000008, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArcTan_L_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RArSinh_L_Nfloat_R
// 0x0010 (0x0010 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArSinh_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArSinh_L_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArSinh_L_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArSinh_L_Nfloat_R) == 0x000010, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArSinh_L_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArSinh_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArSinh_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArSinh_L_Nfloat_R, RetVal) == 0x000008, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArSinh_L_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RArTanh_L_Nfloat_R
// 0x0010 (0x0010 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArTanh_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArTanh_L_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArTanh_L_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArTanh_L_Nfloat_R) == 0x000010, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArTanh_L_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArTanh_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArTanh_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArTanh_L_Nfloat_R, RetVal) == 0x000008, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RArTanh_L_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RCeil_L_Nfloat_R
// 0x0010 (0x0010 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCeil_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCeil_L_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCeil_L_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCeil_L_Nfloat_R) == 0x000010, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCeil_L_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCeil_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCeil_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCeil_L_Nfloat_R, RetVal) == 0x000008, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCeil_L_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RCeil_L_Nvector2r_R
// 0x0030 (0x0030 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCeil_L_Nvector2r_R final
{
public:
	struct Fvector2r                              __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, HasGetValueTypeHash)
	struct Fvector2i                              RetVal;                                            // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCeil_L_Nvector2r_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCeil_L_Nvector2r_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCeil_L_Nvector2r_R) == 0x000030, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCeil_L_Nvector2r_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCeil_L_Nvector2r_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCeil_L_Nvector2r_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCeil_L_Nvector2r_R, RetVal) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCeil_L_Nvector2r_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RClamp_L_Nfloat_M_Nfloat_M_Nfloat_R
// 0x0020 (0x0020 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RClamp_L_Nfloat_M_Nfloat_M_Nfloat_R final
{
public:
	struct Ftuple_Lfloat_Mfloat_Mfloat_R          __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0018)(Parm, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RClamp_L_Nfloat_M_Nfloat_M_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RClamp_L_Nfloat_M_Nfloat_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RClamp_L_Nfloat_M_Nfloat_M_Nfloat_R) == 0x000020, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RClamp_L_Nfloat_M_Nfloat_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RClamp_L_Nfloat_M_Nfloat_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RClamp_L_Nfloat_M_Nfloat_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RClamp_L_Nfloat_M_Nfloat_M_Nfloat_R, RetVal) == 0x000018, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RClamp_L_Nfloat_M_Nfloat_M_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RClamp_L_Nint_M_Nint_M_Nint_R
// 0x0020 (0x0020 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RClamp_L_Nint_M_Nint_M_Nint_R final
{
public:
	struct Verse_0::Ftuple_Lint_Mint_Mint_R       __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0018)(Parm, HasGetValueTypeHash)
	int64                                         RetVal;                                            // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RClamp_L_Nint_M_Nint_M_Nint_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RClamp_L_Nint_M_Nint_M_Nint_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RClamp_L_Nint_M_Nint_M_Nint_R) == 0x000020, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RClamp_L_Nint_M_Nint_M_Nint_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RClamp_L_Nint_M_Nint_M_Nint_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RClamp_L_Nint_M_Nint_M_Nint_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RClamp_L_Nint_M_Nint_M_Nint_R, RetVal) == 0x000018, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RClamp_L_Nint_M_Nint_M_Nint_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RCos_L_Nfloat_R
// 0x0010 (0x0010 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCos_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCos_L_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCos_L_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCos_L_Nfloat_R) == 0x000010, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCos_L_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCos_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCos_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCos_L_Nfloat_R, RetVal) == 0x000008, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCos_L_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RCosh_L_Nfloat_R
// 0x0010 (0x0010 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCosh_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCosh_L_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCosh_L_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCosh_L_Nfloat_R) == 0x000010, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCosh_L_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCosh_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCosh_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCosh_L_Nfloat_R, RetVal) == 0x000008, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCosh_L_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromColorTemperature_L_Nfloat_R
// 0x0030 (0x0030 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromColorTemperature_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FOptionProperty_                              RetVal;                                            // 0x0008(0x0021)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromColorTemperature_L_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromColorTemperature_L_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromColorTemperature_L_Nfloat_R) == 0x000030, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromColorTemperature_L_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromColorTemperature_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromColorTemperature_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromColorTemperature_L_Nfloat_R, RetVal) == 0x000008, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromColorTemperature_L_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromHex_L_N_Kchar_R
// 0x0030 (0x0030 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromHex_L_N_Kchar_R final
{
public:
	FVerseStringProperty_                         __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0010)(Parm, HasGetValueTypeHash)
	struct Fcolor_v                               RetVal;                                            // 0x0010(0x0020)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromHex_L_N_Kchar_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromHex_L_N_Kchar_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromHex_L_N_Kchar_R) == 0x000030, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromHex_L_N_Kchar_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromHex_L_N_Kchar_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromHex_L_N_Kchar_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromHex_L_N_Kchar_R, RetVal) == 0x000010, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromHex_L_N_Kchar_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromHSV_L_Nfloat_M_Nfloat_M_Nfloat_R
// 0x0040 (0x0040 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromHSV_L_Nfloat_M_Nfloat_M_Nfloat_R final
{
public:
	struct Ftuple_Lfloat_Mfloat_Mfloat_R          __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0018)(Parm, HasGetValueTypeHash)
	FOptionProperty_                              RetVal;                                            // 0x0018(0x0021)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromHSV_L_Nfloat_M_Nfloat_M_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromHSV_L_Nfloat_M_Nfloat_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromHSV_L_Nfloat_M_Nfloat_M_Nfloat_R) == 0x000040, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromHSV_L_Nfloat_M_Nfloat_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromHSV_L_Nfloat_M_Nfloat_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromHSV_L_Nfloat_M_Nfloat_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromHSV_L_Nfloat_M_Nfloat_M_Nfloat_R, RetVal) == 0x000018, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromHSV_L_Nfloat_M_Nfloat_M_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromLinear_L_Nfloat_M_Nfloat_M_Nfloat_M_Nfloat_R
// 0x0040 (0x0040 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromLinear_L_Nfloat_M_Nfloat_M_Nfloat_M_Nfloat_R final
{
public:
	struct Ftuple_Lfloat_Mfloat_Mfloat_Mfloat_R   __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, HasGetValueTypeHash)
	struct Fcolor_v                               RetVal;                                            // 0x0020(0x0020)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromLinear_L_Nfloat_M_Nfloat_M_Nfloat_M_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromLinear_L_Nfloat_M_Nfloat_M_Nfloat_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromLinear_L_Nfloat_M_Nfloat_M_Nfloat_M_Nfloat_R) == 0x000040, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromLinear_L_Nfloat_M_Nfloat_M_Nfloat_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromLinear_L_Nfloat_M_Nfloat_M_Nfloat_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromLinear_L_Nfloat_M_Nfloat_M_Nfloat_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromLinear_L_Nfloat_M_Nfloat_M_Nfloat_M_Nfloat_R, RetVal) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromLinear_L_Nfloat_M_Nfloat_M_Nfloat_M_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromNamed_L_Nnamed__color_R
// 0x0028 (0x0028 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromNamed_L_Nnamed__color_R final
{
public:
	Enamed_color                                  __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct Fcolor_v                               RetVal;                                            // 0x0008(0x0020)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromNamed_L_Nnamed__color_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromNamed_L_Nnamed__color_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromNamed_L_Nnamed__color_R) == 0x000028, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromNamed_L_Nnamed__color_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromNamed_L_Nnamed__color_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromNamed_L_Nnamed__color_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromNamed_L_Nnamed__color_R, RetVal) == 0x000008, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromNamed_L_Nnamed__color_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromValues_L_Nint_M_Nint_M_Nint_M_Nint_R
// 0x0040 (0x0040 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromValues_L_Nint_M_Nint_M_Nint_M_Nint_R final
{
public:
	struct Ftuple_Lint_Mint_Mint_Mint_R           __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, HasGetValueTypeHash)
	struct Fcolor_v                               RetVal;                                            // 0x0020(0x0020)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromValues_L_Nint_M_Nint_M_Nint_M_Nint_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromValues_L_Nint_M_Nint_M_Nint_M_Nint_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromValues_L_Nint_M_Nint_M_Nint_M_Nint_R) == 0x000040, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromValues_L_Nint_M_Nint_M_Nint_M_Nint_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromValues_L_Nint_M_Nint_M_Nint_M_Nint_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromValues_L_Nint_M_Nint_M_Nint_M_Nint_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromValues_L_Nint_M_Nint_M_Nint_M_Nint_R, RetVal) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateFromValues_L_Nint_M_Nint_M_Nint_M_Nint_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RCreatePlane4Native_L_Nvector3_M_Nvector3_M_Nvector3_R
// 0x0078 (0x0078 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreatePlane4Native_L_Nvector3_M_Nvector3_M_Nvector3_R final
{
public:
	struct Ftuple_Lvector3_Mvector3_Mvector3_R    __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0048)(Parm, HasGetValueTypeHash)
	struct Fplane4                                RetVal;                                            // 0x0048(0x0030)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreatePlane4Native_L_Nvector3_M_Nvector3_M_Nvector3_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreatePlane4Native_L_Nvector3_M_Nvector3_M_Nvector3_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreatePlane4Native_L_Nvector3_M_Nvector3_M_Nvector3_R) == 0x000078, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreatePlane4Native_L_Nvector3_M_Nvector3_M_Nvector3_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreatePlane4Native_L_Nvector3_M_Nvector3_M_Nvector3_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreatePlane4Native_L_Nvector3_M_Nvector3_M_Nvector3_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreatePlane4Native_L_Nvector3_M_Nvector3_M_Nvector3_R, RetVal) == 0x000048, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreatePlane4Native_L_Nvector3_M_Nvector3_M_Nvector3_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RCreatePlane4Native_L_Nvector3_M_Nvector3_R
// 0x0060 (0x0060 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreatePlane4Native_L_Nvector3_M_Nvector3_R final
{
public:
	struct Verse_0::Ftuple_Lvector3_Mvector3_R    __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0030)(Parm, HasGetValueTypeHash)
	struct Fplane4                                RetVal;                                            // 0x0030(0x0030)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreatePlane4Native_L_Nvector3_M_Nvector3_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreatePlane4Native_L_Nvector3_M_Nvector3_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreatePlane4Native_L_Nvector3_M_Nvector3_R) == 0x000060, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreatePlane4Native_L_Nvector3_M_Nvector3_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreatePlane4Native_L_Nvector3_M_Nvector3_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreatePlane4Native_L_Nvector3_M_Nvector3_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreatePlane4Native_L_Nvector3_M_Nvector3_R, RetVal) == 0x000030, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreatePlane4Native_L_Nvector3_M_Nvector3_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateRotationFromYawPitchRollDegrees_L_Nfloat_M_Nfloat_M_Nfloat_R
// 0x0040 (0x0040 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateRotationFromYawPitchRollDegrees_L_Nfloat_M_Nfloat_M_Nfloat_R final
{
public:
	struct Ftuple_Lfloat_Mfloat_Mfloat_R          __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0018)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVerseRotation                         RetVal;                                            // 0x0020(0x0020)(Parm, OutParm, ReturnParm, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateRotationFromYawPitchRollDegrees_L_Nfloat_M_Nfloat_M_Nfloat_R) == 0x000010, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateRotationFromYawPitchRollDegrees_L_Nfloat_M_Nfloat_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateRotationFromYawPitchRollDegrees_L_Nfloat_M_Nfloat_M_Nfloat_R) == 0x000040, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateRotationFromYawPitchRollDegrees_L_Nfloat_M_Nfloat_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateRotationFromYawPitchRollDegrees_L_Nfloat_M_Nfloat_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateRotationFromYawPitchRollDegrees_L_Nfloat_M_Nfloat_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateRotationFromYawPitchRollDegrees_L_Nfloat_M_Nfloat_M_Nfloat_R, RetVal) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateRotationFromYawPitchRollDegrees_L_Nfloat_M_Nfloat_M_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateShortestRotationBetween_L_Nrotation_M_Nrotation_R
// 0x0060 (0x0060 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateShortestRotationBetween_L_Nrotation_M_Nrotation_R final
{
public:
	struct Ftuple_Lrotation_Mrotation_R           __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0040)(Parm, HasGetValueTypeHash)
	struct FVerseRotation                         RetVal;                                            // 0x0040(0x0020)(Parm, OutParm, ReturnParm, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateShortestRotationBetween_L_Nrotation_M_Nrotation_R) == 0x000010, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateShortestRotationBetween_L_Nrotation_M_Nrotation_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateShortestRotationBetween_L_Nrotation_M_Nrotation_R) == 0x000060, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateShortestRotationBetween_L_Nrotation_M_Nrotation_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateShortestRotationBetween_L_Nrotation_M_Nrotation_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateShortestRotationBetween_L_Nrotation_M_Nrotation_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateShortestRotationBetween_L_Nrotation_M_Nrotation_R, RetVal) == 0x000040, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateShortestRotationBetween_L_Nrotation_M_Nrotation_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateShortestRotationBetween_L_Nvector3_M_Nvector3_R
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x10) Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateShortestRotationBetween_L_Nvector3_M_Nvector3_R final
{
public:
	struct Verse_0::Ftuple_Lvector3_Mvector3_R    __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0030)(Parm, HasGetValueTypeHash)
	FOptionProperty_                              RetVal;                                            // 0x0030(0x0021)(Parm, OutParm, ReturnParm, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateShortestRotationBetween_L_Nvector3_M_Nvector3_R) == 0x000010, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateShortestRotationBetween_L_Nvector3_M_Nvector3_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateShortestRotationBetween_L_Nvector3_M_Nvector3_R) == 0x000060, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateShortestRotationBetween_L_Nvector3_M_Nvector3_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateShortestRotationBetween_L_Nvector3_M_Nvector3_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateShortestRotationBetween_L_Nvector3_M_Nvector3_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateShortestRotationBetween_L_Nvector3_M_Nvector3_R, RetVal) == 0x000030, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateShortestRotationBetween_L_Nvector3_M_Nvector3_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateWithAlpha_L_Ncolor__v_M_Nfloat_R
// 0x0048 (0x0048 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateWithAlpha_L_Ncolor__v_M_Nfloat_R final
{
public:
	struct Ftuple_Lcolor__v_Mfloat_R              __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0028)(Parm, HasGetValueTypeHash)
	struct Fcolor_v                               RetVal;                                            // 0x0028(0x0020)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateWithAlpha_L_Ncolor__v_M_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateWithAlpha_L_Ncolor__v_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateWithAlpha_L_Ncolor__v_M_Nfloat_R) == 0x000048, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateWithAlpha_L_Ncolor__v_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateWithAlpha_L_Ncolor__v_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateWithAlpha_L_Ncolor__v_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateWithAlpha_L_Ncolor__v_M_Nfloat_R, RetVal) == 0x000028, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCreateWithAlpha_L_Ncolor__v_M_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector2_M_Nvector2_R
// 0x0028 (0x0028 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector2_M_Nvector2_R final
{
public:
	struct Ftuple_Lvector2_Mvector2_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector2_M_Nvector2_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector2_M_Nvector2_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector2_M_Nvector2_R) == 0x000028, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector2_M_Nvector2_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector2_M_Nvector2_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector2_M_Nvector2_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector2_M_Nvector2_R, RetVal) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector2_M_Nvector2_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector2i_M_Nvector2i_R
// 0x0028 (0x0028 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector2i_M_Nvector2i_R final
{
public:
	struct Ftuple_Lvector2i_Mvector2i_R           __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, HasGetValueTypeHash)
	int64                                         RetVal;                                            // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector2i_M_Nvector2i_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector2i_M_Nvector2i_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector2i_M_Nvector2i_R) == 0x000028, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector2i_M_Nvector2i_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector2i_M_Nvector2i_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector2i_M_Nvector2i_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector2i_M_Nvector2i_R, RetVal) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector2i_M_Nvector2i_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector3_M_Nvector3_R
// 0x0048 (0x0048 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector3_M_Nvector3_R final
{
public:
	struct Verse_0::Ftuple_Lvector3_Mvector3_R    __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0030)(Parm, HasGetValueTypeHash)
	struct Fvector3                               RetVal;                                            // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector3_M_Nvector3_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector3_M_Nvector3_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector3_M_Nvector3_R) == 0x000048, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector3_M_Nvector3_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector3_M_Nvector3_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector3_M_Nvector3_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector3_M_Nvector3_R, RetVal) == 0x000030, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector3_M_Nvector3_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector4__v_M_Nvector4__v_R
// 0x0078 (0x0078 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector4__v_M_Nvector4__v_R final
{
public:
	struct Ftuple_Lvector4__v_Mvector4__v_R       __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0050)(Parm, HasGetValueTypeHash)
	struct Fvector4_v                             RetVal;                                            // 0x0050(0x0028)(Parm, OutParm, ReturnParm, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector4__v_M_Nvector4__v_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector4__v_M_Nvector4__v_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector4__v_M_Nvector4__v_R) == 0x000078, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector4__v_M_Nvector4__v_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector4__v_M_Nvector4__v_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector4__v_M_Nvector4__v_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector4__v_M_Nvector4__v_R, RetVal) == 0x000050, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RCrossProduct_L_Nvector4__v_M_Nvector4__v_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RDegreesToRadians_L_Nfloat_R
// 0x0010 (0x0010 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDegreesToRadians_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDegreesToRadians_L_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDegreesToRadians_L_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDegreesToRadians_L_Nfloat_R) == 0x000010, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDegreesToRadians_L_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDegreesToRadians_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDegreesToRadians_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDegreesToRadians_L_Nfloat_R, RetVal) == 0x000008, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDegreesToRadians_L_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance2D_L_Nvector3_M_Nvector3_R
// 0x0038 (0x0038 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance2D_L_Nvector3_M_Nvector3_R final
{
public:
	struct Verse_0::Ftuple_Lvector3_Mvector3_R    __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0030)(Parm, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance2D_L_Nvector3_M_Nvector3_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance2D_L_Nvector3_M_Nvector3_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance2D_L_Nvector3_M_Nvector3_R) == 0x000038, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance2D_L_Nvector3_M_Nvector3_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance2D_L_Nvector3_M_Nvector3_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance2D_L_Nvector3_M_Nvector3_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance2D_L_Nvector3_M_Nvector3_R, RetVal) == 0x000030, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance2D_L_Nvector3_M_Nvector3_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector2_M_Nvector2_R
// 0x0028 (0x0028 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector2_M_Nvector2_R final
{
public:
	struct Ftuple_Lvector2_Mvector2_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector2_M_Nvector2_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector2_M_Nvector2_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector2_M_Nvector2_R) == 0x000028, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector2_M_Nvector2_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector2_M_Nvector2_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector2_M_Nvector2_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector2_M_Nvector2_R, RetVal) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector2_M_Nvector2_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector2i_M_Nvector2i_R
// 0x0028 (0x0028 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector2i_M_Nvector2i_R final
{
public:
	struct Ftuple_Lvector2i_Mvector2i_R           __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, HasGetValueTypeHash)
	int64                                         RetVal;                                            // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector2i_M_Nvector2i_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector2i_M_Nvector2i_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector2i_M_Nvector2i_R) == 0x000028, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector2i_M_Nvector2i_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector2i_M_Nvector2i_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector2i_M_Nvector2i_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector2i_M_Nvector2i_R, RetVal) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector2i_M_Nvector2i_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector3_M_Nvector3_R
// 0x0038 (0x0038 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector3_M_Nvector3_R final
{
public:
	struct Verse_0::Ftuple_Lvector3_Mvector3_R    __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0030)(Parm, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector3_M_Nvector3_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector3_M_Nvector3_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector3_M_Nvector3_R) == 0x000038, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector3_M_Nvector3_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector3_M_Nvector3_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector3_M_Nvector3_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector3_M_Nvector3_R, RetVal) == 0x000030, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector3_M_Nvector3_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector4__v_M_Nvector4__v_R
// 0x0058 (0x0058 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector4__v_M_Nvector4__v_R final
{
public:
	struct Ftuple_Lvector4__v_Mvector4__v_R       __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0050)(Parm, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector4__v_M_Nvector4__v_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector4__v_M_Nvector4__v_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector4__v_M_Nvector4__v_R) == 0x000058, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector4__v_M_Nvector4__v_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector4__v_M_Nvector4__v_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector4__v_M_Nvector4__v_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector4__v_M_Nvector4__v_R, RetVal) == 0x000050, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistance_L_Nvector4__v_M_Nvector4__v_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared2D_L_Nvector3_M_Nvector3_R
// 0x0038 (0x0038 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared2D_L_Nvector3_M_Nvector3_R final
{
public:
	struct Verse_0::Ftuple_Lvector3_Mvector3_R    __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0030)(Parm, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared2D_L_Nvector3_M_Nvector3_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared2D_L_Nvector3_M_Nvector3_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared2D_L_Nvector3_M_Nvector3_R) == 0x000038, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared2D_L_Nvector3_M_Nvector3_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared2D_L_Nvector3_M_Nvector3_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared2D_L_Nvector3_M_Nvector3_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared2D_L_Nvector3_M_Nvector3_R, RetVal) == 0x000030, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared2D_L_Nvector3_M_Nvector3_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector2_M_Nvector2_R
// 0x0028 (0x0028 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector2_M_Nvector2_R final
{
public:
	struct Ftuple_Lvector2_Mvector2_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector2_M_Nvector2_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector2_M_Nvector2_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector2_M_Nvector2_R) == 0x000028, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector2_M_Nvector2_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector2_M_Nvector2_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector2_M_Nvector2_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector2_M_Nvector2_R, RetVal) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector2_M_Nvector2_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector2i_M_Nvector2i_R
// 0x0028 (0x0028 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector2i_M_Nvector2i_R final
{
public:
	struct Ftuple_Lvector2i_Mvector2i_R           __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, HasGetValueTypeHash)
	int64                                         RetVal;                                            // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector2i_M_Nvector2i_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector2i_M_Nvector2i_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector2i_M_Nvector2i_R) == 0x000028, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector2i_M_Nvector2i_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector2i_M_Nvector2i_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector2i_M_Nvector2i_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector2i_M_Nvector2i_R, RetVal) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector2i_M_Nvector2i_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector3_M_Nvector3_R
// 0x0038 (0x0038 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector3_M_Nvector3_R final
{
public:
	struct Verse_0::Ftuple_Lvector3_Mvector3_R    __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0030)(Parm, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector3_M_Nvector3_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector3_M_Nvector3_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector3_M_Nvector3_R) == 0x000038, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector3_M_Nvector3_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector3_M_Nvector3_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector3_M_Nvector3_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector3_M_Nvector3_R, RetVal) == 0x000030, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector3_M_Nvector3_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector4__v_M_Nvector4__v_R
// 0x0058 (0x0058 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector4__v_M_Nvector4__v_R final
{
public:
	struct Ftuple_Lvector4__v_Mvector4__v_R       __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0050)(Parm, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector4__v_M_Nvector4__v_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector4__v_M_Nvector4__v_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector4__v_M_Nvector4__v_R) == 0x000058, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector4__v_M_Nvector4__v_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector4__v_M_Nvector4__v_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector4__v_M_Nvector4__v_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector4__v_M_Nvector4__v_R, RetVal) == 0x000050, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDistanceSquared_L_Nvector4__v_M_Nvector4__v_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct3D_L_Nvector4__v_M_Nvector4__v_R
// 0x0058 (0x0058 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct3D_L_Nvector4__v_M_Nvector4__v_R final
{
public:
	struct Ftuple_Lvector4__v_Mvector4__v_R       __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0050)(Parm, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct3D_L_Nvector4__v_M_Nvector4__v_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct3D_L_Nvector4__v_M_Nvector4__v_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct3D_L_Nvector4__v_M_Nvector4__v_R) == 0x000058, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct3D_L_Nvector4__v_M_Nvector4__v_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct3D_L_Nvector4__v_M_Nvector4__v_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct3D_L_Nvector4__v_M_Nvector4__v_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct3D_L_Nvector4__v_M_Nvector4__v_R, RetVal) == 0x000050, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct3D_L_Nvector4__v_M_Nvector4__v_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct4D_L_Nvector4__v_M_Nvector4__v_R
// 0x0058 (0x0058 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct4D_L_Nvector4__v_M_Nvector4__v_R final
{
public:
	struct Ftuple_Lvector4__v_Mvector4__v_R       __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0050)(Parm, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct4D_L_Nvector4__v_M_Nvector4__v_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct4D_L_Nvector4__v_M_Nvector4__v_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct4D_L_Nvector4__v_M_Nvector4__v_R) == 0x000058, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct4D_L_Nvector4__v_M_Nvector4__v_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct4D_L_Nvector4__v_M_Nvector4__v_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct4D_L_Nvector4__v_M_Nvector4__v_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct4D_L_Nvector4__v_M_Nvector4__v_R, RetVal) == 0x000050, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct4D_L_Nvector4__v_M_Nvector4__v_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct_L_Nvector2_M_Nvector2_R
// 0x0028 (0x0028 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct_L_Nvector2_M_Nvector2_R final
{
public:
	struct Ftuple_Lvector2_Mvector2_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct_L_Nvector2_M_Nvector2_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct_L_Nvector2_M_Nvector2_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct_L_Nvector2_M_Nvector2_R) == 0x000028, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct_L_Nvector2_M_Nvector2_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct_L_Nvector2_M_Nvector2_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct_L_Nvector2_M_Nvector2_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct_L_Nvector2_M_Nvector2_R, RetVal) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct_L_Nvector2_M_Nvector2_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct_L_Nvector2i_M_Nvector2i_R
// 0x0028 (0x0028 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct_L_Nvector2i_M_Nvector2i_R final
{
public:
	struct Ftuple_Lvector2i_Mvector2i_R           __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, HasGetValueTypeHash)
	int64                                         RetVal;                                            // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct_L_Nvector2i_M_Nvector2i_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct_L_Nvector2i_M_Nvector2i_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct_L_Nvector2i_M_Nvector2i_R) == 0x000028, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct_L_Nvector2i_M_Nvector2i_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct_L_Nvector2i_M_Nvector2i_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct_L_Nvector2i_M_Nvector2i_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct_L_Nvector2i_M_Nvector2i_R, RetVal) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct_L_Nvector2i_M_Nvector2i_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct_L_Nvector3_M_Nvector3_R
// 0x0038 (0x0038 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct_L_Nvector3_M_Nvector3_R final
{
public:
	struct Verse_0::Ftuple_Lvector3_Mvector3_R    __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0030)(Parm, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct_L_Nvector3_M_Nvector3_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct_L_Nvector3_M_Nvector3_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct_L_Nvector3_M_Nvector3_R) == 0x000038, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct_L_Nvector3_M_Nvector3_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct_L_Nvector3_M_Nvector3_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct_L_Nvector3_M_Nvector3_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct_L_Nvector3_M_Nvector3_R, RetVal) == 0x000030, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RDotProduct_L_Nvector3_M_Nvector3_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nrotation_M_Nrotation_M_Nfloat_R
// 0x0060 (0x0060 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nrotation_M_Nrotation_M_Nfloat_R final
{
public:
	struct Ftuple_Lrotation_Mrotation_Mfloat_R    __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0050)(Parm, HasGetValueTypeHash)
	uint8                                         RetVal : 1;                                        // 0x0050(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nrotation_M_Nrotation_M_Nfloat_R) == 0x000010, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nrotation_M_Nrotation_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nrotation_M_Nrotation_M_Nfloat_R) == 0x000060, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nrotation_M_Nrotation_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nrotation_M_Nrotation_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nrotation_M_Nrotation_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nvector2_M_Nvector2_M_Nfloat_R
// 0x0030 (0x0030 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nvector2_M_Nvector2_M_Nfloat_R final
{
public:
	struct Ftuple_Lvector2_Mvector2_Mfloat_R      __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0028)(Parm, HasGetValueTypeHash)
	uint8                                         RetVal : 1;                                        // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nvector2_M_Nvector2_M_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nvector2_M_Nvector2_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nvector2_M_Nvector2_M_Nfloat_R) == 0x000030, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nvector2_M_Nvector2_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nvector2_M_Nvector2_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nvector2_M_Nvector2_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nvector2i_M_Nvector2i_R
// 0x0028 (0x0028 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nvector2i_M_Nvector2i_R final
{
public:
	struct Ftuple_Lvector2i_Mvector2i_R           __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, HasGetValueTypeHash)
	uint8                                         RetVal : 1;                                        // 0x0020(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nvector2i_M_Nvector2i_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nvector2i_M_Nvector2i_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nvector2i_M_Nvector2i_R) == 0x000028, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nvector2i_M_Nvector2i_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nvector2i_M_Nvector2i_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nvector2i_M_Nvector2i_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nvector3_M_Nvector3_M_Nfloat_R
// 0x0040 (0x0040 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nvector3_M_Nvector3_M_Nfloat_R final
{
public:
	struct Ftuple_Lvector3_Mvector3_Mfloat_R      __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0038)(Parm, HasGetValueTypeHash)
	uint8                                         RetVal : 1;                                        // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nvector3_M_Nvector3_M_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nvector3_M_Nvector3_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nvector3_M_Nvector3_M_Nfloat_R) == 0x000040, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nvector3_M_Nvector3_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nvector3_M_Nvector3_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nvector3_M_Nvector3_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nvector4__v_M_Nvector4__v_M_Nfloat_R
// 0x0060 (0x0060 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nvector4__v_M_Nvector4__v_M_Nfloat_R final
{
public:
	struct Ftuple_Lvector4__v_Mvector4__v_Mfloat_R __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0058)(Parm, HasGetValueTypeHash)
	uint8                                         RetVal : 1;                                        // 0x0058(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nvector4__v_M_Nvector4__v_M_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nvector4__v_M_Nvector4__v_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nvector4__v_M_Nvector4__v_M_Nfloat_R) == 0x000060, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nvector4__v_M_Nvector4__v_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nvector4__v_M_Nvector4__v_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_REquals_L_Nvector4__v_M_Nvector4__v_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RExp_L_Nfloat_R
// 0x0010 (0x0010 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RExp_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RExp_L_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RExp_L_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RExp_L_Nfloat_R) == 0x000010, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RExp_L_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RExp_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RExp_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RExp_L_Nfloat_R, RetVal) == 0x000008, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RExp_L_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RFloor_L_Nfloat_R
// 0x0010 (0x0010 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RFloor_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RFloor_L_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RFloor_L_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RFloor_L_Nfloat_R) == 0x000010, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RFloor_L_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RFloor_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RFloor_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RFloor_L_Nfloat_R, RetVal) == 0x000008, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RFloor_L_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RFloor_L_Nvector2r_R
// 0x0030 (0x0030 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RFloor_L_Nvector2r_R final
{
public:
	struct Fvector2r                              __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, HasGetValueTypeHash)
	struct Fvector2i                              RetVal;                                            // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RFloor_L_Nvector2r_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RFloor_L_Nvector2r_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RFloor_L_Nvector2r_R) == 0x000030, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RFloor_L_Nvector2r_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RFloor_L_Nvector2r_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RFloor_L_Nvector2r_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RFloor_L_Nvector2r_R, RetVal) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RFloor_L_Nvector2r_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RGetAngle_L_Nrotation_R
// 0x0030 (0x0030 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetAngle_L_Nrotation_R final
{
public:
	struct FVerseRotation                         __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, NoDestructor)
	double                                        RetVal;                                            // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetAngle_L_Nrotation_R) == 0x000010, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetAngle_L_Nrotation_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetAngle_L_Nrotation_R) == 0x000030, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetAngle_L_Nrotation_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetAngle_L_Nrotation_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetAngle_L_Nrotation_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetAngle_L_Nrotation_R, RetVal) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetAngle_L_Nrotation_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RGetAxis_L_Nrotation_R
// 0x0040 (0x0040 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetAxis_L_Nrotation_R final
{
public:
	struct FVerseRotation                         __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, NoDestructor)
	struct Fvector3                               RetVal;                                            // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetAxis_L_Nrotation_R) == 0x000010, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetAxis_L_Nrotation_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetAxis_L_Nrotation_R) == 0x000040, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetAxis_L_Nrotation_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetAxis_L_Nrotation_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetAxis_L_Nrotation_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetAxis_L_Nrotation_R, RetVal) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetAxis_L_Nrotation_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalForward_L_Nrotation_R
// 0x00B0 (0x00B0 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalForward_L_Nrotation_R final
{
public:
	struct FVerseRotation                         __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, NoDestructor)
	struct Fvector3                               RetVal;                                            // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	TDelegate<void(const struct Ftuple_Lrotation_Mvector3_R& __verse_0xB2CDDD72_Argument)> _TEMP_0;                                           // 0x0038(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0xC];                                       // 0x0044(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct Ftuple_Lrotation_Mvector3_R            _TEMP_1;                                           // 0x0050(0x0040)(HasGetValueTypeHash)
	struct Fvector3                               _TEMP_2;                                           // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalForward_L_Nrotation_R) == 0x000010, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalForward_L_Nrotation_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalForward_L_Nrotation_R) == 0x0000B0, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalForward_L_Nrotation_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalForward_L_Nrotation_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalForward_L_Nrotation_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalForward_L_Nrotation_R, RetVal) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalForward_L_Nrotation_R::RetVal' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalForward_L_Nrotation_R, _TEMP_0) == 0x000038, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalForward_L_Nrotation_R::_TEMP_0' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalForward_L_Nrotation_R, _TEMP_1) == 0x000050, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalForward_L_Nrotation_R::_TEMP_1' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalForward_L_Nrotation_R, _TEMP_2) == 0x000090, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalForward_L_Nrotation_R::_TEMP_2' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalRight_L_Nrotation_R
// 0x00B0 (0x00B0 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalRight_L_Nrotation_R final
{
public:
	struct FVerseRotation                         __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, NoDestructor)
	struct Fvector3                               RetVal;                                            // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	TDelegate<void(const struct Ftuple_Lrotation_Mvector3_R& __verse_0xB2CDDD72_Argument)> _TEMP_0;                                           // 0x0038(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0xC];                                       // 0x0044(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct Ftuple_Lrotation_Mvector3_R            _TEMP_1;                                           // 0x0050(0x0040)(HasGetValueTypeHash)
	struct Fvector3                               _TEMP_2;                                           // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalRight_L_Nrotation_R) == 0x000010, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalRight_L_Nrotation_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalRight_L_Nrotation_R) == 0x0000B0, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalRight_L_Nrotation_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalRight_L_Nrotation_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalRight_L_Nrotation_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalRight_L_Nrotation_R, RetVal) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalRight_L_Nrotation_R::RetVal' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalRight_L_Nrotation_R, _TEMP_0) == 0x000038, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalRight_L_Nrotation_R::_TEMP_0' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalRight_L_Nrotation_R, _TEMP_1) == 0x000050, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalRight_L_Nrotation_R::_TEMP_1' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalRight_L_Nrotation_R, _TEMP_2) == 0x000090, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalRight_L_Nrotation_R::_TEMP_2' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalUp_L_Nrotation_R
// 0x00B0 (0x00B0 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalUp_L_Nrotation_R final
{
public:
	struct FVerseRotation                         __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, NoDestructor)
	struct Fvector3                               RetVal;                                            // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	TDelegate<void(const struct Ftuple_Lrotation_Mvector3_R& __verse_0xB2CDDD72_Argument)> _TEMP_0;                                           // 0x0038(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0xC];                                       // 0x0044(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct Ftuple_Lrotation_Mvector3_R            _TEMP_1;                                           // 0x0050(0x0040)(HasGetValueTypeHash)
	struct Fvector3                               _TEMP_2;                                           // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalUp_L_Nrotation_R) == 0x000010, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalUp_L_Nrotation_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalUp_L_Nrotation_R) == 0x0000B0, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalUp_L_Nrotation_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalUp_L_Nrotation_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalUp_L_Nrotation_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalUp_L_Nrotation_R, RetVal) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalUp_L_Nrotation_R::RetVal' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalUp_L_Nrotation_R, _TEMP_0) == 0x000038, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalUp_L_Nrotation_R::_TEMP_0' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalUp_L_Nrotation_R, _TEMP_1) == 0x000050, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalUp_L_Nrotation_R::_TEMP_1' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalUp_L_Nrotation_R, _TEMP_2) == 0x000090, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetLocalUp_L_Nrotation_R::_TEMP_2' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RGetRandomFloat_L_Nfloat_M_Nfloat_R
// 0x0018 (0x0018 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetRandomFloat_L_Nfloat_M_Nfloat_R final
{
public:
	struct Verse_0::Ftuple_Lfloat_Mfloat_R        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0010)(Parm, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetRandomFloat_L_Nfloat_M_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetRandomFloat_L_Nfloat_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetRandomFloat_L_Nfloat_M_Nfloat_R) == 0x000018, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetRandomFloat_L_Nfloat_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetRandomFloat_L_Nfloat_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetRandomFloat_L_Nfloat_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetRandomFloat_L_Nfloat_M_Nfloat_R, RetVal) == 0x000010, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetRandomFloat_L_Nfloat_M_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RGetRandomInt_L_Nint_M_Nint_R
// 0x0018 (0x0018 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetRandomInt_L_Nint_M_Nint_R final
{
public:
	struct Verse_0::Ftuple_Lint_Mint_R            __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0010)(Parm, HasGetValueTypeHash)
	int64                                         RetVal;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetRandomInt_L_Nint_M_Nint_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetRandomInt_L_Nint_M_Nint_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetRandomInt_L_Nint_M_Nint_R) == 0x000018, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetRandomInt_L_Nint_M_Nint_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetRandomInt_L_Nint_M_Nint_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetRandomInt_L_Nint_M_Nint_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetRandomInt_L_Nint_M_Nint_R, RetVal) == 0x000010, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetRandomInt_L_Nint_M_Nint_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RGetYawPitchRollDegrees_L_Nrotation_R
// 0x0030 (0x0030 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetYawPitchRollDegrees_L_Nrotation_R final
{
public:
	struct FVerseRotation                         __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, NoDestructor)
	TArray<double>                                RetVal;                                            // 0x0020(0x0010)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetYawPitchRollDegrees_L_Nrotation_R) == 0x000010, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetYawPitchRollDegrees_L_Nrotation_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetYawPitchRollDegrees_L_Nrotation_R) == 0x000030, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetYawPitchRollDegrees_L_Nrotation_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetYawPitchRollDegrees_L_Nrotation_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetYawPitchRollDegrees_L_Nrotation_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetYawPitchRollDegrees_L_Nrotation_R, RetVal) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RGetYawPitchRollDegrees_L_Nrotation_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RIdentityRotation
// 0x0030 (0x0030 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RIdentityRotation final
{
public:
	struct Verse_0::Ftuple_L_R                    __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVerseRotation                         RetVal;                                            // 0x0010(0x0020)(Parm, OutParm, ReturnParm, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RIdentityRotation) == 0x000010, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RIdentityRotation");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RIdentityRotation) == 0x000030, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RIdentityRotation");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RIdentityRotation, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RIdentityRotation::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RIdentityRotation, RetVal) == 0x000010, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RIdentityRotation::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector2_M_Nvector2_M_Nfloat_R
// 0x0128 (0x0128 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector2_M_Nvector2_M_Nfloat_R final
{
public:
	struct Ftuple_Lvector2_Mvector2_Mfloat_R      __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0028)(Parm, HasGetValueTypeHash)
	struct Fvector2                               RetVal;                                            // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	struct Fvector2                               __verse_0xD6AE00B1_Delta_1;                        // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TDelegate<void(const struct Ftuple_Lvector2_Mvector2_R& __verse_0xB2CDDD72_Argument)> _TEMP_0;                                           // 0x0048(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct Ftuple_Lvector2_Mvector2_R             _TEMP_1;                                           // 0x0058(0x0020)(HasGetValueTypeHash)
	double                                        __verse_0xC94A8524_DeltaM_1;                       // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const struct Fvector2& __verse_0xB2CDDD72_Argument)> _TEMP_2;                                           // 0x0080(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FOptionProperty_                              _TEMP_3;                                           // 0x0090(0x0009)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FOptionProperty_                              _TEMP_4;                                           // 0x00A0(0x0009)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct Ftuple_Lvector2_Mvector2_R& __verse_0xB2CDDD72_Argument)> _TEMP_5;                                           // 0x00AC(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct Ftuple_Lvector2_Mvector2_R             _TEMP_6;                                           // 0x00B8(0x0020)(HasGetValueTypeHash)
	TDelegate<void(const struct Ftuple_Lvector2_Mfloat_R& __verse_0xB2CDDD72_Argument)> _TEMP_7;                                           // 0x00D8(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct Ftuple_Lvector2_Mfloat_R               _TEMP_8;                                           // 0x00E8(0x0018)(HasGetValueTypeHash)
	TDelegate<void(const struct Ftuple_Lvector2_Mfloat_R& __verse_0xB2CDDD72_Argument)> _TEMP_9;                                           // 0x0100(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct Ftuple_Lvector2_Mfloat_R               _TEMP_10;                                          // 0x0110(0x0018)(HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector2_M_Nvector2_M_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector2_M_Nvector2_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector2_M_Nvector2_M_Nfloat_R) == 0x000128, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector2_M_Nvector2_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector2_M_Nvector2_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector2_M_Nvector2_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector2_M_Nvector2_M_Nfloat_R, RetVal) == 0x000028, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector2_M_Nvector2_M_Nfloat_R::RetVal' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector2_M_Nvector2_M_Nfloat_R, __verse_0xD6AE00B1_Delta_1) == 0x000038, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector2_M_Nvector2_M_Nfloat_R::__verse_0xD6AE00B1_Delta_1' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector2_M_Nvector2_M_Nfloat_R, _TEMP_0) == 0x000048, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector2_M_Nvector2_M_Nfloat_R::_TEMP_0' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector2_M_Nvector2_M_Nfloat_R, _TEMP_1) == 0x000058, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector2_M_Nvector2_M_Nfloat_R::_TEMP_1' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector2_M_Nvector2_M_Nfloat_R, __verse_0xC94A8524_DeltaM_1) == 0x000078, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector2_M_Nvector2_M_Nfloat_R::__verse_0xC94A8524_DeltaM_1' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector2_M_Nvector2_M_Nfloat_R, _TEMP_2) == 0x000080, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector2_M_Nvector2_M_Nfloat_R::_TEMP_2' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector2_M_Nvector2_M_Nfloat_R, _TEMP_3) == 0x000090, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector2_M_Nvector2_M_Nfloat_R::_TEMP_3' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector2_M_Nvector2_M_Nfloat_R, _TEMP_4) == 0x0000A0, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector2_M_Nvector2_M_Nfloat_R::_TEMP_4' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector2_M_Nvector2_M_Nfloat_R, _TEMP_5) == 0x0000AC, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector2_M_Nvector2_M_Nfloat_R::_TEMP_5' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector2_M_Nvector2_M_Nfloat_R, _TEMP_6) == 0x0000B8, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector2_M_Nvector2_M_Nfloat_R::_TEMP_6' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector2_M_Nvector2_M_Nfloat_R, _TEMP_7) == 0x0000D8, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector2_M_Nvector2_M_Nfloat_R::_TEMP_7' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector2_M_Nvector2_M_Nfloat_R, _TEMP_8) == 0x0000E8, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector2_M_Nvector2_M_Nfloat_R::_TEMP_8' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector2_M_Nvector2_M_Nfloat_R, _TEMP_9) == 0x000100, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector2_M_Nvector2_M_Nfloat_R::_TEMP_9' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector2_M_Nvector2_M_Nfloat_R, _TEMP_10) == 0x000110, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector2_M_Nvector2_M_Nfloat_R::_TEMP_10' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector3_M_Nvector3_M_Nfloat_R
// 0x0178 (0x0178 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector3_M_Nvector3_M_Nfloat_R final
{
public:
	struct Ftuple_Lvector3_Mvector3_Mfloat_R      __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0038)(Parm, HasGetValueTypeHash)
	struct Fvector3                               RetVal;                                            // 0x0038(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	struct Fvector3                               __verse_0xD6AE00B1_Delta_1;                        // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TDelegate<void(const struct Verse_0::Ftuple_Lvector3_Mvector3_R& __verse_0xB2CDDD72_Argument)> _TEMP_0;                                           // 0x0068(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct Verse_0::Ftuple_Lvector3_Mvector3_R    _TEMP_1;                                           // 0x0078(0x0030)(HasGetValueTypeHash)
	double                                        __verse_0xC94A8524_DeltaM_1;                       // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const struct Fvector3& __verse_0xB2CDDD72_Argument)> _TEMP_2;                                           // 0x00B0(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FOptionProperty_                              _TEMP_3;                                           // 0x00C0(0x0009)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FOptionProperty_                              _TEMP_4;                                           // 0x00D0(0x0009)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct Verse_0::Ftuple_Lvector3_Mvector3_R& __verse_0xB2CDDD72_Argument)> _TEMP_5;                                           // 0x00DC(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct Verse_0::Ftuple_Lvector3_Mvector3_R    _TEMP_6;                                           // 0x00E8(0x0030)(HasGetValueTypeHash)
	TDelegate<void(const struct Ftuple_Lvector3_Mfloat_R& __verse_0xB2CDDD72_Argument)> _TEMP_7;                                           // 0x0118(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct Ftuple_Lvector3_Mfloat_R               _TEMP_8;                                           // 0x0128(0x0020)(HasGetValueTypeHash)
	TDelegate<void(const struct Ftuple_Lvector3_Mfloat_R& __verse_0xB2CDDD72_Argument)> _TEMP_9;                                           // 0x0148(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct Ftuple_Lvector3_Mfloat_R               _TEMP_10;                                          // 0x0158(0x0020)(HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector3_M_Nvector3_M_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector3_M_Nvector3_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector3_M_Nvector3_M_Nfloat_R) == 0x000178, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector3_M_Nvector3_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector3_M_Nvector3_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector3_M_Nvector3_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector3_M_Nvector3_M_Nfloat_R, RetVal) == 0x000038, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector3_M_Nvector3_M_Nfloat_R::RetVal' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector3_M_Nvector3_M_Nfloat_R, __verse_0xD6AE00B1_Delta_1) == 0x000050, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector3_M_Nvector3_M_Nfloat_R::__verse_0xD6AE00B1_Delta_1' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector3_M_Nvector3_M_Nfloat_R, _TEMP_0) == 0x000068, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector3_M_Nvector3_M_Nfloat_R::_TEMP_0' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector3_M_Nvector3_M_Nfloat_R, _TEMP_1) == 0x000078, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector3_M_Nvector3_M_Nfloat_R::_TEMP_1' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector3_M_Nvector3_M_Nfloat_R, __verse_0xC94A8524_DeltaM_1) == 0x0000A8, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector3_M_Nvector3_M_Nfloat_R::__verse_0xC94A8524_DeltaM_1' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector3_M_Nvector3_M_Nfloat_R, _TEMP_2) == 0x0000B0, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector3_M_Nvector3_M_Nfloat_R::_TEMP_2' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector3_M_Nvector3_M_Nfloat_R, _TEMP_3) == 0x0000C0, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector3_M_Nvector3_M_Nfloat_R::_TEMP_3' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector3_M_Nvector3_M_Nfloat_R, _TEMP_4) == 0x0000D0, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector3_M_Nvector3_M_Nfloat_R::_TEMP_4' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector3_M_Nvector3_M_Nfloat_R, _TEMP_5) == 0x0000DC, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector3_M_Nvector3_M_Nfloat_R::_TEMP_5' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector3_M_Nvector3_M_Nfloat_R, _TEMP_6) == 0x0000E8, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector3_M_Nvector3_M_Nfloat_R::_TEMP_6' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector3_M_Nvector3_M_Nfloat_R, _TEMP_7) == 0x000118, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector3_M_Nvector3_M_Nfloat_R::_TEMP_7' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector3_M_Nvector3_M_Nfloat_R, _TEMP_8) == 0x000128, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector3_M_Nvector3_M_Nfloat_R::_TEMP_8' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector3_M_Nvector3_M_Nfloat_R, _TEMP_9) == 0x000148, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector3_M_Nvector3_M_Nfloat_R::_TEMP_9' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector3_M_Nvector3_M_Nfloat_R, _TEMP_10) == 0x000158, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInterpolateTo_L_Nvector3_M_Nvector3_M_Nfloat_R::_TEMP_10' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RInvertRotation_L_Nrotation_R
// 0x0040 (0x0040 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInvertRotation_L_Nrotation_R final
{
public:
	struct FVerseRotation                         __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, NoDestructor)
	struct FVerseRotation                         RetVal;                                            // 0x0020(0x0020)(Parm, OutParm, ReturnParm, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInvertRotation_L_Nrotation_R) == 0x000010, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInvertRotation_L_Nrotation_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInvertRotation_L_Nrotation_R) == 0x000040, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInvertRotation_L_Nrotation_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInvertRotation_L_Nrotation_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInvertRotation_L_Nrotation_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInvertRotation_L_Nrotation_R, RetVal) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInvertRotation_L_Nrotation_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RInvSqrt_L_Nfloat_R
// 0x0020 (0x0020 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInvSqrt_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(double __verse_0xB2CDDD72_Argument)> _TEMP_0;                                           // 0x0010(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInvSqrt_L_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInvSqrt_L_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInvSqrt_L_Nfloat_R) == 0x000020, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInvSqrt_L_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInvSqrt_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInvSqrt_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInvSqrt_L_Nfloat_R, RetVal) == 0x000008, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInvSqrt_L_Nfloat_R::RetVal' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInvSqrt_L_Nfloat_R, _TEMP_0) == 0x000010, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RInvSqrt_L_Nfloat_R::_TEMP_0' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RIsFinite_L_Nfloat_R
// 0x0010 (0x0010 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RIsFinite_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         RetVal : 1;                                        // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RIsFinite_L_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RIsFinite_L_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RIsFinite_L_Nfloat_R) == 0x000010, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RIsFinite_L_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RIsFinite_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RIsFinite_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RIsNaN_L_Nfloat_R
// 0x0010 (0x0010 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RIsNaN_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         RetVal : 1;                                        // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RIsNaN_L_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RIsNaN_L_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RIsNaN_L_Nfloat_R) == 0x000010, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RIsNaN_L_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RIsNaN_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RIsNaN_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RIsNearlyEqual_L_Nfloat_M_Nfloat_M_Nfloat_R
// 0x0020 (0x0020 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RIsNearlyEqual_L_Nfloat_M_Nfloat_M_Nfloat_R final
{
public:
	struct Ftuple_Lfloat_Mfloat_Mfloat_R          __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0018)(Parm, HasGetValueTypeHash)
	uint8                                         RetVal : 1;                                        // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RIsNearlyEqual_L_Nfloat_M_Nfloat_M_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RIsNearlyEqual_L_Nfloat_M_Nfloat_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RIsNearlyEqual_L_Nfloat_M_Nfloat_M_Nfloat_R) == 0x000020, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RIsNearlyEqual_L_Nfloat_M_Nfloat_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RIsNearlyEqual_L_Nfloat_M_Nfloat_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RIsNearlyEqual_L_Nfloat_M_Nfloat_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RIsNearlyZero_L_Nfloat_M_Nfloat_R
// 0x0018 (0x0018 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RIsNearlyZero_L_Nfloat_M_Nfloat_R final
{
public:
	struct Verse_0::Ftuple_Lfloat_Mfloat_R        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0010)(Parm, HasGetValueTypeHash)
	uint8                                         RetVal : 1;                                        // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash))
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RIsNearlyZero_L_Nfloat_M_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RIsNearlyZero_L_Nfloat_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RIsNearlyZero_L_Nfloat_M_Nfloat_R) == 0x000018, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RIsNearlyZero_L_Nfloat_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RIsNearlyZero_L_Nfloat_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RIsNearlyZero_L_Nfloat_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nfloat_M_Nfloat_M_Nfloat_R
// 0x0028 (0x0028 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nfloat_M_Nfloat_M_Nfloat_R final
{
public:
	struct Ftuple_Lfloat_Mfloat_Mfloat_R          __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0018)(Parm, HasGetValueTypeHash)
	FOptionProperty_                              RetVal;                                            // 0x0018(0x0009)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nfloat_M_Nfloat_M_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nfloat_M_Nfloat_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nfloat_M_Nfloat_M_Nfloat_R) == 0x000028, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nfloat_M_Nfloat_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nfloat_M_Nfloat_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nfloat_M_Nfloat_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nfloat_M_Nfloat_M_Nfloat_R, RetVal) == 0x000018, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nfloat_M_Nfloat_M_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector2_M_Nvector2_M_Nfloat_R
// 0x0088 (0x0088 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector2_M_Nvector2_M_Nfloat_R final
{
public:
	struct Ftuple_Lvector2_Mvector2_Mfloat_R      __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0028)(Parm, HasGetValueTypeHash)
	struct Fvector2                               RetVal;                                            // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	TDelegate<void(const struct Ftuple_Lfloat_Mfloat_Mfloat_R& __verse_0xB2CDDD72_Argument)> _TEMP_0;                                           // 0x0038(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct Ftuple_Lfloat_Mfloat_Mfloat_R          _TEMP_1;                                           // 0x0048(0x0018)(HasGetValueTypeHash)
	TDelegate<void(const struct Ftuple_Lfloat_Mfloat_Mfloat_R& __verse_0xB2CDDD72_Argument)> _TEMP_2;                                           // 0x0060(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct Ftuple_Lfloat_Mfloat_Mfloat_R          _TEMP_3;                                           // 0x0070(0x0018)(HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector2_M_Nvector2_M_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector2_M_Nvector2_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector2_M_Nvector2_M_Nfloat_R) == 0x000088, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector2_M_Nvector2_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector2_M_Nvector2_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector2_M_Nvector2_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector2_M_Nvector2_M_Nfloat_R, RetVal) == 0x000028, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector2_M_Nvector2_M_Nfloat_R::RetVal' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector2_M_Nvector2_M_Nfloat_R, _TEMP_0) == 0x000038, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector2_M_Nvector2_M_Nfloat_R::_TEMP_0' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector2_M_Nvector2_M_Nfloat_R, _TEMP_1) == 0x000048, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector2_M_Nvector2_M_Nfloat_R::_TEMP_1' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector2_M_Nvector2_M_Nfloat_R, _TEMP_2) == 0x000060, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector2_M_Nvector2_M_Nfloat_R::_TEMP_2' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector2_M_Nvector2_M_Nfloat_R, _TEMP_3) == 0x000070, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector2_M_Nvector2_M_Nfloat_R::_TEMP_3' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector3_M_Nvector3_M_Nfloat_R
// 0x00C8 (0x00C8 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector3_M_Nvector3_M_Nfloat_R final
{
public:
	struct Ftuple_Lvector3_Mvector3_Mfloat_R      __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0038)(Parm, HasGetValueTypeHash)
	struct Fvector3                               RetVal;                                            // 0x0038(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	TDelegate<void(const struct Ftuple_Lfloat_Mfloat_Mfloat_R& __verse_0xB2CDDD72_Argument)> _TEMP_0;                                           // 0x0050(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct Ftuple_Lfloat_Mfloat_Mfloat_R          _TEMP_1;                                           // 0x0060(0x0018)(HasGetValueTypeHash)
	TDelegate<void(const struct Ftuple_Lfloat_Mfloat_Mfloat_R& __verse_0xB2CDDD72_Argument)> _TEMP_2;                                           // 0x0078(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct Ftuple_Lfloat_Mfloat_Mfloat_R          _TEMP_3;                                           // 0x0088(0x0018)(HasGetValueTypeHash)
	TDelegate<void(const struct Ftuple_Lfloat_Mfloat_Mfloat_R& __verse_0xB2CDDD72_Argument)> _TEMP_4;                                           // 0x00A0(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct Ftuple_Lfloat_Mfloat_Mfloat_R          _TEMP_5;                                           // 0x00B0(0x0018)(HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector3_M_Nvector3_M_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector3_M_Nvector3_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector3_M_Nvector3_M_Nfloat_R) == 0x0000C8, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector3_M_Nvector3_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector3_M_Nvector3_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector3_M_Nvector3_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector3_M_Nvector3_M_Nfloat_R, RetVal) == 0x000038, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector3_M_Nvector3_M_Nfloat_R::RetVal' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector3_M_Nvector3_M_Nfloat_R, _TEMP_0) == 0x000050, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector3_M_Nvector3_M_Nfloat_R::_TEMP_0' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector3_M_Nvector3_M_Nfloat_R, _TEMP_1) == 0x000060, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector3_M_Nvector3_M_Nfloat_R::_TEMP_1' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector3_M_Nvector3_M_Nfloat_R, _TEMP_2) == 0x000078, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector3_M_Nvector3_M_Nfloat_R::_TEMP_2' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector3_M_Nvector3_M_Nfloat_R, _TEMP_3) == 0x000088, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector3_M_Nvector3_M_Nfloat_R::_TEMP_3' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector3_M_Nvector3_M_Nfloat_R, _TEMP_4) == 0x0000A0, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector3_M_Nvector3_M_Nfloat_R::_TEMP_4' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector3_M_Nvector3_M_Nfloat_R, _TEMP_5) == 0x0000B0, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerp_L_Nvector3_M_Nvector3_M_Nfloat_R::_TEMP_5' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RLerpClamped_L_Nfloat_M_Nfloat_M_Nfloat_R
// 0x0020 (0x0020 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerpClamped_L_Nfloat_M_Nfloat_M_Nfloat_R final
{
public:
	struct Ftuple_Lfloat_Mfloat_Mfloat_R          __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0018)(Parm, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerpClamped_L_Nfloat_M_Nfloat_M_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerpClamped_L_Nfloat_M_Nfloat_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerpClamped_L_Nfloat_M_Nfloat_M_Nfloat_R) == 0x000020, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerpClamped_L_Nfloat_M_Nfloat_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerpClamped_L_Nfloat_M_Nfloat_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerpClamped_L_Nfloat_M_Nfloat_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerpClamped_L_Nfloat_M_Nfloat_M_Nfloat_R, RetVal) == 0x000018, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLerpClamped_L_Nfloat_M_Nfloat_M_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RLn_L_Nfloat_R
// 0x0010 (0x0010 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLn_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLn_L_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLn_L_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLn_L_Nfloat_R) == 0x000010, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLn_L_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLn_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLn_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLn_L_Nfloat_R, RetVal) == 0x000008, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLn_L_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RLog_L_Nfloat_M_Nfloat_R
// 0x0018 (0x0018 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLog_L_Nfloat_M_Nfloat_R final
{
public:
	struct Verse_0::Ftuple_Lfloat_Mfloat_R        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0010)(Parm, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLog_L_Nfloat_M_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLog_L_Nfloat_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLog_L_Nfloat_M_Nfloat_R) == 0x000018, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLog_L_Nfloat_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLog_L_Nfloat_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLog_L_Nfloat_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLog_L_Nfloat_M_Nfloat_R, RetVal) == 0x000010, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RLog_L_Nfloat_M_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RMax_L_Nfloat_M_Nfloat_M_Nfloat_R
// 0x0020 (0x0020 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMax_L_Nfloat_M_Nfloat_M_Nfloat_R final
{
public:
	struct Ftuple_Lfloat_Mfloat_Mfloat_R          __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0018)(Parm, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMax_L_Nfloat_M_Nfloat_M_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMax_L_Nfloat_M_Nfloat_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMax_L_Nfloat_M_Nfloat_M_Nfloat_R) == 0x000020, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMax_L_Nfloat_M_Nfloat_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMax_L_Nfloat_M_Nfloat_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMax_L_Nfloat_M_Nfloat_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMax_L_Nfloat_M_Nfloat_M_Nfloat_R, RetVal) == 0x000018, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMax_L_Nfloat_M_Nfloat_M_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RMax_L_Nfloat_M_Nfloat_R
// 0x0018 (0x0018 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMax_L_Nfloat_M_Nfloat_R final
{
public:
	struct Verse_0::Ftuple_Lfloat_Mfloat_R        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0010)(Parm, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMax_L_Nfloat_M_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMax_L_Nfloat_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMax_L_Nfloat_M_Nfloat_R) == 0x000018, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMax_L_Nfloat_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMax_L_Nfloat_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMax_L_Nfloat_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMax_L_Nfloat_M_Nfloat_R, RetVal) == 0x000010, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMax_L_Nfloat_M_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RMin_L_Nfloat_M_Nfloat_M_Nfloat_R
// 0x0020 (0x0020 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMin_L_Nfloat_M_Nfloat_M_Nfloat_R final
{
public:
	struct Ftuple_Lfloat_Mfloat_Mfloat_R          __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0018)(Parm, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMin_L_Nfloat_M_Nfloat_M_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMin_L_Nfloat_M_Nfloat_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMin_L_Nfloat_M_Nfloat_M_Nfloat_R) == 0x000020, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMin_L_Nfloat_M_Nfloat_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMin_L_Nfloat_M_Nfloat_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMin_L_Nfloat_M_Nfloat_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMin_L_Nfloat_M_Nfloat_M_Nfloat_R, RetVal) == 0x000018, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMin_L_Nfloat_M_Nfloat_M_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RMin_L_Nfloat_M_Nfloat_R
// 0x0018 (0x0018 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMin_L_Nfloat_M_Nfloat_R final
{
public:
	struct Verse_0::Ftuple_Lfloat_Mfloat_R        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0010)(Parm, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMin_L_Nfloat_M_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMin_L_Nfloat_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMin_L_Nfloat_M_Nfloat_R) == 0x000018, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMin_L_Nfloat_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMin_L_Nfloat_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMin_L_Nfloat_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMin_L_Nfloat_M_Nfloat_R, RetVal) == 0x000010, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMin_L_Nfloat_M_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RMod_L_Nint_M_Nint_R
// 0x0020 (0x0020 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMod_L_Nint_M_Nint_R final
{
public:
	struct Verse_0::Ftuple_Lint_Mint_R            __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0010)(Parm, HasGetValueTypeHash)
	FOptionProperty_                              RetVal;                                            // 0x0010(0x0009)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMod_L_Nint_M_Nint_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMod_L_Nint_M_Nint_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMod_L_Nint_M_Nint_R) == 0x000020, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMod_L_Nint_M_Nint_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMod_L_Nint_M_Nint_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMod_L_Nint_M_Nint_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMod_L_Nint_M_Nint_R, RetVal) == 0x000010, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RMod_L_Nint_M_Nint_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RNormal_L_Nvector2_R
// 0x0028 (0x0028 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RNormal_L_Nvector2_R final
{
public:
	struct Fvector2                               __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	FOptionProperty_                              RetVal;                                            // 0x0010(0x0011)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RNormal_L_Nvector2_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RNormal_L_Nvector2_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RNormal_L_Nvector2_R) == 0x000028, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RNormal_L_Nvector2_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RNormal_L_Nvector2_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RNormal_L_Nvector2_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RNormal_L_Nvector2_R, RetVal) == 0x000010, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RNormal_L_Nvector2_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RNormal_L_Nvector3_R
// 0x0038 (0x0038 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RNormal_L_Nvector3_R final
{
public:
	struct Fvector3                               __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	FOptionProperty_                              RetVal;                                            // 0x0018(0x0019)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RNormal_L_Nvector3_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RNormal_L_Nvector3_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RNormal_L_Nvector3_R) == 0x000038, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RNormal_L_Nvector3_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RNormal_L_Nvector3_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RNormal_L_Nvector3_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RNormal_L_Nvector3_R, RetVal) == 0x000018, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RNormal_L_Nvector3_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RNormal_L_Nvector4__v_R
// 0x0058 (0x0058 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RNormal_L_Nvector4__v_R final
{
public:
	struct Fvector4_v                             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0028)(Parm, NoDestructor)
	FOptionProperty_                              RetVal;                                            // 0x0028(0x0029)(Parm, OutParm, ReturnParm, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RNormal_L_Nvector4__v_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RNormal_L_Nvector4__v_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RNormal_L_Nvector4__v_R) == 0x000058, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RNormal_L_Nvector4__v_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RNormal_L_Nvector4__v_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RNormal_L_Nvector4__v_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RNormal_L_Nvector4__v_R, RetVal) == 0x000028, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RNormal_L_Nvector4__v_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nfloat_M_Nvector2_R
// 0x0028 (0x0028 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nfloat_M_Nvector2_R final
{
public:
	struct Ftuple_Lfloat_Mvector2_R               __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0018)(Parm, HasGetValueTypeHash)
	struct Fvector2                               RetVal;                                            // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nfloat_M_Nvector2_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nfloat_M_Nvector2_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nfloat_M_Nvector2_R) == 0x000028, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nfloat_M_Nvector2_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nfloat_M_Nvector2_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nfloat_M_Nvector2_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nfloat_M_Nvector2_R, RetVal) == 0x000018, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nfloat_M_Nvector2_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nfloat_M_Nvector3_R
// 0x0038 (0x0038 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nfloat_M_Nvector3_R final
{
public:
	struct Ftuple_Lfloat_Mvector3_R               __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, HasGetValueTypeHash)
	struct Fvector3                               RetVal;                                            // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nfloat_M_Nvector3_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nfloat_M_Nvector3_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nfloat_M_Nvector3_R) == 0x000038, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nfloat_M_Nvector3_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nfloat_M_Nvector3_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nfloat_M_Nvector3_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nfloat_M_Nvector3_R, RetVal) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nfloat_M_Nvector3_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nfloat_M_Nvector4__v_R
// 0x0058 (0x0058 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nfloat_M_Nvector4__v_R final
{
public:
	struct Ftuple_Lfloat_Mvector4__v_R            __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0030)(Parm, HasGetValueTypeHash)
	struct Fvector4_v                             RetVal;                                            // 0x0030(0x0028)(Parm, OutParm, ReturnParm, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nfloat_M_Nvector4__v_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nfloat_M_Nvector4__v_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nfloat_M_Nvector4__v_R) == 0x000058, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nfloat_M_Nvector4__v_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nfloat_M_Nvector4__v_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nfloat_M_Nvector4__v_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nfloat_M_Nvector4__v_R, RetVal) == 0x000030, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nfloat_M_Nvector4__v_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nint_M_Nvector2i_R
// 0x0028 (0x0028 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nint_M_Nvector2i_R final
{
public:
	struct Ftuple_Lint_Mvector2i_R                __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0018)(Parm, HasGetValueTypeHash)
	struct Fvector2i                              RetVal;                                            // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nint_M_Nvector2i_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nint_M_Nvector2i_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nint_M_Nvector2i_R) == 0x000028, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nint_M_Nvector2i_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nint_M_Nvector2i_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nint_M_Nvector2i_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nint_M_Nvector2i_R, RetVal) == 0x000018, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nint_M_Nvector2i_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2_M_Nfloat_R
// 0x0028 (0x0028 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2_M_Nfloat_R final
{
public:
	struct Ftuple_Lvector2_Mfloat_R               __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0018)(Parm, HasGetValueTypeHash)
	struct Fvector2                               RetVal;                                            // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2_M_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2_M_Nfloat_R) == 0x000028, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2_M_Nfloat_R, RetVal) == 0x000018, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2_M_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2_M_Nvector2_R
// 0x0030 (0x0030 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2_M_Nvector2_R final
{
public:
	struct Ftuple_Lvector2_Mvector2_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, HasGetValueTypeHash)
	struct Fvector2                               RetVal;                                            // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2_M_Nvector2_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2_M_Nvector2_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2_M_Nvector2_R) == 0x000030, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2_M_Nvector2_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2_M_Nvector2_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2_M_Nvector2_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2_M_Nvector2_R, RetVal) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2_M_Nvector2_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2i_M_Nint_R
// 0x0028 (0x0028 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2i_M_Nint_R final
{
public:
	struct Ftuple_Lvector2i_Mint_R                __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0018)(Parm, HasGetValueTypeHash)
	struct Fvector2i                              RetVal;                                            // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2i_M_Nint_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2i_M_Nint_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2i_M_Nint_R) == 0x000028, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2i_M_Nint_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2i_M_Nint_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2i_M_Nint_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2i_M_Nint_R, RetVal) == 0x000018, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2i_M_Nint_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2i_M_Nvector2i_R
// 0x0030 (0x0030 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2i_M_Nvector2i_R final
{
public:
	struct Ftuple_Lvector2i_Mvector2i_R           __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, HasGetValueTypeHash)
	struct Fvector2i                              RetVal;                                            // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2i_M_Nvector2i_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2i_M_Nvector2i_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2i_M_Nvector2i_R) == 0x000030, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2i_M_Nvector2i_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2i_M_Nvector2i_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2i_M_Nvector2i_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2i_M_Nvector2i_R, RetVal) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector2i_M_Nvector2i_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector3_M_Nfloat_R
// 0x0038 (0x0038 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector3_M_Nfloat_R final
{
public:
	struct Ftuple_Lvector3_Mfloat_R               __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, HasGetValueTypeHash)
	struct Fvector3                               RetVal;                                            // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector3_M_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector3_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector3_M_Nfloat_R) == 0x000038, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector3_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector3_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector3_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector3_M_Nfloat_R, RetVal) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector3_M_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector3_M_Nvector3_R
// 0x0048 (0x0048 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector3_M_Nvector3_R final
{
public:
	struct Verse_0::Ftuple_Lvector3_Mvector3_R    __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0030)(Parm, HasGetValueTypeHash)
	struct Fvector3                               RetVal;                                            // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector3_M_Nvector3_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector3_M_Nvector3_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector3_M_Nvector3_R) == 0x000048, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector3_M_Nvector3_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector3_M_Nvector3_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector3_M_Nvector3_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector3_M_Nvector3_R, RetVal) == 0x000030, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector3_M_Nvector3_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector4__v_M_Nfloat_R
// 0x0058 (0x0058 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector4__v_M_Nfloat_R final
{
public:
	struct Ftuple_Lvector4__v_Mfloat_R            __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0030)(Parm, HasGetValueTypeHash)
	struct Fvector4_v                             RetVal;                                            // 0x0030(0x0028)(Parm, OutParm, ReturnParm, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector4__v_M_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector4__v_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector4__v_M_Nfloat_R) == 0x000058, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector4__v_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector4__v_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector4__v_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector4__v_M_Nfloat_R, RetVal) == 0x000030, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector4__v_M_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector4__v_M_Nvector4__v_R
// 0x0078 (0x0078 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector4__v_M_Nvector4__v_R final
{
public:
	struct Ftuple_Lvector4__v_Mvector4__v_R       __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0050)(Parm, HasGetValueTypeHash)
	struct Fvector4_v                             RetVal;                                            // 0x0050(0x0028)(Parm, OutParm, ReturnParm, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector4__v_M_Nvector4__v_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector4__v_M_Nvector4__v_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector4__v_M_Nvector4__v_R) == 0x000078, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector4__v_M_Nvector4__v_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector4__v_M_Nvector4__v_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector4__v_M_Nvector4__v_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector4__v_M_Nvector4__v_R, RetVal) == 0x000050, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2a_27_L_Nvector4__v_M_Nvector4__v_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector2_M_Nvector2_R
// 0x0030 (0x0030 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector2_M_Nvector2_R final
{
public:
	struct Ftuple_Lvector2_Mvector2_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, HasGetValueTypeHash)
	struct Fvector2                               RetVal;                                            // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector2_M_Nvector2_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector2_M_Nvector2_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector2_M_Nvector2_R) == 0x000030, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector2_M_Nvector2_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector2_M_Nvector2_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector2_M_Nvector2_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector2_M_Nvector2_R, RetVal) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector2_M_Nvector2_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector2i_M_Nvector2i_R
// 0x0030 (0x0030 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector2i_M_Nvector2i_R final
{
public:
	struct Ftuple_Lvector2i_Mvector2i_R           __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, HasGetValueTypeHash)
	struct Fvector2i                              RetVal;                                            // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector2i_M_Nvector2i_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector2i_M_Nvector2i_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector2i_M_Nvector2i_R) == 0x000030, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector2i_M_Nvector2i_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector2i_M_Nvector2i_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector2i_M_Nvector2i_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector2i_M_Nvector2i_R, RetVal) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector2i_M_Nvector2i_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector3_M_Nvector3_R
// 0x0048 (0x0048 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector3_M_Nvector3_R final
{
public:
	struct Verse_0::Ftuple_Lvector3_Mvector3_R    __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0030)(Parm, HasGetValueTypeHash)
	struct Fvector3                               RetVal;                                            // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector3_M_Nvector3_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector3_M_Nvector3_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector3_M_Nvector3_R) == 0x000048, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector3_M_Nvector3_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector3_M_Nvector3_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector3_M_Nvector3_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector3_M_Nvector3_R, RetVal) == 0x000030, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector3_M_Nvector3_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector4__v_M_Nvector4__v_R
// 0x0078 (0x0078 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector4__v_M_Nvector4__v_R final
{
public:
	struct Ftuple_Lvector4__v_Mvector4__v_R       __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0050)(Parm, HasGetValueTypeHash)
	struct Fvector4_v                             RetVal;                                            // 0x0050(0x0028)(Parm, OutParm, ReturnParm, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector4__v_M_Nvector4__v_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector4__v_M_Nvector4__v_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector4__v_M_Nvector4__v_R) == 0x000078, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector4__v_M_Nvector4__v_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector4__v_M_Nvector4__v_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector4__v_M_Nvector4__v_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector4__v_M_Nvector4__v_R, RetVal) == 0x000050, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2b_27_L_Nvector4__v_M_Nvector4__v_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector2_M_Nvector2_R
// 0x0030 (0x0030 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector2_M_Nvector2_R final
{
public:
	struct Ftuple_Lvector2_Mvector2_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, HasGetValueTypeHash)
	struct Fvector2                               RetVal;                                            // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector2_M_Nvector2_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector2_M_Nvector2_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector2_M_Nvector2_R) == 0x000030, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector2_M_Nvector2_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector2_M_Nvector2_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector2_M_Nvector2_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector2_M_Nvector2_R, RetVal) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector2_M_Nvector2_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector2i_M_Nvector2i_R
// 0x0030 (0x0030 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector2i_M_Nvector2i_R final
{
public:
	struct Ftuple_Lvector2i_Mvector2i_R           __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, HasGetValueTypeHash)
	struct Fvector2i                              RetVal;                                            // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector2i_M_Nvector2i_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector2i_M_Nvector2i_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector2i_M_Nvector2i_R) == 0x000030, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector2i_M_Nvector2i_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector2i_M_Nvector2i_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector2i_M_Nvector2i_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector2i_M_Nvector2i_R, RetVal) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector2i_M_Nvector2i_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector3_M_Nvector3_R
// 0x0048 (0x0048 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector3_M_Nvector3_R final
{
public:
	struct Verse_0::Ftuple_Lvector3_Mvector3_R    __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0030)(Parm, HasGetValueTypeHash)
	struct Fvector3                               RetVal;                                            // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector3_M_Nvector3_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector3_M_Nvector3_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector3_M_Nvector3_R) == 0x000048, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector3_M_Nvector3_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector3_M_Nvector3_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector3_M_Nvector3_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector3_M_Nvector3_R, RetVal) == 0x000030, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector3_M_Nvector3_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector4__v_M_Nvector4__v_R
// 0x0078 (0x0078 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector4__v_M_Nvector4__v_R final
{
public:
	struct Ftuple_Lvector4__v_Mvector4__v_R       __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0050)(Parm, HasGetValueTypeHash)
	struct Fvector4_v                             RetVal;                                            // 0x0050(0x0028)(Parm, OutParm, ReturnParm, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector4__v_M_Nvector4__v_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector4__v_M_Nvector4__v_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector4__v_M_Nvector4__v_R) == 0x000078, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector4__v_M_Nvector4__v_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector4__v_M_Nvector4__v_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector4__v_M_Nvector4__v_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector4__v_M_Nvector4__v_R, RetVal) == 0x000050, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2d_27_L_Nvector4__v_M_Nvector4__v_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector2_M_Nfloat_R
// 0x0028 (0x0028 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector2_M_Nfloat_R final
{
public:
	struct Ftuple_Lvector2_Mfloat_R               __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0018)(Parm, HasGetValueTypeHash)
	struct Fvector2                               RetVal;                                            // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector2_M_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector2_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector2_M_Nfloat_R) == 0x000028, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector2_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector2_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector2_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector2_M_Nfloat_R, RetVal) == 0x000018, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector2_M_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector2_M_Nvector2_R
// 0x0030 (0x0030 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector2_M_Nvector2_R final
{
public:
	struct Ftuple_Lvector2_Mvector2_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, HasGetValueTypeHash)
	struct Fvector2                               RetVal;                                            // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector2_M_Nvector2_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector2_M_Nvector2_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector2_M_Nvector2_R) == 0x000030, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector2_M_Nvector2_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector2_M_Nvector2_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector2_M_Nvector2_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector2_M_Nvector2_R, RetVal) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector2_M_Nvector2_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector2i_M_Nvector2i_R
// 0x0098 (0x0098 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector2i_M_Nvector2i_R final
{
public:
	struct Ftuple_Lvector2i_Mvector2i_R           __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, HasGetValueTypeHash)
	FOptionProperty_                              RetVal;                                            // 0x0020(0x0021)(Parm, OutParm, ReturnParm, HasGetValueTypeHash)
	EVerseFalse                                   _TEMP_0;                                           // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct Fvector2r                              _TEMP_1;                                           // 0x0048(0x0020)(HasGetValueTypeHash)
	FOptionProperty_                              _TEMP_2;                                           // 0x0068(0x0011)(NoDestructor)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FOptionProperty_                              _TEMP_3;                                           // 0x0080(0x0011)(NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector2i_M_Nvector2i_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector2i_M_Nvector2i_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector2i_M_Nvector2i_R) == 0x000098, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector2i_M_Nvector2i_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector2i_M_Nvector2i_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector2i_M_Nvector2i_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector2i_M_Nvector2i_R, RetVal) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector2i_M_Nvector2i_R::RetVal' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector2i_M_Nvector2i_R, _TEMP_0) == 0x000041, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector2i_M_Nvector2i_R::_TEMP_0' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector2i_M_Nvector2i_R, _TEMP_1) == 0x000048, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector2i_M_Nvector2i_R::_TEMP_1' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector2i_M_Nvector2i_R, _TEMP_2) == 0x000068, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector2i_M_Nvector2i_R::_TEMP_2' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector2i_M_Nvector2i_R, _TEMP_3) == 0x000080, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector2i_M_Nvector2i_R::_TEMP_3' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector3_M_Nfloat_R
// 0x0038 (0x0038 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector3_M_Nfloat_R final
{
public:
	struct Ftuple_Lvector3_Mfloat_R               __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, HasGetValueTypeHash)
	struct Fvector3                               RetVal;                                            // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector3_M_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector3_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector3_M_Nfloat_R) == 0x000038, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector3_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector3_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector3_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector3_M_Nfloat_R, RetVal) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector3_M_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector3_M_Nvector3_R
// 0x0048 (0x0048 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector3_M_Nvector3_R final
{
public:
	struct Verse_0::Ftuple_Lvector3_Mvector3_R    __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0030)(Parm, HasGetValueTypeHash)
	struct Fvector3                               RetVal;                                            // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector3_M_Nvector3_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector3_M_Nvector3_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector3_M_Nvector3_R) == 0x000048, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector3_M_Nvector3_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector3_M_Nvector3_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector3_M_Nvector3_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector3_M_Nvector3_R, RetVal) == 0x000030, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector3_M_Nvector3_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector4__v_M_Nfloat_R
// 0x0058 (0x0058 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector4__v_M_Nfloat_R final
{
public:
	struct Ftuple_Lvector4__v_Mfloat_R            __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0030)(Parm, HasGetValueTypeHash)
	struct Fvector4_v                             RetVal;                                            // 0x0030(0x0028)(Parm, OutParm, ReturnParm, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector4__v_M_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector4__v_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector4__v_M_Nfloat_R) == 0x000058, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector4__v_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector4__v_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector4__v_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector4__v_M_Nfloat_R, RetVal) == 0x000030, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector4__v_M_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector4__v_M_Nvector4__v_R
// 0x0078 (0x0078 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector4__v_M_Nvector4__v_R final
{
public:
	struct Ftuple_Lvector4__v_Mvector4__v_R       __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0050)(Parm, HasGetValueTypeHash)
	struct Fvector4_v                             RetVal;                                            // 0x0050(0x0028)(Parm, OutParm, ReturnParm, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector4__v_M_Nvector4__v_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector4__v_M_Nvector4__v_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector4__v_M_Nvector4__v_R) == 0x000078, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector4__v_M_Nvector4__v_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector4__v_M_Nvector4__v_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector4__v_M_Nvector4__v_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector4__v_M_Nvector4__v_R, RetVal) == 0x000050, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Roperator_27_2f_27_L_Nvector4__v_M_Nvector4__v_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_Rplane4_L_Nvector3_M_Nvector3_M_Nvector3_R
// 0x00D0 (0x00D0 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rplane4_L_Nvector3_M_Nvector3_M_Nvector3_R final
{
public:
	struct Ftuple_Lvector3_Mvector3_Mvector3_R    __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0048)(Parm, HasGetValueTypeHash)
	struct Fplane4                                RetVal;                                            // 0x0048(0x0030)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	TDelegate<void(const struct Ftuple_Lvector3_Mvector3_Mvector3_R& __verse_0xB2CDDD72_Argument)> _TEMP_0;                                           // 0x0078(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct Ftuple_Lvector3_Mvector3_Mvector3_R    _TEMP_1;                                           // 0x0088(0x0048)(HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rplane4_L_Nvector3_M_Nvector3_M_Nvector3_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rplane4_L_Nvector3_M_Nvector3_M_Nvector3_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rplane4_L_Nvector3_M_Nvector3_M_Nvector3_R) == 0x0000D0, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rplane4_L_Nvector3_M_Nvector3_M_Nvector3_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rplane4_L_Nvector3_M_Nvector3_M_Nvector3_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rplane4_L_Nvector3_M_Nvector3_M_Nvector3_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rplane4_L_Nvector3_M_Nvector3_M_Nvector3_R, RetVal) == 0x000048, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rplane4_L_Nvector3_M_Nvector3_M_Nvector3_R::RetVal' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rplane4_L_Nvector3_M_Nvector3_M_Nvector3_R, _TEMP_0) == 0x000078, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rplane4_L_Nvector3_M_Nvector3_M_Nvector3_R::_TEMP_0' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rplane4_L_Nvector3_M_Nvector3_M_Nvector3_R, _TEMP_1) == 0x000088, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rplane4_L_Nvector3_M_Nvector3_M_Nvector3_R::_TEMP_1' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_Rplane4_L_Nvector3_M_Nvector3_R
// 0x00A0 (0x00A0 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rplane4_L_Nvector3_M_Nvector3_R final
{
public:
	struct Verse_0::Ftuple_Lvector3_Mvector3_R    __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0030)(Parm, HasGetValueTypeHash)
	struct Fplane4                                RetVal;                                            // 0x0030(0x0030)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	TDelegate<void(const struct Verse_0::Ftuple_Lvector3_Mvector3_R& __verse_0xB2CDDD72_Argument)> _TEMP_0;                                           // 0x0060(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct Verse_0::Ftuple_Lvector3_Mvector3_R    _TEMP_1;                                           // 0x0070(0x0030)(HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rplane4_L_Nvector3_M_Nvector3_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rplane4_L_Nvector3_M_Nvector3_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rplane4_L_Nvector3_M_Nvector3_R) == 0x0000A0, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rplane4_L_Nvector3_M_Nvector3_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rplane4_L_Nvector3_M_Nvector3_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rplane4_L_Nvector3_M_Nvector3_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rplane4_L_Nvector3_M_Nvector3_R, RetVal) == 0x000030, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rplane4_L_Nvector3_M_Nvector3_R::RetVal' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rplane4_L_Nvector3_M_Nvector3_R, _TEMP_0) == 0x000060, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rplane4_L_Nvector3_M_Nvector3_R::_TEMP_0' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rplane4_L_Nvector3_M_Nvector3_R, _TEMP_1) == 0x000070, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rplane4_L_Nvector3_M_Nvector3_R::_TEMP_1' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RPlaneDot_L_Nvector3_M_Nplane4_R
// 0x0050 (0x0050 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RPlaneDot_L_Nvector3_M_Nplane4_R final
{
public:
	struct Ftuple_Lvector3_Mplane4_R              __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0048)(Parm, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RPlaneDot_L_Nvector3_M_Nplane4_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RPlaneDot_L_Nvector3_M_Nplane4_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RPlaneDot_L_Nvector3_M_Nplane4_R) == 0x000050, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RPlaneDot_L_Nvector3_M_Nplane4_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RPlaneDot_L_Nvector3_M_Nplane4_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RPlaneDot_L_Nvector3_M_Nplane4_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RPlaneDot_L_Nvector3_M_Nplane4_R, RetVal) == 0x000048, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RPlaneDot_L_Nvector3_M_Nplane4_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RPointPlaneProject_L_Nvector3_M_Nplane4_R
// 0x0060 (0x0060 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RPointPlaneProject_L_Nvector3_M_Nplane4_R final
{
public:
	struct Ftuple_Lvector3_Mplane4_R              __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0048)(Parm, HasGetValueTypeHash)
	struct Fvector3                               RetVal;                                            // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RPointPlaneProject_L_Nvector3_M_Nplane4_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RPointPlaneProject_L_Nvector3_M_Nplane4_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RPointPlaneProject_L_Nvector3_M_Nplane4_R) == 0x000060, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RPointPlaneProject_L_Nvector3_M_Nplane4_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RPointPlaneProject_L_Nvector3_M_Nplane4_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RPointPlaneProject_L_Nvector3_M_Nplane4_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RPointPlaneProject_L_Nvector3_M_Nplane4_R, RetVal) == 0x000048, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RPointPlaneProject_L_Nvector3_M_Nplane4_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RPointPlaneProject_L_Nvector3_M_Nvector3_M_Nvector3_M_Nvector3_R
// 0x0078 (0x0078 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RPointPlaneProject_L_Nvector3_M_Nvector3_M_Nvector3_M_Nvector3_R final
{
public:
	struct Ftuple_Lvector3_Mvector3_Mvector3_Mvector3_R __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0060)(Parm, HasGetValueTypeHash)
	struct Fvector3                               RetVal;                                            // 0x0060(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RPointPlaneProject_L_Nvector3_M_Nvector3_M_Nvector3_M_Nvector3_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RPointPlaneProject_L_Nvector3_M_Nvector3_M_Nvector3_M_Nvector3_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RPointPlaneProject_L_Nvector3_M_Nvector3_M_Nvector3_M_Nvector3_R) == 0x000078, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RPointPlaneProject_L_Nvector3_M_Nvector3_M_Nvector3_M_Nvector3_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RPointPlaneProject_L_Nvector3_M_Nvector3_M_Nvector3_M_Nvector3_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RPointPlaneProject_L_Nvector3_M_Nvector3_M_Nvector3_M_Nvector3_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RPointPlaneProject_L_Nvector3_M_Nvector3_M_Nvector3_M_Nvector3_R, RetVal) == 0x000060, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RPointPlaneProject_L_Nvector3_M_Nvector3_M_Nvector3_M_Nvector3_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RPow_L_Nfloat_M_Nfloat_R
// 0x0018 (0x0018 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RPow_L_Nfloat_M_Nfloat_R final
{
public:
	struct Verse_0::Ftuple_Lfloat_Mfloat_R        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0010)(Parm, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RPow_L_Nfloat_M_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RPow_L_Nfloat_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RPow_L_Nfloat_M_Nfloat_R) == 0x000018, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RPow_L_Nfloat_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RPow_L_Nfloat_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RPow_L_Nfloat_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RPow_L_Nfloat_M_Nfloat_R, RetVal) == 0x000010, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RPow_L_Nfloat_M_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector2_R
// 0x0020 (0x0020 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector2_R final
{
public:
	struct Fvector2                               __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct Fvector2                               RetVal;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector2_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector2_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector2_R) == 0x000020, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector2_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector2_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector2_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector2_R, RetVal) == 0x000010, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector2_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector2i_R
// 0x0020 (0x0020 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector2i_R final
{
public:
	struct Fvector2i                              __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct Fvector2i                              RetVal;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector2i_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector2i_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector2i_R) == 0x000020, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector2i_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector2i_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector2i_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector2i_R, RetVal) == 0x000010, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector2i_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector3_R
// 0x0030 (0x0030 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector3_R final
{
public:
	struct Fvector3                               __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct Fvector3                               RetVal;                                            // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector3_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector3_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector3_R) == 0x000030, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector3_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector3_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector3_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector3_R, RetVal) == 0x000018, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector3_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector4__v_R
// 0x0050 (0x0050 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector4__v_R final
{
public:
	struct Fvector4_v                             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0028)(Parm, NoDestructor)
	struct Fvector4_v                             RetVal;                                            // 0x0028(0x0028)(Parm, OutParm, ReturnParm, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector4__v_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector4__v_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector4__v_R) == 0x000050, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector4__v_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector4__v_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector4__v_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector4__v_R, RetVal) == 0x000028, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rprefix_27_2d_27_L_Nvector4__v_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RQuotient_L_Nint_M_Nint_R
// 0x0020 (0x0020 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RQuotient_L_Nint_M_Nint_R final
{
public:
	struct Verse_0::Ftuple_Lint_Mint_R            __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0010)(Parm, HasGetValueTypeHash)
	FOptionProperty_                              RetVal;                                            // 0x0010(0x0009)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RQuotient_L_Nint_M_Nint_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RQuotient_L_Nint_M_Nint_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RQuotient_L_Nint_M_Nint_R) == 0x000020, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RQuotient_L_Nint_M_Nint_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RQuotient_L_Nint_M_Nint_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RQuotient_L_Nint_M_Nint_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RQuotient_L_Nint_M_Nint_R, RetVal) == 0x000010, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RQuotient_L_Nint_M_Nint_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RRadiansToDegrees_L_Nfloat_R
// 0x0010 (0x0010 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RRadiansToDegrees_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RRadiansToDegrees_L_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RRadiansToDegrees_L_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RRadiansToDegrees_L_Nfloat_R) == 0x000010, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RRadiansToDegrees_L_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RRadiansToDegrees_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RRadiansToDegrees_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RRadiansToDegrees_L_Nfloat_R, RetVal) == 0x000008, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RRadiansToDegrees_L_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector2_M_Nvector2_R
// 0x0038 (0x0038 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector2_M_Nvector2_R final
{
public:
	struct Ftuple_Lvector2_Mvector2_R             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, HasGetValueTypeHash)
	FOptionProperty_                              RetVal;                                            // 0x0020(0x0011)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector2_M_Nvector2_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector2_M_Nvector2_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector2_M_Nvector2_R) == 0x000038, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector2_M_Nvector2_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector2_M_Nvector2_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector2_M_Nvector2_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector2_M_Nvector2_R, RetVal) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector2_M_Nvector2_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector2i_M_Nvector2i_R
// 0x0038 (0x0038 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector2i_M_Nvector2i_R final
{
public:
	struct Ftuple_Lvector2i_Mvector2i_R           __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, HasGetValueTypeHash)
	FOptionProperty_                              RetVal;                                            // 0x0020(0x0011)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector2i_M_Nvector2i_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector2i_M_Nvector2i_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector2i_M_Nvector2i_R) == 0x000038, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector2i_M_Nvector2i_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector2i_M_Nvector2i_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector2i_M_Nvector2i_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector2i_M_Nvector2i_R, RetVal) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector2i_M_Nvector2i_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector3_M_Nvector3_R
// 0x0050 (0x0050 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector3_M_Nvector3_R final
{
public:
	struct Verse_0::Ftuple_Lvector3_Mvector3_R    __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0030)(Parm, HasGetValueTypeHash)
	FOptionProperty_                              RetVal;                                            // 0x0030(0x0019)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector3_M_Nvector3_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector3_M_Nvector3_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector3_M_Nvector3_R) == 0x000050, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector3_M_Nvector3_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector3_M_Nvector3_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector3_M_Nvector3_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector3_M_Nvector3_R, RetVal) == 0x000030, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector3_M_Nvector3_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector4__v_M_Nvector4__v_R
// 0x0080 (0x0080 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector4__v_M_Nvector4__v_R final
{
public:
	struct Ftuple_Lvector4__v_Mvector4__v_R       __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0050)(Parm, HasGetValueTypeHash)
	FOptionProperty_                              RetVal;                                            // 0x0050(0x0029)(Parm, OutParm, ReturnParm, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector4__v_M_Nvector4__v_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector4__v_M_Nvector4__v_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector4__v_M_Nvector4__v_R) == 0x000080, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector4__v_M_Nvector4__v_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector4__v_M_Nvector4__v_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector4__v_M_Nvector4__v_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector4__v_M_Nvector4__v_R, RetVal) == 0x000050, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RReflectVector_L_Nvector4__v_M_Nvector4__v_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RRotateBy_L_Nrotation_M_Nrotation_R
// 0x0060 (0x0060 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RRotateBy_L_Nrotation_M_Nrotation_R final
{
public:
	struct Ftuple_Lrotation_Mrotation_R           __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0040)(Parm, HasGetValueTypeHash)
	struct FVerseRotation                         RetVal;                                            // 0x0040(0x0020)(Parm, OutParm, ReturnParm, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RRotateBy_L_Nrotation_M_Nrotation_R) == 0x000010, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RRotateBy_L_Nrotation_M_Nrotation_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RRotateBy_L_Nrotation_M_Nrotation_R) == 0x000060, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RRotateBy_L_Nrotation_M_Nrotation_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RRotateBy_L_Nrotation_M_Nrotation_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RRotateBy_L_Nrotation_M_Nrotation_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RRotateBy_L_Nrotation_M_Nrotation_R, RetVal) == 0x000040, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RRotateBy_L_Nrotation_M_Nrotation_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RRotateVector_L_Nrotation_M_Nvector3_R
// 0x0060 (0x0060 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RRotateVector_L_Nrotation_M_Nvector3_R final
{
public:
	struct Ftuple_Lrotation_Mvector3_R            __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0040)(Parm, HasGetValueTypeHash)
	struct Fvector3                               RetVal;                                            // 0x0040(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RRotateVector_L_Nrotation_M_Nvector3_R) == 0x000010, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RRotateVector_L_Nrotation_M_Nvector3_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RRotateVector_L_Nrotation_M_Nvector3_R) == 0x000060, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RRotateVector_L_Nrotation_M_Nvector3_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RRotateVector_L_Nrotation_M_Nvector3_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RRotateVector_L_Nrotation_M_Nvector3_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RRotateVector_L_Nrotation_M_Nvector3_R, RetVal) == 0x000040, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RRotateVector_L_Nrotation_M_Nvector3_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_Rrotation_L_Nvector3_M_Nfloat_R
// 0x0040 (0x0040 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rrotation_L_Nvector3_M_Nfloat_R final
{
public:
	struct Ftuple_Lvector3_Mfloat_R               __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, HasGetValueTypeHash)
	struct FVerseRotation                         RetVal;                                            // 0x0020(0x0020)(Parm, OutParm, ReturnParm, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rrotation_L_Nvector3_M_Nfloat_R) == 0x000010, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rrotation_L_Nvector3_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rrotation_L_Nvector3_M_Nfloat_R) == 0x000040, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rrotation_L_Nvector3_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rrotation_L_Nvector3_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rrotation_L_Nvector3_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rrotation_L_Nvector3_M_Nfloat_R, RetVal) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_Rrotation_L_Nvector3_M_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RRound_L_Nfloat_R
// 0x0010 (0x0010 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RRound_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RRound_L_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RRound_L_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RRound_L_Nfloat_R) == 0x000010, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RRound_L_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RRound_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RRound_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RRound_L_Nfloat_R, RetVal) == 0x000008, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RRound_L_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RSegmentIntersection_L_Nplane4_M_Nvector3_M_Nvector3_R
// 0x0080 (0x0080 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSegmentIntersection_L_Nplane4_M_Nvector3_M_Nvector3_R final
{
public:
	struct Ftuple_Lplane4_Mvector3_Mvector3_R     __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0060)(Parm, HasGetValueTypeHash)
	FOptionProperty_                              RetVal;                                            // 0x0060(0x0019)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSegmentIntersection_L_Nplane4_M_Nvector3_M_Nvector3_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSegmentIntersection_L_Nplane4_M_Nvector3_M_Nvector3_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSegmentIntersection_L_Nplane4_M_Nvector3_M_Nvector3_R) == 0x000080, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSegmentIntersection_L_Nplane4_M_Nvector3_M_Nvector3_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSegmentIntersection_L_Nplane4_M_Nvector3_M_Nvector3_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSegmentIntersection_L_Nplane4_M_Nvector3_M_Nvector3_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSegmentIntersection_L_Nplane4_M_Nvector3_M_Nvector3_R, RetVal) == 0x000060, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSegmentIntersection_L_Nplane4_M_Nvector3_M_Nvector3_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RSgn_L_Nfloat_R
// 0x0030 (0x0030 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSgn_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FOptionProperty_                              _TEMP_0;                                           // 0x0010(0x0009)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FOptionProperty_                              _TEMP_1;                                           // 0x0020(0x0009)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSgn_L_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSgn_L_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSgn_L_Nfloat_R) == 0x000030, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSgn_L_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSgn_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSgn_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSgn_L_Nfloat_R, RetVal) == 0x000008, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSgn_L_Nfloat_R::RetVal' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSgn_L_Nfloat_R, _TEMP_0) == 0x000010, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSgn_L_Nfloat_R::_TEMP_0' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSgn_L_Nfloat_R, _TEMP_1) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSgn_L_Nfloat_R::_TEMP_1' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RSgn_L_Nint_R
// 0x0030 (0x0030 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSgn_L_Nint_R final
{
public:
	int64                                         __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FOptionProperty_                              _TEMP_0;                                           // 0x0010(0x0009)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FOptionProperty_                              _TEMP_1;                                           // 0x0020(0x0009)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSgn_L_Nint_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSgn_L_Nint_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSgn_L_Nint_R) == 0x000030, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSgn_L_Nint_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSgn_L_Nint_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSgn_L_Nint_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSgn_L_Nint_R, RetVal) == 0x000008, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSgn_L_Nint_R::RetVal' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSgn_L_Nint_R, _TEMP_0) == 0x000010, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSgn_L_Nint_R::_TEMP_0' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSgn_L_Nint_R, _TEMP_1) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSgn_L_Nint_R::_TEMP_1' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RSin_L_Nfloat_R
// 0x0010 (0x0010 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSin_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSin_L_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSin_L_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSin_L_Nfloat_R) == 0x000010, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSin_L_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSin_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSin_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSin_L_Nfloat_R, RetVal) == 0x000008, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSin_L_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RSinh_L_Nfloat_R
// 0x0010 (0x0010 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSinh_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSinh_L_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSinh_L_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSinh_L_Nfloat_R) == 0x000010, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSinh_L_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSinh_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSinh_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSinh_L_Nfloat_R, RetVal) == 0x000008, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSinh_L_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RSize2D_L_Nvector3_R
// 0x0030 (0x0030 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize2D_L_Nvector3_R final
{
public:
	struct Fvector3                               __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        RetVal;                                            // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(double __verse_0xB2CDDD72_Argument)> _TEMP_0;                                           // 0x0020(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize2D_L_Nvector3_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize2D_L_Nvector3_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize2D_L_Nvector3_R) == 0x000030, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize2D_L_Nvector3_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize2D_L_Nvector3_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize2D_L_Nvector3_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize2D_L_Nvector3_R, RetVal) == 0x000018, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize2D_L_Nvector3_R::RetVal' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize2D_L_Nvector3_R, _TEMP_0) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize2D_L_Nvector3_R::_TEMP_0' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector2_R
// 0x0028 (0x0028 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector2_R final
{
public:
	struct Fvector2                               __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        RetVal;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(double __verse_0xB2CDDD72_Argument)> _TEMP_0;                                           // 0x0018(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector2_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector2_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector2_R) == 0x000028, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector2_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector2_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector2_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector2_R, RetVal) == 0x000010, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector2_R::RetVal' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector2_R, _TEMP_0) == 0x000018, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector2_R::_TEMP_0' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector2i_R
// 0x0028 (0x0028 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector2i_R final
{
public:
	struct Fvector2i                              __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	int64                                         RetVal;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(int64 __verse_0xB2CDDD72_Argument)> _TEMP_0;                                           // 0x0018(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector2i_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector2i_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector2i_R) == 0x000028, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector2i_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector2i_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector2i_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector2i_R, RetVal) == 0x000010, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector2i_R::RetVal' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector2i_R, _TEMP_0) == 0x000018, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector2i_R::_TEMP_0' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector3_R
// 0x0030 (0x0030 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector3_R final
{
public:
	struct Fvector3                               __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        RetVal;                                            // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(double __verse_0xB2CDDD72_Argument)> _TEMP_0;                                           // 0x0020(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector3_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector3_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector3_R) == 0x000030, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector3_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector3_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector3_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector3_R, RetVal) == 0x000018, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector3_R::RetVal' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector3_R, _TEMP_0) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector3_R::_TEMP_0' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector4__v_R
// 0x0040 (0x0040 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector4__v_R final
{
public:
	struct Fvector4_v                             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0028)(Parm, NoDestructor)
	double                                        RetVal;                                            // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(double __verse_0xB2CDDD72_Argument)> _TEMP_0;                                           // 0x0030(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector4__v_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector4__v_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector4__v_R) == 0x000040, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector4__v_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector4__v_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector4__v_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector4__v_R, RetVal) == 0x000028, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector4__v_R::RetVal' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector4__v_R, _TEMP_0) == 0x000030, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSize_L_Nvector4__v_R::_TEMP_0' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared2D_L_Nvector3_R
// 0x0020 (0x0020 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared2D_L_Nvector3_R final
{
public:
	struct Fvector3                               __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        RetVal;                                            // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared2D_L_Nvector3_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared2D_L_Nvector3_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared2D_L_Nvector3_R) == 0x000020, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared2D_L_Nvector3_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared2D_L_Nvector3_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared2D_L_Nvector3_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared2D_L_Nvector3_R, RetVal) == 0x000018, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared2D_L_Nvector3_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector2_R
// 0x0018 (0x0018 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector2_R final
{
public:
	struct Fvector2                               __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        RetVal;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector2_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector2_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector2_R) == 0x000018, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector2_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector2_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector2_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector2_R, RetVal) == 0x000010, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector2_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector2i_R
// 0x0018 (0x0018 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector2i_R final
{
public:
	struct Fvector2i                              __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	int64                                         RetVal;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector2i_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector2i_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector2i_R) == 0x000018, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector2i_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector2i_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector2i_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector2i_R, RetVal) == 0x000010, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector2i_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector3_R
// 0x0020 (0x0020 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector3_R final
{
public:
	struct Fvector3                               __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        RetVal;                                            // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector3_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector3_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector3_R) == 0x000020, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector3_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector3_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector3_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector3_R, RetVal) == 0x000018, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector3_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector4__v_R
// 0x0030 (0x0030 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector4__v_R final
{
public:
	struct Fvector4_v                             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0028)(Parm, NoDestructor)
	double                                        RetVal;                                            // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector4__v_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector4__v_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector4__v_R) == 0x000030, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector4__v_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector4__v_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector4__v_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector4__v_R, RetVal) == 0x000028, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSizeSquared_L_Nvector4__v_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RSlerpBetween_L_Nrotation_M_Nrotation_M_Nfloat_R
// 0x0080 (0x0080 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSlerpBetween_L_Nrotation_M_Nrotation_M_Nfloat_R final
{
public:
	struct Ftuple_Lrotation_Mrotation_Mfloat_R    __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0050)(Parm, HasGetValueTypeHash)
	FOptionProperty_                              RetVal;                                            // 0x0050(0x0021)(Parm, OutParm, ReturnParm, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSlerpBetween_L_Nrotation_M_Nrotation_M_Nfloat_R) == 0x000010, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSlerpBetween_L_Nrotation_M_Nrotation_M_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSlerpBetween_L_Nrotation_M_Nrotation_M_Nfloat_R) == 0x000080, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSlerpBetween_L_Nrotation_M_Nrotation_M_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSlerpBetween_L_Nrotation_M_Nrotation_M_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSlerpBetween_L_Nrotation_M_Nrotation_M_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSlerpBetween_L_Nrotation_M_Nrotation_M_Nfloat_R, RetVal) == 0x000050, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSlerpBetween_L_Nrotation_M_Nrotation_M_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RSqrt_L_Nfloat_R
// 0x0010 (0x0010 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSqrt_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSqrt_L_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSqrt_L_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSqrt_L_Nfloat_R) == 0x000010, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSqrt_L_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSqrt_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSqrt_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSqrt_L_Nfloat_R, RetVal) == 0x000008, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSqrt_L_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RSqrt_L_Nint_R
// 0x0028 (0x0028 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSqrt_L_Nint_R final
{
public:
	int64                                         __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(double __verse_0xB2CDDD72_Argument)> _TEMP_0;                                           // 0x0010(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(double __verse_0xB2CDDD72_Argument)> _TEMP_1;                                           // 0x001C(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSqrt_L_Nint_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSqrt_L_Nint_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSqrt_L_Nint_R) == 0x000028, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSqrt_L_Nint_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSqrt_L_Nint_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSqrt_L_Nint_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSqrt_L_Nint_R, RetVal) == 0x000008, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSqrt_L_Nint_R::RetVal' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSqrt_L_Nint_R, _TEMP_0) == 0x000010, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSqrt_L_Nint_R::_TEMP_0' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSqrt_L_Nint_R, _TEMP_1) == 0x00001C, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSqrt_L_Nint_R::_TEMP_1' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RSquare_L_Nfloat_R
// 0x0010 (0x0010 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSquare_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSquare_L_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSquare_L_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSquare_L_Nfloat_R) == 0x000010, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSquare_L_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSquare_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSquare_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSquare_L_Nfloat_R, RetVal) == 0x000008, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSquare_L_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RSquare_L_Nint_R
// 0x0010 (0x0010 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSquare_L_Nint_R final
{
public:
	int64                                         __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSquare_L_Nint_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSquare_L_Nint_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSquare_L_Nint_R) == 0x000010, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSquare_L_Nint_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSquare_L_Nint_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSquare_L_Nint_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSquare_L_Nint_R, RetVal) == 0x000008, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RSquare_L_Nint_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RTan_L_Nfloat_R
// 0x0010 (0x0010 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RTan_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RTan_L_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RTan_L_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RTan_L_Nfloat_R) == 0x000010, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RTan_L_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RTan_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RTan_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RTan_L_Nfloat_R, RetVal) == 0x000008, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RTan_L_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RTanh_L_Nfloat_R
// 0x0010 (0x0010 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RTanh_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RTanh_L_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RTanh_L_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RTanh_L_Nfloat_R) == 0x000010, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RTanh_L_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RTanh_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RTanh_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RTanh_L_Nfloat_R, RetVal) == 0x000008, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RTanh_L_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Ncolor__v_R
// 0x0030 (0x0030 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Ncolor__v_R final
{
public:
	struct Fcolor_v                               __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	FVerseStringProperty_                         RetVal;                                            // 0x0020(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Ncolor__v_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Ncolor__v_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Ncolor__v_R) == 0x000030, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Ncolor__v_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Ncolor__v_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Ncolor__v_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Ncolor__v_R, RetVal) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Ncolor__v_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nplane4_R
// 0x0040 (0x0040 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nplane4_R final
{
public:
	struct Fplane4                                __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0030)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	FVerseStringProperty_                         RetVal;                                            // 0x0030(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nplane4_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nplane4_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nplane4_R) == 0x000040, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nplane4_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nplane4_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nplane4_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nplane4_R, RetVal) == 0x000030, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nplane4_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nrotation_R
// 0x0030 (0x0030 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nrotation_R final
{
public:
	struct FVerseRotation                         __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0020)(Parm, NoDestructor)
	FVerseStringProperty_                         RetVal;                                            // 0x0020(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nrotation_R) == 0x000010, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nrotation_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nrotation_R) == 0x000030, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nrotation_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nrotation_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nrotation_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nrotation_R, RetVal) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nrotation_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector2_R
// 0x0020 (0x0020 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector2_R final
{
public:
	struct Fvector2                               __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	FVerseStringProperty_                         RetVal;                                            // 0x0010(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector2_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector2_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector2_R) == 0x000020, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector2_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector2_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector2_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector2_R, RetVal) == 0x000010, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector2_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector2i_R
// 0x0020 (0x0020 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector2i_R final
{
public:
	struct Fvector2i                              __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	FVerseStringProperty_                         RetVal;                                            // 0x0010(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector2i_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector2i_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector2i_R) == 0x000020, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector2i_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector2i_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector2i_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector2i_R, RetVal) == 0x000010, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector2i_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector3_R
// 0x0028 (0x0028 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector3_R final
{
public:
	struct Fvector3                               __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	FVerseStringProperty_                         RetVal;                                            // 0x0018(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector3_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector3_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector3_R) == 0x000028, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector3_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector3_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector3_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector3_R, RetVal) == 0x000018, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector3_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector4__v_R
// 0x0038 (0x0038 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector4__v_R final
{
public:
	struct Fvector4_v                             __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0028)(Parm, NoDestructor)
	FVerseStringProperty_                         RetVal;                                            // 0x0028(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector4__v_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector4__v_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector4__v_R) == 0x000038, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector4__v_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector4__v_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector4__v_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector4__v_R, RetVal) == 0x000028, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToString_L_Nvector4__v_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RToVector2_L_Nvector2i_R
// 0x0020 (0x0020 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToVector2_L_Nvector2i_R final
{
public:
	struct Fvector2i                              __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct Fvector2                               RetVal;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToVector2_L_Nvector2i_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToVector2_L_Nvector2i_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToVector2_L_Nvector2i_R) == 0x000020, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToVector2_L_Nvector2i_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToVector2_L_Nvector2i_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToVector2_L_Nvector2i_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToVector2_L_Nvector2i_R, RetVal) == 0x000010, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToVector2_L_Nvector2i_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RToVector2i_L_Nvector2_R
// 0x0038 (0x0038 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToVector2i_L_Nvector2_R final
{
public:
	struct Fvector2                               __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct Fvector2i                              RetVal;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	TDelegate<void(double __verse_0xB2CDDD72_Argument)> _TEMP_0;                                           // 0x0020(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(double __verse_0xB2CDDD72_Argument)> _TEMP_1;                                           // 0x002C(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToVector2i_L_Nvector2_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToVector2i_L_Nvector2_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToVector2i_L_Nvector2_R) == 0x000038, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToVector2i_L_Nvector2_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToVector2i_L_Nvector2_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToVector2i_L_Nvector2_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToVector2i_L_Nvector2_R, RetVal) == 0x000010, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToVector2i_L_Nvector2_R::RetVal' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToVector2i_L_Nvector2_R, _TEMP_0) == 0x000020, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToVector2i_L_Nvector2_R::_TEMP_0' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToVector2i_L_Nvector2_R, _TEMP_1) == 0x00002C, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RToVector2i_L_Nvector2_R::_TEMP_1' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RTrunc_L_Nfloat_R
// 0x0010 (0x0010 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RTrunc_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RTrunc_L_Nfloat_R) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RTrunc_L_Nfloat_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RTrunc_L_Nfloat_R) == 0x000010, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RTrunc_L_Nfloat_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RTrunc_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RTrunc_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RTrunc_L_Nfloat_R, RetVal) == 0x000008, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RTrunc_L_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RUnrotateBy_L_Nrotation_M_Nrotation_R
// 0x0060 (0x0060 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RUnrotateBy_L_Nrotation_M_Nrotation_R final
{
public:
	struct Ftuple_Lrotation_Mrotation_R           __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0040)(Parm, HasGetValueTypeHash)
	struct FVerseRotation                         RetVal;                                            // 0x0040(0x0020)(Parm, OutParm, ReturnParm, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RUnrotateBy_L_Nrotation_M_Nrotation_R) == 0x000010, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RUnrotateBy_L_Nrotation_M_Nrotation_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RUnrotateBy_L_Nrotation_M_Nrotation_R) == 0x000060, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RUnrotateBy_L_Nrotation_M_Nrotation_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RUnrotateBy_L_Nrotation_M_Nrotation_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RUnrotateBy_L_Nrotation_M_Nrotation_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RUnrotateBy_L_Nrotation_M_Nrotation_R, RetVal) == 0x000040, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RUnrotateBy_L_Nrotation_M_Nrotation_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RUnrotateVector_L_Nrotation_M_Nvector3_R
// 0x0060 (0x0060 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RUnrotateVector_L_Nrotation_M_Nvector3_R final
{
public:
	struct Ftuple_Lrotation_Mvector3_R            __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0040)(Parm, HasGetValueTypeHash)
	struct Fvector3                               RetVal;                                            // 0x0040(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RUnrotateVector_L_Nrotation_M_Nvector3_R) == 0x000010, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RUnrotateVector_L_Nrotation_M_Nvector3_R");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RUnrotateVector_L_Nrotation_M_Nvector3_R) == 0x000060, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RUnrotateVector_L_Nrotation_M_Nvector3_R");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RUnrotateVector_L_Nrotation_M_Nvector3_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RUnrotateVector_L_Nrotation_M_Nvector3_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RUnrotateVector_L_Nrotation_M_Nvector3_R, RetVal) == 0x000040, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RUnrotateVector_L_Nrotation_M_Nvector3_R::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RXAxis
// 0x0020 (0x0020 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RXAxis final
{
public:
	struct Verse_0::Ftuple_L_R                    __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct Fvector3                               RetVal;                                            // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RXAxis) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RXAxis");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RXAxis) == 0x000020, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RXAxis");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RXAxis, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RXAxis::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RXAxis, RetVal) == 0x000008, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RXAxis::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RYAxis
// 0x0020 (0x0020 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RYAxis final
{
public:
	struct Verse_0::Ftuple_L_R                    __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct Fvector3                               RetVal;                                            // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RYAxis) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RYAxis");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RYAxis) == 0x000020, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RYAxis");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RYAxis, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RYAxis::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RYAxis, RetVal) == 0x000008, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RYAxis::RetVal' has a wrong offset!");

// Function Verse.Math._L_2fVerse_2eorg_2fVerse_2fMath_N_RZAxis
// 0x0020 (0x0020 - 0x0000)
struct Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RZAxis final
{
public:
	struct Verse_0::Ftuple_L_R                    __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct Fvector3                               RetVal;                                            // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RZAxis) == 0x000008, "Wrong alignment on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RZAxis");
static_assert(sizeof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RZAxis) == 0x000020, "Wrong size on Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RZAxis");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RZAxis, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RZAxis::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RZAxis, RetVal) == 0x000008, "Member 'Math__L_2fVerse_2eorg_2fVerse_2fMath_N_RZAxis::RetVal' has a wrong offset!");

// Function Verse.Math.color_v$Factory
// 0x0020 (0x0020 - 0x0000)
struct Math_color_v_Factory final
{
public:
	struct Fcolor_v                               RetVal;                                            // 0x0000(0x0020)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math_color_v_Factory) == 0x000008, "Wrong alignment on Math_color_v_Factory");
static_assert(sizeof(Math_color_v_Factory) == 0x000020, "Wrong size on Math_color_v_Factory");
static_assert(offsetof(Math_color_v_Factory, RetVal) == 0x000000, "Member 'Math_color_v_Factory::RetVal' has a wrong offset!");

// Function Verse.Math.plane4$Factory
// 0x0030 (0x0030 - 0x0000)
struct Math_plane4_Factory final
{
public:
	struct Fplane4                                RetVal;                                            // 0x0000(0x0030)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math_plane4_Factory) == 0x000008, "Wrong alignment on Math_plane4_Factory");
static_assert(sizeof(Math_plane4_Factory) == 0x000030, "Wrong size on Math_plane4_Factory");
static_assert(offsetof(Math_plane4_Factory, RetVal) == 0x000000, "Member 'Math_plane4_Factory::RetVal' has a wrong offset!");

// Function Verse.Math.transform_v$Factory
// 0x0090 (0x0090 - 0x0000)
struct Math_transform_v_Factory final
{
public:
	struct Ftransform_v                           RetVal;                                            // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NoDestructor)
	struct Fvector3                               _TEMP_0;                                           // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TDelegate<void(const struct Verse_0::Ftuple_L_R& __verse_0xB2CDDD72_Argument)> _TEMP_1;                                           // 0x0068(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct Verse_0::Ftuple_L_R                    _TEMP_2;                                           // 0x0074(0x0001)(HasGetValueTypeHash)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct Fvector3                               _TEMP_3;                                           // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math_transform_v_Factory) == 0x000010, "Wrong alignment on Math_transform_v_Factory");
static_assert(sizeof(Math_transform_v_Factory) == 0x000090, "Wrong size on Math_transform_v_Factory");
static_assert(offsetof(Math_transform_v_Factory, RetVal) == 0x000000, "Member 'Math_transform_v_Factory::RetVal' has a wrong offset!");
static_assert(offsetof(Math_transform_v_Factory, _TEMP_0) == 0x000050, "Member 'Math_transform_v_Factory::_TEMP_0' has a wrong offset!");
static_assert(offsetof(Math_transform_v_Factory, _TEMP_1) == 0x000068, "Member 'Math_transform_v_Factory::_TEMP_1' has a wrong offset!");
static_assert(offsetof(Math_transform_v_Factory, _TEMP_2) == 0x000074, "Member 'Math_transform_v_Factory::_TEMP_2' has a wrong offset!");
static_assert(offsetof(Math_transform_v_Factory, _TEMP_3) == 0x000078, "Member 'Math_transform_v_Factory::_TEMP_3' has a wrong offset!");

// Function Verse.Math.vector2$Factory
// 0x0010 (0x0010 - 0x0000)
struct Math_vector2_Factory final
{
public:
	struct Fvector2                               RetVal;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math_vector2_Factory) == 0x000008, "Wrong alignment on Math_vector2_Factory");
static_assert(sizeof(Math_vector2_Factory) == 0x000010, "Wrong size on Math_vector2_Factory");
static_assert(offsetof(Math_vector2_Factory, RetVal) == 0x000000, "Member 'Math_vector2_Factory::RetVal' has a wrong offset!");

// Function Verse.Math.vector2i$Factory
// 0x0010 (0x0010 - 0x0000)
struct Math_vector2i_Factory final
{
public:
	struct Fvector2i                              RetVal;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math_vector2i_Factory) == 0x000008, "Wrong alignment on Math_vector2i_Factory");
static_assert(sizeof(Math_vector2i_Factory) == 0x000010, "Wrong size on Math_vector2i_Factory");
static_assert(offsetof(Math_vector2i_Factory, RetVal) == 0x000000, "Member 'Math_vector2i_Factory::RetVal' has a wrong offset!");

// Function Verse.Math.vector2r$Factory
// 0x0020 (0x0020 - 0x0000)
struct Math_vector2r_Factory final
{
public:
	struct Fvector2r                              RetVal;                                            // 0x0000(0x0020)(Parm, OutParm, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(Math_vector2r_Factory) == 0x000008, "Wrong alignment on Math_vector2r_Factory");
static_assert(sizeof(Math_vector2r_Factory) == 0x000020, "Wrong size on Math_vector2r_Factory");
static_assert(offsetof(Math_vector2r_Factory, RetVal) == 0x000000, "Member 'Math_vector2r_Factory::RetVal' has a wrong offset!");

// Function Verse.Math.vector3$Factory
// 0x0018 (0x0018 - 0x0000)
struct Math_vector3_Factory final
{
public:
	struct Fvector3                               RetVal;                                            // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Math_vector3_Factory) == 0x000008, "Wrong alignment on Math_vector3_Factory");
static_assert(sizeof(Math_vector3_Factory) == 0x000018, "Wrong size on Math_vector3_Factory");
static_assert(offsetof(Math_vector3_Factory, RetVal) == 0x000000, "Member 'Math_vector3_Factory::RetVal' has a wrong offset!");

// Function Verse.Math.vector4_v$Factory
// 0x0028 (0x0028 - 0x0000)
struct Math_vector4_v_Factory final
{
public:
	struct Fvector4_v                             RetVal;                                            // 0x0000(0x0028)(Parm, OutParm, ReturnParm, NoDestructor)
};
static_assert(alignof(Math_vector4_v_Factory) == 0x000008, "Wrong alignment on Math_vector4_v_Factory");
static_assert(sizeof(Math_vector4_v_Factory) == 0x000028, "Wrong size on Math_vector4_v_Factory");
static_assert(offsetof(Math_vector4_v_Factory, RetVal) == 0x000000, "Member 'Math_vector4_v_Factory::RetVal' has a wrong offset!");

// Function Verse.Verse._L_2fVerse_2eorg_2fVerse_N_RIntMax
// 0x0010 (0x0010 - 0x0000)
struct Verse__L_2fVerse_2eorg_2fVerse_N_RIntMax final
{
public:
	struct Verse_0::Ftuple_L_R                    __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Verse__L_2fVerse_2eorg_2fVerse_N_RIntMax) == 0x000008, "Wrong alignment on Verse__L_2fVerse_2eorg_2fVerse_N_RIntMax");
static_assert(sizeof(Verse__L_2fVerse_2eorg_2fVerse_N_RIntMax) == 0x000010, "Wrong size on Verse__L_2fVerse_2eorg_2fVerse_N_RIntMax");
static_assert(offsetof(Verse__L_2fVerse_2eorg_2fVerse_N_RIntMax, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Verse__L_2fVerse_2eorg_2fVerse_N_RIntMax::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Verse__L_2fVerse_2eorg_2fVerse_N_RIntMax, RetVal) == 0x000008, "Member 'Verse__L_2fVerse_2eorg_2fVerse_N_RIntMax::RetVal' has a wrong offset!");

// Function Verse.Verse._L_2fVerse_2eorg_2fVerse_N_RIntMin
// 0x0010 (0x0010 - 0x0000)
struct Verse__L_2fVerse_2eorg_2fVerse_N_RIntMin final
{
public:
	struct Verse_0::Ftuple_L_R                    __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0001)(Parm, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         RetVal;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Verse__L_2fVerse_2eorg_2fVerse_N_RIntMin) == 0x000008, "Wrong alignment on Verse__L_2fVerse_2eorg_2fVerse_N_RIntMin");
static_assert(sizeof(Verse__L_2fVerse_2eorg_2fVerse_N_RIntMin) == 0x000010, "Wrong size on Verse__L_2fVerse_2eorg_2fVerse_N_RIntMin");
static_assert(offsetof(Verse__L_2fVerse_2eorg_2fVerse_N_RIntMin, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Verse__L_2fVerse_2eorg_2fVerse_N_RIntMin::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Verse__L_2fVerse_2eorg_2fVerse_N_RIntMin, RetVal) == 0x000008, "Member 'Verse__L_2fVerse_2eorg_2fVerse_N_RIntMin::RetVal' has a wrong offset!");

// Function Verse.Verse._L_2fVerse_2eorg_2fVerse_N_RToString_L_Nfloat_R
// 0x0018 (0x0018 - 0x0000)
struct Verse__L_2fVerse_2eorg_2fVerse_N_RToString_L_Nfloat_R final
{
public:
	double                                        __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FVerseStringProperty_                         RetVal;                                            // 0x0008(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(Verse__L_2fVerse_2eorg_2fVerse_N_RToString_L_Nfloat_R) == 0x000008, "Wrong alignment on Verse__L_2fVerse_2eorg_2fVerse_N_RToString_L_Nfloat_R");
static_assert(sizeof(Verse__L_2fVerse_2eorg_2fVerse_N_RToString_L_Nfloat_R) == 0x000018, "Wrong size on Verse__L_2fVerse_2eorg_2fVerse_N_RToString_L_Nfloat_R");
static_assert(offsetof(Verse__L_2fVerse_2eorg_2fVerse_N_RToString_L_Nfloat_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Verse__L_2fVerse_2eorg_2fVerse_N_RToString_L_Nfloat_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Verse__L_2fVerse_2eorg_2fVerse_N_RToString_L_Nfloat_R, RetVal) == 0x000008, "Member 'Verse__L_2fVerse_2eorg_2fVerse_N_RToString_L_Nfloat_R::RetVal' has a wrong offset!");

// Function Verse.Verse._L_2fVerse_2eorg_2fVerse_N_RToString_L_Nint_R
// 0x0018 (0x0018 - 0x0000)
struct Verse__L_2fVerse_2eorg_2fVerse_N_RToString_L_Nint_R final
{
public:
	int64                                         __verse_0xB2CDDD72_Argument;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FVerseStringProperty_                         RetVal;                                            // 0x0008(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(Verse__L_2fVerse_2eorg_2fVerse_N_RToString_L_Nint_R) == 0x000008, "Wrong alignment on Verse__L_2fVerse_2eorg_2fVerse_N_RToString_L_Nint_R");
static_assert(sizeof(Verse__L_2fVerse_2eorg_2fVerse_N_RToString_L_Nint_R) == 0x000018, "Wrong size on Verse__L_2fVerse_2eorg_2fVerse_N_RToString_L_Nint_R");
static_assert(offsetof(Verse__L_2fVerse_2eorg_2fVerse_N_RToString_L_Nint_R, __verse_0xB2CDDD72_Argument) == 0x000000, "Member 'Verse__L_2fVerse_2eorg_2fVerse_N_RToString_L_Nint_R::__verse_0xB2CDDD72_Argument' has a wrong offset!");
static_assert(offsetof(Verse__L_2fVerse_2eorg_2fVerse_N_RToString_L_Nint_R, RetVal) == 0x000008, "Member 'Verse__L_2fVerse_2eorg_2fVerse_N_RToString_L_Nint_R::RetVal' has a wrong offset!");

// Function Verse.Verse._L_2fVerse_2eorg_2fVerse_N_RToString_L_Nlogic_R
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) Verse__L_2fVerse_2eorg_2fVerse_N_RToString_L_Nlogic_R final
{
public:
	uint8                                         __verse_0xB2CDDD72_Argument : 1;                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Parm, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FVerseStringProperty_                         RetVal;                                            // 0x0008(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(Verse__L_2fVerse_2eorg_2fVerse_N_RToString_L_Nlogic_R) == 0x000008, "Wrong alignment on Verse__L_2fVerse_2eorg_2fVerse_N_RToString_L_Nlogic_R");
static_assert(sizeof(Verse__L_2fVerse_2eorg_2fVerse_N_RToString_L_Nlogic_R) == 0x000018, "Wrong size on Verse__L_2fVerse_2eorg_2fVerse_N_RToString_L_Nlogic_R");
static_assert(offsetof(Verse__L_2fVerse_2eorg_2fVerse_N_RToString_L_Nlogic_R, RetVal) == 0x000008, "Member 'Verse__L_2fVerse_2eorg_2fVerse_N_RToString_L_Nlogic_R::RetVal' has a wrong offset!");

}

