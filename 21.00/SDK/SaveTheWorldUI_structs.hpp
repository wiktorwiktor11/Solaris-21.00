#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SaveTheWorldUI

#include "Basic.hpp"

#include "FortniteUI_structs.hpp"
#include "GameplayTags_0_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK
{

// Enum SaveTheWorldUI.EViewerNavigationDirection
// NumValues: 0x0003
enum class EViewerNavigationDirection : uint8
{
	Previous                                 = 0,
	Next                                     = 1,
	EViewerNavigationDirection_MAX           = 2,
};

// Enum SaveTheWorldUI.EFortCollectionBookPopupButtonType
// NumValues: 0x0007
enum class EFortCollectionBookPopupButtonType : uint8
{
	Invalid                                  = 0,
	SelectItem                               = 1,
	Preview                                  = 2,
	Purchase                                 = 3,
	Unslot                                   = 4,
	Back                                     = 5,
	EFortCollectionBookPopupButtonType_MAX   = 6,
};

// Enum SaveTheWorldUI.ECollectionBookSectionNavTarget
// NumValues: 0x0003
enum class ECollectionBookSectionNavTarget : uint8
{
	SlotSelect                               = 0,
	SlotPicker                               = 1,
	ECollectionBookSectionNavTarget_MAX      = 2,
};

// Enum SaveTheWorldUI.ESquadSlotSortType
// NumValues: 0x0006
enum class ESquadSlotSortType : uint8
{
	ByRating                                 = 0,
	ByLevel                                  = 1,
	ByRarity                                 = 2,
	ByBonus                                  = 3,
	ByMatch                                  = 4,
	ESquadSlotSortType_MAX                   = 5,
};

// Enum SaveTheWorldUI.EFortAlterationOptionType
// NumValues: 0x0004
enum class EFortAlterationOptionType : uint8
{
	Upgrade                                  = 0,
	Replacement                              = 1,
	Max_NONE                                 = 2,
	EFortAlterationOptionType_MAX            = 3,
};

// Enum SaveTheWorldUI.ECollectionBookRewardStatus
// NumValues: 0x0004
enum class ECollectionBookRewardStatus : uint8
{
	Unknown                                  = 0,
	Available                                = 1,
	Claimed                                  = 2,
	ECollectionBookRewardStatus_MAX          = 3,
};

// Enum SaveTheWorldUI.ECollectionBookPrimaryNavTarget
// NumValues: 0x0003
enum class ECollectionBookPrimaryNavTarget : uint8
{
	Overview                                 = 0,
	SectionTileView                          = 1,
	ECollectionBookPrimaryNavTarget_MAX      = 2,
};

// Enum SaveTheWorldUI.EFortExpeditionListSort
// NumValues: 0x0004
enum class EFortExpeditionListSort : uint8
{
	ByRating                                 = 0,
	ByDuration                               = 1,
	ByName                                   = 2,
	EFortExpeditionListSort_MAX              = 3,
};

// Enum SaveTheWorldUI.EFrontEndRewardType
// NumValues: 0x000B
enum class EFrontEndRewardType : uint8
{
	Mission                                  = 0,
	Quest                                    = 1,
	EpicNewQuest                             = 2,
	Expedition                               = 3,
	CollectionBook                           = 4,
	MissionAlert                             = 5,
	DifficultyIncrease                       = 6,
	GiftBox                                  = 7,
	ItemCache                                = 8,
	PhoenixLevelUp                           = 9,
	EFrontEndRewardType_MAX                  = 10,
};

// Enum SaveTheWorldUI.ECalloutNavigationDirection
// NumValues: 0x0003
enum class ECalloutNavigationDirection : uint8
{
	Previous                                 = 0,
	Next                                     = 1,
	ECalloutNavigationDirection_MAX          = 2,
};

// Enum SaveTheWorldUI.EFortUISurvivorSquadMatchType
// NumValues: 0x0005
enum class EFortUISurvivorSquadMatchType : uint8
{
	Multi                                    = 0,
	Single                                   = 1,
	Summary                                  = 2,
	Max_None                                 = 3,
	EFortUISurvivorSquadMatchType_MAX        = 4,
};

// ScriptStruct SaveTheWorldUI.SquadSlotSortTypes
// 0x0010 (0x0010 - 0x0000)
struct FSquadSlotSortTypes final
{
public:
	TArray<ESquadSlotSortType>                    SortTypes;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSquadSlotSortTypes) == 0x000008, "Wrong alignment on FSquadSlotSortTypes");
static_assert(sizeof(FSquadSlotSortTypes) == 0x000010, "Wrong size on FSquadSlotSortTypes");
static_assert(offsetof(FSquadSlotSortTypes, SortTypes) == 0x000000, "Member 'FSquadSlotSortTypes::SortTypes' has a wrong offset!");

// ScriptStruct SaveTheWorldUI.FortDailyRewardsItemData
// 0x0010 (0x0010 - 0x0000)
struct FFortDailyRewardsItemData final
{
public:
	class UFortItem*                              RewardItem;                                        // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardDay;                                         // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCurrentReward;                                   // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsClaimed;                                         // 0x000D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortDailyRewardsItemData) == 0x000008, "Wrong alignment on FFortDailyRewardsItemData");
static_assert(sizeof(FFortDailyRewardsItemData) == 0x000010, "Wrong size on FFortDailyRewardsItemData");
static_assert(offsetof(FFortDailyRewardsItemData, RewardItem) == 0x000000, "Member 'FFortDailyRewardsItemData::RewardItem' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardsItemData, RewardDay) == 0x000008, "Member 'FFortDailyRewardsItemData::RewardDay' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardsItemData, IsCurrentReward) == 0x00000C, "Member 'FFortDailyRewardsItemData::IsCurrentReward' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardsItemData, IsClaimed) == 0x00000D, "Member 'FFortDailyRewardsItemData::IsClaimed' has a wrong offset!");

// ScriptStruct SaveTheWorldUI.FortDailyRewardsScheduleData
// 0x0098 (0x0098 - 0x0000)
struct FFortDailyRewardsScheduleData final
{
public:
	class FText                                   ScheduleTitle;                                     // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ScheduleDescription;                               // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ScheduleItemDescription;                           // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ScheduleEpicItemDescription;                       // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         WeekOffset;                                        // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardsGiven;                                      // 0x0064(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardsAllowed;                                    // 0x0068(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortDailyRewardsItemData>      CalendarItems;                                     // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortDailyRewardsItemData>      HighValueItems;                                    // 0x0080(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ClaimedToday;                                      // 0x0090(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortDailyRewardsScheduleData) == 0x000008, "Wrong alignment on FFortDailyRewardsScheduleData");
static_assert(sizeof(FFortDailyRewardsScheduleData) == 0x000098, "Wrong size on FFortDailyRewardsScheduleData");
static_assert(offsetof(FFortDailyRewardsScheduleData, ScheduleTitle) == 0x000000, "Member 'FFortDailyRewardsScheduleData::ScheduleTitle' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardsScheduleData, ScheduleDescription) == 0x000018, "Member 'FFortDailyRewardsScheduleData::ScheduleDescription' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardsScheduleData, ScheduleItemDescription) == 0x000030, "Member 'FFortDailyRewardsScheduleData::ScheduleItemDescription' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardsScheduleData, ScheduleEpicItemDescription) == 0x000048, "Member 'FFortDailyRewardsScheduleData::ScheduleEpicItemDescription' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardsScheduleData, WeekOffset) == 0x000060, "Member 'FFortDailyRewardsScheduleData::WeekOffset' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardsScheduleData, RewardsGiven) == 0x000064, "Member 'FFortDailyRewardsScheduleData::RewardsGiven' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardsScheduleData, RewardsAllowed) == 0x000068, "Member 'FFortDailyRewardsScheduleData::RewardsAllowed' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardsScheduleData, CalendarItems) == 0x000070, "Member 'FFortDailyRewardsScheduleData::CalendarItems' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardsScheduleData, HighValueItems) == 0x000080, "Member 'FFortDailyRewardsScheduleData::HighValueItems' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardsScheduleData, ClaimedToday) == 0x000090, "Member 'FFortDailyRewardsScheduleData::ClaimedToday' has a wrong offset!");

// ScriptStruct SaveTheWorldUI.FortDailyRewardsData
// 0x0018 (0x0018 - 0x0000)
struct FFortDailyRewardsData final
{
public:
	int32                                         CurrentLoginDays;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanClaim;                                         // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortDailyRewardsScheduleData>  Schedules;                                         // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortDailyRewardsData) == 0x000008, "Wrong alignment on FFortDailyRewardsData");
static_assert(sizeof(FFortDailyRewardsData) == 0x000018, "Wrong size on FFortDailyRewardsData");
static_assert(offsetof(FFortDailyRewardsData, CurrentLoginDays) == 0x000000, "Member 'FFortDailyRewardsData::CurrentLoginDays' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardsData, bCanClaim) == 0x000004, "Member 'FFortDailyRewardsData::bCanClaim' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardsData, Schedules) == 0x000008, "Member 'FFortDailyRewardsData::Schedules' has a wrong offset!");

// ScriptStruct SaveTheWorldUI.ExpeditionTabInfo
// 0x00F0 (0x00F0 - 0x0000)
struct FExpeditionTabInfo final
{
public:
	class FName                                   TabNameID;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortTabButtonLabelInfo                TabLabelInfo;                                      // 0x0010(0x00E0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExpeditionTabInfo) == 0x000010, "Wrong alignment on FExpeditionTabInfo");
static_assert(sizeof(FExpeditionTabInfo) == 0x0000F0, "Wrong size on FExpeditionTabInfo");
static_assert(offsetof(FExpeditionTabInfo, TabNameID) == 0x000000, "Member 'FExpeditionTabInfo::TabNameID' has a wrong offset!");
static_assert(offsetof(FExpeditionTabInfo, TabLabelInfo) == 0x000010, "Member 'FExpeditionTabInfo::TabLabelInfo' has a wrong offset!");

// ScriptStruct SaveTheWorldUI.ConsumedCriteriaData
// 0x0018 (0x0018 - 0x0000)
struct FConsumedCriteriaData final
{
public:
	float                                         PowerMod;                                          // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CriteriaNames;                                     // 0x0008(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConsumedCriteriaData) == 0x000008, "Wrong alignment on FConsumedCriteriaData");
static_assert(sizeof(FConsumedCriteriaData) == 0x000018, "Wrong size on FConsumedCriteriaData");
static_assert(offsetof(FConsumedCriteriaData, PowerMod) == 0x000000, "Member 'FConsumedCriteriaData::PowerMod' has a wrong offset!");
static_assert(offsetof(FConsumedCriteriaData, CriteriaNames) == 0x000008, "Member 'FConsumedCriteriaData::CriteriaNames' has a wrong offset!");

// ScriptStruct SaveTheWorldUI.FortRefundDescriptionsData
// 0x0038 (0x0040 - 0x0008)
struct FFortRefundDescriptionsData final : public FTableRowBase
{
public:
	class FString                                 SearchString;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetReleaseVersion;                              // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   RefundDescriptionText;                             // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortRefundDescriptionsData) == 0x000008, "Wrong alignment on FFortRefundDescriptionsData");
static_assert(sizeof(FFortRefundDescriptionsData) == 0x000040, "Wrong size on FFortRefundDescriptionsData");
static_assert(offsetof(FFortRefundDescriptionsData, SearchString) == 0x000008, "Member 'FFortRefundDescriptionsData::SearchString' has a wrong offset!");
static_assert(offsetof(FFortRefundDescriptionsData, TargetReleaseVersion) == 0x000018, "Member 'FFortRefundDescriptionsData::TargetReleaseVersion' has a wrong offset!");
static_assert(offsetof(FFortRefundDescriptionsData, RefundDescriptionText) == 0x000028, "Member 'FFortRefundDescriptionsData::RefundDescriptionText' has a wrong offset!");

// ScriptStruct SaveTheWorldUI.FortQuestMapEventQuestSideBarData
// 0x0020 (0x0028 - 0x0008)
struct FFortQuestMapEventQuestSideBarData final : public FTableRowBase
{
public:
	class UFortQuestItemDefinition*               QuestItemDefinition;                               // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         EventFlags;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bShowAlways;                                       // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CycleTime;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortQuestMapEventQuestSideBarData) == 0x000008, "Wrong alignment on FFortQuestMapEventQuestSideBarData");
static_assert(sizeof(FFortQuestMapEventQuestSideBarData) == 0x000028, "Wrong size on FFortQuestMapEventQuestSideBarData");
static_assert(offsetof(FFortQuestMapEventQuestSideBarData, QuestItemDefinition) == 0x000008, "Member 'FFortQuestMapEventQuestSideBarData::QuestItemDefinition' has a wrong offset!");
static_assert(offsetof(FFortQuestMapEventQuestSideBarData, EventFlags) == 0x000010, "Member 'FFortQuestMapEventQuestSideBarData::EventFlags' has a wrong offset!");
static_assert(offsetof(FFortQuestMapEventQuestSideBarData, bShowAlways) == 0x000020, "Member 'FFortQuestMapEventQuestSideBarData::bShowAlways' has a wrong offset!");
static_assert(offsetof(FFortQuestMapEventQuestSideBarData, CycleTime) == 0x000024, "Member 'FFortQuestMapEventQuestSideBarData::CycleTime' has a wrong offset!");

// ScriptStruct SaveTheWorldUI.FortLandingPageDefenderSummaryInfo
// 0x0030 (0x0030 - 0x0000)
struct FFortLandingPageDefenderSummaryInfo final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TheaterDisplayName;                                // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 TheaterUniqueId;                                   // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortLandingPageDefenderSummaryInfo) == 0x000008, "Wrong alignment on FFortLandingPageDefenderSummaryInfo");
static_assert(sizeof(FFortLandingPageDefenderSummaryInfo) == 0x000030, "Wrong size on FFortLandingPageDefenderSummaryInfo");
static_assert(offsetof(FFortLandingPageDefenderSummaryInfo, SquadId) == 0x000000, "Member 'FFortLandingPageDefenderSummaryInfo::SquadId' has a wrong offset!");
static_assert(offsetof(FFortLandingPageDefenderSummaryInfo, TheaterDisplayName) == 0x000008, "Member 'FFortLandingPageDefenderSummaryInfo::TheaterDisplayName' has a wrong offset!");
static_assert(offsetof(FFortLandingPageDefenderSummaryInfo, TheaterUniqueId) == 0x000020, "Member 'FFortLandingPageDefenderSummaryInfo::TheaterUniqueId' has a wrong offset!");

// ScriptStruct SaveTheWorldUI.FortAttributeModifierAccumulation
// 0x0048 (0x0048 - 0x0000)
struct FFortAttributeModifierAccumulation final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAttribute                     Attribute;                                         // 0x0008(0x0038)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayModOp                                ModifierOp;                                        // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Magnitude;                                         // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAttributeModifierAccumulation) == 0x000008, "Wrong alignment on FFortAttributeModifierAccumulation");
static_assert(sizeof(FFortAttributeModifierAccumulation) == 0x000048, "Wrong size on FFortAttributeModifierAccumulation");
static_assert(offsetof(FFortAttributeModifierAccumulation, GameplayTag) == 0x000000, "Member 'FFortAttributeModifierAccumulation::GameplayTag' has a wrong offset!");
static_assert(offsetof(FFortAttributeModifierAccumulation, Attribute) == 0x000008, "Member 'FFortAttributeModifierAccumulation::Attribute' has a wrong offset!");
static_assert(offsetof(FFortAttributeModifierAccumulation, ModifierOp) == 0x000040, "Member 'FFortAttributeModifierAccumulation::ModifierOp' has a wrong offset!");
static_assert(offsetof(FFortAttributeModifierAccumulation, Magnitude) == 0x000044, "Member 'FFortAttributeModifierAccumulation::Magnitude' has a wrong offset!");

// ScriptStruct SaveTheWorldUI.FortSurvivorSquadSlottingFeedbackData
// 0x00B0 (0x00B0 - 0x0000)
struct FFortSurvivorSquadSlottingFeedbackData final
{
public:
	bool                                          HadLeaderMatch;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasLeaderMatch;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, int32>              PreviousSetBonusCounts;                            // 0x0008(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, int32>              CurrentSetBonusCounts;                             // 0x0058(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         PreviousPersonalityMatchCount;                     // 0x00A8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentPersonalityMatchCount;                      // 0x00AC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSurvivorSquadSlottingFeedbackData) == 0x000008, "Wrong alignment on FFortSurvivorSquadSlottingFeedbackData");
static_assert(sizeof(FFortSurvivorSquadSlottingFeedbackData) == 0x0000B0, "Wrong size on FFortSurvivorSquadSlottingFeedbackData");
static_assert(offsetof(FFortSurvivorSquadSlottingFeedbackData, HadLeaderMatch) == 0x000000, "Member 'FFortSurvivorSquadSlottingFeedbackData::HadLeaderMatch' has a wrong offset!");
static_assert(offsetof(FFortSurvivorSquadSlottingFeedbackData, HasLeaderMatch) == 0x000001, "Member 'FFortSurvivorSquadSlottingFeedbackData::HasLeaderMatch' has a wrong offset!");
static_assert(offsetof(FFortSurvivorSquadSlottingFeedbackData, PreviousSetBonusCounts) == 0x000008, "Member 'FFortSurvivorSquadSlottingFeedbackData::PreviousSetBonusCounts' has a wrong offset!");
static_assert(offsetof(FFortSurvivorSquadSlottingFeedbackData, CurrentSetBonusCounts) == 0x000058, "Member 'FFortSurvivorSquadSlottingFeedbackData::CurrentSetBonusCounts' has a wrong offset!");
static_assert(offsetof(FFortSurvivorSquadSlottingFeedbackData, PreviousPersonalityMatchCount) == 0x0000A8, "Member 'FFortSurvivorSquadSlottingFeedbackData::PreviousPersonalityMatchCount' has a wrong offset!");
static_assert(offsetof(FFortSurvivorSquadSlottingFeedbackData, CurrentPersonalityMatchCount) == 0x0000AC, "Member 'FFortSurvivorSquadSlottingFeedbackData::CurrentPersonalityMatchCount' has a wrong offset!");

// ScriptStruct SaveTheWorldUI.FortSurvivorSquadSelectorButtonSummaryStats
// 0x00A0 (0x00A0 - 0x0000)
struct FFortSurvivorSquadSelectorButtonSummaryStats final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAttribute                     FortAttribute;                                     // 0x0008(0x0038)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FortAttributeValue;                                // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAttribute                     FortTeamAttribute;                                 // 0x0048(0x0038)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeamFortAttributeValue;                            // 0x0080(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SquadPowerValue;                                   // 0x0084(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   FortAttributeName;                                 // 0x0088(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSurvivorSquadSelectorButtonSummaryStats) == 0x000008, "Wrong alignment on FFortSurvivorSquadSelectorButtonSummaryStats");
static_assert(sizeof(FFortSurvivorSquadSelectorButtonSummaryStats) == 0x0000A0, "Wrong size on FFortSurvivorSquadSelectorButtonSummaryStats");
static_assert(offsetof(FFortSurvivorSquadSelectorButtonSummaryStats, SquadId) == 0x000000, "Member 'FFortSurvivorSquadSelectorButtonSummaryStats::SquadId' has a wrong offset!");
static_assert(offsetof(FFortSurvivorSquadSelectorButtonSummaryStats, FortAttribute) == 0x000008, "Member 'FFortSurvivorSquadSelectorButtonSummaryStats::FortAttribute' has a wrong offset!");
static_assert(offsetof(FFortSurvivorSquadSelectorButtonSummaryStats, FortAttributeValue) == 0x000040, "Member 'FFortSurvivorSquadSelectorButtonSummaryStats::FortAttributeValue' has a wrong offset!");
static_assert(offsetof(FFortSurvivorSquadSelectorButtonSummaryStats, FortTeamAttribute) == 0x000048, "Member 'FFortSurvivorSquadSelectorButtonSummaryStats::FortTeamAttribute' has a wrong offset!");
static_assert(offsetof(FFortSurvivorSquadSelectorButtonSummaryStats, TeamFortAttributeValue) == 0x000080, "Member 'FFortSurvivorSquadSelectorButtonSummaryStats::TeamFortAttributeValue' has a wrong offset!");
static_assert(offsetof(FFortSurvivorSquadSelectorButtonSummaryStats, SquadPowerValue) == 0x000084, "Member 'FFortSurvivorSquadSelectorButtonSummaryStats::SquadPowerValue' has a wrong offset!");
static_assert(offsetof(FFortSurvivorSquadSelectorButtonSummaryStats, FortAttributeName) == 0x000088, "Member 'FFortSurvivorSquadSelectorButtonSummaryStats::FortAttributeName' has a wrong offset!");

// ScriptStruct SaveTheWorldUI.FortSurvivorSquadSelectorButtonPersonalityMatches
// 0x0490 (0x0490 - 0x0000)
struct FFortSurvivorSquadSelectorButtonPersonalityMatches final
{
public:
	int32                                         NumPersonalityMatches;                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalNonLeaderSquadMembers;                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HavePersonalityIcons;                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortMultiSizeBrush                    PersonalityIcons;                                  // 0x0010(0x0480)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSurvivorSquadSelectorButtonPersonalityMatches) == 0x000010, "Wrong alignment on FFortSurvivorSquadSelectorButtonPersonalityMatches");
static_assert(sizeof(FFortSurvivorSquadSelectorButtonPersonalityMatches) == 0x000490, "Wrong size on FFortSurvivorSquadSelectorButtonPersonalityMatches");
static_assert(offsetof(FFortSurvivorSquadSelectorButtonPersonalityMatches, NumPersonalityMatches) == 0x000000, "Member 'FFortSurvivorSquadSelectorButtonPersonalityMatches::NumPersonalityMatches' has a wrong offset!");
static_assert(offsetof(FFortSurvivorSquadSelectorButtonPersonalityMatches, TotalNonLeaderSquadMembers) == 0x000004, "Member 'FFortSurvivorSquadSelectorButtonPersonalityMatches::TotalNonLeaderSquadMembers' has a wrong offset!");
static_assert(offsetof(FFortSurvivorSquadSelectorButtonPersonalityMatches, HavePersonalityIcons) == 0x000008, "Member 'FFortSurvivorSquadSelectorButtonPersonalityMatches::HavePersonalityIcons' has a wrong offset!");
static_assert(offsetof(FFortSurvivorSquadSelectorButtonPersonalityMatches, PersonalityIcons) == 0x000010, "Member 'FFortSurvivorSquadSelectorButtonPersonalityMatches::PersonalityIcons' has a wrong offset!");

// ScriptStruct SaveTheWorldUI.FortUISurvivorSquadStatMatch
// 0x04C0 (0x04C0 - 0x0000)
struct FFortUISurvivorSquadStatMatch final
{
public:
	struct FFortMultiSizeBrush                    Icons;                                             // 0x0000(0x0480)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   MagnitudeText;                                     // 0x0480(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   AttributeDisplayName;                              // 0x0498(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         NumMembersMeetingCriteria;                         // 0x04B0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumMembersRequired;                                // 0x04B4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortUISurvivorSquadMatchType                 MatchType;                                         // 0x04B8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuffState                                PreviewEffect;                                     // 0x04B9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4BA[0x6];                                      // 0x04BA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortUISurvivorSquadStatMatch) == 0x000010, "Wrong alignment on FFortUISurvivorSquadStatMatch");
static_assert(sizeof(FFortUISurvivorSquadStatMatch) == 0x0004C0, "Wrong size on FFortUISurvivorSquadStatMatch");
static_assert(offsetof(FFortUISurvivorSquadStatMatch, Icons) == 0x000000, "Member 'FFortUISurvivorSquadStatMatch::Icons' has a wrong offset!");
static_assert(offsetof(FFortUISurvivorSquadStatMatch, MagnitudeText) == 0x000480, "Member 'FFortUISurvivorSquadStatMatch::MagnitudeText' has a wrong offset!");
static_assert(offsetof(FFortUISurvivorSquadStatMatch, AttributeDisplayName) == 0x000498, "Member 'FFortUISurvivorSquadStatMatch::AttributeDisplayName' has a wrong offset!");
static_assert(offsetof(FFortUISurvivorSquadStatMatch, NumMembersMeetingCriteria) == 0x0004B0, "Member 'FFortUISurvivorSquadStatMatch::NumMembersMeetingCriteria' has a wrong offset!");
static_assert(offsetof(FFortUISurvivorSquadStatMatch, NumMembersRequired) == 0x0004B4, "Member 'FFortUISurvivorSquadStatMatch::NumMembersRequired' has a wrong offset!");
static_assert(offsetof(FFortUISurvivorSquadStatMatch, MatchType) == 0x0004B8, "Member 'FFortUISurvivorSquadStatMatch::MatchType' has a wrong offset!");
static_assert(offsetof(FFortUISurvivorSquadStatMatch, PreviewEffect) == 0x0004B9, "Member 'FFortUISurvivorSquadStatMatch::PreviewEffect' has a wrong offset!");

}

