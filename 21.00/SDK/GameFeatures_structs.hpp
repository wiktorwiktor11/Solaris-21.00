#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameFeatures

#include "Basic.hpp"


namespace SDK
{

// Enum GameFeatures.EGameFeatureTargetState
// NumValues: 0x0005
enum class EGameFeatureTargetState : uint8
{
	Installed                                = 0,
	Registered                               = 1,
	Loaded                                   = 2,
	Active                                   = 3,
	EGameFeatureTargetState_MAX              = 4,
};

// ScriptStruct GameFeatures.GameFeatureComponentEntry
// 0x0058 (0x0058 - 0x0000)
struct FGameFeatureComponentEntry final
{
public:
	TSoftClassPtr<class UClass>                   ActorClass;                                        // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ComponentClass;                                    // 0x0028(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bClientComponent : 1;                              // 0x0050(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bServerComponent : 1;                              // 0x0050(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameFeatureComponentEntry) == 0x000008, "Wrong alignment on FGameFeatureComponentEntry");
static_assert(sizeof(FGameFeatureComponentEntry) == 0x000058, "Wrong size on FGameFeatureComponentEntry");
static_assert(offsetof(FGameFeatureComponentEntry, ActorClass) == 0x000000, "Member 'FGameFeatureComponentEntry::ActorClass' has a wrong offset!");
static_assert(offsetof(FGameFeatureComponentEntry, ComponentClass) == 0x000028, "Member 'FGameFeatureComponentEntry::ComponentClass' has a wrong offset!");

// ScriptStruct GameFeatures.DataRegistrySourceToAdd
// 0x0060 (0x0060 - 0x0000)
struct FDataRegistrySourceToAdd final
{
public:
	class FName                                   RegistryToAddTo;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AssetPriority;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bClientSource : 1;                                 // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bServerSource : 1;                                 // 0x0008(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UDataTable>              DataTableToAdd;                                    // 0x0010(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UCurveTable>             CurveTableToAdd;                                   // 0x0038(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDataRegistrySourceToAdd) == 0x000008, "Wrong alignment on FDataRegistrySourceToAdd");
static_assert(sizeof(FDataRegistrySourceToAdd) == 0x000060, "Wrong size on FDataRegistrySourceToAdd");
static_assert(offsetof(FDataRegistrySourceToAdd, RegistryToAddTo) == 0x000000, "Member 'FDataRegistrySourceToAdd::RegistryToAddTo' has a wrong offset!");
static_assert(offsetof(FDataRegistrySourceToAdd, AssetPriority) == 0x000004, "Member 'FDataRegistrySourceToAdd::AssetPriority' has a wrong offset!");
static_assert(offsetof(FDataRegistrySourceToAdd, DataTableToAdd) == 0x000010, "Member 'FDataRegistrySourceToAdd::DataTableToAdd' has a wrong offset!");
static_assert(offsetof(FDataRegistrySourceToAdd, CurveTableToAdd) == 0x000038, "Member 'FDataRegistrySourceToAdd::CurveTableToAdd' has a wrong offset!");

// ScriptStruct GameFeatures.GameFeaturePluginStateMachineProperties
// 0x00A0 (0x00A0 - 0x0000)
struct FGameFeaturePluginStateMachineProperties final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameFeatureData*                       GameFeatureData;                                   // 0x0050(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x48];                                      // 0x0058(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameFeaturePluginStateMachineProperties) == 0x000008, "Wrong alignment on FGameFeaturePluginStateMachineProperties");
static_assert(sizeof(FGameFeaturePluginStateMachineProperties) == 0x0000A0, "Wrong size on FGameFeaturePluginStateMachineProperties");
static_assert(offsetof(FGameFeaturePluginStateMachineProperties, GameFeatureData) == 0x000050, "Member 'FGameFeaturePluginStateMachineProperties::GameFeatureData' has a wrong offset!");

}

