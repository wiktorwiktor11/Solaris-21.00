#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Daisy_Launcher

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Daisy_Launcher.BP_Daisy_Launcher_C
// 0x02D8 (0x0C48 - 0x0970)
class ABP_Daisy_Launcher_C final : public AFortAthenaLowGravZone
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0970(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFortPhysicsOverlapComponent*           FortPhysicsOverlap;                                // 0x0978(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Geyser_Idle;                                    // 0x0980(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        LaunchSound;                                       // 0x0988(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   S_FX_GeyserCone;                                   // 0x0990(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_CorruptedVent_A;                                // 0x0998(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x09A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Grow_Lerp_Control_4303DDAC42B14EEAD994B0B1B05839D6; // 0x09A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Grow__Direction_4303DDAC42B14EEAD994B0B1B05839D6;  // 0x09AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9AD[0x3];                                      // 0x09AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Grow;                                              // 0x09B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ZeroGravPrj;                                       // 0x09B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Base_Bubbling_Mesh_Color;                          // 0x09BC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Geyser_Illuminated_Mesh_Color;                     // 0x09CC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActive;                                          // 0x09DC(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9DD[0x3];                                      // 0x09DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GeyserContrast;                                    // 0x09E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UpwardLaunchVelocity;                              // 0x09E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             SoundOnActivate;                                   // 0x09E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             SoundOnDeactivate;                                 // 0x09F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldBoost;                                       // 0x09F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowEffects;                                      // 0x09F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDisabled;                                        // 0x09FA(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9FB[0x1];                                      // 0x09FB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CharacterLaunchVelocity;                           // 0x09FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ZOverride;                                         // 0x0A00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          XYOverride;                                        // 0x0A01(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A02[0x6];                                      // 0x0A02(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SavedConeScale;                                    // 0x0A08(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           VolcanoCue;                                        // 0x0A20(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           VentCue;                                           // 0x0A24(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ActorRef;                                          // 0x0A28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PrimeMode;                                         // 0x0A30(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A31[0x7];                                      // 0x0A31(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         SF_MinActivationTime;                              // 0x0A38(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SF_MaxActivationTime;                              // 0x0A60(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SF_ActiveDuration;                                 // 0x0A88(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         Time;                                              // 0x0AB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AB4[0x4];                                      // 0x0AB4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         SF_PrimeDuration;                                  // 0x0AB8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SF_LaunchVelocity;                                 // 0x0AE0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SF_VehicleLaunchVelocity;                          // 0x0B08(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SF_BoulderLaunchVelocity;                          // 0x0B30(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         ShouldDestroy;                                     // 0x0B58(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         DestroyDistance;                                   // 0x0B80(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<EObjectTypeQuery>                      DestroyObjectTypes;                                // 0x0BA8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UFXSystemComponent*                     GeyserBurstRef;                                    // 0x0BB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  Hawaii;                                            // 0x0BC0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SF_BeachBallLaunchVelocity;                        // 0x0BE0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           GeyserPrime;                                       // 0x0C08(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C0C[0x4];                                      // 0x0C0C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 PhysicsObjectToLaunch;                             // 0x0C10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 LaunchedActor;                                     // 0x0C18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           LaunchGC;                                          // 0x0C20(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C24[0x4];                                      // 0x0C24(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  Riding;                                            // 0x0C28(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ActiveGeyser();
	void BndEvt__S_FX_GeyserCone_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__S_FX_GeyserCone_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void DeactivateGeyser();
	void DestroyBuildingProps(class AActor* Actor, class UAbilitySystemComponent* AbilitySystemComp, const struct FVector& LaunchVelocity);
	void ExecuteUbergraph_BP_Daisy_Launcher(int32 EntryPoint);
	void FireGeyser();
	void Grow__FinishedFunc();
	void Grow__UpdateFunc();
	void OnRep_IsActive();
	void OnRep_IsDisabled();
	void OnRep_PrimeMode();
	void PrimeGeyser();
	void ProjEnter(class AFortProjectileBase* Projectile);
	void ProjExit(class AFortProjectileBase* Projectile);
	void ReceiveBeginPlay();
	void ResetGeyserWait();
	void SetupGeyserWait();
	void SetupMaterialParams();
	void ToyEnter(class APhysicsBall_Master_C* Projectile);
	void ToyExit(class APhysicsBall_Master_C* Projectile);

	class UStaticMesh* GetCollisionStaticMesh() const;
	TArray<class UMeshComponent*> GetMeshComponents() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Daisy_Launcher_C">();
	}
	static class ABP_Daisy_Launcher_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Daisy_Launcher_C>();
	}
};
static_assert(alignof(ABP_Daisy_Launcher_C) == 0x000008, "Wrong alignment on ABP_Daisy_Launcher_C");
static_assert(sizeof(ABP_Daisy_Launcher_C) == 0x000C48, "Wrong size on ABP_Daisy_Launcher_C");
static_assert(offsetof(ABP_Daisy_Launcher_C, UberGraphFrame) == 0x000970, "Member 'ABP_Daisy_Launcher_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, FortPhysicsOverlap) == 0x000978, "Member 'ABP_Daisy_Launcher_C::FortPhysicsOverlap' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, NS_Geyser_Idle) == 0x000980, "Member 'ABP_Daisy_Launcher_C::NS_Geyser_Idle' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, LaunchSound) == 0x000988, "Member 'ABP_Daisy_Launcher_C::LaunchSound' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, S_FX_GeyserCone) == 0x000990, "Member 'ABP_Daisy_Launcher_C::S_FX_GeyserCone' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, SM_CorruptedVent_A) == 0x000998, "Member 'ABP_Daisy_Launcher_C::SM_CorruptedVent_A' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, Scene) == 0x0009A0, "Member 'ABP_Daisy_Launcher_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, Grow_Lerp_Control_4303DDAC42B14EEAD994B0B1B05839D6) == 0x0009A8, "Member 'ABP_Daisy_Launcher_C::Grow_Lerp_Control_4303DDAC42B14EEAD994B0B1B05839D6' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, Grow__Direction_4303DDAC42B14EEAD994B0B1B05839D6) == 0x0009AC, "Member 'ABP_Daisy_Launcher_C::Grow__Direction_4303DDAC42B14EEAD994B0B1B05839D6' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, Grow) == 0x0009B0, "Member 'ABP_Daisy_Launcher_C::Grow' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, ZeroGravPrj) == 0x0009B8, "Member 'ABP_Daisy_Launcher_C::ZeroGravPrj' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, Base_Bubbling_Mesh_Color) == 0x0009BC, "Member 'ABP_Daisy_Launcher_C::Base_Bubbling_Mesh_Color' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, Geyser_Illuminated_Mesh_Color) == 0x0009CC, "Member 'ABP_Daisy_Launcher_C::Geyser_Illuminated_Mesh_Color' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, IsActive) == 0x0009DC, "Member 'ABP_Daisy_Launcher_C::IsActive' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, GeyserContrast) == 0x0009E0, "Member 'ABP_Daisy_Launcher_C::GeyserContrast' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, UpwardLaunchVelocity) == 0x0009E4, "Member 'ABP_Daisy_Launcher_C::UpwardLaunchVelocity' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, SoundOnActivate) == 0x0009E8, "Member 'ABP_Daisy_Launcher_C::SoundOnActivate' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, SoundOnDeactivate) == 0x0009F0, "Member 'ABP_Daisy_Launcher_C::SoundOnDeactivate' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, ShouldBoost) == 0x0009F8, "Member 'ABP_Daisy_Launcher_C::ShouldBoost' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, AllowEffects) == 0x0009F9, "Member 'ABP_Daisy_Launcher_C::AllowEffects' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, IsDisabled) == 0x0009FA, "Member 'ABP_Daisy_Launcher_C::IsDisabled' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, CharacterLaunchVelocity) == 0x0009FC, "Member 'ABP_Daisy_Launcher_C::CharacterLaunchVelocity' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, ZOverride) == 0x000A00, "Member 'ABP_Daisy_Launcher_C::ZOverride' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, XYOverride) == 0x000A01, "Member 'ABP_Daisy_Launcher_C::XYOverride' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, SavedConeScale) == 0x000A08, "Member 'ABP_Daisy_Launcher_C::SavedConeScale' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, VolcanoCue) == 0x000A20, "Member 'ABP_Daisy_Launcher_C::VolcanoCue' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, VentCue) == 0x000A24, "Member 'ABP_Daisy_Launcher_C::VentCue' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, ActorRef) == 0x000A28, "Member 'ABP_Daisy_Launcher_C::ActorRef' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, PrimeMode) == 0x000A30, "Member 'ABP_Daisy_Launcher_C::PrimeMode' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, SF_MinActivationTime) == 0x000A38, "Member 'ABP_Daisy_Launcher_C::SF_MinActivationTime' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, SF_MaxActivationTime) == 0x000A60, "Member 'ABP_Daisy_Launcher_C::SF_MaxActivationTime' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, SF_ActiveDuration) == 0x000A88, "Member 'ABP_Daisy_Launcher_C::SF_ActiveDuration' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, Time) == 0x000AB0, "Member 'ABP_Daisy_Launcher_C::Time' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, SF_PrimeDuration) == 0x000AB8, "Member 'ABP_Daisy_Launcher_C::SF_PrimeDuration' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, SF_LaunchVelocity) == 0x000AE0, "Member 'ABP_Daisy_Launcher_C::SF_LaunchVelocity' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, SF_VehicleLaunchVelocity) == 0x000B08, "Member 'ABP_Daisy_Launcher_C::SF_VehicleLaunchVelocity' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, SF_BoulderLaunchVelocity) == 0x000B30, "Member 'ABP_Daisy_Launcher_C::SF_BoulderLaunchVelocity' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, ShouldDestroy) == 0x000B58, "Member 'ABP_Daisy_Launcher_C::ShouldDestroy' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, DestroyDistance) == 0x000B80, "Member 'ABP_Daisy_Launcher_C::DestroyDistance' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, DestroyObjectTypes) == 0x000BA8, "Member 'ABP_Daisy_Launcher_C::DestroyObjectTypes' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, GeyserBurstRef) == 0x000BB8, "Member 'ABP_Daisy_Launcher_C::GeyserBurstRef' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, Hawaii) == 0x000BC0, "Member 'ABP_Daisy_Launcher_C::Hawaii' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, SF_BeachBallLaunchVelocity) == 0x000BE0, "Member 'ABP_Daisy_Launcher_C::SF_BeachBallLaunchVelocity' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, GeyserPrime) == 0x000C08, "Member 'ABP_Daisy_Launcher_C::GeyserPrime' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, PhysicsObjectToLaunch) == 0x000C10, "Member 'ABP_Daisy_Launcher_C::PhysicsObjectToLaunch' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, LaunchedActor) == 0x000C18, "Member 'ABP_Daisy_Launcher_C::LaunchedActor' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, LaunchGC) == 0x000C20, "Member 'ABP_Daisy_Launcher_C::LaunchGC' has a wrong offset!");
static_assert(offsetof(ABP_Daisy_Launcher_C, Riding) == 0x000C28, "Member 'ABP_Daisy_Launcher_C::Riding' has a wrong offset!");

}

