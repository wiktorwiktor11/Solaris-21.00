#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TankUI

#include "Basic.hpp"

#include "TankUI_classes.hpp"
#include "TankUI_parameters.hpp"


namespace SDK
{

// Function TankUI.TankVehicleReticle.HandleOnDamageablePartHealthChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FVehicleDamageablePartConfig     PartConfig                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVehicleDamageablePart           Part                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bNewlyDisabled                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewlyEnabled                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTankVehicleReticle::HandleOnDamageablePartHealthChanged(const struct FVehicleDamageablePartConfig& PartConfig, const struct FVehicleDamageablePart& Part, const bool bNewlyDisabled, const bool bNewlyEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TankVehicleReticle", "HandleOnDamageablePartHealthChanged");

	Params::TankVehicleReticle_HandleOnDamageablePartHealthChanged Parms{};

	Parms.PartConfig = std::move(PartConfig);
	Parms.Part = std::move(Part);
	Parms.bNewlyDisabled = bNewlyDisabled;
	Parms.bNewlyEnabled = bNewlyEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TankUI.TankVehicleReticle.HandleOnEquipMountedWeapon
// (Final, Native, Private)
// Parameters:
// class AFortWeaponRanged*                EquippedMountedWeapon                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTankVehicleReticle::HandleOnEquipMountedWeapon(class AFortWeaponRanged* EquippedMountedWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TankVehicleReticle", "HandleOnEquipMountedWeapon");

	Params::TankVehicleReticle_HandleOnEquipMountedWeapon Parms{};

	Parms.EquippedMountedWeapon = EquippedMountedWeapon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TankUI.TankVehicleReticle.OnCannonFired
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   RateTime                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTankVehicleReticle::OnCannonFired(const float RateTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TankVehicleReticle", "OnCannonFired");

	Params::TankVehicleReticle_OnCannonFired Parms{};

	Parms.RateTime = RateTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TankUI.TankVehicleReticle.OnTankDistanceUpdate
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   Distance                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DistancePercent                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTankVehicleReticle::OnTankDistanceUpdate(const float Distance, const float DistancePercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TankVehicleReticle", "OnTankDistanceUpdate");

	Params::TankVehicleReticle_OnTankDistanceUpdate Parms{};

	Parms.Distance = Distance;
	Parms.DistancePercent = DistancePercent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TankUI.TankVehicleReticle.OnTankEngineHealthChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   EngineHealth                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   EngineHealthMax                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewlyDisabled                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewlyEnabled                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTankVehicleReticle::OnTankEngineHealthChanged(const float EngineHealth, const float EngineHealthMax, const bool bNewlyDisabled, const bool bNewlyEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TankVehicleReticle", "OnTankEngineHealthChanged");

	Params::TankVehicleReticle_OnTankEngineHealthChanged Parms{};

	Parms.EngineHealth = EngineHealth;
	Parms.EngineHealthMax = EngineHealthMax;
	Parms.bNewlyDisabled = bNewlyDisabled;
	Parms.bNewlyEnabled = bNewlyEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TankUI.TankVehicleReticle.OnTankHatchHealthChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   HatchHealth                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   HatchHealthMax                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewlyDisabled                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewlyEnabled                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTankVehicleReticle::OnTankHatchHealthChanged(const float HatchHealth, const float HatchHealthMax, const bool bNewlyDisabled, const bool bNewlyEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TankVehicleReticle", "OnTankHatchHealthChanged");

	Params::TankVehicleReticle_OnTankHatchHealthChanged Parms{};

	Parms.HatchHealth = HatchHealth;
	Parms.HatchHealthMax = HatchHealthMax;
	Parms.bNewlyDisabled = bNewlyDisabled;
	Parms.bNewlyEnabled = bNewlyEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TankUI.TankVehicleReticle.OnTankRotationValueChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   TankValue                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TurretValue                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTankVehicleReticle::OnTankRotationValueChanged(const float TankValue, const float TurretValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TankVehicleReticle", "OnTankRotationValueChanged");

	Params::TankVehicleReticle_OnTankRotationValueChanged Parms{};

	Parms.TankValue = TankValue;
	Parms.TurretValue = TurretValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TankUI.TankVehicleReticle.OnTankTargetingPressed
// (Event, Protected, BlueprintEvent)

void UTankVehicleReticle::OnTankTargetingPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TankVehicleReticle", "OnTankTargetingPressed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TankUI.TankVehicleReticle.OnTankTargetingReleased
// (Event, Protected, BlueprintEvent)

void UTankVehicleReticle::OnTankTargetingReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TankVehicleReticle", "OnTankTargetingReleased");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TankUI.TankVehicleReticle.OnTankTurretAimPitchValueChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   Pitch                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PitchPercent                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTankVehicleReticle::OnTankTurretAimPitchValueChanged(const float Pitch, const float PitchPercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TankVehicleReticle", "OnTankTurretAimPitchValueChanged");

	Params::TankVehicleReticle_OnTankTurretAimPitchValueChanged Parms{};

	Parms.Pitch = Pitch;
	Parms.PitchPercent = PitchPercent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TankUI.TankVehicleReticle.OnTankTurretAimYawValueChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTankVehicleReticle::OnTankTurretAimYawValueChanged(const float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TankVehicleReticle", "OnTankTurretAimYawValueChanged");

	Params::TankVehicleReticle_OnTankTurretAimYawValueChanged Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TankUI.TankVehicleReticle.OnTreadEnabledChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bEnabled                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETreadSide                              Side                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTankVehicleReticle::OnTreadEnabledChanged(const bool bEnabled, const ETreadSide Side)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TankVehicleReticle", "OnTreadEnabledChanged");

	Params::TankVehicleReticle_OnTreadEnabledChanged Parms{};

	Parms.bEnabled = bEnabled;
	Parms.Side = Side;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TankUI.TankVehicleReticle.SetupVehicleFromBP
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class AActor*                           NewVehicle                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTankVehicleReticle::SetupVehicleFromBP(class AActor* NewVehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TankVehicleReticle", "SetupVehicleFromBP");

	Params::TankVehicleReticle_SetupVehicleFromBP Parms{};

	Parms.NewVehicle = NewVehicle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

