#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VGameplayRst

#include "Basic.hpp"

#include "EntityCore_classes.hpp"
#include "ModularGameplay_classes.hpp"
#include "VGameplayRst_structs.hpp"
#include "EntityActor_classes.hpp"
#include "VerseGameplay_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class VGameplayRst.AudioComponentBase
// 0x0010 (0x00A0 - 0x0090)
class UAudioComponentBase : public UEntityActorComponent
{
public:
	class UVerseAssetPtr*                         SoundAsset;                                        // 0x0090(0x0008)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FActiveSoundInfo                       ActiveSoundInfo;                                   // 0x0098(0x0008)(Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	void OnRep_ActiveSoundInfo();
	void OnRep_SoundAsset();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioComponentBase">();
	}
	static class UAudioComponentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioComponentBase>();
	}
};
static_assert(alignof(UAudioComponentBase) == 0x000008, "Wrong alignment on UAudioComponentBase");
static_assert(sizeof(UAudioComponentBase) == 0x0000A0, "Wrong size on UAudioComponentBase");
static_assert(offsetof(UAudioComponentBase, SoundAsset) == 0x000090, "Member 'UAudioComponentBase::SoundAsset' has a wrong offset!");
static_assert(offsetof(UAudioComponentBase, ActiveSoundInfo) == 0x000098, "Member 'UAudioComponentBase::ActiveSoundInfo' has a wrong offset!");

// Class VGameplayRst.ControllerStateComponent
// 0x0030 (0x00D0 - 0x00A0)
class UControllerStateComponent final : public UControllerComponent
{
public:
	TArray<class FString>                         ActiveStates;                                      // 0x00A0(0x0010)(Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B0[0x20];                                      // 0x00B0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_ActiveStates();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControllerStateComponent">();
	}
	static class UControllerStateComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControllerStateComponent>();
	}
};
static_assert(alignof(UControllerStateComponent) == 0x000008, "Wrong alignment on UControllerStateComponent");
static_assert(sizeof(UControllerStateComponent) == 0x0000D0, "Wrong size on UControllerStateComponent");
static_assert(offsetof(UControllerStateComponent, ActiveStates) == 0x0000A0, "Member 'UControllerStateComponent::ActiveStates' has a wrong offset!");

// Class VGameplayRst.DatastoreComponentBase
// 0x0140 (0x0220 - 0x00E0)
class UDatastoreComponentBase : public UEntityActorPlayerComponent
{
public:
	struct FDatastoreState                        ReplicatedDatastoreState;                          // 0x00E0(0x0128)(Net, NativeAccessSpecifierPrivate)
	uint8                                         Pad_208[0x18];                                     // 0x0208(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DatastoreComponentBase">();
	}
	static class UDatastoreComponentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDatastoreComponentBase>();
	}
};
static_assert(alignof(UDatastoreComponentBase) == 0x000008, "Wrong alignment on UDatastoreComponentBase");
static_assert(sizeof(UDatastoreComponentBase) == 0x000220, "Wrong size on UDatastoreComponentBase");
static_assert(offsetof(UDatastoreComponentBase, ReplicatedDatastoreState) == 0x0000E0, "Member 'UDatastoreComponentBase::ReplicatedDatastoreState' has a wrong offset!");

// Class VGameplayRst.EntityTagContainerComponent
// 0x0018 (0x0078 - 0x0060)
class UEntityTagContainerComponent : public UEntityComponent
{
public:
	uint8                                         Pad_60[0x8];                                       // 0x0060(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVerseGameplayTagContainer             InternalTags;                                      // 0x0068(0x0010)(Edit, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EntityTagContainerComponent">();
	}
	static class UEntityTagContainerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEntityTagContainerComponent>();
	}
};
static_assert(alignof(UEntityTagContainerComponent) == 0x000008, "Wrong alignment on UEntityTagContainerComponent");
static_assert(sizeof(UEntityTagContainerComponent) == 0x000078, "Wrong size on UEntityTagContainerComponent");
static_assert(offsetof(UEntityTagContainerComponent, InternalTags) == 0x000068, "Member 'UEntityTagContainerComponent::InternalTags' has a wrong offset!");

// Class VGameplayRst.ParticleSystemComponentBase
// 0x0010 (0x00A0 - 0x0090)
class UParticleSystemComponentBase : public UEntityActorComponent
{
public:
	class UVerseAssetPtr*                         ParticleSystemAsset;                               // 0x0090(0x0008)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bActive;                                           // 0x0098(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_bActive();
	void OnRep_ParticleSystemAsset();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ParticleSystemComponentBase">();
	}
	static class UParticleSystemComponentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleSystemComponentBase>();
	}
};
static_assert(alignof(UParticleSystemComponentBase) == 0x000008, "Wrong alignment on UParticleSystemComponentBase");
static_assert(sizeof(UParticleSystemComponentBase) == 0x0000A0, "Wrong size on UParticleSystemComponentBase");
static_assert(offsetof(UParticleSystemComponentBase, ParticleSystemAsset) == 0x000090, "Member 'UParticleSystemComponentBase::ParticleSystemAsset' has a wrong offset!");
static_assert(offsetof(UParticleSystemComponentBase, bActive) == 0x000098, "Member 'UParticleSystemComponentBase::bActive' has a wrong offset!");

// Class VGameplayRst.PointLightComponentBase
// 0x0008 (0x0098 - 0x0090)
class UPointLightComponentBase : public UEntityActorComponent
{
public:
	class UVerseLightPropertiesBase*              ReplicatedLightProperties;                         // 0x0090(0x0008)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PointLightComponentBase">();
	}
	static class UPointLightComponentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPointLightComponentBase>();
	}
};
static_assert(alignof(UPointLightComponentBase) == 0x000008, "Wrong alignment on UPointLightComponentBase");
static_assert(sizeof(UPointLightComponentBase) == 0x000098, "Wrong size on UPointLightComponentBase");
static_assert(offsetof(UPointLightComponentBase, ReplicatedLightProperties) == 0x000090, "Member 'UPointLightComponentBase::ReplicatedLightProperties' has a wrong offset!");

// Class VGameplayRst.SpotLightComponentBase
// 0x0008 (0x0098 - 0x0090)
class USpotLightComponentBase : public UEntityActorComponent
{
public:
	class UVerseLightPropertiesBase*              ReplicatedLightProperties;                         // 0x0090(0x0008)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpotLightComponentBase">();
	}
	static class USpotLightComponentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpotLightComponentBase>();
	}
};
static_assert(alignof(USpotLightComponentBase) == 0x000008, "Wrong alignment on USpotLightComponentBase");
static_assert(sizeof(USpotLightComponentBase) == 0x000098, "Wrong size on USpotLightComponentBase");
static_assert(offsetof(USpotLightComponentBase, ReplicatedLightProperties) == 0x000090, "Member 'USpotLightComponentBase::ReplicatedLightProperties' has a wrong offset!");

// Class VGameplayRst.TaggedObjectQueryWorldSubsystem
// 0x0050 (0x0080 - 0x0030)
class UTaggedObjectQueryWorldSubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0x50];                                      // 0x0030(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TaggedObjectQueryWorldSubsystem">();
	}
	static class UTaggedObjectQueryWorldSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTaggedObjectQueryWorldSubsystem>();
	}
};
static_assert(alignof(UTaggedObjectQueryWorldSubsystem) == 0x000008, "Wrong alignment on UTaggedObjectQueryWorldSubsystem");
static_assert(sizeof(UTaggedObjectQueryWorldSubsystem) == 0x000080, "Wrong size on UTaggedObjectQueryWorldSubsystem");

// Class VGameplayRst.VerseLevelStreamingPlayerControllerRpcComponent
// 0x0000 (0x00A0 - 0x00A0)
class UVerseLevelStreamingPlayerControllerRpcComponent final : public UActorComponent
{
public:
	void TellServer_ClientLevelLoaded(class UVerseLevelStreamingComponentBase* LevelStreamingComponent);
	void TellServer_ClientLevelUnloaded(class UVerseLevelStreamingComponentBase* LevelStreamingComponent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VerseLevelStreamingPlayerControllerRpcComponent">();
	}
	static class UVerseLevelStreamingPlayerControllerRpcComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVerseLevelStreamingPlayerControllerRpcComponent>();
	}
};
static_assert(alignof(UVerseLevelStreamingPlayerControllerRpcComponent) == 0x000008, "Wrong alignment on UVerseLevelStreamingPlayerControllerRpcComponent");
static_assert(sizeof(UVerseLevelStreamingPlayerControllerRpcComponent) == 0x0000A0, "Wrong size on UVerseLevelStreamingPlayerControllerRpcComponent");

// Class VGameplayRst.VerseLevelStreamingComponentBase
// 0x00A8 (0x0138 - 0x0090)
class UVerseLevelStreamingComponentBase : public UEntityActorComponent
{
public:
	struct FVerseLevelStreamingLevelIdentifier    NewLevel;                                          // 0x0090(0x0028)(Net, RepNotify, NativeAccessSpecifierPublic)
	struct FVerseLevelStreamingLevelStatus        LevelStatus;                                       // 0x00B8(0x0028)(NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E0[0x58];                                      // 0x00E0(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnLevelShown_Client();
	void OnLevelShown_Server();
	void OnLevelUnloaded_Client();
	void OnLevelUnloaded_Server();
	void OnRep_NewLevel();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VerseLevelStreamingComponentBase">();
	}
	static class UVerseLevelStreamingComponentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVerseLevelStreamingComponentBase>();
	}
};
static_assert(alignof(UVerseLevelStreamingComponentBase) == 0x000008, "Wrong alignment on UVerseLevelStreamingComponentBase");
static_assert(sizeof(UVerseLevelStreamingComponentBase) == 0x000138, "Wrong size on UVerseLevelStreamingComponentBase");
static_assert(offsetof(UVerseLevelStreamingComponentBase, NewLevel) == 0x000090, "Member 'UVerseLevelStreamingComponentBase::NewLevel' has a wrong offset!");
static_assert(offsetof(UVerseLevelStreamingComponentBase, LevelStatus) == 0x0000B8, "Member 'UVerseLevelStreamingComponentBase::LevelStatus' has a wrong offset!");

// Class VGameplayRst.VerseLightPropertiesBase
// 0x0020 (0x0048 - 0x0028)
class UVerseLightPropertiesBase : public UObject
{
public:
	float                                         Intensity;                                         // 0x0028(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           LightColor;                                        // 0x002C(0x0010)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULightComponentBase*                    LightComponent;                                    // 0x0040(0x0008)(ExportObject, Net, ZeroConstructor, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnRep_Intensity();
	void OnRep_LightColor();
	void OnRep_LightComponent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VerseLightPropertiesBase">();
	}
	static class UVerseLightPropertiesBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVerseLightPropertiesBase>();
	}
};
static_assert(alignof(UVerseLightPropertiesBase) == 0x000008, "Wrong alignment on UVerseLightPropertiesBase");
static_assert(sizeof(UVerseLightPropertiesBase) == 0x000048, "Wrong size on UVerseLightPropertiesBase");
static_assert(offsetof(UVerseLightPropertiesBase, Intensity) == 0x000028, "Member 'UVerseLightPropertiesBase::Intensity' has a wrong offset!");
static_assert(offsetof(UVerseLightPropertiesBase, LightColor) == 0x00002C, "Member 'UVerseLightPropertiesBase::LightColor' has a wrong offset!");
static_assert(offsetof(UVerseLightPropertiesBase, LightComponent) == 0x000040, "Member 'UVerseLightPropertiesBase::LightComponent' has a wrong offset!");

// Class VGameplayRst.VerseLocalLightProperties
// 0x0008 (0x0050 - 0x0048)
class UVerseLocalLightProperties : public UVerseLightPropertiesBase
{
public:
	float                                         AttenuationRadius;                                 // 0x0048(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_AttenuationRadius();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VerseLocalLightProperties">();
	}
	static class UVerseLocalLightProperties* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVerseLocalLightProperties>();
	}
};
static_assert(alignof(UVerseLocalLightProperties) == 0x000008, "Wrong alignment on UVerseLocalLightProperties");
static_assert(sizeof(UVerseLocalLightProperties) == 0x000050, "Wrong size on UVerseLocalLightProperties");
static_assert(offsetof(UVerseLocalLightProperties, AttenuationRadius) == 0x000048, "Member 'UVerseLocalLightProperties::AttenuationRadius' has a wrong offset!");

// Class VGameplayRst.VersePointLightProperties
// 0x0008 (0x0058 - 0x0050)
class UVersePointLightProperties : public UVerseLocalLightProperties
{
public:
	float                                         SourceRadius;                                      // 0x0050(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceLength;                                      // 0x0054(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnRep_SourceLength();
	void OnRep_SourceRadius();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VersePointLightProperties">();
	}
	static class UVersePointLightProperties* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVersePointLightProperties>();
	}
};
static_assert(alignof(UVersePointLightProperties) == 0x000008, "Wrong alignment on UVersePointLightProperties");
static_assert(sizeof(UVersePointLightProperties) == 0x000058, "Wrong size on UVersePointLightProperties");
static_assert(offsetof(UVersePointLightProperties, SourceRadius) == 0x000050, "Member 'UVersePointLightProperties::SourceRadius' has a wrong offset!");
static_assert(offsetof(UVersePointLightProperties, SourceLength) == 0x000054, "Member 'UVersePointLightProperties::SourceLength' has a wrong offset!");

// Class VGameplayRst.VerseSpotLightProperties
// 0x0008 (0x0060 - 0x0058)
class UVerseSpotLightProperties final : public UVersePointLightProperties
{
public:
	float                                         InnerConeAngle;                                    // 0x0058(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterConeAngle;                                    // 0x005C(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnRep_InnerConeAngle();
	void OnRep_OuterConeAngle();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VerseSpotLightProperties">();
	}
	static class UVerseSpotLightProperties* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVerseSpotLightProperties>();
	}
};
static_assert(alignof(UVerseSpotLightProperties) == 0x000008, "Wrong alignment on UVerseSpotLightProperties");
static_assert(sizeof(UVerseSpotLightProperties) == 0x000060, "Wrong size on UVerseSpotLightProperties");
static_assert(offsetof(UVerseSpotLightProperties, InnerConeAngle) == 0x000058, "Member 'UVerseSpotLightProperties::InnerConeAngle' has a wrong offset!");
static_assert(offsetof(UVerseSpotLightProperties, OuterConeAngle) == 0x00005C, "Member 'UVerseSpotLightProperties::OuterConeAngle' has a wrong offset!");

// Class VGameplayRst.VerseTagMarkupComponent
// 0x0018 (0x00B8 - 0x00A0)
class UVerseTagMarkupComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVerseGameplayTagContainer             InternalTags;                                      // 0x00A8(0x0010)(Edit, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VerseTagMarkupComponent">();
	}
	static class UVerseTagMarkupComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVerseTagMarkupComponent>();
	}
};
static_assert(alignof(UVerseTagMarkupComponent) == 0x000008, "Wrong alignment on UVerseTagMarkupComponent");
static_assert(sizeof(UVerseTagMarkupComponent) == 0x0000B8, "Wrong size on UVerseTagMarkupComponent");
static_assert(offsetof(UVerseTagMarkupComponent, InternalTags) == 0x0000A8, "Member 'UVerseTagMarkupComponent::InternalTags' has a wrong offset!");

}

