#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Athena_Prop_Video_Stream_Trigger1

#include "Basic.hpp"

#include "MediaUtils_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "MeshNetwork_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Athena_Prop_Video_Stream_Trigger1.Athena_Prop_Video_Stream_Trigger1_C
// 0x0698 (0x0908 - 0x0270)
class AAthena_Prop_Video_Stream_Trigger1_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0270(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFortMediaRegionLockComponent*          FortMediaRegionLock;                               // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMediaSoundComponent*                   ScreenMediaSound;                                  // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActive;                                          // 0x0298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_299[0x7];                                      // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMediaPlayer*                           MediaPlayer;                                       // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          EnteredStreamingZone;                              // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A9[0x7];                                      // 0x02A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              TimeEnteredStreamingZone;                          // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFortStreamMediaSource*                 MediaSource;                                       // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(bool FirstStart)> VideoStartedEventDispatcher;                       // 0x02C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              VideoStoppedEventDispatcher;                       // 0x02D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UPrimitiveComponent*                    ScreenMesh;                                        // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IsVideoTestEnabled;                                // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2E9[0x7];                                      // 0x02E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_VideoMeshTrigger_C*                 MeshTrigger;                                       // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartPlayTime;                                     // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CheckDistanceTimer;                                // 0x0300(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFortMediaSubtitlesPlayer*              SubtitlePlayer;                                    // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UFortDownloadLocalizedOverlays*         SubtitlesOverlays;                                 // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UMediaSource*                           FallbackMediaSource;                               // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StreamingFailed;                                   // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_321[0x3];                                      // 0x0321(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VideoRetryCounter;                                 // 0x0324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         VideoMaxRetries;                                   // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          VideoEnableLocalFallback;                          // 0x032C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMediaPlayerOptionBooleanOverride             LoopVideoPlayerOption;                             // 0x032D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32E[0x2];                                      // 0x032E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 VideoUID;                                          // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 VideoUID_Default;                                  // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash)
	class FString                                 ScreenName;                                        // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         LocalPlayServerTimeSeconds;                        // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForceStartPlayTime;                                // 0x0364(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_365[0x3];                                      // 0x0365(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           StartPlayingTimer;                                 // 0x0368(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_Galileo_VideoPreBuffer_C*           WarmingObject;                                     // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          VideoUIDSet;                                       // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_379[0x3];                                      // 0x0379(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActivationCullRadius_High;                         // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         ActivationCullRadius_Low;                          // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         BandwidthLimitCullRadius;                          // 0x0384(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FTimerHandle                           BandwidthCheckLimitTimer;                          // 0x0388(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           MaxBandwidthTimer;                                 // 0x0390(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              LocalPlayUTCTime;                                  // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFortMediaPlayerCtrl*                   MediaPlayerCtrl;                                   // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         ScreenIndexes;                                     // 0x03A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          PiPWasPlaying;                                     // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B9[0x7];                                      // 0x03B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PiPWasPlayingVUID;                                 // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          LeaveScreen;                                       // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D1[0x7];                                      // 0x03D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           PiPActivation;                                     // 0x03D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          PiPEnabled;                                        // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RespectScreenActivationRange;                      // 0x03E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          RemoteOnly;                                        // 0x03E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          PiPStandAlone;                                     // 0x03E3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ResetData;                                         // 0x03E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LOSSwitchDebounceTime;                             // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastLOSSwitch;                                     // 0x03EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PiPForceOff;                                       // 0x03F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F1[0x7];                                      // 0x03F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ScreenActor;                                       // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          MediaPlayerClosedPending;                          // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MediaStarted_PIPLOS;                               // 0x0401(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ScreenLOS;                                         // 0x0402(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_403[0x5];                                      // 0x0403(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AMediaCDNWarmer_C*                      NoMPMediaCDNWarmer;                                // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SimpleWarming;                                     // 0x0410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_411[0x7];                                      // 0x0411(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool Enable, bool FirstStart)> AudioStartedEventDispatcher;                       // 0x0418(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(bool Reset)>    VideoAboutToLoadEventDispatcher;                   // 0x0428(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          DelayVideoStart;                                   // 0x0438(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TempAudioUsed;                                     // 0x0439(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseScreenMSC;                                      // 0x043A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          DisabledSharing;                                   // 0x043B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43C[0x4];                                      // 0x043C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           SharingCheckTimer;                                 // 0x0440(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              VideoSharingCheck;                                 // 0x0448(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         ScreenDistance;                                    // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_45C[0x4];                                      // 0x045C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class UObject*>           RegionLockObjects;                                 // 0x0460(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FString, int32>                    MeshRegionLockMap;                                 // 0x04B0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FString                                 Country;                                           // 0x0500(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Continent;                                         // 0x0510(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class FString>                         Subdivisions;                                      // 0x0520(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMeshRegionLockData_Int                Mesh_PIPVersion;                                   // 0x0530(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMeshRegionLockData_Bool               Mesh_LeaveScreen;                                  // 0x0550(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FString                                 Mesh_ScreenName;                                   // 0x0570(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	struct FMeshRegionLockData_String             Mesh_VideoUID;                                     // 0x0580(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMeshRegionLockData_DateTime           Mesh_PlayUTCTime;                                  // 0x05A8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMeshRegionLockData_DateTime           Mesh_RootUTCTIme;                                  // 0x05C8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMeshRegionLockData_Bool               Mesh_SimpleWarming;                                // 0x05E8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMeshRegionLockData_String             Mesh_WarmingCDNWeights;                            // 0x0608(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMeshRegionLockData_Float              Mesh_StartWarmingServerTimeSeconds;                // 0x0630(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMeshRegionLockData_Float              Mesh_VideoPlayStartTime;                           // 0x0650(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMeshRegionLockData_Float              Mesh_PlayServerTimeSeconds;                        // 0x0670(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMeshRegionLockData_Int                Mesh_MaxBandwidth;                                 // 0x0690(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMeshRegionLockData_Bool               Mesh_PiPMirrorEnable;                              // 0x06B0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMeshRegionLockData_Bool               Mesh_PiPEnable;                                    // 0x06D0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMeshRegionLockData_String             Mesh_PiPVideoUID;                                  // 0x06F0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMeshRegionLockData_Bool               Mesh_LoopVideo;                                    // 0x0718(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMeshRegionLockData_Int64              Mesh_PiPForceCounter;                              // 0x0738(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMeshRegionLockData_Bool               Mesh_PIPCDNDistroSet;                              // 0x0758(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMeshRegionLockData_Bool               Mesh_IsPIPLive;                                    // 0x0778(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMeshRegionLockData_Float              Mesh_PiPPlayerServerTimeSeconds;                   // 0x0798(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMeshRegionLockData_Int                Mesh_ScreenDistance;                               // 0x07B8(0x0020)(Edit, BlueprintVisible)
	struct FMeshRegionLockData_String             Mesh_CDNWeights;                                   // 0x07D8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FMeshRegionLockData_Bool               Mesh_IsLive;                                       // 0x0800(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FString                                 AllRegions;                                        // 0x0820(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	struct FTimerHandle                           CheckUCPFromStartTimer;                            // 0x0830(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           UCPCheckTimerHandle;                               // 0x0838(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           UCPAudioCheckTimer;                                // 0x0840(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFortStreamMediaSource*                 StandAlonePIPMS;                                   // 0x0848(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           UCPMirrorPIPTimer;                                 // 0x0850(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          NewVar_0;                                          // 0x0858(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SetupMeshFromRegionInfo;                           // 0x0859(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_85A[0x6];                                      // 0x085A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class UMaterialInstance*> PIPScreenMaterialMap;                              // 0x0860(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UFortStreamMediaSource*                 NewSAPIPMS;                                        // 0x08B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FString, class UMediaTexture*>     PIPScreenTextureMap;                               // 0x08B8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void videotestoff(const class FString& ScreenName_0, bool LeaveScreen_0, const class FString& RegionData);
	void videotest(const class FString& ScreenName_0, const class FString& VideoUID_0, float StartTime, const class FString& RegionData);
	void videosetmaxbw(const class FString& ScreenName_0, int32 MaxBandwidth, const class FString& RegionData);
	void videoseek(const class FString& ScreenName_0, float SeekTime, bool Exact, const class FString& RegionData);
	void VideoPlayFrom(const class FString& ScreenName_0, float StartPlayTime_0, const class FString& RegionData);
	void Utc_To_String(const struct FDateTime& UTC, class FString* String);
	void UserPIPEnabled(bool* Enabled);
	void UpdateSAMS(class UFortStreamMediaSource* MediaSource_0);
	void UpdateMeshVariables();
	void UCPInViewTimer(bool Enable);
	void UCPInViewCheck();
	void TelevisionOff();
	void StreamFailCheck();
	void StopWarming();
	void StopScreenTimers();
	void StartVideoWarming(const class FString& ScreenName_0, bool Enable, bool Simple, const class FString& Weights, const class FString& RegionData);
	void StartPlayCheck();
	void StartPiPStandalone(const class FString& ScreenName_0, const class FString& VideoUID_0, bool Enable, const class FString& RegionData);
	void ShouldStreamBePlaying(float Range, bool* Result);
	void SharingCheck();
	void SetupMeshTrigger();
	void SetStartPlayTime();
	void SetScreenActiveWithTimer();
	void SetPiPMirror(const class FString& ScreenName_0, bool Enable, const class FString& RegionData);
	void SetPIPAnalyticsData(bool Reset);
	void SetCDNWeights(const class FString& Weights, const class FString& RegionData);
	void SetAudioSubmix();
	void SendRelevancyAnalytics();
	void SendAnalytics();
	void RequestVideoUrl();
	void RenderPIP(bool Enable);
	void RegionIsAllowed(const class FString& RegionData, bool* Allowed);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void PrePlayConfig();
	void PlayCheck();
	void OnVideoUrlSucces_Cont();
	void OnStartPiP(const class FString& ScreenName_0, const class FString& VideoUID_0, bool Enable, bool LIVE, const class FString& RegionData);
	void OnScreenPrio(int32 Distance, const class FString& RegionData);
	void OnReady_D6A6CC9041318E455FAC36B6A9CEE294(EMeshNetworkNodeType NodeType);
	void OnMetaDataFailed(const class FString& Reason);
	void On_Video_Url_Success(const class FString& RetrievedUrl);
	void On_Video_Url_Failed(const class FString& RetrievedUrl);
	void On_Media_Opened(const class FString& OpenedURL);
	void On_Media_Open_Failed(const class FString& FailedUrl);
	void On_Media_End();
	void On_Media_Closed();
	void MeshTriggerReady(float PlayStartTime, const class FString& VideoUID_0, const class FString& ScreenName_0, bool LIVE, const class FString& RegionData);
	void MeshStopWarming(const class FString& VideoScreen, bool SimpleWarming_0, const class FString& RegionData);
	void MeshStopPlayback(const class FString& VideoScreen, bool LeaveScreen_0, const class FString& RegionData);
	void MeshStartWarming(float StartWarmingTime, const class FString& ScreenName_0, bool SimpleWarming_0, const class FString& RegionData);
	void MeshSetMirrorScreen(const class FString& ScreenName_0, bool Enable, const class FString& RegionData);
	void MeshSetMaxBW(const class FString& ScreenName_0, int32 MaxBW, const class FString& RegionData);
	void MeshSeekPlayback(const class FString& ScreenName_0, float SeekTime, bool Exact, const class FString& RegionData);
	void MeshForcePiPOn(const class FString& Screen, int64 Counter, const class FString& RegionData);
	void MeshEnableLoopVideo(const class FString& ScreenName_0, const class FString& RegionData);
	void MeshDisableLoopVideo(const class FString& ScreenName_0, const class FString& RegionData);
	void MeshCDNWeights(const class FString& Weights, const class FString& RegionData);
	void IsRegionInfoPopulated(bool* isPopulated);
	void GetRegionInfoComplete(const class FString& Continent_0, const class FString& Country_0, TArray<class FString>& Subdivisions_0);
	void GetRegionInfo(bool SetupMesh);
	void GetMeshData_String(TArray<struct FMeshRegionLockData_String>& Array, const class FString& Default, struct FMeshRegionLockData_String* Out);
	void GetMeshData_Int64(TArray<struct FMeshRegionLockData_Int64>& Array, int64 Default, struct FMeshRegionLockData_Int64* Out);
	void GetMeshData_Int(TArray<struct FMeshRegionLockData_Int>& Array, int32 Default, struct FMeshRegionLockData_Int* Out);
	void GetMeshData_Float(TArray<struct FMeshRegionLockData_Float>& Array, float Default, struct FMeshRegionLockData_Float* Out);
	void GetMeshData_DateTime(TArray<struct FMeshRegionLockData_DateTime>& Array, const struct FDateTime& Default, struct FMeshRegionLockData_DateTime* Out);
	void GetMeshData_Bool(TArray<struct FMeshRegionLockData_Bool>& Array, bool Default, struct FMeshRegionLockData_Bool* Out);
	void GetData_String(const struct FMeshRegionLockData_String& In, class FString* Data);
	void GetData_Int64(const struct FMeshRegionLockData_Int64& In, int64* Data);
	void GetData_Int(const struct FMeshRegionLockData_Int& In, int32* Data);
	void GetData_Float(const struct FMeshRegionLockData_Float& In, float* Data);
	void GetData_DateTime(const struct FMeshRegionLockData_DateTime& In, struct FDateTime* Data);
	void GetData_Bool(const struct FMeshRegionLockData_Bool& In, bool* Data);
	void ForcePiPOn(const class FString& ScreenName_0, int64 NewCounterValue, const class FString& RegionData);
	void FlipAudioSubmix(bool Default);
	void ExecuteUbergraph_Athena_Prop_Video_Stream_Trigger1(int32 EntryPoint);
	void EndPlaybackClosePIP();
	void End();
	void EnableShareBlocking(bool Enable);
	void EnablePiPDistanceCheck(bool Enable);
	void EnablePiPDistance();
	void EnablePIPAudio();
	void EnableLoopVideo(const class FString& ScreenName_0, const class FString& RegionData);
	void DrawPIPBlackout(bool StandalonePIP);
	void DisableLoopVideo(const class FString& ScreenName_0, const class FString& RegionData);
	void DebounceLOS(bool* Bounced);
	void ControlNewSAPIPCont(class UFortStreamMediaSource* MediaSource_0);
	void ControlNewSAPIP(bool Enable);
	void ControlNewMirrorPIP(bool Enable);
	void CheckVideoDisabledRaw(bool StandalonePIP, bool* bLocked);
	void CheckVideoDisabled(bool StandalonePIP, bool* Disabled);
	void CheckUCPFromStart();
	void CheckScreen(const class FString& ScreenName_0, bool* IsThisScreen);
	void CheckPiPDisabled(bool* Disabled);
	void CheckLOS(bool SkipUserCheck, bool ForceTrue, bool SkipSet, bool* LOS);
	void CheckDistanceToScreen();
	void CheckBlocks(bool* CompleteBlock);
	void CheckBlacklist(bool* NotBlocked);
	void BindMediaSourceEvents(bool Bind);
	void Bind_Player_Events(bool Bind);
	void BandwidthLimitDistance();
	void AttemptOpenSource();
	void AllowCommand(const class FString& ScreenName_0, const class FString& RegionData, bool* Allowed);
	void ActivateTempMSC(bool Enable);
	void ActivateScreenMSC(bool Enable);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Athena_Prop_Video_Stream_Trigger1_C">();
	}
	static class AAthena_Prop_Video_Stream_Trigger1_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAthena_Prop_Video_Stream_Trigger1_C>();
	}
};
static_assert(alignof(AAthena_Prop_Video_Stream_Trigger1_C) == 0x000008, "Wrong alignment on AAthena_Prop_Video_Stream_Trigger1_C");
static_assert(sizeof(AAthena_Prop_Video_Stream_Trigger1_C) == 0x000908, "Wrong size on AAthena_Prop_Video_Stream_Trigger1_C");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, UberGraphFrame) == 0x000270, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, FortMediaRegionLock) == 0x000278, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::FortMediaRegionLock' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, ScreenMediaSound) == 0x000280, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::ScreenMediaSound' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, StaticMesh) == 0x000288, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, DefaultSceneRoot) == 0x000290, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, IsActive) == 0x000298, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::IsActive' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, MediaPlayer) == 0x0002A0, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::MediaPlayer' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, EnteredStreamingZone) == 0x0002A8, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::EnteredStreamingZone' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, TimeEnteredStreamingZone) == 0x0002B0, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::TimeEnteredStreamingZone' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, MediaSource) == 0x0002B8, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::MediaSource' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, VideoStartedEventDispatcher) == 0x0002C0, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::VideoStartedEventDispatcher' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, VideoStoppedEventDispatcher) == 0x0002D0, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::VideoStoppedEventDispatcher' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, ScreenMesh) == 0x0002E0, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::ScreenMesh' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, IsVideoTestEnabled) == 0x0002E8, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::IsVideoTestEnabled' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, MeshTrigger) == 0x0002F0, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::MeshTrigger' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, StartPlayTime) == 0x0002F8, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::StartPlayTime' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, CheckDistanceTimer) == 0x000300, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::CheckDistanceTimer' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, SubtitlePlayer) == 0x000308, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::SubtitlePlayer' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, SubtitlesOverlays) == 0x000310, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::SubtitlesOverlays' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, FallbackMediaSource) == 0x000318, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::FallbackMediaSource' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, StreamingFailed) == 0x000320, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::StreamingFailed' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, VideoRetryCounter) == 0x000324, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::VideoRetryCounter' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, VideoMaxRetries) == 0x000328, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::VideoMaxRetries' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, VideoEnableLocalFallback) == 0x00032C, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::VideoEnableLocalFallback' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, LoopVideoPlayerOption) == 0x00032D, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::LoopVideoPlayerOption' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, VideoUID) == 0x000330, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::VideoUID' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, VideoUID_Default) == 0x000340, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::VideoUID_Default' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, ScreenName) == 0x000350, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::ScreenName' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, LocalPlayServerTimeSeconds) == 0x000360, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::LocalPlayServerTimeSeconds' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, ForceStartPlayTime) == 0x000364, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::ForceStartPlayTime' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, StartPlayingTimer) == 0x000368, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::StartPlayingTimer' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, WarmingObject) == 0x000370, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::WarmingObject' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, VideoUIDSet) == 0x000378, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::VideoUIDSet' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, ActivationCullRadius_High) == 0x00037C, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::ActivationCullRadius_High' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, ActivationCullRadius_Low) == 0x000380, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::ActivationCullRadius_Low' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, BandwidthLimitCullRadius) == 0x000384, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::BandwidthLimitCullRadius' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, BandwidthCheckLimitTimer) == 0x000388, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::BandwidthCheckLimitTimer' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, MaxBandwidthTimer) == 0x000390, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::MaxBandwidthTimer' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, LocalPlayUTCTime) == 0x000398, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::LocalPlayUTCTime' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, MediaPlayerCtrl) == 0x0003A0, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::MediaPlayerCtrl' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, ScreenIndexes) == 0x0003A8, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::ScreenIndexes' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, PiPWasPlaying) == 0x0003B8, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::PiPWasPlaying' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, PiPWasPlayingVUID) == 0x0003C0, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::PiPWasPlayingVUID' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, LeaveScreen) == 0x0003D0, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::LeaveScreen' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, PiPActivation) == 0x0003D8, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::PiPActivation' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, PiPEnabled) == 0x0003E0, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::PiPEnabled' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, RespectScreenActivationRange) == 0x0003E1, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::RespectScreenActivationRange' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, RemoteOnly) == 0x0003E2, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::RemoteOnly' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, PiPStandAlone) == 0x0003E3, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::PiPStandAlone' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, ResetData) == 0x0003E4, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::ResetData' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, LOSSwitchDebounceTime) == 0x0003E8, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::LOSSwitchDebounceTime' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, LastLOSSwitch) == 0x0003EC, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::LastLOSSwitch' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, PiPForceOff) == 0x0003F0, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::PiPForceOff' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, ScreenActor) == 0x0003F8, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::ScreenActor' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, MediaPlayerClosedPending) == 0x000400, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::MediaPlayerClosedPending' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, MediaStarted_PIPLOS) == 0x000401, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::MediaStarted_PIPLOS' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, ScreenLOS) == 0x000402, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::ScreenLOS' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, NoMPMediaCDNWarmer) == 0x000408, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::NoMPMediaCDNWarmer' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, SimpleWarming) == 0x000410, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::SimpleWarming' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, AudioStartedEventDispatcher) == 0x000418, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::AudioStartedEventDispatcher' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, VideoAboutToLoadEventDispatcher) == 0x000428, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::VideoAboutToLoadEventDispatcher' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, DelayVideoStart) == 0x000438, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::DelayVideoStart' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, TempAudioUsed) == 0x000439, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::TempAudioUsed' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, UseScreenMSC) == 0x00043A, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::UseScreenMSC' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, DisabledSharing) == 0x00043B, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::DisabledSharing' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, SharingCheckTimer) == 0x000440, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::SharingCheckTimer' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, VideoSharingCheck) == 0x000448, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::VideoSharingCheck' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, ScreenDistance) == 0x000458, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::ScreenDistance' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, RegionLockObjects) == 0x000460, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::RegionLockObjects' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, MeshRegionLockMap) == 0x0004B0, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::MeshRegionLockMap' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, Country) == 0x000500, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::Country' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, Continent) == 0x000510, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::Continent' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, Subdivisions) == 0x000520, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::Subdivisions' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, Mesh_PIPVersion) == 0x000530, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::Mesh_PIPVersion' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, Mesh_LeaveScreen) == 0x000550, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::Mesh_LeaveScreen' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, Mesh_ScreenName) == 0x000570, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::Mesh_ScreenName' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, Mesh_VideoUID) == 0x000580, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::Mesh_VideoUID' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, Mesh_PlayUTCTime) == 0x0005A8, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::Mesh_PlayUTCTime' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, Mesh_RootUTCTIme) == 0x0005C8, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::Mesh_RootUTCTIme' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, Mesh_SimpleWarming) == 0x0005E8, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::Mesh_SimpleWarming' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, Mesh_WarmingCDNWeights) == 0x000608, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::Mesh_WarmingCDNWeights' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, Mesh_StartWarmingServerTimeSeconds) == 0x000630, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::Mesh_StartWarmingServerTimeSeconds' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, Mesh_VideoPlayStartTime) == 0x000650, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::Mesh_VideoPlayStartTime' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, Mesh_PlayServerTimeSeconds) == 0x000670, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::Mesh_PlayServerTimeSeconds' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, Mesh_MaxBandwidth) == 0x000690, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::Mesh_MaxBandwidth' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, Mesh_PiPMirrorEnable) == 0x0006B0, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::Mesh_PiPMirrorEnable' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, Mesh_PiPEnable) == 0x0006D0, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::Mesh_PiPEnable' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, Mesh_PiPVideoUID) == 0x0006F0, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::Mesh_PiPVideoUID' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, Mesh_LoopVideo) == 0x000718, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::Mesh_LoopVideo' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, Mesh_PiPForceCounter) == 0x000738, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::Mesh_PiPForceCounter' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, Mesh_PIPCDNDistroSet) == 0x000758, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::Mesh_PIPCDNDistroSet' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, Mesh_IsPIPLive) == 0x000778, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::Mesh_IsPIPLive' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, Mesh_PiPPlayerServerTimeSeconds) == 0x000798, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::Mesh_PiPPlayerServerTimeSeconds' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, Mesh_ScreenDistance) == 0x0007B8, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::Mesh_ScreenDistance' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, Mesh_CDNWeights) == 0x0007D8, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::Mesh_CDNWeights' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, Mesh_IsLive) == 0x000800, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::Mesh_IsLive' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, AllRegions) == 0x000820, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::AllRegions' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, CheckUCPFromStartTimer) == 0x000830, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::CheckUCPFromStartTimer' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, UCPCheckTimerHandle) == 0x000838, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::UCPCheckTimerHandle' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, UCPAudioCheckTimer) == 0x000840, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::UCPAudioCheckTimer' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, StandAlonePIPMS) == 0x000848, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::StandAlonePIPMS' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, UCPMirrorPIPTimer) == 0x000850, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::UCPMirrorPIPTimer' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, NewVar_0) == 0x000858, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, SetupMeshFromRegionInfo) == 0x000859, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::SetupMeshFromRegionInfo' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, PIPScreenMaterialMap) == 0x000860, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::PIPScreenMaterialMap' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, NewSAPIPMS) == 0x0008B0, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::NewSAPIPMS' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, PIPScreenTextureMap) == 0x0008B8, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::PIPScreenTextureMap' has a wrong offset!");

}

