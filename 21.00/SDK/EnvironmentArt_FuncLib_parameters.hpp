#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EnvironmentArt_FuncLib

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function EnvironmentArt_FuncLib.EnvironmentArt_FuncLib_C.randomFloatByLocation
// 0x00A0 (0x00A0 - 0x0000)
struct EnvironmentArt_FuncLib_C_randomFloatByLocation final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         distanceInterval;                                  // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          includeZ;                                          // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Float;                                             // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_FloatToVector_ReturnValue;           // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorVector_ReturnValue;          // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_2;                        // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          CallFunc_MakeRandomStream_ReturnValue;             // 0x0090(0x0008)(ZeroConstructor, NoDestructor)
	float                                         CallFunc_RandomFloatFromStream_ReturnValue;        // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(EnvironmentArt_FuncLib_C_randomFloatByLocation) == 0x000008, "Wrong alignment on EnvironmentArt_FuncLib_C_randomFloatByLocation");
static_assert(sizeof(EnvironmentArt_FuncLib_C_randomFloatByLocation) == 0x0000A0, "Wrong size on EnvironmentArt_FuncLib_C_randomFloatByLocation");
static_assert(offsetof(EnvironmentArt_FuncLib_C_randomFloatByLocation, WorldLocation) == 0x000000, "Member 'EnvironmentArt_FuncLib_C_randomFloatByLocation::WorldLocation' has a wrong offset!");
static_assert(offsetof(EnvironmentArt_FuncLib_C_randomFloatByLocation, distanceInterval) == 0x000018, "Member 'EnvironmentArt_FuncLib_C_randomFloatByLocation::distanceInterval' has a wrong offset!");
static_assert(offsetof(EnvironmentArt_FuncLib_C_randomFloatByLocation, includeZ) == 0x00001C, "Member 'EnvironmentArt_FuncLib_C_randomFloatByLocation::includeZ' has a wrong offset!");
static_assert(offsetof(EnvironmentArt_FuncLib_C_randomFloatByLocation, __WorldContext) == 0x000020, "Member 'EnvironmentArt_FuncLib_C_randomFloatByLocation::__WorldContext' has a wrong offset!");
static_assert(offsetof(EnvironmentArt_FuncLib_C_randomFloatByLocation, Float) == 0x000028, "Member 'EnvironmentArt_FuncLib_C_randomFloatByLocation::Float' has a wrong offset!");
static_assert(offsetof(EnvironmentArt_FuncLib_C_randomFloatByLocation, Temp_bool_Variable) == 0x00002C, "Member 'EnvironmentArt_FuncLib_C_randomFloatByLocation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(EnvironmentArt_FuncLib_C_randomFloatByLocation, CallFunc_Conv_FloatToVector_ReturnValue) == 0x000030, "Member 'EnvironmentArt_FuncLib_C_randomFloatByLocation::CallFunc_Conv_FloatToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(EnvironmentArt_FuncLib_C_randomFloatByLocation, CallFunc_Divide_VectorVector_ReturnValue) == 0x000048, "Member 'EnvironmentArt_FuncLib_C_randomFloatByLocation::CallFunc_Divide_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(EnvironmentArt_FuncLib_C_randomFloatByLocation, CallFunc_BreakVector_X) == 0x000060, "Member 'EnvironmentArt_FuncLib_C_randomFloatByLocation::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(EnvironmentArt_FuncLib_C_randomFloatByLocation, CallFunc_BreakVector_Y) == 0x000064, "Member 'EnvironmentArt_FuncLib_C_randomFloatByLocation::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(EnvironmentArt_FuncLib_C_randomFloatByLocation, CallFunc_BreakVector_Z) == 0x000068, "Member 'EnvironmentArt_FuncLib_C_randomFloatByLocation::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(EnvironmentArt_FuncLib_C_randomFloatByLocation, CallFunc_Abs_ReturnValue) == 0x00006C, "Member 'EnvironmentArt_FuncLib_C_randomFloatByLocation::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(EnvironmentArt_FuncLib_C_randomFloatByLocation, CallFunc_Abs_ReturnValue_1) == 0x000070, "Member 'EnvironmentArt_FuncLib_C_randomFloatByLocation::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(EnvironmentArt_FuncLib_C_randomFloatByLocation, CallFunc_Abs_ReturnValue_2) == 0x000074, "Member 'EnvironmentArt_FuncLib_C_randomFloatByLocation::CallFunc_Abs_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(EnvironmentArt_FuncLib_C_randomFloatByLocation, CallFunc_Add_FloatFloat_ReturnValue) == 0x000078, "Member 'EnvironmentArt_FuncLib_C_randomFloatByLocation::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(EnvironmentArt_FuncLib_C_randomFloatByLocation, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x00007C, "Member 'EnvironmentArt_FuncLib_C_randomFloatByLocation::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(EnvironmentArt_FuncLib_C_randomFloatByLocation, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x000080, "Member 'EnvironmentArt_FuncLib_C_randomFloatByLocation::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(EnvironmentArt_FuncLib_C_randomFloatByLocation, K2Node_Select_Default) == 0x000084, "Member 'EnvironmentArt_FuncLib_C_randomFloatByLocation::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(EnvironmentArt_FuncLib_C_randomFloatByLocation, CallFunc_FTrunc_ReturnValue) == 0x000088, "Member 'EnvironmentArt_FuncLib_C_randomFloatByLocation::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(EnvironmentArt_FuncLib_C_randomFloatByLocation, CallFunc_Multiply_IntInt_ReturnValue) == 0x00008C, "Member 'EnvironmentArt_FuncLib_C_randomFloatByLocation::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(EnvironmentArt_FuncLib_C_randomFloatByLocation, CallFunc_MakeRandomStream_ReturnValue) == 0x000090, "Member 'EnvironmentArt_FuncLib_C_randomFloatByLocation::CallFunc_MakeRandomStream_ReturnValue' has a wrong offset!");
static_assert(offsetof(EnvironmentArt_FuncLib_C_randomFloatByLocation, CallFunc_RandomFloatFromStream_ReturnValue) == 0x000098, "Member 'EnvironmentArt_FuncLib_C_randomFloatByLocation::CallFunc_RandomFloatFromStream_ReturnValue' has a wrong offset!");

// Function EnvironmentArt_FuncLib.EnvironmentArt_FuncLib_C.randomSteppedIntByLocation
// 0x0060 (0x0060 - 0x0000)
struct EnvironmentArt_FuncLib_C_randomSteppedIntByLocation final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         distanceInterval;                                  // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          includeZ;                                          // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         stepCount;                                         // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Integer;                                           // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Percent;                                           // 0x0034(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         l_max;                                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         l_float;                                           // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         l_int;                                             // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_randomFloatByLocation_float;              // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue_1;                      // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(EnvironmentArt_FuncLib_C_randomSteppedIntByLocation) == 0x000008, "Wrong alignment on EnvironmentArt_FuncLib_C_randomSteppedIntByLocation");
static_assert(sizeof(EnvironmentArt_FuncLib_C_randomSteppedIntByLocation) == 0x000060, "Wrong size on EnvironmentArt_FuncLib_C_randomSteppedIntByLocation");
static_assert(offsetof(EnvironmentArt_FuncLib_C_randomSteppedIntByLocation, WorldLocation) == 0x000000, "Member 'EnvironmentArt_FuncLib_C_randomSteppedIntByLocation::WorldLocation' has a wrong offset!");
static_assert(offsetof(EnvironmentArt_FuncLib_C_randomSteppedIntByLocation, distanceInterval) == 0x000018, "Member 'EnvironmentArt_FuncLib_C_randomSteppedIntByLocation::distanceInterval' has a wrong offset!");
static_assert(offsetof(EnvironmentArt_FuncLib_C_randomSteppedIntByLocation, includeZ) == 0x00001C, "Member 'EnvironmentArt_FuncLib_C_randomSteppedIntByLocation::includeZ' has a wrong offset!");
static_assert(offsetof(EnvironmentArt_FuncLib_C_randomSteppedIntByLocation, stepCount) == 0x000020, "Member 'EnvironmentArt_FuncLib_C_randomSteppedIntByLocation::stepCount' has a wrong offset!");
static_assert(offsetof(EnvironmentArt_FuncLib_C_randomSteppedIntByLocation, __WorldContext) == 0x000028, "Member 'EnvironmentArt_FuncLib_C_randomSteppedIntByLocation::__WorldContext' has a wrong offset!");
static_assert(offsetof(EnvironmentArt_FuncLib_C_randomSteppedIntByLocation, Integer) == 0x000030, "Member 'EnvironmentArt_FuncLib_C_randomSteppedIntByLocation::Integer' has a wrong offset!");
static_assert(offsetof(EnvironmentArt_FuncLib_C_randomSteppedIntByLocation, Percent) == 0x000034, "Member 'EnvironmentArt_FuncLib_C_randomSteppedIntByLocation::Percent' has a wrong offset!");
static_assert(offsetof(EnvironmentArt_FuncLib_C_randomSteppedIntByLocation, l_max) == 0x000038, "Member 'EnvironmentArt_FuncLib_C_randomSteppedIntByLocation::l_max' has a wrong offset!");
static_assert(offsetof(EnvironmentArt_FuncLib_C_randomSteppedIntByLocation, l_float) == 0x00003C, "Member 'EnvironmentArt_FuncLib_C_randomSteppedIntByLocation::l_float' has a wrong offset!");
static_assert(offsetof(EnvironmentArt_FuncLib_C_randomSteppedIntByLocation, l_int) == 0x000040, "Member 'EnvironmentArt_FuncLib_C_randomSteppedIntByLocation::l_int' has a wrong offset!");
static_assert(offsetof(EnvironmentArt_FuncLib_C_randomSteppedIntByLocation, CallFunc_randomFloatByLocation_float) == 0x000044, "Member 'EnvironmentArt_FuncLib_C_randomSteppedIntByLocation::CallFunc_randomFloatByLocation_float' has a wrong offset!");
static_assert(offsetof(EnvironmentArt_FuncLib_C_randomSteppedIntByLocation, CallFunc_Subtract_IntInt_ReturnValue) == 0x000048, "Member 'EnvironmentArt_FuncLib_C_randomSteppedIntByLocation::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(EnvironmentArt_FuncLib_C_randomSteppedIntByLocation, CallFunc_Greater_IntInt_ReturnValue) == 0x00004C, "Member 'EnvironmentArt_FuncLib_C_randomSteppedIntByLocation::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(EnvironmentArt_FuncLib_C_randomSteppedIntByLocation, CallFunc_Round_ReturnValue) == 0x000050, "Member 'EnvironmentArt_FuncLib_C_randomSteppedIntByLocation::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(EnvironmentArt_FuncLib_C_randomSteppedIntByLocation, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000054, "Member 'EnvironmentArt_FuncLib_C_randomSteppedIntByLocation::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(EnvironmentArt_FuncLib_C_randomSteppedIntByLocation, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000058, "Member 'EnvironmentArt_FuncLib_C_randomSteppedIntByLocation::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(EnvironmentArt_FuncLib_C_randomSteppedIntByLocation, CallFunc_Round_ReturnValue_1) == 0x00005C, "Member 'EnvironmentArt_FuncLib_C_randomSteppedIntByLocation::CallFunc_Round_ReturnValue_1' has a wrong offset!");

}

