#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MoleUI

#include "Basic.hpp"

#include "GameplayMessages_structs.hpp"
#include "MoleGameRuntime_structs.hpp"
#include "MoleGameRuntime_classes.hpp"
#include "InputCore_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "FortniteUI_classes.hpp"
#include "CommonUILegacy_structs.hpp"
#include "MoleUI_structs.hpp"
#include "CommonUI_classes.hpp"
#include "DynamicUI_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "SlateCore_structs.hpp"
#include "GameplayTags_0_structs.hpp"
#include "ModularGameplay_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// Class MoleUI.MoleEnemyAbilityItem
// 0x0158 (0x0180 - 0x0028)
class UMoleEnemyAbilityItem final : public UObject
{
public:
	uint8                                         Pad_28[0xE8];                                      // 0x0028(0x00E8)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMoleAbilityUIData                     EnemyAbilityUIData;                                // 0x0110(0x0058)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_168[0x18];                                     // 0x0168(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 GetIndex() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleEnemyAbilityItem">();
	}
	static class UMoleEnemyAbilityItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleEnemyAbilityItem>();
	}
};
static_assert(alignof(UMoleEnemyAbilityItem) == 0x000008, "Wrong alignment on UMoleEnemyAbilityItem");
static_assert(sizeof(UMoleEnemyAbilityItem) == 0x000180, "Wrong size on UMoleEnemyAbilityItem");
static_assert(offsetof(UMoleEnemyAbilityItem, EnemyAbilityUIData) == 0x000110, "Member 'UMoleEnemyAbilityItem::EnemyAbilityUIData' has a wrong offset!");

// Class MoleUI.FortMobileButtonBehaviorComponent_MoleRoleVisibility
// 0x0050 (0x0080 - 0x0030)
class UFortMobileButtonBehaviorComponent_MoleRoleVisibility final : public UFortMobileButtonBehaviorComponent_Visibility
{
public:
	TMap<EMoleRole, ESlateVisibility>             RoleVisibility;                                    // 0x0030(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMobileButtonBehaviorComponent_MoleRoleVisibility">();
	}
	static class UFortMobileButtonBehaviorComponent_MoleRoleVisibility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMobileButtonBehaviorComponent_MoleRoleVisibility>();
	}
};
static_assert(alignof(UFortMobileButtonBehaviorComponent_MoleRoleVisibility) == 0x000008, "Wrong alignment on UFortMobileButtonBehaviorComponent_MoleRoleVisibility");
static_assert(sizeof(UFortMobileButtonBehaviorComponent_MoleRoleVisibility) == 0x000080, "Wrong size on UFortMobileButtonBehaviorComponent_MoleRoleVisibility");
static_assert(offsetof(UFortMobileButtonBehaviorComponent_MoleRoleVisibility, RoleVisibility) == 0x000030, "Member 'UFortMobileButtonBehaviorComponent_MoleRoleVisibility::RoleVisibility' has a wrong offset!");

// Class MoleUI.MoleActiveTaskContextBarHUDWidget
// 0x0008 (0x02C0 - 0x02B8)
class UMoleActiveTaskContextBarHUDWidget final : public UUserWidget
{
public:
	class UMolePlayerTaskManagementComponent*     CachedOwningTaskComponent;                         // 0x02B8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleActiveTaskContextBarHUDWidget">();
	}
	static class UMoleActiveTaskContextBarHUDWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleActiveTaskContextBarHUDWidget>();
	}
};
static_assert(alignof(UMoleActiveTaskContextBarHUDWidget) == 0x000008, "Wrong alignment on UMoleActiveTaskContextBarHUDWidget");
static_assert(sizeof(UMoleActiveTaskContextBarHUDWidget) == 0x0002C0, "Wrong size on UMoleActiveTaskContextBarHUDWidget");
static_assert(offsetof(UMoleActiveTaskContextBarHUDWidget, CachedOwningTaskComponent) == 0x0002B8, "Member 'UMoleActiveTaskContextBarHUDWidget::CachedOwningTaskComponent' has a wrong offset!");

// Class MoleUI.MoleAssignedTaskContainerWidget
// 0x0010 (0x02C8 - 0x02B8)
class UMoleAssignedTaskContainerWidget final : public UUserWidget
{
public:
	class UDynamicEntryBox*                       TaskWidgetEntryBox;                                // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMolePlayerTaskManagementComponent*     CachedOwningTaskComponent;                         // 0x02C0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnActiveTasksChanged(bool bFrameDefer);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleAssignedTaskContainerWidget">();
	}
	static class UMoleAssignedTaskContainerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleAssignedTaskContainerWidget>();
	}
};
static_assert(alignof(UMoleAssignedTaskContainerWidget) == 0x000008, "Wrong alignment on UMoleAssignedTaskContainerWidget");
static_assert(sizeof(UMoleAssignedTaskContainerWidget) == 0x0002C8, "Wrong size on UMoleAssignedTaskContainerWidget");
static_assert(offsetof(UMoleAssignedTaskContainerWidget, TaskWidgetEntryBox) == 0x0002B8, "Member 'UMoleAssignedTaskContainerWidget::TaskWidgetEntryBox' has a wrong offset!");
static_assert(offsetof(UMoleAssignedTaskContainerWidget, CachedOwningTaskComponent) == 0x0002C0, "Member 'UMoleAssignedTaskContainerWidget::CachedOwningTaskComponent' has a wrong offset!");

// Class MoleUI.MoleControllerBinding
// 0x0020 (0x02D8 - 0x02B8)
class UMoleControllerBinding final : public UUserWidget
{
public:
	struct FKey                                   RepresentedKey;                                    // 0x02B8(0x0018)(Edit, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortKeybindWidget*                     KeyBind_RepresentedAction;                         // 0x02D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnBindingInfoSet(const class FText& BindingLabel, bool bIsSaboteurBinding);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleControllerBinding">();
	}
	static class UMoleControllerBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleControllerBinding>();
	}
};
static_assert(alignof(UMoleControllerBinding) == 0x000008, "Wrong alignment on UMoleControllerBinding");
static_assert(sizeof(UMoleControllerBinding) == 0x0002D8, "Wrong size on UMoleControllerBinding");
static_assert(offsetof(UMoleControllerBinding, RepresentedKey) == 0x0002B8, "Member 'UMoleControllerBinding::RepresentedKey' has a wrong offset!");
static_assert(offsetof(UMoleControllerBinding, KeyBind_RepresentedAction) == 0x0002D0, "Member 'UMoleControllerBinding::KeyBind_RepresentedAction' has a wrong offset!");

// Class MoleUI.MoleControllerBindingsScreen
// 0x0058 (0x0488 - 0x0430)
class UMoleControllerBindingsScreen final : public UFortOptionsTab
{
public:
	TMap<ECommonGamepadType, TSoftObjectPtr<class UObject>> ControllerImages;                                  // 0x0430(0x0050)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UCommonLazyImage*                       Image_Controller;                                  // 0x0480(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleControllerBindingsScreen">();
	}
	static class UMoleControllerBindingsScreen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleControllerBindingsScreen>();
	}
};
static_assert(alignof(UMoleControllerBindingsScreen) == 0x000008, "Wrong alignment on UMoleControllerBindingsScreen");
static_assert(sizeof(UMoleControllerBindingsScreen) == 0x000488, "Wrong size on UMoleControllerBindingsScreen");
static_assert(offsetof(UMoleControllerBindingsScreen, ControllerImages) == 0x000430, "Member 'UMoleControllerBindingsScreen::ControllerImages' has a wrong offset!");
static_assert(offsetof(UMoleControllerBindingsScreen, Image_Controller) == 0x000480, "Member 'UMoleControllerBindingsScreen::Image_Controller' has a wrong offset!");

// Class MoleUI.MoleEnemyAbilityContainer
// 0x0018 (0x02D0 - 0x02B8)
class UMoleEnemyAbilityContainer final : public UUserWidget
{
public:
	class UDataTable*                             AbilityUIDataTable;                                // 0x02B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonListView*                        Listview_EnemyTasks;                               // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMoleEnemyAbilityWidgetComponent*       OwnerWidgetComponent;                              // 0x02C8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnVisibilityChangeRequested(bool bNewVisibility);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleEnemyAbilityContainer">();
	}
	static class UMoleEnemyAbilityContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleEnemyAbilityContainer>();
	}
};
static_assert(alignof(UMoleEnemyAbilityContainer) == 0x000008, "Wrong alignment on UMoleEnemyAbilityContainer");
static_assert(sizeof(UMoleEnemyAbilityContainer) == 0x0002D0, "Wrong size on UMoleEnemyAbilityContainer");
static_assert(offsetof(UMoleEnemyAbilityContainer, AbilityUIDataTable) == 0x0002B8, "Member 'UMoleEnemyAbilityContainer::AbilityUIDataTable' has a wrong offset!");
static_assert(offsetof(UMoleEnemyAbilityContainer, Listview_EnemyTasks) == 0x0002C0, "Member 'UMoleEnemyAbilityContainer::Listview_EnemyTasks' has a wrong offset!");
static_assert(offsetof(UMoleEnemyAbilityContainer, OwnerWidgetComponent) == 0x0002C8, "Member 'UMoleEnemyAbilityContainer::OwnerWidgetComponent' has a wrong offset!");

// Class MoleUI.MoleEnemyAbilityEntry
// 0x0020 (0x1000 - 0x0FE0)
class UMoleEnemyAbilityEntry final : public UCommonButtonBase
{
public:
	uint8                                         Pad_FD8[0x18];                                     // 0x0FD8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsInteractable;                                   // 0x0FF0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_FF1[0x7];                                      // 0x0FF1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMoleEnemyAbilityOverlay*               Overlay_EnemyAbilities;                            // 0x0FF8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnAbilityDataReceived(class UMoleEnemyAbilityItem* Data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleEnemyAbilityEntry">();
	}
	static class UMoleEnemyAbilityEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleEnemyAbilityEntry>();
	}
};
static_assert(alignof(UMoleEnemyAbilityEntry) == 0x000010, "Wrong alignment on UMoleEnemyAbilityEntry");
static_assert(sizeof(UMoleEnemyAbilityEntry) == 0x001000, "Wrong size on UMoleEnemyAbilityEntry");
static_assert(offsetof(UMoleEnemyAbilityEntry, bIsInteractable) == 0x000FF0, "Member 'UMoleEnemyAbilityEntry::bIsInteractable' has a wrong offset!");
static_assert(offsetof(UMoleEnemyAbilityEntry, Overlay_EnemyAbilities) == 0x000FF8, "Member 'UMoleEnemyAbilityEntry::Overlay_EnemyAbilities' has a wrong offset!");

// Class MoleUI.MoleEnemyAbilityOverlay
// 0x0020 (0x02D8 - 0x02B8)
class UMoleEnemyAbilityOverlay final : public UUserWidget
{
public:
	uint8                                         Pad_2B8[0x10];                                     // 0x02B8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UMoleEnemyAbilityItem*                  EnemyAbilityItem;                                  // 0x02C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D0[0x8];                                      // 0x02D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAbilityDataReceived(const struct FMoleAbilityUIData& InAbilityUIData);
	void OnCooldownFinished();
	void OnCooldownStarted(int32 TimeLeft);
	void OnCooldownUpdated(int32 TimeLeft);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleEnemyAbilityOverlay">();
	}
	static class UMoleEnemyAbilityOverlay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleEnemyAbilityOverlay>();
	}
};
static_assert(alignof(UMoleEnemyAbilityOverlay) == 0x000008, "Wrong alignment on UMoleEnemyAbilityOverlay");
static_assert(sizeof(UMoleEnemyAbilityOverlay) == 0x0002D8, "Wrong size on UMoleEnemyAbilityOverlay");
static_assert(offsetof(UMoleEnemyAbilityOverlay, EnemyAbilityItem) == 0x0002C8, "Member 'UMoleEnemyAbilityOverlay::EnemyAbilityItem' has a wrong offset!");

// Class MoleUI.MoleEnemyAbilityWidgetComponent
// 0x0060 (0x0700 - 0x06A0)
class UMoleEnemyAbilityWidgetComponent final : public UWidgetComponent
{
public:
	class UInputComponent*                        EnemyMenuInputComponent;                           // 0x06A0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInputComponent*                        InternalBindingsInputComponent;                    // 0x06A8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                WidgetRelativeLocation;                            // 0x06B0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                WidgetRelativeScale;                               // 0x06C8(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               WidgetRelativeRotation;                            // 0x06E0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_6F8[0x8];                                      // 0x06F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static bool AreSabotageShortcutsEnabled();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleEnemyAbilityWidgetComponent">();
	}
	static class UMoleEnemyAbilityWidgetComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleEnemyAbilityWidgetComponent>();
	}
};
static_assert(alignof(UMoleEnemyAbilityWidgetComponent) == 0x000010, "Wrong alignment on UMoleEnemyAbilityWidgetComponent");
static_assert(sizeof(UMoleEnemyAbilityWidgetComponent) == 0x000700, "Wrong size on UMoleEnemyAbilityWidgetComponent");
static_assert(offsetof(UMoleEnemyAbilityWidgetComponent, EnemyMenuInputComponent) == 0x0006A0, "Member 'UMoleEnemyAbilityWidgetComponent::EnemyMenuInputComponent' has a wrong offset!");
static_assert(offsetof(UMoleEnemyAbilityWidgetComponent, InternalBindingsInputComponent) == 0x0006A8, "Member 'UMoleEnemyAbilityWidgetComponent::InternalBindingsInputComponent' has a wrong offset!");
static_assert(offsetof(UMoleEnemyAbilityWidgetComponent, WidgetRelativeLocation) == 0x0006B0, "Member 'UMoleEnemyAbilityWidgetComponent::WidgetRelativeLocation' has a wrong offset!");
static_assert(offsetof(UMoleEnemyAbilityWidgetComponent, WidgetRelativeScale) == 0x0006C8, "Member 'UMoleEnemyAbilityWidgetComponent::WidgetRelativeScale' has a wrong offset!");
static_assert(offsetof(UMoleEnemyAbilityWidgetComponent, WidgetRelativeRotation) == 0x0006E0, "Member 'UMoleEnemyAbilityWidgetComponent::WidgetRelativeRotation' has a wrong offset!");

// Class MoleUI.MoleLocationWidget
// 0x0008 (0x02C0 - 0x02B8)
class UMoleLocationWidget final : public UUserWidget
{
public:
	class UFortControllerComponent_MapDiscoverability* DiscoverabilityComponent;                          // 0x02B8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnVisited(const class FText& LocalizedLocationName, bool bIsNamedLocation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleLocationWidget">();
	}
	static class UMoleLocationWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleLocationWidget>();
	}
};
static_assert(alignof(UMoleLocationWidget) == 0x000008, "Wrong alignment on UMoleLocationWidget");
static_assert(sizeof(UMoleLocationWidget) == 0x0002C0, "Wrong size on UMoleLocationWidget");
static_assert(offsetof(UMoleLocationWidget, DiscoverabilityComponent) == 0x0002B8, "Member 'UMoleLocationWidget::DiscoverabilityComponent' has a wrong offset!");

// Class MoleUI.MoleMinimap
// 0x0108 (0x0250 - 0x0148)
class UMoleMinimap final : public UWidget
{
public:
	uint8                                         Pad_148[0x8];                                      // 0x0148(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            MolePlayerIcon;                                    // 0x0150(0x00C0)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FVector2D                              DesiredSize;                                       // 0x0210(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                MapCenterOffset;                                   // 0x0220(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ShowMapBackground;                                 // 0x0238(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_239[0x3];                                      // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ZoomLevel;                                         // 0x023C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinimapIndicatorZoomLevel;                         // 0x0240(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_244[0xC];                                      // 0x0244(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleMinimap">();
	}
	static class UMoleMinimap* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleMinimap>();
	}
};
static_assert(alignof(UMoleMinimap) == 0x000010, "Wrong alignment on UMoleMinimap");
static_assert(sizeof(UMoleMinimap) == 0x000250, "Wrong size on UMoleMinimap");
static_assert(offsetof(UMoleMinimap, MolePlayerIcon) == 0x000150, "Member 'UMoleMinimap::MolePlayerIcon' has a wrong offset!");
static_assert(offsetof(UMoleMinimap, DesiredSize) == 0x000210, "Member 'UMoleMinimap::DesiredSize' has a wrong offset!");
static_assert(offsetof(UMoleMinimap, MapCenterOffset) == 0x000220, "Member 'UMoleMinimap::MapCenterOffset' has a wrong offset!");
static_assert(offsetof(UMoleMinimap, ShowMapBackground) == 0x000238, "Member 'UMoleMinimap::ShowMapBackground' has a wrong offset!");
static_assert(offsetof(UMoleMinimap, ZoomLevel) == 0x00023C, "Member 'UMoleMinimap::ZoomLevel' has a wrong offset!");
static_assert(offsetof(UMoleMinimap, MinimapIndicatorZoomLevel) == 0x000240, "Member 'UMoleMinimap::MinimapIndicatorZoomLevel' has a wrong offset!");

// Class MoleUI.MoleMobileLoaderWidget
// 0x0020 (0x02D8 - 0x02B8)
class UMoleMobileLoaderWidget final : public UUserWidget
{
public:
	uint8                                         Pad_2B8[0x20];                                     // 0x02B8(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleMobileLoaderWidget">();
	}
	static class UMoleMobileLoaderWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleMobileLoaderWidget>();
	}
};
static_assert(alignof(UMoleMobileLoaderWidget) == 0x000008, "Wrong alignment on UMoleMobileLoaderWidget");
static_assert(sizeof(UMoleMobileLoaderWidget) == 0x0002D8, "Wrong size on UMoleMobileLoaderWidget");

// Class MoleUI.MoleNameplate
// 0x0008 (0x02C0 - 0x02B8)
class UMoleNameplate final : public UUserWidget
{
public:
	class UFortVoiceChatStatusIcon*               VoiceIcon_Status;                                  // 0x02B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetupNameplateFor(class APlayerState* OwningPlayer);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleNameplate">();
	}
	static class UMoleNameplate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleNameplate>();
	}
};
static_assert(alignof(UMoleNameplate) == 0x000008, "Wrong alignment on UMoleNameplate");
static_assert(sizeof(UMoleNameplate) == 0x0002C0, "Wrong size on UMoleNameplate");
static_assert(offsetof(UMoleNameplate, VoiceIcon_Status) == 0x0002B8, "Member 'UMoleNameplate::VoiceIcon_Status' has a wrong offset!");

// Class MoleUI.MolePostGameScreen
// 0x0040 (0x02F8 - 0x02B8)
class UMolePostGameScreen final : public UUserWidget
{
public:
	class UInputComponent*                        PostGameInputComponent;                            // 0x02B8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMoleHoldBinding                       BackToMenuBinding;                                 // 0x02C0(0x0018)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         MobileAutoGoBackToMenuTime;                        // 0x02D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2DC[0x14];                                     // 0x02DC(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	class UAthenaAccoladeListWidget*              Listview_Accolades;                                // 0x02F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnXPCalculated(int32 XPValue);
	void StartMobileAutoGoBackToMenu();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MolePostGameScreen">();
	}
	static class UMolePostGameScreen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMolePostGameScreen>();
	}
};
static_assert(alignof(UMolePostGameScreen) == 0x000008, "Wrong alignment on UMolePostGameScreen");
static_assert(sizeof(UMolePostGameScreen) == 0x0002F8, "Wrong size on UMolePostGameScreen");
static_assert(offsetof(UMolePostGameScreen, PostGameInputComponent) == 0x0002B8, "Member 'UMolePostGameScreen::PostGameInputComponent' has a wrong offset!");
static_assert(offsetof(UMolePostGameScreen, BackToMenuBinding) == 0x0002C0, "Member 'UMolePostGameScreen::BackToMenuBinding' has a wrong offset!");
static_assert(offsetof(UMolePostGameScreen, MobileAutoGoBackToMenuTime) == 0x0002D8, "Member 'UMolePostGameScreen::MobileAutoGoBackToMenuTime' has a wrong offset!");
static_assert(offsetof(UMolePostGameScreen, Listview_Accolades) == 0x0002F0, "Member 'UMolePostGameScreen::Listview_Accolades' has a wrong offset!");

// Class MoleUI.MolePrimaryActiveTaskHUDWidget
// 0x0010 (0x02C8 - 0x02B8)
class UMolePrimaryActiveTaskHUDWidget final : public UUserWidget
{
public:
	class UMolePlayerTaskManagementComponent*     CachedOwningTaskComponent;                         // 0x02B8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMoleTaskHUDWidget*                     MoleTaskHUDWidget;                                 // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MolePrimaryActiveTaskHUDWidget">();
	}
	static class UMolePrimaryActiveTaskHUDWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMolePrimaryActiveTaskHUDWidget>();
	}
};
static_assert(alignof(UMolePrimaryActiveTaskHUDWidget) == 0x000008, "Wrong alignment on UMolePrimaryActiveTaskHUDWidget");
static_assert(sizeof(UMolePrimaryActiveTaskHUDWidget) == 0x0002C8, "Wrong size on UMolePrimaryActiveTaskHUDWidget");
static_assert(offsetof(UMolePrimaryActiveTaskHUDWidget, CachedOwningTaskComponent) == 0x0002B8, "Member 'UMolePrimaryActiveTaskHUDWidget::CachedOwningTaskComponent' has a wrong offset!");
static_assert(offsetof(UMolePrimaryActiveTaskHUDWidget, MoleTaskHUDWidget) == 0x0002C0, "Member 'UMolePrimaryActiveTaskHUDWidget::MoleTaskHUDWidget' has a wrong offset!");

// Class MoleUI.MoleQuickChatLogWidget
// 0x0050 (0x0448 - 0x03F8)
class UMoleQuickChatLogWidget final : public UCommonActivatableWidget
{
public:
	class FText                                   SelfMessageLogTitle;                               // 0x03F8(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class FText                                   SelectedTokenFormat;                               // 0x0410(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class UListView*                              ListView_MessageLog;                               // 0x0428(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UMoleQuickChatMessageItem*>      MessageLog;                                        // 0x0430(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_440[0x8];                                      // 0x0440(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnFirstMessageReceived();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleQuickChatLogWidget">();
	}
	static class UMoleQuickChatLogWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleQuickChatLogWidget>();
	}
};
static_assert(alignof(UMoleQuickChatLogWidget) == 0x000008, "Wrong alignment on UMoleQuickChatLogWidget");
static_assert(sizeof(UMoleQuickChatLogWidget) == 0x000448, "Wrong size on UMoleQuickChatLogWidget");
static_assert(offsetof(UMoleQuickChatLogWidget, SelfMessageLogTitle) == 0x0003F8, "Member 'UMoleQuickChatLogWidget::SelfMessageLogTitle' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatLogWidget, SelectedTokenFormat) == 0x000410, "Member 'UMoleQuickChatLogWidget::SelectedTokenFormat' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatLogWidget, ListView_MessageLog) == 0x000428, "Member 'UMoleQuickChatLogWidget::ListView_MessageLog' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatLogWidget, MessageLog) == 0x000430, "Member 'UMoleQuickChatLogWidget::MessageLog' has a wrong offset!");

// Class MoleUI.MoleQuickChatMap
// 0x0060 (0x0458 - 0x03F8)
class UMoleQuickChatMap final : public UCommonActivatableWidget
{
public:
	class UMoleQuickChatMapEntry*                 DefaultRoomWidgetToFocus;                          // 0x03F8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPanelWidget*                           Panel_Locations;                                   // 0x0400(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_SkipLocation;                               // 0x0408(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_410[0x48];                                     // 0x0410(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleQuickChatMap">();
	}
	static class UMoleQuickChatMap* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleQuickChatMap>();
	}
};
static_assert(alignof(UMoleQuickChatMap) == 0x000008, "Wrong alignment on UMoleQuickChatMap");
static_assert(sizeof(UMoleQuickChatMap) == 0x000458, "Wrong size on UMoleQuickChatMap");
static_assert(offsetof(UMoleQuickChatMap, DefaultRoomWidgetToFocus) == 0x0003F8, "Member 'UMoleQuickChatMap::DefaultRoomWidgetToFocus' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatMap, Panel_Locations) == 0x000400, "Member 'UMoleQuickChatMap::Panel_Locations' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatMap, Button_SkipLocation) == 0x000408, "Member 'UMoleQuickChatMap::Button_SkipLocation' has a wrong offset!");

// Class MoleUI.MoleQuickChatMapEntry
// 0x0040 (0x1020 - 0x0FE0)
class UMoleQuickChatMapEntry final : public UCommonButtonBase
{
public:
	struct FGameplayTag                           LocationTag;                                       // 0x0FD8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_FDC[0x3C];                                     // 0x0FDC(0x003C)(Fixing Size After Last Property [ Dumper-7 ])
	class UHorizontalBox*                         HBox_HerePin;                                      // 0x1018(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnMapDataRetrieved(const struct FMoleLocationData& LocationData);
	void ResetCosmetics();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleQuickChatMapEntry">();
	}
	static class UMoleQuickChatMapEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleQuickChatMapEntry>();
	}
};
static_assert(alignof(UMoleQuickChatMapEntry) == 0x000010, "Wrong alignment on UMoleQuickChatMapEntry");
static_assert(sizeof(UMoleQuickChatMapEntry) == 0x001020, "Wrong size on UMoleQuickChatMapEntry");
static_assert(offsetof(UMoleQuickChatMapEntry, LocationTag) == 0x000FD8, "Member 'UMoleQuickChatMapEntry::LocationTag' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatMapEntry, HBox_HerePin) == 0x001018, "Member 'UMoleQuickChatMapEntry::HBox_HerePin' has a wrong offset!");

// Class MoleUI.MoleQuickChatPlayerEntry
// 0x0040 (0x1020 - 0x0FE0)
class UMoleQuickChatPlayerEntry final : public UCommonButtonBase
{
public:
	class FName                                   PlayerPortraitColorAMaterialParameterName;         // 0x0FD8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   PlayerPortraitColorBMaterialParameterName;         // 0x0FDC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsOnLowerRow;                                     // 0x0FE0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_FE1[0x7];                                      // 0x0FE1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           PlayerState;                                       // 0x0FE8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 PlayerName;                                        // 0x0FF0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsLocalPlayer;                                    // 0x1000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsGhost;                                          // 0x1001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsFilteredOut;                                    // 0x1002(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1003[0x5];                                     // 0x1003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonLazyImage*                       LazyImage_PlayerPortrait;                          // 0x1008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USizeBox*                               Size_Ghost;                                        // 0x1010(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_PlayerNumber;                                 // 0x1018(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnDataChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleQuickChatPlayerEntry">();
	}
	static class UMoleQuickChatPlayerEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleQuickChatPlayerEntry>();
	}
};
static_assert(alignof(UMoleQuickChatPlayerEntry) == 0x000010, "Wrong alignment on UMoleQuickChatPlayerEntry");
static_assert(sizeof(UMoleQuickChatPlayerEntry) == 0x001020, "Wrong size on UMoleQuickChatPlayerEntry");
static_assert(offsetof(UMoleQuickChatPlayerEntry, PlayerPortraitColorAMaterialParameterName) == 0x000FD8, "Member 'UMoleQuickChatPlayerEntry::PlayerPortraitColorAMaterialParameterName' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatPlayerEntry, PlayerPortraitColorBMaterialParameterName) == 0x000FDC, "Member 'UMoleQuickChatPlayerEntry::PlayerPortraitColorBMaterialParameterName' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatPlayerEntry, bIsOnLowerRow) == 0x000FE0, "Member 'UMoleQuickChatPlayerEntry::bIsOnLowerRow' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatPlayerEntry, PlayerState) == 0x000FE8, "Member 'UMoleQuickChatPlayerEntry::PlayerState' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatPlayerEntry, PlayerName) == 0x000FF0, "Member 'UMoleQuickChatPlayerEntry::PlayerName' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatPlayerEntry, bIsLocalPlayer) == 0x001000, "Member 'UMoleQuickChatPlayerEntry::bIsLocalPlayer' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatPlayerEntry, bIsGhost) == 0x001001, "Member 'UMoleQuickChatPlayerEntry::bIsGhost' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatPlayerEntry, bIsFilteredOut) == 0x001002, "Member 'UMoleQuickChatPlayerEntry::bIsFilteredOut' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatPlayerEntry, LazyImage_PlayerPortrait) == 0x001008, "Member 'UMoleQuickChatPlayerEntry::LazyImage_PlayerPortrait' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatPlayerEntry, Size_Ghost) == 0x001010, "Member 'UMoleQuickChatPlayerEntry::Size_Ghost' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatPlayerEntry, Text_PlayerNumber) == 0x001018, "Member 'UMoleQuickChatPlayerEntry::Text_PlayerNumber' has a wrong offset!");

// Class MoleUI.MoleQuickChatPlayersWidget
// 0x0080 (0x0478 - 0x03F8)
class UMoleQuickChatPlayersWidget final : public UCommonActivatableWidget
{
public:
	bool                                          bIsSkipButtonEnabled;                              // 0x03F8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3F9[0x7];                                      // 0x03F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlay*                               Overlay_Players;                                   // 0x0400(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonButtonBase*                      Button_Skip;                                       // 0x0408(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_410[0x48];                                     // 0x0410(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputComponent*                        PlayersInputComponent;                             // 0x0458(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UMoleQuickChatPlayerEntry*>      PlayerButtons;                                     // 0x0460(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_470[0x8];                                      // 0x0470(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnFilterChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleQuickChatPlayersWidget">();
	}
	static class UMoleQuickChatPlayersWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleQuickChatPlayersWidget>();
	}
};
static_assert(alignof(UMoleQuickChatPlayersWidget) == 0x000008, "Wrong alignment on UMoleQuickChatPlayersWidget");
static_assert(sizeof(UMoleQuickChatPlayersWidget) == 0x000478, "Wrong size on UMoleQuickChatPlayersWidget");
static_assert(offsetof(UMoleQuickChatPlayersWidget, bIsSkipButtonEnabled) == 0x0003F8, "Member 'UMoleQuickChatPlayersWidget::bIsSkipButtonEnabled' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatPlayersWidget, Overlay_Players) == 0x000400, "Member 'UMoleQuickChatPlayersWidget::Overlay_Players' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatPlayersWidget, Button_Skip) == 0x000408, "Member 'UMoleQuickChatPlayersWidget::Button_Skip' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatPlayersWidget, PlayersInputComponent) == 0x000458, "Member 'UMoleQuickChatPlayersWidget::PlayersInputComponent' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatPlayersWidget, PlayerButtons) == 0x000460, "Member 'UMoleQuickChatPlayersWidget::PlayerButtons' has a wrong offset!");

// Class MoleUI.MoleQuickChatMessageItem
// 0x0040 (0x0068 - 0x0028)
class UMoleQuickChatMessageItem final : public UObject
{
public:
	uint8                                         Pad_28[0x38];                                      // 0x0028(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           PlayerState;                                       // 0x0060(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleQuickChatMessageItem">();
	}
	static class UMoleQuickChatMessageItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleQuickChatMessageItem>();
	}
};
static_assert(alignof(UMoleQuickChatMessageItem) == 0x000008, "Wrong alignment on UMoleQuickChatMessageItem");
static_assert(sizeof(UMoleQuickChatMessageItem) == 0x000068, "Wrong size on UMoleQuickChatMessageItem");
static_assert(offsetof(UMoleQuickChatMessageItem, PlayerState) == 0x000060, "Member 'UMoleQuickChatMessageItem::PlayerState' has a wrong offset!");

// Class MoleUI.MoleQuickChatMessageEntry
// 0x0030 (0x02E8 - 0x02B8)
class UMoleQuickChatMessageEntry final : public UUserWidget
{
public:
	uint8                                         Pad_2B8[0x8];                                      // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class URichTextBlock*                         Text_Sender;                                       // 0x02C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URichTextBlock*                         Text_Message;                                      // 0x02C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFromSelf;                                       // 0x02D0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFromPreviousSender;                             // 0x02D1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D2[0x6];                                      // 0x02D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           PlayerState;                                       // 0x02D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItemDefinition*                    PlayerItemDefinition;                              // 0x02E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnDataChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleQuickChatMessageEntry">();
	}
	static class UMoleQuickChatMessageEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleQuickChatMessageEntry>();
	}
};
static_assert(alignof(UMoleQuickChatMessageEntry) == 0x000008, "Wrong alignment on UMoleQuickChatMessageEntry");
static_assert(sizeof(UMoleQuickChatMessageEntry) == 0x0002E8, "Wrong size on UMoleQuickChatMessageEntry");
static_assert(offsetof(UMoleQuickChatMessageEntry, Text_Sender) == 0x0002C0, "Member 'UMoleQuickChatMessageEntry::Text_Sender' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatMessageEntry, Text_Message) == 0x0002C8, "Member 'UMoleQuickChatMessageEntry::Text_Message' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatMessageEntry, bIsFromSelf) == 0x0002D0, "Member 'UMoleQuickChatMessageEntry::bIsFromSelf' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatMessageEntry, bIsFromPreviousSender) == 0x0002D1, "Member 'UMoleQuickChatMessageEntry::bIsFromPreviousSender' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatMessageEntry, PlayerState) == 0x0002D8, "Member 'UMoleQuickChatMessageEntry::PlayerState' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatMessageEntry, PlayerItemDefinition) == 0x0002E0, "Member 'UMoleQuickChatMessageEntry::PlayerItemDefinition' has a wrong offset!");

// Class MoleUI.MoleQuickChatRadialSlot
// 0x0040 (0x10C0 - 0x1080)
class UMoleQuickChatRadialSlot : public UFortRadialSlot
{
public:
	struct FLinearColor                           CategoryColor;                                     // 0x1078(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              CategoryImage;                                     // 0x1088(0x0028)(BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonRichTextBlock*                   RichText_Main;                                     // 0x10B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_10B8[0x8];                                     // 0x10B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnUpdated();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleQuickChatRadialSlot">();
	}
	static class UMoleQuickChatRadialSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleQuickChatRadialSlot>();
	}
};
static_assert(alignof(UMoleQuickChatRadialSlot) == 0x000010, "Wrong alignment on UMoleQuickChatRadialSlot");
static_assert(sizeof(UMoleQuickChatRadialSlot) == 0x0010C0, "Wrong size on UMoleQuickChatRadialSlot");
static_assert(offsetof(UMoleQuickChatRadialSlot, CategoryColor) == 0x001078, "Member 'UMoleQuickChatRadialSlot::CategoryColor' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatRadialSlot, CategoryImage) == 0x001088, "Member 'UMoleQuickChatRadialSlot::CategoryImage' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatRadialSlot, RichText_Main) == 0x0010B0, "Member 'UMoleQuickChatRadialSlot::RichText_Main' has a wrong offset!");

// Class MoleUI.MoleQuickChatCategorySlot
// 0x0000 (0x10C0 - 0x10C0)
class UMoleQuickChatCategorySlot final : public UMoleQuickChatRadialSlot
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleQuickChatCategorySlot">();
	}
	static class UMoleQuickChatCategorySlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleQuickChatCategorySlot>();
	}
};
static_assert(alignof(UMoleQuickChatCategorySlot) == 0x000010, "Wrong alignment on UMoleQuickChatCategorySlot");
static_assert(sizeof(UMoleQuickChatCategorySlot) == 0x0010C0, "Wrong size on UMoleQuickChatCategorySlot");

// Class MoleUI.MoleQuickChatActionSlot
// 0x0000 (0x10C0 - 0x10C0)
class UMoleQuickChatActionSlot final : public UMoleQuickChatRadialSlot
{
public:
	void OnIsAvailableChanged(const bool bIsAvailable);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleQuickChatActionSlot">();
	}
	static class UMoleQuickChatActionSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleQuickChatActionSlot>();
	}
};
static_assert(alignof(UMoleQuickChatActionSlot) == 0x000010, "Wrong alignment on UMoleQuickChatActionSlot");
static_assert(sizeof(UMoleQuickChatActionSlot) == 0x0010C0, "Wrong size on UMoleQuickChatActionSlot");

// Class MoleUI.MoleQuickChatUIComponent
// 0x00B8 (0x0158 - 0x00A0)
class UMoleQuickChatUIComponent final : public UPlayerStateComponent
{
public:
	TSoftObjectPtr<class UDataTable>              MessagesTable;                                     // 0x00A0(0x0028)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct FMoleQuickChatMessageInfo, float> MessageSpamMap;                                    // 0x00C8(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FMoleQuickChatMessageSummary           MessagesSummary;                                   // 0x0118(0x0018)(Transient, Protected, NativeAccessSpecifierProtected)
	TArray<struct FMoleQuickChatRawMessage>       MessageLog;                                        // 0x0130(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	float                                         MinimumTimeBetweenSameMessageSend;                 // 0x0140(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             LoadedMessagesTable;                               // 0x0148(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_150[0x8];                                      // 0x0150(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleQuickChatUIComponent">();
	}
	static class UMoleQuickChatUIComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleQuickChatUIComponent>();
	}
};
static_assert(alignof(UMoleQuickChatUIComponent) == 0x000008, "Wrong alignment on UMoleQuickChatUIComponent");
static_assert(sizeof(UMoleQuickChatUIComponent) == 0x000158, "Wrong size on UMoleQuickChatUIComponent");
static_assert(offsetof(UMoleQuickChatUIComponent, MessagesTable) == 0x0000A0, "Member 'UMoleQuickChatUIComponent::MessagesTable' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatUIComponent, MessageSpamMap) == 0x0000C8, "Member 'UMoleQuickChatUIComponent::MessageSpamMap' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatUIComponent, MessagesSummary) == 0x000118, "Member 'UMoleQuickChatUIComponent::MessagesSummary' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatUIComponent, MessageLog) == 0x000130, "Member 'UMoleQuickChatUIComponent::MessageLog' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatUIComponent, MinimumTimeBetweenSameMessageSend) == 0x000140, "Member 'UMoleQuickChatUIComponent::MinimumTimeBetweenSameMessageSend' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatUIComponent, LoadedMessagesTable) == 0x000148, "Member 'UMoleQuickChatUIComponent::LoadedMessagesTable' has a wrong offset!");

// Class MoleUI.MoleQuickChatWidget
// 0x0210 (0x0608 - 0x03F8)
class UMoleQuickChatWidget final : public UCommonActivatableWidget
{
public:
	class FText                                   LeftBracketToken;                                  // 0x03F8(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class FText                                   RightBracketToken;                                 // 0x0410(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class FText                                   AddPlayerToken;                                    // 0x0428(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class FText                                   AddPlayerOptionalToken;                            // 0x0440(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class FText                                   AddPlayerTitleToken;                               // 0x0458(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class FText                                   AddGhostToken;                                     // 0x0470(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class FText                                   AddGhostOptionalToken;                             // 0x0488(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class FText                                   AddGhostTitleToken;                                // 0x04A0(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class FText                                   AddLocationToken;                                  // 0x04B8(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class FText                                   AddLocationOptionalToken;                          // 0x04D0(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class FText                                   AddLocationTitleToken;                             // 0x04E8(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class FText                                   SelectedTokenFormat;                               // 0x0500(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UMoleQuickChatRadialSlot>   CategoryWidgetClass;                               // 0x0518(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMoleQuickChatRadialSlot>   ActionWidgetClass;                                 // 0x0520(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FMoleBlockedInput>              InputActionsToBlock;                               // 0x0528(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FMoleHoldBinding                       BackBinding;                                       // 0x0538(0x0018)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UOverlay*                               Overlay_Selections;                                // 0x0550(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonVisibilitySwitcher*              Switcher_SelectionMethods;                         // 0x0558(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UOverlay*                               Overlay_Radial;                                    // 0x0560(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UOverlay*                               Overlay_Players;                                   // 0x0568(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UOverlay*                               Overlay_Map;                                       // 0x0570(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMoleSlottedRadialMenu*                 Radial_Selections;                                 // 0x0578(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMoleQuickChatPlayersWidget*            MolePlayers_PlayerSelection;                       // 0x0580(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMoleQuickChatMap*                      MoleMap_LocationSelection;                         // 0x0588(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USizeBox*                               SizeBox_HotkeyBar;                                 // 0x0590(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UOverlay*                               Overlay_FullscreenContainer;                       // 0x0598(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5A0[0x50];                                     // 0x05A0(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputComponent*                        QuickChatInputComponent;                           // 0x05F0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5F8[0x10];                                     // 0x05F8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAvailable();
	void OnItemClicked();
	void OnMessageFailedToSend();
	void OnPreviewChanged(const class FText& Message);

	bool AreAcceptAndBackInverted() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleQuickChatWidget">();
	}
	static class UMoleQuickChatWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleQuickChatWidget>();
	}
};
static_assert(alignof(UMoleQuickChatWidget) == 0x000008, "Wrong alignment on UMoleQuickChatWidget");
static_assert(sizeof(UMoleQuickChatWidget) == 0x000608, "Wrong size on UMoleQuickChatWidget");
static_assert(offsetof(UMoleQuickChatWidget, LeftBracketToken) == 0x0003F8, "Member 'UMoleQuickChatWidget::LeftBracketToken' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatWidget, RightBracketToken) == 0x000410, "Member 'UMoleQuickChatWidget::RightBracketToken' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatWidget, AddPlayerToken) == 0x000428, "Member 'UMoleQuickChatWidget::AddPlayerToken' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatWidget, AddPlayerOptionalToken) == 0x000440, "Member 'UMoleQuickChatWidget::AddPlayerOptionalToken' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatWidget, AddPlayerTitleToken) == 0x000458, "Member 'UMoleQuickChatWidget::AddPlayerTitleToken' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatWidget, AddGhostToken) == 0x000470, "Member 'UMoleQuickChatWidget::AddGhostToken' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatWidget, AddGhostOptionalToken) == 0x000488, "Member 'UMoleQuickChatWidget::AddGhostOptionalToken' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatWidget, AddGhostTitleToken) == 0x0004A0, "Member 'UMoleQuickChatWidget::AddGhostTitleToken' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatWidget, AddLocationToken) == 0x0004B8, "Member 'UMoleQuickChatWidget::AddLocationToken' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatWidget, AddLocationOptionalToken) == 0x0004D0, "Member 'UMoleQuickChatWidget::AddLocationOptionalToken' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatWidget, AddLocationTitleToken) == 0x0004E8, "Member 'UMoleQuickChatWidget::AddLocationTitleToken' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatWidget, SelectedTokenFormat) == 0x000500, "Member 'UMoleQuickChatWidget::SelectedTokenFormat' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatWidget, CategoryWidgetClass) == 0x000518, "Member 'UMoleQuickChatWidget::CategoryWidgetClass' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatWidget, ActionWidgetClass) == 0x000520, "Member 'UMoleQuickChatWidget::ActionWidgetClass' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatWidget, InputActionsToBlock) == 0x000528, "Member 'UMoleQuickChatWidget::InputActionsToBlock' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatWidget, BackBinding) == 0x000538, "Member 'UMoleQuickChatWidget::BackBinding' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatWidget, Overlay_Selections) == 0x000550, "Member 'UMoleQuickChatWidget::Overlay_Selections' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatWidget, Switcher_SelectionMethods) == 0x000558, "Member 'UMoleQuickChatWidget::Switcher_SelectionMethods' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatWidget, Overlay_Radial) == 0x000560, "Member 'UMoleQuickChatWidget::Overlay_Radial' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatWidget, Overlay_Players) == 0x000568, "Member 'UMoleQuickChatWidget::Overlay_Players' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatWidget, Overlay_Map) == 0x000570, "Member 'UMoleQuickChatWidget::Overlay_Map' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatWidget, Radial_Selections) == 0x000578, "Member 'UMoleQuickChatWidget::Radial_Selections' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatWidget, MolePlayers_PlayerSelection) == 0x000580, "Member 'UMoleQuickChatWidget::MolePlayers_PlayerSelection' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatWidget, MoleMap_LocationSelection) == 0x000588, "Member 'UMoleQuickChatWidget::MoleMap_LocationSelection' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatWidget, SizeBox_HotkeyBar) == 0x000590, "Member 'UMoleQuickChatWidget::SizeBox_HotkeyBar' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatWidget, Overlay_FullscreenContainer) == 0x000598, "Member 'UMoleQuickChatWidget::Overlay_FullscreenContainer' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatWidget, QuickChatInputComponent) == 0x0005F0, "Member 'UMoleQuickChatWidget::QuickChatInputComponent' has a wrong offset!");

// Class MoleUI.MoleQuickChatWidgetProxy
// 0x0048 (0x0300 - 0x02B8)
class UMoleQuickChatWidgetProxy final : public UUserWidget
{
public:
	TSubclassOf<class UMoleQuickChatUIComponent>  QuickChatUIComponentClass;                         // 0x02B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   ActiveClass;                                       // 0x02C0(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2E8[0x18];                                     // 0x02E8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnEnter();
	void OnQuickChatClosed();
	void OnQuickChatOpened();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleQuickChatWidgetProxy">();
	}
	static class UMoleQuickChatWidgetProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleQuickChatWidgetProxy>();
	}
};
static_assert(alignof(UMoleQuickChatWidgetProxy) == 0x000008, "Wrong alignment on UMoleQuickChatWidgetProxy");
static_assert(sizeof(UMoleQuickChatWidgetProxy) == 0x000300, "Wrong size on UMoleQuickChatWidgetProxy");
static_assert(offsetof(UMoleQuickChatWidgetProxy, QuickChatUIComponentClass) == 0x0002B8, "Member 'UMoleQuickChatWidgetProxy::QuickChatUIComponentClass' has a wrong offset!");
static_assert(offsetof(UMoleQuickChatWidgetProxy, ActiveClass) == 0x0002C0, "Member 'UMoleQuickChatWidgetProxy::ActiveClass' has a wrong offset!");

// Class MoleUI.MoleRoleColor
// 0x0080 (0x02F0 - 0x0270)
class AMoleRoleColor final : public AActor
{
public:
	struct FEventMessageTag                       PeelyPartyTag;                                     // 0x0270(0x0004)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_274[0x4];                                      // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TraceEndPointOffset;                               // 0x0278(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ECollisionChannel                             TraceChannel;                                      // 0x0290(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_291[0x4F];                                     // 0x0291(0x004F)(Fixing Size After Last Property [ Dumper-7 ])
	class UDecalComponent*                        DecalComponent;                                    // 0x02E0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2E8[0x8];                                      // 0x02E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Hide();
	void OnSetColor(const struct FLinearColor& Color);
	void SetColor(const struct FLinearColor& Color);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleRoleColor">();
	}
	static class AMoleRoleColor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMoleRoleColor>();
	}
};
static_assert(alignof(AMoleRoleColor) == 0x000008, "Wrong alignment on AMoleRoleColor");
static_assert(sizeof(AMoleRoleColor) == 0x0002F0, "Wrong size on AMoleRoleColor");
static_assert(offsetof(AMoleRoleColor, PeelyPartyTag) == 0x000270, "Member 'AMoleRoleColor::PeelyPartyTag' has a wrong offset!");
static_assert(offsetof(AMoleRoleColor, TraceEndPointOffset) == 0x000278, "Member 'AMoleRoleColor::TraceEndPointOffset' has a wrong offset!");
static_assert(offsetof(AMoleRoleColor, TraceChannel) == 0x000290, "Member 'AMoleRoleColor::TraceChannel' has a wrong offset!");
static_assert(offsetof(AMoleRoleColor, DecalComponent) == 0x0002E0, "Member 'AMoleRoleColor::DecalComponent' has a wrong offset!");

// Class MoleUI.MoleSaboteurBarEntry
// 0x0060 (0x0318 - 0x02B8)
class UMoleSaboteurBarEntry final : public UUserWidget
{
public:
	class FText                                   Name_0;                                            // 0x02B8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FName                                   TriggeringInputAction;                             // 0x02D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D4[0x4];                                      // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  AbilitiesToTrack;                                  // 0x02D8(0x0020)(Edit, NativeAccessSpecifierPrivate)
	bool                                          bTrackLowestCooldown;                              // 0x02F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2F9[0x7];                                      // 0x02F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayAbilitySpec>           AbilitySpecsToTrack;                               // 0x0300(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	class UMoleTimer*                             Timer_EntryVisuals;                                // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleSaboteurBarEntry">();
	}
	static class UMoleSaboteurBarEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleSaboteurBarEntry>();
	}
};
static_assert(alignof(UMoleSaboteurBarEntry) == 0x000008, "Wrong alignment on UMoleSaboteurBarEntry");
static_assert(sizeof(UMoleSaboteurBarEntry) == 0x000318, "Wrong size on UMoleSaboteurBarEntry");
static_assert(offsetof(UMoleSaboteurBarEntry, Name_0) == 0x0002B8, "Member 'UMoleSaboteurBarEntry::Name_0' has a wrong offset!");
static_assert(offsetof(UMoleSaboteurBarEntry, TriggeringInputAction) == 0x0002D0, "Member 'UMoleSaboteurBarEntry::TriggeringInputAction' has a wrong offset!");
static_assert(offsetof(UMoleSaboteurBarEntry, AbilitiesToTrack) == 0x0002D8, "Member 'UMoleSaboteurBarEntry::AbilitiesToTrack' has a wrong offset!");
static_assert(offsetof(UMoleSaboteurBarEntry, bTrackLowestCooldown) == 0x0002F8, "Member 'UMoleSaboteurBarEntry::bTrackLowestCooldown' has a wrong offset!");
static_assert(offsetof(UMoleSaboteurBarEntry, AbilitySpecsToTrack) == 0x000300, "Member 'UMoleSaboteurBarEntry::AbilitySpecsToTrack' has a wrong offset!");
static_assert(offsetof(UMoleSaboteurBarEntry, Timer_EntryVisuals) == 0x000310, "Member 'UMoleSaboteurBarEntry::Timer_EntryVisuals' has a wrong offset!");

// Class MoleUI.MoleSlottedRadialMenu
// 0x0018 (0x03E0 - 0x03C8)
class UMoleSlottedRadialMenu final : public UFortSlottedRadialMenu
{
public:
	class FName                                   PointerRotationMaterialParameterName;              // 0x03C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AngleChangedEpsilon;                               // 0x03CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Image_Pointer;                                     // 0x03D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3D8[0x8];                                      // 0x03D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCategorySelected(const class UFortRadialSlot* SelectedSlot, const TArray<struct FMoleQuickChatActionData>& Actions, const struct FLinearColor& CategoryColor, const TSoftObjectPtr<class UTexture2D>& CategoryImage);
	void OnRadialEntriesChanged(const bool bIsActions, const int32 NumEntries, const float Degrees);
	void OnRadialEntrySelected(int32 Index_0, class UUserWidget* SelectedEntry);
	void OnResetNavigation();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleSlottedRadialMenu">();
	}
	static class UMoleSlottedRadialMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleSlottedRadialMenu>();
	}
};
static_assert(alignof(UMoleSlottedRadialMenu) == 0x000008, "Wrong alignment on UMoleSlottedRadialMenu");
static_assert(sizeof(UMoleSlottedRadialMenu) == 0x0003E0, "Wrong size on UMoleSlottedRadialMenu");
static_assert(offsetof(UMoleSlottedRadialMenu, PointerRotationMaterialParameterName) == 0x0003C8, "Member 'UMoleSlottedRadialMenu::PointerRotationMaterialParameterName' has a wrong offset!");
static_assert(offsetof(UMoleSlottedRadialMenu, AngleChangedEpsilon) == 0x0003CC, "Member 'UMoleSlottedRadialMenu::AngleChangedEpsilon' has a wrong offset!");
static_assert(offsetof(UMoleSlottedRadialMenu, Image_Pointer) == 0x0003D0, "Member 'UMoleSlottedRadialMenu::Image_Pointer' has a wrong offset!");

// Class MoleUI.MoleSubobjectiveIndicatorWidget
// 0x0010 (0x03C8 - 0x03B8)
class UMoleSubobjectiveIndicatorWidget final : public UFortActorIndicatorWidget
{
public:
	float                                         MaximumRelativeHeightBeforeOffset;                 // 0x03B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CollisionRelativeHeightOffset;                     // 0x03BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bIsScreenClamped : 1;                              // 0x03C0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_3C1[0x7];                                      // 0x03C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnScreenClampChanged(bool bScreenClamped);
	void OnSetUsageMode(bool bUseGoalIndicatorMode);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleSubobjectiveIndicatorWidget">();
	}
	static class UMoleSubobjectiveIndicatorWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleSubobjectiveIndicatorWidget>();
	}
};
static_assert(alignof(UMoleSubobjectiveIndicatorWidget) == 0x000008, "Wrong alignment on UMoleSubobjectiveIndicatorWidget");
static_assert(sizeof(UMoleSubobjectiveIndicatorWidget) == 0x0003C8, "Wrong size on UMoleSubobjectiveIndicatorWidget");
static_assert(offsetof(UMoleSubobjectiveIndicatorWidget, MaximumRelativeHeightBeforeOffset) == 0x0003B8, "Member 'UMoleSubobjectiveIndicatorWidget::MaximumRelativeHeightBeforeOffset' has a wrong offset!");
static_assert(offsetof(UMoleSubobjectiveIndicatorWidget, CollisionRelativeHeightOffset) == 0x0003BC, "Member 'UMoleSubobjectiveIndicatorWidget::CollisionRelativeHeightOffset' has a wrong offset!");

// Class MoleUI.MoleTaskHUDWidget
// 0x0038 (0x02F0 - 0x02B8)
class UMoleTaskHUDWidget final : public UUserWidget
{
public:
	class UDynamicEntryBox*                       ObjectiveEntryBox;                                 // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            TaskProgress;                                      // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMolePlayerTaskManagementComponent*     CachedOwningTaskComponent;                         // 0x02C8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMoleTaskDataAsset*                     CachedTaskDataAsset;                               // 0x02D0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMoleActiveTaskStateHandle             CachedTaskHandle;                                  // 0x02D8(0x0004)(Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2DC[0xC];                                      // 0x02DC(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bAttemptShowActiveObjectives : 1;                  // 0x02E8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_2E9[0x7];                                      // 0x02E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRepresentedLogicPhaseChange();
	void OnRepresentedTaskChanged(const class UMoleTaskDataAsset* PreviousTaskAsset, const struct FMoleActiveTaskStateHandle& PreviousHandle);
	void RequestCompactMode();
	void SetAttemptShowActiveObjectives(bool bAttemptShow);
	void SetTaskAsset(class UMoleTaskDataAsset* TaskAsset);
	void SetTaskHandle(const struct FMoleActiveTaskStateHandle& TaskHandle);

	const class UMoleTaskDataAsset* GetTaskAsset() const;
	class FText GetTaskTitle() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleTaskHUDWidget">();
	}
	static class UMoleTaskHUDWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleTaskHUDWidget>();
	}
};
static_assert(alignof(UMoleTaskHUDWidget) == 0x000008, "Wrong alignment on UMoleTaskHUDWidget");
static_assert(sizeof(UMoleTaskHUDWidget) == 0x0002F0, "Wrong size on UMoleTaskHUDWidget");
static_assert(offsetof(UMoleTaskHUDWidget, ObjectiveEntryBox) == 0x0002B8, "Member 'UMoleTaskHUDWidget::ObjectiveEntryBox' has a wrong offset!");
static_assert(offsetof(UMoleTaskHUDWidget, TaskProgress) == 0x0002C0, "Member 'UMoleTaskHUDWidget::TaskProgress' has a wrong offset!");
static_assert(offsetof(UMoleTaskHUDWidget, CachedOwningTaskComponent) == 0x0002C8, "Member 'UMoleTaskHUDWidget::CachedOwningTaskComponent' has a wrong offset!");
static_assert(offsetof(UMoleTaskHUDWidget, CachedTaskDataAsset) == 0x0002D0, "Member 'UMoleTaskHUDWidget::CachedTaskDataAsset' has a wrong offset!");
static_assert(offsetof(UMoleTaskHUDWidget, CachedTaskHandle) == 0x0002D8, "Member 'UMoleTaskHUDWidget::CachedTaskHandle' has a wrong offset!");

// Class MoleUI.MoleTaskObjectiveHUDWidget
// 0x0008 (0x02C0 - 0x02B8)
class UMoleTaskObjectiveHUDWidget final : public UUserWidget
{
public:
	uint8                                         Pad_2B8[0x8];                                      // 0x02B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRepresentedObjectiveChanged();
	void OnRepresentedObjectiveCurrentValueChanged(float NewCurrentValue);
	void OnRepresentedObjectiveTargetValueChanged(float NewTargetValue);

	struct FMoleTaskObjectiveUIInfo GetTaskObjectiveInfo() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleTaskObjectiveHUDWidget">();
	}
	static class UMoleTaskObjectiveHUDWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleTaskObjectiveHUDWidget>();
	}
};
static_assert(alignof(UMoleTaskObjectiveHUDWidget) == 0x000008, "Wrong alignment on UMoleTaskObjectiveHUDWidget");
static_assert(sizeof(UMoleTaskObjectiveHUDWidget) == 0x0002C0, "Wrong size on UMoleTaskObjectiveHUDWidget");

// Class MoleUI.MoleTimer
// 0x0010 (0x02C8 - 0x02B8)
class UMoleTimer final : public UUserWidget
{
public:
	uint8                                         Pad_2B8[0x10];                                     // 0x02B8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearTimer();
	void OnTimerCleared();
	void OnTimerFinished();
	void OnTimerStarted(int32 TimeLeft);
	void OnTimerUpdated(int32 TimeLeft);
	void StartTimer(float InServerFinishTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleTimer">();
	}
	static class UMoleTimer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleTimer>();
	}
};
static_assert(alignof(UMoleTimer) == 0x000008, "Wrong alignment on UMoleTimer");
static_assert(sizeof(UMoleTimer) == 0x0002C8, "Wrong size on UMoleTimer");

// Class MoleUI.MoleUIAssetManagerComponent
// 0x0000 (0x00D8 - 0x00D8)
class UMoleUIAssetManagerComponent final : public UMoleAssetManagerComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleUIAssetManagerComponent">();
	}
	static class UMoleUIAssetManagerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleUIAssetManagerComponent>();
	}
};
static_assert(alignof(UMoleUIAssetManagerComponent) == 0x000008, "Wrong alignment on UMoleUIAssetManagerComponent");
static_assert(sizeof(UMoleUIAssetManagerComponent) == 0x0000D8, "Wrong size on UMoleUIAssetManagerComponent");

// Class MoleUI.MoleUIDirector
// 0x00B8 (0x0348 - 0x0290)
class AMoleUIDirector final : public ADynamicUIDirectorBase
{
public:
	TArray<class UDynamicUIScene*>                LobbyStateScenes;                                  // 0x0290(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UDynamicUIScene*>                VotingStateScenes;                                 // 0x02A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UDynamicUIScene*>                QuickChatScenes;                                   // 0x02B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UDynamicUIScene*                        AllyScene;                                         // 0x02C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDynamicUIScene*                        EnemyScene;                                        // 0x02C8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDynamicUIScene*                        GhostScene;                                        // 0x02D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AMoleVotingPresentationManager> VotingSummaryPresentationManagerClass;             // 0x02D8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMoleVotingPresentationManager*         VotingSummaryPresentationManager;                  // 0x02E0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UMoleEnemyAbilityWidgetComponent> EnemyAbilitiesMenuClass;                           // 0x02E8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             EnemyAbilityUIDataTable;                           // 0x02F0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             LocationDataTable;                                 // 0x02F8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             PlayerUIInfoDataTable;                             // 0x0300(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDynamicUIScene*                        RoleScene;                                         // 0x0308(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMoleEnemyAbilityWidgetComponent*       EnemyAbilityMenuComponent;                         // 0x0310(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_318[0x30];                                     // 0x0318(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static bool GetMoleEnemyAbilityUIData(const class UObject* WorldContextObject, const struct FGameplayTag& SabotageTag, struct FMoleAbilityUIData* OutEnemyAbilityUIData);
	static bool GetMoleLocationData(const class UObject* WorldContextObject, const struct FGameplayTag& LocationTag, struct FMoleLocationData* OutLocationData);
	static bool GetMolePlayerUIData(class APlayerState* PlayerState, int32* OutPlayerNUmber, struct FMolePlayerUIData* OutPlayerUIData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleUIDirector">();
	}
	static class AMoleUIDirector* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMoleUIDirector>();
	}
};
static_assert(alignof(AMoleUIDirector) == 0x000008, "Wrong alignment on AMoleUIDirector");
static_assert(sizeof(AMoleUIDirector) == 0x000348, "Wrong size on AMoleUIDirector");
static_assert(offsetof(AMoleUIDirector, LobbyStateScenes) == 0x000290, "Member 'AMoleUIDirector::LobbyStateScenes' has a wrong offset!");
static_assert(offsetof(AMoleUIDirector, VotingStateScenes) == 0x0002A0, "Member 'AMoleUIDirector::VotingStateScenes' has a wrong offset!");
static_assert(offsetof(AMoleUIDirector, QuickChatScenes) == 0x0002B0, "Member 'AMoleUIDirector::QuickChatScenes' has a wrong offset!");
static_assert(offsetof(AMoleUIDirector, AllyScene) == 0x0002C0, "Member 'AMoleUIDirector::AllyScene' has a wrong offset!");
static_assert(offsetof(AMoleUIDirector, EnemyScene) == 0x0002C8, "Member 'AMoleUIDirector::EnemyScene' has a wrong offset!");
static_assert(offsetof(AMoleUIDirector, GhostScene) == 0x0002D0, "Member 'AMoleUIDirector::GhostScene' has a wrong offset!");
static_assert(offsetof(AMoleUIDirector, VotingSummaryPresentationManagerClass) == 0x0002D8, "Member 'AMoleUIDirector::VotingSummaryPresentationManagerClass' has a wrong offset!");
static_assert(offsetof(AMoleUIDirector, VotingSummaryPresentationManager) == 0x0002E0, "Member 'AMoleUIDirector::VotingSummaryPresentationManager' has a wrong offset!");
static_assert(offsetof(AMoleUIDirector, EnemyAbilitiesMenuClass) == 0x0002E8, "Member 'AMoleUIDirector::EnemyAbilitiesMenuClass' has a wrong offset!");
static_assert(offsetof(AMoleUIDirector, EnemyAbilityUIDataTable) == 0x0002F0, "Member 'AMoleUIDirector::EnemyAbilityUIDataTable' has a wrong offset!");
static_assert(offsetof(AMoleUIDirector, LocationDataTable) == 0x0002F8, "Member 'AMoleUIDirector::LocationDataTable' has a wrong offset!");
static_assert(offsetof(AMoleUIDirector, PlayerUIInfoDataTable) == 0x000300, "Member 'AMoleUIDirector::PlayerUIInfoDataTable' has a wrong offset!");
static_assert(offsetof(AMoleUIDirector, RoleScene) == 0x000308, "Member 'AMoleUIDirector::RoleScene' has a wrong offset!");
static_assert(offsetof(AMoleUIDirector, EnemyAbilityMenuComponent) == 0x000310, "Member 'AMoleUIDirector::EnemyAbilityMenuComponent' has a wrong offset!");

// Class MoleUI.MoleUIIndicatorManagerComponent
// 0x00E8 (0x0188 - 0x00A0)
class UMoleUIIndicatorManagerComponent final : public UControllerComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMoleSubobjectiveIndicatorWidget> SubobjectiveIndicatorWidgetClass;                  // 0x00A8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FUserWidgetPool                        IndicatorPool;                                     // 0x00B0(0x0088)(Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMap<class AActor*, class UMoleSubobjectiveIndicatorWidget*> ActorToSubobjectiveIndicatorMap;                   // 0x0138(0x0050)(ExportObject, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleUIIndicatorManagerComponent">();
	}
	static class UMoleUIIndicatorManagerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleUIIndicatorManagerComponent>();
	}
};
static_assert(alignof(UMoleUIIndicatorManagerComponent) == 0x000008, "Wrong alignment on UMoleUIIndicatorManagerComponent");
static_assert(sizeof(UMoleUIIndicatorManagerComponent) == 0x000188, "Wrong size on UMoleUIIndicatorManagerComponent");
static_assert(offsetof(UMoleUIIndicatorManagerComponent, SubobjectiveIndicatorWidgetClass) == 0x0000A8, "Member 'UMoleUIIndicatorManagerComponent::SubobjectiveIndicatorWidgetClass' has a wrong offset!");
static_assert(offsetof(UMoleUIIndicatorManagerComponent, IndicatorPool) == 0x0000B0, "Member 'UMoleUIIndicatorManagerComponent::IndicatorPool' has a wrong offset!");
static_assert(offsetof(UMoleUIIndicatorManagerComponent, ActorToSubobjectiveIndicatorMap) == 0x000138, "Member 'UMoleUIIndicatorManagerComponent::ActorToSubobjectiveIndicatorMap' has a wrong offset!");

// Class MoleUI.MoleVoiceChatStatusIcon
// 0x0000 (0x02B0 - 0x02B0)
class UMoleVoiceChatStatusIcon final : public UFortVoiceChatStatusIconProxyAnim
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleVoiceChatStatusIcon">();
	}
	static class UMoleVoiceChatStatusIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleVoiceChatStatusIcon>();
	}
};
static_assert(alignof(UMoleVoiceChatStatusIcon) == 0x000010, "Wrong alignment on UMoleVoiceChatStatusIcon");
static_assert(sizeof(UMoleVoiceChatStatusIcon) == 0x0002B0, "Wrong size on UMoleVoiceChatStatusIcon");

// Class MoleUI.MolePlayerItem
// 0x0008 (0x0030 - 0x0028)
class UMolePlayerItem : public UObject
{
public:
	bool                                          bHiddenIdentity;                                   // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MolePlayerItem">();
	}
	static class UMolePlayerItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMolePlayerItem>();
	}
};
static_assert(alignof(UMolePlayerItem) == 0x000008, "Wrong alignment on UMolePlayerItem");
static_assert(sizeof(UMolePlayerItem) == 0x000030, "Wrong size on UMolePlayerItem");
static_assert(offsetof(UMolePlayerItem, bHiddenIdentity) == 0x000028, "Member 'UMolePlayerItem::bHiddenIdentity' has a wrong offset!");

// Class MoleUI.MoleVotingPlayerInfoItem
// 0x0010 (0x0040 - 0x0030)
class UMoleVotingPlayerInfoItem final : public UMolePlayerItem
{
public:
	struct FMoleVotingPlayerInfo                  PlayerInfo;                                        // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleVotingPlayerInfoItem">();
	}
	static class UMoleVotingPlayerInfoItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleVotingPlayerInfoItem>();
	}
};
static_assert(alignof(UMoleVotingPlayerInfoItem) == 0x000008, "Wrong alignment on UMoleVotingPlayerInfoItem");
static_assert(sizeof(UMoleVotingPlayerInfoItem) == 0x000040, "Wrong size on UMoleVotingPlayerInfoItem");
static_assert(offsetof(UMoleVotingPlayerInfoItem, PlayerInfo) == 0x000030, "Member 'UMoleVotingPlayerInfoItem::PlayerInfo' has a wrong offset!");

// Class MoleUI.MoleVoteCastingInfoPanel
// 0x0018 (0x02D0 - 0x02B8)
class UMoleVoteCastingInfoPanel final : public UUserWidget
{
public:
	class UCommonListView*                        ListView_EliminatedPlayers;                        // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonListView*                        ListView_Voters;                                   // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonListView*                        ListView_Saboteurs;                                // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnPanelVisibilityChanged(bool bShouldShowPanel);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleVoteCastingInfoPanel">();
	}
	static class UMoleVoteCastingInfoPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleVoteCastingInfoPanel>();
	}
};
static_assert(alignof(UMoleVoteCastingInfoPanel) == 0x000008, "Wrong alignment on UMoleVoteCastingInfoPanel");
static_assert(sizeof(UMoleVoteCastingInfoPanel) == 0x0002D0, "Wrong size on UMoleVoteCastingInfoPanel");
static_assert(offsetof(UMoleVoteCastingInfoPanel, ListView_EliminatedPlayers) == 0x0002B8, "Member 'UMoleVoteCastingInfoPanel::ListView_EliminatedPlayers' has a wrong offset!");
static_assert(offsetof(UMoleVoteCastingInfoPanel, ListView_Voters) == 0x0002C0, "Member 'UMoleVoteCastingInfoPanel::ListView_Voters' has a wrong offset!");
static_assert(offsetof(UMoleVoteCastingInfoPanel, ListView_Saboteurs) == 0x0002C8, "Member 'UMoleVoteCastingInfoPanel::ListView_Saboteurs' has a wrong offset!");

// Class MoleUI.MoleVoteTally
// 0x0028 (0x02E0 - 0x02B8)
class UMoleVoteTally final : public UUserWidget
{
public:
	TArray<class APlayerState*>                   VoteList;                                          // 0x02B8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C8[0x10];                                     // 0x02C8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonTileView*                        TileView_Votes;                                    // 0x02D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnVoteTallyStarted(bool bIsSkipTally);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleVoteTally">();
	}
	static class UMoleVoteTally* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleVoteTally>();
	}
};
static_assert(alignof(UMoleVoteTally) == 0x000008, "Wrong alignment on UMoleVoteTally");
static_assert(sizeof(UMoleVoteTally) == 0x0002E0, "Wrong size on UMoleVoteTally");
static_assert(offsetof(UMoleVoteTally, VoteList) == 0x0002B8, "Member 'UMoleVoteTally::VoteList' has a wrong offset!");
static_assert(offsetof(UMoleVoteTally, TileView_Votes) == 0x0002D8, "Member 'UMoleVoteTally::TileView_Votes' has a wrong offset!");

// Class MoleUI.MoleVoteTallyWidgetComponent
// 0x0000 (0x06A0 - 0x06A0)
class UMoleVoteTallyWidgetComponent final : public UWidgetComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleVoteTallyWidgetComponent">();
	}
	static class UMoleVoteTallyWidgetComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleVoteTallyWidgetComponent>();
	}
};
static_assert(alignof(UMoleVoteTallyWidgetComponent) == 0x000010, "Wrong alignment on UMoleVoteTallyWidgetComponent");
static_assert(sizeof(UMoleVoteTallyWidgetComponent) == 0x0006A0, "Wrong size on UMoleVoteTallyWidgetComponent");

// Class MoleUI.MoleVotingIndicator
// 0x0000 (0x0270 - 0x0270)
class AMoleVotingIndicator final : public AActor
{
public:
	void OnIndicatorRevealed(class APlayerState* AccuserPlayerState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleVotingIndicator">();
	}
	static class AMoleVotingIndicator* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMoleVotingIndicator>();
	}
};
static_assert(alignof(AMoleVotingIndicator) == 0x000008, "Wrong alignment on AMoleVotingIndicator");
static_assert(sizeof(AMoleVotingIndicator) == 0x000270, "Wrong size on AMoleVotingIndicator");

// Class MoleUI.MoleVotingPresentationManager
// 0x00D0 (0x0340 - 0x0270)
class AMoleVotingPresentationManager final : public AActor
{
public:
	struct FScalableFloat                         TimeBetweenVoteReveals;                            // 0x0270(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FVector                                PlayerTallyWidgetComponentRelativeOffset;          // 0x0298(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                SkipTallyWidgetComponentRelativeOffset;            // 0x02B0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SelfTallyWidgetSizeMultiplier;                     // 0x02C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2CC[0x4];                                      // 0x02CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMoleVoteTallyWidgetComponent> VoteTallyWidgetComponentClass;                     // 0x02D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UMoleVoteTallyWidgetComponent*>  TallyWidgetComponents;                             // 0x02D8(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMap<class APlayerState*, class AFortPlayerStart*> PlayerStartsPerPlayer;                             // 0x02E8(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	class AActor*                                 SkippedVotesSpawnPoint;                            // 0x0338(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleVotingPresentationManager">();
	}
	static class AMoleVotingPresentationManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMoleVotingPresentationManager>();
	}
};
static_assert(alignof(AMoleVotingPresentationManager) == 0x000008, "Wrong alignment on AMoleVotingPresentationManager");
static_assert(sizeof(AMoleVotingPresentationManager) == 0x000340, "Wrong size on AMoleVotingPresentationManager");
static_assert(offsetof(AMoleVotingPresentationManager, TimeBetweenVoteReveals) == 0x000270, "Member 'AMoleVotingPresentationManager::TimeBetweenVoteReveals' has a wrong offset!");
static_assert(offsetof(AMoleVotingPresentationManager, PlayerTallyWidgetComponentRelativeOffset) == 0x000298, "Member 'AMoleVotingPresentationManager::PlayerTallyWidgetComponentRelativeOffset' has a wrong offset!");
static_assert(offsetof(AMoleVotingPresentationManager, SkipTallyWidgetComponentRelativeOffset) == 0x0002B0, "Member 'AMoleVotingPresentationManager::SkipTallyWidgetComponentRelativeOffset' has a wrong offset!");
static_assert(offsetof(AMoleVotingPresentationManager, SelfTallyWidgetSizeMultiplier) == 0x0002C8, "Member 'AMoleVotingPresentationManager::SelfTallyWidgetSizeMultiplier' has a wrong offset!");
static_assert(offsetof(AMoleVotingPresentationManager, VoteTallyWidgetComponentClass) == 0x0002D0, "Member 'AMoleVotingPresentationManager::VoteTallyWidgetComponentClass' has a wrong offset!");
static_assert(offsetof(AMoleVotingPresentationManager, TallyWidgetComponents) == 0x0002D8, "Member 'AMoleVotingPresentationManager::TallyWidgetComponents' has a wrong offset!");
static_assert(offsetof(AMoleVotingPresentationManager, PlayerStartsPerPlayer) == 0x0002E8, "Member 'AMoleVotingPresentationManager::PlayerStartsPerPlayer' has a wrong offset!");
static_assert(offsetof(AMoleVotingPresentationManager, SkippedVotesSpawnPoint) == 0x000338, "Member 'AMoleVotingPresentationManager::SkippedVotesSpawnPoint' has a wrong offset!");

// Class MoleUI.MoleWidgetInteractionComponent
// 0x0010 (0x0570 - 0x0560)
class UMoleWidgetInteractionComponent final : public UWidgetInteractionComponent
{
public:
	class UInputComponent*                        InputComp;                                         // 0x0558(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_560[0x10];                                     // 0x0560(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoleWidgetInteractionComponent">();
	}
	static class UMoleWidgetInteractionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoleWidgetInteractionComponent>();
	}
};
static_assert(alignof(UMoleWidgetInteractionComponent) == 0x000010, "Wrong alignment on UMoleWidgetInteractionComponent");
static_assert(sizeof(UMoleWidgetInteractionComponent) == 0x000570, "Wrong size on UMoleWidgetInteractionComponent");
static_assert(offsetof(UMoleWidgetInteractionComponent, InputComp) == 0x000558, "Member 'UMoleWidgetInteractionComponent::InputComp' has a wrong offset!");

}

