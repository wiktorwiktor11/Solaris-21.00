#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Creative_CommonDeviceFunctionLibrary

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "EAwardScoreType_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "ECreativeColorSetType_structs.hpp"
#include "EBoolWithUnset_structs.hpp"
#include "ECreativeTeamColor_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Creative_CommonDeviceFunctionLibrary.Creative_CommonDeviceFunctionLibrary_C
// 0x0000 (0x0028 - 0x0028)
class UCreative_CommonDeviceFunctionLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static void ActorCanTrigger(class AActor* Actor_To_Check, class UPrimitiveComponent* Overlap_Component, class UObject* __WorldContext, bool* CanTrigger, class AController** Controller);
	static void Animate_Float_Curve(float Delta_Time, float& Current_Time, class UCurveFloat* FCurve, float Animation_Time, bool Invert_Time, class UObject* __WorldContext, float* Value, bool* bIsComplete);
	static void Apply_Vent_Recently_Launched_Tag_or_Abort_Launch(class AActor* Actor_To_Launch, class AActor* Vent_Actor, class UObject* __WorldContext, bool* ShouldLaunch);
	static void AwardScore(class AActor* Actor, int32 Score, EAwardScoreType Type, class AController* Controller, class UFortMinigameLogicComponent* Minigame_Logic, const struct FGameplayTagContainer& TargetTags, class UObject* __WorldContext);
	static void Bool_to_Bool_with_Unset(bool Input, class UObject* __WorldContext, EBoolWithUnset* Output);
	static void Get_Driver_or_Pawn_Controller(class AActor* Actor_To_Check, class UObject* __WorldContext, bool* Valid_Controller, class AController** Controller);
	static void Get_Dynamic_Team_Color(class AActor* Actor, class AFortMinigame* Minigame, ECreativeColorSetType Color_Type, class UObject* __WorldContext, int32* Array_Index);
	static void Get_PlayerState_from_NetID(const struct FUniqueNetIdRepl& Unique_Net_Id, class UObject* __WorldContext, class AFortPlayerState** Fort_Player_State);
	static void Get_Team_Color_For_Team_Option(class AActor* ContextActor, const struct FCreativeTeamOption& TeamOption, class UObject* __WorldContext, struct FLinearColor* Base_Color, struct FLinearColor* Light_Color, struct FLinearColor* Bold_Color);
	static void Get_Team_Color_Index_from_Tag(class AActor* Actor_with_Tag, class AFortMinigame* Minigame, class UObject* __WorldContext, int32* Array_Index, ECreativeColorSetType* Color_Type_Out);
	static int32 Get_Team_Color_Index_or_Team_Index(class UFortMinigameLogicComponent* Minigame_Logic, int32 Team_Index, class UObject* __WorldContext);
	static void GetMID(class UPrimitiveComponent* Target, class UObject* __WorldContext, class UMaterialInstanceDynamic** Mid);
	static void GetMID_FromMaterial(class UPrimitiveComponent* Target, int32 Index_0, class UMaterialInterface* SourceMaterial, class UObject* __WorldContext, class UMaterialInstanceDynamic** Mid);
	static void Give_Ammo_To_Inventory_Owner(TScriptInterface<class IFortInventoryOwnerInterface> Inventory_Owner, class UFortWorldItemDefinition* World_Item_Definition, int32 Pickup_Instigator_Handle, const TMap<TSoftObjectPtr<class UFortWorldItemDefinition>, int32>& AmmoToGiveItemDefinitionMap, int32 DefaultAmmoToGive, class UObject* __WorldContext);
	static void IndexToTeam(int32 Index_0, class UObject* __WorldContext, uint8* Team);
	static void Is_Matching_Channel_ID(class UFortGameplayMessageComponentBase* A, class UFortGameplayMessageComponentBase* B, class UObject* __WorldContext, bool* Matches);
	static void IsActivatedOnPhase(EFortMinigameState State, int32 PhaseIndex, const class AActor* Actor, class UObject* __WorldContext, bool* Enabled);
	static void IsEnabledPhaseMatch(EFortMinigameState State, int32 PhaseIndex, const class AActor* Actor, class UObject* __WorldContext, bool* Enabled);
	static void IsInEditor(class UObject* __WorldContext, bool* TRUE_0);
	static void IsInPlayMode(const class AActor*& Actor, class UObject* __WorldContext, bool* Play_Mode);
	static void IsLocalPawn(class AActor* Actor, class UObject* __WorldContext, bool* IsLocalPawn_0);
	static void IsLogicInPlayMode(const class UFortMinigameLogicComponent*& Logic, class UObject* __WorldContext, bool* Play_Mode);
	static void IsOnUnpublishedIsland(const class AActor* Actor, class UObject* __WorldContext, bool* Edit_Mode);
	static void IsValidTeam(int32 Team_to_Check, const class AActor* Actor_To_Check, class UObject* __WorldContext, bool* Valid);
	static void MatchesTagReturnMatch(const struct FGameplayTagContainer& TagContainer, const struct FGameplayTag& Tag, bool ExactMatch, class UObject* __WorldContext, bool* TagFound, struct FGameplayTag* FirstMatchingTag);
	static void Reattach_or_Create_MID(class UPrimitiveComponent* Mesh, class UMaterialInstanceDynamic*& Target_MID, int32 MatId, class UObject* __WorldContext);
	static void Refresh_Team_Change_Binding(class UFortMinigameLogicComponent* Minigame_Logic, bool Unbind, const TDelegate<void()>& event, class UObject* __WorldContext);
	static void Simple_Apply_Gameplay_Effect_to_Actor(class UClass* GameplayEffect, class AActor* Actor, class UObject* __WorldContext);
	static void TeamToIndex(uint8 Team, class UObject* __WorldContext, int32* Index_0);
	static void Update_Team_Color(class UFortMinigameLogicComponent* Minigame_Logic, class UPrimitiveComponent* Mesh, int32 Team, class UObject* __WorldContext);
	static void Wrapping_Modulo(int32 A, int32 B, class UObject* __WorldContext, int32* Out);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Creative_CommonDeviceFunctionLibrary_C">();
	}
	static class UCreative_CommonDeviceFunctionLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCreative_CommonDeviceFunctionLibrary_C>();
	}
};
static_assert(alignof(UCreative_CommonDeviceFunctionLibrary_C) == 0x000008, "Wrong alignment on UCreative_CommonDeviceFunctionLibrary_C");
static_assert(sizeof(UCreative_CommonDeviceFunctionLibrary_C) == 0x000028, "Wrong size on UCreative_CommonDeviceFunctionLibrary_C");

}

