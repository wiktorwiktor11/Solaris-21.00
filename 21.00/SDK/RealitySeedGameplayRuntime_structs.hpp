#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RealitySeedGameplayRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "AIModule_structs.hpp"


namespace SDK
{

// ScriptStruct RealitySeedGameplayRuntime.OwnedRealitySaplingData
// 0x0050 (0x0050 - 0x0000)
struct FOwnedRealitySaplingData final
{
public:
	class ABuildingRealitySapling*                Sapling;                                           // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasSaplingOnAuthority;                            // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0xF];                                       // 0x0021(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 FruitStates;                                       // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         NurturingLevel;                                    // 0x0040(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedsWeeding;                                     // 0x0041(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInGhostState;                                     // 0x0042(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x5];                                       // 0x0043(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              NextWeedingTime;                                   // 0x0048(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOwnedRealitySaplingData) == 0x000008, "Wrong alignment on FOwnedRealitySaplingData");
static_assert(sizeof(FOwnedRealitySaplingData) == 0x000050, "Wrong size on FOwnedRealitySaplingData");
static_assert(offsetof(FOwnedRealitySaplingData, Sapling) == 0x000000, "Member 'FOwnedRealitySaplingData::Sapling' has a wrong offset!");
static_assert(offsetof(FOwnedRealitySaplingData, Location) == 0x000008, "Member 'FOwnedRealitySaplingData::Location' has a wrong offset!");
static_assert(offsetof(FOwnedRealitySaplingData, bHasSaplingOnAuthority) == 0x000020, "Member 'FOwnedRealitySaplingData::bHasSaplingOnAuthority' has a wrong offset!");
static_assert(offsetof(FOwnedRealitySaplingData, FruitStates) == 0x000030, "Member 'FOwnedRealitySaplingData::FruitStates' has a wrong offset!");
static_assert(offsetof(FOwnedRealitySaplingData, NurturingLevel) == 0x000040, "Member 'FOwnedRealitySaplingData::NurturingLevel' has a wrong offset!");
static_assert(offsetof(FOwnedRealitySaplingData, bNeedsWeeding) == 0x000041, "Member 'FOwnedRealitySaplingData::bNeedsWeeding' has a wrong offset!");
static_assert(offsetof(FOwnedRealitySaplingData, bInGhostState) == 0x000042, "Member 'FOwnedRealitySaplingData::bInGhostState' has a wrong offset!");
static_assert(offsetof(FOwnedRealitySaplingData, NextWeedingTime) == 0x000048, "Member 'FOwnedRealitySaplingData::NextWeedingTime' has a wrong offset!");

// ScriptStruct RealitySeedGameplayRuntime.RealitySaplingEnvQueryParam
// 0x0038 (0x0038 - 0x0000)
struct FRealitySaplingEnvQueryParam final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Value;                                             // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EAIParamType                                  Type;                                              // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRealitySaplingEnvQueryParam) == 0x000008, "Wrong alignment on FRealitySaplingEnvQueryParam");
static_assert(sizeof(FRealitySaplingEnvQueryParam) == 0x000038, "Wrong size on FRealitySaplingEnvQueryParam");
static_assert(offsetof(FRealitySaplingEnvQueryParam, Name) == 0x000000, "Member 'FRealitySaplingEnvQueryParam::Name' has a wrong offset!");
static_assert(offsetof(FRealitySaplingEnvQueryParam, Value) == 0x000008, "Member 'FRealitySaplingEnvQueryParam::Value' has a wrong offset!");
static_assert(offsetof(FRealitySaplingEnvQueryParam, Type) == 0x000030, "Member 'FRealitySaplingEnvQueryParam::Type' has a wrong offset!");

// ScriptStruct RealitySeedGameplayRuntime.RealitySaplingPersistentData
// 0x0060 (0x0060 - 0x0000)
struct FRealitySaplingPersistentData final
{
public:
	class AFortPlayerController*                  OwningPlayerController;                            // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0020(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         NurturingLevel;                                    // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaturityLevel;                                     // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              PlantingTime;                                      // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              LastWeedingTime;                                   // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 FruitStates;                                       // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRealitySaplingPersistentData) == 0x000008, "Wrong alignment on FRealitySaplingPersistentData");
static_assert(sizeof(FRealitySaplingPersistentData) == 0x000060, "Wrong size on FRealitySaplingPersistentData");
static_assert(offsetof(FRealitySaplingPersistentData, OwningPlayerController) == 0x000000, "Member 'FRealitySaplingPersistentData::OwningPlayerController' has a wrong offset!");
static_assert(offsetof(FRealitySaplingPersistentData, Location) == 0x000008, "Member 'FRealitySaplingPersistentData::Location' has a wrong offset!");
static_assert(offsetof(FRealitySaplingPersistentData, Rotation) == 0x000020, "Member 'FRealitySaplingPersistentData::Rotation' has a wrong offset!");
static_assert(offsetof(FRealitySaplingPersistentData, NurturingLevel) == 0x000038, "Member 'FRealitySaplingPersistentData::NurturingLevel' has a wrong offset!");
static_assert(offsetof(FRealitySaplingPersistentData, MaturityLevel) == 0x00003C, "Member 'FRealitySaplingPersistentData::MaturityLevel' has a wrong offset!");
static_assert(offsetof(FRealitySaplingPersistentData, PlantingTime) == 0x000040, "Member 'FRealitySaplingPersistentData::PlantingTime' has a wrong offset!");
static_assert(offsetof(FRealitySaplingPersistentData, LastWeedingTime) == 0x000048, "Member 'FRealitySaplingPersistentData::LastWeedingTime' has a wrong offset!");
static_assert(offsetof(FRealitySaplingPersistentData, FruitStates) == 0x000050, "Member 'FRealitySaplingPersistentData::FruitStates' has a wrong offset!");

}

