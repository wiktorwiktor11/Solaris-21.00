#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RaceTrack

#include "Basic.hpp"

#include "BP_RaceTrack_classes.hpp"
#include "BP_RaceTrack_parameters.hpp"


namespace SDK
{

// Function BP_RaceTrack.BP_RaceTrack_C.BndEvt__EnableRaceVolume_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_RaceTrack_C::BndEvt__EnableRaceVolume_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceTrack_C", "BndEvt__EnableRaceVolume_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature");

	Params::BP_RaceTrack_C_BndEvt__EnableRaceVolume_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceTrack.BP_RaceTrack_C.BndEvt__EnableRaceVolume_K2Node_ComponentBoundEvent_5_ComponentEndOverlapSignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RaceTrack_C::BndEvt__EnableRaceVolume_K2Node_ComponentBoundEvent_5_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceTrack_C", "BndEvt__EnableRaceVolume_K2Node_ComponentBoundEvent_5_ComponentEndOverlapSignature__DelegateSignature");

	Params::BP_RaceTrack_C_BndEvt__EnableRaceVolume_K2Node_ComponentBoundEvent_5_ComponentEndOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceTrack.BP_RaceTrack_C.CheckpointUpdated
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_RaceTrack_C::CheckpointUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceTrack_C", "CheckpointUpdated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceTrack.BP_RaceTrack_C.CountdownAnim__FinishedFunc
// (BlueprintEvent)

void ABP_RaceTrack_C::CountdownAnim__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceTrack_C", "CountdownAnim__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceTrack.BP_RaceTrack_C.CountdownAnim__SecondsEvent__EventFunc
// (BlueprintEvent)

void ABP_RaceTrack_C::CountdownAnim__SecondsEvent__EventFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceTrack_C", "CountdownAnim__SecondsEvent__EventFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceTrack.BP_RaceTrack_C.CountdownAnim__UpdateFunc
// (BlueprintEvent)

void ABP_RaceTrack_C::CountdownAnim__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceTrack_C", "CountdownAnim__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceTrack.BP_RaceTrack_C.ExecuteUbergraph_BP_RaceTrack
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RaceTrack_C::ExecuteUbergraph_BP_RaceTrack(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceTrack_C", "ExecuteUbergraph_BP_RaceTrack");

	Params::BP_RaceTrack_C_ExecuteUbergraph_BP_RaceTrack Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceTrack.BP_RaceTrack_C.FalseStart
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AFortPlayerPawn*                  PlayerFalseStart                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RaceTrack_C::FalseStart(class AFortPlayerPawn* PlayerFalseStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceTrack_C", "FalseStart");

	Params::BP_RaceTrack_C_FalseStart Parms{};

	Parms.PlayerFalseStart = PlayerFalseStart;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceTrack.BP_RaceTrack_C.OnRep_RN-1stPlaceTime
// (BlueprintCallable, BlueprintEvent)

void ABP_RaceTrack_C::OnRep_RN_1stPlaceTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceTrack_C", "OnRep_RN-1stPlaceTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceTrack.BP_RaceTrack_C.OnRep_RN-2ndPlaceTime
// (BlueprintCallable, BlueprintEvent)

void ABP_RaceTrack_C::OnRep_RN_2ndPlaceTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceTrack_C", "OnRep_RN-2ndPlaceTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceTrack.BP_RaceTrack_C.OnRep_RN-3rdPlaceTime
// (BlueprintCallable, BlueprintEvent)

void ABP_RaceTrack_C::OnRep_RN_3rdPlaceTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceTrack_C", "OnRep_RN-3rdPlaceTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceTrack.BP_RaceTrack_C.OnRep_RN-CountdownTimer
// (BlueprintCallable, BlueprintEvent)

void ABP_RaceTrack_C::OnRep_RN_CountdownTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceTrack_C", "OnRep_RN-CountdownTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceTrack.BP_RaceTrack_C.OnRep_RN-SmallScreenLapTime
// (BlueprintCallable, BlueprintEvent)

void ABP_RaceTrack_C::OnRep_RN_SmallScreenLapTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceTrack_C", "OnRep_RN-SmallScreenLapTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceTrack.BP_RaceTrack_C.OnRep_RN-TimerFlag
// (BlueprintCallable, BlueprintEvent)

void ABP_RaceTrack_C::OnRep_RN_TimerFlag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceTrack_C", "OnRep_RN-TimerFlag");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceTrack.BP_RaceTrack_C.OnRep_ShowSmallScreenLapTime
// (BlueprintCallable, BlueprintEvent)

void ABP_RaceTrack_C::OnRep_ShowSmallScreenLapTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceTrack_C", "OnRep_ShowSmallScreenLapTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceTrack.BP_RaceTrack_C.PrepareToRace
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_RaceTrack_C::PrepareToRace()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceTrack_C", "PrepareToRace");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceTrack.BP_RaceTrack_C.RaceCountdown__EverySecondEvent__EventFunc
// (BlueprintEvent)

void ABP_RaceTrack_C::RaceCountdown__EverySecondEvent__EventFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceTrack_C", "RaceCountdown__EverySecondEvent__EventFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceTrack.BP_RaceTrack_C.RaceCountdown__FinishedFunc
// (BlueprintEvent)

void ABP_RaceTrack_C::RaceCountdown__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceTrack_C", "RaceCountdown__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceTrack.BP_RaceTrack_C.RaceCountdown__Go__EventFunc
// (BlueprintEvent)

void ABP_RaceTrack_C::RaceCountdown__Go__EventFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceTrack_C", "RaceCountdown__Go__EventFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceTrack.BP_RaceTrack_C.RaceCountdown__UpdateFunc
// (BlueprintEvent)

void ABP_RaceTrack_C::RaceCountdown__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceTrack_C", "RaceCountdown__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceTrack.BP_RaceTrack_C.RacerFinished
// (Net, NetMulticast, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Placement_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TotalTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class AFortPlayerPawn*>          PlayersWhoFinished                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_RaceTrack_C::RacerFinished(int32 Placement_0, float TotalTime, const TArray<class AFortPlayerPawn*>& PlayersWhoFinished)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceTrack_C", "RacerFinished");

	Params::BP_RaceTrack_C_RacerFinished Parms{};

	Parms.Placement_0 = Placement_0;
	Parms.TotalTime = TotalTime;
	Parms.PlayersWhoFinished = std::move(PlayersWhoFinished);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceTrack.BP_RaceTrack_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_RaceTrack_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceTrack_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceTrack.BP_RaceTrack_C.ResetMaterialSettings
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RaceTrack_C::ResetMaterialSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceTrack_C", "ResetMaterialSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceTrack.BP_RaceTrack_C.ResetRace
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_RaceTrack_C::ResetRace()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceTrack_C", "ResetRace");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceTrack.BP_RaceTrack_C.SetScoreboardWithRacerTime
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   TrackTimeInput                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RacerIndexInput                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RaceTrack_C::SetScoreboardWithRacerTime(float TrackTimeInput, int32 RacerIndexInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceTrack_C", "SetScoreboardWithRacerTime");

	Params::BP_RaceTrack_C_SetScoreboardWithRacerTime Parms{};

	Parms.TrackTimeInput = TrackTimeInput;
	Parms.RacerIndexInput = RacerIndexInput;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RaceTrack.BP_RaceTrack_C.TL-FalseStart__FinishedFunc
// (BlueprintEvent)

void ABP_RaceTrack_C::TL_FalseStart__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceTrack_C", "TL-FalseStart__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceTrack.BP_RaceTrack_C.TL-FalseStart__UpdateFunc
// (BlueprintEvent)

void ABP_RaceTrack_C::TL_FalseStart__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceTrack_C", "TL-FalseStart__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceTrack.BP_RaceTrack_C.TL-PreCountdown__FinishedFunc
// (BlueprintEvent)

void ABP_RaceTrack_C::TL_PreCountdown__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceTrack_C", "TL-PreCountdown__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceTrack.BP_RaceTrack_C.TL-PreCountdown__UpdateFunc
// (BlueprintEvent)

void ABP_RaceTrack_C::TL_PreCountdown__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceTrack_C", "TL-PreCountdown__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RaceTrack.BP_RaceTrack_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_RaceTrack_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RaceTrack_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}

}

