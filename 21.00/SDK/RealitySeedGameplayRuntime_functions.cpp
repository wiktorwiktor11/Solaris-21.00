#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RealitySeedGameplayRuntime

#include "Basic.hpp"

#include "RealitySeedGameplayRuntime_classes.hpp"
#include "RealitySeedGameplayRuntime_parameters.hpp"


namespace SDK
{

// Function RealitySeedGameplayRuntime.BuildingRealitySapling.EnterGhostState
// (BlueprintAuthorityOnly, Event, Public, BlueprintCallable, BlueprintEvent)

void ABuildingRealitySapling::EnterGhostState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingRealitySapling", "EnterGhostState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RealitySeedGameplayRuntime.BuildingRealitySapling.ForceSpawnWeeds
// (BlueprintAuthorityOnly, Event, Public, BlueprintCallable, BlueprintEvent)

void ABuildingRealitySapling::ForceSpawnWeeds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingRealitySapling", "ForceSpawnWeeds");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RealitySeedGameplayRuntime.BuildingRealitySapling.OnSaplingRegistered
// (BlueprintAuthorityOnly, Event, Public, BlueprintEvent)

void ABuildingRealitySapling::OnSaplingRegistered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingRealitySapling", "OnSaplingRegistered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RealitySeedGameplayRuntime.BuildingRealitySapling.OverrideMarkerDisplayInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMarkedActorDisplayInfo          NewDisplayInfo                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ABuildingRealitySapling::OverrideMarkerDisplayInfo(const struct FMarkedActorDisplayInfo& NewDisplayInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingRealitySapling", "OverrideMarkerDisplayInfo");

	Params::BuildingRealitySapling_OverrideMarkerDisplayInfo Parms{};

	Parms.NewDisplayInfo = std::move(NewDisplayInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RealitySeedGameplayRuntime.BuildingRealitySapling.SetShouldEnterGhostStateOnDeath
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bShouldEnterGhostState                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABuildingRealitySapling::SetShouldEnterGhostStateOnDeath(const bool bShouldEnterGhostState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingRealitySapling", "SetShouldEnterGhostStateOnDeath");

	Params::BuildingRealitySapling_SetShouldEnterGhostStateOnDeath Parms{};

	Parms.bShouldEnterGhostState = bShouldEnterGhostState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RealitySeedGameplayRuntime.BuildingRealitySapling.GetEventManagerCalendarTime
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FDateTime                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FDateTime ABuildingRealitySapling::GetEventManagerCalendarTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingRealitySapling", "GetEventManagerCalendarTime");

	Params::BuildingRealitySapling_GetEventManagerCalendarTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RealitySeedGameplayRuntime.BuildingRealitySapling.WillEnterGhostStateOnDeath
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABuildingRealitySapling::WillEnterGhostStateOnDeath() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuildingRealitySapling", "WillEnterGhostStateOnDeath");

	Params::BuildingRealitySapling_WillEnterGhostStateOnDeath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RealitySeedGameplayRuntime.FortCheatManager_RealitySeed.RealitySaplingDestroyOwned
// (Final, BlueprintAuthorityOnly, Exec, Native, Private, Const)

void UFortCheatManager_RealitySeed::RealitySaplingDestroyOwned() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_RealitySeed", "RealitySaplingDestroyOwned");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RealitySeedGameplayRuntime.FortCheatManager_RealitySeed.RealitySaplingLevelUpAndRespawn
// (Final, BlueprintAuthorityOnly, Exec, Native, Private, Const)

void UFortCheatManager_RealitySeed::RealitySaplingLevelUpAndRespawn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_RealitySeed", "RealitySaplingLevelUpAndRespawn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RealitySeedGameplayRuntime.FortCheatManager_RealitySeed.RealitySaplingLogSaplingData
// (Final, BlueprintAuthorityOnly, Exec, Native, Private, Const)
// Parameters:
// bool                                    bOnlyForCallingPlayer                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_RealitySeed::RealitySaplingLogSaplingData(const bool bOnlyForCallingPlayer) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_RealitySeed", "RealitySaplingLogSaplingData");

	Params::FortCheatManager_RealitySeed_RealitySaplingLogSaplingData Parms{};

	Parms.bOnlyForCallingPlayer = bOnlyForCallingPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RealitySeedGameplayRuntime.FortCheatManager_RealitySeed.RealitySaplingQueueToSpawnAtLocation
// (Final, BlueprintAuthorityOnly, Exec, Native, Private, Const)
// Parameters:
// float                                   X                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Z                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaturityLevelOverride                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NurturingLevelOverride                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSetOwningController                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_RealitySeed::RealitySaplingQueueToSpawnAtLocation(const float X, const float Y, const float Z, const int32 MaturityLevelOverride, const int32 NurturingLevelOverride, const bool bSetOwningController) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_RealitySeed", "RealitySaplingQueueToSpawnAtLocation");

	Params::FortCheatManager_RealitySeed_RealitySaplingQueueToSpawnAtLocation Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;
	Parms.MaturityLevelOverride = MaturityLevelOverride;
	Parms.NurturingLevelOverride = NurturingLevelOverride;
	Parms.bSetOwningController = bSetOwningController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RealitySeedGameplayRuntime.FortCheatManager_RealitySeed.RealitySaplingQueueToSpawnAtPlayerLocation
// (Final, BlueprintAuthorityOnly, Exec, Native, Private, Const)
// Parameters:
// int32                                   MaturityLevelOverride                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NurturingLevelOverride                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSetOwningController                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_RealitySeed::RealitySaplingQueueToSpawnAtPlayerLocation(const int32 MaturityLevelOverride, const int32 NurturingLevelOverride, const bool bSetOwningController) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_RealitySeed", "RealitySaplingQueueToSpawnAtPlayerLocation");

	Params::FortCheatManager_RealitySeed_RealitySaplingQueueToSpawnAtPlayerLocation Parms{};

	Parms.MaturityLevelOverride = MaturityLevelOverride;
	Parms.NurturingLevelOverride = NurturingLevelOverride;
	Parms.bSetOwningController = bSetOwningController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RealitySeedGameplayRuntime.FortCheatManager_RealitySeed.RealitySaplingSendToGhostState
// (Final, BlueprintAuthorityOnly, Exec, Native, Private, Const)
// Parameters:
// bool                                    bOnlyForCallingPlayer                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_RealitySeed::RealitySaplingSendToGhostState(const bool bOnlyForCallingPlayer) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_RealitySeed", "RealitySaplingSendToGhostState");

	Params::FortCheatManager_RealitySeed_RealitySaplingSendToGhostState Parms{};

	Parms.bOnlyForCallingPlayer = bOnlyForCallingPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RealitySeedGameplayRuntime.FortCheatManager_RealitySeed.RealitySaplingSpawnAtLocation
// (Final, BlueprintAuthorityOnly, Exec, Native, Private, Const)
// Parameters:
// float                                   X                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Z                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumSaplings                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaturityLevelOverride                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NurturingLevelOverride                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   GridHalfSizeOverride                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   GridSpaceBetweenOverride                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSetOwningController                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_RealitySeed::RealitySaplingSpawnAtLocation(const float X, const float Y, const float Z, const int32 NumSaplings, const int32 MaturityLevelOverride, const int32 NurturingLevelOverride, const float GridHalfSizeOverride, const float GridSpaceBetweenOverride, const bool bSetOwningController) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_RealitySeed", "RealitySaplingSpawnAtLocation");

	Params::FortCheatManager_RealitySeed_RealitySaplingSpawnAtLocation Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;
	Parms.NumSaplings = NumSaplings;
	Parms.MaturityLevelOverride = MaturityLevelOverride;
	Parms.NurturingLevelOverride = NurturingLevelOverride;
	Parms.GridHalfSizeOverride = GridHalfSizeOverride;
	Parms.GridSpaceBetweenOverride = GridSpaceBetweenOverride;
	Parms.bSetOwningController = bSetOwningController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RealitySeedGameplayRuntime.FortCheatManager_RealitySeed.RealitySaplingSpawnAtPlayerLocation
// (Final, BlueprintAuthorityOnly, Exec, Native, Private, Const)
// Parameters:
// int32                                   NumSaplings                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaturityLevelOverride                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NurturingLevelOverride                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   GridHalfSizeOverride                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   GridSpaceBetweenOverride                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSetOwningController                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_RealitySeed::RealitySaplingSpawnAtPlayerLocation(const int32 NumSaplings, const int32 MaturityLevelOverride, const int32 NurturingLevelOverride, const float GridHalfSizeOverride, const float GridSpaceBetweenOverride, const bool bSetOwningController) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_RealitySeed", "RealitySaplingSpawnAtPlayerLocation");

	Params::FortCheatManager_RealitySeed_RealitySaplingSpawnAtPlayerLocation Parms{};

	Parms.NumSaplings = NumSaplings;
	Parms.MaturityLevelOverride = MaturityLevelOverride;
	Parms.NurturingLevelOverride = NurturingLevelOverride;
	Parms.GridHalfSizeOverride = GridHalfSizeOverride;
	Parms.GridSpaceBetweenOverride = GridSpaceBetweenOverride;
	Parms.bSetOwningController = bSetOwningController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RealitySeedGameplayRuntime.FortCheatManager_RealitySeed.RealitySaplingSpawnInRadiusAtLocation
// (Final, BlueprintAuthorityOnly, Exec, Native, Private, Const)
// Parameters:
// float                                   X                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Z                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumSaplings                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaturityLevelOverride                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NurturingLevelOverride                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   GridHalfSizeOverride                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   GridSpaceBetweenOverride                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSetOwningController                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_RealitySeed::RealitySaplingSpawnInRadiusAtLocation(const float X, const float Y, const float Z, const float Radius, const int32 NumSaplings, const int32 MaturityLevelOverride, const int32 NurturingLevelOverride, const float GridHalfSizeOverride, const float GridSpaceBetweenOverride, const bool bSetOwningController) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_RealitySeed", "RealitySaplingSpawnInRadiusAtLocation");

	Params::FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtLocation Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;
	Parms.Radius = Radius;
	Parms.NumSaplings = NumSaplings;
	Parms.MaturityLevelOverride = MaturityLevelOverride;
	Parms.NurturingLevelOverride = NurturingLevelOverride;
	Parms.GridHalfSizeOverride = GridHalfSizeOverride;
	Parms.GridSpaceBetweenOverride = GridSpaceBetweenOverride;
	Parms.bSetOwningController = bSetOwningController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RealitySeedGameplayRuntime.FortCheatManager_RealitySeed.RealitySaplingSpawnInRadiusAtPlayerLocation
// (Final, BlueprintAuthorityOnly, Exec, Native, Private, Const)
// Parameters:
// float                                   Radius                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumSaplings                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaturityLevelOverride                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NurturingLevelOverride                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   GridHalfSizeOverride                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   GridSpaceBetweenOverride                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSetOwningController                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_RealitySeed::RealitySaplingSpawnInRadiusAtPlayerLocation(const float Radius, const int32 NumSaplings, const int32 MaturityLevelOverride, const int32 NurturingLevelOverride, const float GridHalfSizeOverride, const float GridSpaceBetweenOverride, const bool bSetOwningController) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_RealitySeed", "RealitySaplingSpawnInRadiusAtPlayerLocation");

	Params::FortCheatManager_RealitySeed_RealitySaplingSpawnInRadiusAtPlayerLocation Parms{};

	Parms.Radius = Radius;
	Parms.NumSaplings = NumSaplings;
	Parms.MaturityLevelOverride = MaturityLevelOverride;
	Parms.NurturingLevelOverride = NurturingLevelOverride;
	Parms.GridHalfSizeOverride = GridHalfSizeOverride;
	Parms.GridSpaceBetweenOverride = GridSpaceBetweenOverride;
	Parms.bSetOwningController = bSetOwningController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RealitySeedGameplayRuntime.FortCheatManager_RealitySeed.RealitySaplingSpawnOwnedAtPlayerLocation
// (Final, BlueprintAuthorityOnly, Exec, Native, Private, Const)
// Parameters:
// int32                                   MaturityLevelOverride                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NurturingLevelOverride                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_RealitySeed::RealitySaplingSpawnOwnedAtPlayerLocation(const int32 MaturityLevelOverride, const int32 NurturingLevelOverride) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_RealitySeed", "RealitySaplingSpawnOwnedAtPlayerLocation");

	Params::FortCheatManager_RealitySeed_RealitySaplingSpawnOwnedAtPlayerLocation Parms{};

	Parms.MaturityLevelOverride = MaturityLevelOverride;
	Parms.NurturingLevelOverride = NurturingLevelOverride;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RealitySeedGameplayRuntime.FortCheatManager_RealitySeed.RealitySaplingSpawnQueued
// (Final, BlueprintAuthorityOnly, Exec, Native, Private, Const)

void UFortCheatManager_RealitySeed::RealitySaplingSpawnQueued() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_RealitySeed", "RealitySaplingSpawnQueued");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RealitySeedGameplayRuntime.FortCheatManager_RealitySeed.RealitySaplingSpawnWeeds
// (Final, BlueprintAuthorityOnly, Exec, Native, Private, Const)
// Parameters:
// bool                                    bOnlyForCallingPlayer                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_RealitySeed::RealitySaplingSpawnWeeds(const bool bOnlyForCallingPlayer) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_RealitySeed", "RealitySaplingSpawnWeeds");

	Params::FortCheatManager_RealitySeed_RealitySaplingSpawnWeeds Parms{};

	Parms.bOnlyForCallingPlayer = bOnlyForCallingPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RealitySeedGameplayRuntime.FortControllerComponent_RealitySapling.GetMaxSaplingsPerPlayer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UFortControllerComponent_RealitySapling::GetMaxSaplingsPerPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortControllerComponent_RealitySapling", "GetMaxSaplingsPerPlayer");

	Params::FortControllerComponent_RealitySapling_GetMaxSaplingsPerPlayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RealitySeedGameplayRuntime.FortControllerComponent_RealitySapling.CacheAccountItemData
// (Final, Native, Private)

void UFortControllerComponent_RealitySapling::CacheAccountItemData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_RealitySapling", "CacheAccountItemData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RealitySeedGameplayRuntime.FortControllerComponent_RealitySapling.ClientRegisterPlantedSapling
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// bool                                    bIsNewSapling                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortControllerComponent_RealitySapling::ClientRegisterPlantedSapling(bool bIsNewSapling)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_RealitySapling", "ClientRegisterPlantedSapling");

	Params::FortControllerComponent_RealitySapling_ClientRegisterPlantedSapling Parms{};

	Parms.bIsNewSapling = bIsNewSapling;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RealitySeedGameplayRuntime.FortControllerComponent_RealitySapling.HandleSaplingDestroyedDirectly
// (Final, Native, Private)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortControllerComponent_RealitySapling::HandleSaplingDestroyedDirectly(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_RealitySapling", "HandleSaplingDestroyedDirectly");

	Params::FortControllerComponent_RealitySapling_HandleSaplingDestroyedDirectly Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RealitySeedGameplayRuntime.FortControllerComponent_RealitySapling.OnAthenaProfileInitialized
// (Final, Native, Private)

void UFortControllerComponent_RealitySapling::OnAthenaProfileInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_RealitySapling", "OnAthenaProfileInitialized");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RealitySeedGameplayRuntime.FortControllerComponent_RealitySapling.OnRep_OwnedSaplings
// (Final, Native, Public)

void UFortControllerComponent_RealitySapling::OnRep_OwnedSaplings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_RealitySapling", "OnRep_OwnedSaplings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function RealitySeedGameplayRuntime.FortControllerComponent_RealitySapling.RegisterPlantedSapling
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class ABuildingRealitySapling*          RealitySapling                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsNewSapling                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortControllerComponent_RealitySapling::RegisterPlantedSapling(class ABuildingRealitySapling* RealitySapling, const bool bIsNewSapling)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_RealitySapling", "RegisterPlantedSapling");

	Params::FortControllerComponent_RealitySapling_RegisterPlantedSapling Parms{};

	Parms.RealitySapling = RealitySapling;
	Parms.bIsNewSapling = bIsNewSapling;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RealitySeedGameplayRuntime.FortControllerComponent_RealitySapling.SetFirstOwnedSaplingData
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// struct FOwnedRealitySaplingData         InSaplingData                                          (Parm, NativeAccessSpecifierPublic)

void UFortControllerComponent_RealitySapling::SetFirstOwnedSaplingData(const struct FOwnedRealitySaplingData& InSaplingData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_RealitySapling", "SetFirstOwnedSaplingData");

	Params::FortControllerComponent_RealitySapling_SetFirstOwnedSaplingData Parms{};

	Parms.InSaplingData = std::move(InSaplingData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RealitySeedGameplayRuntime.FortControllerComponent_RealitySapling.GetFirstOwnedSapling
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABuildingRealitySapling*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABuildingRealitySapling* UFortControllerComponent_RealitySapling::GetFirstOwnedSapling() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_RealitySapling", "GetFirstOwnedSapling");

	Params::FortControllerComponent_RealitySapling_GetFirstOwnedSapling Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RealitySeedGameplayRuntime.FortControllerComponent_RealitySapling.GetFirstOwnedSaplingData
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FOwnedRealitySaplingData         OutSaplingData                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortControllerComponent_RealitySapling::GetFirstOwnedSaplingData(struct FOwnedRealitySaplingData* OutSaplingData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_RealitySapling", "GetFirstOwnedSaplingData");

	Params::FortControllerComponent_RealitySapling_GetFirstOwnedSaplingData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSaplingData != nullptr)
		*OutSaplingData = std::move(Parms.OutSaplingData);

	return Parms.ReturnValue;
}


// Function RealitySeedGameplayRuntime.FortControllerComponent_RealitySapling.GetOwnedSaplings
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FOwnedRealitySaplingData> ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FOwnedRealitySaplingData> UFortControllerComponent_RealitySapling::GetOwnedSaplings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_RealitySapling", "GetOwnedSaplings");

	Params::FortControllerComponent_RealitySapling_GetOwnedSaplings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RealitySeedGameplayRuntime.FortControllerComponent_RealitySapling.HasActiveSapling
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortControllerComponent_RealitySapling::HasActiveSapling() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_RealitySapling", "HasActiveSapling");

	Params::FortControllerComponent_RealitySapling_HasActiveSapling Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RealitySeedGameplayRuntime.FortControllerComponent_RealitySapling.HasPersistentSapling
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortControllerComponent_RealitySapling::HasPersistentSapling() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_RealitySapling", "HasPersistentSapling");

	Params::FortControllerComponent_RealitySapling_HasPersistentSapling Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RealitySeedGameplayRuntime.FortGameStateComponent_RealitySapling.HandleCurrentPlaylistLoaded
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class FName                             PlaylistName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            PlaylistContextTags                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortGameStateComponent_RealitySapling::HandleCurrentPlaylistLoaded(class FName PlaylistName, const struct FGameplayTagContainer& PlaylistContextTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGameStateComponent_RealitySapling", "HandleCurrentPlaylistLoaded");

	Params::FortGameStateComponent_RealitySapling_HandleCurrentPlaylistLoaded Parms{};

	Parms.PlaylistName = PlaylistName;
	Parms.PlaylistContextTags = std::move(PlaylistContextTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RealitySeedGameplayRuntime.FortGameStateComponent_RealitySapling.HandleGamePhaseStepChanged
// (Final, Native, Protected, HasOutParams)
// Parameters:
// TScriptInterface<class IFortSafeZoneInterface>SafeZoneInterface                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAthenaGamePhaseStep                    GamePhaseStep                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortGameStateComponent_RealitySapling::HandleGamePhaseStepChanged(const TScriptInterface<class IFortSafeZoneInterface>& SafeZoneInterface, const EAthenaGamePhaseStep GamePhaseStep)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGameStateComponent_RealitySapling", "HandleGamePhaseStepChanged");

	Params::FortGameStateComponent_RealitySapling_HandleGamePhaseStepChanged Parms{};

	Parms.SafeZoneInterface = SafeZoneInterface;
	Parms.GamePhaseStep = GamePhaseStep;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RealitySeedGameplayRuntime.FortGameStateComponent_RealitySapling.GetNumSaplingsInRadius
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UFortGameStateComponent_RealitySapling::GetNumSaplingsInRadius(const struct FVector& Location, const float Radius) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGameStateComponent_RealitySapling", "GetNumSaplingsInRadius");

	Params::FortGameStateComponent_RealitySapling_GetNumSaplingsInRadius Parms{};

	Parms.Location = std::move(Location);
	Parms.Radius = Radius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RealitySeedGameplayRuntime.FortGameStateComponent_RealitySapling.GetSaplingSpawnEnvQueryActorsToAvoidByBounds
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class AActor*>             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class AActor*> UFortGameStateComponent_RealitySapling::GetSaplingSpawnEnvQueryActorsToAvoidByBounds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGameStateComponent_RealitySapling", "GetSaplingSpawnEnvQueryActorsToAvoidByBounds");

	Params::FortGameStateComponent_RealitySapling_GetSaplingSpawnEnvQueryActorsToAvoidByBounds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

