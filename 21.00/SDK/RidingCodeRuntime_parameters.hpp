#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RidingCodeRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "RidingCodeRuntime_structs.hpp"
#include "GameplayTags_0_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK::Params
{

// Function RidingCodeRuntime.RidableComponent.CheatSetStaminaPercent
// 0x0004 (0x0004 - 0x0000)
struct RidableComponent_CheatSetStaminaPercent final
{
public:
	float                                         StaminaPercent;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RidableComponent_CheatSetStaminaPercent) == 0x000004, "Wrong alignment on RidableComponent_CheatSetStaminaPercent");
static_assert(sizeof(RidableComponent_CheatSetStaminaPercent) == 0x000004, "Wrong size on RidableComponent_CheatSetStaminaPercent");
static_assert(offsetof(RidableComponent_CheatSetStaminaPercent, StaminaPercent) == 0x000000, "Member 'RidableComponent_CheatSetStaminaPercent::StaminaPercent' has a wrong offset!");

// Function RidingCodeRuntime.RidableComponent.HandleRiderStartedRiding
// 0x0008 (0x0008 - 0x0000)
struct RidableComponent_HandleRiderStartedRiding final
{
public:
	class URiderComponent*                        Rider;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RidableComponent_HandleRiderStartedRiding) == 0x000008, "Wrong alignment on RidableComponent_HandleRiderStartedRiding");
static_assert(sizeof(RidableComponent_HandleRiderStartedRiding) == 0x000008, "Wrong size on RidableComponent_HandleRiderStartedRiding");
static_assert(offsetof(RidableComponent_HandleRiderStartedRiding, Rider) == 0x000000, "Member 'RidableComponent_HandleRiderStartedRiding::Rider' has a wrong offset!");

// Function RidingCodeRuntime.RidableComponent.HandleRiderStoppedRiding
// 0x0008 (0x0008 - 0x0000)
struct RidableComponent_HandleRiderStoppedRiding final
{
public:
	class URiderComponent*                        Rider;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RidableComponent_HandleRiderStoppedRiding) == 0x000008, "Wrong alignment on RidableComponent_HandleRiderStoppedRiding");
static_assert(sizeof(RidableComponent_HandleRiderStoppedRiding) == 0x000008, "Wrong size on RidableComponent_HandleRiderStoppedRiding");
static_assert(offsetof(RidableComponent_HandleRiderStoppedRiding, Rider) == 0x000000, "Member 'RidableComponent_HandleRiderStoppedRiding::Rider' has a wrong offset!");

// Function RidingCodeRuntime.RidableComponent.OnRiderStartedEmote
// 0x0010 (0x0010 - 0x0000)
struct RidableComponent_OnRiderStartedEmote final
{
public:
	class UFortItemDefinition*                    MontageItemDef;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPawn*                              PawnEmoting;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RidableComponent_OnRiderStartedEmote) == 0x000008, "Wrong alignment on RidableComponent_OnRiderStartedEmote");
static_assert(sizeof(RidableComponent_OnRiderStartedEmote) == 0x000010, "Wrong size on RidableComponent_OnRiderStartedEmote");
static_assert(offsetof(RidableComponent_OnRiderStartedEmote, MontageItemDef) == 0x000000, "Member 'RidableComponent_OnRiderStartedEmote::MontageItemDef' has a wrong offset!");
static_assert(offsetof(RidableComponent_OnRiderStartedEmote, PawnEmoting) == 0x000008, "Member 'RidableComponent_OnRiderStartedEmote::PawnEmoting' has a wrong offset!");

// Function RidingCodeRuntime.RidableComponent.OnRiderStoppedEmote
// 0x0010 (0x0010 - 0x0000)
struct RidableComponent_OnRiderStoppedEmote final
{
public:
	class UFortItemDefinition*                    MontageItemDef;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPawn*                              PawnEmoting;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RidableComponent_OnRiderStoppedEmote) == 0x000008, "Wrong alignment on RidableComponent_OnRiderStoppedEmote");
static_assert(sizeof(RidableComponent_OnRiderStoppedEmote) == 0x000010, "Wrong size on RidableComponent_OnRiderStoppedEmote");
static_assert(offsetof(RidableComponent_OnRiderStoppedEmote, MontageItemDef) == 0x000000, "Member 'RidableComponent_OnRiderStoppedEmote::MontageItemDef' has a wrong offset!");
static_assert(offsetof(RidableComponent_OnRiderStoppedEmote, PawnEmoting) == 0x000008, "Member 'RidableComponent_OnRiderStoppedEmote::PawnEmoting' has a wrong offset!");

// Function RidingCodeRuntime.RidableComponent.CanBeRiddenBP
// 0x0010 (0x0010 - 0x0000)
struct RidableComponent_CanBeRiddenBP final
{
public:
	class URiderComponent*                        Rider;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RidableComponent_CanBeRiddenBP) == 0x000008, "Wrong alignment on RidableComponent_CanBeRiddenBP");
static_assert(sizeof(RidableComponent_CanBeRiddenBP) == 0x000010, "Wrong size on RidableComponent_CanBeRiddenBP");
static_assert(offsetof(RidableComponent_CanBeRiddenBP, Rider) == 0x000000, "Member 'RidableComponent_CanBeRiddenBP::Rider' has a wrong offset!");
static_assert(offsetof(RidableComponent_CanBeRiddenBP, ReturnValue) == 0x000008, "Member 'RidableComponent_CanBeRiddenBP::ReturnValue' has a wrong offset!");

// Function RidingCodeRuntime.RidableComponent.CanRiderPlayEmote
// 0x0010 (0x0010 - 0x0000)
struct RidableComponent_CanRiderPlayEmote final
{
public:
	const class URiderComponent*                  Rider;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RidableComponent_CanRiderPlayEmote) == 0x000008, "Wrong alignment on RidableComponent_CanRiderPlayEmote");
static_assert(sizeof(RidableComponent_CanRiderPlayEmote) == 0x000010, "Wrong size on RidableComponent_CanRiderPlayEmote");
static_assert(offsetof(RidableComponent_CanRiderPlayEmote, Rider) == 0x000000, "Member 'RidableComponent_CanRiderPlayEmote::Rider' has a wrong offset!");
static_assert(offsetof(RidableComponent_CanRiderPlayEmote, ReturnValue) == 0x000008, "Member 'RidableComponent_CanRiderPlayEmote::ReturnValue' has a wrong offset!");

// Function RidingCodeRuntime.RidableComponent.GetRidingAttachComponent
// 0x0008 (0x0008 - 0x0000)
struct RidableComponent_GetRidingAttachComponent final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RidableComponent_GetRidingAttachComponent) == 0x000008, "Wrong alignment on RidableComponent_GetRidingAttachComponent");
static_assert(sizeof(RidableComponent_GetRidingAttachComponent) == 0x000008, "Wrong size on RidableComponent_GetRidingAttachComponent");
static_assert(offsetof(RidableComponent_GetRidingAttachComponent, ReturnValue) == 0x000000, "Member 'RidableComponent_GetRidingAttachComponent::ReturnValue' has a wrong offset!");

// Function RidingCodeRuntime.RidableComponent.GetRidingCapsuleSize
// 0x0018 (0x0018 - 0x0000)
struct RidableComponent_GetRidingCapsuleSize final
{
public:
	const class URiderComponent*                  Rider;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OriginalRadius;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OriginalHalfHeight;                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutRadius;                                         // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutHalfHeight;                                     // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RidableComponent_GetRidingCapsuleSize) == 0x000008, "Wrong alignment on RidableComponent_GetRidingCapsuleSize");
static_assert(sizeof(RidableComponent_GetRidingCapsuleSize) == 0x000018, "Wrong size on RidableComponent_GetRidingCapsuleSize");
static_assert(offsetof(RidableComponent_GetRidingCapsuleSize, Rider) == 0x000000, "Member 'RidableComponent_GetRidingCapsuleSize::Rider' has a wrong offset!");
static_assert(offsetof(RidableComponent_GetRidingCapsuleSize, OriginalRadius) == 0x000008, "Member 'RidableComponent_GetRidingCapsuleSize::OriginalRadius' has a wrong offset!");
static_assert(offsetof(RidableComponent_GetRidingCapsuleSize, OriginalHalfHeight) == 0x00000C, "Member 'RidableComponent_GetRidingCapsuleSize::OriginalHalfHeight' has a wrong offset!");
static_assert(offsetof(RidableComponent_GetRidingCapsuleSize, OutRadius) == 0x000010, "Member 'RidableComponent_GetRidingCapsuleSize::OutRadius' has a wrong offset!");
static_assert(offsetof(RidableComponent_GetRidingCapsuleSize, OutHalfHeight) == 0x000014, "Member 'RidableComponent_GetRidingCapsuleSize::OutHalfHeight' has a wrong offset!");

// Function RidingCodeRuntime.RidableComponent.GetRidingEmoteCapsuleSize
// 0x0018 (0x0018 - 0x0000)
struct RidableComponent_GetRidingEmoteCapsuleSize final
{
public:
	const class URiderComponent*                  Rider;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OriginalRadius;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OriginalHalfHeight;                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutRadius;                                         // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutHalfHeight;                                     // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RidableComponent_GetRidingEmoteCapsuleSize) == 0x000008, "Wrong alignment on RidableComponent_GetRidingEmoteCapsuleSize");
static_assert(sizeof(RidableComponent_GetRidingEmoteCapsuleSize) == 0x000018, "Wrong size on RidableComponent_GetRidingEmoteCapsuleSize");
static_assert(offsetof(RidableComponent_GetRidingEmoteCapsuleSize, Rider) == 0x000000, "Member 'RidableComponent_GetRidingEmoteCapsuleSize::Rider' has a wrong offset!");
static_assert(offsetof(RidableComponent_GetRidingEmoteCapsuleSize, OriginalRadius) == 0x000008, "Member 'RidableComponent_GetRidingEmoteCapsuleSize::OriginalRadius' has a wrong offset!");
static_assert(offsetof(RidableComponent_GetRidingEmoteCapsuleSize, OriginalHalfHeight) == 0x00000C, "Member 'RidableComponent_GetRidingEmoteCapsuleSize::OriginalHalfHeight' has a wrong offset!");
static_assert(offsetof(RidableComponent_GetRidingEmoteCapsuleSize, OutRadius) == 0x000010, "Member 'RidableComponent_GetRidingEmoteCapsuleSize::OutRadius' has a wrong offset!");
static_assert(offsetof(RidableComponent_GetRidingEmoteCapsuleSize, OutHalfHeight) == 0x000014, "Member 'RidableComponent_GetRidingEmoteCapsuleSize::OutHalfHeight' has a wrong offset!");

// Function RidingCodeRuntime.RidableComponent.IsBeingRidden
// 0x0001 (0x0001 - 0x0000)
struct RidableComponent_IsBeingRidden final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RidableComponent_IsBeingRidden) == 0x000001, "Wrong alignment on RidableComponent_IsBeingRidden");
static_assert(sizeof(RidableComponent_IsBeingRidden) == 0x000001, "Wrong size on RidableComponent_IsBeingRidden");
static_assert(offsetof(RidableComponent_IsBeingRidden, ReturnValue) == 0x000000, "Member 'RidableComponent_IsBeingRidden::ReturnValue' has a wrong offset!");

// Function RidingCodeRuntime.RidableComponent.IsSprinting
// 0x0001 (0x0001 - 0x0000)
struct RidableComponent_IsSprinting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RidableComponent_IsSprinting) == 0x000001, "Wrong alignment on RidableComponent_IsSprinting");
static_assert(sizeof(RidableComponent_IsSprinting) == 0x000001, "Wrong size on RidableComponent_IsSprinting");
static_assert(offsetof(RidableComponent_IsSprinting, ReturnValue) == 0x000000, "Member 'RidableComponent_IsSprinting::ReturnValue' has a wrong offset!");

// Function RidingCodeRuntime.RidableComponent.PredictRunSpeedForClient
// 0x0004 (0x0004 - 0x0000)
struct RidableComponent_PredictRunSpeedForClient final
{
public:
	float                                         NewRunSpeed;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RidableComponent_PredictRunSpeedForClient) == 0x000004, "Wrong alignment on RidableComponent_PredictRunSpeedForClient");
static_assert(sizeof(RidableComponent_PredictRunSpeedForClient) == 0x000004, "Wrong size on RidableComponent_PredictRunSpeedForClient");
static_assert(offsetof(RidableComponent_PredictRunSpeedForClient, NewRunSpeed) == 0x000000, "Member 'RidableComponent_PredictRunSpeedForClient::NewRunSpeed' has a wrong offset!");

// Function RidingCodeRuntime.RidableComponent.ShouldCameraFocusOnRidable
// 0x0010 (0x0010 - 0x0000)
struct RidableComponent_ShouldCameraFocusOnRidable final
{
public:
	const class URiderComponent*                  Rider;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RidableComponent_ShouldCameraFocusOnRidable) == 0x000008, "Wrong alignment on RidableComponent_ShouldCameraFocusOnRidable");
static_assert(sizeof(RidableComponent_ShouldCameraFocusOnRidable) == 0x000010, "Wrong size on RidableComponent_ShouldCameraFocusOnRidable");
static_assert(offsetof(RidableComponent_ShouldCameraFocusOnRidable, Rider) == 0x000000, "Member 'RidableComponent_ShouldCameraFocusOnRidable::Rider' has a wrong offset!");
static_assert(offsetof(RidableComponent_ShouldCameraFocusOnRidable, ReturnValue) == 0x000008, "Member 'RidableComponent_ShouldCameraFocusOnRidable::ReturnValue' has a wrong offset!");

// Function RidingCodeRuntime.ControllableRidableComponent.HandleCancelSprint
// 0x0002 (0x0002 - 0x0000)
struct ControllableRidableComponent_HandleCancelSprint final
{
public:
	bool                                          bAbilityInputHeld;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceCancel;                                      // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControllableRidableComponent_HandleCancelSprint) == 0x000001, "Wrong alignment on ControllableRidableComponent_HandleCancelSprint");
static_assert(sizeof(ControllableRidableComponent_HandleCancelSprint) == 0x000002, "Wrong size on ControllableRidableComponent_HandleCancelSprint");
static_assert(offsetof(ControllableRidableComponent_HandleCancelSprint, bAbilityInputHeld) == 0x000000, "Member 'ControllableRidableComponent_HandleCancelSprint::bAbilityInputHeld' has a wrong offset!");
static_assert(offsetof(ControllableRidableComponent_HandleCancelSprint, bForceCancel) == 0x000001, "Member 'ControllableRidableComponent_HandleCancelSprint::bForceCancel' has a wrong offset!");

// Function RidingCodeRuntime.ControllableRidableComponent.OnCapsuleBeginOverlap
// 0x0100 (0x0100 - 0x0000)
struct ControllableRidableComponent_OnCapsuleBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControllableRidableComponent_OnCapsuleBeginOverlap) == 0x000008, "Wrong alignment on ControllableRidableComponent_OnCapsuleBeginOverlap");
static_assert(sizeof(ControllableRidableComponent_OnCapsuleBeginOverlap) == 0x000100, "Wrong size on ControllableRidableComponent_OnCapsuleBeginOverlap");
static_assert(offsetof(ControllableRidableComponent_OnCapsuleBeginOverlap, OverlappedComp) == 0x000000, "Member 'ControllableRidableComponent_OnCapsuleBeginOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(ControllableRidableComponent_OnCapsuleBeginOverlap, OtherActor) == 0x000008, "Member 'ControllableRidableComponent_OnCapsuleBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(ControllableRidableComponent_OnCapsuleBeginOverlap, OtherComp) == 0x000010, "Member 'ControllableRidableComponent_OnCapsuleBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(ControllableRidableComponent_OnCapsuleBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'ControllableRidableComponent_OnCapsuleBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(ControllableRidableComponent_OnCapsuleBeginOverlap, bFromSweep) == 0x00001C, "Member 'ControllableRidableComponent_OnCapsuleBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(ControllableRidableComponent_OnCapsuleBeginOverlap, SweepResult) == 0x000020, "Member 'ControllableRidableComponent_OnCapsuleBeginOverlap::SweepResult' has a wrong offset!");

// Function RidingCodeRuntime.ControllableRidableComponent.UpdateFromInput
// 0x0014 (0x0014 - 0x0000)
struct ControllableRidableComponent_UpdateFromInput final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRidingControlInputState               InputState;                                        // 0x0004(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControllableRidableComponent_UpdateFromInput) == 0x000004, "Wrong alignment on ControllableRidableComponent_UpdateFromInput");
static_assert(sizeof(ControllableRidableComponent_UpdateFromInput) == 0x000014, "Wrong size on ControllableRidableComponent_UpdateFromInput");
static_assert(offsetof(ControllableRidableComponent_UpdateFromInput, DeltaTime) == 0x000000, "Member 'ControllableRidableComponent_UpdateFromInput::DeltaTime' has a wrong offset!");
static_assert(offsetof(ControllableRidableComponent_UpdateFromInput, InputState) == 0x000004, "Member 'ControllableRidableComponent_UpdateFromInput::InputState' has a wrong offset!");

// Function RidingCodeRuntime.ControllableRidableComponent.CanBeControlled
// 0x0010 (0x0010 - 0x0000)
struct ControllableRidableComponent_CanBeControlled final
{
public:
	class URiderComponent*                        Rider;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControllableRidableComponent_CanBeControlled) == 0x000008, "Wrong alignment on ControllableRidableComponent_CanBeControlled");
static_assert(sizeof(ControllableRidableComponent_CanBeControlled) == 0x000010, "Wrong size on ControllableRidableComponent_CanBeControlled");
static_assert(offsetof(ControllableRidableComponent_CanBeControlled, Rider) == 0x000000, "Member 'ControllableRidableComponent_CanBeControlled::Rider' has a wrong offset!");
static_assert(offsetof(ControllableRidableComponent_CanBeControlled, ReturnValue) == 0x000008, "Member 'ControllableRidableComponent_CanBeControlled::ReturnValue' has a wrong offset!");

// Function RidingCodeRuntime.ControllableRidableComponent.IsSprintToggleable
// 0x0001 (0x0001 - 0x0000)
struct ControllableRidableComponent_IsSprintToggleable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControllableRidableComponent_IsSprintToggleable) == 0x000001, "Wrong alignment on ControllableRidableComponent_IsSprintToggleable");
static_assert(sizeof(ControllableRidableComponent_IsSprintToggleable) == 0x000001, "Wrong size on ControllableRidableComponent_IsSprintToggleable");
static_assert(offsetof(ControllableRidableComponent_IsSprintToggleable, ReturnValue) == 0x000000, "Member 'ControllableRidableComponent_IsSprintToggleable::ReturnValue' has a wrong offset!");

// Function RidingCodeRuntime.RiderComponent.ClientHandleFinishedCharacterCustomization
// 0x0008 (0x0008 - 0x0000)
struct RiderComponent_ClientHandleFinishedCharacterCustomization final
{
public:
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RiderComponent_ClientHandleFinishedCharacterCustomization) == 0x000008, "Wrong alignment on RiderComponent_ClientHandleFinishedCharacterCustomization");
static_assert(sizeof(RiderComponent_ClientHandleFinishedCharacterCustomization) == 0x000008, "Wrong size on RiderComponent_ClientHandleFinishedCharacterCustomization");
static_assert(offsetof(RiderComponent_ClientHandleFinishedCharacterCustomization, PlayerPawn) == 0x000000, "Member 'RiderComponent_ClientHandleFinishedCharacterCustomization::PlayerPawn' has a wrong offset!");

// Function RidingCodeRuntime.RiderComponent.ClientNotifyEmoteFailure
// 0x0020 (0x0020 - 0x0000)
struct RiderComponent_ClientNotifyEmoteFailure final
{
public:
	struct FGameplayTagContainer                  ErrorTags;                                         // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RiderComponent_ClientNotifyEmoteFailure) == 0x000008, "Wrong alignment on RiderComponent_ClientNotifyEmoteFailure");
static_assert(sizeof(RiderComponent_ClientNotifyEmoteFailure) == 0x000020, "Wrong size on RiderComponent_ClientNotifyEmoteFailure");
static_assert(offsetof(RiderComponent_ClientNotifyEmoteFailure, ErrorTags) == 0x000000, "Member 'RiderComponent_ClientNotifyEmoteFailure::ErrorTags' has a wrong offset!");

// Function RidingCodeRuntime.RiderComponent.HandleActorEndPlayWhileRiding
// 0x0010 (0x0010 - 0x0000)
struct RiderComponent_HandleActorEndPlayWhileRiding final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RiderComponent_HandleActorEndPlayWhileRiding) == 0x000008, "Wrong alignment on RiderComponent_HandleActorEndPlayWhileRiding");
static_assert(sizeof(RiderComponent_HandleActorEndPlayWhileRiding) == 0x000010, "Wrong size on RiderComponent_HandleActorEndPlayWhileRiding");
static_assert(offsetof(RiderComponent_HandleActorEndPlayWhileRiding, Actor) == 0x000000, "Member 'RiderComponent_HandleActorEndPlayWhileRiding::Actor' has a wrong offset!");
static_assert(offsetof(RiderComponent_HandleActorEndPlayWhileRiding, EndPlayReason) == 0x000008, "Member 'RiderComponent_HandleActorEndPlayWhileRiding::EndPlayReason' has a wrong offset!");

// Function RidingCodeRuntime.RiderComponent.HandleDeferredExitVelocity
// 0x0018 (0x0018 - 0x0000)
struct RiderComponent_HandleDeferredExitVelocity final
{
public:
	struct FVector                                ExitVelocity;                                      // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RiderComponent_HandleDeferredExitVelocity) == 0x000008, "Wrong alignment on RiderComponent_HandleDeferredExitVelocity");
static_assert(sizeof(RiderComponent_HandleDeferredExitVelocity) == 0x000018, "Wrong size on RiderComponent_HandleDeferredExitVelocity");
static_assert(offsetof(RiderComponent_HandleDeferredExitVelocity, ExitVelocity) == 0x000000, "Member 'RiderComponent_HandleDeferredExitVelocity::ExitVelocity' has a wrong offset!");

// Function RidingCodeRuntime.RiderComponent.HandleOnWeaponEquipped
// 0x0010 (0x0010 - 0x0000)
struct RiderComponent_HandleOnWeaponEquipped final
{
public:
	class AFortWeapon*                            NewWeapon;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortWeapon*                            PrevWeapon;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RiderComponent_HandleOnWeaponEquipped) == 0x000008, "Wrong alignment on RiderComponent_HandleOnWeaponEquipped");
static_assert(sizeof(RiderComponent_HandleOnWeaponEquipped) == 0x000010, "Wrong size on RiderComponent_HandleOnWeaponEquipped");
static_assert(offsetof(RiderComponent_HandleOnWeaponEquipped, NewWeapon) == 0x000000, "Member 'RiderComponent_HandleOnWeaponEquipped::NewWeapon' has a wrong offset!");
static_assert(offsetof(RiderComponent_HandleOnWeaponEquipped, PrevWeapon) == 0x000008, "Member 'RiderComponent_HandleOnWeaponEquipped::PrevWeapon' has a wrong offset!");

// Function RidingCodeRuntime.RiderComponent.HandlePawnDiedWhileRiding
// 0x0008 (0x0008 - 0x0000)
struct RiderComponent_HandlePawnDiedWhileRiding final
{
public:
	class AFortPawn*                              DeadPawn;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RiderComponent_HandlePawnDiedWhileRiding) == 0x000008, "Wrong alignment on RiderComponent_HandlePawnDiedWhileRiding");
static_assert(sizeof(RiderComponent_HandlePawnDiedWhileRiding) == 0x000008, "Wrong size on RiderComponent_HandlePawnDiedWhileRiding");
static_assert(offsetof(RiderComponent_HandlePawnDiedWhileRiding, DeadPawn) == 0x000000, "Member 'RiderComponent_HandlePawnDiedWhileRiding::DeadPawn' has a wrong offset!");

// Function RidingCodeRuntime.RiderComponent.HandlePawnTeleported
// 0x0008 (0x0008 - 0x0000)
struct RiderComponent_HandlePawnTeleported final
{
public:
	class AFortPawn*                              TeleportedPawn;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RiderComponent_HandlePawnTeleported) == 0x000008, "Wrong alignment on RiderComponent_HandlePawnTeleported");
static_assert(sizeof(RiderComponent_HandlePawnTeleported) == 0x000008, "Wrong size on RiderComponent_HandlePawnTeleported");
static_assert(offsetof(RiderComponent_HandlePawnTeleported, TeleportedPawn) == 0x000000, "Member 'RiderComponent_HandlePawnTeleported::TeleportedPawn' has a wrong offset!");

// Function RidingCodeRuntime.RiderComponent.HandleRiderDidDamage
// 0x0060 (0x0060 - 0x0000)
struct RiderComponent_HandleRiderDidDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RiderComponent_HandleRiderDidDamage) == 0x000008, "Wrong alignment on RiderComponent_HandleRiderDidDamage");
static_assert(sizeof(RiderComponent_HandleRiderDidDamage) == 0x000060, "Wrong size on RiderComponent_HandleRiderDidDamage");
static_assert(offsetof(RiderComponent_HandleRiderDidDamage, DamagedActor) == 0x000000, "Member 'RiderComponent_HandleRiderDidDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(RiderComponent_HandleRiderDidDamage, Damage) == 0x000008, "Member 'RiderComponent_HandleRiderDidDamage::Damage' has a wrong offset!");
static_assert(offsetof(RiderComponent_HandleRiderDidDamage, InstigatedBy) == 0x000010, "Member 'RiderComponent_HandleRiderDidDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(RiderComponent_HandleRiderDidDamage, DamageCauser) == 0x000018, "Member 'RiderComponent_HandleRiderDidDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(RiderComponent_HandleRiderDidDamage, HitLocation) == 0x000020, "Member 'RiderComponent_HandleRiderDidDamage::HitLocation' has a wrong offset!");
static_assert(offsetof(RiderComponent_HandleRiderDidDamage, HitComponent) == 0x000038, "Member 'RiderComponent_HandleRiderDidDamage::HitComponent' has a wrong offset!");
static_assert(offsetof(RiderComponent_HandleRiderDidDamage, BoneName) == 0x000040, "Member 'RiderComponent_HandleRiderDidDamage::BoneName' has a wrong offset!");
static_assert(offsetof(RiderComponent_HandleRiderDidDamage, Momentum) == 0x000048, "Member 'RiderComponent_HandleRiderDidDamage::Momentum' has a wrong offset!");

// Function RidingCodeRuntime.RiderComponent.HandleRiderTakenDamage
// 0x0060 (0x0060 - 0x0000)
struct RiderComponent_HandleRiderTakenDamage final
{
public:
	class AActor*                                 DamageOnOwnerPawnDamageddActor;                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RiderComponent_HandleRiderTakenDamage) == 0x000008, "Wrong alignment on RiderComponent_HandleRiderTakenDamage");
static_assert(sizeof(RiderComponent_HandleRiderTakenDamage) == 0x000060, "Wrong size on RiderComponent_HandleRiderTakenDamage");
static_assert(offsetof(RiderComponent_HandleRiderTakenDamage, DamageOnOwnerPawnDamageddActor) == 0x000000, "Member 'RiderComponent_HandleRiderTakenDamage::DamageOnOwnerPawnDamageddActor' has a wrong offset!");
static_assert(offsetof(RiderComponent_HandleRiderTakenDamage, Damage) == 0x000008, "Member 'RiderComponent_HandleRiderTakenDamage::Damage' has a wrong offset!");
static_assert(offsetof(RiderComponent_HandleRiderTakenDamage, InstigatedBy) == 0x000010, "Member 'RiderComponent_HandleRiderTakenDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(RiderComponent_HandleRiderTakenDamage, DamageCauser) == 0x000018, "Member 'RiderComponent_HandleRiderTakenDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(RiderComponent_HandleRiderTakenDamage, HitLocation) == 0x000020, "Member 'RiderComponent_HandleRiderTakenDamage::HitLocation' has a wrong offset!");
static_assert(offsetof(RiderComponent_HandleRiderTakenDamage, FHitComponent) == 0x000038, "Member 'RiderComponent_HandleRiderTakenDamage::FHitComponent' has a wrong offset!");
static_assert(offsetof(RiderComponent_HandleRiderTakenDamage, BoneName) == 0x000040, "Member 'RiderComponent_HandleRiderTakenDamage::BoneName' has a wrong offset!");
static_assert(offsetof(RiderComponent_HandleRiderTakenDamage, Momentum) == 0x000048, "Member 'RiderComponent_HandleRiderTakenDamage::Momentum' has a wrong offset!");

// Function RidingCodeRuntime.RiderComponent.HandleStartedRiding
// 0x0008 (0x0008 - 0x0000)
struct RiderComponent_HandleStartedRiding final
{
public:
	class URidableComponent*                      Ridable;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RiderComponent_HandleStartedRiding) == 0x000008, "Wrong alignment on RiderComponent_HandleStartedRiding");
static_assert(sizeof(RiderComponent_HandleStartedRiding) == 0x000008, "Wrong size on RiderComponent_HandleStartedRiding");
static_assert(offsetof(RiderComponent_HandleStartedRiding, Ridable) == 0x000000, "Member 'RiderComponent_HandleStartedRiding::Ridable' has a wrong offset!");

// Function RidingCodeRuntime.RiderComponent.HandleStoppedRiding
// 0x0008 (0x0008 - 0x0000)
struct RiderComponent_HandleStoppedRiding final
{
public:
	class URidableComponent*                      Ridable;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RiderComponent_HandleStoppedRiding) == 0x000008, "Wrong alignment on RiderComponent_HandleStoppedRiding");
static_assert(sizeof(RiderComponent_HandleStoppedRiding) == 0x000008, "Wrong size on RiderComponent_HandleStoppedRiding");
static_assert(offsetof(RiderComponent_HandleStoppedRiding, Ridable) == 0x000000, "Member 'RiderComponent_HandleStoppedRiding::Ridable' has a wrong offset!");

// Function RidingCodeRuntime.RiderComponent.StartRidingActor
// 0x0010 (0x0010 - 0x0000)
struct RiderComponent_StartRidingActor final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RiderComponent_StartRidingActor) == 0x000008, "Wrong alignment on RiderComponent_StartRidingActor");
static_assert(sizeof(RiderComponent_StartRidingActor) == 0x000010, "Wrong size on RiderComponent_StartRidingActor");
static_assert(offsetof(RiderComponent_StartRidingActor, TargetActor) == 0x000000, "Member 'RiderComponent_StartRidingActor::TargetActor' has a wrong offset!");
static_assert(offsetof(RiderComponent_StartRidingActor, ReturnValue) == 0x000008, "Member 'RiderComponent_StartRidingActor::ReturnValue' has a wrong offset!");

// Function RidingCodeRuntime.RiderComponent.StopRidingActor
// 0x0004 (0x0004 - 0x0000)
struct RiderComponent_StopRidingActor final
{
public:
	bool                                          bLaunchRider;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFindDismountLocation;                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsJumpExit;                                       // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RiderComponent_StopRidingActor) == 0x000001, "Wrong alignment on RiderComponent_StopRidingActor");
static_assert(sizeof(RiderComponent_StopRidingActor) == 0x000004, "Wrong size on RiderComponent_StopRidingActor");
static_assert(offsetof(RiderComponent_StopRidingActor, bLaunchRider) == 0x000000, "Member 'RiderComponent_StopRidingActor::bLaunchRider' has a wrong offset!");
static_assert(offsetof(RiderComponent_StopRidingActor, bFindDismountLocation) == 0x000001, "Member 'RiderComponent_StopRidingActor::bFindDismountLocation' has a wrong offset!");
static_assert(offsetof(RiderComponent_StopRidingActor, bIsJumpExit) == 0x000002, "Member 'RiderComponent_StopRidingActor::bIsJumpExit' has a wrong offset!");
static_assert(offsetof(RiderComponent_StopRidingActor, ReturnValue) == 0x000003, "Member 'RiderComponent_StopRidingActor::ReturnValue' has a wrong offset!");

// Function RidingCodeRuntime.RiderComponent.IsRidingActor
// 0x0001 (0x0001 - 0x0000)
struct RiderComponent_IsRidingActor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RiderComponent_IsRidingActor) == 0x000001, "Wrong alignment on RiderComponent_IsRidingActor");
static_assert(sizeof(RiderComponent_IsRidingActor) == 0x000001, "Wrong size on RiderComponent_IsRidingActor");
static_assert(offsetof(RiderComponent_IsRidingActor, ReturnValue) == 0x000000, "Member 'RiderComponent_IsRidingActor::ReturnValue' has a wrong offset!");

// Function RidingCodeRuntime.ControllingRiderComponent.ControllingActor_OnJumpInput
// 0x0001 (0x0001 - 0x0000)
struct ControllingRiderComponent_ControllingActor_OnJumpInput final
{
public:
	bool                                          bPressed;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControllingRiderComponent_ControllingActor_OnJumpInput) == 0x000001, "Wrong alignment on ControllingRiderComponent_ControllingActor_OnJumpInput");
static_assert(sizeof(ControllingRiderComponent_ControllingActor_OnJumpInput) == 0x000001, "Wrong size on ControllingRiderComponent_ControllingActor_OnJumpInput");
static_assert(offsetof(ControllingRiderComponent_ControllingActor_OnJumpInput, bPressed) == 0x000000, "Member 'ControllingRiderComponent_ControllingActor_OnJumpInput::bPressed' has a wrong offset!");

// Function RidingCodeRuntime.ControllingRiderComponent.ControllingActor_OnMoveForward
// 0x0004 (0x0004 - 0x0000)
struct ControllingRiderComponent_ControllingActor_OnMoveForward final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControllingRiderComponent_ControllingActor_OnMoveForward) == 0x000004, "Wrong alignment on ControllingRiderComponent_ControllingActor_OnMoveForward");
static_assert(sizeof(ControllingRiderComponent_ControllingActor_OnMoveForward) == 0x000004, "Wrong size on ControllingRiderComponent_ControllingActor_OnMoveForward");
static_assert(offsetof(ControllingRiderComponent_ControllingActor_OnMoveForward, Val) == 0x000000, "Member 'ControllingRiderComponent_ControllingActor_OnMoveForward::Val' has a wrong offset!");

// Function RidingCodeRuntime.ControllingRiderComponent.ControllingActor_OnMoveRight
// 0x0004 (0x0004 - 0x0000)
struct ControllingRiderComponent_ControllingActor_OnMoveRight final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControllingRiderComponent_ControllingActor_OnMoveRight) == 0x000004, "Wrong alignment on ControllingRiderComponent_ControllingActor_OnMoveRight");
static_assert(sizeof(ControllingRiderComponent_ControllingActor_OnMoveRight) == 0x000004, "Wrong size on ControllingRiderComponent_ControllingActor_OnMoveRight");
static_assert(offsetof(ControllingRiderComponent_ControllingActor_OnMoveRight, Val) == 0x000000, "Member 'ControllingRiderComponent_ControllingActor_OnMoveRight::Val' has a wrong offset!");

// Function RidingCodeRuntime.ControllingRiderComponent.ServerUpdateControlInputStateReliable
// 0x0001 (0x0001 - 0x0000)
struct ControllingRiderComponent_ServerUpdateControlInputStateReliable final
{
public:
	struct FRidingControlInputStateReliable       InputState;                                        // 0x0000(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControllingRiderComponent_ServerUpdateControlInputStateReliable) == 0x000001, "Wrong alignment on ControllingRiderComponent_ServerUpdateControlInputStateReliable");
static_assert(sizeof(ControllingRiderComponent_ServerUpdateControlInputStateReliable) == 0x000001, "Wrong size on ControllingRiderComponent_ServerUpdateControlInputStateReliable");
static_assert(offsetof(ControllingRiderComponent_ServerUpdateControlInputStateReliable, InputState) == 0x000000, "Member 'ControllingRiderComponent_ServerUpdateControlInputStateReliable::InputState' has a wrong offset!");

// Function RidingCodeRuntime.ControllingRiderComponent.ServerUpdateControlInputStateUnreliable
// 0x0004 (0x0004 - 0x0000)
struct ControllingRiderComponent_ServerUpdateControlInputStateUnreliable final
{
public:
	struct FRidingControlInputStateUnreliable     InputState;                                        // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControllingRiderComponent_ServerUpdateControlInputStateUnreliable) == 0x000002, "Wrong alignment on ControllingRiderComponent_ServerUpdateControlInputStateUnreliable");
static_assert(sizeof(ControllingRiderComponent_ServerUpdateControlInputStateUnreliable) == 0x000004, "Wrong size on ControllingRiderComponent_ServerUpdateControlInputStateUnreliable");
static_assert(offsetof(ControllingRiderComponent_ServerUpdateControlInputStateUnreliable, InputState) == 0x000000, "Member 'ControllingRiderComponent_ServerUpdateControlInputStateUnreliable::InputState' has a wrong offset!");

// Function RidingCodeRuntime.ControllingRiderComponent.UpdateFromInput
// 0x0014 (0x0014 - 0x0000)
struct ControllingRiderComponent_UpdateFromInput final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRidingControlInputState               InputState;                                        // 0x0004(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControllingRiderComponent_UpdateFromInput) == 0x000004, "Wrong alignment on ControllingRiderComponent_UpdateFromInput");
static_assert(sizeof(ControllingRiderComponent_UpdateFromInput) == 0x000014, "Wrong size on ControllingRiderComponent_UpdateFromInput");
static_assert(offsetof(ControllingRiderComponent_UpdateFromInput, DeltaTime) == 0x000000, "Member 'ControllingRiderComponent_UpdateFromInput::DeltaTime' has a wrong offset!");
static_assert(offsetof(ControllingRiderComponent_UpdateFromInput, InputState) == 0x000004, "Member 'ControllingRiderComponent_UpdateFromInput::InputState' has a wrong offset!");

// Function RidingCodeRuntime.ControllingRiderComponent.GetControlInputState
// 0x0010 (0x0010 - 0x0000)
struct ControllingRiderComponent_GetControlInputState final
{
public:
	struct FRidingControlInputState               ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControllingRiderComponent_GetControlInputState) == 0x000004, "Wrong alignment on ControllingRiderComponent_GetControlInputState");
static_assert(sizeof(ControllingRiderComponent_GetControlInputState) == 0x000010, "Wrong size on ControllingRiderComponent_GetControlInputState");
static_assert(offsetof(ControllingRiderComponent_GetControlInputState, ReturnValue) == 0x000000, "Member 'ControllingRiderComponent_GetControlInputState::ReturnValue' has a wrong offset!");

// Function RidingCodeRuntime.FortVehicleLayerAnimInstance_Riding.BlueprintCollectRidableAnimBPData
// 0x0008 (0x0008 - 0x0000)
struct FortVehicleLayerAnimInstance_Riding_BlueprintCollectRidableAnimBPData final
{
public:
	const class UAnimInstance*                    RidableAnimInstance;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortVehicleLayerAnimInstance_Riding_BlueprintCollectRidableAnimBPData) == 0x000008, "Wrong alignment on FortVehicleLayerAnimInstance_Riding_BlueprintCollectRidableAnimBPData");
static_assert(sizeof(FortVehicleLayerAnimInstance_Riding_BlueprintCollectRidableAnimBPData) == 0x000008, "Wrong size on FortVehicleLayerAnimInstance_Riding_BlueprintCollectRidableAnimBPData");
static_assert(offsetof(FortVehicleLayerAnimInstance_Riding_BlueprintCollectRidableAnimBPData, RidableAnimInstance) == 0x000000, "Member 'FortVehicleLayerAnimInstance_Riding_BlueprintCollectRidableAnimBPData::RidableAnimInstance' has a wrong offset!");

// Function RidingCodeRuntime.FortVehicleLayerAnimInstance_Riding.SetFootPhase
// 0x0001 (0x0001 - 0x0000)
struct FortVehicleLayerAnimInstance_Riding_SetFootPhase final
{
public:
	ERidingFootPhase                              InFootPhase;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortVehicleLayerAnimInstance_Riding_SetFootPhase) == 0x000001, "Wrong alignment on FortVehicleLayerAnimInstance_Riding_SetFootPhase");
static_assert(sizeof(FortVehicleLayerAnimInstance_Riding_SetFootPhase) == 0x000001, "Wrong size on FortVehicleLayerAnimInstance_Riding_SetFootPhase");
static_assert(offsetof(FortVehicleLayerAnimInstance_Riding_SetFootPhase, InFootPhase) == 0x000000, "Member 'FortVehicleLayerAnimInstance_Riding_SetFootPhase::InFootPhase' has a wrong offset!");

// Function RidingCodeRuntime.RidingCheatManager.RidingSetStaminaPercent
// 0x0004 (0x0004 - 0x0000)
struct RidingCheatManager_RidingSetStaminaPercent final
{
public:
	float                                         StaminaPercent;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RidingCheatManager_RidingSetStaminaPercent) == 0x000004, "Wrong alignment on RidingCheatManager_RidingSetStaminaPercent");
static_assert(sizeof(RidingCheatManager_RidingSetStaminaPercent) == 0x000004, "Wrong size on RidingCheatManager_RidingSetStaminaPercent");
static_assert(offsetof(RidingCheatManager_RidingSetStaminaPercent, StaminaPercent) == 0x000000, "Member 'RidingCheatManager_RidingSetStaminaPercent::StaminaPercent' has a wrong offset!");

}

