#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ImagePlate

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// ScriptStruct ImagePlate.ImagePlateParameters
// 0x0040 (0x0040 - 0x0000)
struct FImagePlateParameters final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextureParameterName;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFillScreen;                                       // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              FillScreenAmount;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              FixedSize;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               RenderTexture;                                     // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               DynamicMaterial;                                   // 0x0038(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FImagePlateParameters) == 0x000008, "Wrong alignment on FImagePlateParameters");
static_assert(sizeof(FImagePlateParameters) == 0x000040, "Wrong size on FImagePlateParameters");
static_assert(offsetof(FImagePlateParameters, Material) == 0x000000, "Member 'FImagePlateParameters::Material' has a wrong offset!");
static_assert(offsetof(FImagePlateParameters, TextureParameterName) == 0x000008, "Member 'FImagePlateParameters::TextureParameterName' has a wrong offset!");
static_assert(offsetof(FImagePlateParameters, bFillScreen) == 0x00000C, "Member 'FImagePlateParameters::bFillScreen' has a wrong offset!");
static_assert(offsetof(FImagePlateParameters, FillScreenAmount) == 0x000010, "Member 'FImagePlateParameters::FillScreenAmount' has a wrong offset!");
static_assert(offsetof(FImagePlateParameters, FixedSize) == 0x000020, "Member 'FImagePlateParameters::FixedSize' has a wrong offset!");
static_assert(offsetof(FImagePlateParameters, RenderTexture) == 0x000030, "Member 'FImagePlateParameters::RenderTexture' has a wrong offset!");
static_assert(offsetof(FImagePlateParameters, DynamicMaterial) == 0x000038, "Member 'FImagePlateParameters::DynamicMaterial' has a wrong offset!");

}

