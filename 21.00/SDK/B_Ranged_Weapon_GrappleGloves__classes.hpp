#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Ranged_Weapon_GrappleGloves_

#include "Basic.hpp"

#include "GrappleGloves_Version_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GrappleGlovesState_structs.hpp"
#include "B_Ranged_WestSausage_Parallel_Athena_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_Ranged_Weapon_GrappleGloves_.B_Ranged_Weapon_GrappleGloves__C
// 0x0508 (0x2160 - 0x1C58)
class AB_Ranged_Weapon_GrappleGloves__C final : public AB_Ranged_WestSausage_Parallel_Athena_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_B_Ranged_Weapon_GrappleGloves__C;   // 0x1C58(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        DanglingLoop;                                      // 0x1C60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Charging;                                          // 0x1C68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C69[0x7];                                     // 0x1C69(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           ChargingTimer;                                     // 0x1C70(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         ChargeTime_;                                       // 0x1C78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AmountOfHeat;                                      // 0x1C7C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxHeat;                                           // 0x1C80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TryingToCharge;                                    // 0x1C84(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C85[0x3];                                     // 0x1C85(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceToTarget;                                  // 0x1C88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C8C[0x4];                                     // 0x1C8C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  Tag_Warm;                                          // 0x1C90(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTimerHandle                           ApplyCooldownTimer;                                // 0x1CB0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  Tag_Hot;                                           // 0x1CB8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FHitResult                             SavedHitResult;                                    // 0x1CD8(0x00E0)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          ADS_is_Pressed;                                    // 0x1DB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGrappleGloves_Version                        Version;                                           // 0x1DB9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DisableChargeShotInAir;                            // 0x1DBA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChargedShotReelsIn;                                // 0x1DBB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChargedShotInAirGivesSpeedBoost;                   // 0x1DBC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1DBD[0x3];                                     // 0x1DBD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeatGivenFromChargeShot;                           // 0x1DC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeatGivenFromNormalShot;                           // 0x1DC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChargeTimeInAir;                                   // 0x1DC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChargeTimeOnGround;                                // 0x1DCC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         WaitTimeBeforeCooldownTrigger;                     // 0x1DD0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           GC_ChargeUp;                                       // 0x1DF8(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         InstantShotRange;                                  // 0x1DFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChargeShotRange;                                   // 0x1E00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartedSwingingTime_;                              // 0x1E04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeBeforeSuperCharge;                             // 0x1E08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E0C[0x4];                                     // 0x1E0C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortMovementComp_Character*            MovementComponent;                                 // 0x1E10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGrappleGlovesState                           State;                                             // 0x1E18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E19[0x3];                                     // 0x1E19(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CooldownTicks;                                     // 0x1E1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DisableFiring;                                     // 0x1E20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E21[0x3];                                     // 0x1E21(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CachedCooldownTime;                                // 0x1E24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentForgivenessFailsafeUpdates;                 // 0x1E28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGrappleGlovesState                           PreviousState;                                     // 0x1E2C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E2D[0x3];                                     // 0x1E2D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         SF_Reeling_Speed;                                  // 0x1E30(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SF_OriginalMaxSpeed;                               // 0x1E58(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SF_FirstDetachMaxSpeed;                            // 0x1E80(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SF_SecondDetachMaxSpeed;                           // 0x1EA8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SF_ThirdDetachMaxSpeed;                            // 0x1ED0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SF_TimeForMinFirstSwingCooldown;                   // 0x1EF8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SF_TimeForMaxFirstSwingCooldown;                   // 0x1F20(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SF_CooldownAfterFirstSwing;                        // 0x1F48(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SF_CooldownAfterSecondSwing;                       // 0x1F70(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SF_CooldownAfterThirdSwing;                        // 0x1F98(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void()>              OnStateChanged;                                    // 0x1FC0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UAudioComponent*                        TimeoutAudioComponent;                             // 0x1FD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             SwingSound;                                        // 0x1FD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(bool ShowGraceUI, float ForgivenessProgress)> UpdateGraceUI;                                     // 0x1FE0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FScalableFloat                         ExtraForgivenessWhenSliding;                       // 0x1FF0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTimerHandle                           TimeoutTickAudioTimerHandle;                       // 0x2018(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TimeoutAudioDelayTimerHandle;                      // 0x2020(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         SF_BeepMultiplier;                                 // 0x2028(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         TimeoutBeepNumber;                                 // 0x2050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2054[0x4];                                     // 0x2054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        TimeoutLoopComponent;                              // 0x2058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Timeout_StartWarning;                              // 0x2060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Timeout_Start;                                     // 0x2068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Timeout_Loop;                                      // 0x2070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Timeout_Tick;                                      // 0x2078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Timeout_EndWarning;                                // 0x2080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Timeout_Stop;                                      // 0x2088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         SF_ForgivenessFailsafeUpdateCount;                 // 0x2090(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SF_DoReenableFiringFailsafe;                       // 0x20B8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SF_ReenableFiringFailsafeTime;                     // 0x20E0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SF_DecreaseSpeedIfLandedWithoutSliding;            // 0x2108(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SF_DecreaseSpeedIfLandedWithSliding;               // 0x2130(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           StartedCooldownCue;                                // 0x2158(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	EGrappleGlovesState                           StateWhenLanded;                                   // 0x215C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ActuallyApplyCooldown();
	void Added_E4B7BAE646AA7B303765EF96D16EDEBF();
	void ADS_Pressed();
	void ADS_Released();
	void AllowStopSwinging(bool* OutputPin);
	void ApplyCooldown(bool Force);
	void ApplyCooldownNow();
	void CalculateChargeTime(float* Time);
	void CalculateCooldownTime(float* Output);
	void CleanUpTimeOutAudio();
	void ClearCooldownTimer();
	void CorrectCooldownRaceCondition();
	void DecreaseSpeedMulticast();
	void ExecuteUbergraph_B_Ranged_Weapon_GrappleGloves_(int32 EntryPoint);
	void ExitSwinging(bool SkipRemovingSwingingGE);
	void FE_CooldownFX();
	void Fire();
	void FireReleased();
	void ForceApplyCooldown();
	void HandleDangleAudio();
	void HandleTimeoutAudio();
	void HandleTimeoutAudioStopped();
	void InitialJumpMultiplier(float* OutputPin);
	void JustTouchedGround();
	void OnAttach();
	void OnCooldownApplied();
	void OnDetach();
	void OnRopeStartFadeOut();
	void OnSpawnProjectile(class AFortProjectileBase* SpawnProjectile_0);
	void OnWeaponAttached();
	void OnWeaponDetached();
	void Re_enableFiring();
	void ReceiveBeginPlay();
	void Removed_268E961145EAEBFDD801ECBE7194AEF8();
	void Removed_9652491549D81673ACC0A59692315F21();
	void ResetHeat();
	void SetRange(float Range);
	void SetState(EGrappleGlovesState State_0);
	void SetStateOff_Server();
	void ShouldAutoSlide(bool* Result);
	void ShouldDisableFiring(bool* Result);
	void SlowerUpdate();
	void SpawnAttachment();
	void SpawnProjectile(const struct FHitResult& TargetingHitResult_0, bool FoundTarget, bool SpawnPrj);
	void StartCharging();
	void StartForgivenessTimer();
	void StartForgivenessTimer_Multicast();
	void StartTimeoutAudio();
	void StartTimer_Server(float Time, float DistanceToTarget_0);
	void StopCharging();
	void TickCooldown();
	void TickTimeoutSound();
	void TryToCooldown();
	void UnblockFiring_Multicast();
	void UpdateReticleFromNative(bool HitSomething, bool BlockedUse, bool IsTargetAtAimLocation, const struct FVector& TargetPosition);
	void UpdateSpeed(struct FSwingingControlParams& StructRef);
	void UpdateSuperChargeState(struct FSwingingControlParams& StructRef);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_Ranged_Weapon_GrappleGloves__C">();
	}
	static class AB_Ranged_Weapon_GrappleGloves__C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_Ranged_Weapon_GrappleGloves__C>();
	}
};
static_assert(alignof(AB_Ranged_Weapon_GrappleGloves__C) == 0x000008, "Wrong alignment on AB_Ranged_Weapon_GrappleGloves__C");
static_assert(sizeof(AB_Ranged_Weapon_GrappleGloves__C) == 0x002160, "Wrong size on AB_Ranged_Weapon_GrappleGloves__C");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, UberGraphFrame_B_Ranged_Weapon_GrappleGloves__C) == 0x001C58, "Member 'AB_Ranged_Weapon_GrappleGloves__C::UberGraphFrame_B_Ranged_Weapon_GrappleGloves__C' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, DanglingLoop) == 0x001C60, "Member 'AB_Ranged_Weapon_GrappleGloves__C::DanglingLoop' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, Charging) == 0x001C68, "Member 'AB_Ranged_Weapon_GrappleGloves__C::Charging' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, ChargingTimer) == 0x001C70, "Member 'AB_Ranged_Weapon_GrappleGloves__C::ChargingTimer' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, ChargeTime_) == 0x001C78, "Member 'AB_Ranged_Weapon_GrappleGloves__C::ChargeTime_' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, AmountOfHeat) == 0x001C7C, "Member 'AB_Ranged_Weapon_GrappleGloves__C::AmountOfHeat' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, MaxHeat) == 0x001C80, "Member 'AB_Ranged_Weapon_GrappleGloves__C::MaxHeat' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, TryingToCharge) == 0x001C84, "Member 'AB_Ranged_Weapon_GrappleGloves__C::TryingToCharge' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, DistanceToTarget) == 0x001C88, "Member 'AB_Ranged_Weapon_GrappleGloves__C::DistanceToTarget' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, Tag_Warm) == 0x001C90, "Member 'AB_Ranged_Weapon_GrappleGloves__C::Tag_Warm' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, ApplyCooldownTimer) == 0x001CB0, "Member 'AB_Ranged_Weapon_GrappleGloves__C::ApplyCooldownTimer' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, Tag_Hot) == 0x001CB8, "Member 'AB_Ranged_Weapon_GrappleGloves__C::Tag_Hot' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, SavedHitResult) == 0x001CD8, "Member 'AB_Ranged_Weapon_GrappleGloves__C::SavedHitResult' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, ADS_is_Pressed) == 0x001DB8, "Member 'AB_Ranged_Weapon_GrappleGloves__C::ADS_is_Pressed' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, Version) == 0x001DB9, "Member 'AB_Ranged_Weapon_GrappleGloves__C::Version' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, DisableChargeShotInAir) == 0x001DBA, "Member 'AB_Ranged_Weapon_GrappleGloves__C::DisableChargeShotInAir' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, ChargedShotReelsIn) == 0x001DBB, "Member 'AB_Ranged_Weapon_GrappleGloves__C::ChargedShotReelsIn' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, ChargedShotInAirGivesSpeedBoost) == 0x001DBC, "Member 'AB_Ranged_Weapon_GrappleGloves__C::ChargedShotInAirGivesSpeedBoost' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, HeatGivenFromChargeShot) == 0x001DC0, "Member 'AB_Ranged_Weapon_GrappleGloves__C::HeatGivenFromChargeShot' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, HeatGivenFromNormalShot) == 0x001DC4, "Member 'AB_Ranged_Weapon_GrappleGloves__C::HeatGivenFromNormalShot' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, ChargeTimeInAir) == 0x001DC8, "Member 'AB_Ranged_Weapon_GrappleGloves__C::ChargeTimeInAir' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, ChargeTimeOnGround) == 0x001DCC, "Member 'AB_Ranged_Weapon_GrappleGloves__C::ChargeTimeOnGround' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, WaitTimeBeforeCooldownTrigger) == 0x001DD0, "Member 'AB_Ranged_Weapon_GrappleGloves__C::WaitTimeBeforeCooldownTrigger' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, GC_ChargeUp) == 0x001DF8, "Member 'AB_Ranged_Weapon_GrappleGloves__C::GC_ChargeUp' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, InstantShotRange) == 0x001DFC, "Member 'AB_Ranged_Weapon_GrappleGloves__C::InstantShotRange' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, ChargeShotRange) == 0x001E00, "Member 'AB_Ranged_Weapon_GrappleGloves__C::ChargeShotRange' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, StartedSwingingTime_) == 0x001E04, "Member 'AB_Ranged_Weapon_GrappleGloves__C::StartedSwingingTime_' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, TimeBeforeSuperCharge) == 0x001E08, "Member 'AB_Ranged_Weapon_GrappleGloves__C::TimeBeforeSuperCharge' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, MovementComponent) == 0x001E10, "Member 'AB_Ranged_Weapon_GrappleGloves__C::MovementComponent' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, State) == 0x001E18, "Member 'AB_Ranged_Weapon_GrappleGloves__C::State' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, CooldownTicks) == 0x001E1C, "Member 'AB_Ranged_Weapon_GrappleGloves__C::CooldownTicks' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, DisableFiring) == 0x001E20, "Member 'AB_Ranged_Weapon_GrappleGloves__C::DisableFiring' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, CachedCooldownTime) == 0x001E24, "Member 'AB_Ranged_Weapon_GrappleGloves__C::CachedCooldownTime' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, CurrentForgivenessFailsafeUpdates) == 0x001E28, "Member 'AB_Ranged_Weapon_GrappleGloves__C::CurrentForgivenessFailsafeUpdates' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, PreviousState) == 0x001E2C, "Member 'AB_Ranged_Weapon_GrappleGloves__C::PreviousState' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, SF_Reeling_Speed) == 0x001E30, "Member 'AB_Ranged_Weapon_GrappleGloves__C::SF_Reeling_Speed' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, SF_OriginalMaxSpeed) == 0x001E58, "Member 'AB_Ranged_Weapon_GrappleGloves__C::SF_OriginalMaxSpeed' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, SF_FirstDetachMaxSpeed) == 0x001E80, "Member 'AB_Ranged_Weapon_GrappleGloves__C::SF_FirstDetachMaxSpeed' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, SF_SecondDetachMaxSpeed) == 0x001EA8, "Member 'AB_Ranged_Weapon_GrappleGloves__C::SF_SecondDetachMaxSpeed' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, SF_ThirdDetachMaxSpeed) == 0x001ED0, "Member 'AB_Ranged_Weapon_GrappleGloves__C::SF_ThirdDetachMaxSpeed' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, SF_TimeForMinFirstSwingCooldown) == 0x001EF8, "Member 'AB_Ranged_Weapon_GrappleGloves__C::SF_TimeForMinFirstSwingCooldown' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, SF_TimeForMaxFirstSwingCooldown) == 0x001F20, "Member 'AB_Ranged_Weapon_GrappleGloves__C::SF_TimeForMaxFirstSwingCooldown' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, SF_CooldownAfterFirstSwing) == 0x001F48, "Member 'AB_Ranged_Weapon_GrappleGloves__C::SF_CooldownAfterFirstSwing' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, SF_CooldownAfterSecondSwing) == 0x001F70, "Member 'AB_Ranged_Weapon_GrappleGloves__C::SF_CooldownAfterSecondSwing' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, SF_CooldownAfterThirdSwing) == 0x001F98, "Member 'AB_Ranged_Weapon_GrappleGloves__C::SF_CooldownAfterThirdSwing' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, OnStateChanged) == 0x001FC0, "Member 'AB_Ranged_Weapon_GrappleGloves__C::OnStateChanged' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, TimeoutAudioComponent) == 0x001FD0, "Member 'AB_Ranged_Weapon_GrappleGloves__C::TimeoutAudioComponent' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, SwingSound) == 0x001FD8, "Member 'AB_Ranged_Weapon_GrappleGloves__C::SwingSound' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, UpdateGraceUI) == 0x001FE0, "Member 'AB_Ranged_Weapon_GrappleGloves__C::UpdateGraceUI' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, ExtraForgivenessWhenSliding) == 0x001FF0, "Member 'AB_Ranged_Weapon_GrappleGloves__C::ExtraForgivenessWhenSliding' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, TimeoutTickAudioTimerHandle) == 0x002018, "Member 'AB_Ranged_Weapon_GrappleGloves__C::TimeoutTickAudioTimerHandle' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, TimeoutAudioDelayTimerHandle) == 0x002020, "Member 'AB_Ranged_Weapon_GrappleGloves__C::TimeoutAudioDelayTimerHandle' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, SF_BeepMultiplier) == 0x002028, "Member 'AB_Ranged_Weapon_GrappleGloves__C::SF_BeepMultiplier' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, TimeoutBeepNumber) == 0x002050, "Member 'AB_Ranged_Weapon_GrappleGloves__C::TimeoutBeepNumber' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, TimeoutLoopComponent) == 0x002058, "Member 'AB_Ranged_Weapon_GrappleGloves__C::TimeoutLoopComponent' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, Timeout_StartWarning) == 0x002060, "Member 'AB_Ranged_Weapon_GrappleGloves__C::Timeout_StartWarning' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, Timeout_Start) == 0x002068, "Member 'AB_Ranged_Weapon_GrappleGloves__C::Timeout_Start' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, Timeout_Loop) == 0x002070, "Member 'AB_Ranged_Weapon_GrappleGloves__C::Timeout_Loop' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, Timeout_Tick) == 0x002078, "Member 'AB_Ranged_Weapon_GrappleGloves__C::Timeout_Tick' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, Timeout_EndWarning) == 0x002080, "Member 'AB_Ranged_Weapon_GrappleGloves__C::Timeout_EndWarning' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, Timeout_Stop) == 0x002088, "Member 'AB_Ranged_Weapon_GrappleGloves__C::Timeout_Stop' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, SF_ForgivenessFailsafeUpdateCount) == 0x002090, "Member 'AB_Ranged_Weapon_GrappleGloves__C::SF_ForgivenessFailsafeUpdateCount' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, SF_DoReenableFiringFailsafe) == 0x0020B8, "Member 'AB_Ranged_Weapon_GrappleGloves__C::SF_DoReenableFiringFailsafe' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, SF_ReenableFiringFailsafeTime) == 0x0020E0, "Member 'AB_Ranged_Weapon_GrappleGloves__C::SF_ReenableFiringFailsafeTime' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, SF_DecreaseSpeedIfLandedWithoutSliding) == 0x002108, "Member 'AB_Ranged_Weapon_GrappleGloves__C::SF_DecreaseSpeedIfLandedWithoutSliding' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, SF_DecreaseSpeedIfLandedWithSliding) == 0x002130, "Member 'AB_Ranged_Weapon_GrappleGloves__C::SF_DecreaseSpeedIfLandedWithSliding' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, StartedCooldownCue) == 0x002158, "Member 'AB_Ranged_Weapon_GrappleGloves__C::StartedCooldownCue' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Weapon_GrappleGloves__C, StateWhenLanded) == 0x00215C, "Member 'AB_Ranged_Weapon_GrappleGloves__C::StateWhenLanded' has a wrong offset!");

}

