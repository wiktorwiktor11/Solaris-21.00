#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameplayStateMachine

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "GameplayTags_0_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "GameplayStateMachine_structs.hpp"


namespace SDK
{

// Class GameplayStateMachine.GameplayState
// 0x0050 (0x0078 - 0x0028)
class UGameplayState : public UObject
{
public:
	struct FGameplayTag                           StateId;                                           // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  StateRuntimeTags;                                  // 0x0030(0x0020)(Transient, Protected, NativeAccessSpecifierProtected)
	bool                                          bEvaluateTransition;                               // 0x0050(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bReplicates;                                       // 0x0051(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bStateBegun;                                       // 0x0052(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bStateEnded;                                       // 0x0053(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         InitializationServerTime;                          // 0x0054(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BeginStateDelay;                                   // 0x0058(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayStateMachine*                  CachedGameplayStateMachine;                        // 0x0060(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGameplayStateMachineManager*           CachedStateMachineManager;                         // 0x0068(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGameplayState*                         Hack_StateToDelayProcess;                          // 0x0070(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void AddStateRuntimeTag(const struct FGameplayTag& AddedTag);
	void BeginStateEvent(const struct FGameplayTag& PrevStateId);
	void BeginStateEventClient(const struct FGameplayTag& PrevStateId);
	void BeginStateEventServer(const struct FGameplayTag& PrevStateId);
	void EndStateEvent(const struct FGameplayTag& NextStateId);
	void EndStateEventClient(const struct FGameplayTag& NextStateId);
	void EndStateEventServer(const struct FGameplayTag& NextStateId);
	bool HasStateRuntimeTag(const struct FGameplayTag& QueryTag);
	void InitializeStateEvent(const struct FGameplayTag& PrevStateId);
	void InitializeStateEventClient(const struct FGameplayTag& PrevStateId);
	void InitializeStateEventServer(const struct FGameplayTag& PrevStateId);
	void MarkStateToEvaluateTransitions();
	void RemoveStateRuntimeTag(const struct FGameplayTag& RemovedTag);
	void UpdateStateEvent(const float DeltaTime);
	void UpdateStateEventClient(const float DeltaTime);
	void UpdateStateEventServer(const float DeltaTime);

	class UGameplayStateMachine* GetGameplayStateMachine() const;
	class AActor* GetOwningActor() const;
	struct FGameplayTag GetStateId() const;
	const struct FGameplayTagContainer GetStateRuntimeTags() const;
	bool HasAuthority() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayState">();
	}
	static class UGameplayState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayState>();
	}
};
static_assert(alignof(UGameplayState) == 0x000008, "Wrong alignment on UGameplayState");
static_assert(sizeof(UGameplayState) == 0x000078, "Wrong size on UGameplayState");
static_assert(offsetof(UGameplayState, StateId) == 0x000028, "Member 'UGameplayState::StateId' has a wrong offset!");
static_assert(offsetof(UGameplayState, StateRuntimeTags) == 0x000030, "Member 'UGameplayState::StateRuntimeTags' has a wrong offset!");
static_assert(offsetof(UGameplayState, bEvaluateTransition) == 0x000050, "Member 'UGameplayState::bEvaluateTransition' has a wrong offset!");
static_assert(offsetof(UGameplayState, bReplicates) == 0x000051, "Member 'UGameplayState::bReplicates' has a wrong offset!");
static_assert(offsetof(UGameplayState, bStateBegun) == 0x000052, "Member 'UGameplayState::bStateBegun' has a wrong offset!");
static_assert(offsetof(UGameplayState, bStateEnded) == 0x000053, "Member 'UGameplayState::bStateEnded' has a wrong offset!");
static_assert(offsetof(UGameplayState, InitializationServerTime) == 0x000054, "Member 'UGameplayState::InitializationServerTime' has a wrong offset!");
static_assert(offsetof(UGameplayState, BeginStateDelay) == 0x000058, "Member 'UGameplayState::BeginStateDelay' has a wrong offset!");
static_assert(offsetof(UGameplayState, CachedGameplayStateMachine) == 0x000060, "Member 'UGameplayState::CachedGameplayStateMachine' has a wrong offset!");
static_assert(offsetof(UGameplayState, CachedStateMachineManager) == 0x000068, "Member 'UGameplayState::CachedStateMachineManager' has a wrong offset!");
static_assert(offsetof(UGameplayState, Hack_StateToDelayProcess) == 0x000070, "Member 'UGameplayState::Hack_StateToDelayProcess' has a wrong offset!");

// Class GameplayStateMachine.GameplayStateMachine
// 0x0038 (0x00B0 - 0x0078)
class UGameplayStateMachine : public UGameplayState
{
public:
	struct FGameplayTag                           StateMachineId;                                    // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayStateData               ActiveGameplayStateData;                           // 0x0080(0x0018)(Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FGameplayStateSettings>         GameplayStateSettings;                             // 0x0098(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTag                           InitialGameplayStateId;                            // 0x00A8(0x0004)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EvaluateStateTransition();
	void OnRep_ActiveGameplayStateData();
	void SetState(const struct FGameplayTag& InStateId, float InBeginStateDelay);

	struct FGameplayTag GetActiveStateId() const;
	class UGameplayState* GetActiveStateObject() const;
	struct FGameplayTag GetStateMachineId() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayStateMachine">();
	}
	static class UGameplayStateMachine* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayStateMachine>();
	}
};
static_assert(alignof(UGameplayStateMachine) == 0x000008, "Wrong alignment on UGameplayStateMachine");
static_assert(sizeof(UGameplayStateMachine) == 0x0000B0, "Wrong size on UGameplayStateMachine");
static_assert(offsetof(UGameplayStateMachine, StateMachineId) == 0x000078, "Member 'UGameplayStateMachine::StateMachineId' has a wrong offset!");
static_assert(offsetof(UGameplayStateMachine, ActiveGameplayStateData) == 0x000080, "Member 'UGameplayStateMachine::ActiveGameplayStateData' has a wrong offset!");
static_assert(offsetof(UGameplayStateMachine, GameplayStateSettings) == 0x000098, "Member 'UGameplayStateMachine::GameplayStateSettings' has a wrong offset!");
static_assert(offsetof(UGameplayStateMachine, InitialGameplayStateId) == 0x0000A8, "Member 'UGameplayStateMachine::InitialGameplayStateId' has a wrong offset!");

// Class GameplayStateMachine.GameplayStateMachineManager
// 0x0120 (0x01C0 - 0x00A0)
class UGameplayStateMachineManager final : public UActorComponent
{
public:
	struct FGameplayStateMachineArray             StateMachineList;                                  // 0x00A0(0x0120)(Net, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayStateMachineManager">();
	}
	static class UGameplayStateMachineManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayStateMachineManager>();
	}
};
static_assert(alignof(UGameplayStateMachineManager) == 0x000008, "Wrong alignment on UGameplayStateMachineManager");
static_assert(sizeof(UGameplayStateMachineManager) == 0x0001C0, "Wrong size on UGameplayStateMachineManager");
static_assert(offsetof(UGameplayStateMachineManager, StateMachineList) == 0x0000A0, "Member 'UGameplayStateMachineManager::StateMachineList' has a wrong offset!");

}

