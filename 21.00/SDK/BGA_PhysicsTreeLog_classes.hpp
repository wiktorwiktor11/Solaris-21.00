#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BGA_PhysicsTreeLog

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "FluidForceDynamic_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BGA_PhysicsTreeLog.BGA_PhysicsTreeLog_C
// 0x02A0 (0x1110 - 0x0E70)
class ABGA_PhysicsTreeLog_C final : public ABuildingProp
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0E70(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFortSoundIndicatorComponent*           FortSoundIndicator;                                // 0x0E78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      WaterInteractMiddle;                               // 0x0E80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      WaterInteractBottom;                               // 0x0E88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      WaterInteractTop;                                  // 0x0E90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Physics_Tree_Environment_Impact;                // 0x0E98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FScalableFloat>                 PlayerImpactTiers;                                 // 0x0EA0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FScalableFloat>                 PlayerImpulseTiers;                                // 0x0EB0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                LastImpactNormal;                                  // 0x0EC0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         VerticalImpulseRatio;                              // 0x0ED8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UBuoyancyComponent*                     BuoyancyComponent;                                 // 0x0F00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NextImminentCollisionTime;                         // 0x0F08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeBetweenImminentCollisions;                     // 0x0F0C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MatReference;                                      // 0x0F10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BreakTreeDamage;                                   // 0x0F18(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         NextPotentialLaunchTime;                           // 0x0F1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LaunchDelay;                                       // 0x0F20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TreeDestructionBurstCue;                           // 0x0F24(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F28[0x8];                                      // 0x0F28(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TreeDestructionTransform;                          // 0x0F30(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         CachedDamageValue;                                 // 0x0F90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SnowTimerValue;                                    // 0x0F94(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           SnowRemovalTimerHandle;                            // 0x0F98(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFXSystemComponent*                     WaterFxPhysicsTreeMiddle;                          // 0x0FA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UFXSystemComponent*>             FxSystemArray;                                     // 0x0FA8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	float                                         WaterFxPlaneDepth;                                 // 0x0FB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FBC[0x4];                                      // 0x0FBC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WaterFxPlaneLocation;                              // 0x0FC0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WaterFxIndex;                                      // 0x0FD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FDC[0x4];                                      // 0x0FDC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemComponent*                     WaterFxPhysicsTreeTop;                             // 0x0FE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFXSystemComponent*                     WaterFxPhysicsTreeBottom;                          // 0x0FE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           WaterSurfaceInfoTimer;                             // 0x0FF0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WaterFxPlaneNormal;                                // 0x0FF8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_FluidSim_FN_C*                      FluidSim;                                          // 0x1010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, class FName>                Sockets_And_Endpoints;                             // 0x1018(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FFluidForceDynamic                     Fluid_Force_Dynamic;                               // 0x1068(0x0070)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	float                                         LogLength;                                         // 0x10D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanPlayDeathEffects;                               // 0x10DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10DD[0x3];                                     // 0x10DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         bSplitWhenCutBySaber;                              // 0x10E0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void AdjustWaterSettings();
	void AwakeStateChanged(class UPrimitiveComponent* SimulatingComponent, bool bIsAwake);
	void CalculateSplitOffset(bool bSmallSide, float SplitPercentage, float* LocalZOffset);
	void CalculateSplitScale(bool bSmallSide, float SplitPercentage, float* SplitScale);
	void CE_SplashInWater(const struct FVector& SplashLocation);
	void Control2dSimForces();
	void ExecuteUbergraph_BGA_PhysicsTreeLog(int32 EntryPoint);
	class AB_PhysicsTree_Reporter_C* GetAnalyticsReporterActor(bool* Success);
	void GetPlayerImpulseVelocityFromImpactVelocity(float Impact, bool* Minimum_Met, float* Impulse);
	void LogDamaged(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void OnComponentHit_Event_0(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnDeathPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnDeathServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnPontoonEnteredWater(const struct FSphericalPontoon& Pontoon);
	void OnPontoonExitedWater(const struct FSphericalPontoon& Pontoon);
	void OnRep_BreakTreeDamage();
	void OnVehicleHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveBeginPlay();
	void RemoveSnow();
	void ReportTreeFellingToAnalytics(class AActor* FelledBy);
	void Split_Log(const struct FVector& ImpactPoint, float Damage);
	void Update_Water_FX();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BGA_PhysicsTreeLog_C">();
	}
	static class ABGA_PhysicsTreeLog_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABGA_PhysicsTreeLog_C>();
	}
};
static_assert(alignof(ABGA_PhysicsTreeLog_C) == 0x000010, "Wrong alignment on ABGA_PhysicsTreeLog_C");
static_assert(sizeof(ABGA_PhysicsTreeLog_C) == 0x001110, "Wrong size on ABGA_PhysicsTreeLog_C");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, UberGraphFrame) == 0x000E70, "Member 'ABGA_PhysicsTreeLog_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, FortSoundIndicator) == 0x000E78, "Member 'ABGA_PhysicsTreeLog_C::FortSoundIndicator' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, WaterInteractMiddle) == 0x000E80, "Member 'ABGA_PhysicsTreeLog_C::WaterInteractMiddle' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, WaterInteractBottom) == 0x000E88, "Member 'ABGA_PhysicsTreeLog_C::WaterInteractBottom' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, WaterInteractTop) == 0x000E90, "Member 'ABGA_PhysicsTreeLog_C::WaterInteractTop' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, NS_Physics_Tree_Environment_Impact) == 0x000E98, "Member 'ABGA_PhysicsTreeLog_C::NS_Physics_Tree_Environment_Impact' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, PlayerImpactTiers) == 0x000EA0, "Member 'ABGA_PhysicsTreeLog_C::PlayerImpactTiers' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, PlayerImpulseTiers) == 0x000EB0, "Member 'ABGA_PhysicsTreeLog_C::PlayerImpulseTiers' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, LastImpactNormal) == 0x000EC0, "Member 'ABGA_PhysicsTreeLog_C::LastImpactNormal' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, VerticalImpulseRatio) == 0x000ED8, "Member 'ABGA_PhysicsTreeLog_C::VerticalImpulseRatio' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, BuoyancyComponent) == 0x000F00, "Member 'ABGA_PhysicsTreeLog_C::BuoyancyComponent' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, NextImminentCollisionTime) == 0x000F08, "Member 'ABGA_PhysicsTreeLog_C::NextImminentCollisionTime' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, TimeBetweenImminentCollisions) == 0x000F0C, "Member 'ABGA_PhysicsTreeLog_C::TimeBetweenImminentCollisions' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, MatReference) == 0x000F10, "Member 'ABGA_PhysicsTreeLog_C::MatReference' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, BreakTreeDamage) == 0x000F18, "Member 'ABGA_PhysicsTreeLog_C::BreakTreeDamage' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, NextPotentialLaunchTime) == 0x000F1C, "Member 'ABGA_PhysicsTreeLog_C::NextPotentialLaunchTime' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, LaunchDelay) == 0x000F20, "Member 'ABGA_PhysicsTreeLog_C::LaunchDelay' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, TreeDestructionBurstCue) == 0x000F24, "Member 'ABGA_PhysicsTreeLog_C::TreeDestructionBurstCue' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, TreeDestructionTransform) == 0x000F30, "Member 'ABGA_PhysicsTreeLog_C::TreeDestructionTransform' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, CachedDamageValue) == 0x000F90, "Member 'ABGA_PhysicsTreeLog_C::CachedDamageValue' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, SnowTimerValue) == 0x000F94, "Member 'ABGA_PhysicsTreeLog_C::SnowTimerValue' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, SnowRemovalTimerHandle) == 0x000F98, "Member 'ABGA_PhysicsTreeLog_C::SnowRemovalTimerHandle' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, WaterFxPhysicsTreeMiddle) == 0x000FA0, "Member 'ABGA_PhysicsTreeLog_C::WaterFxPhysicsTreeMiddle' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, FxSystemArray) == 0x000FA8, "Member 'ABGA_PhysicsTreeLog_C::FxSystemArray' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, WaterFxPlaneDepth) == 0x000FB8, "Member 'ABGA_PhysicsTreeLog_C::WaterFxPlaneDepth' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, WaterFxPlaneLocation) == 0x000FC0, "Member 'ABGA_PhysicsTreeLog_C::WaterFxPlaneLocation' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, WaterFxIndex) == 0x000FD8, "Member 'ABGA_PhysicsTreeLog_C::WaterFxIndex' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, WaterFxPhysicsTreeTop) == 0x000FE0, "Member 'ABGA_PhysicsTreeLog_C::WaterFxPhysicsTreeTop' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, WaterFxPhysicsTreeBottom) == 0x000FE8, "Member 'ABGA_PhysicsTreeLog_C::WaterFxPhysicsTreeBottom' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, WaterSurfaceInfoTimer) == 0x000FF0, "Member 'ABGA_PhysicsTreeLog_C::WaterSurfaceInfoTimer' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, WaterFxPlaneNormal) == 0x000FF8, "Member 'ABGA_PhysicsTreeLog_C::WaterFxPlaneNormal' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, FluidSim) == 0x001010, "Member 'ABGA_PhysicsTreeLog_C::FluidSim' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, Sockets_And_Endpoints) == 0x001018, "Member 'ABGA_PhysicsTreeLog_C::Sockets_And_Endpoints' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, Fluid_Force_Dynamic) == 0x001068, "Member 'ABGA_PhysicsTreeLog_C::Fluid_Force_Dynamic' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, LogLength) == 0x0010D8, "Member 'ABGA_PhysicsTreeLog_C::LogLength' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, CanPlayDeathEffects) == 0x0010DC, "Member 'ABGA_PhysicsTreeLog_C::CanPlayDeathEffects' has a wrong offset!");
static_assert(offsetof(ABGA_PhysicsTreeLog_C, bSplitWhenCutBySaber) == 0x0010E0, "Member 'ABGA_PhysicsTreeLog_C::bSplitWhenCutBySaber' has a wrong offset!");

}

