#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ThrowingToyRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "NetCore_structs.hpp"


namespace SDK
{

// Enum ThrowingToyRuntime.EThrowingToyItemRemovedReason
// NumValues: 0x0005
enum class EThrowingToyItemRemovedReason : uint8
{
	None                                     = 0,
	ManuallyDropped                          = 1,
	DeviceForcedDropped                      = 2,
	DeviceForcedDeleted                      = 3,
	EThrowingToyItemRemovedReason_MAX        = 4,
};

// ScriptStruct ThrowingToyRuntime.ThrowingToyData
// 0x001C (0x0028 - 0x000C)
struct FThrowingToyData final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ThrowingToy;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  WorldItemGuid;                                     // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FThrowingToyData) == 0x000008, "Wrong alignment on FThrowingToyData");
static_assert(sizeof(FThrowingToyData) == 0x000028, "Wrong size on FThrowingToyData");
static_assert(offsetof(FThrowingToyData, ThrowingToy) == 0x000010, "Member 'FThrowingToyData::ThrowingToy' has a wrong offset!");
static_assert(offsetof(FThrowingToyData, WorldItemGuid) == 0x000018, "Member 'FThrowingToyData::WorldItemGuid' has a wrong offset!");

// ScriptStruct ThrowingToyRuntime.ThrowingToyDataArray
// 0x0010 (0x0118 - 0x0108)
struct FThrowingToyDataArray final : public FFastArraySerializer
{
public:
	TArray<struct FThrowingToyData>               Entries;                                           // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FThrowingToyDataArray) == 0x000008, "Wrong alignment on FThrowingToyDataArray");
static_assert(sizeof(FThrowingToyDataArray) == 0x000118, "Wrong size on FThrowingToyDataArray");
static_assert(offsetof(FThrowingToyDataArray, Entries) == 0x000108, "Member 'FThrowingToyDataArray::Entries' has a wrong offset!");

}

