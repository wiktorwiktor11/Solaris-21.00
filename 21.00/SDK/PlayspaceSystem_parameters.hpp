#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PlayspaceSystem

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "PlayspaceSystem_structs.hpp"


namespace SDK::Params
{

// Function PlayspaceSystem.GameplayVolume.InitializeBoundsComponent
// 0x0008 (0x0008 - 0x0000)
struct GameplayVolume_InitializeBoundsComponent final
{
public:
	class UOverlapComponent*                      NewBoundsComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayVolume_InitializeBoundsComponent) == 0x000008, "Wrong alignment on GameplayVolume_InitializeBoundsComponent");
static_assert(sizeof(GameplayVolume_InitializeBoundsComponent) == 0x000008, "Wrong size on GameplayVolume_InitializeBoundsComponent");
static_assert(offsetof(GameplayVolume_InitializeBoundsComponent, NewBoundsComponent) == 0x000000, "Member 'GameplayVolume_InitializeBoundsComponent::NewBoundsComponent' has a wrong offset!");

// Function PlayspaceSystem.GameplayVolume.UpdateSize
// 0x0018 (0x0018 - 0x0000)
struct GameplayVolume_UpdateSize final
{
public:
	struct FVector                                NewScale;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayVolume_UpdateSize) == 0x000008, "Wrong alignment on GameplayVolume_UpdateSize");
static_assert(sizeof(GameplayVolume_UpdateSize) == 0x000018, "Wrong size on GameplayVolume_UpdateSize");
static_assert(offsetof(GameplayVolume_UpdateSize, NewScale) == 0x000000, "Member 'GameplayVolume_UpdateSize::NewScale' has a wrong offset!");

// Function PlayspaceSystem.GameplayVolume.GetPlayspace
// 0x0008 (0x0008 - 0x0000)
struct GameplayVolume_GetPlayspace final
{
public:
	class APlayspace*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayVolume_GetPlayspace) == 0x000008, "Wrong alignment on GameplayVolume_GetPlayspace");
static_assert(sizeof(GameplayVolume_GetPlayspace) == 0x000008, "Wrong size on GameplayVolume_GetPlayspace");
static_assert(offsetof(GameplayVolume_GetPlayspace, ReturnValue) == 0x000000, "Member 'GameplayVolume_GetPlayspace::ReturnValue' has a wrong offset!");

// Function PlayspaceSystem.OverlapComponent.OnBeginActorOverlap
// 0x0100 (0x0100 - 0x0000)
struct OverlapComponent_OnBeginActorOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(OverlapComponent_OnBeginActorOverlap) == 0x000008, "Wrong alignment on OverlapComponent_OnBeginActorOverlap");
static_assert(sizeof(OverlapComponent_OnBeginActorOverlap) == 0x000100, "Wrong size on OverlapComponent_OnBeginActorOverlap");
static_assert(offsetof(OverlapComponent_OnBeginActorOverlap, OverlappedComponent) == 0x000000, "Member 'OverlapComponent_OnBeginActorOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(OverlapComponent_OnBeginActorOverlap, OtherActor) == 0x000008, "Member 'OverlapComponent_OnBeginActorOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(OverlapComponent_OnBeginActorOverlap, OtherComp) == 0x000010, "Member 'OverlapComponent_OnBeginActorOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(OverlapComponent_OnBeginActorOverlap, OtherBodyIndex) == 0x000018, "Member 'OverlapComponent_OnBeginActorOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(OverlapComponent_OnBeginActorOverlap, bFromSweep) == 0x00001C, "Member 'OverlapComponent_OnBeginActorOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(OverlapComponent_OnBeginActorOverlap, SweepResult) == 0x000020, "Member 'OverlapComponent_OnBeginActorOverlap::SweepResult' has a wrong offset!");

// Function PlayspaceSystem.OverlapComponent.OnEndActorOverlap
// 0x0020 (0x0020 - 0x0000)
struct OverlapComponent_OnEndActorOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OverlapComponent_OnEndActorOverlap) == 0x000008, "Wrong alignment on OverlapComponent_OnEndActorOverlap");
static_assert(sizeof(OverlapComponent_OnEndActorOverlap) == 0x000020, "Wrong size on OverlapComponent_OnEndActorOverlap");
static_assert(offsetof(OverlapComponent_OnEndActorOverlap, OverlappedComponent) == 0x000000, "Member 'OverlapComponent_OnEndActorOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(OverlapComponent_OnEndActorOverlap, OtherActor) == 0x000008, "Member 'OverlapComponent_OnEndActorOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(OverlapComponent_OnEndActorOverlap, OtherComp) == 0x000010, "Member 'OverlapComponent_OnEndActorOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(OverlapComponent_OnEndActorOverlap, OtherBodyIndex) == 0x000018, "Member 'OverlapComponent_OnEndActorOverlap::OtherBodyIndex' has a wrong offset!");

// Function PlayspaceSystem.PlayspaceControllerComponent_PlayerSpawning.GetSpawnInfo
// 0x0058 (0x0058 - 0x0000)
struct PlayspaceControllerComponent_PlayerSpawning_GetSpawnInfo final
{
public:
	struct FReplicatedSpawnInfo                   ReturnValue;                                       // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayspaceControllerComponent_PlayerSpawning_GetSpawnInfo) == 0x000008, "Wrong alignment on PlayspaceControllerComponent_PlayerSpawning_GetSpawnInfo");
static_assert(sizeof(PlayspaceControllerComponent_PlayerSpawning_GetSpawnInfo) == 0x000058, "Wrong size on PlayspaceControllerComponent_PlayerSpawning_GetSpawnInfo");
static_assert(offsetof(PlayspaceControllerComponent_PlayerSpawning_GetSpawnInfo, ReturnValue) == 0x000000, "Member 'PlayspaceControllerComponent_PlayerSpawning_GetSpawnInfo::ReturnValue' has a wrong offset!");

// Function PlayspaceSystem.PlayspaceLibrary.DestroyPlayspace
// 0x0008 (0x0008 - 0x0000)
struct PlayspaceLibrary_DestroyPlayspace final
{
public:
	class APlayspace*                             PlayspaceToDestroy;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayspaceLibrary_DestroyPlayspace) == 0x000008, "Wrong alignment on PlayspaceLibrary_DestroyPlayspace");
static_assert(sizeof(PlayspaceLibrary_DestroyPlayspace) == 0x000008, "Wrong size on PlayspaceLibrary_DestroyPlayspace");
static_assert(offsetof(PlayspaceLibrary_DestroyPlayspace, PlayspaceToDestroy) == 0x000000, "Member 'PlayspaceLibrary_DestroyPlayspace::PlayspaceToDestroy' has a wrong offset!");

// Function PlayspaceSystem.PlayspaceManagerComponent.OnPlayerBeginOverlapGameplayVolume
// 0x0010 (0x0010 - 0x0000)
struct PlayspaceManagerComponent_OnPlayerBeginOverlapGameplayVolume final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGameplayVolume*                        Volume;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayspaceManagerComponent_OnPlayerBeginOverlapGameplayVolume) == 0x000008, "Wrong alignment on PlayspaceManagerComponent_OnPlayerBeginOverlapGameplayVolume");
static_assert(sizeof(PlayspaceManagerComponent_OnPlayerBeginOverlapGameplayVolume) == 0x000010, "Wrong size on PlayspaceManagerComponent_OnPlayerBeginOverlapGameplayVolume");
static_assert(offsetof(PlayspaceManagerComponent_OnPlayerBeginOverlapGameplayVolume, PlayerState) == 0x000000, "Member 'PlayspaceManagerComponent_OnPlayerBeginOverlapGameplayVolume::PlayerState' has a wrong offset!");
static_assert(offsetof(PlayspaceManagerComponent_OnPlayerBeginOverlapGameplayVolume, Volume) == 0x000008, "Member 'PlayspaceManagerComponent_OnPlayerBeginOverlapGameplayVolume::Volume' has a wrong offset!");

// Function PlayspaceSystem.PlayspaceManagerComponent.OnPlayerEndOverlapGameplayVolume
// 0x0010 (0x0010 - 0x0000)
struct PlayspaceManagerComponent_OnPlayerEndOverlapGameplayVolume final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGameplayVolume*                        Volume;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayspaceManagerComponent_OnPlayerEndOverlapGameplayVolume) == 0x000008, "Wrong alignment on PlayspaceManagerComponent_OnPlayerEndOverlapGameplayVolume");
static_assert(sizeof(PlayspaceManagerComponent_OnPlayerEndOverlapGameplayVolume) == 0x000010, "Wrong size on PlayspaceManagerComponent_OnPlayerEndOverlapGameplayVolume");
static_assert(offsetof(PlayspaceManagerComponent_OnPlayerEndOverlapGameplayVolume, PlayerState) == 0x000000, "Member 'PlayspaceManagerComponent_OnPlayerEndOverlapGameplayVolume::PlayerState' has a wrong offset!");
static_assert(offsetof(PlayspaceManagerComponent_OnPlayerEndOverlapGameplayVolume, Volume) == 0x000008, "Member 'PlayspaceManagerComponent_OnPlayerEndOverlapGameplayVolume::Volume' has a wrong offset!");

// Function PlayspaceSystem.PlayspaceManagerComponent.ProcessOverlapEvents
// 0x0008 (0x0008 - 0x0000)
struct PlayspaceManagerComponent_ProcessOverlapEvents final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayspaceManagerComponent_ProcessOverlapEvents) == 0x000004, "Wrong alignment on PlayspaceManagerComponent_ProcessOverlapEvents");
static_assert(sizeof(PlayspaceManagerComponent_ProcessOverlapEvents) == 0x000008, "Wrong size on PlayspaceManagerComponent_ProcessOverlapEvents");
static_assert(offsetof(PlayspaceManagerComponent_ProcessOverlapEvents, DeltaTime) == 0x000000, "Member 'PlayspaceManagerComponent_ProcessOverlapEvents::DeltaTime' has a wrong offset!");
static_assert(offsetof(PlayspaceManagerComponent_ProcessOverlapEvents, ReturnValue) == 0x000004, "Member 'PlayspaceManagerComponent_ProcessOverlapEvents::ReturnValue' has a wrong offset!");

}

