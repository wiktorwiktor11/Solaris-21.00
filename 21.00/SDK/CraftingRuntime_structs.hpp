#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CraftingRuntime

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_0_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK
{

// Enum CraftingRuntime.ECraftingObjectState
// NumValues: 0x0008
enum class ECraftingObjectState : uint8
{
	Invalid                                  = 0,
	Idle                                     = 1,
	Crafting                                 = 2,
	Ready                                    = 3,
	OverCrafting                             = 4,
	Resetting                                = 5,
	TotalStates                              = 6,
	ECraftingObjectState_MAX                 = 7,
};

// Enum CraftingRuntime.ECraftingIngredientReqError
// NumValues: 0x0004
enum class ECraftingIngredientReqError : uint8
{
	None                                     = 0,
	NoItem                                   = 1,
	NotEnough                                = 2,
	ECraftingIngredientReqError_MAX          = 3,
};

// ScriptStruct CraftingRuntime.CraftingUpgradeRule
// 0x0088 (0x0088 - 0x0000)
struct FCraftingUpgradeRule final
{
public:
	struct FGameplayTagRequirements               SourceItemTags;                                    // 0x0000(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagRequirements               TargetItemTags;                                    // 0x0040(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         UpgradeFlags;                                      // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCraftingUpgradeRule) == 0x000008, "Wrong alignment on FCraftingUpgradeRule");
static_assert(sizeof(FCraftingUpgradeRule) == 0x000088, "Wrong size on FCraftingUpgradeRule");
static_assert(offsetof(FCraftingUpgradeRule, SourceItemTags) == 0x000000, "Member 'FCraftingUpgradeRule::SourceItemTags' has a wrong offset!");
static_assert(offsetof(FCraftingUpgradeRule, TargetItemTags) == 0x000040, "Member 'FCraftingUpgradeRule::TargetItemTags' has a wrong offset!");
static_assert(offsetof(FCraftingUpgradeRule, UpgradeFlags) == 0x000080, "Member 'FCraftingUpgradeRule::UpgradeFlags' has a wrong offset!");

// ScriptStruct CraftingRuntime.CraftingObjectRepStateData
// 0x0008 (0x0008 - 0x0000)
struct FCraftingObjectRepStateData final
{
public:
	ECraftingObjectState                          CraftingObjectState;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StateChangeServerTime;                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCraftingObjectRepStateData) == 0x000004, "Wrong alignment on FCraftingObjectRepStateData");
static_assert(sizeof(FCraftingObjectRepStateData) == 0x000008, "Wrong size on FCraftingObjectRepStateData");
static_assert(offsetof(FCraftingObjectRepStateData, CraftingObjectState) == 0x000000, "Member 'FCraftingObjectRepStateData::CraftingObjectState' has a wrong offset!");
static_assert(offsetof(FCraftingObjectRepStateData, StateChangeServerTime) == 0x000004, "Member 'FCraftingObjectRepStateData::StateChangeServerTime' has a wrong offset!");

// ScriptStruct CraftingRuntime.CraftingIngredientRequirement
// 0x0028 (0x0028 - 0x0000)
struct FCraftingIngredientRequirement final
{
public:
	struct FGameplayTagContainer                  IngredientTags;                                    // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCraftingIngredientRequirement) == 0x000008, "Wrong alignment on FCraftingIngredientRequirement");
static_assert(sizeof(FCraftingIngredientRequirement) == 0x000028, "Wrong size on FCraftingIngredientRequirement");
static_assert(offsetof(FCraftingIngredientRequirement, IngredientTags) == 0x000000, "Member 'FCraftingIngredientRequirement::IngredientTags' has a wrong offset!");
static_assert(offsetof(FCraftingIngredientRequirement, Count) == 0x000020, "Member 'FCraftingIngredientRequirement::Count' has a wrong offset!");

// ScriptStruct CraftingRuntime.CraftingFormula
// 0x0070 (0x0078 - 0x0008)
struct FCraftingFormula final : public FTableRowBase
{
public:
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         bEnabled : 1;                                      // 0x0020(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAlwaysKnownFormula : 1;                           // 0x0020(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bInstantlyConsumeIngredients : 1;                  // 0x0020(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           SourceObjectTag;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCraftingIngredientRequirement> RequiredIngredients;                               // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   ResultLootTierKey;                                 // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   WhileCraftingAbility;                              // 0x0040(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCraftingUpgradeRule>           UpgradeRules;                                      // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCraftingFormula) == 0x000008, "Wrong alignment on FCraftingFormula");
static_assert(sizeof(FCraftingFormula) == 0x000078, "Wrong size on FCraftingFormula");
static_assert(offsetof(FCraftingFormula, DisplayName) == 0x000008, "Member 'FCraftingFormula::DisplayName' has a wrong offset!");
static_assert(offsetof(FCraftingFormula, SourceObjectTag) == 0x000024, "Member 'FCraftingFormula::SourceObjectTag' has a wrong offset!");
static_assert(offsetof(FCraftingFormula, RequiredIngredients) == 0x000028, "Member 'FCraftingFormula::RequiredIngredients' has a wrong offset!");
static_assert(offsetof(FCraftingFormula, ResultLootTierKey) == 0x000038, "Member 'FCraftingFormula::ResultLootTierKey' has a wrong offset!");
static_assert(offsetof(FCraftingFormula, WhileCraftingAbility) == 0x000040, "Member 'FCraftingFormula::WhileCraftingAbility' has a wrong offset!");
static_assert(offsetof(FCraftingFormula, UpgradeRules) == 0x000068, "Member 'FCraftingFormula::UpgradeRules' has a wrong offset!");

// ScriptStruct CraftingRuntime.CraftingResult
// 0x0018 (0x0018 - 0x0000)
struct FCraftingResult final
{
public:
	class FName                                   ResultLootTierKey;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FItemAndCount>                  Results;                                           // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCraftingResult) == 0x000008, "Wrong alignment on FCraftingResult");
static_assert(sizeof(FCraftingResult) == 0x000018, "Wrong size on FCraftingResult");
static_assert(offsetof(FCraftingResult, ResultLootTierKey) == 0x000000, "Member 'FCraftingResult::ResultLootTierKey' has a wrong offset!");
static_assert(offsetof(FCraftingResult, Results) == 0x000008, "Member 'FCraftingResult::Results' has a wrong offset!");

// ScriptStruct CraftingRuntime.CraftingIngredientUIData
// 0x0040 (0x0048 - 0x0008)
struct FCraftingIngredientUIData final : public FTableRowBase
{
public:
	struct FGameplayTagContainer                  IngredientTags;                                    // 0x0008(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UFortItemDefinition>> ItemDefs;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UObject>>         Icons;                                             // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCraftingIngredientUIData) == 0x000008, "Wrong alignment on FCraftingIngredientUIData");
static_assert(sizeof(FCraftingIngredientUIData) == 0x000048, "Wrong size on FCraftingIngredientUIData");
static_assert(offsetof(FCraftingIngredientUIData, IngredientTags) == 0x000008, "Member 'FCraftingIngredientUIData::IngredientTags' has a wrong offset!");
static_assert(offsetof(FCraftingIngredientUIData, ItemDefs) == 0x000028, "Member 'FCraftingIngredientUIData::ItemDefs' has a wrong offset!");
static_assert(offsetof(FCraftingIngredientUIData, Icons) == 0x000038, "Member 'FCraftingIngredientUIData::Icons' has a wrong offset!");

// ScriptStruct CraftingRuntime.CraftingIngredientQueryState
// 0x0030 (0x0030 - 0x0000)
struct FCraftingIngredientQueryState final
{
public:
	struct FCraftingIngredientRequirement         Requirement;                                       // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         Owned;                                             // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Missing;                                           // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCraftingIngredientQueryState) == 0x000008, "Wrong alignment on FCraftingIngredientQueryState");
static_assert(sizeof(FCraftingIngredientQueryState) == 0x000030, "Wrong size on FCraftingIngredientQueryState");
static_assert(offsetof(FCraftingIngredientQueryState, Requirement) == 0x000000, "Member 'FCraftingIngredientQueryState::Requirement' has a wrong offset!");
static_assert(offsetof(FCraftingIngredientQueryState, Owned) == 0x000028, "Member 'FCraftingIngredientQueryState::Owned' has a wrong offset!");
static_assert(offsetof(FCraftingIngredientQueryState, Missing) == 0x00002C, "Member 'FCraftingIngredientQueryState::Missing' has a wrong offset!");

}

