#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BGA_Weed_Simple

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BGA_Weed_Simple.BGA_Weed_Simple_C
// 0x0138 (0x0AA8 - 0x0970)
class ABGA_Weed_Simple_C final : public ABuildingGameplayActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0970(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0978(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0980(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AB_SMA_Athena_RealitySapling_Parent_C*  Sapling;                                           // 0x0988(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class USoundBase*                             WeedPulledSound;                                   // 0x0990(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LerpTimerInterval;                                 // 0x0998(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99C[0x4];                                      // 0x099C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           LerpTimerHandle;                                   // 0x09A0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         Cur_Min_World_Scale;                               // 0x09A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Cur_Max_World_Scale;                               // 0x09AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Curr_World_Scale;                                  // 0x09B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale_Interp_Speed;                                // 0x09B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasReachedDestScale;                               // 0x09B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9B9[0x3];                                      // 0x09B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Start_World_Scale;                                 // 0x09BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Dest_World_Scale;                                  // 0x09C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ScaleOutAndDie;                                    // 0x09C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C5[0x3];                                      // 0x09C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             FloorHit;                                          // 0x09C8(0x00E0)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, ContainsInstancedReference, ExposeOnSpawn)

public:
	void AddWeedToSapling();
	void Base_Destroyed(class AActor* DestroyedActor);
	void Base_Died(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void Bind_To_Supporting_Actor_Destroyed();
	void BlueprintOnInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted);
	void Destroy();
	void DestroyWeed(class AFortPawn* NewParam);
	void ExecuteUbergraph_BGA_Weed_Simple(int32 EntryPoint);
	void OnDeathPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	bool OnInteractAllowedToConsume(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted);
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void Scale_Out_and_Die();
	void Set_Weed_Scale(float SizeAlpha);
	bool ShouldDie(float Damage, class AController* EventInstigator, class AActor* DamageCauser);
	void UpdateLerpToDest();
	void UserConstructionScript();

	bool BlueprintCanInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted, const ETInteractionType InteractionType) const;
	class FText BlueprintGetInteractionString(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BGA_Weed_Simple_C">();
	}
	static class ABGA_Weed_Simple_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABGA_Weed_Simple_C>();
	}
};
static_assert(alignof(ABGA_Weed_Simple_C) == 0x000008, "Wrong alignment on ABGA_Weed_Simple_C");
static_assert(sizeof(ABGA_Weed_Simple_C) == 0x000AA8, "Wrong size on ABGA_Weed_Simple_C");
static_assert(offsetof(ABGA_Weed_Simple_C, UberGraphFrame) == 0x000970, "Member 'ABGA_Weed_Simple_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABGA_Weed_Simple_C, StaticMesh) == 0x000978, "Member 'ABGA_Weed_Simple_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABGA_Weed_Simple_C, DefaultSceneRoot) == 0x000980, "Member 'ABGA_Weed_Simple_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABGA_Weed_Simple_C, Sapling) == 0x000988, "Member 'ABGA_Weed_Simple_C::Sapling' has a wrong offset!");
static_assert(offsetof(ABGA_Weed_Simple_C, WeedPulledSound) == 0x000990, "Member 'ABGA_Weed_Simple_C::WeedPulledSound' has a wrong offset!");
static_assert(offsetof(ABGA_Weed_Simple_C, LerpTimerInterval) == 0x000998, "Member 'ABGA_Weed_Simple_C::LerpTimerInterval' has a wrong offset!");
static_assert(offsetof(ABGA_Weed_Simple_C, LerpTimerHandle) == 0x0009A0, "Member 'ABGA_Weed_Simple_C::LerpTimerHandle' has a wrong offset!");
static_assert(offsetof(ABGA_Weed_Simple_C, Cur_Min_World_Scale) == 0x0009A8, "Member 'ABGA_Weed_Simple_C::Cur_Min_World_Scale' has a wrong offset!");
static_assert(offsetof(ABGA_Weed_Simple_C, Cur_Max_World_Scale) == 0x0009AC, "Member 'ABGA_Weed_Simple_C::Cur_Max_World_Scale' has a wrong offset!");
static_assert(offsetof(ABGA_Weed_Simple_C, Curr_World_Scale) == 0x0009B0, "Member 'ABGA_Weed_Simple_C::Curr_World_Scale' has a wrong offset!");
static_assert(offsetof(ABGA_Weed_Simple_C, Scale_Interp_Speed) == 0x0009B4, "Member 'ABGA_Weed_Simple_C::Scale_Interp_Speed' has a wrong offset!");
static_assert(offsetof(ABGA_Weed_Simple_C, HasReachedDestScale) == 0x0009B8, "Member 'ABGA_Weed_Simple_C::HasReachedDestScale' has a wrong offset!");
static_assert(offsetof(ABGA_Weed_Simple_C, Start_World_Scale) == 0x0009BC, "Member 'ABGA_Weed_Simple_C::Start_World_Scale' has a wrong offset!");
static_assert(offsetof(ABGA_Weed_Simple_C, Dest_World_Scale) == 0x0009C0, "Member 'ABGA_Weed_Simple_C::Dest_World_Scale' has a wrong offset!");
static_assert(offsetof(ABGA_Weed_Simple_C, ScaleOutAndDie) == 0x0009C4, "Member 'ABGA_Weed_Simple_C::ScaleOutAndDie' has a wrong offset!");
static_assert(offsetof(ABGA_Weed_Simple_C, FloorHit) == 0x0009C8, "Member 'ABGA_Weed_Simple_C::FloorHit' has a wrong offset!");

}

