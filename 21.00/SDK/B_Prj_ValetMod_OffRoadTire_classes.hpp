#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Prj_ValetMod_OffRoadTire

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "B_Prj_Athena_BGASpawner_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_Prj_ValetMod_OffRoadTire.B_Prj_ValetMod_OffRoadTire_C
// 0x0198 (0x0C20 - 0x0A88)
class AB_Prj_ValetMod_OffRoadTire_C final : public AB_Prj_Athena_BGASpawner_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_B_Prj_ValetMod_OffRoadTire_C;       // 0x0A88(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class URotatingMovementComponent*             RotatingMovement;                                  // 0x0A90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Tire;                                              // 0x0A98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ModTagToApply;                                     // 0x0AA0(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         SpeedToStop;                                       // 0x0AA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayerLaunchMultiplier;                            // 0x0AA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayerLaunchZMultiplier;                           // 0x0AAC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           TireFXSocketArray;                                 // 0x0AB0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         ShouldTirePilesBeStackable;                        // 0x0AC0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         ShouldLaunchHitPlayer;                             // 0x0AE8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         HitPlayerLaunchMag;                                // 0x0B10(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         HitPlayerLaunchZMulti;                             // 0x0B38(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          EnteredWater;                                      // 0x0B60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hit;                                               // 0x0B61(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B62[0x6];                                      // 0x0B62(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortWorldItemDefinition*               TireModWID;                                        // 0x0B68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFXSystemAsset*                         WaterSplashFX;                                     // 0x0B70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortAthenaVehicle*                     HitVehicle;                                        // 0x0B78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FScalableFloat                         HotfixSpawnPickUpIfStuckOnVehicle;                 // 0x0B80(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         ShouldApplyForay;                                  // 0x0BA8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         PhysicsObjectImpulseStrength;                      // 0x0BD0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         PhysicsObjectImpulseStrengthZMod;                  // 0x0BF8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void BndEvt__WaterInteractionComponent_K2Node_ComponentBoundEvent_0_WaterInteractionOnEnterWater__DelegateSignature(class AFortWaterBodyActor* WaterBody, class UFortWaterInteractionComponent* WaterInteractionComponent_0, bool bIsFirstBody);
	struct FVector CalculateLaunchVelocity(class AFortPawn* PlayerPawn);
	void ExecuteUbergraph_B_Prj_ValetMod_OffRoadTire(int32 EntryPoint);
	void HasEnteredWater();
	void OnStop(const struct FHitResult& Hit_0);
	void ParentHit();
	void ReceiveBeginPlay();
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit_0);
	void ResetHitVehicle();
	bool ShouldApplyMod(class AFortAthenaVehicle* Vehicle);
	void SpawnPickupMod();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_Prj_ValetMod_OffRoadTire_C">();
	}
	static class AB_Prj_ValetMod_OffRoadTire_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_Prj_ValetMod_OffRoadTire_C>();
	}
};
static_assert(alignof(AB_Prj_ValetMod_OffRoadTire_C) == 0x000008, "Wrong alignment on AB_Prj_ValetMod_OffRoadTire_C");
static_assert(sizeof(AB_Prj_ValetMod_OffRoadTire_C) == 0x000C20, "Wrong size on AB_Prj_ValetMod_OffRoadTire_C");
static_assert(offsetof(AB_Prj_ValetMod_OffRoadTire_C, UberGraphFrame_B_Prj_ValetMod_OffRoadTire_C) == 0x000A88, "Member 'AB_Prj_ValetMod_OffRoadTire_C::UberGraphFrame_B_Prj_ValetMod_OffRoadTire_C' has a wrong offset!");
static_assert(offsetof(AB_Prj_ValetMod_OffRoadTire_C, RotatingMovement) == 0x000A90, "Member 'AB_Prj_ValetMod_OffRoadTire_C::RotatingMovement' has a wrong offset!");
static_assert(offsetof(AB_Prj_ValetMod_OffRoadTire_C, Tire) == 0x000A98, "Member 'AB_Prj_ValetMod_OffRoadTire_C::Tire' has a wrong offset!");
static_assert(offsetof(AB_Prj_ValetMod_OffRoadTire_C, ModTagToApply) == 0x000AA0, "Member 'AB_Prj_ValetMod_OffRoadTire_C::ModTagToApply' has a wrong offset!");
static_assert(offsetof(AB_Prj_ValetMod_OffRoadTire_C, SpeedToStop) == 0x000AA4, "Member 'AB_Prj_ValetMod_OffRoadTire_C::SpeedToStop' has a wrong offset!");
static_assert(offsetof(AB_Prj_ValetMod_OffRoadTire_C, PlayerLaunchMultiplier) == 0x000AA8, "Member 'AB_Prj_ValetMod_OffRoadTire_C::PlayerLaunchMultiplier' has a wrong offset!");
static_assert(offsetof(AB_Prj_ValetMod_OffRoadTire_C, PlayerLaunchZMultiplier) == 0x000AAC, "Member 'AB_Prj_ValetMod_OffRoadTire_C::PlayerLaunchZMultiplier' has a wrong offset!");
static_assert(offsetof(AB_Prj_ValetMod_OffRoadTire_C, TireFXSocketArray) == 0x000AB0, "Member 'AB_Prj_ValetMod_OffRoadTire_C::TireFXSocketArray' has a wrong offset!");
static_assert(offsetof(AB_Prj_ValetMod_OffRoadTire_C, ShouldTirePilesBeStackable) == 0x000AC0, "Member 'AB_Prj_ValetMod_OffRoadTire_C::ShouldTirePilesBeStackable' has a wrong offset!");
static_assert(offsetof(AB_Prj_ValetMod_OffRoadTire_C, ShouldLaunchHitPlayer) == 0x000AE8, "Member 'AB_Prj_ValetMod_OffRoadTire_C::ShouldLaunchHitPlayer' has a wrong offset!");
static_assert(offsetof(AB_Prj_ValetMod_OffRoadTire_C, HitPlayerLaunchMag) == 0x000B10, "Member 'AB_Prj_ValetMod_OffRoadTire_C::HitPlayerLaunchMag' has a wrong offset!");
static_assert(offsetof(AB_Prj_ValetMod_OffRoadTire_C, HitPlayerLaunchZMulti) == 0x000B38, "Member 'AB_Prj_ValetMod_OffRoadTire_C::HitPlayerLaunchZMulti' has a wrong offset!");
static_assert(offsetof(AB_Prj_ValetMod_OffRoadTire_C, EnteredWater) == 0x000B60, "Member 'AB_Prj_ValetMod_OffRoadTire_C::EnteredWater' has a wrong offset!");
static_assert(offsetof(AB_Prj_ValetMod_OffRoadTire_C, Hit) == 0x000B61, "Member 'AB_Prj_ValetMod_OffRoadTire_C::Hit' has a wrong offset!");
static_assert(offsetof(AB_Prj_ValetMod_OffRoadTire_C, TireModWID) == 0x000B68, "Member 'AB_Prj_ValetMod_OffRoadTire_C::TireModWID' has a wrong offset!");
static_assert(offsetof(AB_Prj_ValetMod_OffRoadTire_C, WaterSplashFX) == 0x000B70, "Member 'AB_Prj_ValetMod_OffRoadTire_C::WaterSplashFX' has a wrong offset!");
static_assert(offsetof(AB_Prj_ValetMod_OffRoadTire_C, HitVehicle) == 0x000B78, "Member 'AB_Prj_ValetMod_OffRoadTire_C::HitVehicle' has a wrong offset!");
static_assert(offsetof(AB_Prj_ValetMod_OffRoadTire_C, HotfixSpawnPickUpIfStuckOnVehicle) == 0x000B80, "Member 'AB_Prj_ValetMod_OffRoadTire_C::HotfixSpawnPickUpIfStuckOnVehicle' has a wrong offset!");
static_assert(offsetof(AB_Prj_ValetMod_OffRoadTire_C, ShouldApplyForay) == 0x000BA8, "Member 'AB_Prj_ValetMod_OffRoadTire_C::ShouldApplyForay' has a wrong offset!");
static_assert(offsetof(AB_Prj_ValetMod_OffRoadTire_C, PhysicsObjectImpulseStrength) == 0x000BD0, "Member 'AB_Prj_ValetMod_OffRoadTire_C::PhysicsObjectImpulseStrength' has a wrong offset!");
static_assert(offsetof(AB_Prj_ValetMod_OffRoadTire_C, PhysicsObjectImpulseStrengthZMod) == 0x000BF8, "Member 'AB_Prj_ValetMod_OffRoadTire_C::PhysicsObjectImpulseStrengthZMod' has a wrong offset!");

}

