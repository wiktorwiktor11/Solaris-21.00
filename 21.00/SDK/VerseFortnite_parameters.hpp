#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VerseFortnite

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function VerseFortnite.FortControllerStateHandlerComponent.NotifyOfStateChange
// 0x0018 (0x0018 - 0x0000)
struct FortControllerStateHandlerComponent_NotifyOfStateChange final
{
public:
	class FString                                 State;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Active;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortControllerStateHandlerComponent_NotifyOfStateChange) == 0x000008, "Wrong alignment on FortControllerStateHandlerComponent_NotifyOfStateChange");
static_assert(sizeof(FortControllerStateHandlerComponent_NotifyOfStateChange) == 0x000018, "Wrong size on FortControllerStateHandlerComponent_NotifyOfStateChange");
static_assert(offsetof(FortControllerStateHandlerComponent_NotifyOfStateChange, State) == 0x000000, "Member 'FortControllerStateHandlerComponent_NotifyOfStateChange::State' has a wrong offset!");
static_assert(offsetof(FortControllerStateHandlerComponent_NotifyOfStateChange, Active) == 0x000010, "Member 'FortControllerStateHandlerComponent_NotifyOfStateChange::Active' has a wrong offset!");

// Function VerseFortnite.FortPlayspaceComponentHelper.HandlePlayerDied
// 0x0008 (0x0008 - 0x0000)
struct FortPlayspaceComponentHelper_HandlePlayerDied final
{
public:
	class AFortPlayerPawnAthena*                  FortPlayerPawnAthena;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayspaceComponentHelper_HandlePlayerDied) == 0x000008, "Wrong alignment on FortPlayspaceComponentHelper_HandlePlayerDied");
static_assert(sizeof(FortPlayspaceComponentHelper_HandlePlayerDied) == 0x000008, "Wrong size on FortPlayspaceComponentHelper_HandlePlayerDied");
static_assert(offsetof(FortPlayspaceComponentHelper_HandlePlayerDied, FortPlayerPawnAthena) == 0x000000, "Member 'FortPlayspaceComponentHelper_HandlePlayerDied::FortPlayerPawnAthena' has a wrong offset!");

// Function VerseFortnite.FortPlayspaceComponentHelper.HandlePlayerPawnPossessed
// 0x0008 (0x0008 - 0x0000)
struct FortPlayspaceComponentHelper_HandlePlayerPawnPossessed final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayspaceComponentHelper_HandlePlayerPawnPossessed) == 0x000008, "Wrong alignment on FortPlayspaceComponentHelper_HandlePlayerPawnPossessed");
static_assert(sizeof(FortPlayspaceComponentHelper_HandlePlayerPawnPossessed) == 0x000008, "Wrong size on FortPlayspaceComponentHelper_HandlePlayerPawnPossessed");
static_assert(offsetof(FortPlayspaceComponentHelper_HandlePlayerPawnPossessed, Pawn) == 0x000000, "Member 'FortPlayspaceComponentHelper_HandlePlayerPawnPossessed::Pawn' has a wrong offset!");

// Function VerseFortnite.HUDDynamicDirectorBase.ClientCreateScene
// 0x0010 (0x0010 - 0x0000)
struct HUDDynamicDirectorBase_ClientCreateScene final
{
public:
	class FString                                 SceneName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDDynamicDirectorBase_ClientCreateScene) == 0x000008, "Wrong alignment on HUDDynamicDirectorBase_ClientCreateScene");
static_assert(sizeof(HUDDynamicDirectorBase_ClientCreateScene) == 0x000010, "Wrong size on HUDDynamicDirectorBase_ClientCreateScene");
static_assert(offsetof(HUDDynamicDirectorBase_ClientCreateScene, SceneName) == 0x000000, "Member 'HUDDynamicDirectorBase_ClientCreateScene::SceneName' has a wrong offset!");

// Function VerseFortnite.HUDDynamicDirectorBase.ClientSetHUDCameraMode
// 0x0001 (0x0001 - 0x0000)
struct HUDDynamicDirectorBase_ClientSetHUDCameraMode final
{
public:
	bool                                          bCameraMode;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDDynamicDirectorBase_ClientSetHUDCameraMode) == 0x000001, "Wrong alignment on HUDDynamicDirectorBase_ClientSetHUDCameraMode");
static_assert(sizeof(HUDDynamicDirectorBase_ClientSetHUDCameraMode) == 0x000001, "Wrong size on HUDDynamicDirectorBase_ClientSetHUDCameraMode");
static_assert(offsetof(HUDDynamicDirectorBase_ClientSetHUDCameraMode, bCameraMode) == 0x000000, "Member 'HUDDynamicDirectorBase_ClientSetHUDCameraMode::bCameraMode' has a wrong offset!");

// Function VerseFortnite.HUDDynamicDirectorBase.ClientSetSceneWidgetAlignment
// 0x0030 (0x0030 - 0x0000)
struct HUDDynamicDirectorBase_ClientSetSceneWidgetAlignment final
{
public:
	class FString                                 SceneName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WidgetUniqueID;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HorizontalAlignment;                               // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VerticalAlignment;                                 // 0x0024(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Anchor;                                            // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HUDDynamicDirectorBase_ClientSetSceneWidgetAlignment) == 0x000008, "Wrong alignment on HUDDynamicDirectorBase_ClientSetSceneWidgetAlignment");
static_assert(sizeof(HUDDynamicDirectorBase_ClientSetSceneWidgetAlignment) == 0x000030, "Wrong size on HUDDynamicDirectorBase_ClientSetSceneWidgetAlignment");
static_assert(offsetof(HUDDynamicDirectorBase_ClientSetSceneWidgetAlignment, SceneName) == 0x000000, "Member 'HUDDynamicDirectorBase_ClientSetSceneWidgetAlignment::SceneName' has a wrong offset!");
static_assert(offsetof(HUDDynamicDirectorBase_ClientSetSceneWidgetAlignment, WidgetUniqueID) == 0x000010, "Member 'HUDDynamicDirectorBase_ClientSetSceneWidgetAlignment::WidgetUniqueID' has a wrong offset!");
static_assert(offsetof(HUDDynamicDirectorBase_ClientSetSceneWidgetAlignment, HorizontalAlignment) == 0x000020, "Member 'HUDDynamicDirectorBase_ClientSetSceneWidgetAlignment::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(HUDDynamicDirectorBase_ClientSetSceneWidgetAlignment, VerticalAlignment) == 0x000024, "Member 'HUDDynamicDirectorBase_ClientSetSceneWidgetAlignment::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(HUDDynamicDirectorBase_ClientSetSceneWidgetAlignment, Anchor) == 0x000028, "Member 'HUDDynamicDirectorBase_ClientSetSceneWidgetAlignment::Anchor' has a wrong offset!");

// Function VerseFortnite.HUDDynamicDirectorBase.ClientSetSceneWidgetAttachment
// 0x0050 (0x0050 - 0x0000)
struct HUDDynamicDirectorBase_ClientSetSceneWidgetAttachment final
{
public:
	class FString                                 SceneName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WidgetUniqueID;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WidgetAnchor;                                      // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TargetUniqueID;                                    // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetClassName;                                   // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetAnchor;                                      // 0x0048(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HUDDynamicDirectorBase_ClientSetSceneWidgetAttachment) == 0x000008, "Wrong alignment on HUDDynamicDirectorBase_ClientSetSceneWidgetAttachment");
static_assert(sizeof(HUDDynamicDirectorBase_ClientSetSceneWidgetAttachment) == 0x000050, "Wrong size on HUDDynamicDirectorBase_ClientSetSceneWidgetAttachment");
static_assert(offsetof(HUDDynamicDirectorBase_ClientSetSceneWidgetAttachment, SceneName) == 0x000000, "Member 'HUDDynamicDirectorBase_ClientSetSceneWidgetAttachment::SceneName' has a wrong offset!");
static_assert(offsetof(HUDDynamicDirectorBase_ClientSetSceneWidgetAttachment, WidgetUniqueID) == 0x000010, "Member 'HUDDynamicDirectorBase_ClientSetSceneWidgetAttachment::WidgetUniqueID' has a wrong offset!");
static_assert(offsetof(HUDDynamicDirectorBase_ClientSetSceneWidgetAttachment, WidgetAnchor) == 0x000020, "Member 'HUDDynamicDirectorBase_ClientSetSceneWidgetAttachment::WidgetAnchor' has a wrong offset!");
static_assert(offsetof(HUDDynamicDirectorBase_ClientSetSceneWidgetAttachment, TargetUniqueID) == 0x000028, "Member 'HUDDynamicDirectorBase_ClientSetSceneWidgetAttachment::TargetUniqueID' has a wrong offset!");
static_assert(offsetof(HUDDynamicDirectorBase_ClientSetSceneWidgetAttachment, TargetClassName) == 0x000038, "Member 'HUDDynamicDirectorBase_ClientSetSceneWidgetAttachment::TargetClassName' has a wrong offset!");
static_assert(offsetof(HUDDynamicDirectorBase_ClientSetSceneWidgetAttachment, TargetAnchor) == 0x000048, "Member 'HUDDynamicDirectorBase_ClientSetSceneWidgetAttachment::TargetAnchor' has a wrong offset!");

// Function VerseFortnite.HUDDynamicDirectorBase.ClientSetSceneWidgetClassAndUniqueID
// 0x0030 (0x0030 - 0x0000)
struct HUDDynamicDirectorBase_ClientSetSceneWidgetClassAndUniqueID final
{
public:
	class FString                                 SceneName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WidgetUniqueID;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WidgetClassName;                                   // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDDynamicDirectorBase_ClientSetSceneWidgetClassAndUniqueID) == 0x000008, "Wrong alignment on HUDDynamicDirectorBase_ClientSetSceneWidgetClassAndUniqueID");
static_assert(sizeof(HUDDynamicDirectorBase_ClientSetSceneWidgetClassAndUniqueID) == 0x000030, "Wrong size on HUDDynamicDirectorBase_ClientSetSceneWidgetClassAndUniqueID");
static_assert(offsetof(HUDDynamicDirectorBase_ClientSetSceneWidgetClassAndUniqueID, SceneName) == 0x000000, "Member 'HUDDynamicDirectorBase_ClientSetSceneWidgetClassAndUniqueID::SceneName' has a wrong offset!");
static_assert(offsetof(HUDDynamicDirectorBase_ClientSetSceneWidgetClassAndUniqueID, WidgetUniqueID) == 0x000010, "Member 'HUDDynamicDirectorBase_ClientSetSceneWidgetClassAndUniqueID::WidgetUniqueID' has a wrong offset!");
static_assert(offsetof(HUDDynamicDirectorBase_ClientSetSceneWidgetClassAndUniqueID, WidgetClassName) == 0x000020, "Member 'HUDDynamicDirectorBase_ClientSetSceneWidgetClassAndUniqueID::WidgetClassName' has a wrong offset!");

// Function VerseFortnite.HUDDynamicDirectorBase.ClientSetSceneWidgetPosition
// 0x0028 (0x0028 - 0x0000)
struct HUDDynamicDirectorBase_ClientSetSceneWidgetPosition final
{
public:
	class FString                                 SceneName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WidgetUniqueID;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         X;                                                 // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0024(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDDynamicDirectorBase_ClientSetSceneWidgetPosition) == 0x000008, "Wrong alignment on HUDDynamicDirectorBase_ClientSetSceneWidgetPosition");
static_assert(sizeof(HUDDynamicDirectorBase_ClientSetSceneWidgetPosition) == 0x000028, "Wrong size on HUDDynamicDirectorBase_ClientSetSceneWidgetPosition");
static_assert(offsetof(HUDDynamicDirectorBase_ClientSetSceneWidgetPosition, SceneName) == 0x000000, "Member 'HUDDynamicDirectorBase_ClientSetSceneWidgetPosition::SceneName' has a wrong offset!");
static_assert(offsetof(HUDDynamicDirectorBase_ClientSetSceneWidgetPosition, WidgetUniqueID) == 0x000010, "Member 'HUDDynamicDirectorBase_ClientSetSceneWidgetPosition::WidgetUniqueID' has a wrong offset!");
static_assert(offsetof(HUDDynamicDirectorBase_ClientSetSceneWidgetPosition, X) == 0x000020, "Member 'HUDDynamicDirectorBase_ClientSetSceneWidgetPosition::X' has a wrong offset!");
static_assert(offsetof(HUDDynamicDirectorBase_ClientSetSceneWidgetPosition, Y) == 0x000024, "Member 'HUDDynamicDirectorBase_ClientSetSceneWidgetPosition::Y' has a wrong offset!");

// Function VerseFortnite.HUDDynamicDirectorBase.ServerWidgetMessage
// 0x0020 (0x0020 - 0x0000)
struct HUDDynamicDirectorBase_ServerWidgetMessage final
{
public:
	class FString                                 MessageID;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MessageData;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDDynamicDirectorBase_ServerWidgetMessage) == 0x000008, "Wrong alignment on HUDDynamicDirectorBase_ServerWidgetMessage");
static_assert(sizeof(HUDDynamicDirectorBase_ServerWidgetMessage) == 0x000020, "Wrong size on HUDDynamicDirectorBase_ServerWidgetMessage");
static_assert(offsetof(HUDDynamicDirectorBase_ServerWidgetMessage, MessageID) == 0x000000, "Member 'HUDDynamicDirectorBase_ServerWidgetMessage::MessageID' has a wrong offset!");
static_assert(offsetof(HUDDynamicDirectorBase_ServerWidgetMessage, MessageData) == 0x000010, "Member 'HUDDynamicDirectorBase_ServerWidgetMessage::MessageData' has a wrong offset!");

// Function VerseFortnite.HUDGameOverComponentBase.GetIsDraw
// 0x0001 (0x0001 - 0x0000)
struct HUDGameOverComponentBase_GetIsDraw final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDGameOverComponentBase_GetIsDraw) == 0x000001, "Wrong alignment on HUDGameOverComponentBase_GetIsDraw");
static_assert(sizeof(HUDGameOverComponentBase_GetIsDraw) == 0x000001, "Wrong size on HUDGameOverComponentBase_GetIsDraw");
static_assert(offsetof(HUDGameOverComponentBase_GetIsDraw, ReturnValue) == 0x000000, "Member 'HUDGameOverComponentBase_GetIsDraw::ReturnValue' has a wrong offset!");

// Function VerseFortnite.HUDGameOverComponentBase.GetWinningTeam
// 0x0004 (0x0004 - 0x0000)
struct HUDGameOverComponentBase_GetWinningTeam final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDGameOverComponentBase_GetWinningTeam) == 0x000004, "Wrong alignment on HUDGameOverComponentBase_GetWinningTeam");
static_assert(sizeof(HUDGameOverComponentBase_GetWinningTeam) == 0x000004, "Wrong size on HUDGameOverComponentBase_GetWinningTeam");
static_assert(offsetof(HUDGameOverComponentBase_GetWinningTeam, ReturnValue) == 0x000000, "Member 'HUDGameOverComponentBase_GetWinningTeam::ReturnValue' has a wrong offset!");

// Function VerseFortnite.HUDMapComponentBase.HandleMapBoundsChanged
// 0x0038 (0x0038 - 0x0000)
struct HUDMapComponentBase_HandleMapBoundsChanged final
{
public:
	struct FBox                                   newBounds;                                         // 0x0000(0x0038)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDMapComponentBase_HandleMapBoundsChanged) == 0x000008, "Wrong alignment on HUDMapComponentBase_HandleMapBoundsChanged");
static_assert(sizeof(HUDMapComponentBase_HandleMapBoundsChanged) == 0x000038, "Wrong size on HUDMapComponentBase_HandleMapBoundsChanged");
static_assert(offsetof(HUDMapComponentBase_HandleMapBoundsChanged, newBounds) == 0x000000, "Member 'HUDMapComponentBase_HandleMapBoundsChanged::newBounds' has a wrong offset!");

// Function VerseFortnite.HUDMessageComponentBase.Client_DirectorTestScene
// 0x0010 (0x0010 - 0x0000)
struct HUDMessageComponentBase_Client_DirectorTestScene final
{
public:
	class FString                                 SceneName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDMessageComponentBase_Client_DirectorTestScene) == 0x000008, "Wrong alignment on HUDMessageComponentBase_Client_DirectorTestScene");
static_assert(sizeof(HUDMessageComponentBase_Client_DirectorTestScene) == 0x000010, "Wrong size on HUDMessageComponentBase_Client_DirectorTestScene");
static_assert(offsetof(HUDMessageComponentBase_Client_DirectorTestScene, SceneName) == 0x000000, "Member 'HUDMessageComponentBase_Client_DirectorTestScene::SceneName' has a wrong offset!");

}

