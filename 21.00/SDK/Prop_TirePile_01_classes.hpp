#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Prop_TirePile_01

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Prop_TirePile_01.Prop_TirePile_01_C
// 0x0090 (0x0F00 - 0x0E70)
class AProp_TirePile_01_C : public ABuildingProp
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0E70(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBuildingActorLootDropOnDeathComponent_C* BuildingActorLootDropOnDeathComponent;             // 0x0E78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Jump_Collision;                                    // 0x0E80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         BounceHeight;                                      // 0x0E88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         JumpHeight;                                        // 0x0E8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FinalBounceJumpHeight;                             // 0x0E90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E94[0x4];                                      // 0x0E94(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UForceFeedbackEffect*                   LaunchForceFeedback;                               // 0x0E98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPawn*                              OverlapPawn;                                       // 0x0EA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerController*                  OverlapController;                                 // 0x0EA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_PlayerLaunched;                                 // 0x0EB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             TireSound;                                         // 0x0EB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NoCeilingBounceHeight;                             // 0x0EC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Final_Bounce_X_Vector;                             // 0x0EC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Final_Bounce_Y_Vector;                             // 0x0EC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OrientationMultiplier;                             // 0x0ECC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BBouncingProjectile;                               // 0x0ED0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_ED1[0x7];                                      // 0x0ED1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BounceLocation;                                    // 0x0ED8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinNonPawnVelocity;                                // 0x0EF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxNonPawnVelocity;                                // 0x0EF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ProjectileLaunchDistanceMultiplier;                // 0x0EF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BounceXYVelocityMofifier;                          // 0x0EFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__Jump_Collision_K2Node_ComponentBoundEvent_252_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void CeilingCheck(bool* Success);
	struct FVector CheckJumpingOrientation();
	void CustomEvent();
	void ExecuteUbergraph_Prop_TirePile_01(int32 EntryPoint);
	void MakeWobbleEffect(const struct FVector& Center);
	void Reset_Bounce_Sound();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Prop_TirePile_01_C">();
	}
	static class AProp_TirePile_01_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProp_TirePile_01_C>();
	}
};
static_assert(alignof(AProp_TirePile_01_C) == 0x000008, "Wrong alignment on AProp_TirePile_01_C");
static_assert(sizeof(AProp_TirePile_01_C) == 0x000F00, "Wrong size on AProp_TirePile_01_C");
static_assert(offsetof(AProp_TirePile_01_C, UberGraphFrame) == 0x000E70, "Member 'AProp_TirePile_01_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AProp_TirePile_01_C, BuildingActorLootDropOnDeathComponent) == 0x000E78, "Member 'AProp_TirePile_01_C::BuildingActorLootDropOnDeathComponent' has a wrong offset!");
static_assert(offsetof(AProp_TirePile_01_C, Jump_Collision) == 0x000E80, "Member 'AProp_TirePile_01_C::Jump_Collision' has a wrong offset!");
static_assert(offsetof(AProp_TirePile_01_C, BounceHeight) == 0x000E88, "Member 'AProp_TirePile_01_C::BounceHeight' has a wrong offset!");
static_assert(offsetof(AProp_TirePile_01_C, JumpHeight) == 0x000E8C, "Member 'AProp_TirePile_01_C::JumpHeight' has a wrong offset!");
static_assert(offsetof(AProp_TirePile_01_C, FinalBounceJumpHeight) == 0x000E90, "Member 'AProp_TirePile_01_C::FinalBounceJumpHeight' has a wrong offset!");
static_assert(offsetof(AProp_TirePile_01_C, LaunchForceFeedback) == 0x000E98, "Member 'AProp_TirePile_01_C::LaunchForceFeedback' has a wrong offset!");
static_assert(offsetof(AProp_TirePile_01_C, OverlapPawn) == 0x000EA0, "Member 'AProp_TirePile_01_C::OverlapPawn' has a wrong offset!");
static_assert(offsetof(AProp_TirePile_01_C, OverlapController) == 0x000EA8, "Member 'AProp_TirePile_01_C::OverlapController' has a wrong offset!");
static_assert(offsetof(AProp_TirePile_01_C, GE_PlayerLaunched) == 0x000EB0, "Member 'AProp_TirePile_01_C::GE_PlayerLaunched' has a wrong offset!");
static_assert(offsetof(AProp_TirePile_01_C, TireSound) == 0x000EB8, "Member 'AProp_TirePile_01_C::TireSound' has a wrong offset!");
static_assert(offsetof(AProp_TirePile_01_C, NoCeilingBounceHeight) == 0x000EC0, "Member 'AProp_TirePile_01_C::NoCeilingBounceHeight' has a wrong offset!");
static_assert(offsetof(AProp_TirePile_01_C, Final_Bounce_X_Vector) == 0x000EC4, "Member 'AProp_TirePile_01_C::Final_Bounce_X_Vector' has a wrong offset!");
static_assert(offsetof(AProp_TirePile_01_C, Final_Bounce_Y_Vector) == 0x000EC8, "Member 'AProp_TirePile_01_C::Final_Bounce_Y_Vector' has a wrong offset!");
static_assert(offsetof(AProp_TirePile_01_C, OrientationMultiplier) == 0x000ECC, "Member 'AProp_TirePile_01_C::OrientationMultiplier' has a wrong offset!");
static_assert(offsetof(AProp_TirePile_01_C, BBouncingProjectile) == 0x000ED0, "Member 'AProp_TirePile_01_C::BBouncingProjectile' has a wrong offset!");
static_assert(offsetof(AProp_TirePile_01_C, BounceLocation) == 0x000ED8, "Member 'AProp_TirePile_01_C::BounceLocation' has a wrong offset!");
static_assert(offsetof(AProp_TirePile_01_C, MinNonPawnVelocity) == 0x000EF0, "Member 'AProp_TirePile_01_C::MinNonPawnVelocity' has a wrong offset!");
static_assert(offsetof(AProp_TirePile_01_C, MaxNonPawnVelocity) == 0x000EF4, "Member 'AProp_TirePile_01_C::MaxNonPawnVelocity' has a wrong offset!");
static_assert(offsetof(AProp_TirePile_01_C, ProjectileLaunchDistanceMultiplier) == 0x000EF8, "Member 'AProp_TirePile_01_C::ProjectileLaunchDistanceMultiplier' has a wrong offset!");
static_assert(offsetof(AProp_TirePile_01_C, BounceXYVelocityMofifier) == 0x000EFC, "Member 'AProp_TirePile_01_C::BounceXYVelocityMofifier' has a wrong offset!");

}

