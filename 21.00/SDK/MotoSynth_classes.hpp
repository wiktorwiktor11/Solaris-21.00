#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MotoSynth

#include "Basic.hpp"

#include "MotoSynth_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "AudioMixer_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Class MotoSynth.MotoSynthPreset
// 0x0138 (0x0160 - 0x0028)
class UMotoSynthPreset final : public UObject
{
public:
	struct FMotoSynthRuntimeSettings              Settings;                                          // 0x0028(0x0138)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MotoSynthPreset">();
	}
	static class UMotoSynthPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMotoSynthPreset>();
	}
};
static_assert(alignof(UMotoSynthPreset) == 0x000008, "Wrong alignment on UMotoSynthPreset");
static_assert(sizeof(UMotoSynthPreset) == 0x000160, "Wrong size on UMotoSynthPreset");
static_assert(offsetof(UMotoSynthPreset, Settings) == 0x000028, "Member 'UMotoSynthPreset::Settings' has a wrong offset!");

// Class MotoSynth.MotoSynthSource
// 0x00D0 (0x00F8 - 0x0028)
class UMotoSynthSource final : public UObject
{
public:
	bool                                          bConvertTo8Bit;                                    // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DownSampleFactor;                                  // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     RPMCurve;                                          // 0x0030(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<float>                                 SourceData;                                        // 0x00B8(0x0010)(ZeroConstructor, Deprecated, Protected, NativeAccessSpecifierProtected)
	TArray<int16>                                 SourceDataPCM;                                     // 0x00C8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                         SourceSampleRate;                                  // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGrainTableEntry>               GrainTable;                                        // 0x00E0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MotoSynthSource">();
	}
	static class UMotoSynthSource* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMotoSynthSource>();
	}
};
static_assert(alignof(UMotoSynthSource) == 0x000008, "Wrong alignment on UMotoSynthSource");
static_assert(sizeof(UMotoSynthSource) == 0x0000F8, "Wrong size on UMotoSynthSource");
static_assert(offsetof(UMotoSynthSource, bConvertTo8Bit) == 0x000028, "Member 'UMotoSynthSource::bConvertTo8Bit' has a wrong offset!");
static_assert(offsetof(UMotoSynthSource, DownSampleFactor) == 0x00002C, "Member 'UMotoSynthSource::DownSampleFactor' has a wrong offset!");
static_assert(offsetof(UMotoSynthSource, RPMCurve) == 0x000030, "Member 'UMotoSynthSource::RPMCurve' has a wrong offset!");
static_assert(offsetof(UMotoSynthSource, SourceData) == 0x0000B8, "Member 'UMotoSynthSource::SourceData' has a wrong offset!");
static_assert(offsetof(UMotoSynthSource, SourceDataPCM) == 0x0000C8, "Member 'UMotoSynthSource::SourceDataPCM' has a wrong offset!");
static_assert(offsetof(UMotoSynthSource, SourceSampleRate) == 0x0000D8, "Member 'UMotoSynthSource::SourceSampleRate' has a wrong offset!");
static_assert(offsetof(UMotoSynthSource, GrainTable) == 0x0000E0, "Member 'UMotoSynthSource::GrainTable' has a wrong offset!");

// Class MotoSynth.SynthComponentMoto
// 0x01A0 (0x0910 - 0x0770)
class USynthComponentMoto final : public USynthComponent
{
public:
	class UMotoSynthPreset*                       MotoSynthPreset;                                   // 0x0770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RPM;                                               // 0x0778(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_77C[0x194];                                    // 0x077C(0x0194)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GetRPMRange(float* OutMinRPM, float* OutMaxRPM);
	void SetRPM(float InRPM, float InTimeSec);
	void SetSettings(const struct FMotoSynthRuntimeSettings& InSettings);

	bool IsEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SynthComponentMoto">();
	}
	static class USynthComponentMoto* GetDefaultObj()
	{
		return GetDefaultObjImpl<USynthComponentMoto>();
	}
};
static_assert(alignof(USynthComponentMoto) == 0x000010, "Wrong alignment on USynthComponentMoto");
static_assert(sizeof(USynthComponentMoto) == 0x000910, "Wrong size on USynthComponentMoto");
static_assert(offsetof(USynthComponentMoto, MotoSynthPreset) == 0x000770, "Member 'USynthComponentMoto::MotoSynthPreset' has a wrong offset!");
static_assert(offsetof(USynthComponentMoto, RPM) == 0x000778, "Member 'USynthComponentMoto::RPM' has a wrong offset!");

}

