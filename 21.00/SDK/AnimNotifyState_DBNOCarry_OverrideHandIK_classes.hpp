#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimNotifyState_DBNOCarry_OverrideHandIK

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass AnimNotifyState_DBNOCarry_OverrideHandIK.AnimNotifyState_DBNOCarry_OverrideHandIK_C
// 0x02D0 (0x0300 - 0x0030)
class UAnimNotifyState_DBNOCarry_OverrideHandIK_C final : public UAnimNotifyState
{
public:
	struct FVector                                CMFtoCMMLeftHand;                                  // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CMFtoCMMRightHand;                                 // 0x0048(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CMFtoCMFLeftHand;                                  // 0x0060(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CMFtoCMFRightHand;                                 // 0x0078(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CMFtoCLMLeftHand;                                  // 0x0090(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CMFtoCLMRightHand;                                 // 0x00A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CMFtoCLFLeftHand;                                  // 0x00C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CMFtoCLFRightHand;                                 // 0x00D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CMMtoCMFLeftHand;                                  // 0x00F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CMMtoCMFRightHand;                                 // 0x0108(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CMMtoCLMLeftHand;                                  // 0x0120(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CMMtoCLMRightHand;                                 // 0x0138(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CMMtoCLFLeftHand;                                  // 0x0150(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CMMtoCLFRightHand;                                 // 0x0168(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CLFtoCLMLeftHand;                                  // 0x0180(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CLFtoCLMRightHand;                                 // 0x0198(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CLFtoCLFLeftHand;                                  // 0x01B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CLFtoCLFRightHand;                                 // 0x01C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CLFtoCMFLeftHand;                                  // 0x01E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CLFtoCMFRightHand;                                 // 0x01F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CLFtoCMMLeftHand;                                  // 0x0210(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CLFtoCMMRightHand;                                 // 0x0228(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CLMtoCLFLeftHand;                                  // 0x0240(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CLMtoCLFRightHand;                                 // 0x0258(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CLMtoCLMLeftHand;                                  // 0x0270(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CLMtoCLMRightHand;                                 // 0x0288(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CLMtoCMMLeftHand;                                  // 0x02A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CLMtoCMMRightHand;                                 // 0x02B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CLMtoCMFLeftHand;                                  // 0x02D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CLMtoCMFRightHand;                                 // 0x02E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	bool Received_NotifyEnd(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, const struct FAnimNotifyEventReference& EventReference) const;
	bool Received_NotifyBegin(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration, const struct FAnimNotifyEventReference& EventReference) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AnimNotifyState_DBNOCarry_OverrideHandIK_C">();
	}
	static class UAnimNotifyState_DBNOCarry_OverrideHandIK_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_DBNOCarry_OverrideHandIK_C>();
	}
};
static_assert(alignof(UAnimNotifyState_DBNOCarry_OverrideHandIK_C) == 0x000008, "Wrong alignment on UAnimNotifyState_DBNOCarry_OverrideHandIK_C");
static_assert(sizeof(UAnimNotifyState_DBNOCarry_OverrideHandIK_C) == 0x000300, "Wrong size on UAnimNotifyState_DBNOCarry_OverrideHandIK_C");
static_assert(offsetof(UAnimNotifyState_DBNOCarry_OverrideHandIK_C, CMFtoCMMLeftHand) == 0x000030, "Member 'UAnimNotifyState_DBNOCarry_OverrideHandIK_C::CMFtoCMMLeftHand' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_DBNOCarry_OverrideHandIK_C, CMFtoCMMRightHand) == 0x000048, "Member 'UAnimNotifyState_DBNOCarry_OverrideHandIK_C::CMFtoCMMRightHand' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_DBNOCarry_OverrideHandIK_C, CMFtoCMFLeftHand) == 0x000060, "Member 'UAnimNotifyState_DBNOCarry_OverrideHandIK_C::CMFtoCMFLeftHand' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_DBNOCarry_OverrideHandIK_C, CMFtoCMFRightHand) == 0x000078, "Member 'UAnimNotifyState_DBNOCarry_OverrideHandIK_C::CMFtoCMFRightHand' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_DBNOCarry_OverrideHandIK_C, CMFtoCLMLeftHand) == 0x000090, "Member 'UAnimNotifyState_DBNOCarry_OverrideHandIK_C::CMFtoCLMLeftHand' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_DBNOCarry_OverrideHandIK_C, CMFtoCLMRightHand) == 0x0000A8, "Member 'UAnimNotifyState_DBNOCarry_OverrideHandIK_C::CMFtoCLMRightHand' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_DBNOCarry_OverrideHandIK_C, CMFtoCLFLeftHand) == 0x0000C0, "Member 'UAnimNotifyState_DBNOCarry_OverrideHandIK_C::CMFtoCLFLeftHand' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_DBNOCarry_OverrideHandIK_C, CMFtoCLFRightHand) == 0x0000D8, "Member 'UAnimNotifyState_DBNOCarry_OverrideHandIK_C::CMFtoCLFRightHand' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_DBNOCarry_OverrideHandIK_C, CMMtoCMFLeftHand) == 0x0000F0, "Member 'UAnimNotifyState_DBNOCarry_OverrideHandIK_C::CMMtoCMFLeftHand' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_DBNOCarry_OverrideHandIK_C, CMMtoCMFRightHand) == 0x000108, "Member 'UAnimNotifyState_DBNOCarry_OverrideHandIK_C::CMMtoCMFRightHand' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_DBNOCarry_OverrideHandIK_C, CMMtoCLMLeftHand) == 0x000120, "Member 'UAnimNotifyState_DBNOCarry_OverrideHandIK_C::CMMtoCLMLeftHand' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_DBNOCarry_OverrideHandIK_C, CMMtoCLMRightHand) == 0x000138, "Member 'UAnimNotifyState_DBNOCarry_OverrideHandIK_C::CMMtoCLMRightHand' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_DBNOCarry_OverrideHandIK_C, CMMtoCLFLeftHand) == 0x000150, "Member 'UAnimNotifyState_DBNOCarry_OverrideHandIK_C::CMMtoCLFLeftHand' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_DBNOCarry_OverrideHandIK_C, CMMtoCLFRightHand) == 0x000168, "Member 'UAnimNotifyState_DBNOCarry_OverrideHandIK_C::CMMtoCLFRightHand' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_DBNOCarry_OverrideHandIK_C, CLFtoCLMLeftHand) == 0x000180, "Member 'UAnimNotifyState_DBNOCarry_OverrideHandIK_C::CLFtoCLMLeftHand' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_DBNOCarry_OverrideHandIK_C, CLFtoCLMRightHand) == 0x000198, "Member 'UAnimNotifyState_DBNOCarry_OverrideHandIK_C::CLFtoCLMRightHand' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_DBNOCarry_OverrideHandIK_C, CLFtoCLFLeftHand) == 0x0001B0, "Member 'UAnimNotifyState_DBNOCarry_OverrideHandIK_C::CLFtoCLFLeftHand' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_DBNOCarry_OverrideHandIK_C, CLFtoCLFRightHand) == 0x0001C8, "Member 'UAnimNotifyState_DBNOCarry_OverrideHandIK_C::CLFtoCLFRightHand' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_DBNOCarry_OverrideHandIK_C, CLFtoCMFLeftHand) == 0x0001E0, "Member 'UAnimNotifyState_DBNOCarry_OverrideHandIK_C::CLFtoCMFLeftHand' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_DBNOCarry_OverrideHandIK_C, CLFtoCMFRightHand) == 0x0001F8, "Member 'UAnimNotifyState_DBNOCarry_OverrideHandIK_C::CLFtoCMFRightHand' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_DBNOCarry_OverrideHandIK_C, CLFtoCMMLeftHand) == 0x000210, "Member 'UAnimNotifyState_DBNOCarry_OverrideHandIK_C::CLFtoCMMLeftHand' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_DBNOCarry_OverrideHandIK_C, CLFtoCMMRightHand) == 0x000228, "Member 'UAnimNotifyState_DBNOCarry_OverrideHandIK_C::CLFtoCMMRightHand' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_DBNOCarry_OverrideHandIK_C, CLMtoCLFLeftHand) == 0x000240, "Member 'UAnimNotifyState_DBNOCarry_OverrideHandIK_C::CLMtoCLFLeftHand' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_DBNOCarry_OverrideHandIK_C, CLMtoCLFRightHand) == 0x000258, "Member 'UAnimNotifyState_DBNOCarry_OverrideHandIK_C::CLMtoCLFRightHand' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_DBNOCarry_OverrideHandIK_C, CLMtoCLMLeftHand) == 0x000270, "Member 'UAnimNotifyState_DBNOCarry_OverrideHandIK_C::CLMtoCLMLeftHand' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_DBNOCarry_OverrideHandIK_C, CLMtoCLMRightHand) == 0x000288, "Member 'UAnimNotifyState_DBNOCarry_OverrideHandIK_C::CLMtoCLMRightHand' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_DBNOCarry_OverrideHandIK_C, CLMtoCMMLeftHand) == 0x0002A0, "Member 'UAnimNotifyState_DBNOCarry_OverrideHandIK_C::CLMtoCMMLeftHand' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_DBNOCarry_OverrideHandIK_C, CLMtoCMMRightHand) == 0x0002B8, "Member 'UAnimNotifyState_DBNOCarry_OverrideHandIK_C::CLMtoCMMRightHand' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_DBNOCarry_OverrideHandIK_C, CLMtoCMFLeftHand) == 0x0002D0, "Member 'UAnimNotifyState_DBNOCarry_OverrideHandIK_C::CLMtoCMFLeftHand' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_DBNOCarry_OverrideHandIK_C, CLMtoCMFRightHand) == 0x0002E8, "Member 'UAnimNotifyState_DBNOCarry_OverrideHandIK_C::CLMtoCMFRightHand' has a wrong offset!");

}

