#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VkEngineTypes

#include "Basic.hpp"

#include "JsonUtilities_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum VkEngineTypes.EValkyrieProjectBindingsDescriptorFileVersion
// NumValues: 0x0005
enum class EValkyrieProjectBindingsDescriptorFileVersion : uint8
{
	Invalid                                  = 0,
	Initial                                  = 1,
	LatestPlusOne                            = 2,
	Latest                                   = 1,
	EValkyrieProjectBindingsDescriptorFileVersion_MAX = 3,
};

// Enum VkEngineTypes.EConsumerRole
// NumValues: 0x0004
enum class EConsumerRole : uint8
{
	Server                                   = 0,
	Client                                   = 1,
	Editor                                   = 2,
	EConsumerRole_MAX                        = 3,
};

// Enum VkEngineTypes.EVkLinkPublishMode
// NumValues: 0x0003
enum class EVkLinkPublishMode : uint8
{
	Live                                     = 0,
	Playtest                                 = 1,
	EVkLinkPublishMode_MAX                   = 2,
};

// Enum VkEngineTypes.EVkModuleAccess
// NumValues: 0x0004
enum class EVkModuleAccess : uint8
{
	Private                                  = 0,
	Protected                                = 1,
	Public                                   = 2,
	EVkModuleAccess_MAX                      = 3,
};

// Enum VkEngineTypes.EVkOwnerType
// NumValues: 0x0003
enum class EVkOwnerType : uint8
{
	Account                                  = 0,
	Team                                     = 1,
	EVkOwnerType_MAX                         = 2,
};

// Enum VkEngineTypes.EVkValidationFlags
// NumValues: 0x0007
enum class EVkValidationFlags : uint8
{
	None                                     = 0,
	VF_IgnoreValidation                      = 1,
	VF_AllowMissingGameFeatureDataAsset      = 2,
	VF_AllowEngineContent                    = 4,
	VF_AllowGameContent                      = 8,
	VF_NoPreCheckVerse                       = 16,
	EVkValidationFlags_MAX                   = 17,
};

// ScriptStruct VkEngineTypes.ValkyrieProjectBindingsDescriptor
// 0x0068 (0x0068 - 0x0000)
struct FValkyrieProjectBindingsDescriptor final
{
public:
	uint8                                         FileVersion;                                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ProjectID;                                         // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Modules;                                           // 0x0018(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FValkyrieProjectBindingsDescriptor) == 0x000008, "Wrong alignment on FValkyrieProjectBindingsDescriptor");
static_assert(sizeof(FValkyrieProjectBindingsDescriptor) == 0x000068, "Wrong size on FValkyrieProjectBindingsDescriptor");
static_assert(offsetof(FValkyrieProjectBindingsDescriptor, FileVersion) == 0x000000, "Member 'FValkyrieProjectBindingsDescriptor::FileVersion' has a wrong offset!");
static_assert(offsetof(FValkyrieProjectBindingsDescriptor, ProjectID) == 0x000008, "Member 'FValkyrieProjectBindingsDescriptor::ProjectID' has a wrong offset!");
static_assert(offsetof(FValkyrieProjectBindingsDescriptor, Modules) == 0x000018, "Member 'FValkyrieProjectBindingsDescriptor::Modules' has a wrong offset!");

// ScriptStruct VkEngineTypes.VkNamedId
// 0x0020 (0x0020 - 0x0000)
struct FVkNamedId final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ID;                                                // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVkNamedId) == 0x000008, "Wrong alignment on FVkNamedId");
static_assert(sizeof(FVkNamedId) == 0x000020, "Wrong size on FVkNamedId");
static_assert(offsetof(FVkNamedId, Name) == 0x000000, "Member 'FVkNamedId::Name' has a wrong offset!");
static_assert(offsetof(FVkNamedId, ID) == 0x000010, "Member 'FVkNamedId::ID' has a wrong offset!");

// ScriptStruct VkEngineTypes.VkContentFilter
// 0x0010 (0x0010 - 0x0000)
struct FVkContentFilter final
{
public:
	class FString                                 Platform;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVkContentFilter) == 0x000008, "Wrong alignment on FVkContentFilter");
static_assert(sizeof(FVkContentFilter) == 0x000010, "Wrong size on FVkContentFilter");
static_assert(offsetof(FVkContentFilter, Platform) == 0x000000, "Member 'FVkContentFilter::Platform' has a wrong offset!");

// ScriptStruct VkEngineTypes.VkArtifactOption
// 0x0028 (0x0028 - 0x0000)
struct FVkArtifactOption final
{
public:
	class FString                                 ArtifactId;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EConsumerRole                                 Role;                                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVkContentFilter                       Filter;                                            // 0x0018(0x0010)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FVkArtifactOption) == 0x000008, "Wrong alignment on FVkArtifactOption");
static_assert(sizeof(FVkArtifactOption) == 0x000028, "Wrong size on FVkArtifactOption");
static_assert(offsetof(FVkArtifactOption, ArtifactId) == 0x000000, "Member 'FVkArtifactOption::ArtifactId' has a wrong offset!");
static_assert(offsetof(FVkArtifactOption, Role) == 0x000010, "Member 'FVkArtifactOption::Role' has a wrong offset!");
static_assert(offsetof(FVkArtifactOption, Filter) == 0x000018, "Member 'FVkArtifactOption::Filter' has a wrong offset!");

// ScriptStruct VkEngineTypes.VkModuleVersionRef
// 0x0018 (0x0018 - 0x0000)
struct FVkModuleVersionRef final
{
public:
	class FString                                 ModuleId;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Version;                                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVkModuleVersionRef) == 0x000008, "Wrong alignment on FVkModuleVersionRef");
static_assert(sizeof(FVkModuleVersionRef) == 0x000018, "Wrong size on FVkModuleVersionRef");
static_assert(offsetof(FVkModuleVersionRef, ModuleId) == 0x000000, "Member 'FVkModuleVersionRef::ModuleId' has a wrong offset!");
static_assert(offsetof(FVkModuleVersionRef, Version) == 0x000010, "Member 'FVkModuleVersionRef::Version' has a wrong offset!");

// ScriptStruct VkEngineTypes.VkModuleVersion
// 0x0018 (0x0018 - 0x0000)
struct FVkModuleVersion
{
public:
	class FString                                 ModuleId;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Version;                                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVkModuleVersion) == 0x000008, "Wrong alignment on FVkModuleVersion");
static_assert(sizeof(FVkModuleVersion) == 0x000018, "Wrong size on FVkModuleVersion");
static_assert(offsetof(FVkModuleVersion, ModuleId) == 0x000000, "Member 'FVkModuleVersion::ModuleId' has a wrong offset!");
static_assert(offsetof(FVkModuleVersion, Version) == 0x000010, "Member 'FVkModuleVersion::Version' has a wrong offset!");

// ScriptStruct VkEngineTypes.VkModuleVersionWithArtifacts
// 0x0010 (0x0028 - 0x0018)
struct FVkModuleVersionWithArtifacts final : public FVkModuleVersion
{
public:
	TArray<struct FVkArtifactOption>              Artifacts;                                         // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVkModuleVersionWithArtifacts) == 0x000008, "Wrong alignment on FVkModuleVersionWithArtifacts");
static_assert(sizeof(FVkModuleVersionWithArtifacts) == 0x000028, "Wrong size on FVkModuleVersionWithArtifacts");
static_assert(offsetof(FVkModuleVersionWithArtifacts, Artifacts) == 0x000018, "Member 'FVkModuleVersionWithArtifacts::Artifacts' has a wrong offset!");

// ScriptStruct VkEngineTypes.VkModuleDoc
// 0x00F8 (0x00F8 - 0x0000)
struct FVkModuleDoc final
{
public:
	class FString                                 ModuleId;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Created;                                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Updated;                                           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVkNamedId                             Author;                                            // 0x0020(0x0020)(NativeAccessSpecifierPublic)
	class FString                                 ProjectID;                                         // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ModuleName;                                        // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContentType;                                       // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EConsumerRole, bool>                     Relevance;                                         // 0x0070(0x0050)(NativeAccessSpecifierPublic)
	class FString                                 AliasForModuleId;                                  // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Meta;                                              // 0x00D0(0x0020)(NativeAccessSpecifierPublic)
	int32                                         LatestVersion;                                     // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVkModuleDoc) == 0x000008, "Wrong alignment on FVkModuleDoc");
static_assert(sizeof(FVkModuleDoc) == 0x0000F8, "Wrong size on FVkModuleDoc");
static_assert(offsetof(FVkModuleDoc, ModuleId) == 0x000000, "Member 'FVkModuleDoc::ModuleId' has a wrong offset!");
static_assert(offsetof(FVkModuleDoc, Created) == 0x000010, "Member 'FVkModuleDoc::Created' has a wrong offset!");
static_assert(offsetof(FVkModuleDoc, Updated) == 0x000018, "Member 'FVkModuleDoc::Updated' has a wrong offset!");
static_assert(offsetof(FVkModuleDoc, Author) == 0x000020, "Member 'FVkModuleDoc::Author' has a wrong offset!");
static_assert(offsetof(FVkModuleDoc, ProjectID) == 0x000040, "Member 'FVkModuleDoc::ProjectID' has a wrong offset!");
static_assert(offsetof(FVkModuleDoc, ModuleName) == 0x000050, "Member 'FVkModuleDoc::ModuleName' has a wrong offset!");
static_assert(offsetof(FVkModuleDoc, ContentType) == 0x000060, "Member 'FVkModuleDoc::ContentType' has a wrong offset!");
static_assert(offsetof(FVkModuleDoc, Relevance) == 0x000070, "Member 'FVkModuleDoc::Relevance' has a wrong offset!");
static_assert(offsetof(FVkModuleDoc, AliasForModuleId) == 0x0000C0, "Member 'FVkModuleDoc::AliasForModuleId' has a wrong offset!");
static_assert(offsetof(FVkModuleDoc, Meta) == 0x0000D0, "Member 'FVkModuleDoc::Meta' has a wrong offset!");
static_assert(offsetof(FVkModuleDoc, LatestVersion) == 0x0000F0, "Member 'FVkModuleDoc::LatestVersion' has a wrong offset!");

// ScriptStruct VkEngineTypes.VkContentPackage
// 0x0070 (0x0070 - 0x0000)
struct FVkContentPackage final
{
public:
	class FString                                 ProjectID;                                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            ProjectFlags;                                      // 0x0010(0x0050)(NativeAccessSpecifierPublic)
	TArray<struct FVkModuleVersionWithArtifacts>  Content;                                           // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVkContentPackage) == 0x000008, "Wrong alignment on FVkContentPackage");
static_assert(sizeof(FVkContentPackage) == 0x000070, "Wrong size on FVkContentPackage");
static_assert(offsetof(FVkContentPackage, ProjectID) == 0x000000, "Member 'FVkContentPackage::ProjectID' has a wrong offset!");
static_assert(offsetof(FVkContentPackage, ProjectFlags) == 0x000010, "Member 'FVkContentPackage::ProjectFlags' has a wrong offset!");
static_assert(offsetof(FVkContentPackage, Content) == 0x000060, "Member 'FVkContentPackage::Content' has a wrong offset!");

// ScriptStruct VkEngineTypes.VkModuleBinaries
// 0x0050 (0x0050 - 0x0000)
struct FVkModuleBinaries final
{
public:
	class FString                                 BaseUrl;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 manifest;                                          // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Files;                                             // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	double                                        TotalSizeKb;                                       // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ManifestSizeKb;                                    // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ManifestDiskSizeKb;                                // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ManifestDownloadSizeKb;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVkModuleBinaries) == 0x000008, "Wrong alignment on FVkModuleBinaries");
static_assert(sizeof(FVkModuleBinaries) == 0x000050, "Wrong size on FVkModuleBinaries");
static_assert(offsetof(FVkModuleBinaries, BaseUrl) == 0x000000, "Member 'FVkModuleBinaries::BaseUrl' has a wrong offset!");
static_assert(offsetof(FVkModuleBinaries, manifest) == 0x000010, "Member 'FVkModuleBinaries::manifest' has a wrong offset!");
static_assert(offsetof(FVkModuleBinaries, Files) == 0x000020, "Member 'FVkModuleBinaries::Files' has a wrong offset!");
static_assert(offsetof(FVkModuleBinaries, TotalSizeKb) == 0x000030, "Member 'FVkModuleBinaries::TotalSizeKb' has a wrong offset!");
static_assert(offsetof(FVkModuleBinaries, ManifestSizeKb) == 0x000038, "Member 'FVkModuleBinaries::ManifestSizeKb' has a wrong offset!");
static_assert(offsetof(FVkModuleBinaries, ManifestDiskSizeKb) == 0x000040, "Member 'FVkModuleBinaries::ManifestDiskSizeKb' has a wrong offset!");
static_assert(offsetof(FVkModuleBinaries, ManifestDownloadSizeKb) == 0x000048, "Member 'FVkModuleBinaries::ManifestDownloadSizeKb' has a wrong offset!");

// ScriptStruct VkEngineTypes.VkResolvedModule
// 0x0060 (0x0060 - 0x0000)
struct FVkResolvedModule final
{
public:
	class FString                                 ModuleId;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVkModuleBinaries                      Binaries;                                          // 0x0010(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FVkResolvedModule) == 0x000008, "Wrong alignment on FVkResolvedModule");
static_assert(sizeof(FVkResolvedModule) == 0x000060, "Wrong size on FVkResolvedModule");
static_assert(offsetof(FVkResolvedModule, ModuleId) == 0x000000, "Member 'FVkResolvedModule::ModuleId' has a wrong offset!");
static_assert(offsetof(FVkResolvedModule, Binaries) == 0x000010, "Member 'FVkResolvedModule::Binaries' has a wrong offset!");

// ScriptStruct VkEngineTypes.VkContentManifest
// 0x0010 (0x0010 - 0x0000)
struct FVkContentManifest final
{
public:
	TArray<struct FVkResolvedModule>              Content;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVkContentManifest) == 0x000008, "Wrong alignment on FVkContentManifest");
static_assert(sizeof(FVkContentManifest) == 0x000010, "Wrong size on FVkContentManifest");
static_assert(offsetof(FVkContentManifest, Content) == 0x000000, "Member 'FVkContentManifest::Content' has a wrong offset!");

// ScriptStruct VkEngineTypes.VkBuildVersion
// 0x0018 (0x0018 - 0x0000)
struct FVkBuildVersion final
{
public:
	class FString                                 Major;                                             // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minor;                                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Patch;                                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVkBuildVersion) == 0x000008, "Wrong alignment on FVkBuildVersion");
static_assert(sizeof(FVkBuildVersion) == 0x000018, "Wrong size on FVkBuildVersion");
static_assert(offsetof(FVkBuildVersion, Major) == 0x000000, "Member 'FVkBuildVersion::Major' has a wrong offset!");
static_assert(offsetof(FVkBuildVersion, Minor) == 0x000010, "Member 'FVkBuildVersion::Minor' has a wrong offset!");
static_assert(offsetof(FVkBuildVersion, Patch) == 0x000014, "Member 'FVkBuildVersion::Patch' has a wrong offset!");

// ScriptStruct VkEngineTypes.VkJobOutput
// 0x0038 (0x0038 - 0x0000)
struct FVkJobOutput final
{
public:
	class FString                                 BaseUrl;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalSizeKb;                                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Files;                                             // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 manifest;                                          // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVkJobOutput) == 0x000008, "Wrong alignment on FVkJobOutput");
static_assert(sizeof(FVkJobOutput) == 0x000038, "Wrong size on FVkJobOutput");
static_assert(offsetof(FVkJobOutput, BaseUrl) == 0x000000, "Member 'FVkJobOutput::BaseUrl' has a wrong offset!");
static_assert(offsetof(FVkJobOutput, TotalSizeKb) == 0x000010, "Member 'FVkJobOutput::TotalSizeKb' has a wrong offset!");
static_assert(offsetof(FVkJobOutput, Files) == 0x000018, "Member 'FVkJobOutput::Files' has a wrong offset!");
static_assert(offsetof(FVkJobOutput, manifest) == 0x000028, "Member 'FVkJobOutput::manifest' has a wrong offset!");

// ScriptStruct VkEngineTypes.VkModuleVersionDoc
// 0x0168 (0x0168 - 0x0000)
struct FVkModuleVersionDoc final
{
public:
	class FString                                 ModuleId;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Version;                                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ProjectID;                                         // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVkModuleAccess                               Access;                                            // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Created;                                           // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVkNamedId                             Author;                                            // 0x0038(0x0020)(NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Meta;                                              // 0x0058(0x0020)(NativeAccessSpecifierPublic)
	TArray<struct FVkModuleVersionRef>            Dependencies;                                      // 0x0078(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVkJobOutput                           StagedFiles;                                       // 0x0088(0x0038)(NativeAccessSpecifierPublic)
	struct FVkBuildVersion                        SourceVersion;                                     // 0x00C0(0x0018)(NativeAccessSpecifierPublic)
	class FString                                 ContentType;                                       // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EConsumerRole, bool>                     Relevance;                                         // 0x00E8(0x0050)(NativeAccessSpecifierPublic)
	class FString                                 ArtifactKey;                                       // 0x0138(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Checksum;                                          // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVkArtifactOption>              Artifacts;                                         // 0x0158(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVkModuleVersionDoc) == 0x000008, "Wrong alignment on FVkModuleVersionDoc");
static_assert(sizeof(FVkModuleVersionDoc) == 0x000168, "Wrong size on FVkModuleVersionDoc");
static_assert(offsetof(FVkModuleVersionDoc, ModuleId) == 0x000000, "Member 'FVkModuleVersionDoc::ModuleId' has a wrong offset!");
static_assert(offsetof(FVkModuleVersionDoc, Version) == 0x000010, "Member 'FVkModuleVersionDoc::Version' has a wrong offset!");
static_assert(offsetof(FVkModuleVersionDoc, ProjectID) == 0x000018, "Member 'FVkModuleVersionDoc::ProjectID' has a wrong offset!");
static_assert(offsetof(FVkModuleVersionDoc, Access) == 0x000028, "Member 'FVkModuleVersionDoc::Access' has a wrong offset!");
static_assert(offsetof(FVkModuleVersionDoc, Created) == 0x000030, "Member 'FVkModuleVersionDoc::Created' has a wrong offset!");
static_assert(offsetof(FVkModuleVersionDoc, Author) == 0x000038, "Member 'FVkModuleVersionDoc::Author' has a wrong offset!");
static_assert(offsetof(FVkModuleVersionDoc, Meta) == 0x000058, "Member 'FVkModuleVersionDoc::Meta' has a wrong offset!");
static_assert(offsetof(FVkModuleVersionDoc, Dependencies) == 0x000078, "Member 'FVkModuleVersionDoc::Dependencies' has a wrong offset!");
static_assert(offsetof(FVkModuleVersionDoc, StagedFiles) == 0x000088, "Member 'FVkModuleVersionDoc::StagedFiles' has a wrong offset!");
static_assert(offsetof(FVkModuleVersionDoc, SourceVersion) == 0x0000C0, "Member 'FVkModuleVersionDoc::SourceVersion' has a wrong offset!");
static_assert(offsetof(FVkModuleVersionDoc, ContentType) == 0x0000D8, "Member 'FVkModuleVersionDoc::ContentType' has a wrong offset!");
static_assert(offsetof(FVkModuleVersionDoc, Relevance) == 0x0000E8, "Member 'FVkModuleVersionDoc::Relevance' has a wrong offset!");
static_assert(offsetof(FVkModuleVersionDoc, ArtifactKey) == 0x000138, "Member 'FVkModuleVersionDoc::ArtifactKey' has a wrong offset!");
static_assert(offsetof(FVkModuleVersionDoc, Checksum) == 0x000148, "Member 'FVkModuleVersionDoc::Checksum' has a wrong offset!");
static_assert(offsetof(FVkModuleVersionDoc, Artifacts) == 0x000158, "Member 'FVkModuleVersionDoc::Artifacts' has a wrong offset!");

// ScriptStruct VkEngineTypes.VkPublishedLink
// 0x0040 (0x0040 - 0x0000)
struct FVkPublishedLink final
{
public:
	class FString                                 LinkCode;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LinkVersion;                                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              LastPublished;                                     // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Base;                                              // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CommitMessage;                                     // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVkPublishedLink) == 0x000008, "Wrong alignment on FVkPublishedLink");
static_assert(sizeof(FVkPublishedLink) == 0x000040, "Wrong size on FVkPublishedLink");
static_assert(offsetof(FVkPublishedLink, LinkCode) == 0x000000, "Member 'FVkPublishedLink::LinkCode' has a wrong offset!");
static_assert(offsetof(FVkPublishedLink, LinkVersion) == 0x000010, "Member 'FVkPublishedLink::LinkVersion' has a wrong offset!");
static_assert(offsetof(FVkPublishedLink, LastPublished) == 0x000018, "Member 'FVkPublishedLink::LastPublished' has a wrong offset!");
static_assert(offsetof(FVkPublishedLink, Base) == 0x000020, "Member 'FVkPublishedLink::Base' has a wrong offset!");
static_assert(offsetof(FVkPublishedLink, CommitMessage) == 0x000030, "Member 'FVkPublishedLink::CommitMessage' has a wrong offset!");

// ScriptStruct VkEngineTypes.VkProjectDoc
// 0x00C0 (0x00C0 - 0x0000)
struct FVkProjectDoc final
{
public:
	class FString                                 ProjectID;                                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Created;                                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVkNamedId                             Author;                                            // 0x0018(0x0020)(NativeAccessSpecifierPublic)
	EVkOwnerType                                  OwnerType;                                         // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVkNamedId                             Owner;                                             // 0x0040(0x0020)(NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Meta;                                              // 0x0060(0x0020)(NativeAccessSpecifierPublic)
	struct FVkPublishedLink                       LiveLink;                                          // 0x0080(0x0040)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FVkProjectDoc) == 0x000008, "Wrong alignment on FVkProjectDoc");
static_assert(sizeof(FVkProjectDoc) == 0x0000C0, "Wrong size on FVkProjectDoc");
static_assert(offsetof(FVkProjectDoc, ProjectID) == 0x000000, "Member 'FVkProjectDoc::ProjectID' has a wrong offset!");
static_assert(offsetof(FVkProjectDoc, Created) == 0x000010, "Member 'FVkProjectDoc::Created' has a wrong offset!");
static_assert(offsetof(FVkProjectDoc, Author) == 0x000018, "Member 'FVkProjectDoc::Author' has a wrong offset!");
static_assert(offsetof(FVkProjectDoc, OwnerType) == 0x000038, "Member 'FVkProjectDoc::OwnerType' has a wrong offset!");
static_assert(offsetof(FVkProjectDoc, Owner) == 0x000040, "Member 'FVkProjectDoc::Owner' has a wrong offset!");
static_assert(offsetof(FVkProjectDoc, Meta) == 0x000060, "Member 'FVkProjectDoc::Meta' has a wrong offset!");
static_assert(offsetof(FVkProjectDoc, LiveLink) == 0x000080, "Member 'FVkProjectDoc::LiveLink' has a wrong offset!");

// ScriptStruct VkEngineTypes.VkProjectUserInfo
// 0x00C8 (0x00C8 - 0x0000)
struct FVkProjectUserInfo final
{
public:
	class FString                                 ProjectID;                                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AccountId;                                         // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasStar;                                           // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, bool>                     Access;                                            // 0x0038(0x0050)(NativeAccessSpecifierPublic)
	struct FVkPublishedLink                       PlaytestLink;                                      // 0x0088(0x0040)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FVkProjectUserInfo) == 0x000008, "Wrong alignment on FVkProjectUserInfo");
static_assert(sizeof(FVkProjectUserInfo) == 0x0000C8, "Wrong size on FVkProjectUserInfo");
static_assert(offsetof(FVkProjectUserInfo, ProjectID) == 0x000000, "Member 'FVkProjectUserInfo::ProjectID' has a wrong offset!");
static_assert(offsetof(FVkProjectUserInfo, AccountId) == 0x000010, "Member 'FVkProjectUserInfo::AccountId' has a wrong offset!");
static_assert(offsetof(FVkProjectUserInfo, Title) == 0x000020, "Member 'FVkProjectUserInfo::Title' has a wrong offset!");
static_assert(offsetof(FVkProjectUserInfo, HasStar) == 0x000030, "Member 'FVkProjectUserInfo::HasStar' has a wrong offset!");
static_assert(offsetof(FVkProjectUserInfo, Access) == 0x000038, "Member 'FVkProjectUserInfo::Access' has a wrong offset!");
static_assert(offsetof(FVkProjectUserInfo, PlaytestLink) == 0x000088, "Member 'FVkProjectUserInfo::PlaytestLink' has a wrong offset!");

// ScriptStruct VkEngineTypes.VkCreateProjectRequest
// 0x0030 (0x0030 - 0x0000)
struct FVkCreateProjectRequest final
{
public:
	class FString                                 DesiredProjectId;                                  // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Meta;                                              // 0x0010(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FVkCreateProjectRequest) == 0x000008, "Wrong alignment on FVkCreateProjectRequest");
static_assert(sizeof(FVkCreateProjectRequest) == 0x000030, "Wrong size on FVkCreateProjectRequest");
static_assert(offsetof(FVkCreateProjectRequest, DesiredProjectId) == 0x000000, "Member 'FVkCreateProjectRequest::DesiredProjectId' has a wrong offset!");
static_assert(offsetof(FVkCreateProjectRequest, Meta) == 0x000010, "Member 'FVkCreateProjectRequest::Meta' has a wrong offset!");

// ScriptStruct VkEngineTypes.VkCreateModuleRequest
// 0x00A0 (0x00A0 - 0x0000)
struct FVkCreateModuleRequest final
{
public:
	class FString                                 ModuleName;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Meta;                                              // 0x0010(0x0020)(NativeAccessSpecifierPublic)
	class FString                                 ContentType;                                       // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EConsumerRole, bool>                     Relevance;                                         // 0x0040(0x0050)(NativeAccessSpecifierPublic)
	class FString                                 DesiredModuleId;                                   // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVkCreateModuleRequest) == 0x000008, "Wrong alignment on FVkCreateModuleRequest");
static_assert(sizeof(FVkCreateModuleRequest) == 0x0000A0, "Wrong size on FVkCreateModuleRequest");
static_assert(offsetof(FVkCreateModuleRequest, ModuleName) == 0x000000, "Member 'FVkCreateModuleRequest::ModuleName' has a wrong offset!");
static_assert(offsetof(FVkCreateModuleRequest, Meta) == 0x000010, "Member 'FVkCreateModuleRequest::Meta' has a wrong offset!");
static_assert(offsetof(FVkCreateModuleRequest, ContentType) == 0x000030, "Member 'FVkCreateModuleRequest::ContentType' has a wrong offset!");
static_assert(offsetof(FVkCreateModuleRequest, Relevance) == 0x000040, "Member 'FVkCreateModuleRequest::Relevance' has a wrong offset!");
static_assert(offsetof(FVkCreateModuleRequest, DesiredModuleId) == 0x000090, "Member 'FVkCreateModuleRequest::DesiredModuleId' has a wrong offset!");

// ScriptStruct VkEngineTypes.VkCreateModuleVersionRequest
// 0x0090 (0x0090 - 0x0000)
struct FVkCreateModuleVersionRequest final
{
public:
	TMap<class FString, class FString>            RawFiles;                                          // 0x0000(0x0050)(NativeAccessSpecifierPublic)
	TArray<struct FVkModuleVersionRef>            Dependencies;                                      // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Meta;                                              // 0x0060(0x0020)(NativeAccessSpecifierPublic)
	class FString                                 Checksum;                                          // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVkCreateModuleVersionRequest) == 0x000008, "Wrong alignment on FVkCreateModuleVersionRequest");
static_assert(sizeof(FVkCreateModuleVersionRequest) == 0x000090, "Wrong size on FVkCreateModuleVersionRequest");
static_assert(offsetof(FVkCreateModuleVersionRequest, RawFiles) == 0x000000, "Member 'FVkCreateModuleVersionRequest::RawFiles' has a wrong offset!");
static_assert(offsetof(FVkCreateModuleVersionRequest, Dependencies) == 0x000050, "Member 'FVkCreateModuleVersionRequest::Dependencies' has a wrong offset!");
static_assert(offsetof(FVkCreateModuleVersionRequest, Meta) == 0x000060, "Member 'FVkCreateModuleVersionRequest::Meta' has a wrong offset!");
static_assert(offsetof(FVkCreateModuleVersionRequest, Checksum) == 0x000080, "Member 'FVkCreateModuleVersionRequest::Checksum' has a wrong offset!");

// ScriptStruct VkEngineTypes.VkResolvedContent
// 0x0068 (0x0068 - 0x0000)
struct FVkResolvedContent
{
public:
	struct FVkModuleVersionRef                    Root;                                              // 0x0000(0x0018)(NativeAccessSpecifierPublic)
	TMap<class FString, int32>                    Resolutions;                                       // 0x0018(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FVkResolvedContent) == 0x000008, "Wrong alignment on FVkResolvedContent");
static_assert(sizeof(FVkResolvedContent) == 0x000068, "Wrong size on FVkResolvedContent");
static_assert(offsetof(FVkResolvedContent, Root) == 0x000000, "Member 'FVkResolvedContent::Root' has a wrong offset!");
static_assert(offsetof(FVkResolvedContent, Resolutions) == 0x000018, "Member 'FVkResolvedContent::Resolutions' has a wrong offset!");

// ScriptStruct VkEngineTypes.VkVersionedLinkCode
// 0x0018 (0x0018 - 0x0000)
struct FVkVersionedLinkCode final
{
public:
	class FString                                 Mnemonic;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Version;                                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVkVersionedLinkCode) == 0x000008, "Wrong alignment on FVkVersionedLinkCode");
static_assert(sizeof(FVkVersionedLinkCode) == 0x000018, "Wrong size on FVkVersionedLinkCode");
static_assert(offsetof(FVkVersionedLinkCode, Mnemonic) == 0x000000, "Member 'FVkVersionedLinkCode::Mnemonic' has a wrong offset!");
static_assert(offsetof(FVkVersionedLinkCode, Version) == 0x000010, "Member 'FVkVersionedLinkCode::Version' has a wrong offset!");

// ScriptStruct VkEngineTypes.VkSnapshotSaveRequest
// 0x0088 (0x0088 - 0x0000)
struct FVkSnapshotSaveRequest final
{
public:
	struct FVkResolvedContent                     Content;                                           // 0x0000(0x0068)(NativeAccessSpecifierPublic)
	TArray<struct FVkVersionedLinkCode>           Palette;                                           // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 MapPath;                                           // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVkSnapshotSaveRequest) == 0x000008, "Wrong alignment on FVkSnapshotSaveRequest");
static_assert(sizeof(FVkSnapshotSaveRequest) == 0x000088, "Wrong size on FVkSnapshotSaveRequest");
static_assert(offsetof(FVkSnapshotSaveRequest, Content) == 0x000000, "Member 'FVkSnapshotSaveRequest::Content' has a wrong offset!");
static_assert(offsetof(FVkSnapshotSaveRequest, Palette) == 0x000068, "Member 'FVkSnapshotSaveRequest::Palette' has a wrong offset!");
static_assert(offsetof(FVkSnapshotSaveRequest, MapPath) == 0x000078, "Member 'FVkSnapshotSaveRequest::MapPath' has a wrong offset!");

// ScriptStruct VkEngineTypes.VkProjectSnapshot
// 0x00C8 (0x00C8 - 0x0000)
struct FVkProjectSnapshot final
{
public:
	class FString                                 UniqueId;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProjectID;                                         // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AccountId;                                         // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeltaFileIndex;                                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVkResolvedContent                     Content;                                           // 0x0040(0x0068)(NativeAccessSpecifierPublic)
	TArray<struct FVkVersionedLinkCode>           Palette;                                           // 0x00A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 MapPath;                                           // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVkProjectSnapshot) == 0x000008, "Wrong alignment on FVkProjectSnapshot");
static_assert(sizeof(FVkProjectSnapshot) == 0x0000C8, "Wrong size on FVkProjectSnapshot");
static_assert(offsetof(FVkProjectSnapshot, UniqueId) == 0x000000, "Member 'FVkProjectSnapshot::UniqueId' has a wrong offset!");
static_assert(offsetof(FVkProjectSnapshot, ProjectID) == 0x000010, "Member 'FVkProjectSnapshot::ProjectID' has a wrong offset!");
static_assert(offsetof(FVkProjectSnapshot, AccountId) == 0x000020, "Member 'FVkProjectSnapshot::AccountId' has a wrong offset!");
static_assert(offsetof(FVkProjectSnapshot, CreatedAt) == 0x000030, "Member 'FVkProjectSnapshot::CreatedAt' has a wrong offset!");
static_assert(offsetof(FVkProjectSnapshot, DeltaFileIndex) == 0x000038, "Member 'FVkProjectSnapshot::DeltaFileIndex' has a wrong offset!");
static_assert(offsetof(FVkProjectSnapshot, Content) == 0x000040, "Member 'FVkProjectSnapshot::Content' has a wrong offset!");
static_assert(offsetof(FVkProjectSnapshot, Palette) == 0x0000A8, "Member 'FVkProjectSnapshot::Palette' has a wrong offset!");
static_assert(offsetof(FVkProjectSnapshot, MapPath) == 0x0000B8, "Member 'FVkProjectSnapshot::MapPath' has a wrong offset!");

// ScriptStruct VkEngineTypes.VkGenerateTestcodeRequest
// 0x0088 (0x0088 - 0x0000)
struct FVkGenerateTestcodeRequest final
{
public:
	struct FVkResolvedContent                     Content;                                           // 0x0000(0x0068)(NativeAccessSpecifierPublic)
	class FString                                 MatchmakingScheme;                                 // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CommitMessage;                                     // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVkGenerateTestcodeRequest) == 0x000008, "Wrong alignment on FVkGenerateTestcodeRequest");
static_assert(sizeof(FVkGenerateTestcodeRequest) == 0x000088, "Wrong size on FVkGenerateTestcodeRequest");
static_assert(offsetof(FVkGenerateTestcodeRequest, Content) == 0x000000, "Member 'FVkGenerateTestcodeRequest::Content' has a wrong offset!");
static_assert(offsetof(FVkGenerateTestcodeRequest, MatchmakingScheme) == 0x000068, "Member 'FVkGenerateTestcodeRequest::MatchmakingScheme' has a wrong offset!");
static_assert(offsetof(FVkGenerateTestcodeRequest, CommitMessage) == 0x000078, "Member 'FVkGenerateTestcodeRequest::CommitMessage' has a wrong offset!");

// ScriptStruct VkEngineTypes.VkProjectSearchResult
// 0x0050 (0x0050 - 0x0000)
struct FVkProjectSearchResult final
{
public:
	class FString                                 ProjectID;                                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Created;                                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Accessed;                                          // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Meta;                                              // 0x0020(0x0020)(NativeAccessSpecifierPublic)
	class FString                                 LinkCode;                                          // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVkProjectSearchResult) == 0x000008, "Wrong alignment on FVkProjectSearchResult");
static_assert(sizeof(FVkProjectSearchResult) == 0x000050, "Wrong size on FVkProjectSearchResult");
static_assert(offsetof(FVkProjectSearchResult, ProjectID) == 0x000000, "Member 'FVkProjectSearchResult::ProjectID' has a wrong offset!");
static_assert(offsetof(FVkProjectSearchResult, Created) == 0x000010, "Member 'FVkProjectSearchResult::Created' has a wrong offset!");
static_assert(offsetof(FVkProjectSearchResult, Accessed) == 0x000018, "Member 'FVkProjectSearchResult::Accessed' has a wrong offset!");
static_assert(offsetof(FVkProjectSearchResult, Meta) == 0x000020, "Member 'FVkProjectSearchResult::Meta' has a wrong offset!");
static_assert(offsetof(FVkProjectSearchResult, LinkCode) == 0x000040, "Member 'FVkProjectSearchResult::LinkCode' has a wrong offset!");

// ScriptStruct VkEngineTypes.VkLaunchData_LaunchLinkCode
// 0x0018 (0x0018 - 0x0000)
struct FVkLaunchData_LaunchLinkCode final
{
public:
	class FString                                 LinkCode;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Version;                                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVkLaunchData_LaunchLinkCode) == 0x000008, "Wrong alignment on FVkLaunchData_LaunchLinkCode");
static_assert(sizeof(FVkLaunchData_LaunchLinkCode) == 0x000018, "Wrong size on FVkLaunchData_LaunchLinkCode");
static_assert(offsetof(FVkLaunchData_LaunchLinkCode, LinkCode) == 0x000000, "Member 'FVkLaunchData_LaunchLinkCode::LinkCode' has a wrong offset!");
static_assert(offsetof(FVkLaunchData_LaunchLinkCode, Version) == 0x000010, "Member 'FVkLaunchData_LaunchLinkCode::Version' has a wrong offset!");

// ScriptStruct VkEngineTypes.VkLaunchData_JoinMatchmakingSession
// 0x0010 (0x0010 - 0x0000)
struct FVkLaunchData_JoinMatchmakingSession final
{
public:
	class FString                                 SessionId;                                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVkLaunchData_JoinMatchmakingSession) == 0x000008, "Wrong alignment on FVkLaunchData_JoinMatchmakingSession");
static_assert(sizeof(FVkLaunchData_JoinMatchmakingSession) == 0x000010, "Wrong size on FVkLaunchData_JoinMatchmakingSession");
static_assert(offsetof(FVkLaunchData_JoinMatchmakingSession, SessionId) == 0x000000, "Member 'FVkLaunchData_JoinMatchmakingSession::SessionId' has a wrong offset!");

// ScriptStruct VkEngineTypes.VkProjectPlaytestAccessRequest
// 0x0010 (0x0010 - 0x0000)
struct FVkProjectPlaytestAccessRequest final
{
public:
	TArray<class FString>                         Users;                                             // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVkProjectPlaytestAccessRequest) == 0x000008, "Wrong alignment on FVkProjectPlaytestAccessRequest");
static_assert(sizeof(FVkProjectPlaytestAccessRequest) == 0x000010, "Wrong size on FVkProjectPlaytestAccessRequest");
static_assert(offsetof(FVkProjectPlaytestAccessRequest, Users) == 0x000000, "Member 'FVkProjectPlaytestAccessRequest::Users' has a wrong offset!");

// ScriptStruct VkEngineTypes.VkProjectAccessControl
// 0x0005 (0x0005 - 0x0000)
struct FVkProjectAccessControl final
{
public:
	bool                                          Read;                                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Edit;                                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Operate;                                           // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Publish;                                           // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Admin;                                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVkProjectAccessControl) == 0x000001, "Wrong alignment on FVkProjectAccessControl");
static_assert(sizeof(FVkProjectAccessControl) == 0x000005, "Wrong size on FVkProjectAccessControl");
static_assert(offsetof(FVkProjectAccessControl, Read) == 0x000000, "Member 'FVkProjectAccessControl::Read' has a wrong offset!");
static_assert(offsetof(FVkProjectAccessControl, Edit) == 0x000001, "Member 'FVkProjectAccessControl::Edit' has a wrong offset!");
static_assert(offsetof(FVkProjectAccessControl, Operate) == 0x000002, "Member 'FVkProjectAccessControl::Operate' has a wrong offset!");
static_assert(offsetof(FVkProjectAccessControl, Publish) == 0x000003, "Member 'FVkProjectAccessControl::Publish' has a wrong offset!");
static_assert(offsetof(FVkProjectAccessControl, Admin) == 0x000004, "Member 'FVkProjectAccessControl::Admin' has a wrong offset!");

// ScriptStruct VkEngineTypes.VkProjectPlaytestAccessResult
// 0x0080 (0x0080 - 0x0000)
struct FVkProjectPlaytestAccessResult final
{
public:
	struct FVkNamedId                             Owner;                                             // 0x0000(0x0020)(NativeAccessSpecifierPublic)
	class FString                                 OwnerType;                                         // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FVkProjectAccessControl> Playtesters;                                       // 0x0030(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FVkProjectPlaytestAccessResult) == 0x000008, "Wrong alignment on FVkProjectPlaytestAccessResult");
static_assert(sizeof(FVkProjectPlaytestAccessResult) == 0x000080, "Wrong size on FVkProjectPlaytestAccessResult");
static_assert(offsetof(FVkProjectPlaytestAccessResult, Owner) == 0x000000, "Member 'FVkProjectPlaytestAccessResult::Owner' has a wrong offset!");
static_assert(offsetof(FVkProjectPlaytestAccessResult, OwnerType) == 0x000020, "Member 'FVkProjectPlaytestAccessResult::OwnerType' has a wrong offset!");
static_assert(offsetof(FVkProjectPlaytestAccessResult, Playtesters) == 0x000030, "Member 'FVkProjectPlaytestAccessResult::Playtesters' has a wrong offset!");

// ScriptStruct VkEngineTypes.VkPerMapDeltaFiles
// 0x0050 (0x0050 - 0x0000)
struct FVkPerMapDeltaFiles final
{
public:
	TMap<class FString, class FString>            DeltaFileLinksByMapId;                             // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FVkPerMapDeltaFiles) == 0x000008, "Wrong alignment on FVkPerMapDeltaFiles");
static_assert(sizeof(FVkPerMapDeltaFiles) == 0x000050, "Wrong size on FVkPerMapDeltaFiles");
static_assert(offsetof(FVkPerMapDeltaFiles, DeltaFileLinksByMapId) == 0x000000, "Member 'FVkPerMapDeltaFiles::DeltaFileLinksByMapId' has a wrong offset!");

// ScriptStruct VkEngineTypes.VkMetaDataFlags
// 0x0050 (0x0050 - 0x0000)
struct FVkMetaDataFlags final
{
public:
	TMap<class FString, class FString>            _validation_flags;                                 // 0x0000(0x0050)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FVkMetaDataFlags) == 0x000008, "Wrong alignment on FVkMetaDataFlags");
static_assert(sizeof(FVkMetaDataFlags) == 0x000050, "Wrong size on FVkMetaDataFlags");
static_assert(offsetof(FVkMetaDataFlags, _validation_flags) == 0x000000, "Member 'FVkMetaDataFlags::_validation_flags' has a wrong offset!");

}

