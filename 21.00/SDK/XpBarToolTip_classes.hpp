#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: XpBarToolTip

#include "Basic.hpp"

#include "CommonUI_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass XpBarToolTip.XpBarToolTip_C
// 0x00C8 (0x03A8 - 0x02E0)
class UXpBarToolTip_C final : public UCommonUserWidget
{
public:
	class UCommonTextBlock*                       CommonTextBlock_0;                                 // 0x02E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       CommonTextBlock_2;                                 // 0x02E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       CommonTextBlock_29;                                // 0x02F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       CommonTextBlock_30;                                // 0x02F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       CommonTextBlock_31;                                // 0x0300(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_0;                                           // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_1;                                           // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_2;                                           // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_3;                                           // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_5;                                           // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   HeaderText;                                        // 0x0330(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	class FText                                   CommanderXPText;                                   // 0x0348(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	class FText                                   BoostXPText;                                       // 0x0360(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	class FText                                   RestedXPText;                                      // 0x0378(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	class FText                                   BodyText;                                          // 0x0390(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)

public:
	class FText GetBodyText();
	class FText GetBoostXPText();
	class FText GetCommanderXPText();
	class FText GetHeaderText();
	class FText GetRestedXPText();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"XpBarToolTip_C">();
	}
	static class UXpBarToolTip_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UXpBarToolTip_C>();
	}
};
static_assert(alignof(UXpBarToolTip_C) == 0x000008, "Wrong alignment on UXpBarToolTip_C");
static_assert(sizeof(UXpBarToolTip_C) == 0x0003A8, "Wrong size on UXpBarToolTip_C");
static_assert(offsetof(UXpBarToolTip_C, CommonTextBlock_0) == 0x0002E0, "Member 'UXpBarToolTip_C::CommonTextBlock_0' has a wrong offset!");
static_assert(offsetof(UXpBarToolTip_C, CommonTextBlock_2) == 0x0002E8, "Member 'UXpBarToolTip_C::CommonTextBlock_2' has a wrong offset!");
static_assert(offsetof(UXpBarToolTip_C, CommonTextBlock_29) == 0x0002F0, "Member 'UXpBarToolTip_C::CommonTextBlock_29' has a wrong offset!");
static_assert(offsetof(UXpBarToolTip_C, CommonTextBlock_30) == 0x0002F8, "Member 'UXpBarToolTip_C::CommonTextBlock_30' has a wrong offset!");
static_assert(offsetof(UXpBarToolTip_C, CommonTextBlock_31) == 0x000300, "Member 'UXpBarToolTip_C::CommonTextBlock_31' has a wrong offset!");
static_assert(offsetof(UXpBarToolTip_C, Image_0) == 0x000308, "Member 'UXpBarToolTip_C::Image_0' has a wrong offset!");
static_assert(offsetof(UXpBarToolTip_C, Image_1) == 0x000310, "Member 'UXpBarToolTip_C::Image_1' has a wrong offset!");
static_assert(offsetof(UXpBarToolTip_C, Image_2) == 0x000318, "Member 'UXpBarToolTip_C::Image_2' has a wrong offset!");
static_assert(offsetof(UXpBarToolTip_C, Image_3) == 0x000320, "Member 'UXpBarToolTip_C::Image_3' has a wrong offset!");
static_assert(offsetof(UXpBarToolTip_C, Image_5) == 0x000328, "Member 'UXpBarToolTip_C::Image_5' has a wrong offset!");
static_assert(offsetof(UXpBarToolTip_C, HeaderText) == 0x000330, "Member 'UXpBarToolTip_C::HeaderText' has a wrong offset!");
static_assert(offsetof(UXpBarToolTip_C, CommanderXPText) == 0x000348, "Member 'UXpBarToolTip_C::CommanderXPText' has a wrong offset!");
static_assert(offsetof(UXpBarToolTip_C, BoostXPText) == 0x000360, "Member 'UXpBarToolTip_C::BoostXPText' has a wrong offset!");
static_assert(offsetof(UXpBarToolTip_C, RestedXPText) == 0x000378, "Member 'UXpBarToolTip_C::RestedXPText' has a wrong offset!");
static_assert(offsetof(UXpBarToolTip_C, BodyText) == 0x000390, "Member 'UXpBarToolTip_C::BodyText' has a wrong offset!");

}

