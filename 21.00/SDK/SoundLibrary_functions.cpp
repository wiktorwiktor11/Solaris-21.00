#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SoundLibrary

#include "Basic.hpp"

#include "SoundLibrary_classes.hpp"
#include "SoundLibrary_parameters.hpp"


namespace SDK
{

// Function SoundLibrary.SoundLibraryContext.OnAddedToActor
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           InActor                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundLibraryContext::OnAddedToActor(const class AActor* InActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SoundLibraryContext", "OnAddedToActor");

	Params::SoundLibraryContext_OnAddedToActor Parms{};

	Parms.InActor = InActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SoundLibrary.SoundLibraryContext.OnRemovedFromActor
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           InActor                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundLibraryContext::OnRemovedFromActor(const class AActor* InActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SoundLibraryContext", "OnRemovedFromActor");

	Params::SoundLibraryContext_OnRemovedFromActor Parms{};

	Parms.InActor = InActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SoundLibrary.SoundLibraryContext.PlaySound
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class USoundBase*                       sound                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSoundLibraryPlaySoundResult     OutResults                                             (Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USoundLibraryContext::PlaySound(class USoundBase* sound, struct FSoundLibraryPlaySoundResult& OutResults)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SoundLibraryContext", "PlaySound");

	Params::SoundLibraryContext_PlaySound Parms{};

	Parms.sound = sound;
	Parms.OutResults = std::move(OutResults);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	OutResults = std::move(Parms.OutResults);

	return Parms.ReturnValue;
}


// Function SoundLibrary.SoundLibraryContext.CreateEventName
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// struct FGameplayTag                     OutEventName                                           (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USoundLibraryContext::CreateEventName(struct FGameplayTag& OutEventName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SoundLibraryContext", "CreateEventName");

	Params::SoundLibraryContext_CreateEventName Parms{};

	Parms.OutEventName = std::move(OutEventName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	OutEventName = std::move(Parms.OutEventName);

	return Parms.ReturnValue;
}


// Function SoundLibrary.SoundLibraryAnimContext.ConfigureContext
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           OwningActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*                InAnimation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSoundLibraryAnimContextSettings InSettings                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USoundLibraryAnimContext::ConfigureContext(class AActor* OwningActor, class UAnimSequenceBase* InAnimation, const struct FSoundLibraryAnimContextSettings& InSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SoundLibraryAnimContext", "ConfigureContext");

	Params::SoundLibraryAnimContext_ConfigureContext Parms{};

	Parms.OwningActor = OwningActor;
	Parms.InAnimation = InAnimation;
	Parms.InSettings = std::move(InSettings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SoundLibrary.SoundLibrarySubsystem.AddContext
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USoundLibraryContext> ContextClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundLibraryContext*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USoundLibraryContext* USoundLibrarySubsystem::AddContext(const class AActor* Actor, TSubclassOf<class USoundLibraryContext> ContextClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SoundLibrarySubsystem", "AddContext");

	Params::SoundLibrarySubsystem_AddContext Parms{};

	Parms.Actor = Actor;
	Parms.ContextClass = ContextClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SoundLibrary.SoundLibrarySubsystem.AddLibraries
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class USoundLibrary*>            Libraries                                              (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void USoundLibrarySubsystem::AddLibraries(const class AActor* Actor, const TArray<class USoundLibrary*>& Libraries)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SoundLibrarySubsystem", "AddLibraries");

	Params::SoundLibrarySubsystem_AddLibraries Parms{};

	Parms.Actor = Actor;
	Parms.Libraries = std::move(Libraries);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SoundLibrary.SoundLibrarySubsystem.AddLibrariesByClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<TSubclassOf<class USoundLibrary>>Libraries                                              (Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

void USoundLibrarySubsystem::AddLibrariesByClass(const class AActor* Actor, const TArray<TSubclassOf<class USoundLibrary>>& Libraries)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SoundLibrarySubsystem", "AddLibrariesByClass");

	Params::SoundLibrarySubsystem_AddLibrariesByClass Parms{};

	Parms.Actor = Actor;
	Parms.Libraries = std::move(Libraries);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SoundLibrary.SoundLibrarySubsystem.AddLibrary
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundLibrary*                    Library                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundLibrarySubsystem::AddLibrary(const class AActor* Actor, class USoundLibrary* Library)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SoundLibrarySubsystem", "AddLibrary");

	Params::SoundLibrarySubsystem_AddLibrary Parms{};

	Parms.Actor = Actor;
	Parms.Library = Library;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SoundLibrary.SoundLibrarySubsystem.AddLibraryByClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USoundLibrary>        Library                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundLibrarySubsystem::AddLibraryByClass(const class AActor* Actor, TSubclassOf<class USoundLibrary> Library)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SoundLibrarySubsystem", "AddLibraryByClass");

	Params::SoundLibrarySubsystem_AddLibraryByClass Parms{};

	Parms.Actor = Actor;
	Parms.Library = Library;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SoundLibrary.SoundLibrarySubsystem.DisableEventsForActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundLibrarySubsystem::DisableEventsForActor(const class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SoundLibrarySubsystem", "DisableEventsForActor");

	Params::SoundLibrarySubsystem_DisableEventsForActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SoundLibrary.SoundLibrarySubsystem.EnableEventsForActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundLibrarySubsystem::EnableEventsForActor(const class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SoundLibrarySubsystem", "EnableEventsForActor");

	Params::SoundLibrarySubsystem_EnableEventsForActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SoundLibrary.SoundLibrarySubsystem.GetContext
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USoundLibraryContext> ContextClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundLibraryContext*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USoundLibraryContext* USoundLibrarySubsystem::GetContext(const class AActor* Actor, TSubclassOf<class USoundLibraryContext> ContextClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SoundLibrarySubsystem", "GetContext");

	Params::SoundLibrarySubsystem_GetContext Parms{};

	Parms.Actor = Actor;
	Parms.ContextClass = ContextClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SoundLibrary.SoundLibrarySubsystem.PlaySound
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USoundLibraryContext*             Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSoundLibraryPlaySoundResult     OutResults                                             (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void USoundLibrarySubsystem::PlaySound(class USoundLibraryContext* Context, struct FSoundLibraryPlaySoundResult* OutResults)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SoundLibrarySubsystem", "PlaySound");

	Params::SoundLibrarySubsystem_PlaySound Parms{};

	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutResults != nullptr)
		*OutResults = std::move(Parms.OutResults);
}


// Function SoundLibrary.SoundLibrarySubsystem.PlaySoundSimple
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           OwningActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleSoundLibraryContextSettingsInSettings                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FSoundLibraryPlaySoundResult     ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FSoundLibraryPlaySoundResult USoundLibrarySubsystem::PlaySoundSimple(class AActor* OwningActor, const struct FSimpleSoundLibraryContextSettings& InSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SoundLibrarySubsystem", "PlaySoundSimple");

	Params::SoundLibrarySubsystem_PlaySoundSimple Parms{};

	Parms.OwningActor = OwningActor;
	Parms.InSettings = std::move(InSettings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SoundLibrary.SoundLibrarySubsystem.RemoveContext
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USoundLibraryContext> ContextClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USoundLibrarySubsystem::RemoveContext(const class AActor* Actor, TSubclassOf<class USoundLibraryContext> ContextClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SoundLibrarySubsystem", "RemoveContext");

	Params::SoundLibrarySubsystem_RemoveContext Parms{};

	Parms.Actor = Actor;
	Parms.ContextClass = ContextClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SoundLibrary.SoundLibrarySubsystem.RemoveLibraries
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class USoundLibrary*>            Libraries                                              (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void USoundLibrarySubsystem::RemoveLibraries(const class AActor* Actor, const TArray<class USoundLibrary*>& Libraries)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SoundLibrarySubsystem", "RemoveLibraries");

	Params::SoundLibrarySubsystem_RemoveLibraries Parms{};

	Parms.Actor = Actor;
	Parms.Libraries = std::move(Libraries);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SoundLibrary.SoundLibrarySubsystem.RemoveLibrariesByClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<TSubclassOf<class USoundLibrary>>Libraries                                              (Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

void USoundLibrarySubsystem::RemoveLibrariesByClass(const class AActor* Actor, const TArray<TSubclassOf<class USoundLibrary>>& Libraries)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SoundLibrarySubsystem", "RemoveLibrariesByClass");

	Params::SoundLibrarySubsystem_RemoveLibrariesByClass Parms{};

	Parms.Actor = Actor;
	Parms.Libraries = std::move(Libraries);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SoundLibrary.SoundLibrarySubsystem.RemoveLibrary
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundLibrary*                    Library                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundLibrarySubsystem::RemoveLibrary(const class AActor* Actor, class USoundLibrary* Library)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SoundLibrarySubsystem", "RemoveLibrary");

	Params::SoundLibrarySubsystem_RemoveLibrary Parms{};

	Parms.Actor = Actor;
	Parms.Library = Library;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SoundLibrary.SoundLibrarySubsystem.RemoveLibraryByClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USoundLibrary>        Library                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundLibrarySubsystem::RemoveLibraryByClass(const class AActor* Actor, TSubclassOf<class USoundLibrary> Library)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SoundLibrarySubsystem", "RemoveLibraryByClass");

	Params::SoundLibrarySubsystem_RemoveLibraryByClass Parms{};

	Parms.Actor = Actor;
	Parms.Library = Library;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SoundLibrary.SimpleSoundLibraryContext.ConfigureContext
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           OwningActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleSoundLibraryContextSettingsInSettings                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void USimpleSoundLibraryContext::ConfigureContext(class AActor* OwningActor, const struct FSimpleSoundLibraryContextSettings& InSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleSoundLibraryContext", "ConfigureContext");

	Params::SimpleSoundLibraryContext_ConfigureContext Parms{};

	Parms.OwningActor = OwningActor;
	Parms.InSettings = std::move(InSettings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

