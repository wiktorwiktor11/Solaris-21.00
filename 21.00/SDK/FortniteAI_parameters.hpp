#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FortniteAI

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AIModule_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteAI_structs.hpp"
#include "GameplayTags_0_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK::Params
{

// Function FortniteAI.FortAIComponent_Telemetry.OnDidDamage
// 0x0060 (0x0060 - 0x0000)
struct FortAIComponent_Telemetry_OnDidDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIComponent_Telemetry_OnDidDamage) == 0x000008, "Wrong alignment on FortAIComponent_Telemetry_OnDidDamage");
static_assert(sizeof(FortAIComponent_Telemetry_OnDidDamage) == 0x000060, "Wrong size on FortAIComponent_Telemetry_OnDidDamage");
static_assert(offsetof(FortAIComponent_Telemetry_OnDidDamage, DamagedActor) == 0x000000, "Member 'FortAIComponent_Telemetry_OnDidDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(FortAIComponent_Telemetry_OnDidDamage, Damage) == 0x000008, "Member 'FortAIComponent_Telemetry_OnDidDamage::Damage' has a wrong offset!");
static_assert(offsetof(FortAIComponent_Telemetry_OnDidDamage, InstigatedBy) == 0x000010, "Member 'FortAIComponent_Telemetry_OnDidDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortAIComponent_Telemetry_OnDidDamage, DamageCauser) == 0x000018, "Member 'FortAIComponent_Telemetry_OnDidDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortAIComponent_Telemetry_OnDidDamage, HitLocation) == 0x000020, "Member 'FortAIComponent_Telemetry_OnDidDamage::HitLocation' has a wrong offset!");
static_assert(offsetof(FortAIComponent_Telemetry_OnDidDamage, FHitComponent) == 0x000038, "Member 'FortAIComponent_Telemetry_OnDidDamage::FHitComponent' has a wrong offset!");
static_assert(offsetof(FortAIComponent_Telemetry_OnDidDamage, BoneName) == 0x000040, "Member 'FortAIComponent_Telemetry_OnDidDamage::BoneName' has a wrong offset!");
static_assert(offsetof(FortAIComponent_Telemetry_OnDidDamage, Momentum) == 0x000048, "Member 'FortAIComponent_Telemetry_OnDidDamage::Momentum' has a wrong offset!");

// Function FortniteAI.FortAIComponent_Telemetry.OnPawnDied
// 0x0060 (0x0060 - 0x0000)
struct FortAIComponent_Telemetry_OnPawnDied final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIComponent_Telemetry_OnPawnDied) == 0x000008, "Wrong alignment on FortAIComponent_Telemetry_OnPawnDied");
static_assert(sizeof(FortAIComponent_Telemetry_OnPawnDied) == 0x000060, "Wrong size on FortAIComponent_Telemetry_OnPawnDied");
static_assert(offsetof(FortAIComponent_Telemetry_OnPawnDied, DamagedActor) == 0x000000, "Member 'FortAIComponent_Telemetry_OnPawnDied::DamagedActor' has a wrong offset!");
static_assert(offsetof(FortAIComponent_Telemetry_OnPawnDied, Damage) == 0x000008, "Member 'FortAIComponent_Telemetry_OnPawnDied::Damage' has a wrong offset!");
static_assert(offsetof(FortAIComponent_Telemetry_OnPawnDied, InstigatedBy) == 0x000010, "Member 'FortAIComponent_Telemetry_OnPawnDied::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortAIComponent_Telemetry_OnPawnDied, DamageCauser) == 0x000018, "Member 'FortAIComponent_Telemetry_OnPawnDied::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortAIComponent_Telemetry_OnPawnDied, HitLocation) == 0x000020, "Member 'FortAIComponent_Telemetry_OnPawnDied::HitLocation' has a wrong offset!");
static_assert(offsetof(FortAIComponent_Telemetry_OnPawnDied, FHitComponent) == 0x000038, "Member 'FortAIComponent_Telemetry_OnPawnDied::FHitComponent' has a wrong offset!");
static_assert(offsetof(FortAIComponent_Telemetry_OnPawnDied, BoneName) == 0x000040, "Member 'FortAIComponent_Telemetry_OnPawnDied::BoneName' has a wrong offset!");
static_assert(offsetof(FortAIComponent_Telemetry_OnPawnDied, Momentum) == 0x000048, "Member 'FortAIComponent_Telemetry_OnPawnDied::Momentum' has a wrong offset!");

// Function FortniteAI.FortAIComponent_Telemetry.OnTetheredFollowerChanged
// 0x0010 (0x0010 - 0x0000)
struct FortAIComponent_Telemetry_OnTetheredFollowerChanged final
{
public:
	class AFortPawn*                              NewFollower;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPawn*                              OldFollower;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIComponent_Telemetry_OnTetheredFollowerChanged) == 0x000008, "Wrong alignment on FortAIComponent_Telemetry_OnTetheredFollowerChanged");
static_assert(sizeof(FortAIComponent_Telemetry_OnTetheredFollowerChanged) == 0x000010, "Wrong size on FortAIComponent_Telemetry_OnTetheredFollowerChanged");
static_assert(offsetof(FortAIComponent_Telemetry_OnTetheredFollowerChanged, NewFollower) == 0x000000, "Member 'FortAIComponent_Telemetry_OnTetheredFollowerChanged::NewFollower' has a wrong offset!");
static_assert(offsetof(FortAIComponent_Telemetry_OnTetheredFollowerChanged, OldFollower) == 0x000008, "Member 'FortAIComponent_Telemetry_OnTetheredFollowerChanged::OldFollower' has a wrong offset!");

// Function FortniteAI.AthenaAIPopulationTracker.OnAgentGameOver
// 0x0018 (0x0018 - 0x0000)
struct AthenaAIPopulationTracker_OnAgentGameOver final
{
public:
	class AFortAthenaAIBotController*             AIBotController;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPawn*                              Pawn;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            Instigator;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAIPopulationTracker_OnAgentGameOver) == 0x000008, "Wrong alignment on AthenaAIPopulationTracker_OnAgentGameOver");
static_assert(sizeof(AthenaAIPopulationTracker_OnAgentGameOver) == 0x000018, "Wrong size on AthenaAIPopulationTracker_OnAgentGameOver");
static_assert(offsetof(AthenaAIPopulationTracker_OnAgentGameOver, AIBotController) == 0x000000, "Member 'AthenaAIPopulationTracker_OnAgentGameOver::AIBotController' has a wrong offset!");
static_assert(offsetof(AthenaAIPopulationTracker_OnAgentGameOver, Pawn) == 0x000008, "Member 'AthenaAIPopulationTracker_OnAgentGameOver::Pawn' has a wrong offset!");
static_assert(offsetof(AthenaAIPopulationTracker_OnAgentGameOver, Instigator) == 0x000010, "Member 'AthenaAIPopulationTracker_OnAgentGameOver::Instigator' has a wrong offset!");

// Function FortniteAI.AthenaAIPopulationTracker.OnAISpawned
// 0x0010 (0x0010 - 0x0000)
struct AthenaAIPopulationTracker_OnAISpawned final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestId;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaAIPopulationTracker_OnAISpawned) == 0x000008, "Wrong alignment on AthenaAIPopulationTracker_OnAISpawned");
static_assert(sizeof(AthenaAIPopulationTracker_OnAISpawned) == 0x000010, "Wrong size on AthenaAIPopulationTracker_OnAISpawned");
static_assert(offsetof(AthenaAIPopulationTracker_OnAISpawned, Pawn) == 0x000000, "Member 'AthenaAIPopulationTracker_OnAISpawned::Pawn' has a wrong offset!");
static_assert(offsetof(AthenaAIPopulationTracker_OnAISpawned, RequestId) == 0x000008, "Member 'AthenaAIPopulationTracker_OnAISpawned::RequestId' has a wrong offset!");

// Function FortniteAI.AthenaAIPopulationTracker.OnFortPawnDied
// 0x0060 (0x0060 - 0x0000)
struct AthenaAIPopulationTracker_OnFortPawnDied final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAIPopulationTracker_OnFortPawnDied) == 0x000008, "Wrong alignment on AthenaAIPopulationTracker_OnFortPawnDied");
static_assert(sizeof(AthenaAIPopulationTracker_OnFortPawnDied) == 0x000060, "Wrong size on AthenaAIPopulationTracker_OnFortPawnDied");
static_assert(offsetof(AthenaAIPopulationTracker_OnFortPawnDied, DamagedActor) == 0x000000, "Member 'AthenaAIPopulationTracker_OnFortPawnDied::DamagedActor' has a wrong offset!");
static_assert(offsetof(AthenaAIPopulationTracker_OnFortPawnDied, Damage) == 0x000008, "Member 'AthenaAIPopulationTracker_OnFortPawnDied::Damage' has a wrong offset!");
static_assert(offsetof(AthenaAIPopulationTracker_OnFortPawnDied, InstigatedBy) == 0x000010, "Member 'AthenaAIPopulationTracker_OnFortPawnDied::InstigatedBy' has a wrong offset!");
static_assert(offsetof(AthenaAIPopulationTracker_OnFortPawnDied, DamageCauser) == 0x000018, "Member 'AthenaAIPopulationTracker_OnFortPawnDied::DamageCauser' has a wrong offset!");
static_assert(offsetof(AthenaAIPopulationTracker_OnFortPawnDied, HitLocation) == 0x000020, "Member 'AthenaAIPopulationTracker_OnFortPawnDied::HitLocation' has a wrong offset!");
static_assert(offsetof(AthenaAIPopulationTracker_OnFortPawnDied, FHitComponent) == 0x000038, "Member 'AthenaAIPopulationTracker_OnFortPawnDied::FHitComponent' has a wrong offset!");
static_assert(offsetof(AthenaAIPopulationTracker_OnFortPawnDied, BoneName) == 0x000040, "Member 'AthenaAIPopulationTracker_OnFortPawnDied::BoneName' has a wrong offset!");
static_assert(offsetof(AthenaAIPopulationTracker_OnFortPawnDied, Momentum) == 0x000048, "Member 'AthenaAIPopulationTracker_OnFortPawnDied::Momentum' has a wrong offset!");

// Function FortniteAI.AthenaAIPopulationTracker.GetAIMatchingQuery
// 0x0058 (0x0058 - 0x0000)
struct AthenaAIPopulationTracker_GetAIMatchingQuery final
{
public:
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AController*>                    ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAIPopulationTracker_GetAIMatchingQuery) == 0x000008, "Wrong alignment on AthenaAIPopulationTracker_GetAIMatchingQuery");
static_assert(sizeof(AthenaAIPopulationTracker_GetAIMatchingQuery) == 0x000058, "Wrong size on AthenaAIPopulationTracker_GetAIMatchingQuery");
static_assert(offsetof(AthenaAIPopulationTracker_GetAIMatchingQuery, TagQuery) == 0x000000, "Member 'AthenaAIPopulationTracker_GetAIMatchingQuery::TagQuery' has a wrong offset!");
static_assert(offsetof(AthenaAIPopulationTracker_GetAIMatchingQuery, ReturnValue) == 0x000048, "Member 'AthenaAIPopulationTracker_GetAIMatchingQuery::ReturnValue' has a wrong offset!");

// Function FortniteAI.AthenaAIPopulationTracker.GetAIPopulationTrackerCount
// 0x0014 (0x0014 - 0x0000)
struct AthenaAIPopulationTracker_GetAIPopulationTrackerCount final
{
public:
	struct FAIPopulationCountSnapshot             ReturnValue;                                       // 0x0000(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAIPopulationTracker_GetAIPopulationTrackerCount) == 0x000004, "Wrong alignment on AthenaAIPopulationTracker_GetAIPopulationTrackerCount");
static_assert(sizeof(AthenaAIPopulationTracker_GetAIPopulationTrackerCount) == 0x000014, "Wrong size on AthenaAIPopulationTracker_GetAIPopulationTrackerCount");
static_assert(offsetof(AthenaAIPopulationTracker_GetAIPopulationTrackerCount, ReturnValue) == 0x000000, "Member 'AthenaAIPopulationTracker_GetAIPopulationTrackerCount::ReturnValue' has a wrong offset!");

// Function FortniteAI.AthenaAIPopulationTracker.GetNumAIPawn
// 0x0004 (0x0004 - 0x0000)
struct AthenaAIPopulationTracker_GetNumAIPawn final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAIPopulationTracker_GetNumAIPawn) == 0x000004, "Wrong alignment on AthenaAIPopulationTracker_GetNumAIPawn");
static_assert(sizeof(AthenaAIPopulationTracker_GetNumAIPawn) == 0x000004, "Wrong size on AthenaAIPopulationTracker_GetNumAIPawn");
static_assert(offsetof(AthenaAIPopulationTracker_GetNumAIPawn, ReturnValue) == 0x000000, "Member 'AthenaAIPopulationTracker_GetNumAIPawn::ReturnValue' has a wrong offset!");

// Function FortniteAI.AthenaAIPopulationTracker.GetNumNonAthenaParticipantBots
// 0x0004 (0x0004 - 0x0000)
struct AthenaAIPopulationTracker_GetNumNonAthenaParticipantBots final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAIPopulationTracker_GetNumNonAthenaParticipantBots) == 0x000004, "Wrong alignment on AthenaAIPopulationTracker_GetNumNonAthenaParticipantBots");
static_assert(sizeof(AthenaAIPopulationTracker_GetNumNonAthenaParticipantBots) == 0x000004, "Wrong size on AthenaAIPopulationTracker_GetNumNonAthenaParticipantBots");
static_assert(offsetof(AthenaAIPopulationTracker_GetNumNonAthenaParticipantBots, ReturnValue) == 0x000000, "Member 'AthenaAIPopulationTracker_GetNumNonAthenaParticipantBots::ReturnValue' has a wrong offset!");

// Function FortniteAI.AthenaAIPopulationTracker.GetNumPlayerBots
// 0x0004 (0x0004 - 0x0000)
struct AthenaAIPopulationTracker_GetNumPlayerBots final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAIPopulationTracker_GetNumPlayerBots) == 0x000004, "Wrong alignment on AthenaAIPopulationTracker_GetNumPlayerBots");
static_assert(sizeof(AthenaAIPopulationTracker_GetNumPlayerBots) == 0x000004, "Wrong size on AthenaAIPopulationTracker_GetNumPlayerBots");
static_assert(offsetof(AthenaAIPopulationTracker_GetNumPlayerBots, ReturnValue) == 0x000000, "Member 'AthenaAIPopulationTracker_GetNumPlayerBots::ReturnValue' has a wrong offset!");

// Function FortniteAI.AthenaAIPopulationTracker.GetNumTotalBots
// 0x0004 (0x0004 - 0x0000)
struct AthenaAIPopulationTracker_GetNumTotalBots final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAIPopulationTracker_GetNumTotalBots) == 0x000004, "Wrong alignment on AthenaAIPopulationTracker_GetNumTotalBots");
static_assert(sizeof(AthenaAIPopulationTracker_GetNumTotalBots) == 0x000004, "Wrong size on AthenaAIPopulationTracker_GetNumTotalBots");
static_assert(offsetof(AthenaAIPopulationTracker_GetNumTotalBots, ReturnValue) == 0x000000, "Member 'AthenaAIPopulationTracker_GetNumTotalBots::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.AddTargetInfo
// 0x0018 (0x0018 - 0x0000)
struct FortAthenaAIBotController_AddTargetInfo final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceTarget;                                      // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPerceptionState                              PerceptionState;                                   // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ForgetTime;                                        // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForgetDistance;                                    // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAthenaAIBotController_AddTargetInfo) == 0x000008, "Wrong alignment on FortAthenaAIBotController_AddTargetInfo");
static_assert(sizeof(FortAthenaAIBotController_AddTargetInfo) == 0x000018, "Wrong size on FortAthenaAIBotController_AddTargetInfo");
static_assert(offsetof(FortAthenaAIBotController_AddTargetInfo, Target) == 0x000000, "Member 'FortAthenaAIBotController_AddTargetInfo::Target' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_AddTargetInfo, bForceTarget) == 0x000008, "Member 'FortAthenaAIBotController_AddTargetInfo::bForceTarget' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_AddTargetInfo, PerceptionState) == 0x000009, "Member 'FortAthenaAIBotController_AddTargetInfo::PerceptionState' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_AddTargetInfo, ForgetTime) == 0x00000C, "Member 'FortAthenaAIBotController_AddTargetInfo::ForgetTime' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_AddTargetInfo, ForgetDistance) == 0x000010, "Member 'FortAthenaAIBotController_AddTargetInfo::ForgetDistance' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.AddTargetInfos
// 0x0020 (0x0020 - 0x0000)
struct FortAthenaAIBotController_AddTargetInfos final
{
public:
	TArray<class AActor*>                         Targets;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EPerceptionState                              PerceptionState;                                   // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ForgetTime;                                        // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForgetDistance;                                    // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAthenaAIBotController_AddTargetInfos) == 0x000008, "Wrong alignment on FortAthenaAIBotController_AddTargetInfos");
static_assert(sizeof(FortAthenaAIBotController_AddTargetInfos) == 0x000020, "Wrong size on FortAthenaAIBotController_AddTargetInfos");
static_assert(offsetof(FortAthenaAIBotController_AddTargetInfos, Targets) == 0x000000, "Member 'FortAthenaAIBotController_AddTargetInfos::Targets' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_AddTargetInfos, PerceptionState) == 0x000010, "Member 'FortAthenaAIBotController_AddTargetInfos::PerceptionState' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_AddTargetInfos, ForgetTime) == 0x000014, "Member 'FortAthenaAIBotController_AddTargetInfos::ForgetTime' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_AddTargetInfos, ForgetDistance) == 0x000018, "Member 'FortAthenaAIBotController_AddTargetInfos::ForgetDistance' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.ChangeActiveVariantForCosmeticItem
// 0x000C (0x000C - 0x0000)
struct FortAthenaAIBotController_ChangeActiveVariantForCosmeticItem final
{
public:
	class FName                                   ItemTemplateToChange;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           VariantChannelToChange;                            // 0x0004(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DesiredActiveVariant;                              // 0x0008(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_ChangeActiveVariantForCosmeticItem) == 0x000004, "Wrong alignment on FortAthenaAIBotController_ChangeActiveVariantForCosmeticItem");
static_assert(sizeof(FortAthenaAIBotController_ChangeActiveVariantForCosmeticItem) == 0x00000C, "Wrong size on FortAthenaAIBotController_ChangeActiveVariantForCosmeticItem");
static_assert(offsetof(FortAthenaAIBotController_ChangeActiveVariantForCosmeticItem, ItemTemplateToChange) == 0x000000, "Member 'FortAthenaAIBotController_ChangeActiveVariantForCosmeticItem::ItemTemplateToChange' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_ChangeActiveVariantForCosmeticItem, VariantChannelToChange) == 0x000004, "Member 'FortAthenaAIBotController_ChangeActiveVariantForCosmeticItem::VariantChannelToChange' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_ChangeActiveVariantForCosmeticItem, DesiredActiveVariant) == 0x000008, "Member 'FortAthenaAIBotController_ChangeActiveVariantForCosmeticItem::DesiredActiveVariant' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.EquipBestWeapon
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAIBotController_EquipBestWeapon final
{
public:
	class AFortWeapon*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_EquipBestWeapon) == 0x000008, "Wrong alignment on FortAthenaAIBotController_EquipBestWeapon");
static_assert(sizeof(FortAthenaAIBotController_EquipBestWeapon) == 0x000008, "Wrong size on FortAthenaAIBotController_EquipBestWeapon");
static_assert(offsetof(FortAthenaAIBotController_EquipBestWeapon, ReturnValue) == 0x000000, "Member 'FortAthenaAIBotController_EquipBestWeapon::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.EquipMeleeWeapon
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAIBotController_EquipMeleeWeapon final
{
public:
	class AFortWeapon*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_EquipMeleeWeapon) == 0x000008, "Wrong alignment on FortAthenaAIBotController_EquipMeleeWeapon");
static_assert(sizeof(FortAthenaAIBotController_EquipMeleeWeapon) == 0x000008, "Wrong size on FortAthenaAIBotController_EquipMeleeWeapon");
static_assert(offsetof(FortAthenaAIBotController_EquipMeleeWeapon, ReturnValue) == 0x000000, "Member 'FortAthenaAIBotController_EquipMeleeWeapon::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.EquipWeapon
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaAIBotController_EquipWeapon final
{
public:
	const class UFortWorldItem*                   Weapon;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortWeapon*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_EquipWeapon) == 0x000008, "Wrong alignment on FortAthenaAIBotController_EquipWeapon");
static_assert(sizeof(FortAthenaAIBotController_EquipWeapon) == 0x000010, "Wrong size on FortAthenaAIBotController_EquipWeapon");
static_assert(offsetof(FortAthenaAIBotController_EquipWeapon, Weapon) == 0x000000, "Member 'FortAthenaAIBotController_EquipWeapon::Weapon' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_EquipWeapon, ReturnValue) == 0x000008, "Member 'FortAthenaAIBotController_EquipWeapon::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.EquipWeaponByTag
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaAIBotController_EquipWeaponByTag final
{
public:
	struct FGameplayTag                           WeaponTag;                                         // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortWeapon*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_EquipWeaponByTag) == 0x000008, "Wrong alignment on FortAthenaAIBotController_EquipWeaponByTag");
static_assert(sizeof(FortAthenaAIBotController_EquipWeaponByTag) == 0x000010, "Wrong size on FortAthenaAIBotController_EquipWeaponByTag");
static_assert(offsetof(FortAthenaAIBotController_EquipWeaponByTag, WeaponTag) == 0x000000, "Member 'FortAthenaAIBotController_EquipWeaponByTag::WeaponTag' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_EquipWeaponByTag, ReturnValue) == 0x000008, "Member 'FortAthenaAIBotController_EquipWeaponByTag::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.NotifyPickupsSpawnedOnDeath
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaAIBotController_NotifyPickupsSpawnedOnDeath final
{
public:
	TArray<class AFortPickup*>                    SpawnedPickups;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_NotifyPickupsSpawnedOnDeath) == 0x000008, "Wrong alignment on FortAthenaAIBotController_NotifyPickupsSpawnedOnDeath");
static_assert(sizeof(FortAthenaAIBotController_NotifyPickupsSpawnedOnDeath) == 0x000010, "Wrong size on FortAthenaAIBotController_NotifyPickupsSpawnedOnDeath");
static_assert(offsetof(FortAthenaAIBotController_NotifyPickupsSpawnedOnDeath, SpawnedPickups) == 0x000000, "Member 'FortAthenaAIBotController_NotifyPickupsSpawnedOnDeath::SpawnedPickups' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.OnAgentDBNO
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaAIBotController_OnAgentDBNO final
{
public:
	class AFortPawn*                              InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsDBNO;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAthenaAIBotController_OnAgentDBNO) == 0x000008, "Wrong alignment on FortAthenaAIBotController_OnAgentDBNO");
static_assert(sizeof(FortAthenaAIBotController_OnAgentDBNO) == 0x000010, "Wrong size on FortAthenaAIBotController_OnAgentDBNO");
static_assert(offsetof(FortAthenaAIBotController_OnAgentDBNO, InPlayer) == 0x000000, "Member 'FortAthenaAIBotController_OnAgentDBNO::InPlayer' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_OnAgentDBNO, bInIsDBNO) == 0x000008, "Member 'FortAthenaAIBotController_OnAgentDBNO::bInIsDBNO' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.OnAlertLevelChanged
// 0x0002 (0x0002 - 0x0000)
struct FortAthenaAIBotController_OnAlertLevelChanged final
{
public:
	EAlertLevel                                   OldAlertLevel;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlertLevel                                   NewAlertLevel;                                     // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_OnAlertLevelChanged) == 0x000001, "Wrong alignment on FortAthenaAIBotController_OnAlertLevelChanged");
static_assert(sizeof(FortAthenaAIBotController_OnAlertLevelChanged) == 0x000002, "Wrong size on FortAthenaAIBotController_OnAlertLevelChanged");
static_assert(offsetof(FortAthenaAIBotController_OnAlertLevelChanged, OldAlertLevel) == 0x000000, "Member 'FortAthenaAIBotController_OnAlertLevelChanged::OldAlertLevel' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_OnAlertLevelChanged, NewAlertLevel) == 0x000001, "Member 'FortAthenaAIBotController_OnAlertLevelChanged::NewAlertLevel' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.OnBeginSpectating
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAIBotController_OnBeginSpectating final
{
public:
	class AFortPlayerStateZone*                   Spectator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_OnBeginSpectating) == 0x000008, "Wrong alignment on FortAthenaAIBotController_OnBeginSpectating");
static_assert(sizeof(FortAthenaAIBotController_OnBeginSpectating) == 0x000008, "Wrong size on FortAthenaAIBotController_OnBeginSpectating");
static_assert(offsetof(FortAthenaAIBotController_OnBeginSpectating, Spectator) == 0x000000, "Member 'FortAthenaAIBotController_OnBeginSpectating::Spectator' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.OnCurrentHarvestableDestroyed
// 0x0060 (0x0060 - 0x0000)
struct FortAthenaAIBotController_OnCurrentHarvestableDestroyed final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_OnCurrentHarvestableDestroyed) == 0x000008, "Wrong alignment on FortAthenaAIBotController_OnCurrentHarvestableDestroyed");
static_assert(sizeof(FortAthenaAIBotController_OnCurrentHarvestableDestroyed) == 0x000060, "Wrong size on FortAthenaAIBotController_OnCurrentHarvestableDestroyed");
static_assert(offsetof(FortAthenaAIBotController_OnCurrentHarvestableDestroyed, DamagedActor) == 0x000000, "Member 'FortAthenaAIBotController_OnCurrentHarvestableDestroyed::DamagedActor' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_OnCurrentHarvestableDestroyed, Damage) == 0x000008, "Member 'FortAthenaAIBotController_OnCurrentHarvestableDestroyed::Damage' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_OnCurrentHarvestableDestroyed, InstigatedBy) == 0x000010, "Member 'FortAthenaAIBotController_OnCurrentHarvestableDestroyed::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_OnCurrentHarvestableDestroyed, DamageCauser) == 0x000018, "Member 'FortAthenaAIBotController_OnCurrentHarvestableDestroyed::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_OnCurrentHarvestableDestroyed, HitLocation) == 0x000020, "Member 'FortAthenaAIBotController_OnCurrentHarvestableDestroyed::HitLocation' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_OnCurrentHarvestableDestroyed, FHitComponent) == 0x000038, "Member 'FortAthenaAIBotController_OnCurrentHarvestableDestroyed::FHitComponent' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_OnCurrentHarvestableDestroyed, BoneName) == 0x000040, "Member 'FortAthenaAIBotController_OnCurrentHarvestableDestroyed::BoneName' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_OnCurrentHarvestableDestroyed, Momentum) == 0x000048, "Member 'FortAthenaAIBotController_OnCurrentHarvestableDestroyed::Momentum' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.OnEndSpectating
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAIBotController_OnEndSpectating final
{
public:
	class AFortPlayerStateZone*                   Spectator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_OnEndSpectating) == 0x000008, "Wrong alignment on FortAthenaAIBotController_OnEndSpectating");
static_assert(sizeof(FortAthenaAIBotController_OnEndSpectating) == 0x000008, "Wrong size on FortAthenaAIBotController_OnEndSpectating");
static_assert(offsetof(FortAthenaAIBotController_OnEndSpectating, Spectator) == 0x000000, "Member 'FortAthenaAIBotController_OnEndSpectating::Spectator' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.OnGamePhaseChanged
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaAIBotController_OnGamePhaseChanged final
{
public:
	EAthenaGamePhase                              GamePhase;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_OnGamePhaseChanged) == 0x000001, "Wrong alignment on FortAthenaAIBotController_OnGamePhaseChanged");
static_assert(sizeof(FortAthenaAIBotController_OnGamePhaseChanged) == 0x000001, "Wrong size on FortAthenaAIBotController_OnGamePhaseChanged");
static_assert(offsetof(FortAthenaAIBotController_OnGamePhaseChanged, GamePhase) == 0x000000, "Member 'FortAthenaAIBotController_OnGamePhaseChanged::GamePhase' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.OnGamePhaseStepChanged
// 0x0018 (0x0018 - 0x0000)
struct FortAthenaAIBotController_OnGamePhaseStepChanged final
{
public:
	TScriptInterface<class IFortSafeZoneInterface> SafeZoneInterface;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAthenaGamePhaseStep                          GamePhaseStep;                                     // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAthenaAIBotController_OnGamePhaseStepChanged) == 0x000008, "Wrong alignment on FortAthenaAIBotController_OnGamePhaseStepChanged");
static_assert(sizeof(FortAthenaAIBotController_OnGamePhaseStepChanged) == 0x000018, "Wrong size on FortAthenaAIBotController_OnGamePhaseStepChanged");
static_assert(offsetof(FortAthenaAIBotController_OnGamePhaseStepChanged, SafeZoneInterface) == 0x000000, "Member 'FortAthenaAIBotController_OnGamePhaseStepChanged::SafeZoneInterface' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_OnGamePhaseStepChanged, GamePhaseStep) == 0x000010, "Member 'FortAthenaAIBotController_OnGamePhaseStepChanged::GamePhaseStep' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.OnKnockbacked
// 0x0004 (0x0004 - 0x0000)
struct FortAthenaAIBotController_OnKnockbacked final
{
public:
	struct FGameplayTag                           KnockbackTypeTag;                                  // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_OnKnockbacked) == 0x000004, "Wrong alignment on FortAthenaAIBotController_OnKnockbacked");
static_assert(sizeof(FortAthenaAIBotController_OnKnockbacked) == 0x000004, "Wrong size on FortAthenaAIBotController_OnKnockbacked");
static_assert(offsetof(FortAthenaAIBotController_OnKnockbacked, KnockbackTypeTag) == 0x000000, "Member 'FortAthenaAIBotController_OnKnockbacked::KnockbackTypeTag' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.OnLaunched
// 0x0020 (0x0020 - 0x0000)
struct FortAthenaAIBotController_OnLaunched final
{
public:
	struct FVector                                LaunchVelocity;                                    // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bXYOverride;                                       // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bZOverride;                                        // 0x0019(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAthenaAIBotController_OnLaunched) == 0x000008, "Wrong alignment on FortAthenaAIBotController_OnLaunched");
static_assert(sizeof(FortAthenaAIBotController_OnLaunched) == 0x000020, "Wrong size on FortAthenaAIBotController_OnLaunched");
static_assert(offsetof(FortAthenaAIBotController_OnLaunched, LaunchVelocity) == 0x000000, "Member 'FortAthenaAIBotController_OnLaunched::LaunchVelocity' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_OnLaunched, bXYOverride) == 0x000018, "Member 'FortAthenaAIBotController_OnLaunched::bXYOverride' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_OnLaunched, bZOverride) == 0x000019, "Member 'FortAthenaAIBotController_OnLaunched::bZOverride' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.OnMovementModeChange
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaAIBotController_OnMovementModeChange final
{
public:
	class ACharacter*                             InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 PrevMovementMode;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PreviousCustomMode;                                // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAthenaAIBotController_OnMovementModeChange) == 0x000008, "Wrong alignment on FortAthenaAIBotController_OnMovementModeChange");
static_assert(sizeof(FortAthenaAIBotController_OnMovementModeChange) == 0x000010, "Wrong size on FortAthenaAIBotController_OnMovementModeChange");
static_assert(offsetof(FortAthenaAIBotController_OnMovementModeChange, InCharacter) == 0x000000, "Member 'FortAthenaAIBotController_OnMovementModeChange::InCharacter' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_OnMovementModeChange, PrevMovementMode) == 0x000008, "Member 'FortAthenaAIBotController_OnMovementModeChange::PrevMovementMode' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_OnMovementModeChange, PreviousCustomMode) == 0x000009, "Member 'FortAthenaAIBotController_OnMovementModeChange::PreviousCustomMode' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.OnPawnDidDamage
// 0x0060 (0x0060 - 0x0000)
struct FortAthenaAIBotController_OnPawnDidDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_OnPawnDidDamage) == 0x000008, "Wrong alignment on FortAthenaAIBotController_OnPawnDidDamage");
static_assert(sizeof(FortAthenaAIBotController_OnPawnDidDamage) == 0x000060, "Wrong size on FortAthenaAIBotController_OnPawnDidDamage");
static_assert(offsetof(FortAthenaAIBotController_OnPawnDidDamage, DamagedActor) == 0x000000, "Member 'FortAthenaAIBotController_OnPawnDidDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_OnPawnDidDamage, Damage) == 0x000008, "Member 'FortAthenaAIBotController_OnPawnDidDamage::Damage' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_OnPawnDidDamage, InstigatedBy) == 0x000010, "Member 'FortAthenaAIBotController_OnPawnDidDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_OnPawnDidDamage, DamageCauser) == 0x000018, "Member 'FortAthenaAIBotController_OnPawnDidDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_OnPawnDidDamage, HitLocation) == 0x000020, "Member 'FortAthenaAIBotController_OnPawnDidDamage::HitLocation' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_OnPawnDidDamage, HitComponent) == 0x000038, "Member 'FortAthenaAIBotController_OnPawnDidDamage::HitComponent' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_OnPawnDidDamage, BoneName) == 0x000040, "Member 'FortAthenaAIBotController_OnPawnDidDamage::BoneName' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_OnPawnDidDamage, Momentum) == 0x000048, "Member 'FortAthenaAIBotController_OnPawnDidDamage::Momentum' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.OnPawnWeaponChanged
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaAIBotController_OnPawnWeaponChanged final
{
public:
	class AFortWeapon*                            NewWeapon;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortWeapon*                            OldWeapon;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_OnPawnWeaponChanged) == 0x000008, "Wrong alignment on FortAthenaAIBotController_OnPawnWeaponChanged");
static_assert(sizeof(FortAthenaAIBotController_OnPawnWeaponChanged) == 0x000010, "Wrong size on FortAthenaAIBotController_OnPawnWeaponChanged");
static_assert(offsetof(FortAthenaAIBotController_OnPawnWeaponChanged, NewWeapon) == 0x000000, "Member 'FortAthenaAIBotController_OnPawnWeaponChanged::NewWeapon' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_OnPawnWeaponChanged, OldWeapon) == 0x000008, "Member 'FortAthenaAIBotController_OnPawnWeaponChanged::OldWeapon' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.OnPerceptionSensed
// 0x0058 (0x0058 - 0x0000)
struct FortAthenaAIBotController_OnPerceptionSensed final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIStimulus                            Stim;                                              // 0x0008(0x0050)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_OnPerceptionSensed) == 0x000008, "Wrong alignment on FortAthenaAIBotController_OnPerceptionSensed");
static_assert(sizeof(FortAthenaAIBotController_OnPerceptionSensed) == 0x000058, "Wrong size on FortAthenaAIBotController_OnPerceptionSensed");
static_assert(offsetof(FortAthenaAIBotController_OnPerceptionSensed, SourceActor) == 0x000000, "Member 'FortAthenaAIBotController_OnPerceptionSensed::SourceActor' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_OnPerceptionSensed, Stim) == 0x000008, "Member 'FortAthenaAIBotController_OnPerceptionSensed::Stim' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.OnPossesedPawnDied
// 0x0060 (0x0060 - 0x0000)
struct FortAthenaAIBotController_OnPossesedPawnDied final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_OnPossesedPawnDied) == 0x000008, "Wrong alignment on FortAthenaAIBotController_OnPossesedPawnDied");
static_assert(sizeof(FortAthenaAIBotController_OnPossesedPawnDied) == 0x000060, "Wrong size on FortAthenaAIBotController_OnPossesedPawnDied");
static_assert(offsetof(FortAthenaAIBotController_OnPossesedPawnDied, DamagedActor) == 0x000000, "Member 'FortAthenaAIBotController_OnPossesedPawnDied::DamagedActor' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_OnPossesedPawnDied, Damage) == 0x000008, "Member 'FortAthenaAIBotController_OnPossesedPawnDied::Damage' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_OnPossesedPawnDied, InstigatedBy) == 0x000010, "Member 'FortAthenaAIBotController_OnPossesedPawnDied::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_OnPossesedPawnDied, DamageCauser) == 0x000018, "Member 'FortAthenaAIBotController_OnPossesedPawnDied::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_OnPossesedPawnDied, HitLocation) == 0x000020, "Member 'FortAthenaAIBotController_OnPossesedPawnDied::HitLocation' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_OnPossesedPawnDied, FHitComponent) == 0x000038, "Member 'FortAthenaAIBotController_OnPossesedPawnDied::FHitComponent' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_OnPossesedPawnDied, BoneName) == 0x000040, "Member 'FortAthenaAIBotController_OnPossesedPawnDied::BoneName' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_OnPossesedPawnDied, Momentum) == 0x000048, "Member 'FortAthenaAIBotController_OnPossesedPawnDied::Momentum' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.OnPossessedPawnReceiveDamage
// 0x0060 (0x0060 - 0x0000)
struct FortAthenaAIBotController_OnPossessedPawnReceiveDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_OnPossessedPawnReceiveDamage) == 0x000008, "Wrong alignment on FortAthenaAIBotController_OnPossessedPawnReceiveDamage");
static_assert(sizeof(FortAthenaAIBotController_OnPossessedPawnReceiveDamage) == 0x000060, "Wrong size on FortAthenaAIBotController_OnPossessedPawnReceiveDamage");
static_assert(offsetof(FortAthenaAIBotController_OnPossessedPawnReceiveDamage, DamagedActor) == 0x000000, "Member 'FortAthenaAIBotController_OnPossessedPawnReceiveDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_OnPossessedPawnReceiveDamage, Damage) == 0x000008, "Member 'FortAthenaAIBotController_OnPossessedPawnReceiveDamage::Damage' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_OnPossessedPawnReceiveDamage, InstigatedBy) == 0x000010, "Member 'FortAthenaAIBotController_OnPossessedPawnReceiveDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_OnPossessedPawnReceiveDamage, DamageCauser) == 0x000018, "Member 'FortAthenaAIBotController_OnPossessedPawnReceiveDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_OnPossessedPawnReceiveDamage, HitLocation) == 0x000020, "Member 'FortAthenaAIBotController_OnPossessedPawnReceiveDamage::HitLocation' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_OnPossessedPawnReceiveDamage, FHitComponent) == 0x000038, "Member 'FortAthenaAIBotController_OnPossessedPawnReceiveDamage::FHitComponent' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_OnPossessedPawnReceiveDamage, BoneName) == 0x000040, "Member 'FortAthenaAIBotController_OnPossessedPawnReceiveDamage::BoneName' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_OnPossessedPawnReceiveDamage, Momentum) == 0x000048, "Member 'FortAthenaAIBotController_OnPossessedPawnReceiveDamage::Momentum' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.OnSafezoneStateChanged
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaAIBotController_OnSafezoneStateChanged final
{
public:
	EFortSafeZoneState                            NewState;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_OnSafezoneStateChanged) == 0x000001, "Wrong alignment on FortAthenaAIBotController_OnSafezoneStateChanged");
static_assert(sizeof(FortAthenaAIBotController_OnSafezoneStateChanged) == 0x000001, "Wrong size on FortAthenaAIBotController_OnSafezoneStateChanged");
static_assert(offsetof(FortAthenaAIBotController_OnSafezoneStateChanged, NewState) == 0x000000, "Member 'FortAthenaAIBotController_OnSafezoneStateChanged::NewState' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.OnServerMarkerAdded
// 0x0160 (0x0160 - 0x0000)
struct FortAthenaAIBotController_OnServerMarkerAdded final
{
public:
	struct FFortWorldMarkerData                   MarkerData;                                        // 0x0000(0x0160)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_OnServerMarkerAdded) == 0x000008, "Wrong alignment on FortAthenaAIBotController_OnServerMarkerAdded");
static_assert(sizeof(FortAthenaAIBotController_OnServerMarkerAdded) == 0x000160, "Wrong size on FortAthenaAIBotController_OnServerMarkerAdded");
static_assert(offsetof(FortAthenaAIBotController_OnServerMarkerAdded, MarkerData) == 0x000000, "Member 'FortAthenaAIBotController_OnServerMarkerAdded::MarkerData' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.OnTargetActorDestroyed
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAIBotController_OnTargetActorDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_OnTargetActorDestroyed) == 0x000008, "Wrong alignment on FortAthenaAIBotController_OnTargetActorDestroyed");
static_assert(sizeof(FortAthenaAIBotController_OnTargetActorDestroyed) == 0x000008, "Wrong size on FortAthenaAIBotController_OnTargetActorDestroyed");
static_assert(offsetof(FortAthenaAIBotController_OnTargetActorDestroyed, DestroyedActor) == 0x000000, "Member 'FortAthenaAIBotController_OnTargetActorDestroyed::DestroyedActor' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.OnTargetBuildingDestroyed
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaAIBotController_OnTargetBuildingDestroyed final
{
public:
	class ABuildingActor*                         Building;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AAthenaAIController*                    AIController;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_OnTargetBuildingDestroyed) == 0x000008, "Wrong alignment on FortAthenaAIBotController_OnTargetBuildingDestroyed");
static_assert(sizeof(FortAthenaAIBotController_OnTargetBuildingDestroyed) == 0x000010, "Wrong size on FortAthenaAIBotController_OnTargetBuildingDestroyed");
static_assert(offsetof(FortAthenaAIBotController_OnTargetBuildingDestroyed, Building) == 0x000000, "Member 'FortAthenaAIBotController_OnTargetBuildingDestroyed::Building' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_OnTargetBuildingDestroyed, AIController) == 0x000008, "Member 'FortAthenaAIBotController_OnTargetBuildingDestroyed::AIController' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.OnTargetPawnDead
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAIBotController_OnTargetPawnDead final
{
public:
	class AFortPawn*                              FortPawn;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_OnTargetPawnDead) == 0x000008, "Wrong alignment on FortAthenaAIBotController_OnTargetPawnDead");
static_assert(sizeof(FortAthenaAIBotController_OnTargetPawnDead) == 0x000008, "Wrong size on FortAthenaAIBotController_OnTargetPawnDead");
static_assert(offsetof(FortAthenaAIBotController_OnTargetPawnDead, FortPawn) == 0x000000, "Member 'FortAthenaAIBotController_OnTargetPawnDead::FortPawn' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.OverrideAggressivenessPlayStyle
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaAIBotController_OverrideAggressivenessPlayStyle final
{
public:
	bool                                          bInIsAggressive;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_OverrideAggressivenessPlayStyle) == 0x000001, "Wrong alignment on FortAthenaAIBotController_OverrideAggressivenessPlayStyle");
static_assert(sizeof(FortAthenaAIBotController_OverrideAggressivenessPlayStyle) == 0x000001, "Wrong size on FortAthenaAIBotController_OverrideAggressivenessPlayStyle");
static_assert(offsetof(FortAthenaAIBotController_OverrideAggressivenessPlayStyle, bInIsAggressive) == 0x000000, "Member 'FortAthenaAIBotController_OverrideAggressivenessPlayStyle::bInIsAggressive' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.OverrideSkill
// 0x0004 (0x0004 - 0x0000)
struct FortAthenaAIBotController_OverrideSkill final
{
public:
	float                                         NewSkill;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_OverrideSkill) == 0x000004, "Wrong alignment on FortAthenaAIBotController_OverrideSkill");
static_assert(sizeof(FortAthenaAIBotController_OverrideSkill) == 0x000004, "Wrong size on FortAthenaAIBotController_OverrideSkill");
static_assert(offsetof(FortAthenaAIBotController_OverrideSkill, NewSkill) == 0x000000, "Member 'FortAthenaAIBotController_OverrideSkill::NewSkill' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.PlayEmote
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAIBotController_PlayEmote final
{
public:
	struct FPrimaryAssetId                        EmotePrimaryAssetId;                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_PlayEmote) == 0x000004, "Wrong alignment on FortAthenaAIBotController_PlayEmote");
static_assert(sizeof(FortAthenaAIBotController_PlayEmote) == 0x000008, "Wrong size on FortAthenaAIBotController_PlayEmote");
static_assert(offsetof(FortAthenaAIBotController_PlayEmote, EmotePrimaryAssetId) == 0x000000, "Member 'FortAthenaAIBotController_PlayEmote::EmotePrimaryAssetId' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.QueueStim
// 0x0048 (0x0048 - 0x0000)
struct FortAthenaAIBotController_QueueStim final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SourceLocation;                                    // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SourceDirection;                                   // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStimType                                     NewStimType;                                       // 0x0038(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StimStrength;                                      // 0x003C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StimTag;                                           // 0x0040(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAthenaAIBotController_QueueStim) == 0x000008, "Wrong alignment on FortAthenaAIBotController_QueueStim");
static_assert(sizeof(FortAthenaAIBotController_QueueStim) == 0x000048, "Wrong size on FortAthenaAIBotController_QueueStim");
static_assert(offsetof(FortAthenaAIBotController_QueueStim, SourceActor) == 0x000000, "Member 'FortAthenaAIBotController_QueueStim::SourceActor' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_QueueStim, SourceLocation) == 0x000008, "Member 'FortAthenaAIBotController_QueueStim::SourceLocation' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_QueueStim, SourceDirection) == 0x000020, "Member 'FortAthenaAIBotController_QueueStim::SourceDirection' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_QueueStim, NewStimType) == 0x000038, "Member 'FortAthenaAIBotController_QueueStim::NewStimType' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_QueueStim, StimStrength) == 0x00003C, "Member 'FortAthenaAIBotController_QueueStim::StimStrength' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_QueueStim, StimTag) == 0x000040, "Member 'FortAthenaAIBotController_QueueStim::StimTag' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.RemoveSkillSet
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAIBotController_RemoveSkillSet final
{
public:
	TSubclassOf<class UFortAthenaAIBotSkillSet>   SkillSetClass;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_RemoveSkillSet) == 0x000008, "Wrong alignment on FortAthenaAIBotController_RemoveSkillSet");
static_assert(sizeof(FortAthenaAIBotController_RemoveSkillSet) == 0x000008, "Wrong size on FortAthenaAIBotController_RemoveSkillSet");
static_assert(offsetof(FortAthenaAIBotController_RemoveSkillSet, SkillSetClass) == 0x000000, "Member 'FortAthenaAIBotController_RemoveSkillSet::SkillSetClass' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.RequestEmote
// 0x000C (0x000C - 0x0000)
struct FortAthenaAIBotController_RequestEmote final
{
public:
	struct FPrimaryAssetId                        EmotePrimaryAssetId;                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InfiniteEmoteMaxDuration;                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_RequestEmote) == 0x000004, "Wrong alignment on FortAthenaAIBotController_RequestEmote");
static_assert(sizeof(FortAthenaAIBotController_RequestEmote) == 0x00000C, "Wrong size on FortAthenaAIBotController_RequestEmote");
static_assert(offsetof(FortAthenaAIBotController_RequestEmote, EmotePrimaryAssetId) == 0x000000, "Member 'FortAthenaAIBotController_RequestEmote::EmotePrimaryAssetId' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_RequestEmote, InfiniteEmoteMaxDuration) == 0x000008, "Member 'FortAthenaAIBotController_RequestEmote::InfiniteEmoteMaxDuration' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.SetBotOwner
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAIBotController_SetBotOwner final
{
public:
	class AActor*                                 InBotOwner;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_SetBotOwner) == 0x000008, "Wrong alignment on FortAthenaAIBotController_SetBotOwner");
static_assert(sizeof(FortAthenaAIBotController_SetBotOwner) == 0x000008, "Wrong size on FortAthenaAIBotController_SetBotOwner");
static_assert(offsetof(FortAthenaAIBotController_SetBotOwner, InBotOwner) == 0x000000, "Member 'FortAthenaAIBotController_SetBotOwner::InBotOwner' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.SetLeashActorToFollow
// 0x0028 (0x0028 - 0x0000)
struct FortAthenaAIBotController_SetLeashActorToFollow final
{
public:
	const class AActor*                           ActorToFollow;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeashLocationUpdateRate;                           // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LocalOffset;                                       // 0x0010(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_SetLeashActorToFollow) == 0x000008, "Wrong alignment on FortAthenaAIBotController_SetLeashActorToFollow");
static_assert(sizeof(FortAthenaAIBotController_SetLeashActorToFollow) == 0x000028, "Wrong size on FortAthenaAIBotController_SetLeashActorToFollow");
static_assert(offsetof(FortAthenaAIBotController_SetLeashActorToFollow, ActorToFollow) == 0x000000, "Member 'FortAthenaAIBotController_SetLeashActorToFollow::ActorToFollow' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_SetLeashActorToFollow, LeashLocationUpdateRate) == 0x000008, "Member 'FortAthenaAIBotController_SetLeashActorToFollow::LeashLocationUpdateRate' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotController_SetLeashActorToFollow, LocalOffset) == 0x000010, "Member 'FortAthenaAIBotController_SetLeashActorToFollow::LocalOffset' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.SetLeashReturnLocationMode
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaAIBotController_SetLeashReturnLocationMode final
{
public:
	ELeashReturnLocationMode                      ReturnMode;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_SetLeashReturnLocationMode) == 0x000001, "Wrong alignment on FortAthenaAIBotController_SetLeashReturnLocationMode");
static_assert(sizeof(FortAthenaAIBotController_SetLeashReturnLocationMode) == 0x000001, "Wrong size on FortAthenaAIBotController_SetLeashReturnLocationMode");
static_assert(offsetof(FortAthenaAIBotController_SetLeashReturnLocationMode, ReturnMode) == 0x000000, "Member 'FortAthenaAIBotController_SetLeashReturnLocationMode::ReturnMode' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.SetLeashVolume
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAIBotController_SetLeashVolume final
{
public:
	class AFortAthenaAILeashVolume*               InLeashVolume;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_SetLeashVolume) == 0x000008, "Wrong alignment on FortAthenaAIBotController_SetLeashVolume");
static_assert(sizeof(FortAthenaAIBotController_SetLeashVolume) == 0x000008, "Wrong size on FortAthenaAIBotController_SetLeashVolume");
static_assert(offsetof(FortAthenaAIBotController_SetLeashVolume, InLeashVolume) == 0x000000, "Member 'FortAthenaAIBotController_SetLeashVolume::InLeashVolume' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.SetPatrollingEnable
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaAIBotController_SetPatrollingEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_SetPatrollingEnable) == 0x000001, "Wrong alignment on FortAthenaAIBotController_SetPatrollingEnable");
static_assert(sizeof(FortAthenaAIBotController_SetPatrollingEnable) == 0x000001, "Wrong size on FortAthenaAIBotController_SetPatrollingEnable");
static_assert(offsetof(FortAthenaAIBotController_SetPatrollingEnable, bEnable) == 0x000000, "Member 'FortAthenaAIBotController_SetPatrollingEnable::bEnable' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.SetRadialLeashInnerRadius
// 0x0004 (0x0004 - 0x0000)
struct FortAthenaAIBotController_SetRadialLeashInnerRadius final
{
public:
	float                                         InnerRadius;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_SetRadialLeashInnerRadius) == 0x000004, "Wrong alignment on FortAthenaAIBotController_SetRadialLeashInnerRadius");
static_assert(sizeof(FortAthenaAIBotController_SetRadialLeashInnerRadius) == 0x000004, "Wrong size on FortAthenaAIBotController_SetRadialLeashInnerRadius");
static_assert(offsetof(FortAthenaAIBotController_SetRadialLeashInnerRadius, InnerRadius) == 0x000000, "Member 'FortAthenaAIBotController_SetRadialLeashInnerRadius::InnerRadius' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.SetRadialLeashOuterRadius
// 0x0004 (0x0004 - 0x0000)
struct FortAthenaAIBotController_SetRadialLeashOuterRadius final
{
public:
	float                                         OuterRadius;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_SetRadialLeashOuterRadius) == 0x000004, "Wrong alignment on FortAthenaAIBotController_SetRadialLeashOuterRadius");
static_assert(sizeof(FortAthenaAIBotController_SetRadialLeashOuterRadius) == 0x000004, "Wrong size on FortAthenaAIBotController_SetRadialLeashOuterRadius");
static_assert(offsetof(FortAthenaAIBotController_SetRadialLeashOuterRadius, OuterRadius) == 0x000000, "Member 'FortAthenaAIBotController_SetRadialLeashOuterRadius::OuterRadius' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.SetSkillSet
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAIBotController_SetSkillSet final
{
public:
	TSubclassOf<class UFortAthenaAIBotSkillSet>   SkillSetClass;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_SetSkillSet) == 0x000008, "Wrong alignment on FortAthenaAIBotController_SetSkillSet");
static_assert(sizeof(FortAthenaAIBotController_SetSkillSet) == 0x000008, "Wrong size on FortAthenaAIBotController_SetSkillSet");
static_assert(offsetof(FortAthenaAIBotController_SetSkillSet, SkillSetClass) == 0x000000, "Member 'FortAthenaAIBotController_SetSkillSet::SkillSetClass' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.StopSecondaryFire
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaAIBotController_StopSecondaryFire final
{
public:
	bool                                          bFireWhenStopping;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_StopSecondaryFire) == 0x000001, "Wrong alignment on FortAthenaAIBotController_StopSecondaryFire");
static_assert(sizeof(FortAthenaAIBotController_StopSecondaryFire) == 0x000001, "Wrong size on FortAthenaAIBotController_StopSecondaryFire");
static_assert(offsetof(FortAthenaAIBotController_StopSecondaryFire, bFireWhenStopping) == 0x000000, "Member 'FortAthenaAIBotController_StopSecondaryFire::bFireWhenStopping' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.SwitchTeam
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaAIBotController_SwitchTeam final
{
public:
	uint8                                         TeamIndex;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_SwitchTeam) == 0x000001, "Wrong alignment on FortAthenaAIBotController_SwitchTeam");
static_assert(sizeof(FortAthenaAIBotController_SwitchTeam) == 0x000001, "Wrong size on FortAthenaAIBotController_SwitchTeam");
static_assert(offsetof(FortAthenaAIBotController_SwitchTeam, TeamIndex) == 0x000000, "Member 'FortAthenaAIBotController_SwitchTeam::TeamIndex' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.GetBotOwner
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAIBotController_GetBotOwner final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_GetBotOwner) == 0x000008, "Wrong alignment on FortAthenaAIBotController_GetBotOwner");
static_assert(sizeof(FortAthenaAIBotController_GetBotOwner) == 0x000008, "Wrong size on FortAthenaAIBotController_GetBotOwner");
static_assert(offsetof(FortAthenaAIBotController_GetBotOwner, ReturnValue) == 0x000000, "Member 'FortAthenaAIBotController_GetBotOwner::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.GetCurrentThreat
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAIBotController_GetCurrentThreat final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_GetCurrentThreat) == 0x000008, "Wrong alignment on FortAthenaAIBotController_GetCurrentThreat");
static_assert(sizeof(FortAthenaAIBotController_GetCurrentThreat) == 0x000008, "Wrong size on FortAthenaAIBotController_GetCurrentThreat");
static_assert(offsetof(FortAthenaAIBotController_GetCurrentThreat, ReturnValue) == 0x000000, "Member 'FortAthenaAIBotController_GetCurrentThreat::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.GetMarkerComponent
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAIBotController_GetMarkerComponent final
{
public:
	class UAthenaMarkerComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_GetMarkerComponent) == 0x000008, "Wrong alignment on FortAthenaAIBotController_GetMarkerComponent");
static_assert(sizeof(FortAthenaAIBotController_GetMarkerComponent) == 0x000008, "Wrong size on FortAthenaAIBotController_GetMarkerComponent");
static_assert(offsetof(FortAthenaAIBotController_GetMarkerComponent, ReturnValue) == 0x000000, "Member 'FortAthenaAIBotController_GetMarkerComponent::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotController.IsAnAthenaGameParticipant
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaAIBotController_IsAnAthenaGameParticipant final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotController_IsAnAthenaGameParticipant) == 0x000001, "Wrong alignment on FortAthenaAIBotController_IsAnAthenaGameParticipant");
static_assert(sizeof(FortAthenaAIBotController_IsAnAthenaGameParticipant) == 0x000001, "Wrong size on FortAthenaAIBotController_IsAnAthenaGameParticipant");
static_assert(offsetof(FortAthenaAIBotController_IsAnAthenaGameParticipant, ReturnValue) == 0x000000, "Member 'FortAthenaAIBotController_IsAnAthenaGameParticipant::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIEncounterInfoOwnerInterface.GetEncounterInfo
// 0x0008 (0x0008 - 0x0000)
struct FortAIEncounterInfoOwnerInterface_GetEncounterInfo final
{
public:
	class UFortAIEncounterInfo*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfoOwnerInterface_GetEncounterInfo) == 0x000008, "Wrong alignment on FortAIEncounterInfoOwnerInterface_GetEncounterInfo");
static_assert(sizeof(FortAIEncounterInfoOwnerInterface_GetEncounterInfo) == 0x000008, "Wrong size on FortAIEncounterInfoOwnerInterface_GetEncounterInfo");
static_assert(offsetof(FortAIEncounterInfoOwnerInterface_GetEncounterInfo, ReturnValue) == 0x000000, "Member 'FortAIEncounterInfoOwnerInterface_GetEncounterInfo::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIDirector.ConvertInvalidDirectionsToValidDirections
// 0x0020 (0x0020 - 0x0000)
struct FortAIDirector_ConvertInvalidDirectionsToValidDirections final
{
public:
	TArray<EFortEncounterDirection>               InvalidDirections;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EFortEncounterDirection>               ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_ConvertInvalidDirectionsToValidDirections) == 0x000008, "Wrong alignment on FortAIDirector_ConvertInvalidDirectionsToValidDirections");
static_assert(sizeof(FortAIDirector_ConvertInvalidDirectionsToValidDirections) == 0x000020, "Wrong size on FortAIDirector_ConvertInvalidDirectionsToValidDirections");
static_assert(offsetof(FortAIDirector_ConvertInvalidDirectionsToValidDirections, InvalidDirections) == 0x000000, "Member 'FortAIDirector_ConvertInvalidDirectionsToValidDirections::InvalidDirections' has a wrong offset!");
static_assert(offsetof(FortAIDirector_ConvertInvalidDirectionsToValidDirections, ReturnValue) == 0x000010, "Member 'FortAIDirector_ConvertInvalidDirectionsToValidDirections::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIDirector.GetEncounterDirectionFromVector
// 0x0020 (0x0020 - 0x0000)
struct FortAIDirector_GetEncounterDirectionFromVector final
{
public:
	struct FVector                                DirectionVector;                                   // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortEncounterDirection                       ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIDirector_GetEncounterDirectionFromVector) == 0x000008, "Wrong alignment on FortAIDirector_GetEncounterDirectionFromVector");
static_assert(sizeof(FortAIDirector_GetEncounterDirectionFromVector) == 0x000020, "Wrong size on FortAIDirector_GetEncounterDirectionFromVector");
static_assert(offsetof(FortAIDirector_GetEncounterDirectionFromVector, DirectionVector) == 0x000000, "Member 'FortAIDirector_GetEncounterDirectionFromVector::DirectionVector' has a wrong offset!");
static_assert(offsetof(FortAIDirector_GetEncounterDirectionFromVector, ReturnValue) == 0x000018, "Member 'FortAIDirector_GetEncounterDirectionFromVector::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIDirector.GetVectorFromEncounterDirection
// 0x0020 (0x0020 - 0x0000)
struct FortAIDirector_GetVectorFromEncounterDirection final
{
public:
	EFortEncounterDirection                       Direction;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_GetVectorFromEncounterDirection) == 0x000008, "Wrong alignment on FortAIDirector_GetVectorFromEncounterDirection");
static_assert(sizeof(FortAIDirector_GetVectorFromEncounterDirection) == 0x000020, "Wrong size on FortAIDirector_GetVectorFromEncounterDirection");
static_assert(offsetof(FortAIDirector_GetVectorFromEncounterDirection, Direction) == 0x000000, "Member 'FortAIDirector_GetVectorFromEncounterDirection::Direction' has a wrong offset!");
static_assert(offsetof(FortAIDirector_GetVectorFromEncounterDirection, ReturnValue) == 0x000008, "Member 'FortAIDirector_GetVectorFromEncounterDirection::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIDirector.GetNumActiveEncounters
// 0x0004 (0x0004 - 0x0000)
struct FortAIDirector_GetNumActiveEncounters final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_GetNumActiveEncounters) == 0x000004, "Wrong alignment on FortAIDirector_GetNumActiveEncounters");
static_assert(sizeof(FortAIDirector_GetNumActiveEncounters) == 0x000004, "Wrong size on FortAIDirector_GetNumActiveEncounters");
static_assert(offsetof(FortAIDirector_GetNumActiveEncounters, ReturnValue) == 0x000000, "Member 'FortAIDirector_GetNumActiveEncounters::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIDirector.OnDayPhaseChanged
// 0x0003 (0x0003 - 0x0000)
struct FortAIDirector_OnDayPhaseChanged final
{
public:
	EFortDayPhase                                 CurrentDayPhase;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDayPhase                                 PreviousDayPhase;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAtCreation;                                       // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_OnDayPhaseChanged) == 0x000001, "Wrong alignment on FortAIDirector_OnDayPhaseChanged");
static_assert(sizeof(FortAIDirector_OnDayPhaseChanged) == 0x000003, "Wrong size on FortAIDirector_OnDayPhaseChanged");
static_assert(offsetof(FortAIDirector_OnDayPhaseChanged, CurrentDayPhase) == 0x000000, "Member 'FortAIDirector_OnDayPhaseChanged::CurrentDayPhase' has a wrong offset!");
static_assert(offsetof(FortAIDirector_OnDayPhaseChanged, PreviousDayPhase) == 0x000001, "Member 'FortAIDirector_OnDayPhaseChanged::PreviousDayPhase' has a wrong offset!");
static_assert(offsetof(FortAIDirector_OnDayPhaseChanged, bAtCreation) == 0x000002, "Member 'FortAIDirector_OnDayPhaseChanged::bAtCreation' has a wrong offset!");

// Function FortniteAI.FortAIDirector.OnPawnDied
// 0x0008 (0x0008 - 0x0000)
struct FortAIDirector_OnPawnDied final
{
public:
	class AFortAIPawn*                            KilledPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_OnPawnDied) == 0x000008, "Wrong alignment on FortAIDirector_OnPawnDied");
static_assert(sizeof(FortAIDirector_OnPawnDied) == 0x000008, "Wrong size on FortAIDirector_OnPawnDied");
static_assert(offsetof(FortAIDirector_OnPawnDied, KilledPawn) == 0x000000, "Member 'FortAIDirector_OnPawnDied::KilledPawn' has a wrong offset!");

// Function FortniteAI.FortAIDirector.OnPlayerDied
// 0x0008 (0x0008 - 0x0000)
struct FortAIDirector_OnPlayerDied final
{
public:
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_OnPlayerDied) == 0x000008, "Wrong alignment on FortAIDirector_OnPlayerDied");
static_assert(sizeof(FortAIDirector_OnPlayerDied) == 0x000008, "Wrong size on FortAIDirector_OnPlayerDied");
static_assert(offsetof(FortAIDirector_OnPlayerDied, PlayerPawn) == 0x000000, "Member 'FortAIDirector_OnPlayerDied::PlayerPawn' has a wrong offset!");

// Function FortniteAI.FortAIDirector.OnPlayerSpawn
// 0x0008 (0x0008 - 0x0000)
struct FortAIDirector_OnPlayerSpawn final
{
public:
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_OnPlayerSpawn) == 0x000008, "Wrong alignment on FortAIDirector_OnPlayerSpawn");
static_assert(sizeof(FortAIDirector_OnPlayerSpawn) == 0x000008, "Wrong size on FortAIDirector_OnPlayerSpawn");
static_assert(offsetof(FortAIDirector_OnPlayerSpawn, PlayerPawn) == 0x000000, "Member 'FortAIDirector_OnPlayerSpawn::PlayerPawn' has a wrong offset!");

// Function FortniteAI.FortAIDirector.PostDayPhaseChanged
// 0x0003 (0x0003 - 0x0000)
struct FortAIDirector_PostDayPhaseChanged final
{
public:
	EFortDayPhase                                 CurrentDayPhase;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDayPhase                                 PreviousDayPhase;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAtCreation;                                       // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_PostDayPhaseChanged) == 0x000001, "Wrong alignment on FortAIDirector_PostDayPhaseChanged");
static_assert(sizeof(FortAIDirector_PostDayPhaseChanged) == 0x000003, "Wrong size on FortAIDirector_PostDayPhaseChanged");
static_assert(offsetof(FortAIDirector_PostDayPhaseChanged, CurrentDayPhase) == 0x000000, "Member 'FortAIDirector_PostDayPhaseChanged::CurrentDayPhase' has a wrong offset!");
static_assert(offsetof(FortAIDirector_PostDayPhaseChanged, PreviousDayPhase) == 0x000001, "Member 'FortAIDirector_PostDayPhaseChanged::PreviousDayPhase' has a wrong offset!");
static_assert(offsetof(FortAIDirector_PostDayPhaseChanged, bAtCreation) == 0x000002, "Member 'FortAIDirector_PostDayPhaseChanged::bAtCreation' has a wrong offset!");

// Function FortniteAI.FortAIDirector.ReceivePawnSpawned
// 0x0008 (0x0008 - 0x0000)
struct FortAIDirector_ReceivePawnSpawned final
{
public:
	class AFortPawn*                              SpawnedPawn;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_ReceivePawnSpawned) == 0x000008, "Wrong alignment on FortAIDirector_ReceivePawnSpawned");
static_assert(sizeof(FortAIDirector_ReceivePawnSpawned) == 0x000008, "Wrong size on FortAIDirector_ReceivePawnSpawned");
static_assert(offsetof(FortAIDirector_ReceivePawnSpawned, SpawnedPawn) == 0x000000, "Member 'FortAIDirector_ReceivePawnSpawned::SpawnedPawn' has a wrong offset!");

// Function FortniteAI.FortAIDirector.RegisterPatrolWard
// 0x0010 (0x0010 - 0x0000)
struct FortAIDirector_RegisterPatrolWard final
{
public:
	TScriptInterface<class IFortPatrolWardInterface> PatrolWard;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_RegisterPatrolWard) == 0x000008, "Wrong alignment on FortAIDirector_RegisterPatrolWard");
static_assert(sizeof(FortAIDirector_RegisterPatrolWard) == 0x000010, "Wrong size on FortAIDirector_RegisterPatrolWard");
static_assert(offsetof(FortAIDirector_RegisterPatrolWard, PatrolWard) == 0x000000, "Member 'FortAIDirector_RegisterPatrolWard::PatrolWard' has a wrong offset!");

// Function FortniteAI.FortAIDirector.StartEncounter
// 0x0040 (0x0040 - 0x0000)
struct FortAIDirector_StartEncounter final
{
public:
	class FString                                 EncounterInstigator;                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortDifficultyEncounterSettings*       DifficultyEncounterSettings;                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAIEncounterQueryData              OptionalQueryData;                                 // 0x0018(0x0020)(Parm, NativeAccessSpecifierPublic)
	class UFortAIEncounterInfo*                   ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_StartEncounter) == 0x000008, "Wrong alignment on FortAIDirector_StartEncounter");
static_assert(sizeof(FortAIDirector_StartEncounter) == 0x000040, "Wrong size on FortAIDirector_StartEncounter");
static_assert(offsetof(FortAIDirector_StartEncounter, EncounterInstigator) == 0x000000, "Member 'FortAIDirector_StartEncounter::EncounterInstigator' has a wrong offset!");
static_assert(offsetof(FortAIDirector_StartEncounter, DifficultyEncounterSettings) == 0x000010, "Member 'FortAIDirector_StartEncounter::DifficultyEncounterSettings' has a wrong offset!");
static_assert(offsetof(FortAIDirector_StartEncounter, OptionalQueryData) == 0x000018, "Member 'FortAIDirector_StartEncounter::OptionalQueryData' has a wrong offset!");
static_assert(offsetof(FortAIDirector_StartEncounter, ReturnValue) == 0x000038, "Member 'FortAIDirector_StartEncounter::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIDirector.UnregisterPatrolWard
// 0x0010 (0x0010 - 0x0000)
struct FortAIDirector_UnregisterPatrolWard final
{
public:
	TScriptInterface<class IFortPatrolWardInterface> PatrolWard;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_UnregisterPatrolWard) == 0x000008, "Wrong alignment on FortAIDirector_UnregisterPatrolWard");
static_assert(sizeof(FortAIDirector_UnregisterPatrolWard) == 0x000010, "Wrong size on FortAIDirector_UnregisterPatrolWard");
static_assert(offsetof(FortAIDirector_UnregisterPatrolWard, PatrolWard) == 0x000000, "Member 'FortAIDirector_UnregisterPatrolWard::PatrolWard' has a wrong offset!");

// Function FortniteAI.FortAIDirector.GetAmbientThreatEncounterSpawnLocations
// 0x0010 (0x0010 - 0x0000)
struct FortAIDirector_GetAmbientThreatEncounterSpawnLocations final
{
public:
	TArray<struct FVector>                        AmbientThreatEncounterSpawnLocations;              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_GetAmbientThreatEncounterSpawnLocations) == 0x000008, "Wrong alignment on FortAIDirector_GetAmbientThreatEncounterSpawnLocations");
static_assert(sizeof(FortAIDirector_GetAmbientThreatEncounterSpawnLocations) == 0x000010, "Wrong size on FortAIDirector_GetAmbientThreatEncounterSpawnLocations");
static_assert(offsetof(FortAIDirector_GetAmbientThreatEncounterSpawnLocations, AmbientThreatEncounterSpawnLocations) == 0x000000, "Member 'FortAIDirector_GetAmbientThreatEncounterSpawnLocations::AmbientThreatEncounterSpawnLocations' has a wrong offset!");

// Function FortniteAI.FortAIDirector.GetNumPlayers
// 0x0004 (0x0004 - 0x0000)
struct FortAIDirector_GetNumPlayers final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_GetNumPlayers) == 0x000004, "Wrong alignment on FortAIDirector_GetNumPlayers");
static_assert(sizeof(FortAIDirector_GetNumPlayers) == 0x000004, "Wrong size on FortAIDirector_GetNumPlayers");
static_assert(offsetof(FortAIDirector_GetNumPlayers, ReturnValue) == 0x000000, "Member 'FortAIDirector_GetNumPlayers::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIDirector.GetRiftsFromClosestActiveEncounterTo
// 0x0018 (0x0018 - 0x0000)
struct FortAIDirector_GetRiftsFromClosestActiveEncounterTo final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ABuildingRift*>                  ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_GetRiftsFromClosestActiveEncounterTo) == 0x000008, "Wrong alignment on FortAIDirector_GetRiftsFromClosestActiveEncounterTo");
static_assert(sizeof(FortAIDirector_GetRiftsFromClosestActiveEncounterTo) == 0x000018, "Wrong size on FortAIDirector_GetRiftsFromClosestActiveEncounterTo");
static_assert(offsetof(FortAIDirector_GetRiftsFromClosestActiveEncounterTo, Target) == 0x000000, "Member 'FortAIDirector_GetRiftsFromClosestActiveEncounterTo::Target' has a wrong offset!");
static_assert(offsetof(FortAIDirector_GetRiftsFromClosestActiveEncounterTo, ReturnValue) == 0x000008, "Member 'FortAIDirector_GetRiftsFromClosestActiveEncounterTo::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIDirector.IsAnyActiveEncounterRelevantToDefender
// 0x0010 (0x0010 - 0x0000)
struct FortAIDirector_IsAnyActiveEncounterRelevantToDefender final
{
public:
	class AFortAIPawn*                            Defender;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIDirector_IsAnyActiveEncounterRelevantToDefender) == 0x000008, "Wrong alignment on FortAIDirector_IsAnyActiveEncounterRelevantToDefender");
static_assert(sizeof(FortAIDirector_IsAnyActiveEncounterRelevantToDefender) == 0x000010, "Wrong size on FortAIDirector_IsAnyActiveEncounterRelevantToDefender");
static_assert(offsetof(FortAIDirector_IsAnyActiveEncounterRelevantToDefender, Defender) == 0x000000, "Member 'FortAIDirector_IsAnyActiveEncounterRelevantToDefender::Defender' has a wrong offset!");
static_assert(offsetof(FortAIDirector_IsAnyActiveEncounterRelevantToDefender, ReturnValue) == 0x000008, "Member 'FortAIDirector_IsAnyActiveEncounterRelevantToDefender::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIDirector.IsAnyActiveEncounterRelevantToPlayer
// 0x0010 (0x0010 - 0x0000)
struct FortAIDirector_IsAnyActiveEncounterRelevantToPlayer final
{
public:
	class AFortPlayerPawn*                        Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIDirector_IsAnyActiveEncounterRelevantToPlayer) == 0x000008, "Wrong alignment on FortAIDirector_IsAnyActiveEncounterRelevantToPlayer");
static_assert(sizeof(FortAIDirector_IsAnyActiveEncounterRelevantToPlayer) == 0x000010, "Wrong size on FortAIDirector_IsAnyActiveEncounterRelevantToPlayer");
static_assert(offsetof(FortAIDirector_IsAnyActiveEncounterRelevantToPlayer, Player) == 0x000000, "Member 'FortAIDirector_IsAnyActiveEncounterRelevantToPlayer::Player' has a wrong offset!");
static_assert(offsetof(FortAIDirector_IsAnyActiveEncounterRelevantToPlayer, ReturnValue) == 0x000008, "Member 'FortAIDirector_IsAnyActiveEncounterRelevantToPlayer::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIDirector.IsAnyAIRelevantToPlayer
// 0x0010 (0x0010 - 0x0000)
struct FortAIDirector_IsAnyAIRelevantToPlayer final
{
public:
	class AFortPlayerPawn*                        Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIDirector_IsAnyAIRelevantToPlayer) == 0x000008, "Wrong alignment on FortAIDirector_IsAnyAIRelevantToPlayer");
static_assert(sizeof(FortAIDirector_IsAnyAIRelevantToPlayer) == 0x000010, "Wrong size on FortAIDirector_IsAnyAIRelevantToPlayer");
static_assert(offsetof(FortAIDirector_IsAnyAIRelevantToPlayer, Player) == 0x000000, "Member 'FortAIDirector_IsAnyAIRelevantToPlayer::Player' has a wrong offset!");
static_assert(offsetof(FortAIDirector_IsAnyAIRelevantToPlayer, ReturnValue) == 0x000008, "Member 'FortAIDirector_IsAnyAIRelevantToPlayer::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIDirector.IsAnyEncounterGoalWithinDistanceOfPoint
// 0x0020 (0x0020 - 0x0000)
struct FortAIDirector_IsAnyEncounterGoalWithinDistanceOfPoint final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyActiveEncounters;                             // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIDirector_IsAnyEncounterGoalWithinDistanceOfPoint) == 0x000008, "Wrong alignment on FortAIDirector_IsAnyEncounterGoalWithinDistanceOfPoint");
static_assert(sizeof(FortAIDirector_IsAnyEncounterGoalWithinDistanceOfPoint) == 0x000020, "Wrong size on FortAIDirector_IsAnyEncounterGoalWithinDistanceOfPoint");
static_assert(offsetof(FortAIDirector_IsAnyEncounterGoalWithinDistanceOfPoint, Point) == 0x000000, "Member 'FortAIDirector_IsAnyEncounterGoalWithinDistanceOfPoint::Point' has a wrong offset!");
static_assert(offsetof(FortAIDirector_IsAnyEncounterGoalWithinDistanceOfPoint, Distance) == 0x000018, "Member 'FortAIDirector_IsAnyEncounterGoalWithinDistanceOfPoint::Distance' has a wrong offset!");
static_assert(offsetof(FortAIDirector_IsAnyEncounterGoalWithinDistanceOfPoint, bOnlyActiveEncounters) == 0x00001C, "Member 'FortAIDirector_IsAnyEncounterGoalWithinDistanceOfPoint::bOnlyActiveEncounters' has a wrong offset!");
static_assert(offsetof(FortAIDirector_IsAnyEncounterGoalWithinDistanceOfPoint, ReturnValue) == 0x00001D, "Member 'FortAIDirector_IsAnyEncounterGoalWithinDistanceOfPoint::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIDirector.IsLineTooCloseToPatrolWards
// 0x0038 (0x0038 - 0x0000)
struct FortAIDirector_IsLineTooCloseToPatrolWards final
{
public:
	struct FVector                                LineStart;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LineEnd;                                           // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIDirector_IsLineTooCloseToPatrolWards) == 0x000008, "Wrong alignment on FortAIDirector_IsLineTooCloseToPatrolWards");
static_assert(sizeof(FortAIDirector_IsLineTooCloseToPatrolWards) == 0x000038, "Wrong size on FortAIDirector_IsLineTooCloseToPatrolWards");
static_assert(offsetof(FortAIDirector_IsLineTooCloseToPatrolWards, LineStart) == 0x000000, "Member 'FortAIDirector_IsLineTooCloseToPatrolWards::LineStart' has a wrong offset!");
static_assert(offsetof(FortAIDirector_IsLineTooCloseToPatrolWards, LineEnd) == 0x000018, "Member 'FortAIDirector_IsLineTooCloseToPatrolWards::LineEnd' has a wrong offset!");
static_assert(offsetof(FortAIDirector_IsLineTooCloseToPatrolWards, ReturnValue) == 0x000030, "Member 'FortAIDirector_IsLineTooCloseToPatrolWards::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIDirector.IsPointTooCloseToPatrolWards
// 0x0020 (0x0020 - 0x0000)
struct FortAIDirector_IsPointTooCloseToPatrolWards final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWardAffectType                               WardEffectTypeFilter;                              // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIDirector_IsPointTooCloseToPatrolWards) == 0x000008, "Wrong alignment on FortAIDirector_IsPointTooCloseToPatrolWards");
static_assert(sizeof(FortAIDirector_IsPointTooCloseToPatrolWards) == 0x000020, "Wrong size on FortAIDirector_IsPointTooCloseToPatrolWards");
static_assert(offsetof(FortAIDirector_IsPointTooCloseToPatrolWards, Point) == 0x000000, "Member 'FortAIDirector_IsPointTooCloseToPatrolWards::Point' has a wrong offset!");
static_assert(offsetof(FortAIDirector_IsPointTooCloseToPatrolWards, WardEffectTypeFilter) == 0x000018, "Member 'FortAIDirector_IsPointTooCloseToPatrolWards::WardEffectTypeFilter' has a wrong offset!");
static_assert(offsetof(FortAIDirector_IsPointTooCloseToPatrolWards, ReturnValue) == 0x000019, "Member 'FortAIDirector_IsPointTooCloseToPatrolWards::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortNavModifierComponent.SetComponentAffectingNavMesh
// 0x0008 (0x0008 - 0x0000)
struct FortNavModifierComponent_SetComponentAffectingNavMesh final
{
public:
	class UPrimitiveComponent*                    InComponentAffectingNavMesh;                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortNavModifierComponent_SetComponentAffectingNavMesh) == 0x000008, "Wrong alignment on FortNavModifierComponent_SetComponentAffectingNavMesh");
static_assert(sizeof(FortNavModifierComponent_SetComponentAffectingNavMesh) == 0x000008, "Wrong size on FortNavModifierComponent_SetComponentAffectingNavMesh");
static_assert(offsetof(FortNavModifierComponent_SetComponentAffectingNavMesh, InComponentAffectingNavMesh) == 0x000000, "Member 'FortNavModifierComponent_SetComponentAffectingNavMesh::InComponentAffectingNavMesh' has a wrong offset!");

// Function FortniteAI.FortPhysicsObjectNavigationComponent.OnSleepStateChanged
// 0x0010 (0x0010 - 0x0000)
struct FortPhysicsObjectNavigationComponent_OnSleepStateChanged final
{
public:
	class UPrimitiveComponent*                    SimulatingComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAwake;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPhysicsObjectNavigationComponent_OnSleepStateChanged) == 0x000008, "Wrong alignment on FortPhysicsObjectNavigationComponent_OnSleepStateChanged");
static_assert(sizeof(FortPhysicsObjectNavigationComponent_OnSleepStateChanged) == 0x000010, "Wrong size on FortPhysicsObjectNavigationComponent_OnSleepStateChanged");
static_assert(offsetof(FortPhysicsObjectNavigationComponent_OnSleepStateChanged, SimulatingComponent) == 0x000000, "Member 'FortPhysicsObjectNavigationComponent_OnSleepStateChanged::SimulatingComponent' has a wrong offset!");
static_assert(offsetof(FortPhysicsObjectNavigationComponent_OnSleepStateChanged, bIsAwake) == 0x000008, "Member 'FortPhysicsObjectNavigationComponent_OnSleepStateChanged::bIsAwake' has a wrong offset!");

// Function FortniteAI.FortNavSystem.IsNavmeshInRadiusInitialized
// 0x0028 (0x0028 - 0x0000)
struct FortNavSystem_IsNavmeshInRadiusInitialized final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TestLocation;                                      // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TestRadius;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortNavSystem_IsNavmeshInRadiusInitialized) == 0x000008, "Wrong alignment on FortNavSystem_IsNavmeshInRadiusInitialized");
static_assert(sizeof(FortNavSystem_IsNavmeshInRadiusInitialized) == 0x000028, "Wrong size on FortNavSystem_IsNavmeshInRadiusInitialized");
static_assert(offsetof(FortNavSystem_IsNavmeshInRadiusInitialized, WorldContext) == 0x000000, "Member 'FortNavSystem_IsNavmeshInRadiusInitialized::WorldContext' has a wrong offset!");
static_assert(offsetof(FortNavSystem_IsNavmeshInRadiusInitialized, TestLocation) == 0x000008, "Member 'FortNavSystem_IsNavmeshInRadiusInitialized::TestLocation' has a wrong offset!");
static_assert(offsetof(FortNavSystem_IsNavmeshInRadiusInitialized, TestRadius) == 0x000020, "Member 'FortNavSystem_IsNavmeshInRadiusInitialized::TestRadius' has a wrong offset!");
static_assert(offsetof(FortNavSystem_IsNavmeshInRadiusInitialized, ReturnValue) == 0x000024, "Member 'FortNavSystem_IsNavmeshInRadiusInitialized::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortNavSystem.OnNavDataRegistered
// 0x0008 (0x0008 - 0x0000)
struct FortNavSystem_OnNavDataRegistered final
{
public:
	class ANavigationData*                        NavData;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortNavSystem_OnNavDataRegistered) == 0x000008, "Wrong alignment on FortNavSystem_OnNavDataRegistered");
static_assert(sizeof(FortNavSystem_OnNavDataRegistered) == 0x000008, "Wrong size on FortNavSystem_OnNavDataRegistered");
static_assert(offsetof(FortNavSystem_OnNavDataRegistered, NavData) == 0x000000, "Member 'FortNavSystem_OnNavDataRegistered::NavData' has a wrong offset!");

// Function FortniteAI.AthenaNavSystem.IsInitialNavigationLockActive
// 0x0010 (0x0010 - 0x0000)
struct AthenaNavSystem_IsInitialNavigationLockActive final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaNavSystem_IsInitialNavigationLockActive) == 0x000008, "Wrong alignment on AthenaNavSystem_IsInitialNavigationLockActive");
static_assert(sizeof(AthenaNavSystem_IsInitialNavigationLockActive) == 0x000010, "Wrong size on AthenaNavSystem_IsInitialNavigationLockActive");
static_assert(offsetof(AthenaNavSystem_IsInitialNavigationLockActive, WorldContextObject) == 0x000000, "Member 'AthenaNavSystem_IsInitialNavigationLockActive::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AthenaNavSystem_IsInitialNavigationLockActive, ReturnValue) == 0x000008, "Member 'AthenaNavSystem_IsInitialNavigationLockActive::ReturnValue' has a wrong offset!");

// Function FortniteAI.AthenaNavSystem.RegisterNavGenerationObserver
// 0x0018 (0x0018 - 0x0000)
struct AthenaNavSystem_RegisterNavGenerationObserver final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class USceneComponent* Component)> event;                                             // 0x0008(0x000C)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaNavSystem_RegisterNavGenerationObserver) == 0x000008, "Wrong alignment on AthenaNavSystem_RegisterNavGenerationObserver");
static_assert(sizeof(AthenaNavSystem_RegisterNavGenerationObserver) == 0x000018, "Wrong size on AthenaNavSystem_RegisterNavGenerationObserver");
static_assert(offsetof(AthenaNavSystem_RegisterNavGenerationObserver, Component) == 0x000000, "Member 'AthenaNavSystem_RegisterNavGenerationObserver::Component' has a wrong offset!");
static_assert(offsetof(AthenaNavSystem_RegisterNavGenerationObserver, event) == 0x000008, "Member 'AthenaNavSystem_RegisterNavGenerationObserver::event' has a wrong offset!");

// Function FortniteAI.AthenaNavSystem.UnregisterNavGenerationObserver
// 0x0008 (0x0008 - 0x0000)
struct AthenaNavSystem_UnregisterNavGenerationObserver final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaNavSystem_UnregisterNavGenerationObserver) == 0x000008, "Wrong alignment on AthenaNavSystem_UnregisterNavGenerationObserver");
static_assert(sizeof(AthenaNavSystem_UnregisterNavGenerationObserver) == 0x000008, "Wrong size on AthenaNavSystem_UnregisterNavGenerationObserver");
static_assert(offsetof(AthenaNavSystem_UnregisterNavGenerationObserver, Component) == 0x000000, "Member 'AthenaNavSystem_UnregisterNavGenerationObserver::Component' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_BehaviorBase.GetBehaviorTree
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAISpawnerDataComponent_BehaviorBase_GetBehaviorTree final
{
public:
	class UBehaviorTree*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_BehaviorBase_GetBehaviorTree) == 0x000008, "Wrong alignment on FortAthenaAISpawnerDataComponent_BehaviorBase_GetBehaviorTree");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_BehaviorBase_GetBehaviorTree) == 0x000008, "Wrong size on FortAthenaAISpawnerDataComponent_BehaviorBase_GetBehaviorTree");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_BehaviorBase_GetBehaviorTree, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_BehaviorBase_GetBehaviorTree::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpot.AssignGroupToHotspot
// 0x0018 (0x0018 - 0x0000)
struct AIHotSpot_AssignGroupToHotspot final
{
public:
	TArray<class AAIController*>                  GroupOfAI;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_AssignGroupToHotspot) == 0x000008, "Wrong alignment on AIHotSpot_AssignGroupToHotspot");
static_assert(sizeof(AIHotSpot_AssignGroupToHotspot) == 0x000018, "Wrong size on AIHotSpot_AssignGroupToHotspot");
static_assert(offsetof(AIHotSpot_AssignGroupToHotspot, GroupOfAI) == 0x000000, "Member 'AIHotSpot_AssignGroupToHotspot::GroupOfAI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_AssignGroupToHotspot, ReturnValue) == 0x000010, "Member 'AIHotSpot_AssignGroupToHotspot::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpot.AssignToHotspot
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_AssignToHotspot final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_AssignToHotspot) == 0x000008, "Wrong alignment on AIHotSpot_AssignToHotspot");
static_assert(sizeof(AIHotSpot_AssignToHotspot) == 0x000010, "Wrong size on AIHotSpot_AssignToHotspot");
static_assert(offsetof(AIHotSpot_AssignToHotspot, AI) == 0x000000, "Member 'AIHotSpot_AssignToHotspot::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_AssignToHotspot, ReturnValue) == 0x000008, "Member 'AIHotSpot_AssignToHotspot::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpot.AssignToSlotByIndex
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_AssignToSlotByIndex final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_AssignToSlotByIndex) == 0x000008, "Wrong alignment on AIHotSpot_AssignToSlotByIndex");
static_assert(sizeof(AIHotSpot_AssignToSlotByIndex) == 0x000010, "Wrong size on AIHotSpot_AssignToSlotByIndex");
static_assert(offsetof(AIHotSpot_AssignToSlotByIndex, AI) == 0x000000, "Member 'AIHotSpot_AssignToSlotByIndex::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_AssignToSlotByIndex, Index_0) == 0x000008, "Member 'AIHotSpot_AssignToSlotByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(AIHotSpot_AssignToSlotByIndex, ReturnValue) == 0x00000C, "Member 'AIHotSpot_AssignToSlotByIndex::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpot.OccupySlotByIndex
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_OccupySlotByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_OccupySlotByIndex) == 0x000004, "Wrong alignment on AIHotSpot_OccupySlotByIndex");
static_assert(sizeof(AIHotSpot_OccupySlotByIndex) == 0x000008, "Wrong size on AIHotSpot_OccupySlotByIndex");
static_assert(offsetof(AIHotSpot_OccupySlotByIndex, Index_0) == 0x000000, "Member 'AIHotSpot_OccupySlotByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OccupySlotByIndex, ReturnValue) == 0x000004, "Member 'AIHotSpot_OccupySlotByIndex::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpot.OnAssignedClaimedBehavior
// 0x0018 (0x0018 - 0x0000)
struct AIHotSpot_OnAssignedClaimedBehavior final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserId;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasOnWaitingList;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_OnAssignedClaimedBehavior) == 0x000008, "Wrong alignment on AIHotSpot_OnAssignedClaimedBehavior");
static_assert(sizeof(AIHotSpot_OnAssignedClaimedBehavior) == 0x000018, "Wrong size on AIHotSpot_OnAssignedClaimedBehavior");
static_assert(offsetof(AIHotSpot_OnAssignedClaimedBehavior, AI) == 0x000000, "Member 'AIHotSpot_OnAssignedClaimedBehavior::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnAssignedClaimedBehavior, Index_0) == 0x000008, "Member 'AIHotSpot_OnAssignedClaimedBehavior::Index_0' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnAssignedClaimedBehavior, UserId) == 0x00000C, "Member 'AIHotSpot_OnAssignedClaimedBehavior::UserId' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnAssignedClaimedBehavior, bWasOnWaitingList) == 0x000010, "Member 'AIHotSpot_OnAssignedClaimedBehavior::bWasOnWaitingList' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnAssignedClaimedBehavior, ReturnValue) == 0x000011, "Member 'AIHotSpot_OnAssignedClaimedBehavior::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpot.OnAssignedOccupiedBehavior
// 0x0018 (0x0018 - 0x0000)
struct AIHotSpot_OnAssignedOccupiedBehavior final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserId;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_OnAssignedOccupiedBehavior) == 0x000008, "Wrong alignment on AIHotSpot_OnAssignedOccupiedBehavior");
static_assert(sizeof(AIHotSpot_OnAssignedOccupiedBehavior) == 0x000018, "Wrong size on AIHotSpot_OnAssignedOccupiedBehavior");
static_assert(offsetof(AIHotSpot_OnAssignedOccupiedBehavior, AI) == 0x000000, "Member 'AIHotSpot_OnAssignedOccupiedBehavior::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnAssignedOccupiedBehavior, Index_0) == 0x000008, "Member 'AIHotSpot_OnAssignedOccupiedBehavior::Index_0' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnAssignedOccupiedBehavior, UserId) == 0x00000C, "Member 'AIHotSpot_OnAssignedOccupiedBehavior::UserId' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnAssignedOccupiedBehavior, ReturnValue) == 0x000010, "Member 'AIHotSpot_OnAssignedOccupiedBehavior::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpot.OnAssignedSlotlessBehavior
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_OnAssignedSlotlessBehavior final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_OnAssignedSlotlessBehavior) == 0x000008, "Wrong alignment on AIHotSpot_OnAssignedSlotlessBehavior");
static_assert(sizeof(AIHotSpot_OnAssignedSlotlessBehavior) == 0x000010, "Wrong size on AIHotSpot_OnAssignedSlotlessBehavior");
static_assert(offsetof(AIHotSpot_OnAssignedSlotlessBehavior, AI) == 0x000000, "Member 'AIHotSpot_OnAssignedSlotlessBehavior::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnAssignedSlotlessBehavior, ReturnValue) == 0x000008, "Member 'AIHotSpot_OnAssignedSlotlessBehavior::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpot.OnMoveToSlotFinished
// 0x0018 (0x0018 - 0x0000)
struct AIHotSpot_OnMoveToSlotFinished final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserId;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResult;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_OnMoveToSlotFinished) == 0x000008, "Wrong alignment on AIHotSpot_OnMoveToSlotFinished");
static_assert(sizeof(AIHotSpot_OnMoveToSlotFinished) == 0x000018, "Wrong size on AIHotSpot_OnMoveToSlotFinished");
static_assert(offsetof(AIHotSpot_OnMoveToSlotFinished, AI) == 0x000000, "Member 'AIHotSpot_OnMoveToSlotFinished::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnMoveToSlotFinished, Index_0) == 0x000008, "Member 'AIHotSpot_OnMoveToSlotFinished::Index_0' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnMoveToSlotFinished, UserId) == 0x00000C, "Member 'AIHotSpot_OnMoveToSlotFinished::UserId' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnMoveToSlotFinished, bResult) == 0x000010, "Member 'AIHotSpot_OnMoveToSlotFinished::bResult' has a wrong offset!");

// Function FortniteAI.AIHotSpot.OnRemovedBehavior
// 0x0018 (0x0018 - 0x0000)
struct AIHotSpot_OnRemovedBehavior final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserId;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIHotSpotSlot                                PrevState;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasOnWaitingList;                                 // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_OnRemovedBehavior) == 0x000008, "Wrong alignment on AIHotSpot_OnRemovedBehavior");
static_assert(sizeof(AIHotSpot_OnRemovedBehavior) == 0x000018, "Wrong size on AIHotSpot_OnRemovedBehavior");
static_assert(offsetof(AIHotSpot_OnRemovedBehavior, AI) == 0x000000, "Member 'AIHotSpot_OnRemovedBehavior::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnRemovedBehavior, Index_0) == 0x000008, "Member 'AIHotSpot_OnRemovedBehavior::Index_0' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnRemovedBehavior, UserId) == 0x00000C, "Member 'AIHotSpot_OnRemovedBehavior::UserId' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnRemovedBehavior, PrevState) == 0x000010, "Member 'AIHotSpot_OnRemovedBehavior::PrevState' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnRemovedBehavior, bWasOnWaitingList) == 0x000011, "Member 'AIHotSpot_OnRemovedBehavior::bWasOnWaitingList' has a wrong offset!");

// Function FortniteAI.AIHotSpot.OnRemovedSlotlessBehavior
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_OnRemovedSlotlessBehavior final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsClamingSlot;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_OnRemovedSlotlessBehavior) == 0x000008, "Wrong alignment on AIHotSpot_OnRemovedSlotlessBehavior");
static_assert(sizeof(AIHotSpot_OnRemovedSlotlessBehavior) == 0x000010, "Wrong size on AIHotSpot_OnRemovedSlotlessBehavior");
static_assert(offsetof(AIHotSpot_OnRemovedSlotlessBehavior, AI) == 0x000000, "Member 'AIHotSpot_OnRemovedSlotlessBehavior::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnRemovedSlotlessBehavior, bIsClamingSlot) == 0x000008, "Member 'AIHotSpot_OnRemovedSlotlessBehavior::bIsClamingSlot' has a wrong offset!");

// Function FortniteAI.AIHotSpot.OnSlotBlocked
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_OnSlotBlocked final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserId;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_OnSlotBlocked) == 0x000008, "Wrong alignment on AIHotSpot_OnSlotBlocked");
static_assert(sizeof(AIHotSpot_OnSlotBlocked) == 0x000010, "Wrong size on AIHotSpot_OnSlotBlocked");
static_assert(offsetof(AIHotSpot_OnSlotBlocked, AI) == 0x000000, "Member 'AIHotSpot_OnSlotBlocked::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnSlotBlocked, Index_0) == 0x000008, "Member 'AIHotSpot_OnSlotBlocked::Index_0' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnSlotBlocked, UserId) == 0x00000C, "Member 'AIHotSpot_OnSlotBlocked::UserId' has a wrong offset!");

// Function FortniteAI.AIHotSpot.OnSlotClaimed
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_OnSlotClaimed final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserId;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_OnSlotClaimed) == 0x000008, "Wrong alignment on AIHotSpot_OnSlotClaimed");
static_assert(sizeof(AIHotSpot_OnSlotClaimed) == 0x000010, "Wrong size on AIHotSpot_OnSlotClaimed");
static_assert(offsetof(AIHotSpot_OnSlotClaimed, AI) == 0x000000, "Member 'AIHotSpot_OnSlotClaimed::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnSlotClaimed, Index_0) == 0x000008, "Member 'AIHotSpot_OnSlotClaimed::Index_0' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnSlotClaimed, UserId) == 0x00000C, "Member 'AIHotSpot_OnSlotClaimed::UserId' has a wrong offset!");

// Function FortniteAI.AIHotSpot.OnSlotDisabled
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_OnSlotDisabled final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserId;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_OnSlotDisabled) == 0x000004, "Wrong alignment on AIHotSpot_OnSlotDisabled");
static_assert(sizeof(AIHotSpot_OnSlotDisabled) == 0x000008, "Wrong size on AIHotSpot_OnSlotDisabled");
static_assert(offsetof(AIHotSpot_OnSlotDisabled, Index_0) == 0x000000, "Member 'AIHotSpot_OnSlotDisabled::Index_0' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnSlotDisabled, UserId) == 0x000004, "Member 'AIHotSpot_OnSlotDisabled::UserId' has a wrong offset!");

// Function FortniteAI.AIHotSpot.OnSlotEnabled
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_OnSlotEnabled final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserId;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_OnSlotEnabled) == 0x000004, "Wrong alignment on AIHotSpot_OnSlotEnabled");
static_assert(sizeof(AIHotSpot_OnSlotEnabled) == 0x000008, "Wrong size on AIHotSpot_OnSlotEnabled");
static_assert(offsetof(AIHotSpot_OnSlotEnabled, Index_0) == 0x000000, "Member 'AIHotSpot_OnSlotEnabled::Index_0' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnSlotEnabled, UserId) == 0x000004, "Member 'AIHotSpot_OnSlotEnabled::UserId' has a wrong offset!");

// Function FortniteAI.AIHotSpot.OnSlotFreed
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_OnSlotFreed final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserId;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_OnSlotFreed) == 0x000008, "Wrong alignment on AIHotSpot_OnSlotFreed");
static_assert(sizeof(AIHotSpot_OnSlotFreed) == 0x000010, "Wrong size on AIHotSpot_OnSlotFreed");
static_assert(offsetof(AIHotSpot_OnSlotFreed, AI) == 0x000000, "Member 'AIHotSpot_OnSlotFreed::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnSlotFreed, Index_0) == 0x000008, "Member 'AIHotSpot_OnSlotFreed::Index_0' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnSlotFreed, UserId) == 0x00000C, "Member 'AIHotSpot_OnSlotFreed::UserId' has a wrong offset!");

// Function FortniteAI.AIHotSpot.OnSlotOccupied
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_OnSlotOccupied final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserId;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_OnSlotOccupied) == 0x000008, "Wrong alignment on AIHotSpot_OnSlotOccupied");
static_assert(sizeof(AIHotSpot_OnSlotOccupied) == 0x000010, "Wrong size on AIHotSpot_OnSlotOccupied");
static_assert(offsetof(AIHotSpot_OnSlotOccupied, AI) == 0x000000, "Member 'AIHotSpot_OnSlotOccupied::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnSlotOccupied, Index_0) == 0x000008, "Member 'AIHotSpot_OnSlotOccupied::Index_0' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnSlotOccupied, UserId) == 0x00000C, "Member 'AIHotSpot_OnSlotOccupied::UserId' has a wrong offset!");

// Function FortniteAI.AIHotSpot.RemoveFromHotspot
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_RemoveFromHotspot final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAssignFromWaitingList;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_RemoveFromHotspot) == 0x000008, "Wrong alignment on AIHotSpot_RemoveFromHotspot");
static_assert(sizeof(AIHotSpot_RemoveFromHotspot) == 0x000010, "Wrong size on AIHotSpot_RemoveFromHotspot");
static_assert(offsetof(AIHotSpot_RemoveFromHotspot, AI) == 0x000000, "Member 'AIHotSpot_RemoveFromHotspot::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_RemoveFromHotspot, bAssignFromWaitingList) == 0x000008, "Member 'AIHotSpot_RemoveFromHotspot::bAssignFromWaitingList' has a wrong offset!");
static_assert(offsetof(AIHotSpot_RemoveFromHotspot, ReturnValue) == 0x000009, "Member 'AIHotSpot_RemoveFromHotspot::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpot.RemoveGroupFromHotspot
// 0x0018 (0x0018 - 0x0000)
struct AIHotSpot_RemoveGroupFromHotspot final
{
public:
	TArray<class AAIController*>                  GroupOfAI;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_RemoveGroupFromHotspot) == 0x000008, "Wrong alignment on AIHotSpot_RemoveGroupFromHotspot");
static_assert(sizeof(AIHotSpot_RemoveGroupFromHotspot) == 0x000018, "Wrong size on AIHotSpot_RemoveGroupFromHotspot");
static_assert(offsetof(AIHotSpot_RemoveGroupFromHotspot, GroupOfAI) == 0x000000, "Member 'AIHotSpot_RemoveGroupFromHotspot::GroupOfAI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_RemoveGroupFromHotspot, ReturnValue) == 0x000010, "Member 'AIHotSpot_RemoveGroupFromHotspot::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpot.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct AIHotSpot_SetEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_SetEnabled) == 0x000001, "Wrong alignment on AIHotSpot_SetEnabled");
static_assert(sizeof(AIHotSpot_SetEnabled) == 0x000001, "Wrong size on AIHotSpot_SetEnabled");
static_assert(offsetof(AIHotSpot_SetEnabled, bEnabled) == 0x000000, "Member 'AIHotSpot_SetEnabled::bEnabled' has a wrong offset!");

// Function FortniteAI.AIHotSpot.CanUseSlotByIndex
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_CanUseSlotByIndex final
{
public:
	const class AAIController*                    AI;                                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_CanUseSlotByIndex) == 0x000008, "Wrong alignment on AIHotSpot_CanUseSlotByIndex");
static_assert(sizeof(AIHotSpot_CanUseSlotByIndex) == 0x000010, "Wrong size on AIHotSpot_CanUseSlotByIndex");
static_assert(offsetof(AIHotSpot_CanUseSlotByIndex, AI) == 0x000000, "Member 'AIHotSpot_CanUseSlotByIndex::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_CanUseSlotByIndex, Index_0) == 0x000008, "Member 'AIHotSpot_CanUseSlotByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(AIHotSpot_CanUseSlotByIndex, ReturnValue) == 0x00000C, "Member 'AIHotSpot_CanUseSlotByIndex::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpot.FindBestSlotIndex
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_FindBestSlotIndex final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_FindBestSlotIndex) == 0x000008, "Wrong alignment on AIHotSpot_FindBestSlotIndex");
static_assert(sizeof(AIHotSpot_FindBestSlotIndex) == 0x000010, "Wrong size on AIHotSpot_FindBestSlotIndex");
static_assert(offsetof(AIHotSpot_FindBestSlotIndex, AI) == 0x000000, "Member 'AIHotSpot_FindBestSlotIndex::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_FindBestSlotIndex, ReturnValue) == 0x000008, "Member 'AIHotSpot_FindBestSlotIndex::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpot.FindBestSlotIndices
// 0x0020 (0x0020 - 0x0000)
struct AIHotSpot_FindBestSlotIndices final
{
public:
	TArray<class AAIController*>                  AI;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_FindBestSlotIndices) == 0x000008, "Wrong alignment on AIHotSpot_FindBestSlotIndices");
static_assert(sizeof(AIHotSpot_FindBestSlotIndices) == 0x000020, "Wrong size on AIHotSpot_FindBestSlotIndices");
static_assert(offsetof(AIHotSpot_FindBestSlotIndices, AI) == 0x000000, "Member 'AIHotSpot_FindBestSlotIndices::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_FindBestSlotIndices, ReturnValue) == 0x000010, "Member 'AIHotSpot_FindBestSlotIndices::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpot.GetAssignedAI
// 0x0018 (0x0018 - 0x0000)
struct AIHotSpot_GetAssignedAI final
{
public:
	EAIHotSpotAssignmentFilter                    Filter;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AAIController*>                  ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_GetAssignedAI) == 0x000008, "Wrong alignment on AIHotSpot_GetAssignedAI");
static_assert(sizeof(AIHotSpot_GetAssignedAI) == 0x000018, "Wrong size on AIHotSpot_GetAssignedAI");
static_assert(offsetof(AIHotSpot_GetAssignedAI, Filter) == 0x000000, "Member 'AIHotSpot_GetAssignedAI::Filter' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetAssignedAI, ReturnValue) == 0x000008, "Member 'AIHotSpot_GetAssignedAI::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpot.GetAssignedAICount
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_GetAssignedAICount final
{
public:
	EAIHotSpotAssignmentFilter                    Filter;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_GetAssignedAICount) == 0x000004, "Wrong alignment on AIHotSpot_GetAssignedAICount");
static_assert(sizeof(AIHotSpot_GetAssignedAICount) == 0x000008, "Wrong size on AIHotSpot_GetAssignedAICount");
static_assert(offsetof(AIHotSpot_GetAssignedAICount, Filter) == 0x000000, "Member 'AIHotSpot_GetAssignedAICount::Filter' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetAssignedAICount, ReturnValue) == 0x000004, "Member 'AIHotSpot_GetAssignedAICount::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpot.GetSlotByIndex
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_GetSlotByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAIHotSpotSlot*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_GetSlotByIndex) == 0x000008, "Wrong alignment on AIHotSpot_GetSlotByIndex");
static_assert(sizeof(AIHotSpot_GetSlotByIndex) == 0x000010, "Wrong size on AIHotSpot_GetSlotByIndex");
static_assert(offsetof(AIHotSpot_GetSlotByIndex, Index_0) == 0x000000, "Member 'AIHotSpot_GetSlotByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetSlotByIndex, ReturnValue) == 0x000008, "Member 'AIHotSpot_GetSlotByIndex::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpot.GetSlotByOwner
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_GetSlotByOwner final
{
public:
	const class AAIController*                    AIOwner;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAIHotSpotSlot*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_GetSlotByOwner) == 0x000008, "Wrong alignment on AIHotSpot_GetSlotByOwner");
static_assert(sizeof(AIHotSpot_GetSlotByOwner) == 0x000010, "Wrong size on AIHotSpot_GetSlotByOwner");
static_assert(offsetof(AIHotSpot_GetSlotByOwner, AIOwner) == 0x000000, "Member 'AIHotSpot_GetSlotByOwner::AIOwner' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetSlotByOwner, ReturnValue) == 0x000008, "Member 'AIHotSpot_GetSlotByOwner::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpot.GetSlotCount
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_GetSlotCount final
{
public:
	EAIHotSpotSlotFilter                          Filter;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_GetSlotCount) == 0x000004, "Wrong alignment on AIHotSpot_GetSlotCount");
static_assert(sizeof(AIHotSpot_GetSlotCount) == 0x000008, "Wrong size on AIHotSpot_GetSlotCount");
static_assert(offsetof(AIHotSpot_GetSlotCount, Filter) == 0x000000, "Member 'AIHotSpot_GetSlotCount::Filter' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetSlotCount, ReturnValue) == 0x000004, "Member 'AIHotSpot_GetSlotCount::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpot.GetSlotIndexByOwner
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_GetSlotIndexByOwner final
{
public:
	const class AAIController*                    AIOwner;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_GetSlotIndexByOwner) == 0x000008, "Wrong alignment on AIHotSpot_GetSlotIndexByOwner");
static_assert(sizeof(AIHotSpot_GetSlotIndexByOwner) == 0x000010, "Wrong size on AIHotSpot_GetSlotIndexByOwner");
static_assert(offsetof(AIHotSpot_GetSlotIndexByOwner, AIOwner) == 0x000000, "Member 'AIHotSpot_GetSlotIndexByOwner::AIOwner' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetSlotIndexByOwner, ReturnValue) == 0x000008, "Member 'AIHotSpot_GetSlotIndexByOwner::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpot.GetSlotLocationByIndex
// 0x0020 (0x0020 - 0x0000)
struct AIHotSpot_GetSlotLocationByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_GetSlotLocationByIndex) == 0x000008, "Wrong alignment on AIHotSpot_GetSlotLocationByIndex");
static_assert(sizeof(AIHotSpot_GetSlotLocationByIndex) == 0x000020, "Wrong size on AIHotSpot_GetSlotLocationByIndex");
static_assert(offsetof(AIHotSpot_GetSlotLocationByIndex, Index_0) == 0x000000, "Member 'AIHotSpot_GetSlotLocationByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetSlotLocationByIndex, ReturnValue) == 0x000008, "Member 'AIHotSpot_GetSlotLocationByIndex::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpot.GetSlotOwnerByIndex
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_GetSlotOwnerByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_GetSlotOwnerByIndex) == 0x000008, "Wrong alignment on AIHotSpot_GetSlotOwnerByIndex");
static_assert(sizeof(AIHotSpot_GetSlotOwnerByIndex) == 0x000010, "Wrong size on AIHotSpot_GetSlotOwnerByIndex");
static_assert(offsetof(AIHotSpot_GetSlotOwnerByIndex, Index_0) == 0x000000, "Member 'AIHotSpot_GetSlotOwnerByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetSlotOwnerByIndex, ReturnValue) == 0x000008, "Member 'AIHotSpot_GetSlotOwnerByIndex::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpot.GetSlotRotationByIndex
// 0x0020 (0x0020 - 0x0000)
struct AIHotSpot_GetSlotRotationByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_GetSlotRotationByIndex) == 0x000008, "Wrong alignment on AIHotSpot_GetSlotRotationByIndex");
static_assert(sizeof(AIHotSpot_GetSlotRotationByIndex) == 0x000020, "Wrong size on AIHotSpot_GetSlotRotationByIndex");
static_assert(offsetof(AIHotSpot_GetSlotRotationByIndex, Index_0) == 0x000000, "Member 'AIHotSpot_GetSlotRotationByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetSlotRotationByIndex, ReturnValue) == 0x000008, "Member 'AIHotSpot_GetSlotRotationByIndex::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpot.GetSlotStateByIndex
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_GetSlotStateByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIHotSpotSlot                                ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_GetSlotStateByIndex) == 0x000004, "Wrong alignment on AIHotSpot_GetSlotStateByIndex");
static_assert(sizeof(AIHotSpot_GetSlotStateByIndex) == 0x000008, "Wrong size on AIHotSpot_GetSlotStateByIndex");
static_assert(offsetof(AIHotSpot_GetSlotStateByIndex, Index_0) == 0x000000, "Member 'AIHotSpot_GetSlotStateByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetSlotStateByIndex, ReturnValue) == 0x000004, "Member 'AIHotSpot_GetSlotStateByIndex::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpot.GetSlotStateByOwner
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_GetSlotStateByOwner final
{
public:
	const class AAIController*                    AIOwner;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIHotSpotSlot                                ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_GetSlotStateByOwner) == 0x000008, "Wrong alignment on AIHotSpot_GetSlotStateByOwner");
static_assert(sizeof(AIHotSpot_GetSlotStateByOwner) == 0x000010, "Wrong size on AIHotSpot_GetSlotStateByOwner");
static_assert(offsetof(AIHotSpot_GetSlotStateByOwner, AIOwner) == 0x000000, "Member 'AIHotSpot_GetSlotStateByOwner::AIOwner' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetSlotStateByOwner, ReturnValue) == 0x000008, "Member 'AIHotSpot_GetSlotStateByOwner::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpot.GetSlotUserIdByIndex
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_GetSlotUserIdByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_GetSlotUserIdByIndex) == 0x000004, "Wrong alignment on AIHotSpot_GetSlotUserIdByIndex");
static_assert(sizeof(AIHotSpot_GetSlotUserIdByIndex) == 0x000008, "Wrong size on AIHotSpot_GetSlotUserIdByIndex");
static_assert(offsetof(AIHotSpot_GetSlotUserIdByIndex, Index_0) == 0x000000, "Member 'AIHotSpot_GetSlotUserIdByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetSlotUserIdByIndex, ReturnValue) == 0x000004, "Member 'AIHotSpot_GetSlotUserIdByIndex::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpot.HasAssignedAI
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_HasAssignedAI final
{
public:
	const class AAIController*                    AI;                                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIHotSpotAssignmentFilter                    Filter;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_HasAssignedAI) == 0x000008, "Wrong alignment on AIHotSpot_HasAssignedAI");
static_assert(sizeof(AIHotSpot_HasAssignedAI) == 0x000010, "Wrong size on AIHotSpot_HasAssignedAI");
static_assert(offsetof(AIHotSpot_HasAssignedAI, AI) == 0x000000, "Member 'AIHotSpot_HasAssignedAI::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_HasAssignedAI, Filter) == 0x000008, "Member 'AIHotSpot_HasAssignedAI::Filter' has a wrong offset!");
static_assert(offsetof(AIHotSpot_HasAssignedAI, ReturnValue) == 0x000009, "Member 'AIHotSpot_HasAssignedAI::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpot.HasEnabledSlots
// 0x0001 (0x0001 - 0x0000)
struct AIHotSpot_HasEnabledSlots final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_HasEnabledSlots) == 0x000001, "Wrong alignment on AIHotSpot_HasEnabledSlots");
static_assert(sizeof(AIHotSpot_HasEnabledSlots) == 0x000001, "Wrong size on AIHotSpot_HasEnabledSlots");
static_assert(offsetof(AIHotSpot_HasEnabledSlots, ReturnValue) == 0x000000, "Member 'AIHotSpot_HasEnabledSlots::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpot.IsAIAllowed
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_IsAIAllowed final
{
public:
	const class AAIController*                    AI;                                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_IsAIAllowed) == 0x000008, "Wrong alignment on AIHotSpot_IsAIAllowed");
static_assert(sizeof(AIHotSpot_IsAIAllowed) == 0x000010, "Wrong size on AIHotSpot_IsAIAllowed");
static_assert(offsetof(AIHotSpot_IsAIAllowed, AI) == 0x000000, "Member 'AIHotSpot_IsAIAllowed::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_IsAIAllowed, ReturnValue) == 0x000008, "Member 'AIHotSpot_IsAIAllowed::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpot.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct AIHotSpot_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_IsEnabled) == 0x000001, "Wrong alignment on AIHotSpot_IsEnabled");
static_assert(sizeof(AIHotSpot_IsEnabled) == 0x000001, "Wrong size on AIHotSpot_IsEnabled");
static_assert(offsetof(AIHotSpot_IsEnabled, ReturnValue) == 0x000000, "Member 'AIHotSpot_IsEnabled::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpot.IsSlotlessAssignmentAllowed
// 0x0001 (0x0001 - 0x0000)
struct AIHotSpot_IsSlotlessAssignmentAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_IsSlotlessAssignmentAllowed) == 0x000001, "Wrong alignment on AIHotSpot_IsSlotlessAssignmentAllowed");
static_assert(sizeof(AIHotSpot_IsSlotlessAssignmentAllowed) == 0x000001, "Wrong size on AIHotSpot_IsSlotlessAssignmentAllowed");
static_assert(offsetof(AIHotSpot_IsSlotlessAssignmentAllowed, ReturnValue) == 0x000000, "Member 'AIHotSpot_IsSlotlessAssignmentAllowed::ReturnValue' has a wrong offset!");

// Function FortniteAI.AthenaAIBlueprintLibrary.AIPawnFromGAHasLuringPickupAsGoal
// 0x0058 (0x0058 - 0x0000)
struct AthenaAIBlueprintLibrary_AIPawnFromGAHasLuringPickupAsGoal final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayTag;                                       // 0x0048(0x0004)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLifetime;                                       // 0x004C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortPickupSpawnSource                        RequiredPickupSpawnSource;                         // 0x0050(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0051(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaAIBlueprintLibrary_AIPawnFromGAHasLuringPickupAsGoal) == 0x000008, "Wrong alignment on AthenaAIBlueprintLibrary_AIPawnFromGAHasLuringPickupAsGoal");
static_assert(sizeof(AthenaAIBlueprintLibrary_AIPawnFromGAHasLuringPickupAsGoal) == 0x000058, "Wrong size on AthenaAIBlueprintLibrary_AIPawnFromGAHasLuringPickupAsGoal");
static_assert(offsetof(AthenaAIBlueprintLibrary_AIPawnFromGAHasLuringPickupAsGoal, ActorInfo) == 0x000000, "Member 'AthenaAIBlueprintLibrary_AIPawnFromGAHasLuringPickupAsGoal::ActorInfo' has a wrong offset!");
static_assert(offsetof(AthenaAIBlueprintLibrary_AIPawnFromGAHasLuringPickupAsGoal, GameplayTag) == 0x000048, "Member 'AthenaAIBlueprintLibrary_AIPawnFromGAHasLuringPickupAsGoal::GameplayTag' has a wrong offset!");
static_assert(offsetof(AthenaAIBlueprintLibrary_AIPawnFromGAHasLuringPickupAsGoal, MaxLifetime) == 0x00004C, "Member 'AthenaAIBlueprintLibrary_AIPawnFromGAHasLuringPickupAsGoal::MaxLifetime' has a wrong offset!");
static_assert(offsetof(AthenaAIBlueprintLibrary_AIPawnFromGAHasLuringPickupAsGoal, RequiredPickupSpawnSource) == 0x000050, "Member 'AthenaAIBlueprintLibrary_AIPawnFromGAHasLuringPickupAsGoal::RequiredPickupSpawnSource' has a wrong offset!");
static_assert(offsetof(AthenaAIBlueprintLibrary_AIPawnFromGAHasLuringPickupAsGoal, ReturnValue) == 0x000051, "Member 'AthenaAIBlueprintLibrary_AIPawnFromGAHasLuringPickupAsGoal::ReturnValue' has a wrong offset!");

// Function FortniteAI.AthenaAIBlueprintLibrary.AthenaSpawnAIFromClass
// 0x0060 (0x0060 - 0x0000)
struct AthenaAIBlueprintLibrary_AthenaSpawnAIFromClass final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APawn>                      PawnClass;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBehaviorTree*                          BehaviorTree;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bNoCollisionFail;                                  // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Owner;                                             // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAIBlueprintLibrary_AthenaSpawnAIFromClass) == 0x000008, "Wrong alignment on AthenaAIBlueprintLibrary_AthenaSpawnAIFromClass");
static_assert(sizeof(AthenaAIBlueprintLibrary_AthenaSpawnAIFromClass) == 0x000060, "Wrong size on AthenaAIBlueprintLibrary_AthenaSpawnAIFromClass");
static_assert(offsetof(AthenaAIBlueprintLibrary_AthenaSpawnAIFromClass, WorldContextObject) == 0x000000, "Member 'AthenaAIBlueprintLibrary_AthenaSpawnAIFromClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AthenaAIBlueprintLibrary_AthenaSpawnAIFromClass, PawnClass) == 0x000008, "Member 'AthenaAIBlueprintLibrary_AthenaSpawnAIFromClass::PawnClass' has a wrong offset!");
static_assert(offsetof(AthenaAIBlueprintLibrary_AthenaSpawnAIFromClass, BehaviorTree) == 0x000010, "Member 'AthenaAIBlueprintLibrary_AthenaSpawnAIFromClass::BehaviorTree' has a wrong offset!");
static_assert(offsetof(AthenaAIBlueprintLibrary_AthenaSpawnAIFromClass, Location) == 0x000018, "Member 'AthenaAIBlueprintLibrary_AthenaSpawnAIFromClass::Location' has a wrong offset!");
static_assert(offsetof(AthenaAIBlueprintLibrary_AthenaSpawnAIFromClass, Rotation) == 0x000030, "Member 'AthenaAIBlueprintLibrary_AthenaSpawnAIFromClass::Rotation' has a wrong offset!");
static_assert(offsetof(AthenaAIBlueprintLibrary_AthenaSpawnAIFromClass, bNoCollisionFail) == 0x000048, "Member 'AthenaAIBlueprintLibrary_AthenaSpawnAIFromClass::bNoCollisionFail' has a wrong offset!");
static_assert(offsetof(AthenaAIBlueprintLibrary_AthenaSpawnAIFromClass, Owner) == 0x000050, "Member 'AthenaAIBlueprintLibrary_AthenaSpawnAIFromClass::Owner' has a wrong offset!");
static_assert(offsetof(AthenaAIBlueprintLibrary_AthenaSpawnAIFromClass, ReturnValue) == 0x000058, "Member 'AthenaAIBlueprintLibrary_AthenaSpawnAIFromClass::ReturnValue' has a wrong offset!");

// Function FortniteAI.AthenaAIBlueprintLibrary.GetAIPopulationTracker
// 0x0010 (0x0010 - 0x0000)
struct AthenaAIBlueprintLibrary_GetAIPopulationTracker final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAthenaAIPopulationTracker*             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAIBlueprintLibrary_GetAIPopulationTracker) == 0x000008, "Wrong alignment on AthenaAIBlueprintLibrary_GetAIPopulationTracker");
static_assert(sizeof(AthenaAIBlueprintLibrary_GetAIPopulationTracker) == 0x000010, "Wrong size on AthenaAIBlueprintLibrary_GetAIPopulationTracker");
static_assert(offsetof(AthenaAIBlueprintLibrary_GetAIPopulationTracker, WorldContextObject) == 0x000000, "Member 'AthenaAIBlueprintLibrary_GetAIPopulationTracker::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AthenaAIBlueprintLibrary_GetAIPopulationTracker, ReturnValue) == 0x000008, "Member 'AthenaAIBlueprintLibrary_GetAIPopulationTracker::ReturnValue' has a wrong offset!");

// Function FortniteAI.AthenaAIBlueprintLibrary.GetAIServiceCreativePlayerBots
// 0x0010 (0x0010 - 0x0000)
struct AthenaAIBlueprintLibrary_GetAIServiceCreativePlayerBots final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAthenaAIServiceCreativePlayerBots*     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAIBlueprintLibrary_GetAIServiceCreativePlayerBots) == 0x000008, "Wrong alignment on AthenaAIBlueprintLibrary_GetAIServiceCreativePlayerBots");
static_assert(sizeof(AthenaAIBlueprintLibrary_GetAIServiceCreativePlayerBots) == 0x000010, "Wrong size on AthenaAIBlueprintLibrary_GetAIServiceCreativePlayerBots");
static_assert(offsetof(AthenaAIBlueprintLibrary_GetAIServiceCreativePlayerBots, WorldContextObject) == 0x000000, "Member 'AthenaAIBlueprintLibrary_GetAIServiceCreativePlayerBots::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AthenaAIBlueprintLibrary_GetAIServiceCreativePlayerBots, ReturnValue) == 0x000008, "Member 'AthenaAIBlueprintLibrary_GetAIServiceCreativePlayerBots::ReturnValue' has a wrong offset!");

// Function FortniteAI.AthenaAIBlueprintLibrary.GetAIServiceLoot
// 0x0010 (0x0010 - 0x0000)
struct AthenaAIBlueprintLibrary_GetAIServiceLoot final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAthenaAIServiceLoot*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAIBlueprintLibrary_GetAIServiceLoot) == 0x000008, "Wrong alignment on AthenaAIBlueprintLibrary_GetAIServiceLoot");
static_assert(sizeof(AthenaAIBlueprintLibrary_GetAIServiceLoot) == 0x000010, "Wrong size on AthenaAIBlueprintLibrary_GetAIServiceLoot");
static_assert(offsetof(AthenaAIBlueprintLibrary_GetAIServiceLoot, WorldContextObject) == 0x000000, "Member 'AthenaAIBlueprintLibrary_GetAIServiceLoot::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AthenaAIBlueprintLibrary_GetAIServiceLoot, ReturnValue) == 0x000008, "Member 'AthenaAIBlueprintLibrary_GetAIServiceLoot::ReturnValue' has a wrong offset!");

// Function FortniteAI.AthenaAIBlueprintLibrary.GetAIServicePlayerBots
// 0x0010 (0x0010 - 0x0000)
struct AthenaAIBlueprintLibrary_GetAIServicePlayerBots final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAthenaAIServicePlayerBots*             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAIBlueprintLibrary_GetAIServicePlayerBots) == 0x000008, "Wrong alignment on AthenaAIBlueprintLibrary_GetAIServicePlayerBots");
static_assert(sizeof(AthenaAIBlueprintLibrary_GetAIServicePlayerBots) == 0x000010, "Wrong size on AthenaAIBlueprintLibrary_GetAIServicePlayerBots");
static_assert(offsetof(AthenaAIBlueprintLibrary_GetAIServicePlayerBots, WorldContextObject) == 0x000000, "Member 'AthenaAIBlueprintLibrary_GetAIServicePlayerBots::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AthenaAIBlueprintLibrary_GetAIServicePlayerBots, ReturnValue) == 0x000008, "Member 'AthenaAIBlueprintLibrary_GetAIServicePlayerBots::ReturnValue' has a wrong offset!");

// Function FortniteAI.AthenaAIBlueprintLibrary.IsItemDefinitionSupported
// 0x0018 (0x0018 - 0x0000)
struct AthenaAIBlueprintLibrary_IsItemDefinitionSupported final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortItemDefinition*              FortItemDef;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaAIBlueprintLibrary_IsItemDefinitionSupported) == 0x000008, "Wrong alignment on AthenaAIBlueprintLibrary_IsItemDefinitionSupported");
static_assert(sizeof(AthenaAIBlueprintLibrary_IsItemDefinitionSupported) == 0x000018, "Wrong size on AthenaAIBlueprintLibrary_IsItemDefinitionSupported");
static_assert(offsetof(AthenaAIBlueprintLibrary_IsItemDefinitionSupported, WorldContextObject) == 0x000000, "Member 'AthenaAIBlueprintLibrary_IsItemDefinitionSupported::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AthenaAIBlueprintLibrary_IsItemDefinitionSupported, FortItemDef) == 0x000008, "Member 'AthenaAIBlueprintLibrary_IsItemDefinitionSupported::FortItemDef' has a wrong offset!");
static_assert(offsetof(AthenaAIBlueprintLibrary_IsItemDefinitionSupported, ReturnValue) == 0x000010, "Member 'AthenaAIBlueprintLibrary_IsItemDefinitionSupported::ReturnValue' has a wrong offset!");

// Function FortniteAI.AthenaAIBlueprintLibrary.IsWeaponSupported
// 0x0018 (0x0018 - 0x0000)
struct AthenaAIBlueprintLibrary_IsWeaponSupported final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortWeapon*                            FortWeapon;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaAIBlueprintLibrary_IsWeaponSupported) == 0x000008, "Wrong alignment on AthenaAIBlueprintLibrary_IsWeaponSupported");
static_assert(sizeof(AthenaAIBlueprintLibrary_IsWeaponSupported) == 0x000018, "Wrong size on AthenaAIBlueprintLibrary_IsWeaponSupported");
static_assert(offsetof(AthenaAIBlueprintLibrary_IsWeaponSupported, WorldContextObject) == 0x000000, "Member 'AthenaAIBlueprintLibrary_IsWeaponSupported::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AthenaAIBlueprintLibrary_IsWeaponSupported, FortWeapon) == 0x000008, "Member 'AthenaAIBlueprintLibrary_IsWeaponSupported::FortWeapon' has a wrong offset!");
static_assert(offsetof(AthenaAIBlueprintLibrary_IsWeaponSupported, ReturnValue) == 0x000010, "Member 'AthenaAIBlueprintLibrary_IsWeaponSupported::ReturnValue' has a wrong offset!");

// Function FortniteAI.AthenaAIBlueprintLibrary.JoinTeam
// 0x0018 (0x0018 - 0x0000)
struct AthenaAIBlueprintLibrary_JoinTeam final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AController*                      SourceTeamController;                              // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            DestinationTeamController;                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAIBlueprintLibrary_JoinTeam) == 0x000008, "Wrong alignment on AthenaAIBlueprintLibrary_JoinTeam");
static_assert(sizeof(AthenaAIBlueprintLibrary_JoinTeam) == 0x000018, "Wrong size on AthenaAIBlueprintLibrary_JoinTeam");
static_assert(offsetof(AthenaAIBlueprintLibrary_JoinTeam, WorldContextObject) == 0x000000, "Member 'AthenaAIBlueprintLibrary_JoinTeam::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AthenaAIBlueprintLibrary_JoinTeam, SourceTeamController) == 0x000008, "Member 'AthenaAIBlueprintLibrary_JoinTeam::SourceTeamController' has a wrong offset!");
static_assert(offsetof(AthenaAIBlueprintLibrary_JoinTeam, DestinationTeamController) == 0x000010, "Member 'AthenaAIBlueprintLibrary_JoinTeam::DestinationTeamController' has a wrong offset!");

// Function FortniteAI.AthenaAIBlueprintLibrary.KillBots
// 0x0018 (0x0018 - 0x0000)
struct AthenaAIBlueprintLibrary_KillBots final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKillPlayers;                                      // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKillNoneParticipants;                             // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TeamIndex;                                         // 0x000A(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 BotOwner;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAIBlueprintLibrary_KillBots) == 0x000008, "Wrong alignment on AthenaAIBlueprintLibrary_KillBots");
static_assert(sizeof(AthenaAIBlueprintLibrary_KillBots) == 0x000018, "Wrong size on AthenaAIBlueprintLibrary_KillBots");
static_assert(offsetof(AthenaAIBlueprintLibrary_KillBots, WorldContextObject) == 0x000000, "Member 'AthenaAIBlueprintLibrary_KillBots::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AthenaAIBlueprintLibrary_KillBots, bKillPlayers) == 0x000008, "Member 'AthenaAIBlueprintLibrary_KillBots::bKillPlayers' has a wrong offset!");
static_assert(offsetof(AthenaAIBlueprintLibrary_KillBots, bKillNoneParticipants) == 0x000009, "Member 'AthenaAIBlueprintLibrary_KillBots::bKillNoneParticipants' has a wrong offset!");
static_assert(offsetof(AthenaAIBlueprintLibrary_KillBots, TeamIndex) == 0x00000A, "Member 'AthenaAIBlueprintLibrary_KillBots::TeamIndex' has a wrong offset!");
static_assert(offsetof(AthenaAIBlueprintLibrary_KillBots, BotOwner) == 0x000010, "Member 'AthenaAIBlueprintLibrary_KillBots::BotOwner' has a wrong offset!");

// Function FortniteAI.AthenaAIBlueprintLibrary.MakeBotGroupsTakeEachOtherAsTargets
// 0x0030 (0x0030 - 0x0000)
struct AthenaAIBlueprintLibrary_MakeBotGroupsTakeEachOtherAsTargets final
{
public:
	TArray<class AActor*>                         GroupA;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         GroupB;                                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EPerceptionState                              PerceptionState;                                   // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ForgetTime;                                        // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForgetDistance;                                    // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaAIBlueprintLibrary_MakeBotGroupsTakeEachOtherAsTargets) == 0x000008, "Wrong alignment on AthenaAIBlueprintLibrary_MakeBotGroupsTakeEachOtherAsTargets");
static_assert(sizeof(AthenaAIBlueprintLibrary_MakeBotGroupsTakeEachOtherAsTargets) == 0x000030, "Wrong size on AthenaAIBlueprintLibrary_MakeBotGroupsTakeEachOtherAsTargets");
static_assert(offsetof(AthenaAIBlueprintLibrary_MakeBotGroupsTakeEachOtherAsTargets, GroupA) == 0x000000, "Member 'AthenaAIBlueprintLibrary_MakeBotGroupsTakeEachOtherAsTargets::GroupA' has a wrong offset!");
static_assert(offsetof(AthenaAIBlueprintLibrary_MakeBotGroupsTakeEachOtherAsTargets, GroupB) == 0x000010, "Member 'AthenaAIBlueprintLibrary_MakeBotGroupsTakeEachOtherAsTargets::GroupB' has a wrong offset!");
static_assert(offsetof(AthenaAIBlueprintLibrary_MakeBotGroupsTakeEachOtherAsTargets, PerceptionState) == 0x000020, "Member 'AthenaAIBlueprintLibrary_MakeBotGroupsTakeEachOtherAsTargets::PerceptionState' has a wrong offset!");
static_assert(offsetof(AthenaAIBlueprintLibrary_MakeBotGroupsTakeEachOtherAsTargets, ForgetTime) == 0x000024, "Member 'AthenaAIBlueprintLibrary_MakeBotGroupsTakeEachOtherAsTargets::ForgetTime' has a wrong offset!");
static_assert(offsetof(AthenaAIBlueprintLibrary_MakeBotGroupsTakeEachOtherAsTargets, ForgetDistance) == 0x000028, "Member 'AthenaAIBlueprintLibrary_MakeBotGroupsTakeEachOtherAsTargets::ForgetDistance' has a wrong offset!");

// Function FortniteAI.AIHotSpotSlot.OnStateChanged
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpotSlot_OnStateChanged final
{
public:
	class AAIController*                          SlotOwner;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIHotSpotSlot                                NewState;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpotSlot_OnStateChanged) == 0x000008, "Wrong alignment on AIHotSpotSlot_OnStateChanged");
static_assert(sizeof(AIHotSpotSlot_OnStateChanged) == 0x000010, "Wrong size on AIHotSpotSlot_OnStateChanged");
static_assert(offsetof(AIHotSpotSlot_OnStateChanged, SlotOwner) == 0x000000, "Member 'AIHotSpotSlot_OnStateChanged::SlotOwner' has a wrong offset!");
static_assert(offsetof(AIHotSpotSlot_OnStateChanged, NewState) == 0x000008, "Member 'AIHotSpotSlot_OnStateChanged::NewState' has a wrong offset!");

// Function FortniteAI.AIHotSpotSlot.SetSlotEnabled
// 0x0001 (0x0001 - 0x0000)
struct AIHotSpotSlot_SetSlotEnabled final
{
public:
	bool                                          bNewEnabled;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_SetSlotEnabled) == 0x000001, "Wrong alignment on AIHotSpotSlot_SetSlotEnabled");
static_assert(sizeof(AIHotSpotSlot_SetSlotEnabled) == 0x000001, "Wrong size on AIHotSpotSlot_SetSlotEnabled");
static_assert(offsetof(AIHotSpotSlot_SetSlotEnabled, bNewEnabled) == 0x000000, "Member 'AIHotSpotSlot_SetSlotEnabled::bNewEnabled' has a wrong offset!");

// Function FortniteAI.AIHotSpotSlot.SetSlotOwnerAndState
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpotSlot_SetSlotOwnerAndState final
{
public:
	class AAIController*                          NewOwner;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIHotSpotSlot                                NewState;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpotSlot_SetSlotOwnerAndState) == 0x000008, "Wrong alignment on AIHotSpotSlot_SetSlotOwnerAndState");
static_assert(sizeof(AIHotSpotSlot_SetSlotOwnerAndState) == 0x000010, "Wrong size on AIHotSpotSlot_SetSlotOwnerAndState");
static_assert(offsetof(AIHotSpotSlot_SetSlotOwnerAndState, NewOwner) == 0x000000, "Member 'AIHotSpotSlot_SetSlotOwnerAndState::NewOwner' has a wrong offset!");
static_assert(offsetof(AIHotSpotSlot_SetSlotOwnerAndState, NewState) == 0x000008, "Member 'AIHotSpotSlot_SetSlotOwnerAndState::NewState' has a wrong offset!");

// Function FortniteAI.AIHotSpotSlot.SetSlotState
// 0x0001 (0x0001 - 0x0000)
struct AIHotSpotSlot_SetSlotState final
{
public:
	EAIHotSpotSlot                                NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_SetSlotState) == 0x000001, "Wrong alignment on AIHotSpotSlot_SetSlotState");
static_assert(sizeof(AIHotSpotSlot_SetSlotState) == 0x000001, "Wrong size on AIHotSpotSlot_SetSlotState");
static_assert(offsetof(AIHotSpotSlot_SetSlotState, NewState) == 0x000000, "Member 'AIHotSpotSlot_SetSlotState::NewState' has a wrong offset!");

// Function FortniteAI.AIHotSpotSlot.GetHotSpot
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpotSlot_GetHotSpot final
{
public:
	class AAIHotSpot*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_GetHotSpot) == 0x000008, "Wrong alignment on AIHotSpotSlot_GetHotSpot");
static_assert(sizeof(AIHotSpotSlot_GetHotSpot) == 0x000008, "Wrong size on AIHotSpotSlot_GetHotSpot");
static_assert(offsetof(AIHotSpotSlot_GetHotSpot, ReturnValue) == 0x000000, "Member 'AIHotSpotSlot_GetHotSpot::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpotSlot.GetSlotBounds
// 0x0038 (0x0038 - 0x0000)
struct AIHotSpotSlot_GetSlotBounds final
{
public:
	struct FBox                                   ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_GetSlotBounds) == 0x000008, "Wrong alignment on AIHotSpotSlot_GetSlotBounds");
static_assert(sizeof(AIHotSpotSlot_GetSlotBounds) == 0x000038, "Wrong size on AIHotSpotSlot_GetSlotBounds");
static_assert(offsetof(AIHotSpotSlot_GetSlotBounds, ReturnValue) == 0x000000, "Member 'AIHotSpotSlot_GetSlotBounds::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpotSlot.GetSlotHeight
// 0x0004 (0x0004 - 0x0000)
struct AIHotSpotSlot_GetSlotHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_GetSlotHeight) == 0x000004, "Wrong alignment on AIHotSpotSlot_GetSlotHeight");
static_assert(sizeof(AIHotSpotSlot_GetSlotHeight) == 0x000004, "Wrong size on AIHotSpotSlot_GetSlotHeight");
static_assert(offsetof(AIHotSpotSlot_GetSlotHeight, ReturnValue) == 0x000000, "Member 'AIHotSpotSlot_GetSlotHeight::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpotSlot.GetSlotIndex
// 0x0004 (0x0004 - 0x0000)
struct AIHotSpotSlot_GetSlotIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_GetSlotIndex) == 0x000004, "Wrong alignment on AIHotSpotSlot_GetSlotIndex");
static_assert(sizeof(AIHotSpotSlot_GetSlotIndex) == 0x000004, "Wrong size on AIHotSpotSlot_GetSlotIndex");
static_assert(offsetof(AIHotSpotSlot_GetSlotIndex, ReturnValue) == 0x000000, "Member 'AIHotSpotSlot_GetSlotIndex::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpotSlot.GetSlotLocation
// 0x0018 (0x0018 - 0x0000)
struct AIHotSpotSlot_GetSlotLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_GetSlotLocation) == 0x000008, "Wrong alignment on AIHotSpotSlot_GetSlotLocation");
static_assert(sizeof(AIHotSpotSlot_GetSlotLocation) == 0x000018, "Wrong size on AIHotSpotSlot_GetSlotLocation");
static_assert(offsetof(AIHotSpotSlot_GetSlotLocation, ReturnValue) == 0x000000, "Member 'AIHotSpotSlot_GetSlotLocation::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpotSlot.GetSlotOwner
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpotSlot_GetSlotOwner final
{
public:
	class AAIController*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_GetSlotOwner) == 0x000008, "Wrong alignment on AIHotSpotSlot_GetSlotOwner");
static_assert(sizeof(AIHotSpotSlot_GetSlotOwner) == 0x000008, "Wrong size on AIHotSpotSlot_GetSlotOwner");
static_assert(offsetof(AIHotSpotSlot_GetSlotOwner, ReturnValue) == 0x000000, "Member 'AIHotSpotSlot_GetSlotOwner::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpotSlot.GetSlotRadius
// 0x0004 (0x0004 - 0x0000)
struct AIHotSpotSlot_GetSlotRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_GetSlotRadius) == 0x000004, "Wrong alignment on AIHotSpotSlot_GetSlotRadius");
static_assert(sizeof(AIHotSpotSlot_GetSlotRadius) == 0x000004, "Wrong size on AIHotSpotSlot_GetSlotRadius");
static_assert(offsetof(AIHotSpotSlot_GetSlotRadius, ReturnValue) == 0x000000, "Member 'AIHotSpotSlot_GetSlotRadius::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpotSlot.GetSlotRotation
// 0x0018 (0x0018 - 0x0000)
struct AIHotSpotSlot_GetSlotRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_GetSlotRotation) == 0x000008, "Wrong alignment on AIHotSpotSlot_GetSlotRotation");
static_assert(sizeof(AIHotSpotSlot_GetSlotRotation) == 0x000018, "Wrong size on AIHotSpotSlot_GetSlotRotation");
static_assert(offsetof(AIHotSpotSlot_GetSlotRotation, ReturnValue) == 0x000000, "Member 'AIHotSpotSlot_GetSlotRotation::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpotSlot.GetSlotState
// 0x0001 (0x0001 - 0x0000)
struct AIHotSpotSlot_GetSlotState final
{
public:
	EAIHotSpotSlot                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_GetSlotState) == 0x000001, "Wrong alignment on AIHotSpotSlot_GetSlotState");
static_assert(sizeof(AIHotSpotSlot_GetSlotState) == 0x000001, "Wrong size on AIHotSpotSlot_GetSlotState");
static_assert(offsetof(AIHotSpotSlot_GetSlotState, ReturnValue) == 0x000000, "Member 'AIHotSpotSlot_GetSlotState::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpotSlot.GetSlotUserId
// 0x0004 (0x0004 - 0x0000)
struct AIHotSpotSlot_GetSlotUserId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_GetSlotUserId) == 0x000004, "Wrong alignment on AIHotSpotSlot_GetSlotUserId");
static_assert(sizeof(AIHotSpotSlot_GetSlotUserId) == 0x000004, "Wrong size on AIHotSpotSlot_GetSlotUserId");
static_assert(offsetof(AIHotSpotSlot_GetSlotUserId, ReturnValue) == 0x000000, "Member 'AIHotSpotSlot_GetSlotUserId::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpotSlot.HasUserId
// 0x0001 (0x0001 - 0x0000)
struct AIHotSpotSlot_HasUserId final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_HasUserId) == 0x000001, "Wrong alignment on AIHotSpotSlot_HasUserId");
static_assert(sizeof(AIHotSpotSlot_HasUserId) == 0x000001, "Wrong size on AIHotSpotSlot_HasUserId");
static_assert(offsetof(AIHotSpotSlot_HasUserId, ReturnValue) == 0x000000, "Member 'AIHotSpotSlot_HasUserId::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpotSlot.IsAIAllowed
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpotSlot_IsAIAllowed final
{
public:
	const class AAIController*                    AI;                                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpotSlot_IsAIAllowed) == 0x000008, "Wrong alignment on AIHotSpotSlot_IsAIAllowed");
static_assert(sizeof(AIHotSpotSlot_IsAIAllowed) == 0x000010, "Wrong size on AIHotSpotSlot_IsAIAllowed");
static_assert(offsetof(AIHotSpotSlot_IsAIAllowed, AI) == 0x000000, "Member 'AIHotSpotSlot_IsAIAllowed::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpotSlot_IsAIAllowed, ReturnValue) == 0x000008, "Member 'AIHotSpotSlot_IsAIAllowed::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpotSlot.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct AIHotSpotSlot_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_IsEnabled) == 0x000001, "Wrong alignment on AIHotSpotSlot_IsEnabled");
static_assert(sizeof(AIHotSpotSlot_IsEnabled) == 0x000001, "Wrong size on AIHotSpotSlot_IsEnabled");
static_assert(offsetof(AIHotSpotSlot_IsEnabled, ReturnValue) == 0x000000, "Member 'AIHotSpotSlot_IsEnabled::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpotSlotGenerator.AddSlot
// 0x0048 (0x0048 - 0x0000)
struct AIHotSpotSlotGenerator_AddSlot final
{
public:
	struct FVector                                RelativeLocation;                                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UAIHotSpotSlot>             CustomSlotClass;                                   // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAIHotSpotSlot*                         ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlotGenerator_AddSlot) == 0x000008, "Wrong alignment on AIHotSpotSlotGenerator_AddSlot");
static_assert(sizeof(AIHotSpotSlotGenerator_AddSlot) == 0x000048, "Wrong size on AIHotSpotSlotGenerator_AddSlot");
static_assert(offsetof(AIHotSpotSlotGenerator_AddSlot, RelativeLocation) == 0x000000, "Member 'AIHotSpotSlotGenerator_AddSlot::RelativeLocation' has a wrong offset!");
static_assert(offsetof(AIHotSpotSlotGenerator_AddSlot, RelativeRotation) == 0x000018, "Member 'AIHotSpotSlotGenerator_AddSlot::RelativeRotation' has a wrong offset!");
static_assert(offsetof(AIHotSpotSlotGenerator_AddSlot, CustomSlotClass) == 0x000030, "Member 'AIHotSpotSlotGenerator_AddSlot::CustomSlotClass' has a wrong offset!");
static_assert(offsetof(AIHotSpotSlotGenerator_AddSlot, bEnabled) == 0x000038, "Member 'AIHotSpotSlotGenerator_AddSlot::bEnabled' has a wrong offset!");
static_assert(offsetof(AIHotSpotSlotGenerator_AddSlot, ReturnValue) == 0x000040, "Member 'AIHotSpotSlotGenerator_AddSlot::ReturnValue' has a wrong offset!");

// Function FortniteAI.AIHotSpotSlotGenerator.GetHotSpot
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpotSlotGenerator_GetHotSpot final
{
public:
	class AAIHotSpot*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlotGenerator_GetHotSpot) == 0x000008, "Wrong alignment on AIHotSpotSlotGenerator_GetHotSpot");
static_assert(sizeof(AIHotSpotSlotGenerator_GetHotSpot) == 0x000008, "Wrong size on AIHotSpotSlotGenerator_GetHotSpot");
static_assert(offsetof(AIHotSpotSlotGenerator_GetHotSpot, ReturnValue) == 0x000000, "Member 'AIHotSpotSlotGenerator_GetHotSpot::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIController.IsIgnoringProximity
// 0x0010 (0x0010 - 0x0000)
struct FortAIController_IsIgnoringProximity final
{
public:
	class AFortAIController*                      FortAIController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIController_IsIgnoringProximity) == 0x000008, "Wrong alignment on FortAIController_IsIgnoringProximity");
static_assert(sizeof(FortAIController_IsIgnoringProximity) == 0x000010, "Wrong size on FortAIController_IsIgnoringProximity");
static_assert(offsetof(FortAIController_IsIgnoringProximity, FortAIController) == 0x000000, "Member 'FortAIController_IsIgnoringProximity::FortAIController' has a wrong offset!");
static_assert(offsetof(FortAIController_IsIgnoringProximity, ReturnValue) == 0x000008, "Member 'FortAIController_IsIgnoringProximity::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIController.CreateBuildingActor
// 0x0040 (0x0040 - 0x0000)
struct FortAIController_CreateBuildingActor final
{
public:
	TSubclassOf<class ABuildingSMActor>           BuildingClass;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BuildLoc;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               BuildRot;                                          // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bMirrored;                                         // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIController_CreateBuildingActor) == 0x000008, "Wrong alignment on FortAIController_CreateBuildingActor");
static_assert(sizeof(FortAIController_CreateBuildingActor) == 0x000040, "Wrong size on FortAIController_CreateBuildingActor");
static_assert(offsetof(FortAIController_CreateBuildingActor, BuildingClass) == 0x000000, "Member 'FortAIController_CreateBuildingActor::BuildingClass' has a wrong offset!");
static_assert(offsetof(FortAIController_CreateBuildingActor, BuildLoc) == 0x000008, "Member 'FortAIController_CreateBuildingActor::BuildLoc' has a wrong offset!");
static_assert(offsetof(FortAIController_CreateBuildingActor, BuildRot) == 0x000020, "Member 'FortAIController_CreateBuildingActor::BuildRot' has a wrong offset!");
static_assert(offsetof(FortAIController_CreateBuildingActor, bMirrored) == 0x000038, "Member 'FortAIController_CreateBuildingActor::bMirrored' has a wrong offset!");
static_assert(offsetof(FortAIController_CreateBuildingActor, ReturnValue) == 0x000039, "Member 'FortAIController_CreateBuildingActor::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIController.IgnoreProximityForDuration
// 0x0004 (0x0004 - 0x0000)
struct FortAIController_IgnoreProximityForDuration final
{
public:
	float                                         DurationToIgnore;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIController_IgnoreProximityForDuration) == 0x000004, "Wrong alignment on FortAIController_IgnoreProximityForDuration");
static_assert(sizeof(FortAIController_IgnoreProximityForDuration) == 0x000004, "Wrong size on FortAIController_IgnoreProximityForDuration");
static_assert(offsetof(FortAIController_IgnoreProximityForDuration, DurationToIgnore) == 0x000000, "Member 'FortAIController_IgnoreProximityForDuration::DurationToIgnore' has a wrong offset!");

// Function FortniteAI.FortAIController.IsAllowedToSleep
// 0x0001 (0x0001 - 0x0000)
struct FortAIController_IsAllowedToSleep final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIController_IsAllowedToSleep) == 0x000001, "Wrong alignment on FortAIController_IsAllowedToSleep");
static_assert(sizeof(FortAIController_IsAllowedToSleep) == 0x000001, "Wrong size on FortAIController_IsAllowedToSleep");
static_assert(offsetof(FortAIController_IsAllowedToSleep, ReturnValue) == 0x000000, "Member 'FortAIController_IsAllowedToSleep::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIController.OnActorGoalDestroyed
// 0x0008 (0x0008 - 0x0000)
struct FortAIController_OnActorGoalDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIController_OnActorGoalDestroyed) == 0x000008, "Wrong alignment on FortAIController_OnActorGoalDestroyed");
static_assert(sizeof(FortAIController_OnActorGoalDestroyed) == 0x000008, "Wrong size on FortAIController_OnActorGoalDestroyed");
static_assert(offsetof(FortAIController_OnActorGoalDestroyed, DestroyedActor) == 0x000000, "Member 'FortAIController_OnActorGoalDestroyed::DestroyedActor' has a wrong offset!");

// Function FortniteAI.FortAIController.SetAlwaysGameplayRelevant
// 0x0001 (0x0001 - 0x0000)
struct FortAIController_SetAlwaysGameplayRelevant final
{
public:
	bool                                          bInAlwaysGameplayRelevant;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIController_SetAlwaysGameplayRelevant) == 0x000001, "Wrong alignment on FortAIController_SetAlwaysGameplayRelevant");
static_assert(sizeof(FortAIController_SetAlwaysGameplayRelevant) == 0x000001, "Wrong size on FortAIController_SetAlwaysGameplayRelevant");
static_assert(offsetof(FortAIController_SetAlwaysGameplayRelevant, bInAlwaysGameplayRelevant) == 0x000000, "Member 'FortAIController_SetAlwaysGameplayRelevant::bInAlwaysGameplayRelevant' has a wrong offset!");

// Function FortniteAI.FortAIController.SetFullPeripheralVision
// 0x0001 (0x0001 - 0x0000)
struct FortAIController_SetFullPeripheralVision final
{
public:
	bool                                          bNewFullPeripheralVision;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIController_SetFullPeripheralVision) == 0x000001, "Wrong alignment on FortAIController_SetFullPeripheralVision");
static_assert(sizeof(FortAIController_SetFullPeripheralVision) == 0x000001, "Wrong size on FortAIController_SetFullPeripheralVision");
static_assert(offsetof(FortAIController_SetFullPeripheralVision, bNewFullPeripheralVision) == 0x000000, "Member 'FortAIController_SetFullPeripheralVision::bNewFullPeripheralVision' has a wrong offset!");

// Function FortniteAI.FortAIController.SetGoalActor
// 0x0010 (0x0010 - 0x0000)
struct FortAIController_SetGoalActor final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocationAlwaysKnown;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIController_SetGoalActor) == 0x000008, "Wrong alignment on FortAIController_SetGoalActor");
static_assert(sizeof(FortAIController_SetGoalActor) == 0x000010, "Wrong size on FortAIController_SetGoalActor");
static_assert(offsetof(FortAIController_SetGoalActor, InActor) == 0x000000, "Member 'FortAIController_SetGoalActor::InActor' has a wrong offset!");
static_assert(offsetof(FortAIController_SetGoalActor, bLocationAlwaysKnown) == 0x000008, "Member 'FortAIController_SetGoalActor::bLocationAlwaysKnown' has a wrong offset!");

// Function FortniteAI.FortAIController.SetIsSleeping
// 0x0001 (0x0001 - 0x0000)
struct FortAIController_SetIsSleeping final
{
public:
	bool                                          bNewSleepStatus;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIController_SetIsSleeping) == 0x000001, "Wrong alignment on FortAIController_SetIsSleeping");
static_assert(sizeof(FortAIController_SetIsSleeping) == 0x000001, "Wrong size on FortAIController_SetIsSleeping");
static_assert(offsetof(FortAIController_SetIsSleeping, bNewSleepStatus) == 0x000000, "Member 'FortAIController_SetIsSleeping::bNewSleepStatus' has a wrong offset!");

// Function FortniteAI.FortAIController.SetPawnAIType
// 0x0010 (0x0010 - 0x0000)
struct FortAIController_SetPawnAIType final
{
public:
	EFortressAIType                               NewAIType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 SpawnSpot;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIController_SetPawnAIType) == 0x000008, "Wrong alignment on FortAIController_SetPawnAIType");
static_assert(sizeof(FortAIController_SetPawnAIType) == 0x000010, "Wrong size on FortAIController_SetPawnAIType");
static_assert(offsetof(FortAIController_SetPawnAIType, NewAIType) == 0x000000, "Member 'FortAIController_SetPawnAIType::NewAIType' has a wrong offset!");
static_assert(offsetof(FortAIController_SetPawnAIType, SpawnSpot) == 0x000008, "Member 'FortAIController_SetPawnAIType::SpawnSpot' has a wrong offset!");

// Function FortniteAI.FortAIController.SetTeam
// 0x0001 (0x0001 - 0x0000)
struct FortAIController_SetTeam final
{
public:
	EFortTeam                                     InTeam;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIController_SetTeam) == 0x000001, "Wrong alignment on FortAIController_SetTeam");
static_assert(sizeof(FortAIController_SetTeam) == 0x000001, "Wrong size on FortAIController_SetTeam");
static_assert(offsetof(FortAIController_SetTeam, InTeam) == 0x000000, "Member 'FortAIController_SetTeam::InTeam' has a wrong offset!");

// Function FortniteAI.FortAIController.SetTeamInt
// 0x0001 (0x0001 - 0x0000)
struct FortAIController_SetTeamInt final
{
public:
	uint8                                         InTeam;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIController_SetTeamInt) == 0x000001, "Wrong alignment on FortAIController_SetTeamInt");
static_assert(sizeof(FortAIController_SetTeamInt) == 0x000001, "Wrong size on FortAIController_SetTeamInt");
static_assert(offsetof(FortAIController_SetTeamInt, InTeam) == 0x000000, "Member 'FortAIController_SetTeamInt::InTeam' has a wrong offset!");

// Function FortniteAI.FortAIController.SetupCustomVIM
// 0x0008 (0x0008 - 0x0000)
struct FortAIController_SetupCustomVIM final
{
public:
	class UClass*                                 VIM;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIController_SetupCustomVIM) == 0x000008, "Wrong alignment on FortAIController_SetupCustomVIM");
static_assert(sizeof(FortAIController_SetupCustomVIM) == 0x000008, "Wrong size on FortAIController_SetupCustomVIM");
static_assert(offsetof(FortAIController_SetupCustomVIM, VIM) == 0x000000, "Member 'FortAIController_SetupCustomVIM::VIM' has a wrong offset!");

// Function FortniteAI.FortAIController.GetEncounterInfo
// 0x0008 (0x0008 - 0x0000)
struct FortAIController_GetEncounterInfo final
{
public:
	class UFortAIEncounterInfo*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIController_GetEncounterInfo) == 0x000008, "Wrong alignment on FortAIController_GetEncounterInfo");
static_assert(sizeof(FortAIController_GetEncounterInfo) == 0x000008, "Wrong size on FortAIController_GetEncounterInfo");
static_assert(offsetof(FortAIController_GetEncounterInfo, ReturnValue) == 0x000000, "Member 'FortAIController_GetEncounterInfo::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIController.GetGoalActor
// 0x0008 (0x0008 - 0x0000)
struct FortAIController_GetGoalActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIController_GetGoalActor) == 0x000008, "Wrong alignment on FortAIController_GetGoalActor");
static_assert(sizeof(FortAIController_GetGoalActor) == 0x000008, "Wrong size on FortAIController_GetGoalActor");
static_assert(offsetof(FortAIController_GetGoalActor, ReturnValue) == 0x000000, "Member 'FortAIController_GetGoalActor::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotEvaluator_Movement.OnCurrentUnstuckSteeringAttemptFinished
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaAIBotEvaluator_Movement_OnCurrentUnstuckSteeringAttemptFinished final
{
public:
	EBotUnstuckSteeringReason                     UnstuckSteeringReason;                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotEvaluator_Movement_OnCurrentUnstuckSteeringAttemptFinished) == 0x000001, "Wrong alignment on FortAthenaAIBotEvaluator_Movement_OnCurrentUnstuckSteeringAttemptFinished");
static_assert(sizeof(FortAthenaAIBotEvaluator_Movement_OnCurrentUnstuckSteeringAttemptFinished) == 0x000001, "Wrong size on FortAthenaAIBotEvaluator_Movement_OnCurrentUnstuckSteeringAttemptFinished");
static_assert(offsetof(FortAthenaAIBotEvaluator_Movement_OnCurrentUnstuckSteeringAttemptFinished, UnstuckSteeringReason) == 0x000000, "Member 'FortAthenaAIBotEvaluator_Movement_OnCurrentUnstuckSteeringAttemptFinished::UnstuckSteeringReason' has a wrong offset!");

// Function FortniteAI.FortCreativeCreatureManagerInfoComponent.GetCreatureManagerComponent
// 0x0008 (0x0008 - 0x0000)
struct FortCreativeCreatureManagerInfoComponent_GetCreatureManagerComponent final
{
public:
	class UFortCreativeCreatureManagerComponent*  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeCreatureManagerInfoComponent_GetCreatureManagerComponent) == 0x000008, "Wrong alignment on FortCreativeCreatureManagerInfoComponent_GetCreatureManagerComponent");
static_assert(sizeof(FortCreativeCreatureManagerInfoComponent_GetCreatureManagerComponent) == 0x000008, "Wrong size on FortCreativeCreatureManagerInfoComponent_GetCreatureManagerComponent");
static_assert(offsetof(FortCreativeCreatureManagerInfoComponent_GetCreatureManagerComponent, ReturnValue) == 0x000000, "Member 'FortCreativeCreatureManagerInfoComponent_GetCreatureManagerComponent::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortCreativeCreatureManagerInfoComponent.SetAffectedTargetsType
// 0x0001 (0x0001 - 0x0000)
struct FortCreativeCreatureManagerInfoComponent_SetAffectedTargetsType final
{
public:
	ECreatureManagerAffectedTargets               InAffectedTargetsType;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeCreatureManagerInfoComponent_SetAffectedTargetsType) == 0x000001, "Wrong alignment on FortCreativeCreatureManagerInfoComponent_SetAffectedTargetsType");
static_assert(sizeof(FortCreativeCreatureManagerInfoComponent_SetAffectedTargetsType) == 0x000001, "Wrong size on FortCreativeCreatureManagerInfoComponent_SetAffectedTargetsType");
static_assert(offsetof(FortCreativeCreatureManagerInfoComponent_SetAffectedTargetsType, InAffectedTargetsType) == 0x000000, "Member 'FortCreativeCreatureManagerInfoComponent_SetAffectedTargetsType::InAffectedTargetsType' has a wrong offset!");

// Function FortniteAI.FortCreativeCreatureManagerInfoComponent.SetCreatureBlueprintClass
// 0x0028 (0x0028 - 0x0000)
struct FortCreativeCreatureManagerInfoComponent_SetCreatureBlueprintClass final
{
public:
	TSoftClassPtr<class UClass>                   InCreatureBlueprintClass;                          // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeCreatureManagerInfoComponent_SetCreatureBlueprintClass) == 0x000008, "Wrong alignment on FortCreativeCreatureManagerInfoComponent_SetCreatureBlueprintClass");
static_assert(sizeof(FortCreativeCreatureManagerInfoComponent_SetCreatureBlueprintClass) == 0x000028, "Wrong size on FortCreativeCreatureManagerInfoComponent_SetCreatureBlueprintClass");
static_assert(offsetof(FortCreativeCreatureManagerInfoComponent_SetCreatureBlueprintClass, InCreatureBlueprintClass) == 0x000000, "Member 'FortCreativeCreatureManagerInfoComponent_SetCreatureBlueprintClass::InCreatureBlueprintClass' has a wrong offset!");

// Function FortniteAI.FortCreativeCreatureManagerInfoComponent.SetCreatureManagerComponent
// 0x0008 (0x0008 - 0x0000)
struct FortCreativeCreatureManagerInfoComponent_SetCreatureManagerComponent final
{
public:
	class UFortCreativeCreatureManagerComponent*  InCreatureManagerComponent;                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeCreatureManagerInfoComponent_SetCreatureManagerComponent) == 0x000008, "Wrong alignment on FortCreativeCreatureManagerInfoComponent_SetCreatureManagerComponent");
static_assert(sizeof(FortCreativeCreatureManagerInfoComponent_SetCreatureManagerComponent) == 0x000008, "Wrong size on FortCreativeCreatureManagerInfoComponent_SetCreatureManagerComponent");
static_assert(offsetof(FortCreativeCreatureManagerInfoComponent_SetCreatureManagerComponent, InCreatureManagerComponent) == 0x000000, "Member 'FortCreativeCreatureManagerInfoComponent_SetCreatureManagerComponent::InCreatureManagerComponent' has a wrong offset!");

// Function FortniteAI.FortCreativeCreatureManagerInfoComponent.SetDamageOverrideEffect
// 0x0008 (0x0008 - 0x0000)
struct FortCreativeCreatureManagerInfoComponent_SetDamageOverrideEffect final
{
public:
	TSubclassOf<class UGameplayEffect>            Effect;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeCreatureManagerInfoComponent_SetDamageOverrideEffect) == 0x000008, "Wrong alignment on FortCreativeCreatureManagerInfoComponent_SetDamageOverrideEffect");
static_assert(sizeof(FortCreativeCreatureManagerInfoComponent_SetDamageOverrideEffect) == 0x000008, "Wrong size on FortCreativeCreatureManagerInfoComponent_SetDamageOverrideEffect");
static_assert(offsetof(FortCreativeCreatureManagerInfoComponent_SetDamageOverrideEffect, Effect) == 0x000000, "Member 'FortCreativeCreatureManagerInfoComponent_SetDamageOverrideEffect::Effect' has a wrong offset!");

// Function FortniteAI.FortCreativeCreatureManagerInfoComponent.SetDamageOverrideTag
// 0x0004 (0x0004 - 0x0000)
struct FortCreativeCreatureManagerInfoComponent_SetDamageOverrideTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeCreatureManagerInfoComponent_SetDamageOverrideTag) == 0x000004, "Wrong alignment on FortCreativeCreatureManagerInfoComponent_SetDamageOverrideTag");
static_assert(sizeof(FortCreativeCreatureManagerInfoComponent_SetDamageOverrideTag) == 0x000004, "Wrong size on FortCreativeCreatureManagerInfoComponent_SetDamageOverrideTag");
static_assert(offsetof(FortCreativeCreatureManagerInfoComponent_SetDamageOverrideTag, Tag) == 0x000000, "Member 'FortCreativeCreatureManagerInfoComponent_SetDamageOverrideTag::Tag' has a wrong offset!");

// Function FortniteAI.FortCreativeCreatureManagerInfoComponent.SetEnvironmentalDamageOverride
// 0x0004 (0x0004 - 0x0000)
struct FortCreativeCreatureManagerInfoComponent_SetEnvironmentalDamageOverride final
{
public:
	float                                         InOverrideDamage;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeCreatureManagerInfoComponent_SetEnvironmentalDamageOverride) == 0x000004, "Wrong alignment on FortCreativeCreatureManagerInfoComponent_SetEnvironmentalDamageOverride");
static_assert(sizeof(FortCreativeCreatureManagerInfoComponent_SetEnvironmentalDamageOverride) == 0x000004, "Wrong size on FortCreativeCreatureManagerInfoComponent_SetEnvironmentalDamageOverride");
static_assert(offsetof(FortCreativeCreatureManagerInfoComponent_SetEnvironmentalDamageOverride, InOverrideDamage) == 0x000000, "Member 'FortCreativeCreatureManagerInfoComponent_SetEnvironmentalDamageOverride::InOverrideDamage' has a wrong offset!");

// Function FortniteAI.FortCreativeCreatureManagerInfoComponent.SetEnvironmentalDamageOverrideEffect
// 0x0008 (0x0008 - 0x0000)
struct FortCreativeCreatureManagerInfoComponent_SetEnvironmentalDamageOverrideEffect final
{
public:
	TSubclassOf<class UGameplayEffect>            Effect;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeCreatureManagerInfoComponent_SetEnvironmentalDamageOverrideEffect) == 0x000008, "Wrong alignment on FortCreativeCreatureManagerInfoComponent_SetEnvironmentalDamageOverrideEffect");
static_assert(sizeof(FortCreativeCreatureManagerInfoComponent_SetEnvironmentalDamageOverrideEffect) == 0x000008, "Wrong size on FortCreativeCreatureManagerInfoComponent_SetEnvironmentalDamageOverrideEffect");
static_assert(offsetof(FortCreativeCreatureManagerInfoComponent_SetEnvironmentalDamageOverrideEffect, Effect) == 0x000000, "Member 'FortCreativeCreatureManagerInfoComponent_SetEnvironmentalDamageOverrideEffect::Effect' has a wrong offset!");

// Function FortniteAI.FortCreativeCreatureManagerInfoComponent.SetHearingAggroRange
// 0x0004 (0x0004 - 0x0000)
struct FortCreativeCreatureManagerInfoComponent_SetHearingAggroRange final
{
public:
	float                                         InHearingAggroRange;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeCreatureManagerInfoComponent_SetHearingAggroRange) == 0x000004, "Wrong alignment on FortCreativeCreatureManagerInfoComponent_SetHearingAggroRange");
static_assert(sizeof(FortCreativeCreatureManagerInfoComponent_SetHearingAggroRange) == 0x000004, "Wrong size on FortCreativeCreatureManagerInfoComponent_SetHearingAggroRange");
static_assert(offsetof(FortCreativeCreatureManagerInfoComponent_SetHearingAggroRange, InHearingAggroRange) == 0x000000, "Member 'FortCreativeCreatureManagerInfoComponent_SetHearingAggroRange::InHearingAggroRange' has a wrong offset!");

// Function FortniteAI.FortCreativeCreatureManagerInfoComponent.SetMaxHealth
// 0x0004 (0x0004 - 0x0000)
struct FortCreativeCreatureManagerInfoComponent_SetMaxHealth final
{
public:
	int32                                         InMaxHealth;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeCreatureManagerInfoComponent_SetMaxHealth) == 0x000004, "Wrong alignment on FortCreativeCreatureManagerInfoComponent_SetMaxHealth");
static_assert(sizeof(FortCreativeCreatureManagerInfoComponent_SetMaxHealth) == 0x000004, "Wrong size on FortCreativeCreatureManagerInfoComponent_SetMaxHealth");
static_assert(offsetof(FortCreativeCreatureManagerInfoComponent_SetMaxHealth, InMaxHealth) == 0x000000, "Member 'FortCreativeCreatureManagerInfoComponent_SetMaxHealth::InMaxHealth' has a wrong offset!");

// Function FortniteAI.FortCreativeCreatureManagerInfoComponent.SetMaxHealthOverrideEffect
// 0x0008 (0x0008 - 0x0000)
struct FortCreativeCreatureManagerInfoComponent_SetMaxHealthOverrideEffect final
{
public:
	TSubclassOf<class UGameplayEffect>            Effect;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeCreatureManagerInfoComponent_SetMaxHealthOverrideEffect) == 0x000008, "Wrong alignment on FortCreativeCreatureManagerInfoComponent_SetMaxHealthOverrideEffect");
static_assert(sizeof(FortCreativeCreatureManagerInfoComponent_SetMaxHealthOverrideEffect) == 0x000008, "Wrong size on FortCreativeCreatureManagerInfoComponent_SetMaxHealthOverrideEffect");
static_assert(offsetof(FortCreativeCreatureManagerInfoComponent_SetMaxHealthOverrideEffect, Effect) == 0x000000, "Member 'FortCreativeCreatureManagerInfoComponent_SetMaxHealthOverrideEffect::Effect' has a wrong offset!");

// Function FortniteAI.FortCreativeCreatureManagerInfoComponent.SetMaxHealthOverrideTag
// 0x0004 (0x0004 - 0x0000)
struct FortCreativeCreatureManagerInfoComponent_SetMaxHealthOverrideTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeCreatureManagerInfoComponent_SetMaxHealthOverrideTag) == 0x000004, "Wrong alignment on FortCreativeCreatureManagerInfoComponent_SetMaxHealthOverrideTag");
static_assert(sizeof(FortCreativeCreatureManagerInfoComponent_SetMaxHealthOverrideTag) == 0x000004, "Wrong size on FortCreativeCreatureManagerInfoComponent_SetMaxHealthOverrideTag");
static_assert(offsetof(FortCreativeCreatureManagerInfoComponent_SetMaxHealthOverrideTag, Tag) == 0x000000, "Member 'FortCreativeCreatureManagerInfoComponent_SetMaxHealthOverrideTag::Tag' has a wrong offset!");

// Function FortniteAI.FortCreativeCreatureManagerInfoComponent.SetMovementOverrideTag
// 0x0004 (0x0004 - 0x0000)
struct FortCreativeCreatureManagerInfoComponent_SetMovementOverrideTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeCreatureManagerInfoComponent_SetMovementOverrideTag) == 0x000004, "Wrong alignment on FortCreativeCreatureManagerInfoComponent_SetMovementOverrideTag");
static_assert(sizeof(FortCreativeCreatureManagerInfoComponent_SetMovementOverrideTag) == 0x000004, "Wrong size on FortCreativeCreatureManagerInfoComponent_SetMovementOverrideTag");
static_assert(offsetof(FortCreativeCreatureManagerInfoComponent_SetMovementOverrideTag, Tag) == 0x000000, "Member 'FortCreativeCreatureManagerInfoComponent_SetMovementOverrideTag::Tag' has a wrong offset!");

// Function FortniteAI.FortCreativeCreatureManagerInfoComponent.SetMovementSpeedMultiplier
// 0x0004 (0x0004 - 0x0000)
struct FortCreativeCreatureManagerInfoComponent_SetMovementSpeedMultiplier final
{
public:
	float                                         InOverrideMovementSpeedMultiplier;                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeCreatureManagerInfoComponent_SetMovementSpeedMultiplier) == 0x000004, "Wrong alignment on FortCreativeCreatureManagerInfoComponent_SetMovementSpeedMultiplier");
static_assert(sizeof(FortCreativeCreatureManagerInfoComponent_SetMovementSpeedMultiplier) == 0x000004, "Wrong size on FortCreativeCreatureManagerInfoComponent_SetMovementSpeedMultiplier");
static_assert(offsetof(FortCreativeCreatureManagerInfoComponent_SetMovementSpeedMultiplier, InOverrideMovementSpeedMultiplier) == 0x000000, "Member 'FortCreativeCreatureManagerInfoComponent_SetMovementSpeedMultiplier::InOverrideMovementSpeedMultiplier' has a wrong offset!");

// Function FortniteAI.FortCreativeCreatureManagerInfoComponent.SetMovementSpeedOverrideEffect
// 0x0008 (0x0008 - 0x0000)
struct FortCreativeCreatureManagerInfoComponent_SetMovementSpeedOverrideEffect final
{
public:
	TSubclassOf<class UGameplayEffect>            Effect;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeCreatureManagerInfoComponent_SetMovementSpeedOverrideEffect) == 0x000008, "Wrong alignment on FortCreativeCreatureManagerInfoComponent_SetMovementSpeedOverrideEffect");
static_assert(sizeof(FortCreativeCreatureManagerInfoComponent_SetMovementSpeedOverrideEffect) == 0x000008, "Wrong size on FortCreativeCreatureManagerInfoComponent_SetMovementSpeedOverrideEffect");
static_assert(offsetof(FortCreativeCreatureManagerInfoComponent_SetMovementSpeedOverrideEffect, Effect) == 0x000000, "Member 'FortCreativeCreatureManagerInfoComponent_SetMovementSpeedOverrideEffect::Effect' has a wrong offset!");

// Function FortniteAI.FortCreativeCreatureManagerInfoComponent.SetOverrideDamage
// 0x0004 (0x0004 - 0x0000)
struct FortCreativeCreatureManagerInfoComponent_SetOverrideDamage final
{
public:
	float                                         InOverrideDamage;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeCreatureManagerInfoComponent_SetOverrideDamage) == 0x000004, "Wrong alignment on FortCreativeCreatureManagerInfoComponent_SetOverrideDamage");
static_assert(sizeof(FortCreativeCreatureManagerInfoComponent_SetOverrideDamage) == 0x000004, "Wrong size on FortCreativeCreatureManagerInfoComponent_SetOverrideDamage");
static_assert(offsetof(FortCreativeCreatureManagerInfoComponent_SetOverrideDamage, InOverrideDamage) == 0x000000, "Member 'FortCreativeCreatureManagerInfoComponent_SetOverrideDamage::InOverrideDamage' has a wrong offset!");

// Function FortniteAI.FortCreativeCreatureManagerInfoComponent.SetScoreDistribution
// 0x0001 (0x0001 - 0x0000)
struct FortCreativeCreatureManagerInfoComponent_SetScoreDistribution final
{
public:
	EScoreDistributionType                        InScoreDistribution;                               // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeCreatureManagerInfoComponent_SetScoreDistribution) == 0x000001, "Wrong alignment on FortCreativeCreatureManagerInfoComponent_SetScoreDistribution");
static_assert(sizeof(FortCreativeCreatureManagerInfoComponent_SetScoreDistribution) == 0x000001, "Wrong size on FortCreativeCreatureManagerInfoComponent_SetScoreDistribution");
static_assert(offsetof(FortCreativeCreatureManagerInfoComponent_SetScoreDistribution, InScoreDistribution) == 0x000000, "Member 'FortCreativeCreatureManagerInfoComponent_SetScoreDistribution::InScoreDistribution' has a wrong offset!");

// Function FortniteAI.FortCreativeCreatureManagerInfoComponent.SetScorePoints
// 0x0004 (0x0004 - 0x0000)
struct FortCreativeCreatureManagerInfoComponent_SetScorePoints final
{
public:
	int32                                         InScorePoints;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeCreatureManagerInfoComponent_SetScorePoints) == 0x000004, "Wrong alignment on FortCreativeCreatureManagerInfoComponent_SetScorePoints");
static_assert(sizeof(FortCreativeCreatureManagerInfoComponent_SetScorePoints) == 0x000004, "Wrong size on FortCreativeCreatureManagerInfoComponent_SetScorePoints");
static_assert(offsetof(FortCreativeCreatureManagerInfoComponent_SetScorePoints, InScorePoints) == 0x000000, "Member 'FortCreativeCreatureManagerInfoComponent_SetScorePoints::InScorePoints' has a wrong offset!");

// Function FortniteAI.FortCreativeCreatureManagerInfoComponent.SetWeaponKnockbackImmunity
// 0x0001 (0x0001 - 0x0000)
struct FortCreativeCreatureManagerInfoComponent_SetWeaponKnockbackImmunity final
{
public:
	bool                                          InImmuneToWeaponKnockback;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeCreatureManagerInfoComponent_SetWeaponKnockbackImmunity) == 0x000001, "Wrong alignment on FortCreativeCreatureManagerInfoComponent_SetWeaponKnockbackImmunity");
static_assert(sizeof(FortCreativeCreatureManagerInfoComponent_SetWeaponKnockbackImmunity) == 0x000001, "Wrong size on FortCreativeCreatureManagerInfoComponent_SetWeaponKnockbackImmunity");
static_assert(offsetof(FortCreativeCreatureManagerInfoComponent_SetWeaponKnockbackImmunity, InImmuneToWeaponKnockback) == 0x000000, "Member 'FortCreativeCreatureManagerInfoComponent_SetWeaponKnockbackImmunity::InImmuneToWeaponKnockback' has a wrong offset!");

// Function FortniteAI.FortCreativeCreatureManagerInfoComponent.SetWeaponKnockbackImmunityEffect
// 0x0008 (0x0008 - 0x0000)
struct FortCreativeCreatureManagerInfoComponent_SetWeaponKnockbackImmunityEffect final
{
public:
	TSubclassOf<class UGameplayEffect>            Effect;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeCreatureManagerInfoComponent_SetWeaponKnockbackImmunityEffect) == 0x000008, "Wrong alignment on FortCreativeCreatureManagerInfoComponent_SetWeaponKnockbackImmunityEffect");
static_assert(sizeof(FortCreativeCreatureManagerInfoComponent_SetWeaponKnockbackImmunityEffect) == 0x000008, "Wrong size on FortCreativeCreatureManagerInfoComponent_SetWeaponKnockbackImmunityEffect");
static_assert(offsetof(FortCreativeCreatureManagerInfoComponent_SetWeaponKnockbackImmunityEffect, Effect) == 0x000000, "Member 'FortCreativeCreatureManagerInfoComponent_SetWeaponKnockbackImmunityEffect::Effect' has a wrong offset!");

// Function FortniteAI.FortCreativeCreatureManagerInfoComponent.GetAffectedTargetsType
// 0x0001 (0x0001 - 0x0000)
struct FortCreativeCreatureManagerInfoComponent_GetAffectedTargetsType final
{
public:
	ECreatureManagerAffectedTargets               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeCreatureManagerInfoComponent_GetAffectedTargetsType) == 0x000001, "Wrong alignment on FortCreativeCreatureManagerInfoComponent_GetAffectedTargetsType");
static_assert(sizeof(FortCreativeCreatureManagerInfoComponent_GetAffectedTargetsType) == 0x000001, "Wrong size on FortCreativeCreatureManagerInfoComponent_GetAffectedTargetsType");
static_assert(offsetof(FortCreativeCreatureManagerInfoComponent_GetAffectedTargetsType, ReturnValue) == 0x000000, "Member 'FortCreativeCreatureManagerInfoComponent_GetAffectedTargetsType::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortCreativeCreatureManagerInfoComponent.GetCreatureBlueprintClass
// 0x0028 (0x0028 - 0x0000)
struct FortCreativeCreatureManagerInfoComponent_GetCreatureBlueprintClass final
{
public:
	TSoftClassPtr<class UClass>                   ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeCreatureManagerInfoComponent_GetCreatureBlueprintClass) == 0x000008, "Wrong alignment on FortCreativeCreatureManagerInfoComponent_GetCreatureBlueprintClass");
static_assert(sizeof(FortCreativeCreatureManagerInfoComponent_GetCreatureBlueprintClass) == 0x000028, "Wrong size on FortCreativeCreatureManagerInfoComponent_GetCreatureBlueprintClass");
static_assert(offsetof(FortCreativeCreatureManagerInfoComponent_GetCreatureBlueprintClass, ReturnValue) == 0x000000, "Member 'FortCreativeCreatureManagerInfoComponent_GetCreatureBlueprintClass::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortCreativeCreatureManagerInfoComponent.GetEnvironmentalDamageOverride
// 0x0004 (0x0004 - 0x0000)
struct FortCreativeCreatureManagerInfoComponent_GetEnvironmentalDamageOverride final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeCreatureManagerInfoComponent_GetEnvironmentalDamageOverride) == 0x000004, "Wrong alignment on FortCreativeCreatureManagerInfoComponent_GetEnvironmentalDamageOverride");
static_assert(sizeof(FortCreativeCreatureManagerInfoComponent_GetEnvironmentalDamageOverride) == 0x000004, "Wrong size on FortCreativeCreatureManagerInfoComponent_GetEnvironmentalDamageOverride");
static_assert(offsetof(FortCreativeCreatureManagerInfoComponent_GetEnvironmentalDamageOverride, ReturnValue) == 0x000000, "Member 'FortCreativeCreatureManagerInfoComponent_GetEnvironmentalDamageOverride::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortCreativeCreatureManagerInfoComponent.GetHearingAggroRange
// 0x0004 (0x0004 - 0x0000)
struct FortCreativeCreatureManagerInfoComponent_GetHearingAggroRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeCreatureManagerInfoComponent_GetHearingAggroRange) == 0x000004, "Wrong alignment on FortCreativeCreatureManagerInfoComponent_GetHearingAggroRange");
static_assert(sizeof(FortCreativeCreatureManagerInfoComponent_GetHearingAggroRange) == 0x000004, "Wrong size on FortCreativeCreatureManagerInfoComponent_GetHearingAggroRange");
static_assert(offsetof(FortCreativeCreatureManagerInfoComponent_GetHearingAggroRange, ReturnValue) == 0x000000, "Member 'FortCreativeCreatureManagerInfoComponent_GetHearingAggroRange::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortCreativeCreatureManagerInfoComponent.GetMaxHealth
// 0x0004 (0x0004 - 0x0000)
struct FortCreativeCreatureManagerInfoComponent_GetMaxHealth final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeCreatureManagerInfoComponent_GetMaxHealth) == 0x000004, "Wrong alignment on FortCreativeCreatureManagerInfoComponent_GetMaxHealth");
static_assert(sizeof(FortCreativeCreatureManagerInfoComponent_GetMaxHealth) == 0x000004, "Wrong size on FortCreativeCreatureManagerInfoComponent_GetMaxHealth");
static_assert(offsetof(FortCreativeCreatureManagerInfoComponent_GetMaxHealth, ReturnValue) == 0x000000, "Member 'FortCreativeCreatureManagerInfoComponent_GetMaxHealth::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortCreativeCreatureManagerInfoComponent.GetMovementSpeedMultiplier
// 0x0004 (0x0004 - 0x0000)
struct FortCreativeCreatureManagerInfoComponent_GetMovementSpeedMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeCreatureManagerInfoComponent_GetMovementSpeedMultiplier) == 0x000004, "Wrong alignment on FortCreativeCreatureManagerInfoComponent_GetMovementSpeedMultiplier");
static_assert(sizeof(FortCreativeCreatureManagerInfoComponent_GetMovementSpeedMultiplier) == 0x000004, "Wrong size on FortCreativeCreatureManagerInfoComponent_GetMovementSpeedMultiplier");
static_assert(offsetof(FortCreativeCreatureManagerInfoComponent_GetMovementSpeedMultiplier, ReturnValue) == 0x000000, "Member 'FortCreativeCreatureManagerInfoComponent_GetMovementSpeedMultiplier::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortCreativeCreatureManagerInfoComponent.GetOverrideDamage
// 0x0004 (0x0004 - 0x0000)
struct FortCreativeCreatureManagerInfoComponent_GetOverrideDamage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeCreatureManagerInfoComponent_GetOverrideDamage) == 0x000004, "Wrong alignment on FortCreativeCreatureManagerInfoComponent_GetOverrideDamage");
static_assert(sizeof(FortCreativeCreatureManagerInfoComponent_GetOverrideDamage) == 0x000004, "Wrong size on FortCreativeCreatureManagerInfoComponent_GetOverrideDamage");
static_assert(offsetof(FortCreativeCreatureManagerInfoComponent_GetOverrideDamage, ReturnValue) == 0x000000, "Member 'FortCreativeCreatureManagerInfoComponent_GetOverrideDamage::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortCreativeCreatureManagerInfoComponent.GetScoreDistribution
// 0x0001 (0x0001 - 0x0000)
struct FortCreativeCreatureManagerInfoComponent_GetScoreDistribution final
{
public:
	EScoreDistributionType                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeCreatureManagerInfoComponent_GetScoreDistribution) == 0x000001, "Wrong alignment on FortCreativeCreatureManagerInfoComponent_GetScoreDistribution");
static_assert(sizeof(FortCreativeCreatureManagerInfoComponent_GetScoreDistribution) == 0x000001, "Wrong size on FortCreativeCreatureManagerInfoComponent_GetScoreDistribution");
static_assert(offsetof(FortCreativeCreatureManagerInfoComponent_GetScoreDistribution, ReturnValue) == 0x000000, "Member 'FortCreativeCreatureManagerInfoComponent_GetScoreDistribution::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortCreativeCreatureManagerInfoComponent.GetScorePoints
// 0x0004 (0x0004 - 0x0000)
struct FortCreativeCreatureManagerInfoComponent_GetScorePoints final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeCreatureManagerInfoComponent_GetScorePoints) == 0x000004, "Wrong alignment on FortCreativeCreatureManagerInfoComponent_GetScorePoints");
static_assert(sizeof(FortCreativeCreatureManagerInfoComponent_GetScorePoints) == 0x000004, "Wrong size on FortCreativeCreatureManagerInfoComponent_GetScorePoints");
static_assert(offsetof(FortCreativeCreatureManagerInfoComponent_GetScorePoints, ReturnValue) == 0x000000, "Member 'FortCreativeCreatureManagerInfoComponent_GetScorePoints::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortCreativeCreatureManagerInfoComponent.GetWeaponKnockbackImmunity
// 0x0001 (0x0001 - 0x0000)
struct FortCreativeCreatureManagerInfoComponent_GetWeaponKnockbackImmunity final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeCreatureManagerInfoComponent_GetWeaponKnockbackImmunity) == 0x000001, "Wrong alignment on FortCreativeCreatureManagerInfoComponent_GetWeaponKnockbackImmunity");
static_assert(sizeof(FortCreativeCreatureManagerInfoComponent_GetWeaponKnockbackImmunity) == 0x000001, "Wrong size on FortCreativeCreatureManagerInfoComponent_GetWeaponKnockbackImmunity");
static_assert(offsetof(FortCreativeCreatureManagerInfoComponent_GetWeaponKnockbackImmunity, ReturnValue) == 0x000000, "Member 'FortCreativeCreatureManagerInfoComponent_GetWeaponKnockbackImmunity::ReturnValue' has a wrong offset!");

// Function FortniteAI.AthenaAIDirector.AggroOnActor
// 0x0010 (0x0010 - 0x0000)
struct AthenaAIDirector_AggroOnActor final
{
public:
	const class AAthenaAIController*              AIController;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAIDirector_AggroOnActor) == 0x000008, "Wrong alignment on AthenaAIDirector_AggroOnActor");
static_assert(sizeof(AthenaAIDirector_AggroOnActor) == 0x000010, "Wrong size on AthenaAIDirector_AggroOnActor");
static_assert(offsetof(AthenaAIDirector_AggroOnActor, AIController) == 0x000000, "Member 'AthenaAIDirector_AggroOnActor::AIController' has a wrong offset!");
static_assert(offsetof(AthenaAIDirector_AggroOnActor, Target) == 0x000008, "Member 'AthenaAIDirector_AggroOnActor::Target' has a wrong offset!");

// Function FortniteAI.FortCreativeCreatureManagerComponent.OnAIPawnDied
// 0x0060 (0x0060 - 0x0000)
struct FortCreativeCreatureManagerComponent_OnAIPawnDied final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeCreatureManagerComponent_OnAIPawnDied) == 0x000008, "Wrong alignment on FortCreativeCreatureManagerComponent_OnAIPawnDied");
static_assert(sizeof(FortCreativeCreatureManagerComponent_OnAIPawnDied) == 0x000060, "Wrong size on FortCreativeCreatureManagerComponent_OnAIPawnDied");
static_assert(offsetof(FortCreativeCreatureManagerComponent_OnAIPawnDied, DamagedActor) == 0x000000, "Member 'FortCreativeCreatureManagerComponent_OnAIPawnDied::DamagedActor' has a wrong offset!");
static_assert(offsetof(FortCreativeCreatureManagerComponent_OnAIPawnDied, Damage) == 0x000008, "Member 'FortCreativeCreatureManagerComponent_OnAIPawnDied::Damage' has a wrong offset!");
static_assert(offsetof(FortCreativeCreatureManagerComponent_OnAIPawnDied, InstigatedBy) == 0x000010, "Member 'FortCreativeCreatureManagerComponent_OnAIPawnDied::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortCreativeCreatureManagerComponent_OnAIPawnDied, DamageCauser) == 0x000018, "Member 'FortCreativeCreatureManagerComponent_OnAIPawnDied::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortCreativeCreatureManagerComponent_OnAIPawnDied, HitLocation) == 0x000020, "Member 'FortCreativeCreatureManagerComponent_OnAIPawnDied::HitLocation' has a wrong offset!");
static_assert(offsetof(FortCreativeCreatureManagerComponent_OnAIPawnDied, FHitComponent) == 0x000038, "Member 'FortCreativeCreatureManagerComponent_OnAIPawnDied::FHitComponent' has a wrong offset!");
static_assert(offsetof(FortCreativeCreatureManagerComponent_OnAIPawnDied, BoneName) == 0x000040, "Member 'FortCreativeCreatureManagerComponent_OnAIPawnDied::BoneName' has a wrong offset!");
static_assert(offsetof(FortCreativeCreatureManagerComponent_OnAIPawnDied, Momentum) == 0x000048, "Member 'FortCreativeCreatureManagerComponent_OnAIPawnDied::Momentum' has a wrong offset!");

// Function FortniteAI.FortCreativeCreatureManagerComponent.OnInfoComponentAdded
// 0x0008 (0x0008 - 0x0000)
struct FortCreativeCreatureManagerComponent_OnInfoComponentAdded final
{
public:
	class UFortCreativeCreatureManagerInfoComponent* CreatureManagerInfoComponent;                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeCreatureManagerComponent_OnInfoComponentAdded) == 0x000008, "Wrong alignment on FortCreativeCreatureManagerComponent_OnInfoComponentAdded");
static_assert(sizeof(FortCreativeCreatureManagerComponent_OnInfoComponentAdded) == 0x000008, "Wrong size on FortCreativeCreatureManagerComponent_OnInfoComponentAdded");
static_assert(offsetof(FortCreativeCreatureManagerComponent_OnInfoComponentAdded, CreatureManagerInfoComponent) == 0x000000, "Member 'FortCreativeCreatureManagerComponent_OnInfoComponentAdded::CreatureManagerInfoComponent' has a wrong offset!");

// Function FortniteAI.FortCreativeCreatureManagerComponent.OnInfoComponentRemoved
// 0x0008 (0x0008 - 0x0000)
struct FortCreativeCreatureManagerComponent_OnInfoComponentRemoved final
{
public:
	class UFortCreativeCreatureManagerInfoComponent* CreatureManagerInfoComponent;                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCreativeCreatureManagerComponent_OnInfoComponentRemoved) == 0x000008, "Wrong alignment on FortCreativeCreatureManagerComponent_OnInfoComponentRemoved");
static_assert(sizeof(FortCreativeCreatureManagerComponent_OnInfoComponentRemoved) == 0x000008, "Wrong size on FortCreativeCreatureManagerComponent_OnInfoComponentRemoved");
static_assert(offsetof(FortCreativeCreatureManagerComponent_OnInfoComponentRemoved, CreatureManagerInfoComponent) == 0x000000, "Member 'FortCreativeCreatureManagerComponent_OnInfoComponentRemoved::CreatureManagerInfoComponent' has a wrong offset!");

// Function FortniteAI.AthenaAIServiceCover.GetAthenaAIServiceCover
// 0x0010 (0x0010 - 0x0000)
struct AthenaAIServiceCover_GetAthenaAIServiceCover final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAthenaAIServiceCover*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAIServiceCover_GetAthenaAIServiceCover) == 0x000008, "Wrong alignment on AthenaAIServiceCover_GetAthenaAIServiceCover");
static_assert(sizeof(AthenaAIServiceCover_GetAthenaAIServiceCover) == 0x000010, "Wrong size on AthenaAIServiceCover_GetAthenaAIServiceCover");
static_assert(offsetof(AthenaAIServiceCover_GetAthenaAIServiceCover, WorldContextObject) == 0x000000, "Member 'AthenaAIServiceCover_GetAthenaAIServiceCover::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AthenaAIServiceCover_GetAthenaAIServiceCover, ReturnValue) == 0x000008, "Member 'AthenaAIServiceCover_GetAthenaAIServiceCover::ReturnValue' has a wrong offset!");

// Function FortniteAI.AthenaAIServicePlayerBots.IsWeaponSupported
// 0x0010 (0x0010 - 0x0000)
struct AthenaAIServicePlayerBots_IsWeaponSupported final
{
public:
	class AFortWeapon*                            FortWeapon;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaAIServicePlayerBots_IsWeaponSupported) == 0x000008, "Wrong alignment on AthenaAIServicePlayerBots_IsWeaponSupported");
static_assert(sizeof(AthenaAIServicePlayerBots_IsWeaponSupported) == 0x000010, "Wrong size on AthenaAIServicePlayerBots_IsWeaponSupported");
static_assert(offsetof(AthenaAIServicePlayerBots_IsWeaponSupported, FortWeapon) == 0x000000, "Member 'AthenaAIServicePlayerBots_IsWeaponSupported::FortWeapon' has a wrong offset!");
static_assert(offsetof(AthenaAIServicePlayerBots_IsWeaponSupported, ReturnValue) == 0x000008, "Member 'AthenaAIServicePlayerBots_IsWeaponSupported::ReturnValue' has a wrong offset!");

// Function FortniteAI.AthenaAIServicePlayerBots.JoinTeam
// 0x0010 (0x0010 - 0x0000)
struct AthenaAIServicePlayerBots_JoinTeam final
{
public:
	const class AController*                      SourceTeamController;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            DestinationTeamController;                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAIServicePlayerBots_JoinTeam) == 0x000008, "Wrong alignment on AthenaAIServicePlayerBots_JoinTeam");
static_assert(sizeof(AthenaAIServicePlayerBots_JoinTeam) == 0x000010, "Wrong size on AthenaAIServicePlayerBots_JoinTeam");
static_assert(offsetof(AthenaAIServicePlayerBots_JoinTeam, SourceTeamController) == 0x000000, "Member 'AthenaAIServicePlayerBots_JoinTeam::SourceTeamController' has a wrong offset!");
static_assert(offsetof(AthenaAIServicePlayerBots_JoinTeam, DestinationTeamController) == 0x000008, "Member 'AthenaAIServicePlayerBots_JoinTeam::DestinationTeamController' has a wrong offset!");

// Function FortniteAI.AthenaAIServicePlayerBots.KillBots
// 0x0010 (0x0010 - 0x0000)
struct AthenaAIServicePlayerBots_KillBots final
{
public:
	bool                                          bKillPlayers;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKillNoneParticipants;                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TeamIndex;                                         // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 BotOwner;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAIServicePlayerBots_KillBots) == 0x000008, "Wrong alignment on AthenaAIServicePlayerBots_KillBots");
static_assert(sizeof(AthenaAIServicePlayerBots_KillBots) == 0x000010, "Wrong size on AthenaAIServicePlayerBots_KillBots");
static_assert(offsetof(AthenaAIServicePlayerBots_KillBots, bKillPlayers) == 0x000000, "Member 'AthenaAIServicePlayerBots_KillBots::bKillPlayers' has a wrong offset!");
static_assert(offsetof(AthenaAIServicePlayerBots_KillBots, bKillNoneParticipants) == 0x000001, "Member 'AthenaAIServicePlayerBots_KillBots::bKillNoneParticipants' has a wrong offset!");
static_assert(offsetof(AthenaAIServicePlayerBots_KillBots, TeamIndex) == 0x000002, "Member 'AthenaAIServicePlayerBots_KillBots::TeamIndex' has a wrong offset!");
static_assert(offsetof(AthenaAIServicePlayerBots_KillBots, BotOwner) == 0x000008, "Member 'AthenaAIServicePlayerBots_KillBots::BotOwner' has a wrong offset!");

// Function FortniteAI.AthenaAIServicePlayerBots.OnAgentGameOver
// 0x0018 (0x0018 - 0x0000)
struct AthenaAIServicePlayerBots_OnAgentGameOver final
{
public:
	class AFortAthenaAIBotController*             AIBotController;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPawn*                              Pawn;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            Instigator;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAIServicePlayerBots_OnAgentGameOver) == 0x000008, "Wrong alignment on AthenaAIServicePlayerBots_OnAgentGameOver");
static_assert(sizeof(AthenaAIServicePlayerBots_OnAgentGameOver) == 0x000018, "Wrong size on AthenaAIServicePlayerBots_OnAgentGameOver");
static_assert(offsetof(AthenaAIServicePlayerBots_OnAgentGameOver, AIBotController) == 0x000000, "Member 'AthenaAIServicePlayerBots_OnAgentGameOver::AIBotController' has a wrong offset!");
static_assert(offsetof(AthenaAIServicePlayerBots_OnAgentGameOver, Pawn) == 0x000008, "Member 'AthenaAIServicePlayerBots_OnAgentGameOver::Pawn' has a wrong offset!");
static_assert(offsetof(AthenaAIServicePlayerBots_OnAgentGameOver, Instigator) == 0x000010, "Member 'AthenaAIServicePlayerBots_OnAgentGameOver::Instigator' has a wrong offset!");

// Function FortniteAI.AthenaAIServicePlayerBots.OnGamePhaseChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaAIServicePlayerBots_OnGamePhaseChanged final
{
public:
	EAthenaGamePhase                              NewPhase;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAIServicePlayerBots_OnGamePhaseChanged) == 0x000001, "Wrong alignment on AthenaAIServicePlayerBots_OnGamePhaseChanged");
static_assert(sizeof(AthenaAIServicePlayerBots_OnGamePhaseChanged) == 0x000001, "Wrong size on AthenaAIServicePlayerBots_OnGamePhaseChanged");
static_assert(offsetof(AthenaAIServicePlayerBots_OnGamePhaseChanged, NewPhase) == 0x000000, "Member 'AthenaAIServicePlayerBots_OnGamePhaseChanged::NewPhase' has a wrong offset!");

// Function FortniteAI.AthenaAIServicePlayerBots.OnPawnSpawned
// 0x0010 (0x0010 - 0x0000)
struct AthenaAIServicePlayerBots_OnPawnSpawned final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestId;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRespawn;                                        // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaAIServicePlayerBots_OnPawnSpawned) == 0x000008, "Wrong alignment on AthenaAIServicePlayerBots_OnPawnSpawned");
static_assert(sizeof(AthenaAIServicePlayerBots_OnPawnSpawned) == 0x000010, "Wrong size on AthenaAIServicePlayerBots_OnPawnSpawned");
static_assert(offsetof(AthenaAIServicePlayerBots_OnPawnSpawned, Pawn) == 0x000000, "Member 'AthenaAIServicePlayerBots_OnPawnSpawned::Pawn' has a wrong offset!");
static_assert(offsetof(AthenaAIServicePlayerBots_OnPawnSpawned, RequestId) == 0x000008, "Member 'AthenaAIServicePlayerBots_OnPawnSpawned::RequestId' has a wrong offset!");
static_assert(offsetof(AthenaAIServicePlayerBots_OnPawnSpawned, bIsRespawn) == 0x00000C, "Member 'AthenaAIServicePlayerBots_OnPawnSpawned::bIsRespawn' has a wrong offset!");

// Function FortniteAI.AthenaAIServicePlayerBots.OnServerGameMemberRemoved
// 0x0010 (0x0010 - 0x0000)
struct AthenaAIServicePlayerBots_OnServerGameMemberRemoved final
{
public:
	uint8                                         InSquadId;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InTeamIndex;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerStateAthena*                 ChangedPS;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAIServicePlayerBots_OnServerGameMemberRemoved) == 0x000008, "Wrong alignment on AthenaAIServicePlayerBots_OnServerGameMemberRemoved");
static_assert(sizeof(AthenaAIServicePlayerBots_OnServerGameMemberRemoved) == 0x000010, "Wrong size on AthenaAIServicePlayerBots_OnServerGameMemberRemoved");
static_assert(offsetof(AthenaAIServicePlayerBots_OnServerGameMemberRemoved, InSquadId) == 0x000000, "Member 'AthenaAIServicePlayerBots_OnServerGameMemberRemoved::InSquadId' has a wrong offset!");
static_assert(offsetof(AthenaAIServicePlayerBots_OnServerGameMemberRemoved, InTeamIndex) == 0x000001, "Member 'AthenaAIServicePlayerBots_OnServerGameMemberRemoved::InTeamIndex' has a wrong offset!");
static_assert(offsetof(AthenaAIServicePlayerBots_OnServerGameMemberRemoved, ChangedPS) == 0x000008, "Member 'AthenaAIServicePlayerBots_OnServerGameMemberRemoved::ChangedPS' has a wrong offset!");

// Function FortniteAI.AthenaAIServicePlayerBots.SpawnAI
// 0x0040 (0x0040 - 0x0000)
struct AthenaAIServicePlayerBots_SpawnAI final
{
public:
	struct FVector                                InSpawnLocation;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InSpawnRotation;                                   // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	const class UFortAthenaAISpawnerDataComponentList* AISpawnerComponentList;                            // 0x0030(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAIServicePlayerBots_SpawnAI) == 0x000008, "Wrong alignment on AthenaAIServicePlayerBots_SpawnAI");
static_assert(sizeof(AthenaAIServicePlayerBots_SpawnAI) == 0x000040, "Wrong size on AthenaAIServicePlayerBots_SpawnAI");
static_assert(offsetof(AthenaAIServicePlayerBots_SpawnAI, InSpawnLocation) == 0x000000, "Member 'AthenaAIServicePlayerBots_SpawnAI::InSpawnLocation' has a wrong offset!");
static_assert(offsetof(AthenaAIServicePlayerBots_SpawnAI, InSpawnRotation) == 0x000018, "Member 'AthenaAIServicePlayerBots_SpawnAI::InSpawnRotation' has a wrong offset!");
static_assert(offsetof(AthenaAIServicePlayerBots_SpawnAI, AISpawnerComponentList) == 0x000030, "Member 'AthenaAIServicePlayerBots_SpawnAI::AISpawnerComponentList' has a wrong offset!");
static_assert(offsetof(AthenaAIServicePlayerBots_SpawnAI, ReturnValue) == 0x000038, "Member 'AthenaAIServicePlayerBots_SpawnAI::ReturnValue' has a wrong offset!");

// Function FortniteAI.AthenaAIServiceCreativePlayerBots.AddHiringHistory
// 0x0010 (0x0010 - 0x0000)
struct AthenaAIServiceCreativePlayerBots_AddHiringHistory final
{
public:
	class AActor*                                 HiredOwner;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      HiringPlayer;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAIServiceCreativePlayerBots_AddHiringHistory) == 0x000008, "Wrong alignment on AthenaAIServiceCreativePlayerBots_AddHiringHistory");
static_assert(sizeof(AthenaAIServiceCreativePlayerBots_AddHiringHistory) == 0x000010, "Wrong size on AthenaAIServiceCreativePlayerBots_AddHiringHistory");
static_assert(offsetof(AthenaAIServiceCreativePlayerBots_AddHiringHistory, HiredOwner) == 0x000000, "Member 'AthenaAIServiceCreativePlayerBots_AddHiringHistory::HiredOwner' has a wrong offset!");
static_assert(offsetof(AthenaAIServiceCreativePlayerBots_AddHiringHistory, HiringPlayer) == 0x000008, "Member 'AthenaAIServiceCreativePlayerBots_AddHiringHistory::HiringPlayer' has a wrong offset!");

// Function FortniteAI.AthenaAIServiceCreativePlayerBots.ClearHiringHistory
// 0x0008 (0x0008 - 0x0000)
struct AthenaAIServiceCreativePlayerBots_ClearHiringHistory final
{
public:
	class AActor*                                 HiredOwner;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAIServiceCreativePlayerBots_ClearHiringHistory) == 0x000008, "Wrong alignment on AthenaAIServiceCreativePlayerBots_ClearHiringHistory");
static_assert(sizeof(AthenaAIServiceCreativePlayerBots_ClearHiringHistory) == 0x000008, "Wrong size on AthenaAIServiceCreativePlayerBots_ClearHiringHistory");
static_assert(offsetof(AthenaAIServiceCreativePlayerBots_ClearHiringHistory, HiredOwner) == 0x000000, "Member 'AthenaAIServiceCreativePlayerBots_ClearHiringHistory::HiredOwner' has a wrong offset!");

// Function FortniteAI.AthenaAIServiceCreativePlayerBots.GetLastHiringPlayer
// 0x0010 (0x0010 - 0x0000)
struct AthenaAIServiceCreativePlayerBots_GetLastHiringPlayer final
{
public:
	const class AActor*                           HiredOwner;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class APlayerController*                ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAIServiceCreativePlayerBots_GetLastHiringPlayer) == 0x000008, "Wrong alignment on AthenaAIServiceCreativePlayerBots_GetLastHiringPlayer");
static_assert(sizeof(AthenaAIServiceCreativePlayerBots_GetLastHiringPlayer) == 0x000010, "Wrong size on AthenaAIServiceCreativePlayerBots_GetLastHiringPlayer");
static_assert(offsetof(AthenaAIServiceCreativePlayerBots_GetLastHiringPlayer, HiredOwner) == 0x000000, "Member 'AthenaAIServiceCreativePlayerBots_GetLastHiringPlayer::HiredOwner' has a wrong offset!");
static_assert(offsetof(AthenaAIServiceCreativePlayerBots_GetLastHiringPlayer, ReturnValue) == 0x000008, "Member 'AthenaAIServiceCreativePlayerBots_GetLastHiringPlayer::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_SkillsetBase.GetSkill
// 0x0004 (0x0004 - 0x0000)
struct FortAthenaAISpawnerDataComponent_SkillsetBase_GetSkill final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_SkillsetBase_GetSkill) == 0x000004, "Wrong alignment on FortAthenaAISpawnerDataComponent_SkillsetBase_GetSkill");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_SkillsetBase_GetSkill) == 0x000004, "Wrong size on FortAthenaAISpawnerDataComponent_SkillsetBase_GetSkill");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_SkillsetBase_GetSkill, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_SkillsetBase_GetSkill::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_SkillsetBase.GetSkillSets
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaAISpawnerDataComponent_SkillsetBase_GetSkillSets final
{
public:
	TArray<TSubclassOf<class UFortAthenaAIBotSkillSet>> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_SkillsetBase_GetSkillSets) == 0x000008, "Wrong alignment on FortAthenaAISpawnerDataComponent_SkillsetBase_GetSkillSets");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_SkillsetBase_GetSkillSets) == 0x000010, "Wrong size on FortAthenaAISpawnerDataComponent_SkillsetBase_GetSkillSets");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_SkillsetBase_GetSkillSets, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_SkillsetBase_GetSkillSets::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_SkillsetBase.ShouldUseMatchMMRToOverrideSkillLevel
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaAISpawnerDataComponent_SkillsetBase_ShouldUseMatchMMRToOverrideSkillLevel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_SkillsetBase_ShouldUseMatchMMRToOverrideSkillLevel) == 0x000001, "Wrong alignment on FortAthenaAISpawnerDataComponent_SkillsetBase_ShouldUseMatchMMRToOverrideSkillLevel");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_SkillsetBase_ShouldUseMatchMMRToOverrideSkillLevel) == 0x000001, "Wrong size on FortAthenaAISpawnerDataComponent_SkillsetBase_ShouldUseMatchMMRToOverrideSkillLevel");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_SkillsetBase_ShouldUseMatchMMRToOverrideSkillLevel, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_SkillsetBase_ShouldUseMatchMMRToOverrideSkillLevel::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_AIBotSkillset.SetSkill
// 0x0004 (0x0004 - 0x0000)
struct FortAthenaAISpawnerDataComponent_AIBotSkillset_SetSkill final
{
public:
	float                                         InSKill;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_AIBotSkillset_SetSkill) == 0x000004, "Wrong alignment on FortAthenaAISpawnerDataComponent_AIBotSkillset_SetSkill");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_AIBotSkillset_SetSkill) == 0x000004, "Wrong size on FortAthenaAISpawnerDataComponent_AIBotSkillset_SetSkill");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_AIBotSkillset_SetSkill, InSKill) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_AIBotSkillset_SetSkill::InSKill' has a wrong offset!");

// Function FortniteAI.AthenaAIServiceLOFOccluder.GetAthenaAIServiceLOFOccluder
// 0x0010 (0x0010 - 0x0000)
struct AthenaAIServiceLOFOccluder_GetAthenaAIServiceLOFOccluder final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAthenaAIServiceLOFOccluder*            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAIServiceLOFOccluder_GetAthenaAIServiceLOFOccluder) == 0x000008, "Wrong alignment on AthenaAIServiceLOFOccluder_GetAthenaAIServiceLOFOccluder");
static_assert(sizeof(AthenaAIServiceLOFOccluder_GetAthenaAIServiceLOFOccluder) == 0x000010, "Wrong size on AthenaAIServiceLOFOccluder_GetAthenaAIServiceLOFOccluder");
static_assert(offsetof(AthenaAIServiceLOFOccluder_GetAthenaAIServiceLOFOccluder, WorldContextObject) == 0x000000, "Member 'AthenaAIServiceLOFOccluder_GetAthenaAIServiceLOFOccluder::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AthenaAIServiceLOFOccluder_GetAthenaAIServiceLOFOccluder, ReturnValue) == 0x000008, "Member 'AthenaAIServiceLOFOccluder_GetAthenaAIServiceLOFOccluder::ReturnValue' has a wrong offset!");

// Function FortniteAI.AthenaAIServiceLOFOccluder.RegisterOccluder
// 0x0010 (0x0010 - 0x0000)
struct AthenaAIServiceLOFOccluder_RegisterOccluder final
{
public:
	class AActor*                                 OccluderActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadius;                                      // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaAIServiceLOFOccluder_RegisterOccluder) == 0x000008, "Wrong alignment on AthenaAIServiceLOFOccluder_RegisterOccluder");
static_assert(sizeof(AthenaAIServiceLOFOccluder_RegisterOccluder) == 0x000010, "Wrong size on AthenaAIServiceLOFOccluder_RegisterOccluder");
static_assert(offsetof(AthenaAIServiceLOFOccluder_RegisterOccluder, OccluderActor) == 0x000000, "Member 'AthenaAIServiceLOFOccluder_RegisterOccluder::OccluderActor' has a wrong offset!");
static_assert(offsetof(AthenaAIServiceLOFOccluder_RegisterOccluder, SphereRadius) == 0x000008, "Member 'AthenaAIServiceLOFOccluder_RegisterOccluder::SphereRadius' has a wrong offset!");

// Function FortniteAI.AthenaAIServiceLOFOccluder.UnregisterOccluder
// 0x0008 (0x0008 - 0x0000)
struct AthenaAIServiceLOFOccluder_UnregisterOccluder final
{
public:
	class AActor*                                 OccluderActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAIServiceLOFOccluder_UnregisterOccluder) == 0x000008, "Wrong alignment on AthenaAIServiceLOFOccluder_UnregisterOccluder");
static_assert(sizeof(AthenaAIServiceLOFOccluder_UnregisterOccluder) == 0x000008, "Wrong size on AthenaAIServiceLOFOccluder_UnregisterOccluder");
static_assert(offsetof(AthenaAIServiceLOFOccluder_UnregisterOccluder, OccluderActor) == 0x000000, "Member 'AthenaAIServiceLOFOccluder_UnregisterOccluder::OccluderActor' has a wrong offset!");

// Function FortniteAI.AthenaAIServiceLOFOccluder.IsLOFOccluded
// 0x0038 (0x0038 - 0x0000)
struct AthenaAIServiceLOFOccluder_IsLOFOccluded final
{
public:
	struct FVector                                StartLocation;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndLocation;                                       // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaAIServiceLOFOccluder_IsLOFOccluded) == 0x000008, "Wrong alignment on AthenaAIServiceLOFOccluder_IsLOFOccluded");
static_assert(sizeof(AthenaAIServiceLOFOccluder_IsLOFOccluded) == 0x000038, "Wrong size on AthenaAIServiceLOFOccluder_IsLOFOccluded");
static_assert(offsetof(AthenaAIServiceLOFOccluder_IsLOFOccluded, StartLocation) == 0x000000, "Member 'AthenaAIServiceLOFOccluder_IsLOFOccluded::StartLocation' has a wrong offset!");
static_assert(offsetof(AthenaAIServiceLOFOccluder_IsLOFOccluded, EndLocation) == 0x000018, "Member 'AthenaAIServiceLOFOccluder_IsLOFOccluded::EndLocation' has a wrong offset!");
static_assert(offsetof(AthenaAIServiceLOFOccluder_IsLOFOccluded, ReturnValue) == 0x000030, "Member 'AthenaAIServiceLOFOccluder_IsLOFOccluded::ReturnValue' has a wrong offset!");

// Function FortniteAI.AthenaAIServiceLoot.K2_AddGameplayTagToLoot
// 0x0010 (0x0010 - 0x0000)
struct AthenaAIServiceLoot_K2_AddGameplayTagToLoot final
{
public:
	const class AActor*                           LootActor;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayTag;                                       // 0x0008(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaAIServiceLoot_K2_AddGameplayTagToLoot) == 0x000008, "Wrong alignment on AthenaAIServiceLoot_K2_AddGameplayTagToLoot");
static_assert(sizeof(AthenaAIServiceLoot_K2_AddGameplayTagToLoot) == 0x000010, "Wrong size on AthenaAIServiceLoot_K2_AddGameplayTagToLoot");
static_assert(offsetof(AthenaAIServiceLoot_K2_AddGameplayTagToLoot, LootActor) == 0x000000, "Member 'AthenaAIServiceLoot_K2_AddGameplayTagToLoot::LootActor' has a wrong offset!");
static_assert(offsetof(AthenaAIServiceLoot_K2_AddGameplayTagToLoot, GameplayTag) == 0x000008, "Member 'AthenaAIServiceLoot_K2_AddGameplayTagToLoot::GameplayTag' has a wrong offset!");

// Function FortniteAI.AthenaAIServiceLoot.K2_RemoveGameplayTagFromLoot
// 0x0010 (0x0010 - 0x0000)
struct AthenaAIServiceLoot_K2_RemoveGameplayTagFromLoot final
{
public:
	const class AActor*                           LootActor;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayTag;                                       // 0x0008(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaAIServiceLoot_K2_RemoveGameplayTagFromLoot) == 0x000008, "Wrong alignment on AthenaAIServiceLoot_K2_RemoveGameplayTagFromLoot");
static_assert(sizeof(AthenaAIServiceLoot_K2_RemoveGameplayTagFromLoot) == 0x000010, "Wrong size on AthenaAIServiceLoot_K2_RemoveGameplayTagFromLoot");
static_assert(offsetof(AthenaAIServiceLoot_K2_RemoveGameplayTagFromLoot, LootActor) == 0x000000, "Member 'AthenaAIServiceLoot_K2_RemoveGameplayTagFromLoot::LootActor' has a wrong offset!");
static_assert(offsetof(AthenaAIServiceLoot_K2_RemoveGameplayTagFromLoot, GameplayTag) == 0x000008, "Member 'AthenaAIServiceLoot_K2_RemoveGameplayTagFromLoot::GameplayTag' has a wrong offset!");

// Function FortniteAI.AthenaAIServiceLoot.OnGamePhaseStepChanged
// 0x0018 (0x0018 - 0x0000)
struct AthenaAIServiceLoot_OnGamePhaseStepChanged final
{
public:
	TScriptInterface<class IFortSafeZoneInterface> SafeZoneInterface;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAthenaGamePhaseStep                          GamePhaseStep;                                     // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaAIServiceLoot_OnGamePhaseStepChanged) == 0x000008, "Wrong alignment on AthenaAIServiceLoot_OnGamePhaseStepChanged");
static_assert(sizeof(AthenaAIServiceLoot_OnGamePhaseStepChanged) == 0x000018, "Wrong size on AthenaAIServiceLoot_OnGamePhaseStepChanged");
static_assert(offsetof(AthenaAIServiceLoot_OnGamePhaseStepChanged, SafeZoneInterface) == 0x000000, "Member 'AthenaAIServiceLoot_OnGamePhaseStepChanged::SafeZoneInterface' has a wrong offset!");
static_assert(offsetof(AthenaAIServiceLoot_OnGamePhaseStepChanged, GamePhaseStep) == 0x000010, "Member 'AthenaAIServiceLoot_OnGamePhaseStepChanged::GamePhaseStep' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_CosmeticBase.GetFallbackTag
// 0x0004 (0x0004 - 0x0000)
struct FortAthenaAISpawnerDataComponent_CosmeticBase_GetFallbackTag final
{
public:
	struct FGameplayTag                           OutFallbackTag;                                    // 0x0000(0x0004)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_CosmeticBase_GetFallbackTag) == 0x000004, "Wrong alignment on FortAthenaAISpawnerDataComponent_CosmeticBase_GetFallbackTag");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_CosmeticBase_GetFallbackTag) == 0x000004, "Wrong size on FortAthenaAISpawnerDataComponent_CosmeticBase_GetFallbackTag");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_CosmeticBase_GetFallbackTag, OutFallbackTag) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_CosmeticBase_GetFallbackTag::OutFallbackTag' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_AIBotCosmeticBase.GetAllLoadouts
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaAISpawnerDataComponent_AIBotCosmeticBase_GetAllLoadouts final
{
public:
	TArray<struct FFortAthenaLoadout>             OutLoadouts;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_AIBotCosmeticBase_GetAllLoadouts) == 0x000008, "Wrong alignment on FortAthenaAISpawnerDataComponent_AIBotCosmeticBase_GetAllLoadouts");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_AIBotCosmeticBase_GetAllLoadouts) == 0x000010, "Wrong size on FortAthenaAISpawnerDataComponent_AIBotCosmeticBase_GetAllLoadouts");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_AIBotCosmeticBase_GetAllLoadouts, OutLoadouts) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_AIBotCosmeticBase_GetAllLoadouts::OutLoadouts' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_AIBotCosmeticBase.GetCustomCharacterParts
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaAISpawnerDataComponent_AIBotCosmeticBase_GetCustomCharacterParts final
{
public:
	TArray<class UCustomCharacterPart*>           OutCustomCharacterParts;                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_AIBotCosmeticBase_GetCustomCharacterParts) == 0x000008, "Wrong alignment on FortAthenaAISpawnerDataComponent_AIBotCosmeticBase_GetCustomCharacterParts");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_AIBotCosmeticBase_GetCustomCharacterParts) == 0x000010, "Wrong size on FortAthenaAISpawnerDataComponent_AIBotCosmeticBase_GetCustomCharacterParts");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_AIBotCosmeticBase_GetCustomCharacterParts, OutCustomCharacterParts) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_AIBotCosmeticBase_GetCustomCharacterParts::OutCustomCharacterParts' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_AIBotCosmeticBase.GetDances
// 0x0018 (0x0018 - 0x0000)
struct FortAthenaAISpawnerDataComponent_AIBotCosmeticBase_GetDances final
{
public:
	TArray<class UAthenaDanceItemDefinition*>     Dances;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	const class AFortAthenaAIBotController*       BotController;                                     // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_AIBotCosmeticBase_GetDances) == 0x000008, "Wrong alignment on FortAthenaAISpawnerDataComponent_AIBotCosmeticBase_GetDances");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_AIBotCosmeticBase_GetDances) == 0x000018, "Wrong size on FortAthenaAISpawnerDataComponent_AIBotCosmeticBase_GetDances");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_AIBotCosmeticBase_GetDances, Dances) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_AIBotCosmeticBase_GetDances::Dances' has a wrong offset!");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_AIBotCosmeticBase_GetDances, BotController) == 0x000010, "Member 'FortAthenaAISpawnerDataComponent_AIBotCosmeticBase_GetDances::BotController' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_AIBotCosmeticBase.GetLoadout
// 0x0168 (0x0168 - 0x0000)
struct FortAthenaAISpawnerDataComponent_AIBotCosmeticBase_GetLoadout final
{
public:
	struct FFortAthenaLoadout                     OutLoadout;                                        // 0x0000(0x0168)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_AIBotCosmeticBase_GetLoadout) == 0x000008, "Wrong alignment on FortAthenaAISpawnerDataComponent_AIBotCosmeticBase_GetLoadout");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_AIBotCosmeticBase_GetLoadout) == 0x000168, "Wrong size on FortAthenaAISpawnerDataComponent_AIBotCosmeticBase_GetLoadout");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_AIBotCosmeticBase_GetLoadout, OutLoadout) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_AIBotCosmeticBase_GetLoadout::OutLoadout' has a wrong offset!");

// Function FortniteAI.AthenaAISpawner.CancelRequest
// 0x0008 (0x0008 - 0x0000)
struct AthenaAISpawner_CancelRequest final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaAISpawner_CancelRequest) == 0x000004, "Wrong alignment on AthenaAISpawner_CancelRequest");
static_assert(sizeof(AthenaAISpawner_CancelRequest) == 0x000008, "Wrong size on AthenaAISpawner_CancelRequest");
static_assert(offsetof(AthenaAISpawner_CancelRequest, RequestId) == 0x000000, "Member 'AthenaAISpawner_CancelRequest::RequestId' has a wrong offset!");
static_assert(offsetof(AthenaAISpawner_CancelRequest, ReturnValue) == 0x000004, "Member 'AthenaAISpawner_CancelRequest::ReturnValue' has a wrong offset!");

// Function FortniteAI.AthenaAISpawner.QueueForDespawn
// 0x0008 (0x0008 - 0x0000)
struct AthenaAISpawner_QueueForDespawn final
{
public:
	class AActor*                                 ActorToDespawn;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAISpawner_QueueForDespawn) == 0x000008, "Wrong alignment on AthenaAISpawner_QueueForDespawn");
static_assert(sizeof(AthenaAISpawner_QueueForDespawn) == 0x000008, "Wrong size on AthenaAISpawner_QueueForDespawn");
static_assert(offsetof(AthenaAISpawner_QueueForDespawn, ActorToDespawn) == 0x000000, "Member 'AthenaAISpawner_QueueForDespawn::ActorToDespawn' has a wrong offset!");

// Function FortniteAI.AthenaAISpawner.RequestSpawn
// 0x0080 (0x0080 - 0x0000)
struct AthenaAISpawner_RequestSpawn final
{
public:
	class UFortAthenaAISpawnerDataComponentList*  AISpawnerComponentList;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0xC];                                       // 0x0074(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaAISpawner_RequestSpawn) == 0x000010, "Wrong alignment on AthenaAISpawner_RequestSpawn");
static_assert(sizeof(AthenaAISpawner_RequestSpawn) == 0x000080, "Wrong size on AthenaAISpawner_RequestSpawn");
static_assert(offsetof(AthenaAISpawner_RequestSpawn, AISpawnerComponentList) == 0x000000, "Member 'AthenaAISpawner_RequestSpawn::AISpawnerComponentList' has a wrong offset!");
static_assert(offsetof(AthenaAISpawner_RequestSpawn, SpawnTransform) == 0x000010, "Member 'AthenaAISpawner_RequestSpawn::SpawnTransform' has a wrong offset!");
static_assert(offsetof(AthenaAISpawner_RequestSpawn, ReturnValue) == 0x000070, "Member 'AthenaAISpawner_RequestSpawn::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAISystem.IsInCone2D
// 0x0058 (0x0058 - 0x0000)
struct FortAISystem_IsInCone2D final
{
public:
	struct FVector                                ConeOrigin;                                        // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ConeDirection;                                     // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfAngle;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LocationToCheck;                                   // 0x0038(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAISystem_IsInCone2D) == 0x000008, "Wrong alignment on FortAISystem_IsInCone2D");
static_assert(sizeof(FortAISystem_IsInCone2D) == 0x000058, "Wrong size on FortAISystem_IsInCone2D");
static_assert(offsetof(FortAISystem_IsInCone2D, ConeOrigin) == 0x000000, "Member 'FortAISystem_IsInCone2D::ConeOrigin' has a wrong offset!");
static_assert(offsetof(FortAISystem_IsInCone2D, ConeDirection) == 0x000018, "Member 'FortAISystem_IsInCone2D::ConeDirection' has a wrong offset!");
static_assert(offsetof(FortAISystem_IsInCone2D, HalfAngle) == 0x000030, "Member 'FortAISystem_IsInCone2D::HalfAngle' has a wrong offset!");
static_assert(offsetof(FortAISystem_IsInCone2D, LocationToCheck) == 0x000038, "Member 'FortAISystem_IsInCone2D::LocationToCheck' has a wrong offset!");
static_assert(offsetof(FortAISystem_IsInCone2D, ReturnValue) == 0x000050, "Member 'FortAISystem_IsInCone2D::ReturnValue' has a wrong offset!");

// Function FortniteAI.AthenaAISystem.AIProfiling_OnGamePhaseChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaAISystem_AIProfiling_OnGamePhaseChanged final
{
public:
	EAthenaGamePhase                              GamePhase;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAISystem_AIProfiling_OnGamePhaseChanged) == 0x000001, "Wrong alignment on AthenaAISystem_AIProfiling_OnGamePhaseChanged");
static_assert(sizeof(AthenaAISystem_AIProfiling_OnGamePhaseChanged) == 0x000001, "Wrong size on AthenaAISystem_AIProfiling_OnGamePhaseChanged");
static_assert(offsetof(AthenaAISystem_AIProfiling_OnGamePhaseChanged, GamePhase) == 0x000000, "Member 'AthenaAISystem_AIProfiling_OnGamePhaseChanged::GamePhase' has a wrong offset!");

// Function FortniteAI.AthenaAISystem.HandleGamePhaseStepChanged
// 0x0018 (0x0018 - 0x0000)
struct AthenaAISystem_HandleGamePhaseStepChanged final
{
public:
	TScriptInterface<class IFortSafeZoneInterface> SafeZoneInterface;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAthenaGamePhaseStep                          GamePhaseStep;                                     // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaAISystem_HandleGamePhaseStepChanged) == 0x000008, "Wrong alignment on AthenaAISystem_HandleGamePhaseStepChanged");
static_assert(sizeof(AthenaAISystem_HandleGamePhaseStepChanged) == 0x000018, "Wrong size on AthenaAISystem_HandleGamePhaseStepChanged");
static_assert(offsetof(AthenaAISystem_HandleGamePhaseStepChanged, SafeZoneInterface) == 0x000000, "Member 'AthenaAISystem_HandleGamePhaseStepChanged::SafeZoneInterface' has a wrong offset!");
static_assert(offsetof(AthenaAISystem_HandleGamePhaseStepChanged, GamePhaseStep) == 0x000010, "Member 'AthenaAISystem_HandleGamePhaseStepChanged::GamePhaseStep' has a wrong offset!");

// Function FortniteAI.AthenaAISystem.OnAIPawnDied
// 0x0028 (0x0028 - 0x0000)
struct AthenaAISystem_OnAIPawnDied final
{
public:
	class AController*                            KilledController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsABot;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPawn*                              KilledAIPawn;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerPawn*                        KilledPlayerPawn;                                  // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            KillerController;                                  // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAISystem_OnAIPawnDied) == 0x000008, "Wrong alignment on AthenaAISystem_OnAIPawnDied");
static_assert(sizeof(AthenaAISystem_OnAIPawnDied) == 0x000028, "Wrong size on AthenaAISystem_OnAIPawnDied");
static_assert(offsetof(AthenaAISystem_OnAIPawnDied, KilledController) == 0x000000, "Member 'AthenaAISystem_OnAIPawnDied::KilledController' has a wrong offset!");
static_assert(offsetof(AthenaAISystem_OnAIPawnDied, bIsABot) == 0x000008, "Member 'AthenaAISystem_OnAIPawnDied::bIsABot' has a wrong offset!");
static_assert(offsetof(AthenaAISystem_OnAIPawnDied, KilledAIPawn) == 0x000010, "Member 'AthenaAISystem_OnAIPawnDied::KilledAIPawn' has a wrong offset!");
static_assert(offsetof(AthenaAISystem_OnAIPawnDied, KilledPlayerPawn) == 0x000018, "Member 'AthenaAISystem_OnAIPawnDied::KilledPlayerPawn' has a wrong offset!");
static_assert(offsetof(AthenaAISystem_OnAIPawnDied, KillerController) == 0x000020, "Member 'AthenaAISystem_OnAIPawnDied::KillerController' has a wrong offset!");

// Function FortniteAI.AthenaAISystem.OnAIPawnSpawned
// 0x0020 (0x0020 - 0x0000)
struct AthenaAISystem_OnAIPawnSpawned final
{
public:
	class AController*                            SpawnedController;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsABot;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPawn*                              FortAIPawn;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaAISystem_OnAIPawnSpawned) == 0x000008, "Wrong alignment on AthenaAISystem_OnAIPawnSpawned");
static_assert(sizeof(AthenaAISystem_OnAIPawnSpawned) == 0x000020, "Wrong size on AthenaAISystem_OnAIPawnSpawned");
static_assert(offsetof(AthenaAISystem_OnAIPawnSpawned, SpawnedController) == 0x000000, "Member 'AthenaAISystem_OnAIPawnSpawned::SpawnedController' has a wrong offset!");
static_assert(offsetof(AthenaAISystem_OnAIPawnSpawned, bIsABot) == 0x000008, "Member 'AthenaAISystem_OnAIPawnSpawned::bIsABot' has a wrong offset!");
static_assert(offsetof(AthenaAISystem_OnAIPawnSpawned, FortAIPawn) == 0x000010, "Member 'AthenaAISystem_OnAIPawnSpawned::FortAIPawn' has a wrong offset!");
static_assert(offsetof(AthenaAISystem_OnAIPawnSpawned, PlayerPawn) == 0x000018, "Member 'AthenaAISystem_OnAIPawnSpawned::PlayerPawn' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_AIBotPerception.SetVisibilityRange
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAISpawnerDataComponent_AIBotPerception_SetVisibilityRange final
{
public:
	float                                         InSightRadius;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoseSightRadius_0;                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_AIBotPerception_SetVisibilityRange) == 0x000004, "Wrong alignment on FortAthenaAISpawnerDataComponent_AIBotPerception_SetVisibilityRange");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_AIBotPerception_SetVisibilityRange) == 0x000008, "Wrong size on FortAthenaAISpawnerDataComponent_AIBotPerception_SetVisibilityRange");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_AIBotPerception_SetVisibilityRange, InSightRadius) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_AIBotPerception_SetVisibilityRange::InSightRadius' has a wrong offset!");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_AIBotPerception_SetVisibilityRange, LoseSightRadius_0) == 0x000004, "Member 'FortAthenaAISpawnerDataComponent_AIBotPerception_SetVisibilityRange::LoseSightRadius_0' has a wrong offset!");

// Function FortniteAI.AthenaCreativeRift.NotifyActorDespawnEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct AthenaCreativeRift_NotifyActorDespawnEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AthenaCreativeRift_NotifyActorDespawnEndOverlap) == 0x000008, "Wrong alignment on AthenaCreativeRift_NotifyActorDespawnEndOverlap");
static_assert(sizeof(AthenaCreativeRift_NotifyActorDespawnEndOverlap) == 0x000020, "Wrong size on AthenaCreativeRift_NotifyActorDespawnEndOverlap");
static_assert(offsetof(AthenaCreativeRift_NotifyActorDespawnEndOverlap, OverlappedComponent) == 0x000000, "Member 'AthenaCreativeRift_NotifyActorDespawnEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(AthenaCreativeRift_NotifyActorDespawnEndOverlap, OtherActor) == 0x000008, "Member 'AthenaCreativeRift_NotifyActorDespawnEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(AthenaCreativeRift_NotifyActorDespawnEndOverlap, OtherComp) == 0x000010, "Member 'AthenaCreativeRift_NotifyActorDespawnEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(AthenaCreativeRift_NotifyActorDespawnEndOverlap, OtherBodyIndex) == 0x000018, "Member 'AthenaCreativeRift_NotifyActorDespawnEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function FortniteAI.AthenaNavInvokerBox.SetInvokerEnabled
// 0x0001 (0x0001 - 0x0000)
struct AthenaNavInvokerBox_SetInvokerEnabled final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaNavInvokerBox_SetInvokerEnabled) == 0x000001, "Wrong alignment on AthenaNavInvokerBox_SetInvokerEnabled");
static_assert(sizeof(AthenaNavInvokerBox_SetInvokerEnabled) == 0x000001, "Wrong size on AthenaNavInvokerBox_SetInvokerEnabled");
static_assert(offsetof(AthenaNavInvokerBox_SetInvokerEnabled, bEnable) == 0x000000, "Member 'AthenaNavInvokerBox_SetInvokerEnabled::bEnable' has a wrong offset!");

// Function FortniteAI.AthenaNavMesh.ComputeOffsetForMoveTiles
// 0x0050 (0x0050 - 0x0000)
struct AthenaNavMesh_ComputeOffsetForMoveTiles final
{
public:
	struct FVector                                StartPosition;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DesiredPosition;                                   // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutEndPosition;                                    // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              OutTileOffset;                                     // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaNavMesh_ComputeOffsetForMoveTiles) == 0x000008, "Wrong alignment on AthenaNavMesh_ComputeOffsetForMoveTiles");
static_assert(sizeof(AthenaNavMesh_ComputeOffsetForMoveTiles) == 0x000050, "Wrong size on AthenaNavMesh_ComputeOffsetForMoveTiles");
static_assert(offsetof(AthenaNavMesh_ComputeOffsetForMoveTiles, StartPosition) == 0x000000, "Member 'AthenaNavMesh_ComputeOffsetForMoveTiles::StartPosition' has a wrong offset!");
static_assert(offsetof(AthenaNavMesh_ComputeOffsetForMoveTiles, DesiredPosition) == 0x000018, "Member 'AthenaNavMesh_ComputeOffsetForMoveTiles::DesiredPosition' has a wrong offset!");
static_assert(offsetof(AthenaNavMesh_ComputeOffsetForMoveTiles, OutEndPosition) == 0x000030, "Member 'AthenaNavMesh_ComputeOffsetForMoveTiles::OutEndPosition' has a wrong offset!");
static_assert(offsetof(AthenaNavMesh_ComputeOffsetForMoveTiles, OutTileOffset) == 0x000048, "Member 'AthenaNavMesh_ComputeOffsetForMoveTiles::OutTileOffset' has a wrong offset!");

// Function FortniteAI.AthenaNavMesh.MoveTiles
// 0x0058 (0x0058 - 0x0000)
struct AthenaNavMesh_MoveTiles final
{
public:
	struct FBox                                   SourceBox;                                         // 0x0000(0x0038)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FIntPoint                              TileOffset;                                        // 0x0038(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationDeg;                                       // 0x0040(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              FillerTilePosition;                                // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaNavMesh_MoveTiles) == 0x000008, "Wrong alignment on AthenaNavMesh_MoveTiles");
static_assert(sizeof(AthenaNavMesh_MoveTiles) == 0x000058, "Wrong size on AthenaNavMesh_MoveTiles");
static_assert(offsetof(AthenaNavMesh_MoveTiles, SourceBox) == 0x000000, "Member 'AthenaNavMesh_MoveTiles::SourceBox' has a wrong offset!");
static_assert(offsetof(AthenaNavMesh_MoveTiles, TileOffset) == 0x000038, "Member 'AthenaNavMesh_MoveTiles::TileOffset' has a wrong offset!");
static_assert(offsetof(AthenaNavMesh_MoveTiles, RotationDeg) == 0x000040, "Member 'AthenaNavMesh_MoveTiles::RotationDeg' has a wrong offset!");
static_assert(offsetof(AthenaNavMesh_MoveTiles, FillerTilePosition) == 0x000048, "Member 'AthenaNavMesh_MoveTiles::FillerTilePosition' has a wrong offset!");

// Function FortniteAI.FortBotStructureBuilder.OnBuildingDied
// 0x0060 (0x0060 - 0x0000)
struct FortBotStructureBuilder_OnBuildingDied final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBotStructureBuilder_OnBuildingDied) == 0x000008, "Wrong alignment on FortBotStructureBuilder_OnBuildingDied");
static_assert(sizeof(FortBotStructureBuilder_OnBuildingDied) == 0x000060, "Wrong size on FortBotStructureBuilder_OnBuildingDied");
static_assert(offsetof(FortBotStructureBuilder_OnBuildingDied, DamagedActor) == 0x000000, "Member 'FortBotStructureBuilder_OnBuildingDied::DamagedActor' has a wrong offset!");
static_assert(offsetof(FortBotStructureBuilder_OnBuildingDied, Damage) == 0x000008, "Member 'FortBotStructureBuilder_OnBuildingDied::Damage' has a wrong offset!");
static_assert(offsetof(FortBotStructureBuilder_OnBuildingDied, InstigatedBy) == 0x000010, "Member 'FortBotStructureBuilder_OnBuildingDied::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortBotStructureBuilder_OnBuildingDied, DamageCauser) == 0x000018, "Member 'FortBotStructureBuilder_OnBuildingDied::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortBotStructureBuilder_OnBuildingDied, HitLocation) == 0x000020, "Member 'FortBotStructureBuilder_OnBuildingDied::HitLocation' has a wrong offset!");
static_assert(offsetof(FortBotStructureBuilder_OnBuildingDied, FHitComponent) == 0x000038, "Member 'FortBotStructureBuilder_OnBuildingDied::FHitComponent' has a wrong offset!");
static_assert(offsetof(FortBotStructureBuilder_OnBuildingDied, BoneName) == 0x000040, "Member 'FortBotStructureBuilder_OnBuildingDied::BoneName' has a wrong offset!");
static_assert(offsetof(FortBotStructureBuilder_OnBuildingDied, Momentum) == 0x000048, "Member 'FortBotStructureBuilder_OnBuildingDied::Momentum' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_ConstructionBase.GetConstructionBuildingInfo
// 0x0098 (0x0098 - 0x0000)
struct FortAthenaAISpawnerDataComponent_ConstructionBase_GetConstructionBuildingInfo final
{
public:
	struct FConstructionBuildingList              OutConstructionInfoList;                           // 0x0000(0x0090)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_ConstructionBase_GetConstructionBuildingInfo) == 0x000008, "Wrong alignment on FortAthenaAISpawnerDataComponent_ConstructionBase_GetConstructionBuildingInfo");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_ConstructionBase_GetConstructionBuildingInfo) == 0x000098, "Wrong size on FortAthenaAISpawnerDataComponent_ConstructionBase_GetConstructionBuildingInfo");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_ConstructionBase_GetConstructionBuildingInfo, OutConstructionInfoList) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_ConstructionBase_GetConstructionBuildingInfo::OutConstructionInfoList' has a wrong offset!");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_ConstructionBase_GetConstructionBuildingInfo, ReturnValue) == 0x000090, "Member 'FortAthenaAISpawnerDataComponent_ConstructionBase_GetConstructionBuildingInfo::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_AIBotBehavior.DisableBehaviorTreeBranch
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaAISpawnerDataComponent_AIBotBehavior_DisableBehaviorTreeBranch final
{
public:
	EBehaviorTreeBranches                         Behavior;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_AIBotBehavior_DisableBehaviorTreeBranch) == 0x000001, "Wrong alignment on FortAthenaAISpawnerDataComponent_AIBotBehavior_DisableBehaviorTreeBranch");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_AIBotBehavior_DisableBehaviorTreeBranch) == 0x000001, "Wrong size on FortAthenaAISpawnerDataComponent_AIBotBehavior_DisableBehaviorTreeBranch");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_AIBotBehavior_DisableBehaviorTreeBranch, Behavior) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_AIBotBehavior_DisableBehaviorTreeBranch::Behavior' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_AIBotBehavior.EnableBehaviorTreeBranch
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaAISpawnerDataComponent_AIBotBehavior_EnableBehaviorTreeBranch final
{
public:
	EBehaviorTreeBranches                         Behavior;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_AIBotBehavior_EnableBehaviorTreeBranch) == 0x000001, "Wrong alignment on FortAthenaAISpawnerDataComponent_AIBotBehavior_EnableBehaviorTreeBranch");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_AIBotBehavior_EnableBehaviorTreeBranch) == 0x000001, "Wrong size on FortAthenaAISpawnerDataComponent_AIBotBehavior_EnableBehaviorTreeBranch");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_AIBotBehavior_EnableBehaviorTreeBranch, Behavior) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_AIBotBehavior_EnableBehaviorTreeBranch::Behavior' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_AIBotBehavior.IsBehaviorTreeBranchActive
// 0x0002 (0x0002 - 0x0000)
struct FortAthenaAISpawnerDataComponent_AIBotBehavior_IsBehaviorTreeBranchActive final
{
public:
	EBehaviorTreeBranches                         Behavior;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_AIBotBehavior_IsBehaviorTreeBranchActive) == 0x000001, "Wrong alignment on FortAthenaAISpawnerDataComponent_AIBotBehavior_IsBehaviorTreeBranchActive");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_AIBotBehavior_IsBehaviorTreeBranchActive) == 0x000002, "Wrong size on FortAthenaAISpawnerDataComponent_AIBotBehavior_IsBehaviorTreeBranchActive");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_AIBotBehavior_IsBehaviorTreeBranchActive, Behavior) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_AIBotBehavior_IsBehaviorTreeBranchActive::Behavior' has a wrong offset!");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_AIBotBehavior_IsBehaviorTreeBranchActive, ReturnValue) == 0x000001, "Member 'FortAthenaAISpawnerDataComponent_AIBotBehavior_IsBehaviorTreeBranchActive::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaNpcGalileoComponent.GetCommunicationGroup
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaNpcGalileoComponent_GetCommunicationGroup final
{
public:
	TArray<class AFortAthenaAIBotController*>     ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaNpcGalileoComponent_GetCommunicationGroup) == 0x000008, "Wrong alignment on FortAthenaNpcGalileoComponent_GetCommunicationGroup");
static_assert(sizeof(FortAthenaNpcGalileoComponent_GetCommunicationGroup) == 0x000010, "Wrong size on FortAthenaNpcGalileoComponent_GetCommunicationGroup");
static_assert(offsetof(FortAthenaNpcGalileoComponent_GetCommunicationGroup, ReturnValue) == 0x000000, "Member 'FortAthenaNpcGalileoComponent_GetCommunicationGroup::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaNpcGalileoComponent.OnPawnDied
// 0x0060 (0x0060 - 0x0000)
struct FortAthenaNpcGalileoComponent_OnPawnDied final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaNpcGalileoComponent_OnPawnDied) == 0x000008, "Wrong alignment on FortAthenaNpcGalileoComponent_OnPawnDied");
static_assert(sizeof(FortAthenaNpcGalileoComponent_OnPawnDied) == 0x000060, "Wrong size on FortAthenaNpcGalileoComponent_OnPawnDied");
static_assert(offsetof(FortAthenaNpcGalileoComponent_OnPawnDied, DamagedActor) == 0x000000, "Member 'FortAthenaNpcGalileoComponent_OnPawnDied::DamagedActor' has a wrong offset!");
static_assert(offsetof(FortAthenaNpcGalileoComponent_OnPawnDied, Damage) == 0x000008, "Member 'FortAthenaNpcGalileoComponent_OnPawnDied::Damage' has a wrong offset!");
static_assert(offsetof(FortAthenaNpcGalileoComponent_OnPawnDied, InstigatedBy) == 0x000010, "Member 'FortAthenaNpcGalileoComponent_OnPawnDied::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortAthenaNpcGalileoComponent_OnPawnDied, DamageCauser) == 0x000018, "Member 'FortAthenaNpcGalileoComponent_OnPawnDied::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortAthenaNpcGalileoComponent_OnPawnDied, HitLocation) == 0x000020, "Member 'FortAthenaNpcGalileoComponent_OnPawnDied::HitLocation' has a wrong offset!");
static_assert(offsetof(FortAthenaNpcGalileoComponent_OnPawnDied, FHitComponent) == 0x000038, "Member 'FortAthenaNpcGalileoComponent_OnPawnDied::FHitComponent' has a wrong offset!");
static_assert(offsetof(FortAthenaNpcGalileoComponent_OnPawnDied, BoneName) == 0x000040, "Member 'FortAthenaNpcGalileoComponent_OnPawnDied::BoneName' has a wrong offset!");
static_assert(offsetof(FortAthenaNpcGalileoComponent_OnPawnDied, Momentum) == 0x000048, "Member 'FortAthenaNpcGalileoComponent_OnPawnDied::Momentum' has a wrong offset!");

// Function FortniteAI.FortAthenaNpcGalileoComponent.SetCommunicationGroup
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaNpcGalileoComponent_SetCommunicationGroup final
{
public:
	TArray<class AFortAthenaAIBotController*>     AIBotControllerList;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaNpcGalileoComponent_SetCommunicationGroup) == 0x000008, "Wrong alignment on FortAthenaNpcGalileoComponent_SetCommunicationGroup");
static_assert(sizeof(FortAthenaNpcGalileoComponent_SetCommunicationGroup) == 0x000010, "Wrong size on FortAthenaNpcGalileoComponent_SetCommunicationGroup");
static_assert(offsetof(FortAthenaNpcGalileoComponent_SetCommunicationGroup, AIBotControllerList) == 0x000000, "Member 'FortAthenaNpcGalileoComponent_SetCommunicationGroup::AIBotControllerList' has a wrong offset!");

// Function FortniteAI.FortAthenaNpcGalileoComponent.SetPatrolPath
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaNpcGalileoComponent_SetPatrolPath final
{
public:
	TArray<struct FVector>                        NewPatrolPath;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaNpcGalileoComponent_SetPatrolPath) == 0x000008, "Wrong alignment on FortAthenaNpcGalileoComponent_SetPatrolPath");
static_assert(sizeof(FortAthenaNpcGalileoComponent_SetPatrolPath) == 0x000010, "Wrong size on FortAthenaNpcGalileoComponent_SetPatrolPath");
static_assert(offsetof(FortAthenaNpcGalileoComponent_SetPatrolPath, NewPatrolPath) == 0x000000, "Member 'FortAthenaNpcGalileoComponent_SetPatrolPath::NewPatrolPath' has a wrong offset!");

// Function FortniteAI.FortAthenaNpcGalileoComponent.GetPatrolPath
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaNpcGalileoComponent_GetPatrolPath final
{
public:
	TArray<struct FVector>                        ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaNpcGalileoComponent_GetPatrolPath) == 0x000008, "Wrong alignment on FortAthenaNpcGalileoComponent_GetPatrolPath");
static_assert(sizeof(FortAthenaNpcGalileoComponent_GetPatrolPath) == 0x000010, "Wrong size on FortAthenaNpcGalileoComponent_GetPatrolPath");
static_assert(offsetof(FortAthenaNpcGalileoComponent_GetPatrolPath, ReturnValue) == 0x000000, "Member 'FortAthenaNpcGalileoComponent_GetPatrolPath::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortBotMissionLogic.MarkSingleLocator
// 0x0008 (0x0008 - 0x0000)
struct FortBotMissionLogic_MarkSingleLocator final
{
public:
	const class AActor*                           LocatorActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBotMissionLogic_MarkSingleLocator) == 0x000008, "Wrong alignment on FortBotMissionLogic_MarkSingleLocator");
static_assert(sizeof(FortBotMissionLogic_MarkSingleLocator) == 0x000008, "Wrong size on FortBotMissionLogic_MarkSingleLocator");
static_assert(offsetof(FortBotMissionLogic_MarkSingleLocator, LocatorActor) == 0x000000, "Member 'FortBotMissionLogic_MarkSingleLocator::LocatorActor' has a wrong offset!");

// Function FortniteAI.FortBotMissionLogic.OnAssignedBehavior
// 0x0008 (0x0008 - 0x0000)
struct FortBotMissionLogic_OnAssignedBehavior final
{
public:
	class AFortAIController*                      BotAI;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBotMissionLogic_OnAssignedBehavior) == 0x000008, "Wrong alignment on FortBotMissionLogic_OnAssignedBehavior");
static_assert(sizeof(FortBotMissionLogic_OnAssignedBehavior) == 0x000008, "Wrong size on FortBotMissionLogic_OnAssignedBehavior");
static_assert(offsetof(FortBotMissionLogic_OnAssignedBehavior, BotAI) == 0x000000, "Member 'FortBotMissionLogic_OnAssignedBehavior::BotAI' has a wrong offset!");

// Function FortniteAI.FortBotMissionLogic.OnCanStartOtherMission
// 0x0018 (0x0018 - 0x0000)
struct FortBotMissionLogic_OnCanStartOtherMission final
{
public:
	class AFortAIController*                      BotAI;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortMission*                           OtherMission;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortBotMissionLogic_OnCanStartOtherMission) == 0x000008, "Wrong alignment on FortBotMissionLogic_OnCanStartOtherMission");
static_assert(sizeof(FortBotMissionLogic_OnCanStartOtherMission) == 0x000018, "Wrong size on FortBotMissionLogic_OnCanStartOtherMission");
static_assert(offsetof(FortBotMissionLogic_OnCanStartOtherMission, BotAI) == 0x000000, "Member 'FortBotMissionLogic_OnCanStartOtherMission::BotAI' has a wrong offset!");
static_assert(offsetof(FortBotMissionLogic_OnCanStartOtherMission, OtherMission) == 0x000008, "Member 'FortBotMissionLogic_OnCanStartOtherMission::OtherMission' has a wrong offset!");
static_assert(offsetof(FortBotMissionLogic_OnCanStartOtherMission, ReturnValue) == 0x000010, "Member 'FortBotMissionLogic_OnCanStartOtherMission::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortBotMissionLogic.OnInteractWithMissionGoal
// 0x0018 (0x0018 - 0x0000)
struct FortBotMissionLogic_OnInteractWithMissionGoal final
{
public:
	class AFortAIController*                      BotAI;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 MissionGoal;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortBotMissionLogic_OnInteractWithMissionGoal) == 0x000008, "Wrong alignment on FortBotMissionLogic_OnInteractWithMissionGoal");
static_assert(sizeof(FortBotMissionLogic_OnInteractWithMissionGoal) == 0x000018, "Wrong size on FortBotMissionLogic_OnInteractWithMissionGoal");
static_assert(offsetof(FortBotMissionLogic_OnInteractWithMissionGoal, BotAI) == 0x000000, "Member 'FortBotMissionLogic_OnInteractWithMissionGoal::BotAI' has a wrong offset!");
static_assert(offsetof(FortBotMissionLogic_OnInteractWithMissionGoal, MissionGoal) == 0x000008, "Member 'FortBotMissionLogic_OnInteractWithMissionGoal::MissionGoal' has a wrong offset!");
static_assert(offsetof(FortBotMissionLogic_OnInteractWithMissionGoal, ReturnValue) == 0x000010, "Member 'FortBotMissionLogic_OnInteractWithMissionGoal::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortBotMissionLogic.SetCurrentBehavior
// 0x0008 (0x0008 - 0x0000)
struct FortBotMissionLogic_SetCurrentBehavior final
{
public:
	class UBehaviorTree*                          Behavior;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBotMissionLogic_SetCurrentBehavior) == 0x000008, "Wrong alignment on FortBotMissionLogic_SetCurrentBehavior");
static_assert(sizeof(FortBotMissionLogic_SetCurrentBehavior) == 0x000008, "Wrong size on FortBotMissionLogic_SetCurrentBehavior");
static_assert(offsetof(FortBotMissionLogic_SetCurrentBehavior, Behavior) == 0x000000, "Member 'FortBotMissionLogic_SetCurrentBehavior::Behavior' has a wrong offset!");

// Function FortniteAI.FortBotMissionLogic.SetGoalsInvulnerable
// 0x0001 (0x0001 - 0x0000)
struct FortBotMissionLogic_SetGoalsInvulnerable final
{
public:
	bool                                          bGodMode;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBotMissionLogic_SetGoalsInvulnerable) == 0x000001, "Wrong alignment on FortBotMissionLogic_SetGoalsInvulnerable");
static_assert(sizeof(FortBotMissionLogic_SetGoalsInvulnerable) == 0x000001, "Wrong size on FortBotMissionLogic_SetGoalsInvulnerable");
static_assert(offsetof(FortBotMissionLogic_SetGoalsInvulnerable, bGodMode) == 0x000000, "Member 'FortBotMissionLogic_SetGoalsInvulnerable::bGodMode' has a wrong offset!");

// Function FortniteAI.FortBotMissionLogic.SpawnStructureBuilder
// 0x0018 (0x0018 - 0x0000)
struct FortBotMissionLogic_SpawnStructureBuilder final
{
public:
	class AActor*                                 MissionGoal;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortBuildingInstructions*              BuildingInstructions;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortBotStructureBuilder*               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBotMissionLogic_SpawnStructureBuilder) == 0x000008, "Wrong alignment on FortBotMissionLogic_SpawnStructureBuilder");
static_assert(sizeof(FortBotMissionLogic_SpawnStructureBuilder) == 0x000018, "Wrong size on FortBotMissionLogic_SpawnStructureBuilder");
static_assert(offsetof(FortBotMissionLogic_SpawnStructureBuilder, MissionGoal) == 0x000000, "Member 'FortBotMissionLogic_SpawnStructureBuilder::MissionGoal' has a wrong offset!");
static_assert(offsetof(FortBotMissionLogic_SpawnStructureBuilder, BuildingInstructions) == 0x000008, "Member 'FortBotMissionLogic_SpawnStructureBuilder::BuildingInstructions' has a wrong offset!");
static_assert(offsetof(FortBotMissionLogic_SpawnStructureBuilder, ReturnValue) == 0x000010, "Member 'FortBotMissionLogic_SpawnStructureBuilder::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerData.CreateComponentListFromClass
// 0x0018 (0x0018 - 0x0000)
struct FortAthenaAISpawnerData_CreateComponentListFromClass final
{
public:
	TSubclassOf<class UFortAthenaAISpawnerData>   AISpawnerDataClass;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OuterObject;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAthenaAISpawnerDataComponentList*  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerData_CreateComponentListFromClass) == 0x000008, "Wrong alignment on FortAthenaAISpawnerData_CreateComponentListFromClass");
static_assert(sizeof(FortAthenaAISpawnerData_CreateComponentListFromClass) == 0x000018, "Wrong size on FortAthenaAISpawnerData_CreateComponentListFromClass");
static_assert(offsetof(FortAthenaAISpawnerData_CreateComponentListFromClass, AISpawnerDataClass) == 0x000000, "Member 'FortAthenaAISpawnerData_CreateComponentListFromClass::AISpawnerDataClass' has a wrong offset!");
static_assert(offsetof(FortAthenaAISpawnerData_CreateComponentListFromClass, OuterObject) == 0x000008, "Member 'FortAthenaAISpawnerData_CreateComponentListFromClass::OuterObject' has a wrong offset!");
static_assert(offsetof(FortAthenaAISpawnerData_CreateComponentListFromClass, ReturnValue) == 0x000010, "Member 'FortAthenaAISpawnerData_CreateComponentListFromClass::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerData.CreateComponentList
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaAISpawnerData_CreateComponentList final
{
public:
	class UObject*                                OuterObject;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAthenaAISpawnerDataComponentList*  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerData_CreateComponentList) == 0x000008, "Wrong alignment on FortAthenaAISpawnerData_CreateComponentList");
static_assert(sizeof(FortAthenaAISpawnerData_CreateComponentList) == 0x000010, "Wrong size on FortAthenaAISpawnerData_CreateComponentList");
static_assert(offsetof(FortAthenaAISpawnerData_CreateComponentList, OuterObject) == 0x000000, "Member 'FortAthenaAISpawnerData_CreateComponentList::OuterObject' has a wrong offset!");
static_assert(offsetof(FortAthenaAISpawnerData_CreateComponentList, ReturnValue) == 0x000008, "Member 'FortAthenaAISpawnerData_CreateComponentList::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerData.GetAffiliationComponent
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAISpawnerData_GetAffiliationComponent final
{
public:
	class UFortAthenaAISpawnerDataComponent_AffiliationBase* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerData_GetAffiliationComponent) == 0x000008, "Wrong alignment on FortAthenaAISpawnerData_GetAffiliationComponent");
static_assert(sizeof(FortAthenaAISpawnerData_GetAffiliationComponent) == 0x000008, "Wrong size on FortAthenaAISpawnerData_GetAffiliationComponent");
static_assert(offsetof(FortAthenaAISpawnerData_GetAffiliationComponent, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerData_GetAffiliationComponent::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerData.GetAILODComponent
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAISpawnerData_GetAILODComponent final
{
public:
	class UFortAthenaAISpawnerDataComponent_LODBase* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerData_GetAILODComponent) == 0x000008, "Wrong alignment on FortAthenaAISpawnerData_GetAILODComponent");
static_assert(sizeof(FortAthenaAISpawnerData_GetAILODComponent) == 0x000008, "Wrong size on FortAthenaAISpawnerData_GetAILODComponent");
static_assert(offsetof(FortAthenaAISpawnerData_GetAILODComponent, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerData_GetAILODComponent::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerData.GetAnalyticComponent
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAISpawnerData_GetAnalyticComponent final
{
public:
	class UFortAthenaAISpawnerDataComponent_AnalyticBase* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerData_GetAnalyticComponent) == 0x000008, "Wrong alignment on FortAthenaAISpawnerData_GetAnalyticComponent");
static_assert(sizeof(FortAthenaAISpawnerData_GetAnalyticComponent) == 0x000008, "Wrong size on FortAthenaAISpawnerData_GetAnalyticComponent");
static_assert(offsetof(FortAthenaAISpawnerData_GetAnalyticComponent, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerData_GetAnalyticComponent::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerData.GetBehaviorComponent
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAISpawnerData_GetBehaviorComponent final
{
public:
	class UFortAthenaAISpawnerDataComponent_BehaviorBase* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerData_GetBehaviorComponent) == 0x000008, "Wrong alignment on FortAthenaAISpawnerData_GetBehaviorComponent");
static_assert(sizeof(FortAthenaAISpawnerData_GetBehaviorComponent) == 0x000008, "Wrong size on FortAthenaAISpawnerData_GetBehaviorComponent");
static_assert(offsetof(FortAthenaAISpawnerData_GetBehaviorComponent, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerData_GetBehaviorComponent::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerData.GetChanceEncounterComponent
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAISpawnerData_GetChanceEncounterComponent final
{
public:
	class UFortAthenaAISpawnerDataComponent_ChanceEncounterBase* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerData_GetChanceEncounterComponent) == 0x000008, "Wrong alignment on FortAthenaAISpawnerData_GetChanceEncounterComponent");
static_assert(sizeof(FortAthenaAISpawnerData_GetChanceEncounterComponent) == 0x000008, "Wrong size on FortAthenaAISpawnerData_GetChanceEncounterComponent");
static_assert(offsetof(FortAthenaAISpawnerData_GetChanceEncounterComponent, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerData_GetChanceEncounterComponent::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerData.GetConversationComponent
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAISpawnerData_GetConversationComponent final
{
public:
	class UFortAthenaAISpawnerDataComponent_ConversationBase* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerData_GetConversationComponent) == 0x000008, "Wrong alignment on FortAthenaAISpawnerData_GetConversationComponent");
static_assert(sizeof(FortAthenaAISpawnerData_GetConversationComponent) == 0x000008, "Wrong size on FortAthenaAISpawnerData_GetConversationComponent");
static_assert(offsetof(FortAthenaAISpawnerData_GetConversationComponent, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerData_GetConversationComponent::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerData.GetCosmeticComponent
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAISpawnerData_GetCosmeticComponent final
{
public:
	class UFortAthenaAISpawnerDataComponent_CosmeticBase* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerData_GetCosmeticComponent) == 0x000008, "Wrong alignment on FortAthenaAISpawnerData_GetCosmeticComponent");
static_assert(sizeof(FortAthenaAISpawnerData_GetCosmeticComponent) == 0x000008, "Wrong size on FortAthenaAISpawnerData_GetCosmeticComponent");
static_assert(offsetof(FortAthenaAISpawnerData_GetCosmeticComponent, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerData_GetCosmeticComponent::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerData.GetDebugComponent
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAISpawnerData_GetDebugComponent final
{
public:
	class UFortAthenaAISpawnerDataComponent_DebugBase* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerData_GetDebugComponent) == 0x000008, "Wrong alignment on FortAthenaAISpawnerData_GetDebugComponent");
static_assert(sizeof(FortAthenaAISpawnerData_GetDebugComponent) == 0x000008, "Wrong size on FortAthenaAISpawnerData_GetDebugComponent");
static_assert(offsetof(FortAthenaAISpawnerData_GetDebugComponent, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerData_GetDebugComponent::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerData.GetGameplayAbilityComponent
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAISpawnerData_GetGameplayAbilityComponent final
{
public:
	class UFortAthenaAISpawnerDataComponent_GameplayAbilityBase* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerData_GetGameplayAbilityComponent) == 0x000008, "Wrong alignment on FortAthenaAISpawnerData_GetGameplayAbilityComponent");
static_assert(sizeof(FortAthenaAISpawnerData_GetGameplayAbilityComponent) == 0x000008, "Wrong size on FortAthenaAISpawnerData_GetGameplayAbilityComponent");
static_assert(offsetof(FortAthenaAISpawnerData_GetGameplayAbilityComponent, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerData_GetGameplayAbilityComponent::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerData.GetGameplayComponent
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAISpawnerData_GetGameplayComponent final
{
public:
	class UFortAthenaAISpawnerDataComponent_GameplayBase* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerData_GetGameplayComponent) == 0x000008, "Wrong alignment on FortAthenaAISpawnerData_GetGameplayComponent");
static_assert(sizeof(FortAthenaAISpawnerData_GetGameplayComponent) == 0x000008, "Wrong size on FortAthenaAISpawnerData_GetGameplayComponent");
static_assert(offsetof(FortAthenaAISpawnerData_GetGameplayComponent, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerData_GetGameplayComponent::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerData.GetGroupComponent
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAISpawnerData_GetGroupComponent final
{
public:
	class UFortAthenaAISpawnerDataComponent_GroupBase* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerData_GetGroupComponent) == 0x000008, "Wrong alignment on FortAthenaAISpawnerData_GetGroupComponent");
static_assert(sizeof(FortAthenaAISpawnerData_GetGroupComponent) == 0x000008, "Wrong size on FortAthenaAISpawnerData_GetGroupComponent");
static_assert(offsetof(FortAthenaAISpawnerData_GetGroupComponent, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerData_GetGroupComponent::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerData.GetInventoryComponent
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAISpawnerData_GetInventoryComponent final
{
public:
	class UFortAthenaAISpawnerDataComponent_InventoryBase* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerData_GetInventoryComponent) == 0x000008, "Wrong alignment on FortAthenaAISpawnerData_GetInventoryComponent");
static_assert(sizeof(FortAthenaAISpawnerData_GetInventoryComponent) == 0x000008, "Wrong size on FortAthenaAISpawnerData_GetInventoryComponent");
static_assert(offsetof(FortAthenaAISpawnerData_GetInventoryComponent, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerData_GetInventoryComponent::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerData.GetOptimizationComponent
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAISpawnerData_GetOptimizationComponent final
{
public:
	class UFortAthenaAISpawnerDataComponent_OptimBase* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerData_GetOptimizationComponent) == 0x000008, "Wrong alignment on FortAthenaAISpawnerData_GetOptimizationComponent");
static_assert(sizeof(FortAthenaAISpawnerData_GetOptimizationComponent) == 0x000008, "Wrong size on FortAthenaAISpawnerData_GetOptimizationComponent");
static_assert(offsetof(FortAthenaAISpawnerData_GetOptimizationComponent, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerData_GetOptimizationComponent::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerData.GetPerceptionComponent
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAISpawnerData_GetPerceptionComponent final
{
public:
	class UFortAthenaAISpawnerDataComponent_PerceptionBase* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerData_GetPerceptionComponent) == 0x000008, "Wrong alignment on FortAthenaAISpawnerData_GetPerceptionComponent");
static_assert(sizeof(FortAthenaAISpawnerData_GetPerceptionComponent) == 0x000008, "Wrong size on FortAthenaAISpawnerData_GetPerceptionComponent");
static_assert(offsetof(FortAthenaAISpawnerData_GetPerceptionComponent, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerData_GetPerceptionComponent::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerData.GetScriptComponent
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAISpawnerData_GetScriptComponent final
{
public:
	class UFortAthenaAISpawnerDataComponent_ScriptBase* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerData_GetScriptComponent) == 0x000008, "Wrong alignment on FortAthenaAISpawnerData_GetScriptComponent");
static_assert(sizeof(FortAthenaAISpawnerData_GetScriptComponent) == 0x000008, "Wrong size on FortAthenaAISpawnerData_GetScriptComponent");
static_assert(offsetof(FortAthenaAISpawnerData_GetScriptComponent, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerData_GetScriptComponent::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerData.GetSmartObjectComponent
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAISpawnerData_GetSmartObjectComponent final
{
public:
	class UFortAthenaAISpawnerDataComponent_SmartObjectBase* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerData_GetSmartObjectComponent) == 0x000008, "Wrong alignment on FortAthenaAISpawnerData_GetSmartObjectComponent");
static_assert(sizeof(FortAthenaAISpawnerData_GetSmartObjectComponent) == 0x000008, "Wrong size on FortAthenaAISpawnerData_GetSmartObjectComponent");
static_assert(offsetof(FortAthenaAISpawnerData_GetSmartObjectComponent, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerData_GetSmartObjectComponent::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerData.GetSpawnParamsComponent
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAISpawnerData_GetSpawnParamsComponent final
{
public:
	class UFortAthenaAISpawnerDataComponent_SpawnParamsBase* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerData_GetSpawnParamsComponent) == 0x000008, "Wrong alignment on FortAthenaAISpawnerData_GetSpawnParamsComponent");
static_assert(sizeof(FortAthenaAISpawnerData_GetSpawnParamsComponent) == 0x000008, "Wrong size on FortAthenaAISpawnerData_GetSpawnParamsComponent");
static_assert(offsetof(FortAthenaAISpawnerData_GetSpawnParamsComponent, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerData_GetSpawnParamsComponent::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerData.GetVoiceComponent
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAISpawnerData_GetVoiceComponent final
{
public:
	class UFortAthenaAISpawnerDataComponent_VoiceBase* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerData_GetVoiceComponent) == 0x000008, "Wrong alignment on FortAthenaAISpawnerData_GetVoiceComponent");
static_assert(sizeof(FortAthenaAISpawnerData_GetVoiceComponent) == 0x000008, "Wrong size on FortAthenaAISpawnerData_GetVoiceComponent");
static_assert(offsetof(FortAthenaAISpawnerData_GetVoiceComponent, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerData_GetVoiceComponent::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotSpawnerData.GetConstructionComponent
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAIBotSpawnerData_GetConstructionComponent final
{
public:
	class UFortAthenaAISpawnerDataComponent_ConstructionBase* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotSpawnerData_GetConstructionComponent) == 0x000008, "Wrong alignment on FortAthenaAIBotSpawnerData_GetConstructionComponent");
static_assert(sizeof(FortAthenaAIBotSpawnerData_GetConstructionComponent) == 0x000008, "Wrong size on FortAthenaAIBotSpawnerData_GetConstructionComponent");
static_assert(offsetof(FortAthenaAIBotSpawnerData_GetConstructionComponent, ReturnValue) == 0x000000, "Member 'FortAthenaAIBotSpawnerData_GetConstructionComponent::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotSpawnerData.GetCoverComponent
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAIBotSpawnerData_GetCoverComponent final
{
public:
	class UFortAthenaAISpawnerDataComponent_CoverBase* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotSpawnerData_GetCoverComponent) == 0x000008, "Wrong alignment on FortAthenaAIBotSpawnerData_GetCoverComponent");
static_assert(sizeof(FortAthenaAIBotSpawnerData_GetCoverComponent) == 0x000008, "Wrong size on FortAthenaAIBotSpawnerData_GetCoverComponent");
static_assert(offsetof(FortAthenaAIBotSpawnerData_GetCoverComponent, ReturnValue) == 0x000000, "Member 'FortAthenaAIBotSpawnerData_GetCoverComponent::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotSpawnerData.GetPerksComponent
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAIBotSpawnerData_GetPerksComponent final
{
public:
	class UFortAthenaAISpawnerDataComponent_PerksBase* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotSpawnerData_GetPerksComponent) == 0x000008, "Wrong alignment on FortAthenaAIBotSpawnerData_GetPerksComponent");
static_assert(sizeof(FortAthenaAIBotSpawnerData_GetPerksComponent) == 0x000008, "Wrong size on FortAthenaAIBotSpawnerData_GetPerksComponent");
static_assert(offsetof(FortAthenaAIBotSpawnerData_GetPerksComponent, ReturnValue) == 0x000000, "Member 'FortAthenaAIBotSpawnerData_GetPerksComponent::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotSpawnerData.GetSkillSetComponent
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAIBotSpawnerData_GetSkillSetComponent final
{
public:
	class UFortAthenaAISpawnerDataComponent_SkillsetBase* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotSpawnerData_GetSkillSetComponent) == 0x000008, "Wrong alignment on FortAthenaAIBotSpawnerData_GetSkillSetComponent");
static_assert(sizeof(FortAthenaAIBotSpawnerData_GetSkillSetComponent) == 0x000008, "Wrong size on FortAthenaAIBotSpawnerData_GetSkillSetComponent");
static_assert(offsetof(FortAthenaAIBotSpawnerData_GetSkillSetComponent, ReturnValue) == 0x000000, "Member 'FortAthenaAIBotSpawnerData_GetSkillSetComponent::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotSpawnerData.GetVehicleComponent
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAIBotSpawnerData_GetVehicleComponent final
{
public:
	class UFortAthenaAISpawnerDataComponent_VehicleBase* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotSpawnerData_GetVehicleComponent) == 0x000008, "Wrong alignment on FortAthenaAIBotSpawnerData_GetVehicleComponent");
static_assert(sizeof(FortAthenaAIBotSpawnerData_GetVehicleComponent) == 0x000008, "Wrong size on FortAthenaAIBotSpawnerData_GetVehicleComponent");
static_assert(offsetof(FortAthenaAIBotSpawnerData_GetVehicleComponent, ReturnValue) == 0x000000, "Member 'FortAthenaAIBotSpawnerData_GetVehicleComponent::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_AffiliationBase.GetFactionTag
// 0x0020 (0x0020 - 0x0000)
struct FortAthenaAISpawnerDataComponent_AffiliationBase_GetFactionTag final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_AffiliationBase_GetFactionTag) == 0x000008, "Wrong alignment on FortAthenaAISpawnerDataComponent_AffiliationBase_GetFactionTag");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_AffiliationBase_GetFactionTag) == 0x000020, "Wrong size on FortAthenaAISpawnerDataComponent_AffiliationBase_GetFactionTag");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_AffiliationBase_GetFactionTag, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_AffiliationBase_GetFactionTag::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_AffiliationBase.SetAwarenessPropagationIsBasedOnAlertLevel
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaAISpawnerDataComponent_AffiliationBase_SetAwarenessPropagationIsBasedOnAlertLevel final
{
public:
	bool                                          bInAwarenessPropagationIsBasedOnAlertLevel;        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_AffiliationBase_SetAwarenessPropagationIsBasedOnAlertLevel) == 0x000001, "Wrong alignment on FortAthenaAISpawnerDataComponent_AffiliationBase_SetAwarenessPropagationIsBasedOnAlertLevel");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_AffiliationBase_SetAwarenessPropagationIsBasedOnAlertLevel) == 0x000001, "Wrong size on FortAthenaAISpawnerDataComponent_AffiliationBase_SetAwarenessPropagationIsBasedOnAlertLevel");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_AffiliationBase_SetAwarenessPropagationIsBasedOnAlertLevel, bInAwarenessPropagationIsBasedOnAlertLevel) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_AffiliationBase_SetAwarenessPropagationIsBasedOnAlertLevel::bInAwarenessPropagationIsBasedOnAlertLevel' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_AffiliationBase.SetFactionTags
// 0x0020 (0x0020 - 0x0000)
struct FortAthenaAISpawnerDataComponent_AffiliationBase_SetFactionTags final
{
public:
	struct FGameplayTagContainer                  NewTags;                                           // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_AffiliationBase_SetFactionTags) == 0x000008, "Wrong alignment on FortAthenaAISpawnerDataComponent_AffiliationBase_SetFactionTags");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_AffiliationBase_SetFactionTags) == 0x000020, "Wrong size on FortAthenaAISpawnerDataComponent_AffiliationBase_SetFactionTags");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_AffiliationBase_SetFactionTags, NewTags) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_AffiliationBase_SetFactionTags::NewTags' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_AffiliationBase.SetFullTeamAwarenessPropagation
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaAISpawnerDataComponent_AffiliationBase_SetFullTeamAwarenessPropagation final
{
public:
	bool                                          bInFullTeamAwarenessPropagation;                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_AffiliationBase_SetFullTeamAwarenessPropagation) == 0x000001, "Wrong alignment on FortAthenaAISpawnerDataComponent_AffiliationBase_SetFullTeamAwarenessPropagation");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_AffiliationBase_SetFullTeamAwarenessPropagation) == 0x000001, "Wrong size on FortAthenaAISpawnerDataComponent_AffiliationBase_SetFullTeamAwarenessPropagation");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_AffiliationBase_SetFullTeamAwarenessPropagation, bInFullTeamAwarenessPropagation) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_AffiliationBase_SetFullTeamAwarenessPropagation::bInFullTeamAwarenessPropagation' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_AffiliationBase.SetFullTeamAwarenessPropagationDistance
// 0x0004 (0x0004 - 0x0000)
struct FortAthenaAISpawnerDataComponent_AffiliationBase_SetFullTeamAwarenessPropagationDistance final
{
public:
	float                                         InFullTeamAwarenessMaxDistance;                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_AffiliationBase_SetFullTeamAwarenessPropagationDistance) == 0x000004, "Wrong alignment on FortAthenaAISpawnerDataComponent_AffiliationBase_SetFullTeamAwarenessPropagationDistance");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_AffiliationBase_SetFullTeamAwarenessPropagationDistance) == 0x000004, "Wrong size on FortAthenaAISpawnerDataComponent_AffiliationBase_SetFullTeamAwarenessPropagationDistance");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_AffiliationBase_SetFullTeamAwarenessPropagationDistance, InFullTeamAwarenessMaxDistance) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_AffiliationBase_SetFullTeamAwarenessPropagationDistance::InFullTeamAwarenessMaxDistance' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_AffiliationBase.GetAwarenessPropagationIsBasedOnAlertLevel
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaAISpawnerDataComponent_AffiliationBase_GetAwarenessPropagationIsBasedOnAlertLevel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_AffiliationBase_GetAwarenessPropagationIsBasedOnAlertLevel) == 0x000001, "Wrong alignment on FortAthenaAISpawnerDataComponent_AffiliationBase_GetAwarenessPropagationIsBasedOnAlertLevel");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_AffiliationBase_GetAwarenessPropagationIsBasedOnAlertLevel) == 0x000001, "Wrong size on FortAthenaAISpawnerDataComponent_AffiliationBase_GetAwarenessPropagationIsBasedOnAlertLevel");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_AffiliationBase_GetAwarenessPropagationIsBasedOnAlertLevel, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_AffiliationBase_GetAwarenessPropagationIsBasedOnAlertLevel::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_AffiliationBase.GetFullTeamAwarenessMaxDistance
// 0x0004 (0x0004 - 0x0000)
struct FortAthenaAISpawnerDataComponent_AffiliationBase_GetFullTeamAwarenessMaxDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_AffiliationBase_GetFullTeamAwarenessMaxDistance) == 0x000004, "Wrong alignment on FortAthenaAISpawnerDataComponent_AffiliationBase_GetFullTeamAwarenessMaxDistance");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_AffiliationBase_GetFullTeamAwarenessMaxDistance) == 0x000004, "Wrong size on FortAthenaAISpawnerDataComponent_AffiliationBase_GetFullTeamAwarenessMaxDistance");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_AffiliationBase_GetFullTeamAwarenessMaxDistance, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_AffiliationBase_GetFullTeamAwarenessMaxDistance::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_AffiliationBase.GetFullTeamAwarenessPropagation
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaAISpawnerDataComponent_AffiliationBase_GetFullTeamAwarenessPropagation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_AffiliationBase_GetFullTeamAwarenessPropagation) == 0x000001, "Wrong alignment on FortAthenaAISpawnerDataComponent_AffiliationBase_GetFullTeamAwarenessPropagation");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_AffiliationBase_GetFullTeamAwarenessPropagation) == 0x000001, "Wrong size on FortAthenaAISpawnerDataComponent_AffiliationBase_GetFullTeamAwarenessPropagation");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_AffiliationBase_GetFullTeamAwarenessPropagation, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_AffiliationBase_GetFullTeamAwarenessPropagation::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_AIBotAffiliation.SetOverrideTeamIndex
// 0x0004 (0x0004 - 0x0000)
struct FortAthenaAISpawnerDataComponent_AIBotAffiliation_SetOverrideTeamIndex final
{
public:
	int32                                         InOverrideTeamIdx;                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_AIBotAffiliation_SetOverrideTeamIndex) == 0x000004, "Wrong alignment on FortAthenaAISpawnerDataComponent_AIBotAffiliation_SetOverrideTeamIndex");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_AIBotAffiliation_SetOverrideTeamIndex) == 0x000004, "Wrong size on FortAthenaAISpawnerDataComponent_AIBotAffiliation_SetOverrideTeamIndex");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_AIBotAffiliation_SetOverrideTeamIndex, InOverrideTeamIdx) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_AIBotAffiliation_SetOverrideTeamIndex::InOverrideTeamIdx' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_AIBotAffiliation.GetSquadID
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAISpawnerDataComponent_AIBotAffiliation_GetSquadID final
{
public:
	int32                                         OutSquadId;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_AIBotAffiliation_GetSquadID) == 0x000004, "Wrong alignment on FortAthenaAISpawnerDataComponent_AIBotAffiliation_GetSquadID");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_AIBotAffiliation_GetSquadID) == 0x000008, "Wrong size on FortAthenaAISpawnerDataComponent_AIBotAffiliation_GetSquadID");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_AIBotAffiliation_GetSquadID, OutSquadId) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_AIBotAffiliation_GetSquadID::OutSquadId' has a wrong offset!");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_AIBotAffiliation_GetSquadID, ReturnValue) == 0x000004, "Member 'FortAthenaAISpawnerDataComponent_AIBotAffiliation_GetSquadID::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_AIBotAffiliation.GetTeamID
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAISpawnerDataComponent_AIBotAffiliation_GetTeamID final
{
public:
	int32                                         OutTeamId;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_AIBotAffiliation_GetTeamID) == 0x000004, "Wrong alignment on FortAthenaAISpawnerDataComponent_AIBotAffiliation_GetTeamID");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_AIBotAffiliation_GetTeamID) == 0x000008, "Wrong size on FortAthenaAISpawnerDataComponent_AIBotAffiliation_GetTeamID");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_AIBotAffiliation_GetTeamID, OutTeamId) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_AIBotAffiliation_GetTeamID::OutTeamId' has a wrong offset!");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_AIBotAffiliation_GetTeamID, ReturnValue) == 0x000004, "Member 'FortAthenaAISpawnerDataComponent_AIBotAffiliation_GetTeamID::ReturnValue' has a wrong offset!");

// Function FortniteAI.DespawnExpiredPawnComponent.AddDespawnRift
// 0x0008 (0x0008 - 0x0000)
struct DespawnExpiredPawnComponent_AddDespawnRift final
{
public:
	class ABuildingRift*                          NewRift;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DespawnExpiredPawnComponent_AddDespawnRift) == 0x000008, "Wrong alignment on DespawnExpiredPawnComponent_AddDespawnRift");
static_assert(sizeof(DespawnExpiredPawnComponent_AddDespawnRift) == 0x000008, "Wrong size on DespawnExpiredPawnComponent_AddDespawnRift");
static_assert(offsetof(DespawnExpiredPawnComponent_AddDespawnRift, NewRift) == 0x000000, "Member 'DespawnExpiredPawnComponent_AddDespawnRift::NewRift' has a wrong offset!");

// Function FortniteAI.DespawnExpiredPawnComponent.GetDespawnRifts
// 0x0010 (0x0010 - 0x0000)
struct DespawnExpiredPawnComponent_GetDespawnRifts final
{
public:
	TArray<class ABuildingRift*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DespawnExpiredPawnComponent_GetDespawnRifts) == 0x000008, "Wrong alignment on DespawnExpiredPawnComponent_GetDespawnRifts");
static_assert(sizeof(DespawnExpiredPawnComponent_GetDespawnRifts) == 0x000010, "Wrong size on DespawnExpiredPawnComponent_GetDespawnRifts");
static_assert(offsetof(DespawnExpiredPawnComponent_GetDespawnRifts, ReturnValue) == 0x000000, "Member 'DespawnExpiredPawnComponent_GetDespawnRifts::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIComponent_Voice.SetVoiceSoundBank
// 0x0008 (0x0008 - 0x0000)
struct FortAIComponent_Voice_SetVoiceSoundBank final
{
public:
	class UFortTaggedSoundBank*                   InSoundBank;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIComponent_Voice_SetVoiceSoundBank) == 0x000008, "Wrong alignment on FortAIComponent_Voice_SetVoiceSoundBank");
static_assert(sizeof(FortAIComponent_Voice_SetVoiceSoundBank) == 0x000008, "Wrong size on FortAIComponent_Voice_SetVoiceSoundBank");
static_assert(offsetof(FortAIComponent_Voice_SetVoiceSoundBank, InSoundBank) == 0x000000, "Member 'FortAIComponent_Voice_SetVoiceSoundBank::InSoundBank' has a wrong offset!");

// Function FortniteAI.FortAIComponent_Voice.GetVoiceSoundBank
// 0x0008 (0x0008 - 0x0000)
struct FortAIComponent_Voice_GetVoiceSoundBank final
{
public:
	class UFortTaggedSoundBank*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIComponent_Voice_GetVoiceSoundBank) == 0x000008, "Wrong alignment on FortAIComponent_Voice_GetVoiceSoundBank");
static_assert(sizeof(FortAIComponent_Voice_GetVoiceSoundBank) == 0x000008, "Wrong size on FortAIComponent_Voice_GetVoiceSoundBank");
static_assert(offsetof(FortAIComponent_Voice_GetVoiceSoundBank, ReturnValue) == 0x000000, "Member 'FortAIComponent_Voice_GetVoiceSoundBank::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortEnvQueryManager.OnGamePhaseChanged
// 0x0001 (0x0001 - 0x0000)
struct FortEnvQueryManager_OnGamePhaseChanged final
{
public:
	EAthenaGamePhase                              GamePhase;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEnvQueryManager_OnGamePhaseChanged) == 0x000001, "Wrong alignment on FortEnvQueryManager_OnGamePhaseChanged");
static_assert(sizeof(FortEnvQueryManager_OnGamePhaseChanged) == 0x000001, "Wrong size on FortEnvQueryManager_OnGamePhaseChanged");
static_assert(offsetof(FortEnvQueryManager_OnGamePhaseChanged, GamePhase) == 0x000000, "Member 'FortEnvQueryManager_OnGamePhaseChanged::GamePhase' has a wrong offset!");

// Function FortniteAI.FortAIDirectorDataManager.TriggerEvent
// 0x0020 (0x0020 - 0x0000)
struct FortAIDirectorDataManager_TriggerEvent final
{
public:
	struct FFortAIDirectorEvent                   TriggeredEvent;                                    // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirectorDataManager_TriggerEvent) == 0x000008, "Wrong alignment on FortAIDirectorDataManager_TriggerEvent");
static_assert(sizeof(FortAIDirectorDataManager_TriggerEvent) == 0x000020, "Wrong size on FortAIDirectorDataManager_TriggerEvent");
static_assert(offsetof(FortAIDirectorDataManager_TriggerEvent, TriggeredEvent) == 0x000000, "Member 'FortAIDirectorDataManager_TriggerEvent::TriggeredEvent' has a wrong offset!");

// Function FortniteAI.FortAIDirectorDataManager.GetAIDirectorFactorValue
// 0x0008 (0x0008 - 0x0000)
struct FortAIDirectorDataManager_GetAIDirectorFactorValue final
{
public:
	EFortAIDirectorFactor                         AIDirectorFactor;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirectorDataManager_GetAIDirectorFactorValue) == 0x000004, "Wrong alignment on FortAIDirectorDataManager_GetAIDirectorFactorValue");
static_assert(sizeof(FortAIDirectorDataManager_GetAIDirectorFactorValue) == 0x000008, "Wrong size on FortAIDirectorDataManager_GetAIDirectorFactorValue");
static_assert(offsetof(FortAIDirectorDataManager_GetAIDirectorFactorValue, AIDirectorFactor) == 0x000000, "Member 'FortAIDirectorDataManager_GetAIDirectorFactorValue::AIDirectorFactor' has a wrong offset!");
static_assert(offsetof(FortAIDirectorDataManager_GetAIDirectorFactorValue, ReturnValue) == 0x000004, "Member 'FortAIDirectorDataManager_GetAIDirectorFactorValue::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIEncounterInfo.CreateEncounterAssignment
// 0x0018 (0x0018 - 0x0000)
struct FortAIEncounterInfo_CreateEncounterAssignment final
{
public:
	class UFortAIAssignmentSettings*              AssignmentSettings;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 GoalActor;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAIAssignment*                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfo_CreateEncounterAssignment) == 0x000008, "Wrong alignment on FortAIEncounterInfo_CreateEncounterAssignment");
static_assert(sizeof(FortAIEncounterInfo_CreateEncounterAssignment) == 0x000018, "Wrong size on FortAIEncounterInfo_CreateEncounterAssignment");
static_assert(offsetof(FortAIEncounterInfo_CreateEncounterAssignment, AssignmentSettings) == 0x000000, "Member 'FortAIEncounterInfo_CreateEncounterAssignment::AssignmentSettings' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_CreateEncounterAssignment, GoalActor) == 0x000008, "Member 'FortAIEncounterInfo_CreateEncounterAssignment::GoalActor' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_CreateEncounterAssignment, ReturnValue) == 0x000010, "Member 'FortAIEncounterInfo_CreateEncounterAssignment::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIEncounterInfo.GetEncounterDataManager
// 0x0008 (0x0008 - 0x0000)
struct FortAIEncounterInfo_GetEncounterDataManager final
{
public:
	class AFortAIDirectorDataManager*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfo_GetEncounterDataManager) == 0x000008, "Wrong alignment on FortAIEncounterInfo_GetEncounterDataManager");
static_assert(sizeof(FortAIEncounterInfo_GetEncounterDataManager) == 0x000008, "Wrong size on FortAIEncounterInfo_GetEncounterDataManager");
static_assert(offsetof(FortAIEncounterInfo_GetEncounterDataManager, ReturnValue) == 0x000000, "Member 'FortAIEncounterInfo_GetEncounterDataManager::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIEncounterInfo.GetEncounterTimeSeconds
// 0x0004 (0x0004 - 0x0000)
struct FortAIEncounterInfo_GetEncounterTimeSeconds final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfo_GetEncounterTimeSeconds) == 0x000004, "Wrong alignment on FortAIEncounterInfo_GetEncounterTimeSeconds");
static_assert(sizeof(FortAIEncounterInfo_GetEncounterTimeSeconds) == 0x000004, "Wrong size on FortAIEncounterInfo_GetEncounterTimeSeconds");
static_assert(offsetof(FortAIEncounterInfo_GetEncounterTimeSeconds, ReturnValue) == 0x000000, "Member 'FortAIEncounterInfo_GetEncounterTimeSeconds::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIEncounterInfo.GroupHasAIRemainingToSpawn
// 0x0080 (0x0080 - 0x0000)
struct FortAIEncounterInfo_GroupHasAIRemainingToSpawn final
{
public:
	struct FFortAISpawnerData                     FortAISpawnerData;                                 // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIEncounterInfo_GroupHasAIRemainingToSpawn) == 0x000008, "Wrong alignment on FortAIEncounterInfo_GroupHasAIRemainingToSpawn");
static_assert(sizeof(FortAIEncounterInfo_GroupHasAIRemainingToSpawn) == 0x000080, "Wrong size on FortAIEncounterInfo_GroupHasAIRemainingToSpawn");
static_assert(offsetof(FortAIEncounterInfo_GroupHasAIRemainingToSpawn, FortAISpawnerData) == 0x000000, "Member 'FortAIEncounterInfo_GroupHasAIRemainingToSpawn::FortAISpawnerData' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_GroupHasAIRemainingToSpawn, ReturnValue) == 0x000078, "Member 'FortAIEncounterInfo_GroupHasAIRemainingToSpawn::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIEncounterInfo.NotifyRiftDied
// 0x0060 (0x0060 - 0x0000)
struct FortAIEncounterInfo_NotifyRiftDied final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfo_NotifyRiftDied) == 0x000008, "Wrong alignment on FortAIEncounterInfo_NotifyRiftDied");
static_assert(sizeof(FortAIEncounterInfo_NotifyRiftDied) == 0x000060, "Wrong size on FortAIEncounterInfo_NotifyRiftDied");
static_assert(offsetof(FortAIEncounterInfo_NotifyRiftDied, DamagedActor) == 0x000000, "Member 'FortAIEncounterInfo_NotifyRiftDied::DamagedActor' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_NotifyRiftDied, Damage) == 0x000008, "Member 'FortAIEncounterInfo_NotifyRiftDied::Damage' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_NotifyRiftDied, InstigatedBy) == 0x000010, "Member 'FortAIEncounterInfo_NotifyRiftDied::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_NotifyRiftDied, DamageCauser) == 0x000018, "Member 'FortAIEncounterInfo_NotifyRiftDied::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_NotifyRiftDied, HitLocation) == 0x000020, "Member 'FortAIEncounterInfo_NotifyRiftDied::HitLocation' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_NotifyRiftDied, FHitComponent) == 0x000038, "Member 'FortAIEncounterInfo_NotifyRiftDied::FHitComponent' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_NotifyRiftDied, BoneName) == 0x000040, "Member 'FortAIEncounterInfo_NotifyRiftDied::BoneName' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_NotifyRiftDied, Momentum) == 0x000048, "Member 'FortAIEncounterInfo_NotifyRiftDied::Momentum' has a wrong offset!");

// Function FortniteAI.FortAIEncounterInfo.OnEncounterPawnDamaged
// 0x0060 (0x0060 - 0x0000)
struct FortAIEncounterInfo_OnEncounterPawnDamaged final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfo_OnEncounterPawnDamaged) == 0x000008, "Wrong alignment on FortAIEncounterInfo_OnEncounterPawnDamaged");
static_assert(sizeof(FortAIEncounterInfo_OnEncounterPawnDamaged) == 0x000060, "Wrong size on FortAIEncounterInfo_OnEncounterPawnDamaged");
static_assert(offsetof(FortAIEncounterInfo_OnEncounterPawnDamaged, DamagedActor) == 0x000000, "Member 'FortAIEncounterInfo_OnEncounterPawnDamaged::DamagedActor' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_OnEncounterPawnDamaged, Damage) == 0x000008, "Member 'FortAIEncounterInfo_OnEncounterPawnDamaged::Damage' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_OnEncounterPawnDamaged, InstigatedBy) == 0x000010, "Member 'FortAIEncounterInfo_OnEncounterPawnDamaged::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_OnEncounterPawnDamaged, DamageCauser) == 0x000018, "Member 'FortAIEncounterInfo_OnEncounterPawnDamaged::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_OnEncounterPawnDamaged, HitLocation) == 0x000020, "Member 'FortAIEncounterInfo_OnEncounterPawnDamaged::HitLocation' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_OnEncounterPawnDamaged, FHitComponent) == 0x000038, "Member 'FortAIEncounterInfo_OnEncounterPawnDamaged::FHitComponent' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_OnEncounterPawnDamaged, BoneName) == 0x000040, "Member 'FortAIEncounterInfo_OnEncounterPawnDamaged::BoneName' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_OnEncounterPawnDamaged, Momentum) == 0x000048, "Member 'FortAIEncounterInfo_OnEncounterPawnDamaged::Momentum' has a wrong offset!");

// Function FortniteAI.FortAIEncounterInfo.OnGoalTakeDamage
// 0x0060 (0x0060 - 0x0000)
struct FortAIEncounterInfo_OnGoalTakeDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfo_OnGoalTakeDamage) == 0x000008, "Wrong alignment on FortAIEncounterInfo_OnGoalTakeDamage");
static_assert(sizeof(FortAIEncounterInfo_OnGoalTakeDamage) == 0x000060, "Wrong size on FortAIEncounterInfo_OnGoalTakeDamage");
static_assert(offsetof(FortAIEncounterInfo_OnGoalTakeDamage, DamagedActor) == 0x000000, "Member 'FortAIEncounterInfo_OnGoalTakeDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_OnGoalTakeDamage, Damage) == 0x000008, "Member 'FortAIEncounterInfo_OnGoalTakeDamage::Damage' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_OnGoalTakeDamage, InstigatedBy) == 0x000010, "Member 'FortAIEncounterInfo_OnGoalTakeDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_OnGoalTakeDamage, DamageCauser) == 0x000018, "Member 'FortAIEncounterInfo_OnGoalTakeDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_OnGoalTakeDamage, HitLocation) == 0x000020, "Member 'FortAIEncounterInfo_OnGoalTakeDamage::HitLocation' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_OnGoalTakeDamage, FHitComponent) == 0x000038, "Member 'FortAIEncounterInfo_OnGoalTakeDamage::FHitComponent' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_OnGoalTakeDamage, BoneName) == 0x000040, "Member 'FortAIEncounterInfo_OnGoalTakeDamage::BoneName' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_OnGoalTakeDamage, Momentum) == 0x000048, "Member 'FortAIEncounterInfo_OnGoalTakeDamage::Momentum' has a wrong offset!");

// Function FortniteAI.FortAIEncounterInfo.RegisterAISpawner
// 0x0008 (0x0008 - 0x0000)
struct FortAIEncounterInfo_RegisterAISpawner final
{
public:
	class AActor*                                 InAISpawner;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfo_RegisterAISpawner) == 0x000008, "Wrong alignment on FortAIEncounterInfo_RegisterAISpawner");
static_assert(sizeof(FortAIEncounterInfo_RegisterAISpawner) == 0x000008, "Wrong size on FortAIEncounterInfo_RegisterAISpawner");
static_assert(offsetof(FortAIEncounterInfo_RegisterAISpawner, InAISpawner) == 0x000000, "Member 'FortAIEncounterInfo_RegisterAISpawner::InAISpawner' has a wrong offset!");

// Function FortniteAI.FortAIEncounterInfo.RequestActivation
// 0x0004 (0x0004 - 0x0000)
struct FortAIEncounterInfo_RequestActivation final
{
public:
	int32                                         ActivationDelay;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfo_RequestActivation) == 0x000004, "Wrong alignment on FortAIEncounterInfo_RequestActivation");
static_assert(sizeof(FortAIEncounterInfo_RequestActivation) == 0x000004, "Wrong size on FortAIEncounterInfo_RequestActivation");
static_assert(offsetof(FortAIEncounterInfo_RequestActivation, ActivationDelay) == 0x000000, "Member 'FortAIEncounterInfo_RequestActivation::ActivationDelay' has a wrong offset!");

// Function FortniteAI.FortAIEncounterInfo.SetEncounterActivationState
// 0x0001 (0x0001 - 0x0000)
struct FortAIEncounterInfo_SetEncounterActivationState final
{
public:
	bool                                          bEncounterActivityState;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfo_SetEncounterActivationState) == 0x000001, "Wrong alignment on FortAIEncounterInfo_SetEncounterActivationState");
static_assert(sizeof(FortAIEncounterInfo_SetEncounterActivationState) == 0x000001, "Wrong size on FortAIEncounterInfo_SetEncounterActivationState");
static_assert(offsetof(FortAIEncounterInfo_SetEncounterActivationState, bEncounterActivityState) == 0x000000, "Member 'FortAIEncounterInfo_SetEncounterActivationState::bEncounterActivityState' has a wrong offset!");

// Function FortniteAI.FortAIEncounterInfo.SetNukeWavesAtEncounterEnd
// 0x0001 (0x0001 - 0x0000)
struct FortAIEncounterInfo_SetNukeWavesAtEncounterEnd final
{
public:
	bool                                          bNuke;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfo_SetNukeWavesAtEncounterEnd) == 0x000001, "Wrong alignment on FortAIEncounterInfo_SetNukeWavesAtEncounterEnd");
static_assert(sizeof(FortAIEncounterInfo_SetNukeWavesAtEncounterEnd) == 0x000001, "Wrong size on FortAIEncounterInfo_SetNukeWavesAtEncounterEnd");
static_assert(offsetof(FortAIEncounterInfo_SetNukeWavesAtEncounterEnd, bNuke) == 0x000000, "Member 'FortAIEncounterInfo_SetNukeWavesAtEncounterEnd::bNuke' has a wrong offset!");

// Function FortniteAI.FortAIEncounterInfo.SetPawnNumberLimit
// 0x0004 (0x0004 - 0x0000)
struct FortAIEncounterInfo_SetPawnNumberLimit final
{
public:
	int32                                         InPawnNumberLimit;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfo_SetPawnNumberLimit) == 0x000004, "Wrong alignment on FortAIEncounterInfo_SetPawnNumberLimit");
static_assert(sizeof(FortAIEncounterInfo_SetPawnNumberLimit) == 0x000004, "Wrong size on FortAIEncounterInfo_SetPawnNumberLimit");
static_assert(offsetof(FortAIEncounterInfo_SetPawnNumberLimit, InPawnNumberLimit) == 0x000000, "Member 'FortAIEncounterInfo_SetPawnNumberLimit::InPawnNumberLimit' has a wrong offset!");

// Function FortniteAI.FortAIEncounterInfo.SpawnAIPawnReservedForEnemySpawner
// 0x0040 (0x0040 - 0x0000)
struct FortAIEncounterInfo_SpawnAIPawnReservedForEnemySpawner final
{
public:
	class AActor*                                 EnemySpawner;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnRotation;                                     // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AFortAIPawn*                            ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfo_SpawnAIPawnReservedForEnemySpawner) == 0x000008, "Wrong alignment on FortAIEncounterInfo_SpawnAIPawnReservedForEnemySpawner");
static_assert(sizeof(FortAIEncounterInfo_SpawnAIPawnReservedForEnemySpawner) == 0x000040, "Wrong size on FortAIEncounterInfo_SpawnAIPawnReservedForEnemySpawner");
static_assert(offsetof(FortAIEncounterInfo_SpawnAIPawnReservedForEnemySpawner, EnemySpawner) == 0x000000, "Member 'FortAIEncounterInfo_SpawnAIPawnReservedForEnemySpawner::EnemySpawner' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_SpawnAIPawnReservedForEnemySpawner, SpawnLocation) == 0x000008, "Member 'FortAIEncounterInfo_SpawnAIPawnReservedForEnemySpawner::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_SpawnAIPawnReservedForEnemySpawner, SpawnRotation) == 0x000020, "Member 'FortAIEncounterInfo_SpawnAIPawnReservedForEnemySpawner::SpawnRotation' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_SpawnAIPawnReservedForEnemySpawner, ReturnValue) == 0x000038, "Member 'FortAIEncounterInfo_SpawnAIPawnReservedForEnemySpawner::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIEncounterInfo.SpawnTestAIGroup
// 0x00B8 (0x00B8 - 0x0000)
struct FortAIEncounterInfo_SpawnTestAIGroup final
{
public:
	const class UFortAISpawnGroup*                SpawnGroupToSpawn;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnRotation;                                     // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 SpawnSource;                                       // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortAbilitySet*>                AbilitySetsToGrantOnSpawn;                         // 0x0040(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FFortAISpawnGroupUpgradeData           UpgradeData;                                       // 0x0050(0x0060)(Parm, NativeAccessSpecifierPublic)
	bool                                          bAllowAssigningToExternalSpawners;                 // 0x00B0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SecondsBetweenSpawns;                              // 0x00B4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfo_SpawnTestAIGroup) == 0x000008, "Wrong alignment on FortAIEncounterInfo_SpawnTestAIGroup");
static_assert(sizeof(FortAIEncounterInfo_SpawnTestAIGroup) == 0x0000B8, "Wrong size on FortAIEncounterInfo_SpawnTestAIGroup");
static_assert(offsetof(FortAIEncounterInfo_SpawnTestAIGroup, SpawnGroupToSpawn) == 0x000000, "Member 'FortAIEncounterInfo_SpawnTestAIGroup::SpawnGroupToSpawn' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_SpawnTestAIGroup, SpawnLocation) == 0x000008, "Member 'FortAIEncounterInfo_SpawnTestAIGroup::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_SpawnTestAIGroup, SpawnRotation) == 0x000020, "Member 'FortAIEncounterInfo_SpawnTestAIGroup::SpawnRotation' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_SpawnTestAIGroup, SpawnSource) == 0x000038, "Member 'FortAIEncounterInfo_SpawnTestAIGroup::SpawnSource' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_SpawnTestAIGroup, AbilitySetsToGrantOnSpawn) == 0x000040, "Member 'FortAIEncounterInfo_SpawnTestAIGroup::AbilitySetsToGrantOnSpawn' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_SpawnTestAIGroup, UpgradeData) == 0x000050, "Member 'FortAIEncounterInfo_SpawnTestAIGroup::UpgradeData' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_SpawnTestAIGroup, bAllowAssigningToExternalSpawners) == 0x0000B0, "Member 'FortAIEncounterInfo_SpawnTestAIGroup::bAllowAssigningToExternalSpawners' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_SpawnTestAIGroup, SecondsBetweenSpawns) == 0x0000B4, "Member 'FortAIEncounterInfo_SpawnTestAIGroup::SecondsBetweenSpawns' has a wrong offset!");

// Function FortniteAI.FortAIEncounterInfo.UnRegisterAISpawner
// 0x0008 (0x0008 - 0x0000)
struct FortAIEncounterInfo_UnRegisterAISpawner final
{
public:
	class AActor*                                 InAISpawner;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfo_UnRegisterAISpawner) == 0x000008, "Wrong alignment on FortAIEncounterInfo_UnRegisterAISpawner");
static_assert(sizeof(FortAIEncounterInfo_UnRegisterAISpawner) == 0x000008, "Wrong size on FortAIEncounterInfo_UnRegisterAISpawner");
static_assert(offsetof(FortAIEncounterInfo_UnRegisterAISpawner, InAISpawner) == 0x000000, "Member 'FortAIEncounterInfo_UnRegisterAISpawner::InAISpawner' has a wrong offset!");

// Function FortniteAI.FortAIEncounterInfo.EncounterHasReservedSpawnRequestForEnemySpawner
// 0x0010 (0x0010 - 0x0000)
struct FortAIEncounterInfo_EncounterHasReservedSpawnRequestForEnemySpawner final
{
public:
	class AActor*                                 EnemySpawner;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIEncounterInfo_EncounterHasReservedSpawnRequestForEnemySpawner) == 0x000008, "Wrong alignment on FortAIEncounterInfo_EncounterHasReservedSpawnRequestForEnemySpawner");
static_assert(sizeof(FortAIEncounterInfo_EncounterHasReservedSpawnRequestForEnemySpawner) == 0x000010, "Wrong size on FortAIEncounterInfo_EncounterHasReservedSpawnRequestForEnemySpawner");
static_assert(offsetof(FortAIEncounterInfo_EncounterHasReservedSpawnRequestForEnemySpawner, EnemySpawner) == 0x000000, "Member 'FortAIEncounterInfo_EncounterHasReservedSpawnRequestForEnemySpawner::EnemySpawner' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_EncounterHasReservedSpawnRequestForEnemySpawner, ReturnValue) == 0x000008, "Member 'FortAIEncounterInfo_EncounterHasReservedSpawnRequestForEnemySpawner::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIEncounterInfo.GetCurrentSpawnAreaDirections
// 0x0018 (0x0018 - 0x0000)
struct FortAIEncounterInfo_GetCurrentSpawnAreaDirections final
{
public:
	TArray<EFortEncounterDirection>               OutDirections;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIEncounterInfo_GetCurrentSpawnAreaDirections) == 0x000008, "Wrong alignment on FortAIEncounterInfo_GetCurrentSpawnAreaDirections");
static_assert(sizeof(FortAIEncounterInfo_GetCurrentSpawnAreaDirections) == 0x000018, "Wrong size on FortAIEncounterInfo_GetCurrentSpawnAreaDirections");
static_assert(offsetof(FortAIEncounterInfo_GetCurrentSpawnAreaDirections, OutDirections) == 0x000000, "Member 'FortAIEncounterInfo_GetCurrentSpawnAreaDirections::OutDirections' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_GetCurrentSpawnAreaDirections, ReturnValue) == 0x000010, "Member 'FortAIEncounterInfo_GetCurrentSpawnAreaDirections::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIEncounterInfo.GetEncounterAssignmentGoalActors
// 0x0010 (0x0010 - 0x0000)
struct FortAIEncounterInfo_GetEncounterAssignmentGoalActors final
{
public:
	TArray<class AActor*>                         OutGoalActors;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfo_GetEncounterAssignmentGoalActors) == 0x000008, "Wrong alignment on FortAIEncounterInfo_GetEncounterAssignmentGoalActors");
static_assert(sizeof(FortAIEncounterInfo_GetEncounterAssignmentGoalActors) == 0x000010, "Wrong size on FortAIEncounterInfo_GetEncounterAssignmentGoalActors");
static_assert(offsetof(FortAIEncounterInfo_GetEncounterAssignmentGoalActors, OutGoalActors) == 0x000000, "Member 'FortAIEncounterInfo_GetEncounterAssignmentGoalActors::OutGoalActors' has a wrong offset!");

// Function FortniteAI.FortAIEncounterInfo.GetEncounterGameplayTags
// 0x0020 (0x0020 - 0x0000)
struct FortAIEncounterInfo_GetEncounterGameplayTags final
{
public:
	struct FGameplayTagContainer                  OutEncounterTags;                                  // 0x0000(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfo_GetEncounterGameplayTags) == 0x000008, "Wrong alignment on FortAIEncounterInfo_GetEncounterGameplayTags");
static_assert(sizeof(FortAIEncounterInfo_GetEncounterGameplayTags) == 0x000020, "Wrong size on FortAIEncounterInfo_GetEncounterGameplayTags");
static_assert(offsetof(FortAIEncounterInfo_GetEncounterGameplayTags, OutEncounterTags) == 0x000000, "Member 'FortAIEncounterInfo_GetEncounterGameplayTags::OutEncounterTags' has a wrong offset!");

// Function FortniteAI.FortAIEncounterInfo.GetEncounterQueryActor
// 0x0008 (0x0008 - 0x0000)
struct FortAIEncounterInfo_GetEncounterQueryActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfo_GetEncounterQueryActor) == 0x000008, "Wrong alignment on FortAIEncounterInfo_GetEncounterQueryActor");
static_assert(sizeof(FortAIEncounterInfo_GetEncounterQueryActor) == 0x000008, "Wrong size on FortAIEncounterInfo_GetEncounterQueryActor");
static_assert(offsetof(FortAIEncounterInfo_GetEncounterQueryActor, ReturnValue) == 0x000000, "Member 'FortAIEncounterInfo_GetEncounterQueryActor::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIEncounterInfo.GetEncounterRifts
// 0x0010 (0x0010 - 0x0000)
struct FortAIEncounterInfo_GetEncounterRifts final
{
public:
	TArray<class ABuildingRift*>                  OutRifts;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfo_GetEncounterRifts) == 0x000008, "Wrong alignment on FortAIEncounterInfo_GetEncounterRifts");
static_assert(sizeof(FortAIEncounterInfo_GetEncounterRifts) == 0x000010, "Wrong size on FortAIEncounterInfo_GetEncounterRifts");
static_assert(offsetof(FortAIEncounterInfo_GetEncounterRifts, OutRifts) == 0x000000, "Member 'FortAIEncounterInfo_GetEncounterRifts::OutRifts' has a wrong offset!");

// Function FortniteAI.FortAIEncounterInfo.GetPawnNumberLimit
// 0x0004 (0x0004 - 0x0000)
struct FortAIEncounterInfo_GetPawnNumberLimit final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfo_GetPawnNumberLimit) == 0x000004, "Wrong alignment on FortAIEncounterInfo_GetPawnNumberLimit");
static_assert(sizeof(FortAIEncounterInfo_GetPawnNumberLimit) == 0x000004, "Wrong size on FortAIEncounterInfo_GetPawnNumberLimit");
static_assert(offsetof(FortAIEncounterInfo_GetPawnNumberLimit, ReturnValue) == 0x000000, "Member 'FortAIEncounterInfo_GetPawnNumberLimit::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIEncounterRiftManager.GetAssociatedMission
// 0x0008 (0x0008 - 0x0000)
struct FortAIEncounterRiftManager_GetAssociatedMission final
{
public:
	class AFortMission*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterRiftManager_GetAssociatedMission) == 0x000008, "Wrong alignment on FortAIEncounterRiftManager_GetAssociatedMission");
static_assert(sizeof(FortAIEncounterRiftManager_GetAssociatedMission) == 0x000008, "Wrong size on FortAIEncounterRiftManager_GetAssociatedMission");
static_assert(offsetof(FortAIEncounterRiftManager_GetAssociatedMission, ReturnValue) == 0x000000, "Member 'FortAIEncounterRiftManager_GetAssociatedMission::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIEncounterSequence.Last
// 0x0001 (0x0001 - 0x0000)
struct FortAIEncounterSequence_Last final
{
public:
	EFortEncounterSequenceResult                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterSequence_Last) == 0x000001, "Wrong alignment on FortAIEncounterSequence_Last");
static_assert(sizeof(FortAIEncounterSequence_Last) == 0x000001, "Wrong size on FortAIEncounterSequence_Last");
static_assert(offsetof(FortAIEncounterSequence_Last, ReturnValue) == 0x000000, "Member 'FortAIEncounterSequence_Last::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIEncounterSequence.Next
// 0x0001 (0x0001 - 0x0000)
struct FortAIEncounterSequence_Next final
{
public:
	EFortEncounterSequenceResult                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterSequence_Next) == 0x000001, "Wrong alignment on FortAIEncounterSequence_Next");
static_assert(sizeof(FortAIEncounterSequence_Next) == 0x000001, "Wrong size on FortAIEncounterSequence_Next");
static_assert(offsetof(FortAIEncounterSequence_Next, ReturnValue) == 0x000000, "Member 'FortAIEncounterSequence_Next::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIEncounterSequence.Previous
// 0x0001 (0x0001 - 0x0000)
struct FortAIEncounterSequence_Previous final
{
public:
	EFortEncounterSequenceResult                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterSequence_Previous) == 0x000001, "Wrong alignment on FortAIEncounterSequence_Previous");
static_assert(sizeof(FortAIEncounterSequence_Previous) == 0x000001, "Wrong size on FortAIEncounterSequence_Previous");
static_assert(offsetof(FortAIEncounterSequence_Previous, ReturnValue) == 0x000000, "Member 'FortAIEncounterSequence_Previous::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIEncounterSequence.SetEncounterStartingData
// 0x0120 (0x0120 - 0x0000)
struct FortAIEncounterSequence_SetEncounterStartingData final
{
public:
	TArray<class AActor*>                         InTargetActors;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UFortAIAssignmentSettings*              InAssignmentSettings;                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEncounterEnvironmentQueryInfo         InOverrideEnvironmentQueryInfo;                    // 0x0018(0x0028)(Parm, NativeAccessSpecifierPublic)
	class AActor*                                 InOptionalQueryActor;                              // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  InInjectedTags;                                    // 0x0048(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FFortEncounterSettings                 InEncounterSettings;                               // 0x0068(0x00B8)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterSequence_SetEncounterStartingData) == 0x000008, "Wrong alignment on FortAIEncounterSequence_SetEncounterStartingData");
static_assert(sizeof(FortAIEncounterSequence_SetEncounterStartingData) == 0x000120, "Wrong size on FortAIEncounterSequence_SetEncounterStartingData");
static_assert(offsetof(FortAIEncounterSequence_SetEncounterStartingData, InTargetActors) == 0x000000, "Member 'FortAIEncounterSequence_SetEncounterStartingData::InTargetActors' has a wrong offset!");
static_assert(offsetof(FortAIEncounterSequence_SetEncounterStartingData, InAssignmentSettings) == 0x000010, "Member 'FortAIEncounterSequence_SetEncounterStartingData::InAssignmentSettings' has a wrong offset!");
static_assert(offsetof(FortAIEncounterSequence_SetEncounterStartingData, InOverrideEnvironmentQueryInfo) == 0x000018, "Member 'FortAIEncounterSequence_SetEncounterStartingData::InOverrideEnvironmentQueryInfo' has a wrong offset!");
static_assert(offsetof(FortAIEncounterSequence_SetEncounterStartingData, InOptionalQueryActor) == 0x000040, "Member 'FortAIEncounterSequence_SetEncounterStartingData::InOptionalQueryActor' has a wrong offset!");
static_assert(offsetof(FortAIEncounterSequence_SetEncounterStartingData, InInjectedTags) == 0x000048, "Member 'FortAIEncounterSequence_SetEncounterStartingData::InInjectedTags' has a wrong offset!");
static_assert(offsetof(FortAIEncounterSequence_SetEncounterStartingData, InEncounterSettings) == 0x000068, "Member 'FortAIEncounterSequence_SetEncounterStartingData::InEncounterSettings' has a wrong offset!");

// Function FortniteAI.FortAIEncounterSequence.StartCurrentEncounter
// 0x0138 (0x0138 - 0x0000)
struct FortAIEncounterSequence_StartCurrentEncounter final
{
public:
	EFortEncounterSequenceResult                  OutRequestResult;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         InTargetActors;                                    // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UFortAIAssignmentSettings*              InAssignmentSettings;                              // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEncounterEnvironmentQueryInfo         InOverrideEnvironmentQueryInfo;                    // 0x0020(0x0028)(Parm, NativeAccessSpecifierPublic)
	class AActor*                                 InOptionalQueryActor;                              // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  InInjectedTags;                                    // 0x0050(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FFortEncounterSettings                 InEncounterSettings;                               // 0x0070(0x00B8)(Parm, NativeAccessSpecifierPublic)
	int32                                         ActivationDelay;                                   // 0x0128(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAIEncounterInfo*                   ReturnValue;                                       // 0x0130(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterSequence_StartCurrentEncounter) == 0x000008, "Wrong alignment on FortAIEncounterSequence_StartCurrentEncounter");
static_assert(sizeof(FortAIEncounterSequence_StartCurrentEncounter) == 0x000138, "Wrong size on FortAIEncounterSequence_StartCurrentEncounter");
static_assert(offsetof(FortAIEncounterSequence_StartCurrentEncounter, OutRequestResult) == 0x000000, "Member 'FortAIEncounterSequence_StartCurrentEncounter::OutRequestResult' has a wrong offset!");
static_assert(offsetof(FortAIEncounterSequence_StartCurrentEncounter, InTargetActors) == 0x000008, "Member 'FortAIEncounterSequence_StartCurrentEncounter::InTargetActors' has a wrong offset!");
static_assert(offsetof(FortAIEncounterSequence_StartCurrentEncounter, InAssignmentSettings) == 0x000018, "Member 'FortAIEncounterSequence_StartCurrentEncounter::InAssignmentSettings' has a wrong offset!");
static_assert(offsetof(FortAIEncounterSequence_StartCurrentEncounter, InOverrideEnvironmentQueryInfo) == 0x000020, "Member 'FortAIEncounterSequence_StartCurrentEncounter::InOverrideEnvironmentQueryInfo' has a wrong offset!");
static_assert(offsetof(FortAIEncounterSequence_StartCurrentEncounter, InOptionalQueryActor) == 0x000048, "Member 'FortAIEncounterSequence_StartCurrentEncounter::InOptionalQueryActor' has a wrong offset!");
static_assert(offsetof(FortAIEncounterSequence_StartCurrentEncounter, InInjectedTags) == 0x000050, "Member 'FortAIEncounterSequence_StartCurrentEncounter::InInjectedTags' has a wrong offset!");
static_assert(offsetof(FortAIEncounterSequence_StartCurrentEncounter, InEncounterSettings) == 0x000070, "Member 'FortAIEncounterSequence_StartCurrentEncounter::InEncounterSettings' has a wrong offset!");
static_assert(offsetof(FortAIEncounterSequence_StartCurrentEncounter, ActivationDelay) == 0x000128, "Member 'FortAIEncounterSequence_StartCurrentEncounter::ActivationDelay' has a wrong offset!");
static_assert(offsetof(FortAIEncounterSequence_StartCurrentEncounter, ReturnValue) == 0x000130, "Member 'FortAIEncounterSequence_StartCurrentEncounter::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIEncounterSequence.StartCurrentEncounterWithSavedData
// 0x0010 (0x0010 - 0x0000)
struct FortAIEncounterSequence_StartCurrentEncounterWithSavedData final
{
public:
	EFortEncounterSequenceResult                  OutRequestResult;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ActivationDelay;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAIEncounterInfo*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterSequence_StartCurrentEncounterWithSavedData) == 0x000008, "Wrong alignment on FortAIEncounterSequence_StartCurrentEncounterWithSavedData");
static_assert(sizeof(FortAIEncounterSequence_StartCurrentEncounterWithSavedData) == 0x000010, "Wrong size on FortAIEncounterSequence_StartCurrentEncounterWithSavedData");
static_assert(offsetof(FortAIEncounterSequence_StartCurrentEncounterWithSavedData, OutRequestResult) == 0x000000, "Member 'FortAIEncounterSequence_StartCurrentEncounterWithSavedData::OutRequestResult' has a wrong offset!");
static_assert(offsetof(FortAIEncounterSequence_StartCurrentEncounterWithSavedData, ActivationDelay) == 0x000004, "Member 'FortAIEncounterSequence_StartCurrentEncounterWithSavedData::ActivationDelay' has a wrong offset!");
static_assert(offsetof(FortAIEncounterSequence_StartCurrentEncounterWithSavedData, ReturnValue) == 0x000008, "Member 'FortAIEncounterSequence_StartCurrentEncounterWithSavedData::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIEncounterSequence.EncounterBelongsToSequence
// 0x0010 (0x0010 - 0x0000)
struct FortAIEncounterSequence_EncounterBelongsToSequence final
{
public:
	class UFortAIEncounterInfo*                   InEncounter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIEncounterSequence_EncounterBelongsToSequence) == 0x000008, "Wrong alignment on FortAIEncounterSequence_EncounterBelongsToSequence");
static_assert(sizeof(FortAIEncounterSequence_EncounterBelongsToSequence) == 0x000010, "Wrong size on FortAIEncounterSequence_EncounterBelongsToSequence");
static_assert(offsetof(FortAIEncounterSequence_EncounterBelongsToSequence, InEncounter) == 0x000000, "Member 'FortAIEncounterSequence_EncounterBelongsToSequence::InEncounter' has a wrong offset!");
static_assert(offsetof(FortAIEncounterSequence_EncounterBelongsToSequence, ReturnValue) == 0x000008, "Member 'FortAIEncounterSequence_EncounterBelongsToSequence::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIEncounterSequence.GetCurrentEncounter
// 0x0008 (0x0008 - 0x0000)
struct FortAIEncounterSequence_GetCurrentEncounter final
{
public:
	class UFortAIEncounterInfo*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterSequence_GetCurrentEncounter) == 0x000008, "Wrong alignment on FortAIEncounterSequence_GetCurrentEncounter");
static_assert(sizeof(FortAIEncounterSequence_GetCurrentEncounter) == 0x000008, "Wrong size on FortAIEncounterSequence_GetCurrentEncounter");
static_assert(offsetof(FortAIEncounterSequence_GetCurrentEncounter, ReturnValue) == 0x000000, "Member 'FortAIEncounterSequence_GetCurrentEncounter::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIEncounterSequence.GetEncounterIndexInSequence
// 0x0004 (0x0004 - 0x0000)
struct FortAIEncounterSequence_GetEncounterIndexInSequence final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterSequence_GetEncounterIndexInSequence) == 0x000004, "Wrong alignment on FortAIEncounterSequence_GetEncounterIndexInSequence");
static_assert(sizeof(FortAIEncounterSequence_GetEncounterIndexInSequence) == 0x000004, "Wrong size on FortAIEncounterSequence_GetEncounterIndexInSequence");
static_assert(offsetof(FortAIEncounterSequence_GetEncounterIndexInSequence, ReturnValue) == 0x000000, "Member 'FortAIEncounterSequence_GetEncounterIndexInSequence::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIEncounterSequence.GetNumEncountersInSequence
// 0x0004 (0x0004 - 0x0000)
struct FortAIEncounterSequence_GetNumEncountersInSequence final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterSequence_GetNumEncountersInSequence) == 0x000004, "Wrong alignment on FortAIEncounterSequence_GetNumEncountersInSequence");
static_assert(sizeof(FortAIEncounterSequence_GetNumEncountersInSequence) == 0x000004, "Wrong size on FortAIEncounterSequence_GetNumEncountersInSequence");
static_assert(offsetof(FortAIEncounterSequence_GetNumEncountersInSequence, ReturnValue) == 0x000000, "Member 'FortAIEncounterSequence_GetNumEncountersInSequence::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIEncounterSequence.HasEncounter
// 0x0001 (0x0001 - 0x0000)
struct FortAIEncounterSequence_HasEncounter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterSequence_HasEncounter) == 0x000001, "Wrong alignment on FortAIEncounterSequence_HasEncounter");
static_assert(sizeof(FortAIEncounterSequence_HasEncounter) == 0x000001, "Wrong size on FortAIEncounterSequence_HasEncounter");
static_assert(offsetof(FortAIEncounterSequence_HasEncounter, ReturnValue) == 0x000000, "Member 'FortAIEncounterSequence_HasEncounter::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIEncounterSequence.IsOnFinalIndexInSequence
// 0x0001 (0x0001 - 0x0000)
struct FortAIEncounterSequence_IsOnFinalIndexInSequence final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterSequence_IsOnFinalIndexInSequence) == 0x000001, "Wrong alignment on FortAIEncounterSequence_IsOnFinalIndexInSequence");
static_assert(sizeof(FortAIEncounterSequence_IsOnFinalIndexInSequence) == 0x000001, "Wrong size on FortAIEncounterSequence_IsOnFinalIndexInSequence");
static_assert(offsetof(FortAIEncounterSequence_IsOnFinalIndexInSequence, ReturnValue) == 0x000000, "Member 'FortAIEncounterSequence_IsOnFinalIndexInSequence::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIEncounterTargetInterface.GetObjectiveCompletionPercentage
// 0x0004 (0x0004 - 0x0000)
struct FortAIEncounterTargetInterface_GetObjectiveCompletionPercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterTargetInterface_GetObjectiveCompletionPercentage) == 0x000004, "Wrong alignment on FortAIEncounterTargetInterface_GetObjectiveCompletionPercentage");
static_assert(sizeof(FortAIEncounterTargetInterface_GetObjectiveCompletionPercentage) == 0x000004, "Wrong size on FortAIEncounterTargetInterface_GetObjectiveCompletionPercentage");
static_assert(offsetof(FortAIEncounterTargetInterface_GetObjectiveCompletionPercentage, ReturnValue) == 0x000000, "Member 'FortAIEncounterTargetInterface_GetObjectiveCompletionPercentage::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIEncounterTargetInterface.IsFloatingTarget
// 0x0001 (0x0001 - 0x0000)
struct FortAIEncounterTargetInterface_IsFloatingTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterTargetInterface_IsFloatingTarget) == 0x000001, "Wrong alignment on FortAIEncounterTargetInterface_IsFloatingTarget");
static_assert(sizeof(FortAIEncounterTargetInterface_IsFloatingTarget) == 0x000001, "Wrong size on FortAIEncounterTargetInterface_IsFloatingTarget");
static_assert(offsetof(FortAIEncounterTargetInterface_IsFloatingTarget, ReturnValue) == 0x000000, "Member 'FortAIEncounterTargetInterface_IsFloatingTarget::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIEnvironmentalDangerSourceInterface.GetDangerAtLocation
// 0x0020 (0x0020 - 0x0000)
struct FortAIEnvironmentalDangerSourceInterface_GetDangerAtLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIEnvironmentalDangerSourceInterface_GetDangerAtLocation) == 0x000008, "Wrong alignment on FortAIEnvironmentalDangerSourceInterface_GetDangerAtLocation");
static_assert(sizeof(FortAIEnvironmentalDangerSourceInterface_GetDangerAtLocation) == 0x000020, "Wrong size on FortAIEnvironmentalDangerSourceInterface_GetDangerAtLocation");
static_assert(offsetof(FortAIEnvironmentalDangerSourceInterface_GetDangerAtLocation, Location) == 0x000000, "Member 'FortAIEnvironmentalDangerSourceInterface_GetDangerAtLocation::Location' has a wrong offset!");
static_assert(offsetof(FortAIEnvironmentalDangerSourceInterface_GetDangerAtLocation, ReturnValue) == 0x000018, "Member 'FortAIEnvironmentalDangerSourceInterface_GetDangerAtLocation::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIEnvironmentalDangerSourceInterface.GetDangerSourceActive
// 0x0001 (0x0001 - 0x0000)
struct FortAIEnvironmentalDangerSourceInterface_GetDangerSourceActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEnvironmentalDangerSourceInterface_GetDangerSourceActive) == 0x000001, "Wrong alignment on FortAIEnvironmentalDangerSourceInterface_GetDangerSourceActive");
static_assert(sizeof(FortAIEnvironmentalDangerSourceInterface_GetDangerSourceActive) == 0x000001, "Wrong size on FortAIEnvironmentalDangerSourceInterface_GetDangerSourceActive");
static_assert(offsetof(FortAIEnvironmentalDangerSourceInterface_GetDangerSourceActive, ReturnValue) == 0x000000, "Member 'FortAIEnvironmentalDangerSourceInterface_GetDangerSourceActive::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIEnvironmentalDangerSourceInterface.GetDangerSourceBounds
// 0x0038 (0x0038 - 0x0000)
struct FortAIEnvironmentalDangerSourceInterface_GetDangerSourceBounds final
{
public:
	struct FBox                                   ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEnvironmentalDangerSourceInterface_GetDangerSourceBounds) == 0x000008, "Wrong alignment on FortAIEnvironmentalDangerSourceInterface_GetDangerSourceBounds");
static_assert(sizeof(FortAIEnvironmentalDangerSourceInterface_GetDangerSourceBounds) == 0x000038, "Wrong size on FortAIEnvironmentalDangerSourceInterface_GetDangerSourceBounds");
static_assert(offsetof(FortAIEnvironmentalDangerSourceInterface_GetDangerSourceBounds, ReturnValue) == 0x000000, "Member 'FortAIEnvironmentalDangerSourceInterface_GetDangerSourceBounds::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIFunctionLibrary.GetAISpawner
// 0x0010 (0x0010 - 0x0000)
struct FortAIFunctionLibrary_GetAISpawner final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAthenaAISpawner*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIFunctionLibrary_GetAISpawner) == 0x000008, "Wrong alignment on FortAIFunctionLibrary_GetAISpawner");
static_assert(sizeof(FortAIFunctionLibrary_GetAISpawner) == 0x000010, "Wrong size on FortAIFunctionLibrary_GetAISpawner");
static_assert(offsetof(FortAIFunctionLibrary_GetAISpawner, WorldContextObject) == 0x000000, "Member 'FortAIFunctionLibrary_GetAISpawner::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAIFunctionLibrary_GetAISpawner, ReturnValue) == 0x000008, "Member 'FortAIFunctionLibrary_GetAISpawner::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIFunctionLibrary.GetOrCreateAIRuntimeParameters
// 0x0018 (0x0018 - 0x0000)
struct FortAIFunctionLibrary_GetOrCreateAIRuntimeParameters final
{
public:
	const class AAIController*                    AIController;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortAthenaAIRuntimeParameters> ParametersClass;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAthenaAIRuntimeParameters*         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIFunctionLibrary_GetOrCreateAIRuntimeParameters) == 0x000008, "Wrong alignment on FortAIFunctionLibrary_GetOrCreateAIRuntimeParameters");
static_assert(sizeof(FortAIFunctionLibrary_GetOrCreateAIRuntimeParameters) == 0x000018, "Wrong size on FortAIFunctionLibrary_GetOrCreateAIRuntimeParameters");
static_assert(offsetof(FortAIFunctionLibrary_GetOrCreateAIRuntimeParameters, AIController) == 0x000000, "Member 'FortAIFunctionLibrary_GetOrCreateAIRuntimeParameters::AIController' has a wrong offset!");
static_assert(offsetof(FortAIFunctionLibrary_GetOrCreateAIRuntimeParameters, ParametersClass) == 0x000008, "Member 'FortAIFunctionLibrary_GetOrCreateAIRuntimeParameters::ParametersClass' has a wrong offset!");
static_assert(offsetof(FortAIFunctionLibrary_GetOrCreateAIRuntimeParameters, ReturnValue) == 0x000010, "Member 'FortAIFunctionLibrary_GetOrCreateAIRuntimeParameters::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIFunctionLibrary.IsConcealedByPerceptionModifiers
// 0x0040 (0x0040 - 0x0000)
struct FortAIFunctionLibrary_IsConcealedByPerceptionModifiers final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ObserverLocation;                                  // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutConcealment;                                    // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIFunctionLibrary_IsConcealedByPerceptionModifiers) == 0x000008, "Wrong alignment on FortAIFunctionLibrary_IsConcealedByPerceptionModifiers");
static_assert(sizeof(FortAIFunctionLibrary_IsConcealedByPerceptionModifiers) == 0x000040, "Wrong size on FortAIFunctionLibrary_IsConcealedByPerceptionModifiers");
static_assert(offsetof(FortAIFunctionLibrary_IsConcealedByPerceptionModifiers, WorldContextObject) == 0x000000, "Member 'FortAIFunctionLibrary_IsConcealedByPerceptionModifiers::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAIFunctionLibrary_IsConcealedByPerceptionModifiers, ObserverLocation) == 0x000008, "Member 'FortAIFunctionLibrary_IsConcealedByPerceptionModifiers::ObserverLocation' has a wrong offset!");
static_assert(offsetof(FortAIFunctionLibrary_IsConcealedByPerceptionModifiers, TargetLocation) == 0x000020, "Member 'FortAIFunctionLibrary_IsConcealedByPerceptionModifiers::TargetLocation' has a wrong offset!");
static_assert(offsetof(FortAIFunctionLibrary_IsConcealedByPerceptionModifiers, OutConcealment) == 0x000038, "Member 'FortAIFunctionLibrary_IsConcealedByPerceptionModifiers::OutConcealment' has a wrong offset!");
static_assert(offsetof(FortAIFunctionLibrary_IsConcealedByPerceptionModifiers, ReturnValue) == 0x00003C, "Member 'FortAIFunctionLibrary_IsConcealedByPerceptionModifiers::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIFunctionLibrary.MakeNoiseEvent
// 0x0010 (0x0010 - 0x0000)
struct FortAIFunctionLibrary_MakeNoiseEvent final
{
public:
	class AActor*                                 NoiseMaker;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRange;                                          // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NoiseTag;                                          // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIFunctionLibrary_MakeNoiseEvent) == 0x000008, "Wrong alignment on FortAIFunctionLibrary_MakeNoiseEvent");
static_assert(sizeof(FortAIFunctionLibrary_MakeNoiseEvent) == 0x000010, "Wrong size on FortAIFunctionLibrary_MakeNoiseEvent");
static_assert(offsetof(FortAIFunctionLibrary_MakeNoiseEvent, NoiseMaker) == 0x000000, "Member 'FortAIFunctionLibrary_MakeNoiseEvent::NoiseMaker' has a wrong offset!");
static_assert(offsetof(FortAIFunctionLibrary_MakeNoiseEvent, MaxRange) == 0x000008, "Member 'FortAIFunctionLibrary_MakeNoiseEvent::MaxRange' has a wrong offset!");
static_assert(offsetof(FortAIFunctionLibrary_MakeNoiseEvent, NoiseTag) == 0x00000C, "Member 'FortAIFunctionLibrary_MakeNoiseEvent::NoiseTag' has a wrong offset!");

// Function FortniteAI.FortAIFunctionLibrary.MakeNoiseEventAtLocation
// 0x0030 (0x0030 - 0x0000)
struct FortAIFunctionLibrary_MakeNoiseEventAtLocation final
{
public:
	class AActor*                                 NoiseMaker;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRange;                                          // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                NoiseLocation;                                     // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NoiseTag;                                          // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIFunctionLibrary_MakeNoiseEventAtLocation) == 0x000008, "Wrong alignment on FortAIFunctionLibrary_MakeNoiseEventAtLocation");
static_assert(sizeof(FortAIFunctionLibrary_MakeNoiseEventAtLocation) == 0x000030, "Wrong size on FortAIFunctionLibrary_MakeNoiseEventAtLocation");
static_assert(offsetof(FortAIFunctionLibrary_MakeNoiseEventAtLocation, NoiseMaker) == 0x000000, "Member 'FortAIFunctionLibrary_MakeNoiseEventAtLocation::NoiseMaker' has a wrong offset!");
static_assert(offsetof(FortAIFunctionLibrary_MakeNoiseEventAtLocation, MaxRange) == 0x000008, "Member 'FortAIFunctionLibrary_MakeNoiseEventAtLocation::MaxRange' has a wrong offset!");
static_assert(offsetof(FortAIFunctionLibrary_MakeNoiseEventAtLocation, NoiseLocation) == 0x000010, "Member 'FortAIFunctionLibrary_MakeNoiseEventAtLocation::NoiseLocation' has a wrong offset!");
static_assert(offsetof(FortAIFunctionLibrary_MakeNoiseEventAtLocation, NoiseTag) == 0x000028, "Member 'FortAIFunctionLibrary_MakeNoiseEventAtLocation::NoiseTag' has a wrong offset!");

// Function FortniteAI.FortAIFunctionLibrary.RequestNavUpdateForBuilding
// 0x0008 (0x0008 - 0x0000)
struct FortAIFunctionLibrary_RequestNavUpdateForBuilding final
{
public:
	class ABuildingActor*                         BuildingActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIFunctionLibrary_RequestNavUpdateForBuilding) == 0x000008, "Wrong alignment on FortAIFunctionLibrary_RequestNavUpdateForBuilding");
static_assert(sizeof(FortAIFunctionLibrary_RequestNavUpdateForBuilding) == 0x000008, "Wrong size on FortAIFunctionLibrary_RequestNavUpdateForBuilding");
static_assert(offsetof(FortAIFunctionLibrary_RequestNavUpdateForBuilding, BuildingActor) == 0x000000, "Member 'FortAIFunctionLibrary_RequestNavUpdateForBuilding::BuildingActor' has a wrong offset!");

// Function FortniteAI.FortAIFunctionLibrary.SetHearingRange
// 0x0010 (0x0010 - 0x0000)
struct FortAIFunctionLibrary_SetHearingRange final
{
public:
	class AActor*                                 AIAgent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Range;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIFunctionLibrary_SetHearingRange) == 0x000008, "Wrong alignment on FortAIFunctionLibrary_SetHearingRange");
static_assert(sizeof(FortAIFunctionLibrary_SetHearingRange) == 0x000010, "Wrong size on FortAIFunctionLibrary_SetHearingRange");
static_assert(offsetof(FortAIFunctionLibrary_SetHearingRange, AIAgent) == 0x000000, "Member 'FortAIFunctionLibrary_SetHearingRange::AIAgent' has a wrong offset!");
static_assert(offsetof(FortAIFunctionLibrary_SetHearingRange, Range) == 0x000008, "Member 'FortAIFunctionLibrary_SetHearingRange::Range' has a wrong offset!");

// Function FortniteAI.FortAIFunctionLibrary.TeleportAIPawn
// 0x0040 (0x0040 - 0x0000)
struct FortAIFunctionLibrary_TeleportAIPawn final
{
public:
	class AFortAIPawn*                            AIPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DestLocation;                                      // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               DestRotation;                                      // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCollision;                                  // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIFunctionLibrary_TeleportAIPawn) == 0x000008, "Wrong alignment on FortAIFunctionLibrary_TeleportAIPawn");
static_assert(sizeof(FortAIFunctionLibrary_TeleportAIPawn) == 0x000040, "Wrong size on FortAIFunctionLibrary_TeleportAIPawn");
static_assert(offsetof(FortAIFunctionLibrary_TeleportAIPawn, AIPawn) == 0x000000, "Member 'FortAIFunctionLibrary_TeleportAIPawn::AIPawn' has a wrong offset!");
static_assert(offsetof(FortAIFunctionLibrary_TeleportAIPawn, DestLocation) == 0x000008, "Member 'FortAIFunctionLibrary_TeleportAIPawn::DestLocation' has a wrong offset!");
static_assert(offsetof(FortAIFunctionLibrary_TeleportAIPawn, DestRotation) == 0x000020, "Member 'FortAIFunctionLibrary_TeleportAIPawn::DestRotation' has a wrong offset!");
static_assert(offsetof(FortAIFunctionLibrary_TeleportAIPawn, bIgnoreCollision) == 0x000038, "Member 'FortAIFunctionLibrary_TeleportAIPawn::bIgnoreCollision' has a wrong offset!");
static_assert(offsetof(FortAIFunctionLibrary_TeleportAIPawn, ReturnValue) == 0x000039, "Member 'FortAIFunctionLibrary_TeleportAIPawn::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIGoalManager.AddGoalsToWorldAssignment
// 0x0048 (0x0048 - 0x0000)
struct FortAIGoalManager_AddGoalsToWorldAssignment final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAIAssignmentIdentifier            AssignmentIdentifier;                              // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FFortAIGoalInfo>                GoalInfos;                                         // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIGoalManager_AddGoalsToWorldAssignment) == 0x000008, "Wrong alignment on FortAIGoalManager_AddGoalsToWorldAssignment");
static_assert(sizeof(FortAIGoalManager_AddGoalsToWorldAssignment) == 0x000048, "Wrong size on FortAIGoalManager_AddGoalsToWorldAssignment");
static_assert(offsetof(FortAIGoalManager_AddGoalsToWorldAssignment, WorldContextObject) == 0x000000, "Member 'FortAIGoalManager_AddGoalsToWorldAssignment::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_AddGoalsToWorldAssignment, AssignmentIdentifier) == 0x000008, "Member 'FortAIGoalManager_AddGoalsToWorldAssignment::AssignmentIdentifier' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_AddGoalsToWorldAssignment, GoalInfos) == 0x000038, "Member 'FortAIGoalManager_AddGoalsToWorldAssignment::GoalInfos' has a wrong offset!");

// Function FortniteAI.FortAIGoalManager.AddGoalToWorldAssignment
// 0x0060 (0x0060 - 0x0000)
struct FortAIGoalManager_AddGoalToWorldAssignment final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAIAssignmentIdentifier            AssignmentIdentifier;                              // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FFortAIGoalInfo                        GoalInfo;                                          // 0x0038(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIGoalManager_AddGoalToWorldAssignment) == 0x000008, "Wrong alignment on FortAIGoalManager_AddGoalToWorldAssignment");
static_assert(sizeof(FortAIGoalManager_AddGoalToWorldAssignment) == 0x000060, "Wrong size on FortAIGoalManager_AddGoalToWorldAssignment");
static_assert(offsetof(FortAIGoalManager_AddGoalToWorldAssignment, WorldContextObject) == 0x000000, "Member 'FortAIGoalManager_AddGoalToWorldAssignment::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_AddGoalToWorldAssignment, AssignmentIdentifier) == 0x000008, "Member 'FortAIGoalManager_AddGoalToWorldAssignment::AssignmentIdentifier' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_AddGoalToWorldAssignment, GoalInfo) == 0x000038, "Member 'FortAIGoalManager_AddGoalToWorldAssignment::GoalInfo' has a wrong offset!");

// Function FortniteAI.FortAIGoalManager.CreateWorldAssignment
// 0x0080 (0x0080 - 0x0000)
struct FortAIGoalManager_CreateWorldAssignment final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAIAssignmentIdentifier            WorldAssignmentIdentifier;                         // 0x0008(0x0030)(Parm, NativeAccessSpecifierPublic)
	class UFortAIAssignmentSettings*              AssignmentSettings;                                // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortAIGoalProvider>        GoalProvider;                                      // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAIAssignmentIdentifier            AssignmentIdentifier;                              // 0x0048(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
	EAssignmentCreationResult                     CreationResult;                                    // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIGoalManager_CreateWorldAssignment) == 0x000008, "Wrong alignment on FortAIGoalManager_CreateWorldAssignment");
static_assert(sizeof(FortAIGoalManager_CreateWorldAssignment) == 0x000080, "Wrong size on FortAIGoalManager_CreateWorldAssignment");
static_assert(offsetof(FortAIGoalManager_CreateWorldAssignment, WorldContextObject) == 0x000000, "Member 'FortAIGoalManager_CreateWorldAssignment::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_CreateWorldAssignment, WorldAssignmentIdentifier) == 0x000008, "Member 'FortAIGoalManager_CreateWorldAssignment::WorldAssignmentIdentifier' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_CreateWorldAssignment, AssignmentSettings) == 0x000038, "Member 'FortAIGoalManager_CreateWorldAssignment::AssignmentSettings' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_CreateWorldAssignment, GoalProvider) == 0x000040, "Member 'FortAIGoalManager_CreateWorldAssignment::GoalProvider' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_CreateWorldAssignment, AssignmentIdentifier) == 0x000048, "Member 'FortAIGoalManager_CreateWorldAssignment::AssignmentIdentifier' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_CreateWorldAssignment, CreationResult) == 0x000078, "Member 'FortAIGoalManager_CreateWorldAssignment::CreationResult' has a wrong offset!");

// Function FortniteAI.FortAIGoalManager.MakeGoalFromActor
// 0x0040 (0x0040 - 0x0000)
struct FortAIGoalManager_MakeGoalFromActor final
{
public:
	struct FFortAIGoalInfo                        Goal;                                              // 0x0000(0x0028)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 GoalActor;                                         // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActorAlwaysPerceived;                             // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGoalActorAllowsUndermining;                       // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIGoalManager_MakeGoalFromActor) == 0x000008, "Wrong alignment on FortAIGoalManager_MakeGoalFromActor");
static_assert(sizeof(FortAIGoalManager_MakeGoalFromActor) == 0x000040, "Wrong size on FortAIGoalManager_MakeGoalFromActor");
static_assert(offsetof(FortAIGoalManager_MakeGoalFromActor, Goal) == 0x000000, "Member 'FortAIGoalManager_MakeGoalFromActor::Goal' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalFromActor, WorldContextObject) == 0x000028, "Member 'FortAIGoalManager_MakeGoalFromActor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalFromActor, GoalActor) == 0x000030, "Member 'FortAIGoalManager_MakeGoalFromActor::GoalActor' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalFromActor, bActorAlwaysPerceived) == 0x000038, "Member 'FortAIGoalManager_MakeGoalFromActor::bActorAlwaysPerceived' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalFromActor, bGoalActorAllowsUndermining) == 0x000039, "Member 'FortAIGoalManager_MakeGoalFromActor::bGoalActorAllowsUndermining' has a wrong offset!");

// Function FortniteAI.FortAIGoalManager.MakeGoalFromLocation
// 0x0048 (0x0048 - 0x0000)
struct FortAIGoalManager_MakeGoalFromLocation final
{
public:
	struct FFortAIGoalInfo                        Goal;                                              // 0x0000(0x0028)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GoalLocation;                                      // 0x0030(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIGoalManager_MakeGoalFromLocation) == 0x000008, "Wrong alignment on FortAIGoalManager_MakeGoalFromLocation");
static_assert(sizeof(FortAIGoalManager_MakeGoalFromLocation) == 0x000048, "Wrong size on FortAIGoalManager_MakeGoalFromLocation");
static_assert(offsetof(FortAIGoalManager_MakeGoalFromLocation, Goal) == 0x000000, "Member 'FortAIGoalManager_MakeGoalFromLocation::Goal' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalFromLocation, WorldContextObject) == 0x000028, "Member 'FortAIGoalManager_MakeGoalFromLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalFromLocation, GoalLocation) == 0x000030, "Member 'FortAIGoalManager_MakeGoalFromLocation::GoalLocation' has a wrong offset!");

// Function FortniteAI.FortAIGoalManager.MakeGoalsFromActors
// 0x0030 (0x0030 - 0x0000)
struct FortAIGoalManager_MakeGoalsFromActors final
{
public:
	TArray<struct FFortAIGoalInfo>                Goals;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         GoalActors;                                        // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bActorsAlwaysPerceived;                            // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGoalActorsAllowUndermining;                       // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIGoalManager_MakeGoalsFromActors) == 0x000008, "Wrong alignment on FortAIGoalManager_MakeGoalsFromActors");
static_assert(sizeof(FortAIGoalManager_MakeGoalsFromActors) == 0x000030, "Wrong size on FortAIGoalManager_MakeGoalsFromActors");
static_assert(offsetof(FortAIGoalManager_MakeGoalsFromActors, Goals) == 0x000000, "Member 'FortAIGoalManager_MakeGoalsFromActors::Goals' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalsFromActors, WorldContextObject) == 0x000010, "Member 'FortAIGoalManager_MakeGoalsFromActors::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalsFromActors, GoalActors) == 0x000018, "Member 'FortAIGoalManager_MakeGoalsFromActors::GoalActors' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalsFromActors, bActorsAlwaysPerceived) == 0x000028, "Member 'FortAIGoalManager_MakeGoalsFromActors::bActorsAlwaysPerceived' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalsFromActors, bGoalActorsAllowUndermining) == 0x000029, "Member 'FortAIGoalManager_MakeGoalsFromActors::bGoalActorsAllowUndermining' has a wrong offset!");

// Function FortniteAI.FortAIGoalManager.MakeGoalsFromLocations
// 0x0028 (0x0028 - 0x0000)
struct FortAIGoalManager_MakeGoalsFromLocations final
{
public:
	TArray<struct FFortAIGoalInfo>                Goals;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        GoalLocations;                                     // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIGoalManager_MakeGoalsFromLocations) == 0x000008, "Wrong alignment on FortAIGoalManager_MakeGoalsFromLocations");
static_assert(sizeof(FortAIGoalManager_MakeGoalsFromLocations) == 0x000028, "Wrong size on FortAIGoalManager_MakeGoalsFromLocations");
static_assert(offsetof(FortAIGoalManager_MakeGoalsFromLocations, Goals) == 0x000000, "Member 'FortAIGoalManager_MakeGoalsFromLocations::Goals' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalsFromLocations, WorldContextObject) == 0x000010, "Member 'FortAIGoalManager_MakeGoalsFromLocations::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalsFromLocations, GoalLocations) == 0x000018, "Member 'FortAIGoalManager_MakeGoalsFromLocations::GoalLocations' has a wrong offset!");

// Function FortniteAI.FortAIGoalManager.MakeGoalsFromLocationsAndActor
// 0x0030 (0x0030 - 0x0000)
struct FortAIGoalManager_MakeGoalsFromLocationsAndActor final
{
public:
	TArray<struct FFortAIGoalInfo>                Goals;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        GoalLocations;                                     // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	const class AActor*                           GoalActor;                                         // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIGoalManager_MakeGoalsFromLocationsAndActor) == 0x000008, "Wrong alignment on FortAIGoalManager_MakeGoalsFromLocationsAndActor");
static_assert(sizeof(FortAIGoalManager_MakeGoalsFromLocationsAndActor) == 0x000030, "Wrong size on FortAIGoalManager_MakeGoalsFromLocationsAndActor");
static_assert(offsetof(FortAIGoalManager_MakeGoalsFromLocationsAndActor, Goals) == 0x000000, "Member 'FortAIGoalManager_MakeGoalsFromLocationsAndActor::Goals' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalsFromLocationsAndActor, WorldContextObject) == 0x000010, "Member 'FortAIGoalManager_MakeGoalsFromLocationsAndActor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalsFromLocationsAndActor, GoalLocations) == 0x000018, "Member 'FortAIGoalManager_MakeGoalsFromLocationsAndActor::GoalLocations' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalsFromLocationsAndActor, GoalActor) == 0x000028, "Member 'FortAIGoalManager_MakeGoalsFromLocationsAndActor::GoalActor' has a wrong offset!");

// Function FortniteAI.FortAIGoalManager.RemoveGoalFromWorldAssignment
// 0x0060 (0x0060 - 0x0000)
struct FortAIGoalManager_RemoveGoalFromWorldAssignment final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAIAssignmentIdentifier            AssignmentIdentifier;                              // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FFortAIGoalInfo                        GoalInfo;                                          // 0x0038(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIGoalManager_RemoveGoalFromWorldAssignment) == 0x000008, "Wrong alignment on FortAIGoalManager_RemoveGoalFromWorldAssignment");
static_assert(sizeof(FortAIGoalManager_RemoveGoalFromWorldAssignment) == 0x000060, "Wrong size on FortAIGoalManager_RemoveGoalFromWorldAssignment");
static_assert(offsetof(FortAIGoalManager_RemoveGoalFromWorldAssignment, WorldContextObject) == 0x000000, "Member 'FortAIGoalManager_RemoveGoalFromWorldAssignment::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_RemoveGoalFromWorldAssignment, AssignmentIdentifier) == 0x000008, "Member 'FortAIGoalManager_RemoveGoalFromWorldAssignment::AssignmentIdentifier' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_RemoveGoalFromWorldAssignment, GoalInfo) == 0x000038, "Member 'FortAIGoalManager_RemoveGoalFromWorldAssignment::GoalInfo' has a wrong offset!");

// Function FortniteAI.FortAIGoalManager.RemoveGoalsFromWorldAssignment
// 0x0048 (0x0048 - 0x0000)
struct FortAIGoalManager_RemoveGoalsFromWorldAssignment final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAIAssignmentIdentifier            AssignmentIdentifier;                              // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FFortAIGoalInfo>                GoalInfos;                                         // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIGoalManager_RemoveGoalsFromWorldAssignment) == 0x000008, "Wrong alignment on FortAIGoalManager_RemoveGoalsFromWorldAssignment");
static_assert(sizeof(FortAIGoalManager_RemoveGoalsFromWorldAssignment) == 0x000048, "Wrong size on FortAIGoalManager_RemoveGoalsFromWorldAssignment");
static_assert(offsetof(FortAIGoalManager_RemoveGoalsFromWorldAssignment, WorldContextObject) == 0x000000, "Member 'FortAIGoalManager_RemoveGoalsFromWorldAssignment::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_RemoveGoalsFromWorldAssignment, AssignmentIdentifier) == 0x000008, "Member 'FortAIGoalManager_RemoveGoalsFromWorldAssignment::AssignmentIdentifier' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_RemoveGoalsFromWorldAssignment, GoalInfos) == 0x000038, "Member 'FortAIGoalManager_RemoveGoalsFromWorldAssignment::GoalInfos' has a wrong offset!");

// Function FortniteAI.FortAIGoalManager.RemoveWorldAssignment
// 0x0038 (0x0038 - 0x0000)
struct FortAIGoalManager_RemoveWorldAssignment final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAIAssignmentIdentifier            AssignmentIdentifier;                              // 0x0008(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIGoalManager_RemoveWorldAssignment) == 0x000008, "Wrong alignment on FortAIGoalManager_RemoveWorldAssignment");
static_assert(sizeof(FortAIGoalManager_RemoveWorldAssignment) == 0x000038, "Wrong size on FortAIGoalManager_RemoveWorldAssignment");
static_assert(offsetof(FortAIGoalManager_RemoveWorldAssignment, WorldContextObject) == 0x000000, "Member 'FortAIGoalManager_RemoveWorldAssignment::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_RemoveWorldAssignment, AssignmentIdentifier) == 0x000008, "Member 'FortAIGoalManager_RemoveWorldAssignment::AssignmentIdentifier' has a wrong offset!");

// Function FortniteAI.FortAIGoalManager.SetCurrentGoalDiscouragement
// 0x0010 (0x0010 - 0x0000)
struct FortAIGoalManager_SetCurrentGoalDiscouragement final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortAIController*                      AI;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIGoalManager_SetCurrentGoalDiscouragement) == 0x000008, "Wrong alignment on FortAIGoalManager_SetCurrentGoalDiscouragement");
static_assert(sizeof(FortAIGoalManager_SetCurrentGoalDiscouragement) == 0x000010, "Wrong size on FortAIGoalManager_SetCurrentGoalDiscouragement");
static_assert(offsetof(FortAIGoalManager_SetCurrentGoalDiscouragement, WorldContext) == 0x000000, "Member 'FortAIGoalManager_SetCurrentGoalDiscouragement::WorldContext' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_SetCurrentGoalDiscouragement, AI) == 0x000008, "Member 'FortAIGoalManager_SetCurrentGoalDiscouragement::AI' has a wrong offset!");

// Function FortniteAI.FortAIGoalManager.AddGoal
// 0x0010 (0x0010 - 0x0000)
struct FortAIGoalManager_AddGoal final
{
public:
	class AActor*                                 GoalActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAIAssignmentSettings*              GoalSettings;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIGoalManager_AddGoal) == 0x000008, "Wrong alignment on FortAIGoalManager_AddGoal");
static_assert(sizeof(FortAIGoalManager_AddGoal) == 0x000010, "Wrong size on FortAIGoalManager_AddGoal");
static_assert(offsetof(FortAIGoalManager_AddGoal, GoalActor) == 0x000000, "Member 'FortAIGoalManager_AddGoal::GoalActor' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_AddGoal, GoalSettings) == 0x000008, "Member 'FortAIGoalManager_AddGoal::GoalSettings' has a wrong offset!");

// Function FortniteAI.FortAIGoalManager.AddGoalActorToAssignment
// 0x0010 (0x0010 - 0x0000)
struct FortAIGoalManager_AddGoalActorToAssignment final
{
public:
	class UFortAIAssignment*                      Assignment;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 GoalActor;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIGoalManager_AddGoalActorToAssignment) == 0x000008, "Wrong alignment on FortAIGoalManager_AddGoalActorToAssignment");
static_assert(sizeof(FortAIGoalManager_AddGoalActorToAssignment) == 0x000010, "Wrong size on FortAIGoalManager_AddGoalActorToAssignment");
static_assert(offsetof(FortAIGoalManager_AddGoalActorToAssignment, Assignment) == 0x000000, "Member 'FortAIGoalManager_AddGoalActorToAssignment::Assignment' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_AddGoalActorToAssignment, GoalActor) == 0x000008, "Member 'FortAIGoalManager_AddGoalActorToAssignment::GoalActor' has a wrong offset!");

// Function FortniteAI.FortAIGoalManager.AddWorldAssignment
// 0x0018 (0x0018 - 0x0000)
struct FortAIGoalManager_AddWorldAssignment final
{
public:
	class UFortAIAssignmentSettings*              AssignmentSettings;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 GoalActor;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAIAssignment*                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIGoalManager_AddWorldAssignment) == 0x000008, "Wrong alignment on FortAIGoalManager_AddWorldAssignment");
static_assert(sizeof(FortAIGoalManager_AddWorldAssignment) == 0x000018, "Wrong size on FortAIGoalManager_AddWorldAssignment");
static_assert(offsetof(FortAIGoalManager_AddWorldAssignment, AssignmentSettings) == 0x000000, "Member 'FortAIGoalManager_AddWorldAssignment::AssignmentSettings' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_AddWorldAssignment, GoalActor) == 0x000008, "Member 'FortAIGoalManager_AddWorldAssignment::GoalActor' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_AddWorldAssignment, ReturnValue) == 0x000010, "Member 'FortAIGoalManager_AddWorldAssignment::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIGoalProvider.InitializeGoalProvider
// 0x0018 (0x0018 - 0x0000)
struct FortAIGoalProvider_InitializeGoalProvider final
{
public:
	class UWorld*                                 ContextWorld;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAIAssignment*                      Assignment;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIGoalProvider_InitializeGoalProvider) == 0x000008, "Wrong alignment on FortAIGoalProvider_InitializeGoalProvider");
static_assert(sizeof(FortAIGoalProvider_InitializeGoalProvider) == 0x000018, "Wrong size on FortAIGoalProvider_InitializeGoalProvider");
static_assert(offsetof(FortAIGoalProvider_InitializeGoalProvider, ContextWorld) == 0x000000, "Member 'FortAIGoalProvider_InitializeGoalProvider::ContextWorld' has a wrong offset!");
static_assert(offsetof(FortAIGoalProvider_InitializeGoalProvider, Assignment) == 0x000008, "Member 'FortAIGoalProvider_InitializeGoalProvider::Assignment' has a wrong offset!");
static_assert(offsetof(FortAIGoalProvider_InitializeGoalProvider, ReturnValue) == 0x000010, "Member 'FortAIGoalProvider_InitializeGoalProvider::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIGoalProvider.GetEncounterInfo
// 0x0008 (0x0008 - 0x0000)
struct FortAIGoalProvider_GetEncounterInfo final
{
public:
	class UFortAIEncounterInfo*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIGoalProvider_GetEncounterInfo) == 0x000008, "Wrong alignment on FortAIGoalProvider_GetEncounterInfo");
static_assert(sizeof(FortAIGoalProvider_GetEncounterInfo) == 0x000008, "Wrong size on FortAIGoalProvider_GetEncounterInfo");
static_assert(offsetof(FortAIGoalProvider_GetEncounterInfo, ReturnValue) == 0x000000, "Member 'FortAIGoalProvider_GetEncounterInfo::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortThreatVisualsManager.BeginThreatVisualsPrecursor
// 0x0020 (0x0020 - 0x0000)
struct FortThreatVisualsManager_BeginThreatVisualsPrecursor final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ThreatLocation;                                    // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortThreatVisualsManager_BeginThreatVisualsPrecursor) == 0x000008, "Wrong alignment on FortThreatVisualsManager_BeginThreatVisualsPrecursor");
static_assert(sizeof(FortThreatVisualsManager_BeginThreatVisualsPrecursor) == 0x000020, "Wrong size on FortThreatVisualsManager_BeginThreatVisualsPrecursor");
static_assert(offsetof(FortThreatVisualsManager_BeginThreatVisualsPrecursor, SourceActor) == 0x000000, "Member 'FortThreatVisualsManager_BeginThreatVisualsPrecursor::SourceActor' has a wrong offset!");
static_assert(offsetof(FortThreatVisualsManager_BeginThreatVisualsPrecursor, ThreatLocation) == 0x000008, "Member 'FortThreatVisualsManager_BeginThreatVisualsPrecursor::ThreatLocation' has a wrong offset!");

// Function FortniteAI.FortThreatVisualsManager.OnBeginThreatVisualsPrecursor
// 0x0020 (0x0020 - 0x0000)
struct FortThreatVisualsManager_OnBeginThreatVisualsPrecursor final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndLocation;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortThreatVisualsManager_OnBeginThreatVisualsPrecursor) == 0x000008, "Wrong alignment on FortThreatVisualsManager_OnBeginThreatVisualsPrecursor");
static_assert(sizeof(FortThreatVisualsManager_OnBeginThreatVisualsPrecursor) == 0x000020, "Wrong size on FortThreatVisualsManager_OnBeginThreatVisualsPrecursor");
static_assert(offsetof(FortThreatVisualsManager_OnBeginThreatVisualsPrecursor, SourceActor) == 0x000000, "Member 'FortThreatVisualsManager_OnBeginThreatVisualsPrecursor::SourceActor' has a wrong offset!");
static_assert(offsetof(FortThreatVisualsManager_OnBeginThreatVisualsPrecursor, EndLocation) == 0x000008, "Member 'FortThreatVisualsManager_OnBeginThreatVisualsPrecursor::EndLocation' has a wrong offset!");

// Function FortniteAI.FortThreatVisualsManager.OnThreatCloudsChanged
// 0x0010 (0x0010 - 0x0000)
struct FortThreatVisualsManager_OnThreatCloudsChanged final
{
public:
	TArray<struct FThreatLocationInfo>            ThreatLocationInfo;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortThreatVisualsManager_OnThreatCloudsChanged) == 0x000008, "Wrong alignment on FortThreatVisualsManager_OnThreatCloudsChanged");
static_assert(sizeof(FortThreatVisualsManager_OnThreatCloudsChanged) == 0x000010, "Wrong size on FortThreatVisualsManager_OnThreatCloudsChanged");
static_assert(offsetof(FortThreatVisualsManager_OnThreatCloudsChanged, ThreatLocationInfo) == 0x000000, "Member 'FortThreatVisualsManager_OnThreatCloudsChanged::ThreatLocationInfo' has a wrong offset!");

// Function FortniteAI.FortThreatVisualsManager.SetCloudsAreHidden
// 0x0001 (0x0001 - 0x0000)
struct FortThreatVisualsManager_SetCloudsAreHidden final
{
public:
	bool                                          bHide;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortThreatVisualsManager_SetCloudsAreHidden) == 0x000001, "Wrong alignment on FortThreatVisualsManager_SetCloudsAreHidden");
static_assert(sizeof(FortThreatVisualsManager_SetCloudsAreHidden) == 0x000001, "Wrong size on FortThreatVisualsManager_SetCloudsAreHidden");
static_assert(offsetof(FortThreatVisualsManager_SetCloudsAreHidden, bHide) == 0x000000, "Member 'FortThreatVisualsManager_SetCloudsAreHidden::bHide' has a wrong offset!");

// Function FortniteAI.FortThreatVisualsManager.SetMinimumCloudAltitude
// 0x0004 (0x0004 - 0x0000)
struct FortThreatVisualsManager_SetMinimumCloudAltitude final
{
public:
	float                                         NewMinimumAltitude;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortThreatVisualsManager_SetMinimumCloudAltitude) == 0x000004, "Wrong alignment on FortThreatVisualsManager_SetMinimumCloudAltitude");
static_assert(sizeof(FortThreatVisualsManager_SetMinimumCloudAltitude) == 0x000004, "Wrong size on FortThreatVisualsManager_SetMinimumCloudAltitude");
static_assert(offsetof(FortThreatVisualsManager_SetMinimumCloudAltitude, NewMinimumAltitude) == 0x000000, "Member 'FortThreatVisualsManager_SetMinimumCloudAltitude::NewMinimumAltitude' has a wrong offset!");

// Function FortniteAI.FortThreatVisualsManager.GetCloudsAreHidden
// 0x0001 (0x0001 - 0x0000)
struct FortThreatVisualsManager_GetCloudsAreHidden final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortThreatVisualsManager_GetCloudsAreHidden) == 0x000001, "Wrong alignment on FortThreatVisualsManager_GetCloudsAreHidden");
static_assert(sizeof(FortThreatVisualsManager_GetCloudsAreHidden) == 0x000001, "Wrong size on FortThreatVisualsManager_GetCloudsAreHidden");
static_assert(offsetof(FortThreatVisualsManager_GetCloudsAreHidden, ReturnValue) == 0x000000, "Member 'FortThreatVisualsManager_GetCloudsAreHidden::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortThreatVisualsManager.GetThreatCloud
// 0x0090 (0x0090 - 0x0000)
struct FortThreatVisualsManager_GetThreatCloud final
{
public:
	struct FThreatLocationInfo                    ThreatLocInfo;                                     // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AThreatCloud*                           ReturnValue;                                       // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortThreatVisualsManager_GetThreatCloud) == 0x000008, "Wrong alignment on FortThreatVisualsManager_GetThreatCloud");
static_assert(sizeof(FortThreatVisualsManager_GetThreatCloud) == 0x000090, "Wrong size on FortThreatVisualsManager_GetThreatCloud");
static_assert(offsetof(FortThreatVisualsManager_GetThreatCloud, ThreatLocInfo) == 0x000000, "Member 'FortThreatVisualsManager_GetThreatCloud::ThreatLocInfo' has a wrong offset!");
static_assert(offsetof(FortThreatVisualsManager_GetThreatCloud, ReturnValue) == 0x000088, "Member 'FortThreatVisualsManager_GetThreatCloud::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortThreatVisualsManager.GetThreatClouds
// 0x0010 (0x0010 - 0x0000)
struct FortThreatVisualsManager_GetThreatClouds final
{
public:
	TArray<struct FThreatLocationInfo>            ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortThreatVisualsManager_GetThreatClouds) == 0x000008, "Wrong alignment on FortThreatVisualsManager_GetThreatClouds");
static_assert(sizeof(FortThreatVisualsManager_GetThreatClouds) == 0x000010, "Wrong size on FortThreatVisualsManager_GetThreatClouds");
static_assert(offsetof(FortThreatVisualsManager_GetThreatClouds, ReturnValue) == 0x000000, "Member 'FortThreatVisualsManager_GetThreatClouds::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortThreatVisualsManager.StormsExist
// 0x0001 (0x0001 - 0x0000)
struct FortThreatVisualsManager_StormsExist final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortThreatVisualsManager_StormsExist) == 0x000001, "Wrong alignment on FortThreatVisualsManager_StormsExist");
static_assert(sizeof(FortThreatVisualsManager_StormsExist) == 0x000001, "Wrong size on FortThreatVisualsManager_StormsExist");
static_assert(offsetof(FortThreatVisualsManager_StormsExist, ReturnValue) == 0x000000, "Member 'FortThreatVisualsManager_StormsExist::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAIManagerMinigameComponent.OnPawnDied
// 0x0060 (0x0060 - 0x0000)
struct FortAIManagerMinigameComponent_OnPawnDied final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIManagerMinigameComponent_OnPawnDied) == 0x000008, "Wrong alignment on FortAIManagerMinigameComponent_OnPawnDied");
static_assert(sizeof(FortAIManagerMinigameComponent_OnPawnDied) == 0x000060, "Wrong size on FortAIManagerMinigameComponent_OnPawnDied");
static_assert(offsetof(FortAIManagerMinigameComponent_OnPawnDied, DamagedActor) == 0x000000, "Member 'FortAIManagerMinigameComponent_OnPawnDied::DamagedActor' has a wrong offset!");
static_assert(offsetof(FortAIManagerMinigameComponent_OnPawnDied, Damage) == 0x000008, "Member 'FortAIManagerMinigameComponent_OnPawnDied::Damage' has a wrong offset!");
static_assert(offsetof(FortAIManagerMinigameComponent_OnPawnDied, InstigatedBy) == 0x000010, "Member 'FortAIManagerMinigameComponent_OnPawnDied::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortAIManagerMinigameComponent_OnPawnDied, DamageCauser) == 0x000018, "Member 'FortAIManagerMinigameComponent_OnPawnDied::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortAIManagerMinigameComponent_OnPawnDied, HitLocation) == 0x000020, "Member 'FortAIManagerMinigameComponent_OnPawnDied::HitLocation' has a wrong offset!");
static_assert(offsetof(FortAIManagerMinigameComponent_OnPawnDied, FHitComponent) == 0x000038, "Member 'FortAIManagerMinigameComponent_OnPawnDied::FHitComponent' has a wrong offset!");
static_assert(offsetof(FortAIManagerMinigameComponent_OnPawnDied, BoneName) == 0x000040, "Member 'FortAIManagerMinigameComponent_OnPawnDied::BoneName' has a wrong offset!");
static_assert(offsetof(FortAIManagerMinigameComponent_OnPawnDied, Momentum) == 0x000048, "Member 'FortAIManagerMinigameComponent_OnPawnDied::Momentum' has a wrong offset!");

// Function FortniteAI.FortAIManagerMinigameComponent.OnPawnSpawned
// 0x0010 (0x0010 - 0x0000)
struct FortAIManagerMinigameComponent_OnPawnSpawned final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestId;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIManagerMinigameComponent_OnPawnSpawned) == 0x000008, "Wrong alignment on FortAIManagerMinigameComponent_OnPawnSpawned");
static_assert(sizeof(FortAIManagerMinigameComponent_OnPawnSpawned) == 0x000010, "Wrong size on FortAIManagerMinigameComponent_OnPawnSpawned");
static_assert(offsetof(FortAIManagerMinigameComponent_OnPawnSpawned, Pawn) == 0x000000, "Member 'FortAIManagerMinigameComponent_OnPawnSpawned::Pawn' has a wrong offset!");
static_assert(offsetof(FortAIManagerMinigameComponent_OnPawnSpawned, RequestId) == 0x000008, "Member 'FortAIManagerMinigameComponent_OnPawnSpawned::RequestId' has a wrong offset!");

// Function FortniteAI.FortAIRootAssignmentProviderInterface.GetRootAssignmentIdentifier
// 0x0030 (0x0030 - 0x0000)
struct FortAIRootAssignmentProviderInterface_GetRootAssignmentIdentifier final
{
public:
	struct FFortAIAssignmentIdentifier            ReturnValue;                                       // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIRootAssignmentProviderInterface_GetRootAssignmentIdentifier) == 0x000008, "Wrong alignment on FortAIRootAssignmentProviderInterface_GetRootAssignmentIdentifier");
static_assert(sizeof(FortAIRootAssignmentProviderInterface_GetRootAssignmentIdentifier) == 0x000030, "Wrong size on FortAIRootAssignmentProviderInterface_GetRootAssignmentIdentifier");
static_assert(offsetof(FortAIRootAssignmentProviderInterface_GetRootAssignmentIdentifier, ReturnValue) == 0x000000, "Member 'FortAIRootAssignmentProviderInterface_GetRootAssignmentIdentifier::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAISpawnerInterface.IsReadyToReceiveNewSpawnGroup
// 0x0001 (0x0001 - 0x0000)
struct FortAISpawnerInterface_IsReadyToReceiveNewSpawnGroup final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAISpawnerInterface_IsReadyToReceiveNewSpawnGroup) == 0x000001, "Wrong alignment on FortAISpawnerInterface_IsReadyToReceiveNewSpawnGroup");
static_assert(sizeof(FortAISpawnerInterface_IsReadyToReceiveNewSpawnGroup) == 0x000001, "Wrong size on FortAISpawnerInterface_IsReadyToReceiveNewSpawnGroup");
static_assert(offsetof(FortAISpawnerInterface_IsReadyToReceiveNewSpawnGroup, ReturnValue) == 0x000000, "Member 'FortAISpawnerInterface_IsReadyToReceiveNewSpawnGroup::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAISpawnerInterface.OnReceiveSpawnGroup
// 0x0001 (0x0001 - 0x0000)
struct FortAISpawnerInterface_OnReceiveSpawnGroup final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAISpawnerInterface_OnReceiveSpawnGroup) == 0x000001, "Wrong alignment on FortAISpawnerInterface_OnReceiveSpawnGroup");
static_assert(sizeof(FortAISpawnerInterface_OnReceiveSpawnGroup) == 0x000001, "Wrong size on FortAISpawnerInterface_OnReceiveSpawnGroup");
static_assert(offsetof(FortAISpawnerInterface_OnReceiveSpawnGroup, ReturnValue) == 0x000000, "Member 'FortAISpawnerInterface_OnReceiveSpawnGroup::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAISpawnerUtilityComponent.HandleUnownedPawnSpawned
// 0x0008 (0x0008 - 0x0000)
struct FortAISpawnerUtilityComponent_HandleUnownedPawnSpawned final
{
public:
	class AFortPawn*                              FortPawn;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAISpawnerUtilityComponent_HandleUnownedPawnSpawned) == 0x000008, "Wrong alignment on FortAISpawnerUtilityComponent_HandleUnownedPawnSpawned");
static_assert(sizeof(FortAISpawnerUtilityComponent_HandleUnownedPawnSpawned) == 0x000008, "Wrong size on FortAISpawnerUtilityComponent_HandleUnownedPawnSpawned");
static_assert(offsetof(FortAISpawnerUtilityComponent_HandleUnownedPawnSpawned, FortPawn) == 0x000000, "Member 'FortAISpawnerUtilityComponent_HandleUnownedPawnSpawned::FortPawn' has a wrong offset!");

// Function FortniteAI.FortAISpawnerUtilityComponent.OnUnownedPawnDied
// 0x0060 (0x0060 - 0x0000)
struct FortAISpawnerUtilityComponent_OnUnownedPawnDied final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAISpawnerUtilityComponent_OnUnownedPawnDied) == 0x000008, "Wrong alignment on FortAISpawnerUtilityComponent_OnUnownedPawnDied");
static_assert(sizeof(FortAISpawnerUtilityComponent_OnUnownedPawnDied) == 0x000060, "Wrong size on FortAISpawnerUtilityComponent_OnUnownedPawnDied");
static_assert(offsetof(FortAISpawnerUtilityComponent_OnUnownedPawnDied, DamagedActor) == 0x000000, "Member 'FortAISpawnerUtilityComponent_OnUnownedPawnDied::DamagedActor' has a wrong offset!");
static_assert(offsetof(FortAISpawnerUtilityComponent_OnUnownedPawnDied, Damage) == 0x000008, "Member 'FortAISpawnerUtilityComponent_OnUnownedPawnDied::Damage' has a wrong offset!");
static_assert(offsetof(FortAISpawnerUtilityComponent_OnUnownedPawnDied, InstigatedBy) == 0x000010, "Member 'FortAISpawnerUtilityComponent_OnUnownedPawnDied::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortAISpawnerUtilityComponent_OnUnownedPawnDied, DamageCauser) == 0x000018, "Member 'FortAISpawnerUtilityComponent_OnUnownedPawnDied::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortAISpawnerUtilityComponent_OnUnownedPawnDied, HitLocation) == 0x000020, "Member 'FortAISpawnerUtilityComponent_OnUnownedPawnDied::HitLocation' has a wrong offset!");
static_assert(offsetof(FortAISpawnerUtilityComponent_OnUnownedPawnDied, FHitComponent) == 0x000038, "Member 'FortAISpawnerUtilityComponent_OnUnownedPawnDied::FHitComponent' has a wrong offset!");
static_assert(offsetof(FortAISpawnerUtilityComponent_OnUnownedPawnDied, BoneName) == 0x000040, "Member 'FortAISpawnerUtilityComponent_OnUnownedPawnDied::BoneName' has a wrong offset!");
static_assert(offsetof(FortAISpawnerUtilityComponent_OnUnownedPawnDied, Momentum) == 0x000048, "Member 'FortAISpawnerUtilityComponent_OnUnownedPawnDied::Momentum' has a wrong offset!");

// Function FortniteAI.FortAISpawnerUtilityComponent.RequestSpawn
// 0x0080 (0x0080 - 0x0000)
struct FortAISpawnerUtilityComponent_RequestSpawn final
{
public:
	class UFortAthenaAISpawnerDataComponentList*  AISpawnerComponentList;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0xC];                                       // 0x0074(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAISpawnerUtilityComponent_RequestSpawn) == 0x000010, "Wrong alignment on FortAISpawnerUtilityComponent_RequestSpawn");
static_assert(sizeof(FortAISpawnerUtilityComponent_RequestSpawn) == 0x000080, "Wrong size on FortAISpawnerUtilityComponent_RequestSpawn");
static_assert(offsetof(FortAISpawnerUtilityComponent_RequestSpawn, AISpawnerComponentList) == 0x000000, "Member 'FortAISpawnerUtilityComponent_RequestSpawn::AISpawnerComponentList' has a wrong offset!");
static_assert(offsetof(FortAISpawnerUtilityComponent_RequestSpawn, SpawnTransform) == 0x000010, "Member 'FortAISpawnerUtilityComponent_RequestSpawn::SpawnTransform' has a wrong offset!");
static_assert(offsetof(FortAISpawnerUtilityComponent_RequestSpawn, ReturnValue) == 0x000070, "Member 'FortAISpawnerUtilityComponent_RequestSpawn::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAISpawnerUtilityComponent.SetEQSQuery
// 0x0028 (0x0028 - 0x0000)
struct FortAISpawnerUtilityComponent_SetEQSQuery final
{
public:
	TSoftObjectPtr<class UEnvQuery>               SelectedEQSQuery;                                  // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAISpawnerUtilityComponent_SetEQSQuery) == 0x000008, "Wrong alignment on FortAISpawnerUtilityComponent_SetEQSQuery");
static_assert(sizeof(FortAISpawnerUtilityComponent_SetEQSQuery) == 0x000028, "Wrong size on FortAISpawnerUtilityComponent_SetEQSQuery");
static_assert(offsetof(FortAISpawnerUtilityComponent_SetEQSQuery, SelectedEQSQuery) == 0x000000, "Member 'FortAISpawnerUtilityComponent_SetEQSQuery::SelectedEQSQuery' has a wrong offset!");

// Function FortniteAI.FortAISpawnerUtilityComponent.SetMinigame
// 0x0008 (0x0008 - 0x0000)
struct FortAISpawnerUtilityComponent_SetMinigame final
{
public:
	const class AFortMinigame*                    Minigame;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAISpawnerUtilityComponent_SetMinigame) == 0x000008, "Wrong alignment on FortAISpawnerUtilityComponent_SetMinigame");
static_assert(sizeof(FortAISpawnerUtilityComponent_SetMinigame) == 0x000008, "Wrong size on FortAISpawnerUtilityComponent_SetMinigame");
static_assert(offsetof(FortAISpawnerUtilityComponent_SetMinigame, Minigame) == 0x000000, "Member 'FortAISpawnerUtilityComponent_SetMinigame::Minigame' has a wrong offset!");

// Function FortniteAI.FortAISpawnerUtilityComponent.SetQueryRadius
// 0x0004 (0x0004 - 0x0000)
struct FortAISpawnerUtilityComponent_SetQueryRadius final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAISpawnerUtilityComponent_SetQueryRadius) == 0x000004, "Wrong alignment on FortAISpawnerUtilityComponent_SetQueryRadius");
static_assert(sizeof(FortAISpawnerUtilityComponent_SetQueryRadius) == 0x000004, "Wrong size on FortAISpawnerUtilityComponent_SetQueryRadius");
static_assert(offsetof(FortAISpawnerUtilityComponent_SetQueryRadius, Radius) == 0x000000, "Member 'FortAISpawnerUtilityComponent_SetQueryRadius::Radius' has a wrong offset!");

// Function FortniteAI.FortAISpawnerUtilityComponent.IsSpawnCountCapped
// 0x0001 (0x0001 - 0x0000)
struct FortAISpawnerUtilityComponent_IsSpawnCountCapped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAISpawnerUtilityComponent_IsSpawnCountCapped) == 0x000001, "Wrong alignment on FortAISpawnerUtilityComponent_IsSpawnCountCapped");
static_assert(sizeof(FortAISpawnerUtilityComponent_IsSpawnCountCapped) == 0x000001, "Wrong size on FortAISpawnerUtilityComponent_IsSpawnCountCapped");
static_assert(offsetof(FortAISpawnerUtilityComponent_IsSpawnCountCapped, ReturnValue) == 0x000000, "Member 'FortAISpawnerUtilityComponent_IsSpawnCountCapped::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaBTService_ManageWeapon.ManageWeaponTargeting
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaBTService_ManageWeapon_ManageWeaponTargeting final
{
public:
	class UBehaviorTreeComponent*                 OwnerComp;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaBTService_ManageWeapon_ManageWeaponTargeting) == 0x000008, "Wrong alignment on FortAthenaBTService_ManageWeapon_ManageWeaponTargeting");
static_assert(sizeof(FortAthenaBTService_ManageWeapon_ManageWeaponTargeting) == 0x000008, "Wrong size on FortAthenaBTService_ManageWeapon_ManageWeaponTargeting");
static_assert(offsetof(FortAthenaBTService_ManageWeapon_ManageWeaponTargeting, OwnerComp) == 0x000000, "Member 'FortAthenaBTService_ManageWeapon_ManageWeaponTargeting::OwnerComp' has a wrong offset!");

// Function FortniteAI.FortAISpawnGroup.GetEnemy
// 0x0010 (0x0010 - 0x0000)
struct FortAISpawnGroup_GetEnemy final
{
public:
	int32                                         EnemyIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortAIPawnVariant>         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAISpawnGroup_GetEnemy) == 0x000008, "Wrong alignment on FortAISpawnGroup_GetEnemy");
static_assert(sizeof(FortAISpawnGroup_GetEnemy) == 0x000010, "Wrong size on FortAISpawnGroup_GetEnemy");
static_assert(offsetof(FortAISpawnGroup_GetEnemy, EnemyIndex) == 0x000000, "Member 'FortAISpawnGroup_GetEnemy::EnemyIndex' has a wrong offset!");
static_assert(offsetof(FortAISpawnGroup_GetEnemy, ReturnValue) == 0x000008, "Member 'FortAISpawnGroup_GetEnemy::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAISpawnGroup.GetNumberOfEnemies
// 0x0004 (0x0004 - 0x0000)
struct FortAISpawnGroup_GetNumberOfEnemies final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAISpawnGroup_GetNumberOfEnemies) == 0x000004, "Wrong alignment on FortAISpawnGroup_GetNumberOfEnemies");
static_assert(sizeof(FortAISpawnGroup_GetNumberOfEnemies) == 0x000004, "Wrong size on FortAISpawnGroup_GetNumberOfEnemies");
static_assert(offsetof(FortAISpawnGroup_GetNumberOfEnemies, ReturnValue) == 0x000000, "Member 'FortAISpawnGroup_GetNumberOfEnemies::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAISpawnGroup.IsLargeSpawnGroup
// 0x0001 (0x0001 - 0x0000)
struct FortAISpawnGroup_IsLargeSpawnGroup final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAISpawnGroup_IsLargeSpawnGroup) == 0x000001, "Wrong alignment on FortAISpawnGroup_IsLargeSpawnGroup");
static_assert(sizeof(FortAISpawnGroup_IsLargeSpawnGroup) == 0x000001, "Wrong size on FortAISpawnGroup_IsLargeSpawnGroup");
static_assert(offsetof(FortAISpawnGroup_IsLargeSpawnGroup, ReturnValue) == 0x000000, "Member 'FortAISpawnGroup_IsLargeSpawnGroup::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAISpawnGroup.IsPrototype
// 0x0001 (0x0001 - 0x0000)
struct FortAISpawnGroup_IsPrototype final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAISpawnGroup_IsPrototype) == 0x000001, "Wrong alignment on FortAISpawnGroup_IsPrototype");
static_assert(sizeof(FortAISpawnGroup_IsPrototype) == 0x000001, "Wrong size on FortAISpawnGroup_IsPrototype");
static_assert(offsetof(FortAISpawnGroup_IsPrototype, ReturnValue) == 0x000000, "Member 'FortAISpawnGroup_IsPrototype::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAISpawnGroup.IsValidForEnemySpawners
// 0x0001 (0x0001 - 0x0000)
struct FortAISpawnGroup_IsValidForEnemySpawners final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAISpawnGroup_IsValidForEnemySpawners) == 0x000001, "Wrong alignment on FortAISpawnGroup_IsValidForEnemySpawners");
static_assert(sizeof(FortAISpawnGroup_IsValidForEnemySpawners) == 0x000001, "Wrong size on FortAISpawnGroup_IsValidForEnemySpawners");
static_assert(offsetof(FortAISpawnGroup_IsValidForEnemySpawners, ReturnValue) == 0x000000, "Member 'FortAISpawnGroup_IsValidForEnemySpawners::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAITask_ExecuteAbility.OnInjectedHitResultDied
// 0x0060 (0x0060 - 0x0000)
struct FortAITask_ExecuteAbility_OnInjectedHitResultDied final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAITask_ExecuteAbility_OnInjectedHitResultDied) == 0x000008, "Wrong alignment on FortAITask_ExecuteAbility_OnInjectedHitResultDied");
static_assert(sizeof(FortAITask_ExecuteAbility_OnInjectedHitResultDied) == 0x000060, "Wrong size on FortAITask_ExecuteAbility_OnInjectedHitResultDied");
static_assert(offsetof(FortAITask_ExecuteAbility_OnInjectedHitResultDied, DamagedActor) == 0x000000, "Member 'FortAITask_ExecuteAbility_OnInjectedHitResultDied::DamagedActor' has a wrong offset!");
static_assert(offsetof(FortAITask_ExecuteAbility_OnInjectedHitResultDied, Damage) == 0x000008, "Member 'FortAITask_ExecuteAbility_OnInjectedHitResultDied::Damage' has a wrong offset!");
static_assert(offsetof(FortAITask_ExecuteAbility_OnInjectedHitResultDied, InstigatedBy) == 0x000010, "Member 'FortAITask_ExecuteAbility_OnInjectedHitResultDied::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortAITask_ExecuteAbility_OnInjectedHitResultDied, DamageCauser) == 0x000018, "Member 'FortAITask_ExecuteAbility_OnInjectedHitResultDied::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortAITask_ExecuteAbility_OnInjectedHitResultDied, HitLocation) == 0x000020, "Member 'FortAITask_ExecuteAbility_OnInjectedHitResultDied::HitLocation' has a wrong offset!");
static_assert(offsetof(FortAITask_ExecuteAbility_OnInjectedHitResultDied, FHitComponent) == 0x000038, "Member 'FortAITask_ExecuteAbility_OnInjectedHitResultDied::FHitComponent' has a wrong offset!");
static_assert(offsetof(FortAITask_ExecuteAbility_OnInjectedHitResultDied, BoneName) == 0x000040, "Member 'FortAITask_ExecuteAbility_OnInjectedHitResultDied::BoneName' has a wrong offset!");
static_assert(offsetof(FortAITask_ExecuteAbility_OnInjectedHitResultDied, Momentum) == 0x000048, "Member 'FortAITask_ExecuteAbility_OnInjectedHitResultDied::Momentum' has a wrong offset!");

// Function FortniteAI.FortAITetheringBoxBoundsInterface.GetTetheredBoxBoundsCenter
// 0x0018 (0x0018 - 0x0000)
struct FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsCenter final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsCenter) == 0x000008, "Wrong alignment on FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsCenter");
static_assert(sizeof(FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsCenter) == 0x000018, "Wrong size on FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsCenter");
static_assert(offsetof(FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsCenter, ReturnValue) == 0x000000, "Member 'FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsCenter::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAITetheringBoxBoundsInterface.GetTetheredBoxBoundsEQSGridSize
// 0x0004 (0x0004 - 0x0000)
struct FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsEQSGridSize final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsEQSGridSize) == 0x000004, "Wrong alignment on FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsEQSGridSize");
static_assert(sizeof(FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsEQSGridSize) == 0x000004, "Wrong size on FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsEQSGridSize");
static_assert(offsetof(FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsEQSGridSize, ReturnValue) == 0x000000, "Member 'FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsEQSGridSize::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAITetheringBoxBoundsInterface.GetTetheredBoxBoundsEQSSpaceBetween
// 0x0004 (0x0004 - 0x0000)
struct FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsEQSSpaceBetween final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsEQSSpaceBetween) == 0x000004, "Wrong alignment on FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsEQSSpaceBetween");
static_assert(sizeof(FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsEQSSpaceBetween) == 0x000004, "Wrong size on FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsEQSSpaceBetween");
static_assert(offsetof(FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsEQSSpaceBetween, ReturnValue) == 0x000000, "Member 'FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsEQSSpaceBetween::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAITetheringBoxBoundsInterface.GetTetheredBoxBoundsHeight
// 0x0004 (0x0004 - 0x0000)
struct FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsHeight) == 0x000004, "Wrong alignment on FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsHeight");
static_assert(sizeof(FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsHeight) == 0x000004, "Wrong size on FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsHeight");
static_assert(offsetof(FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsHeight, ReturnValue) == 0x000000, "Member 'FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsHeight::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAITetheringBoxBoundsInterface.GetTetheredBoxBoundsWidth
// 0x0004 (0x0004 - 0x0000)
struct FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsWidth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsWidth) == 0x000004, "Wrong alignment on FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsWidth");
static_assert(sizeof(FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsWidth) == 0x000004, "Wrong size on FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsWidth");
static_assert(offsetof(FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsWidth, ReturnValue) == 0x000000, "Member 'FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsWidth::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAsyncAction_MakeTieredWaveEncounterSettings.CreateAsyncAction_MakeTieredWaveEncounterSettings
// 0x0288 (0x0288 - 0x0000)
struct FortAsyncAction_MakeTieredWaveEncounterSettings_CreateAsyncAction_MakeTieredWaveEncounterSettings final
{
public:
	struct FTieredWaveSetData                     WaveData_0;                                        // 0x0000(0x01C8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FFortEncounterSettings                 InEncounterSettings;                               // 0x01C8(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UFortAsyncAction_MakeTieredWaveEncounterSettings* ReturnValue;                                       // 0x0280(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAsyncAction_MakeTieredWaveEncounterSettings_CreateAsyncAction_MakeTieredWaveEncounterSettings) == 0x000008, "Wrong alignment on FortAsyncAction_MakeTieredWaveEncounterSettings_CreateAsyncAction_MakeTieredWaveEncounterSettings");
static_assert(sizeof(FortAsyncAction_MakeTieredWaveEncounterSettings_CreateAsyncAction_MakeTieredWaveEncounterSettings) == 0x000288, "Wrong size on FortAsyncAction_MakeTieredWaveEncounterSettings_CreateAsyncAction_MakeTieredWaveEncounterSettings");
static_assert(offsetof(FortAsyncAction_MakeTieredWaveEncounterSettings_CreateAsyncAction_MakeTieredWaveEncounterSettings, WaveData_0) == 0x000000, "Member 'FortAsyncAction_MakeTieredWaveEncounterSettings_CreateAsyncAction_MakeTieredWaveEncounterSettings::WaveData_0' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_MakeTieredWaveEncounterSettings_CreateAsyncAction_MakeTieredWaveEncounterSettings, InEncounterSettings) == 0x0001C8, "Member 'FortAsyncAction_MakeTieredWaveEncounterSettings_CreateAsyncAction_MakeTieredWaveEncounterSettings::InEncounterSettings' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_MakeTieredWaveEncounterSettings_CreateAsyncAction_MakeTieredWaveEncounterSettings, ReturnValue) == 0x000280, "Member 'FortAsyncAction_MakeTieredWaveEncounterSettings_CreateAsyncAction_MakeTieredWaveEncounterSettings::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_LODBase.GetAILODSettingsContainer
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAISpawnerDataComponent_LODBase_GetAILODSettingsContainer final
{
public:
	class UFortAthenaAILODSettingsContainer*      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_LODBase_GetAILODSettingsContainer) == 0x000008, "Wrong alignment on FortAthenaAISpawnerDataComponent_LODBase_GetAILODSettingsContainer");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_LODBase_GetAILODSettingsContainer) == 0x000008, "Wrong size on FortAthenaAISpawnerDataComponent_LODBase_GetAILODSettingsContainer");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_LODBase_GetAILODSettingsContainer, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_LODBase_GetAILODSettingsContainer::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_LODBase.GetClientAILODSettings
// 0x02F0 (0x02F0 - 0x0000)
struct FortAthenaAISpawnerDataComponent_LODBase_GetClientAILODSettings final
{
public:
	struct FClientAILODSettings                   ReturnValue;                                       // 0x0000(0x02F0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_LODBase_GetClientAILODSettings) == 0x000008, "Wrong alignment on FortAthenaAISpawnerDataComponent_LODBase_GetClientAILODSettings");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_LODBase_GetClientAILODSettings) == 0x0002F0, "Wrong size on FortAthenaAISpawnerDataComponent_LODBase_GetClientAILODSettings");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_LODBase_GetClientAILODSettings, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_LODBase_GetClientAILODSettings::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotCosmeticData.FindLibraryDataFromName
// 0x0038 (0x0038 - 0x0000)
struct FortAthenaAIBotCosmeticData_FindLibraryDataFromName final
{
public:
	class FString                                 PartialName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortAthenaAIBotCosmeticLibraryData> ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotCosmeticData_FindLibraryDataFromName) == 0x000008, "Wrong alignment on FortAthenaAIBotCosmeticData_FindLibraryDataFromName");
static_assert(sizeof(FortAthenaAIBotCosmeticData_FindLibraryDataFromName) == 0x000038, "Wrong size on FortAthenaAIBotCosmeticData_FindLibraryDataFromName");
static_assert(offsetof(FortAthenaAIBotCosmeticData_FindLibraryDataFromName, PartialName) == 0x000000, "Member 'FortAthenaAIBotCosmeticData_FindLibraryDataFromName::PartialName' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotCosmeticData_FindLibraryDataFromName, ReturnValue) == 0x000010, "Member 'FortAthenaAIBotCosmeticData_FindLibraryDataFromName::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotCosmeticLibraryData.FillDataTableValuesFromSourceLibrary
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaAIBotCosmeticLibraryData_FillDataTableValuesFromSourceLibrary final
{
public:
	const class UFortAthenaAIBotCosmeticLibraryData* SourceLibrary;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAthenaAIBotCosmeticLibraryData_FillDataTableValuesFromSourceLibrary) == 0x000008, "Wrong alignment on FortAthenaAIBotCosmeticLibraryData_FillDataTableValuesFromSourceLibrary");
static_assert(sizeof(FortAthenaAIBotCosmeticLibraryData_FillDataTableValuesFromSourceLibrary) == 0x000010, "Wrong size on FortAthenaAIBotCosmeticLibraryData_FillDataTableValuesFromSourceLibrary");
static_assert(offsetof(FortAthenaAIBotCosmeticLibraryData_FillDataTableValuesFromSourceLibrary, SourceLibrary) == 0x000000, "Member 'FortAthenaAIBotCosmeticLibraryData_FillDataTableValuesFromSourceLibrary::SourceLibrary' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotCosmeticLibraryData_FillDataTableValuesFromSourceLibrary, ReturnValue) == 0x000008, "Member 'FortAthenaAIBotCosmeticLibraryData_FillDataTableValuesFromSourceLibrary::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotCosmeticLibraryData.FindDataTableFromAssetType
// 0x0018 (0x0018 - 0x0000)
struct FortAthenaAIBotCosmeticLibraryData_FindDataTableFromAssetType final
{
public:
	class FString                                 AssetType;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotCosmeticLibraryData_FindDataTableFromAssetType) == 0x000008, "Wrong alignment on FortAthenaAIBotCosmeticLibraryData_FindDataTableFromAssetType");
static_assert(sizeof(FortAthenaAIBotCosmeticLibraryData_FindDataTableFromAssetType) == 0x000018, "Wrong size on FortAthenaAIBotCosmeticLibraryData_FindDataTableFromAssetType");
static_assert(offsetof(FortAthenaAIBotCosmeticLibraryData_FindDataTableFromAssetType, AssetType) == 0x000000, "Member 'FortAthenaAIBotCosmeticLibraryData_FindDataTableFromAssetType::AssetType' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotCosmeticLibraryData_FindDataTableFromAssetType, ReturnValue) == 0x000010, "Member 'FortAthenaAIBotCosmeticLibraryData_FindDataTableFromAssetType::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotCosmeticLibraryData.RetrieveDataTables
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaAIBotCosmeticLibraryData_RetrieveDataTables final
{
public:
	TArray<class UDataTable*>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotCosmeticLibraryData_RetrieveDataTables) == 0x000008, "Wrong alignment on FortAthenaAIBotCosmeticLibraryData_RetrieveDataTables");
static_assert(sizeof(FortAthenaAIBotCosmeticLibraryData_RetrieveDataTables) == 0x000010, "Wrong size on FortAthenaAIBotCosmeticLibraryData_RetrieveDataTables");
static_assert(offsetof(FortAthenaAIBotCosmeticLibraryData_RetrieveDataTables, ReturnValue) == 0x000000, "Member 'FortAthenaAIBotCosmeticLibraryData_RetrieveDataTables::ReturnValue' has a wrong offset!");

// Function FortniteAI.BotCosmeticBlueprintHelperLibrary.ExportDataTableToSourceCSV
// 0x0010 (0x0010 - 0x0000)
struct BotCosmeticBlueprintHelperLibrary_ExportDataTableToSourceCSV final
{
public:
	const class UDataTable*                       DataTable;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanCheckOutFile;                                  // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BotCosmeticBlueprintHelperLibrary_ExportDataTableToSourceCSV) == 0x000008, "Wrong alignment on BotCosmeticBlueprintHelperLibrary_ExportDataTableToSourceCSV");
static_assert(sizeof(BotCosmeticBlueprintHelperLibrary_ExportDataTableToSourceCSV) == 0x000010, "Wrong size on BotCosmeticBlueprintHelperLibrary_ExportDataTableToSourceCSV");
static_assert(offsetof(BotCosmeticBlueprintHelperLibrary_ExportDataTableToSourceCSV, DataTable) == 0x000000, "Member 'BotCosmeticBlueprintHelperLibrary_ExportDataTableToSourceCSV::DataTable' has a wrong offset!");
static_assert(offsetof(BotCosmeticBlueprintHelperLibrary_ExportDataTableToSourceCSV, bCanCheckOutFile) == 0x000008, "Member 'BotCosmeticBlueprintHelperLibrary_ExportDataTableToSourceCSV::bCanCheckOutFile' has a wrong offset!");
static_assert(offsetof(BotCosmeticBlueprintHelperLibrary_ExportDataTableToSourceCSV, ReturnValue) == 0x000009, "Member 'BotCosmeticBlueprintHelperLibrary_ExportDataTableToSourceCSV::ReturnValue' has a wrong offset!");

// Function FortniteAI.BotCosmeticBlueprintHelperLibrary.GenerateWeightedCSV
// 0x0048 (0x0048 - 0x0000)
struct BotCosmeticBlueprintHelperLibrary_GenerateWeightedCSV final
{
public:
	class FString                                 AssetTypeName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AssetNames;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 AssetWeight;                                       // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 CSV;                                               // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BotCosmeticBlueprintHelperLibrary_GenerateWeightedCSV) == 0x000008, "Wrong alignment on BotCosmeticBlueprintHelperLibrary_GenerateWeightedCSV");
static_assert(sizeof(BotCosmeticBlueprintHelperLibrary_GenerateWeightedCSV) == 0x000048, "Wrong size on BotCosmeticBlueprintHelperLibrary_GenerateWeightedCSV");
static_assert(offsetof(BotCosmeticBlueprintHelperLibrary_GenerateWeightedCSV, AssetTypeName) == 0x000000, "Member 'BotCosmeticBlueprintHelperLibrary_GenerateWeightedCSV::AssetTypeName' has a wrong offset!");
static_assert(offsetof(BotCosmeticBlueprintHelperLibrary_GenerateWeightedCSV, AssetNames) == 0x000010, "Member 'BotCosmeticBlueprintHelperLibrary_GenerateWeightedCSV::AssetNames' has a wrong offset!");
static_assert(offsetof(BotCosmeticBlueprintHelperLibrary_GenerateWeightedCSV, AssetWeight) == 0x000020, "Member 'BotCosmeticBlueprintHelperLibrary_GenerateWeightedCSV::AssetWeight' has a wrong offset!");
static_assert(offsetof(BotCosmeticBlueprintHelperLibrary_GenerateWeightedCSV, CSV) == 0x000030, "Member 'BotCosmeticBlueprintHelperLibrary_GenerateWeightedCSV::CSV' has a wrong offset!");
static_assert(offsetof(BotCosmeticBlueprintHelperLibrary_GenerateWeightedCSV, ReturnValue) == 0x000040, "Member 'BotCosmeticBlueprintHelperLibrary_GenerateWeightedCSV::ReturnValue' has a wrong offset!");

// Function FortniteAI.BotCosmeticBlueprintHelperLibrary.LoadDataFromCSV
// 0x0068 (0x0068 - 0x0000)
struct BotCosmeticBlueprintHelperLibrary_LoadDataFromCSV final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ForbiddenAssetNames;                               // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         AssetNames;                                        // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         AssetTypes;                                        // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 AssetUsageCounts;                                  // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 AssetTypeSplitIndices;                             // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BotCosmeticBlueprintHelperLibrary_LoadDataFromCSV) == 0x000008, "Wrong alignment on BotCosmeticBlueprintHelperLibrary_LoadDataFromCSV");
static_assert(sizeof(BotCosmeticBlueprintHelperLibrary_LoadDataFromCSV) == 0x000068, "Wrong size on BotCosmeticBlueprintHelperLibrary_LoadDataFromCSV");
static_assert(offsetof(BotCosmeticBlueprintHelperLibrary_LoadDataFromCSV, FilePath) == 0x000000, "Member 'BotCosmeticBlueprintHelperLibrary_LoadDataFromCSV::FilePath' has a wrong offset!");
static_assert(offsetof(BotCosmeticBlueprintHelperLibrary_LoadDataFromCSV, ForbiddenAssetNames) == 0x000010, "Member 'BotCosmeticBlueprintHelperLibrary_LoadDataFromCSV::ForbiddenAssetNames' has a wrong offset!");
static_assert(offsetof(BotCosmeticBlueprintHelperLibrary_LoadDataFromCSV, AssetNames) == 0x000020, "Member 'BotCosmeticBlueprintHelperLibrary_LoadDataFromCSV::AssetNames' has a wrong offset!");
static_assert(offsetof(BotCosmeticBlueprintHelperLibrary_LoadDataFromCSV, AssetTypes) == 0x000030, "Member 'BotCosmeticBlueprintHelperLibrary_LoadDataFromCSV::AssetTypes' has a wrong offset!");
static_assert(offsetof(BotCosmeticBlueprintHelperLibrary_LoadDataFromCSV, AssetUsageCounts) == 0x000040, "Member 'BotCosmeticBlueprintHelperLibrary_LoadDataFromCSV::AssetUsageCounts' has a wrong offset!");
static_assert(offsetof(BotCosmeticBlueprintHelperLibrary_LoadDataFromCSV, AssetTypeSplitIndices) == 0x000050, "Member 'BotCosmeticBlueprintHelperLibrary_LoadDataFromCSV::AssetTypeSplitIndices' has a wrong offset!");
static_assert(offsetof(BotCosmeticBlueprintHelperLibrary_LoadDataFromCSV, ReturnValue) == 0x000060, "Member 'BotCosmeticBlueprintHelperLibrary_LoadDataFromCSV::ReturnValue' has a wrong offset!");

// Function FortniteAI.BotCosmeticBlueprintHelperLibrary.OpenCSVFileDialog
// 0x0028 (0x0028 - 0x0000)
struct BotCosmeticBlueprintHelperLibrary_OpenCSVFileDialog final
{
public:
	class FString                                 TitleDetails;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMultipleFiles;                               // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BotCosmeticBlueprintHelperLibrary_OpenCSVFileDialog) == 0x000008, "Wrong alignment on BotCosmeticBlueprintHelperLibrary_OpenCSVFileDialog");
static_assert(sizeof(BotCosmeticBlueprintHelperLibrary_OpenCSVFileDialog) == 0x000028, "Wrong size on BotCosmeticBlueprintHelperLibrary_OpenCSVFileDialog");
static_assert(offsetof(BotCosmeticBlueprintHelperLibrary_OpenCSVFileDialog, TitleDetails) == 0x000000, "Member 'BotCosmeticBlueprintHelperLibrary_OpenCSVFileDialog::TitleDetails' has a wrong offset!");
static_assert(offsetof(BotCosmeticBlueprintHelperLibrary_OpenCSVFileDialog, bAllowMultipleFiles) == 0x000010, "Member 'BotCosmeticBlueprintHelperLibrary_OpenCSVFileDialog::bAllowMultipleFiles' has a wrong offset!");
static_assert(offsetof(BotCosmeticBlueprintHelperLibrary_OpenCSVFileDialog, ReturnValue) == 0x000018, "Member 'BotCosmeticBlueprintHelperLibrary_OpenCSVFileDialog::ReturnValue' has a wrong offset!");

// Function FortniteAI.BotCosmeticBlueprintHelperLibrary.SplitDataArrayByType
// 0x0080 (0x0080 - 0x0000)
struct BotCosmeticBlueprintHelperLibrary_SplitDataArrayByType final
{
public:
	TArray<class FString>                         InAssetNames;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         InAssetTypes;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 InAssetUsageCounts;                                // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 InAssetTypeSplitIndices;                           // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         CurrentSplitIndex;                                 // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OutAssetType;                                      // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         OutAssetNames;                                     // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 OutAssetUsageCounts;                               // 0x0068(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BotCosmeticBlueprintHelperLibrary_SplitDataArrayByType) == 0x000008, "Wrong alignment on BotCosmeticBlueprintHelperLibrary_SplitDataArrayByType");
static_assert(sizeof(BotCosmeticBlueprintHelperLibrary_SplitDataArrayByType) == 0x000080, "Wrong size on BotCosmeticBlueprintHelperLibrary_SplitDataArrayByType");
static_assert(offsetof(BotCosmeticBlueprintHelperLibrary_SplitDataArrayByType, InAssetNames) == 0x000000, "Member 'BotCosmeticBlueprintHelperLibrary_SplitDataArrayByType::InAssetNames' has a wrong offset!");
static_assert(offsetof(BotCosmeticBlueprintHelperLibrary_SplitDataArrayByType, InAssetTypes) == 0x000010, "Member 'BotCosmeticBlueprintHelperLibrary_SplitDataArrayByType::InAssetTypes' has a wrong offset!");
static_assert(offsetof(BotCosmeticBlueprintHelperLibrary_SplitDataArrayByType, InAssetUsageCounts) == 0x000020, "Member 'BotCosmeticBlueprintHelperLibrary_SplitDataArrayByType::InAssetUsageCounts' has a wrong offset!");
static_assert(offsetof(BotCosmeticBlueprintHelperLibrary_SplitDataArrayByType, InAssetTypeSplitIndices) == 0x000030, "Member 'BotCosmeticBlueprintHelperLibrary_SplitDataArrayByType::InAssetTypeSplitIndices' has a wrong offset!");
static_assert(offsetof(BotCosmeticBlueprintHelperLibrary_SplitDataArrayByType, CurrentSplitIndex) == 0x000040, "Member 'BotCosmeticBlueprintHelperLibrary_SplitDataArrayByType::CurrentSplitIndex' has a wrong offset!");
static_assert(offsetof(BotCosmeticBlueprintHelperLibrary_SplitDataArrayByType, OutAssetType) == 0x000048, "Member 'BotCosmeticBlueprintHelperLibrary_SplitDataArrayByType::OutAssetType' has a wrong offset!");
static_assert(offsetof(BotCosmeticBlueprintHelperLibrary_SplitDataArrayByType, OutAssetNames) == 0x000058, "Member 'BotCosmeticBlueprintHelperLibrary_SplitDataArrayByType::OutAssetNames' has a wrong offset!");
static_assert(offsetof(BotCosmeticBlueprintHelperLibrary_SplitDataArrayByType, OutAssetUsageCounts) == 0x000068, "Member 'BotCosmeticBlueprintHelperLibrary_SplitDataArrayByType::OutAssetUsageCounts' has a wrong offset!");
static_assert(offsetof(BotCosmeticBlueprintHelperLibrary_SplitDataArrayByType, ReturnValue) == 0x000078, "Member 'BotCosmeticBlueprintHelperLibrary_SplitDataArrayByType::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotCustomizationData.SetCharacterCustomizationFromPlayerPawn
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAIBotCustomizationData_SetCharacterCustomizationFromPlayerPawn final
{
public:
	const class AFortPlayerPawn*                  InFortPawn;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotCustomizationData_SetCharacterCustomizationFromPlayerPawn) == 0x000008, "Wrong alignment on FortAthenaAIBotCustomizationData_SetCharacterCustomizationFromPlayerPawn");
static_assert(sizeof(FortAthenaAIBotCustomizationData_SetCharacterCustomizationFromPlayerPawn) == 0x000008, "Wrong size on FortAthenaAIBotCustomizationData_SetCharacterCustomizationFromPlayerPawn");
static_assert(offsetof(FortAthenaAIBotCustomizationData_SetCharacterCustomizationFromPlayerPawn, InFortPawn) == 0x000000, "Member 'FortAthenaAIBotCustomizationData_SetCharacterCustomizationFromPlayerPawn::InFortPawn' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_InventoryBase.GetInventoryItems
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaAISpawnerDataComponent_InventoryBase_GetInventoryItems final
{
public:
	TArray<struct FItemAndCount>                  OutList;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_InventoryBase_GetInventoryItems) == 0x000008, "Wrong alignment on FortAthenaAISpawnerDataComponent_InventoryBase_GetInventoryItems");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_InventoryBase_GetInventoryItems) == 0x000010, "Wrong size on FortAthenaAISpawnerDataComponent_InventoryBase_GetInventoryItems");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_InventoryBase_GetInventoryItems, OutList) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_InventoryBase_GetInventoryItems::OutList' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_CosmeticLibrary.GetAICosmeticLibraryData
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAISpawnerDataComponent_CosmeticLibrary_GetAICosmeticLibraryData final
{
public:
	class UFortAthenaAIBotCosmeticLibraryData*    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_CosmeticLibrary_GetAICosmeticLibraryData) == 0x000008, "Wrong alignment on FortAthenaAISpawnerDataComponent_CosmeticLibrary_GetAICosmeticLibraryData");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_CosmeticLibrary_GetAICosmeticLibraryData) == 0x000008, "Wrong size on FortAthenaAISpawnerDataComponent_CosmeticLibrary_GetAICosmeticLibraryData");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_CosmeticLibrary_GetAICosmeticLibraryData, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_CosmeticLibrary_GetAICosmeticLibraryData::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_CosmeticLibrary.GetAICosmeticLibraryDataIndex
// 0x0004 (0x0004 - 0x0000)
struct FortAthenaAISpawnerDataComponent_CosmeticLibrary_GetAICosmeticLibraryDataIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_CosmeticLibrary_GetAICosmeticLibraryDataIndex) == 0x000004, "Wrong alignment on FortAthenaAISpawnerDataComponent_CosmeticLibrary_GetAICosmeticLibraryDataIndex");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_CosmeticLibrary_GetAICosmeticLibraryDataIndex) == 0x000004, "Wrong size on FortAthenaAISpawnerDataComponent_CosmeticLibrary_GetAICosmeticLibraryDataIndex");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_CosmeticLibrary_GetAICosmeticLibraryDataIndex, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_CosmeticLibrary_GetAICosmeticLibraryDataIndex::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_GameplayAbilityBase.SetLooseTagsToApplyToPawn
// 0x0020 (0x0020 - 0x0000)
struct FortAthenaAISpawnerDataComponent_GameplayAbilityBase_SetLooseTagsToApplyToPawn final
{
public:
	struct FGameplayTagContainer                  InGameplayTagContainer;                            // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_GameplayAbilityBase_SetLooseTagsToApplyToPawn) == 0x000008, "Wrong alignment on FortAthenaAISpawnerDataComponent_GameplayAbilityBase_SetLooseTagsToApplyToPawn");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_GameplayAbilityBase_SetLooseTagsToApplyToPawn) == 0x000020, "Wrong size on FortAthenaAISpawnerDataComponent_GameplayAbilityBase_SetLooseTagsToApplyToPawn");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_GameplayAbilityBase_SetLooseTagsToApplyToPawn, InGameplayTagContainer) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_GameplayAbilityBase_SetLooseTagsToApplyToPawn::InGameplayTagContainer' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_GameplayAbilityBase.GetInitialGameplayAbilities
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaAISpawnerDataComponent_GameplayAbilityBase_GetInitialGameplayAbilities final
{
public:
	TArray<class UFortAbilitySet*>                OutGASets;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_GameplayAbilityBase_GetInitialGameplayAbilities) == 0x000008, "Wrong alignment on FortAthenaAISpawnerDataComponent_GameplayAbilityBase_GetInitialGameplayAbilities");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_GameplayAbilityBase_GetInitialGameplayAbilities) == 0x000010, "Wrong size on FortAthenaAISpawnerDataComponent_GameplayAbilityBase_GetInitialGameplayAbilities");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_GameplayAbilityBase_GetInitialGameplayAbilities, OutGASets) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_GameplayAbilityBase_GetInitialGameplayAbilities::OutGASets' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_GameplayAbilityBase.GetInitialGameplayEffects
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaAISpawnerDataComponent_GameplayAbilityBase_GetInitialGameplayEffects final
{
public:
	TArray<struct FInitialGameplayEffectInfo>     OutGEs;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_GameplayAbilityBase_GetInitialGameplayEffects) == 0x000008, "Wrong alignment on FortAthenaAISpawnerDataComponent_GameplayAbilityBase_GetInitialGameplayEffects");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_GameplayAbilityBase_GetInitialGameplayEffects) == 0x000010, "Wrong size on FortAthenaAISpawnerDataComponent_GameplayAbilityBase_GetInitialGameplayEffects");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_GameplayAbilityBase_GetInitialGameplayEffects, OutGEs) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_GameplayAbilityBase_GetInitialGameplayEffects::OutGEs' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_GameplayAbilityBase.GetLooseTagsToApplyToPawn
// 0x0020 (0x0020 - 0x0000)
struct FortAthenaAISpawnerDataComponent_GameplayAbilityBase_GetLooseTagsToApplyToPawn final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_GameplayAbilityBase_GetLooseTagsToApplyToPawn) == 0x000008, "Wrong alignment on FortAthenaAISpawnerDataComponent_GameplayAbilityBase_GetLooseTagsToApplyToPawn");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_GameplayAbilityBase_GetLooseTagsToApplyToPawn) == 0x000020, "Wrong size on FortAthenaAISpawnerDataComponent_GameplayAbilityBase_GetLooseTagsToApplyToPawn");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_GameplayAbilityBase_GetLooseTagsToApplyToPawn, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_GameplayAbilityBase_GetLooseTagsToApplyToPawn::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotEvaluator_Converted.OnConvertedEvent
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaAIBotEvaluator_Converted_OnConvertedEvent final
{
public:
	class AFortPawn*                              InstigatorPawn;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPawn*                              ConvertedPawn;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotEvaluator_Converted_OnConvertedEvent) == 0x000008, "Wrong alignment on FortAthenaAIBotEvaluator_Converted_OnConvertedEvent");
static_assert(sizeof(FortAthenaAIBotEvaluator_Converted_OnConvertedEvent) == 0x000010, "Wrong size on FortAthenaAIBotEvaluator_Converted_OnConvertedEvent");
static_assert(offsetof(FortAthenaAIBotEvaluator_Converted_OnConvertedEvent, InstigatorPawn) == 0x000000, "Member 'FortAthenaAIBotEvaluator_Converted_OnConvertedEvent::InstigatorPawn' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotEvaluator_Converted_OnConvertedEvent, ConvertedPawn) == 0x000008, "Member 'FortAthenaAIBotEvaluator_Converted_OnConvertedEvent::ConvertedPawn' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotEvaluator_Converted.OnUnconvertedEvent
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAIBotEvaluator_Converted_OnUnconvertedEvent final
{
public:
	class AFortPawn*                              UnconvertedPawn;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotEvaluator_Converted_OnUnconvertedEvent) == 0x000008, "Wrong alignment on FortAthenaAIBotEvaluator_Converted_OnUnconvertedEvent");
static_assert(sizeof(FortAthenaAIBotEvaluator_Converted_OnUnconvertedEvent) == 0x000008, "Wrong size on FortAthenaAIBotEvaluator_Converted_OnUnconvertedEvent");
static_assert(offsetof(FortAthenaAIBotEvaluator_Converted_OnUnconvertedEvent, UnconvertedPawn) == 0x000000, "Member 'FortAthenaAIBotEvaluator_Converted_OnUnconvertedEvent::UnconvertedPawn' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotEvaluator_DBNO.OnAllyPawnDBNOStateChanged
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaAIBotEvaluator_DBNO_OnAllyPawnDBNOStateChanged final
{
public:
	class AFortPawn*                              InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsDBNO;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAthenaAIBotEvaluator_DBNO_OnAllyPawnDBNOStateChanged) == 0x000008, "Wrong alignment on FortAthenaAIBotEvaluator_DBNO_OnAllyPawnDBNOStateChanged");
static_assert(sizeof(FortAthenaAIBotEvaluator_DBNO_OnAllyPawnDBNOStateChanged) == 0x000010, "Wrong size on FortAthenaAIBotEvaluator_DBNO_OnAllyPawnDBNOStateChanged");
static_assert(offsetof(FortAthenaAIBotEvaluator_DBNO_OnAllyPawnDBNOStateChanged, InPlayer) == 0x000000, "Member 'FortAthenaAIBotEvaluator_DBNO_OnAllyPawnDBNOStateChanged::InPlayer' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotEvaluator_DBNO_OnAllyPawnDBNOStateChanged, bInIsDBNO) == 0x000008, "Member 'FortAthenaAIBotEvaluator_DBNO_OnAllyPawnDBNOStateChanged::bInIsDBNO' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotEvaluator_EvasiveManeuvers.OnMoveCompleted
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAIBotEvaluator_EvasiveManeuvers_OnMoveCompleted final
{
public:
	struct FAIRequestID                           RequestId;                                         // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPathFollowingResult                          MovementResult;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAthenaAIBotEvaluator_EvasiveManeuvers_OnMoveCompleted) == 0x000004, "Wrong alignment on FortAthenaAIBotEvaluator_EvasiveManeuvers_OnMoveCompleted");
static_assert(sizeof(FortAthenaAIBotEvaluator_EvasiveManeuvers_OnMoveCompleted) == 0x000008, "Wrong size on FortAthenaAIBotEvaluator_EvasiveManeuvers_OnMoveCompleted");
static_assert(offsetof(FortAthenaAIBotEvaluator_EvasiveManeuvers_OnMoveCompleted, RequestId) == 0x000000, "Member 'FortAthenaAIBotEvaluator_EvasiveManeuvers_OnMoveCompleted::RequestId' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotEvaluator_EvasiveManeuvers_OnMoveCompleted, MovementResult) == 0x000004, "Member 'FortAthenaAIBotEvaluator_EvasiveManeuvers_OnMoveCompleted::MovementResult' has a wrong offset!");

// Function FortniteAI.FortAthenaTrackableAIObjectVehicleComponent.HandleSleepStateChanged
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaTrackableAIObjectVehicleComponent_HandleSleepStateChanged final
{
public:
	bool                                          bIsAwake;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaTrackableAIObjectVehicleComponent_HandleSleepStateChanged) == 0x000001, "Wrong alignment on FortAthenaTrackableAIObjectVehicleComponent_HandleSleepStateChanged");
static_assert(sizeof(FortAthenaTrackableAIObjectVehicleComponent_HandleSleepStateChanged) == 0x000001, "Wrong size on FortAthenaTrackableAIObjectVehicleComponent_HandleSleepStateChanged");
static_assert(offsetof(FortAthenaTrackableAIObjectVehicleComponent_HandleSleepStateChanged, bIsAwake) == 0x000000, "Member 'FortAthenaTrackableAIObjectVehicleComponent_HandleSleepStateChanged::bIsAwake' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotEvaluator_SandTunnel.OnBotControllerAlertLevelChanged
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaAIBotEvaluator_SandTunnel_OnBotControllerAlertLevelChanged final
{
public:
	class AFortAthenaAIBotController*             BotController;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlertLevel                                   OldAlertLevel;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlertLevel                                   NewAlertLevel;                                     // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAthenaAIBotEvaluator_SandTunnel_OnBotControllerAlertLevelChanged) == 0x000008, "Wrong alignment on FortAthenaAIBotEvaluator_SandTunnel_OnBotControllerAlertLevelChanged");
static_assert(sizeof(FortAthenaAIBotEvaluator_SandTunnel_OnBotControllerAlertLevelChanged) == 0x000010, "Wrong size on FortAthenaAIBotEvaluator_SandTunnel_OnBotControllerAlertLevelChanged");
static_assert(offsetof(FortAthenaAIBotEvaluator_SandTunnel_OnBotControllerAlertLevelChanged, BotController) == 0x000000, "Member 'FortAthenaAIBotEvaluator_SandTunnel_OnBotControllerAlertLevelChanged::BotController' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotEvaluator_SandTunnel_OnBotControllerAlertLevelChanged, OldAlertLevel) == 0x000008, "Member 'FortAthenaAIBotEvaluator_SandTunnel_OnBotControllerAlertLevelChanged::OldAlertLevel' has a wrong offset!");
static_assert(offsetof(FortAthenaAIBotEvaluator_SandTunnel_OnBotControllerAlertLevelChanged, NewAlertLevel) == 0x000009, "Member 'FortAthenaAIBotEvaluator_SandTunnel_OnBotControllerAlertLevelChanged::NewAlertLevel' has a wrong offset!");

// Function FortniteAI.FortAthenaNpcPatrollingComponent.SetPatrolPath
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaNpcPatrollingComponent_SetPatrolPath final
{
public:
	const class AFortAthenaPatrolPath*            NewPatrolPath;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOrientationAlreadyRandomized;                     // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAthenaNpcPatrollingComponent_SetPatrolPath) == 0x000008, "Wrong alignment on FortAthenaNpcPatrollingComponent_SetPatrolPath");
static_assert(sizeof(FortAthenaNpcPatrollingComponent_SetPatrolPath) == 0x000010, "Wrong size on FortAthenaNpcPatrollingComponent_SetPatrolPath");
static_assert(offsetof(FortAthenaNpcPatrollingComponent_SetPatrolPath, NewPatrolPath) == 0x000000, "Member 'FortAthenaNpcPatrollingComponent_SetPatrolPath::NewPatrolPath' has a wrong offset!");
static_assert(offsetof(FortAthenaNpcPatrollingComponent_SetPatrolPath, bOrientationAlreadyRandomized) == 0x000008, "Member 'FortAthenaNpcPatrollingComponent_SetPatrolPath::bOrientationAlreadyRandomized' has a wrong offset!");

// Function FortniteAI.FortAthenaNpcPatrollingComponent.GetPatrolPath
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaNpcPatrollingComponent_GetPatrolPath final
{
public:
	const class AFortAthenaPatrolPath*            ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaNpcPatrollingComponent_GetPatrolPath) == 0x000008, "Wrong alignment on FortAthenaNpcPatrollingComponent_GetPatrolPath");
static_assert(sizeof(FortAthenaNpcPatrollingComponent_GetPatrolPath) == 0x000008, "Wrong size on FortAthenaNpcPatrollingComponent_GetPatrolPath");
static_assert(offsetof(FortAthenaNpcPatrollingComponent_GetPatrolPath, ReturnValue) == 0x000000, "Member 'FortAthenaNpcPatrollingComponent_GetPatrolPath::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponentList.GetList
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaAISpawnerDataComponentList_GetList final
{
public:
	TArray<class UFortAthenaAISpawnerDataComponent*> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponentList_GetList) == 0x000008, "Wrong alignment on FortAthenaAISpawnerDataComponentList_GetList");
static_assert(sizeof(FortAthenaAISpawnerDataComponentList_GetList) == 0x000010, "Wrong size on FortAthenaAISpawnerDataComponentList_GetList");
static_assert(offsetof(FortAthenaAISpawnerDataComponentList_GetList, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerDataComponentList_GetList::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponentList.OverrideComponent
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaAISpawnerDataComponentList_OverrideComponent final
{
public:
	const class UFortAthenaAISpawnerDataComponent* NewComponent;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAthenaAISpawnerDataComponentList*  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponentList_OverrideComponent) == 0x000008, "Wrong alignment on FortAthenaAISpawnerDataComponentList_OverrideComponent");
static_assert(sizeof(FortAthenaAISpawnerDataComponentList_OverrideComponent) == 0x000010, "Wrong size on FortAthenaAISpawnerDataComponentList_OverrideComponent");
static_assert(offsetof(FortAthenaAISpawnerDataComponentList_OverrideComponent, NewComponent) == 0x000000, "Member 'FortAthenaAISpawnerDataComponentList_OverrideComponent::NewComponent' has a wrong offset!");
static_assert(offsetof(FortAthenaAISpawnerDataComponentList_OverrideComponent, ReturnValue) == 0x000008, "Member 'FortAthenaAISpawnerDataComponentList_OverrideComponent::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponentList.OverrideComponentClass
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaAISpawnerDataComponentList_OverrideComponentClass final
{
public:
	TSubclassOf<class UFortAthenaAISpawnerDataComponent> NewComponentSubClass;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAthenaAISpawnerDataComponentList*  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponentList_OverrideComponentClass) == 0x000008, "Wrong alignment on FortAthenaAISpawnerDataComponentList_OverrideComponentClass");
static_assert(sizeof(FortAthenaAISpawnerDataComponentList_OverrideComponentClass) == 0x000010, "Wrong size on FortAthenaAISpawnerDataComponentList_OverrideComponentClass");
static_assert(offsetof(FortAthenaAISpawnerDataComponentList_OverrideComponentClass, NewComponentSubClass) == 0x000000, "Member 'FortAthenaAISpawnerDataComponentList_OverrideComponentClass::NewComponentSubClass' has a wrong offset!");
static_assert(offsetof(FortAthenaAISpawnerDataComponentList_OverrideComponentClass, ReturnValue) == 0x000008, "Member 'FortAthenaAISpawnerDataComponentList_OverrideComponentClass::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponentList.GetOrCreateComponentClassForModification
// 0x0018 (0x0018 - 0x0000)
struct FortAthenaAISpawnerDataComponentList_GetOrCreateComponentClassForModification final
{
public:
	class UObject*                                ComponentOuter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortAthenaAISpawnerDataComponent> ClassToClone;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAthenaAISpawnerDataComponent*      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponentList_GetOrCreateComponentClassForModification) == 0x000008, "Wrong alignment on FortAthenaAISpawnerDataComponentList_GetOrCreateComponentClassForModification");
static_assert(sizeof(FortAthenaAISpawnerDataComponentList_GetOrCreateComponentClassForModification) == 0x000018, "Wrong size on FortAthenaAISpawnerDataComponentList_GetOrCreateComponentClassForModification");
static_assert(offsetof(FortAthenaAISpawnerDataComponentList_GetOrCreateComponentClassForModification, ComponentOuter) == 0x000000, "Member 'FortAthenaAISpawnerDataComponentList_GetOrCreateComponentClassForModification::ComponentOuter' has a wrong offset!");
static_assert(offsetof(FortAthenaAISpawnerDataComponentList_GetOrCreateComponentClassForModification, ClassToClone) == 0x000008, "Member 'FortAthenaAISpawnerDataComponentList_GetOrCreateComponentClassForModification::ClassToClone' has a wrong offset!");
static_assert(offsetof(FortAthenaAISpawnerDataComponentList_GetOrCreateComponentClassForModification, ReturnValue) == 0x000010, "Member 'FortAthenaAISpawnerDataComponentList_GetOrCreateComponentClassForModification::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotEvaluator_Storm.OnSafezoneStateChanged
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaAIBotEvaluator_Storm_OnSafezoneStateChanged final
{
public:
	EFortSafeZoneState                            NewState;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotEvaluator_Storm_OnSafezoneStateChanged) == 0x000001, "Wrong alignment on FortAthenaAIBotEvaluator_Storm_OnSafezoneStateChanged");
static_assert(sizeof(FortAthenaAIBotEvaluator_Storm_OnSafezoneStateChanged) == 0x000001, "Wrong size on FortAthenaAIBotEvaluator_Storm_OnSafezoneStateChanged");
static_assert(offsetof(FortAthenaAIBotEvaluator_Storm_OnSafezoneStateChanged, NewState) == 0x000000, "Member 'FortAthenaAIBotEvaluator_Storm_OnSafezoneStateChanged::NewState' has a wrong offset!");

// Function FortniteAI.FortQueryTwoPointSolver.AddNamedFloatParamA
// 0x0008 (0x0008 - 0x0000)
struct FortQueryTwoPointSolver_AddNamedFloatParamA final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQueryTwoPointSolver_AddNamedFloatParamA) == 0x000004, "Wrong alignment on FortQueryTwoPointSolver_AddNamedFloatParamA");
static_assert(sizeof(FortQueryTwoPointSolver_AddNamedFloatParamA) == 0x000008, "Wrong size on FortQueryTwoPointSolver_AddNamedFloatParamA");
static_assert(offsetof(FortQueryTwoPointSolver_AddNamedFloatParamA, ParamName) == 0x000000, "Member 'FortQueryTwoPointSolver_AddNamedFloatParamA::ParamName' has a wrong offset!");
static_assert(offsetof(FortQueryTwoPointSolver_AddNamedFloatParamA, Value) == 0x000004, "Member 'FortQueryTwoPointSolver_AddNamedFloatParamA::Value' has a wrong offset!");

// Function FortniteAI.FortQueryTwoPointSolver.AddNamedFloatParamB
// 0x0008 (0x0008 - 0x0000)
struct FortQueryTwoPointSolver_AddNamedFloatParamB final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQueryTwoPointSolver_AddNamedFloatParamB) == 0x000004, "Wrong alignment on FortQueryTwoPointSolver_AddNamedFloatParamB");
static_assert(sizeof(FortQueryTwoPointSolver_AddNamedFloatParamB) == 0x000008, "Wrong size on FortQueryTwoPointSolver_AddNamedFloatParamB");
static_assert(offsetof(FortQueryTwoPointSolver_AddNamedFloatParamB, ParamName) == 0x000000, "Member 'FortQueryTwoPointSolver_AddNamedFloatParamB::ParamName' has a wrong offset!");
static_assert(offsetof(FortQueryTwoPointSolver_AddNamedFloatParamB, Value) == 0x000004, "Member 'FortQueryTwoPointSolver_AddNamedFloatParamB::Value' has a wrong offset!");

// Function FortniteAI.FortQueryTwoPointSolver.OnCustomRotationMode
// 0x0030 (0x0030 - 0x0000)
struct FortQueryTwoPointSolver_OnCustomRotationMode final
{
public:
	struct FVector                                InPointA;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Querier;                                           // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQueryTwoPointSolver_OnCustomRotationMode) == 0x000008, "Wrong alignment on FortQueryTwoPointSolver_OnCustomRotationMode");
static_assert(sizeof(FortQueryTwoPointSolver_OnCustomRotationMode) == 0x000030, "Wrong size on FortQueryTwoPointSolver_OnCustomRotationMode");
static_assert(offsetof(FortQueryTwoPointSolver_OnCustomRotationMode, InPointA) == 0x000000, "Member 'FortQueryTwoPointSolver_OnCustomRotationMode::InPointA' has a wrong offset!");
static_assert(offsetof(FortQueryTwoPointSolver_OnCustomRotationMode, Querier) == 0x000018, "Member 'FortQueryTwoPointSolver_OnCustomRotationMode::Querier' has a wrong offset!");

// Function FortniteAI.FortQueryTwoPointSolver.SetCustomRotationA
// 0x0018 (0x0018 - 0x0000)
struct FortQueryTwoPointSolver_SetCustomRotationA final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQueryTwoPointSolver_SetCustomRotationA) == 0x000008, "Wrong alignment on FortQueryTwoPointSolver_SetCustomRotationA");
static_assert(sizeof(FortQueryTwoPointSolver_SetCustomRotationA) == 0x000018, "Wrong size on FortQueryTwoPointSolver_SetCustomRotationA");
static_assert(offsetof(FortQueryTwoPointSolver_SetCustomRotationA, Rotation) == 0x000000, "Member 'FortQueryTwoPointSolver_SetCustomRotationA::Rotation' has a wrong offset!");

// Function FortniteAI.FortQueryTwoPointSolver.Start
// 0x0008 (0x0008 - 0x0000)
struct FortQueryTwoPointSolver_Start final
{
public:
	class UObject*                                Querier;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQueryTwoPointSolver_Start) == 0x000008, "Wrong alignment on FortQueryTwoPointSolver_Start");
static_assert(sizeof(FortQueryTwoPointSolver_Start) == 0x000008, "Wrong size on FortQueryTwoPointSolver_Start");
static_assert(offsetof(FortQueryTwoPointSolver_Start, Querier) == 0x000000, "Member 'FortQueryTwoPointSolver_Start::Querier' has a wrong offset!");

// Function FortniteAI.FortQueryTwoPointSolver.GetRandomRotationOffset
// 0x0018 (0x0018 - 0x0000)
struct FortQueryTwoPointSolver_GetRandomRotationOffset final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQueryTwoPointSolver_GetRandomRotationOffset) == 0x000008, "Wrong alignment on FortQueryTwoPointSolver_GetRandomRotationOffset");
static_assert(sizeof(FortQueryTwoPointSolver_GetRandomRotationOffset) == 0x000018, "Wrong size on FortQueryTwoPointSolver_GetRandomRotationOffset");
static_assert(offsetof(FortQueryTwoPointSolver_GetRandomRotationOffset, ReturnValue) == 0x000000, "Member 'FortQueryTwoPointSolver_GetRandomRotationOffset::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAIBotPathFollowingComponent.HandlePawnTeleported
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAIBotPathFollowingComponent_HandlePawnTeleported final
{
public:
	class AFortPawn*                              TeleportedPawn;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIBotPathFollowingComponent_HandlePawnTeleported) == 0x000008, "Wrong alignment on FortAthenaAIBotPathFollowingComponent_HandlePawnTeleported");
static_assert(sizeof(FortAthenaAIBotPathFollowingComponent_HandlePawnTeleported) == 0x000008, "Wrong size on FortAthenaAIBotPathFollowingComponent_HandlePawnTeleported");
static_assert(offsetof(FortAthenaAIBotPathFollowingComponent_HandlePawnTeleported, TeleportedPawn) == 0x000000, "Member 'FortAthenaAIBotPathFollowingComponent_HandlePawnTeleported::TeleportedPawn' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_GameplayBase.SetCanBeConverted
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaAISpawnerDataComponent_GameplayBase_SetCanBeConverted final
{
public:
	bool                                          bInCanBeConverted;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_GameplayBase_SetCanBeConverted) == 0x000001, "Wrong alignment on FortAthenaAISpawnerDataComponent_GameplayBase_SetCanBeConverted");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_GameplayBase_SetCanBeConverted) == 0x000001, "Wrong size on FortAthenaAISpawnerDataComponent_GameplayBase_SetCanBeConverted");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_GameplayBase_SetCanBeConverted, bInCanBeConverted) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_GameplayBase_SetCanBeConverted::bInCanBeConverted' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_GameplayBase.SetCopyConverterSpecificRelations
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaAISpawnerDataComponent_GameplayBase_SetCopyConverterSpecificRelations final
{
public:
	bool                                          bInCopyConverterSpecificRelations;                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_GameplayBase_SetCopyConverterSpecificRelations) == 0x000001, "Wrong alignment on FortAthenaAISpawnerDataComponent_GameplayBase_SetCopyConverterSpecificRelations");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_GameplayBase_SetCopyConverterSpecificRelations) == 0x000001, "Wrong size on FortAthenaAISpawnerDataComponent_GameplayBase_SetCopyConverterSpecificRelations");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_GameplayBase_SetCopyConverterSpecificRelations, bInCopyConverterSpecificRelations) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_GameplayBase_SetCopyConverterSpecificRelations::bInCopyConverterSpecificRelations' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_GameplayBase.GetGlobalSpeedMultiplier
// 0x0004 (0x0004 - 0x0000)
struct FortAthenaAISpawnerDataComponent_GameplayBase_GetGlobalSpeedMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_GameplayBase_GetGlobalSpeedMultiplier) == 0x000004, "Wrong alignment on FortAthenaAISpawnerDataComponent_GameplayBase_GetGlobalSpeedMultiplier");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_GameplayBase_GetGlobalSpeedMultiplier) == 0x000004, "Wrong size on FortAthenaAISpawnerDataComponent_GameplayBase_GetGlobalSpeedMultiplier");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_GameplayBase_GetGlobalSpeedMultiplier, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_GameplayBase_GetGlobalSpeedMultiplier::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_GameplayBase.PostOnSpawnedBP
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAISpawnerDataComponent_GameplayBase_PostOnSpawnedBP final
{
public:
	class APawn*                                  PawnAI;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_GameplayBase_PostOnSpawnedBP) == 0x000008, "Wrong alignment on FortAthenaAISpawnerDataComponent_GameplayBase_PostOnSpawnedBP");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_GameplayBase_PostOnSpawnedBP) == 0x000008, "Wrong size on FortAthenaAISpawnerDataComponent_GameplayBase_PostOnSpawnedBP");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_GameplayBase_PostOnSpawnedBP, PawnAI) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_GameplayBase_PostOnSpawnedBP::PawnAI' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_GameplayBase.ShouldOverrideGlobalSpeedMultiplier
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaAISpawnerDataComponent_GameplayBase_ShouldOverrideGlobalSpeedMultiplier final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_GameplayBase_ShouldOverrideGlobalSpeedMultiplier) == 0x000001, "Wrong alignment on FortAthenaAISpawnerDataComponent_GameplayBase_ShouldOverrideGlobalSpeedMultiplier");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_GameplayBase_ShouldOverrideGlobalSpeedMultiplier) == 0x000001, "Wrong size on FortAthenaAISpawnerDataComponent_GameplayBase_ShouldOverrideGlobalSpeedMultiplier");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_GameplayBase_ShouldOverrideGlobalSpeedMultiplier, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_GameplayBase_ShouldOverrideGlobalSpeedMultiplier::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_AIBotGameplay.SetAssociatedPatrolPath
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAISpawnerDataComponent_AIBotGameplay_SetAssociatedPatrolPath final
{
public:
	class AFortAthenaPatrolPath*                  InAssociatedPatrolPath;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_AIBotGameplay_SetAssociatedPatrolPath) == 0x000008, "Wrong alignment on FortAthenaAISpawnerDataComponent_AIBotGameplay_SetAssociatedPatrolPath");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_AIBotGameplay_SetAssociatedPatrolPath) == 0x000008, "Wrong size on FortAthenaAISpawnerDataComponent_AIBotGameplay_SetAssociatedPatrolPath");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_AIBotGameplay_SetAssociatedPatrolPath, InAssociatedPatrolPath) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_AIBotGameplay_SetAssociatedPatrolPath::InAssociatedPatrolPath' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_AIBotGameplay.SetLeashInnerRadius
// 0x0004 (0x0004 - 0x0000)
struct FortAthenaAISpawnerDataComponent_AIBotGameplay_SetLeashInnerRadius final
{
public:
	float                                         InLeashInnerRadius;                                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_AIBotGameplay_SetLeashInnerRadius) == 0x000004, "Wrong alignment on FortAthenaAISpawnerDataComponent_AIBotGameplay_SetLeashInnerRadius");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_AIBotGameplay_SetLeashInnerRadius) == 0x000004, "Wrong size on FortAthenaAISpawnerDataComponent_AIBotGameplay_SetLeashInnerRadius");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_AIBotGameplay_SetLeashInnerRadius, InLeashInnerRadius) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_AIBotGameplay_SetLeashInnerRadius::InLeashInnerRadius' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_AIBotGameplay.SetLeashLocation
// 0x0018 (0x0018 - 0x0000)
struct FortAthenaAISpawnerDataComponent_AIBotGameplay_SetLeashLocation final
{
public:
	struct FVector                                InLeashLocation;                                   // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_AIBotGameplay_SetLeashLocation) == 0x000008, "Wrong alignment on FortAthenaAISpawnerDataComponent_AIBotGameplay_SetLeashLocation");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_AIBotGameplay_SetLeashLocation) == 0x000018, "Wrong size on FortAthenaAISpawnerDataComponent_AIBotGameplay_SetLeashLocation");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_AIBotGameplay_SetLeashLocation, InLeashLocation) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_AIBotGameplay_SetLeashLocation::InLeashLocation' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_AIBotGameplay.SetLeashOuterRadius
// 0x0004 (0x0004 - 0x0000)
struct FortAthenaAISpawnerDataComponent_AIBotGameplay_SetLeashOuterRadius final
{
public:
	float                                         InLeashOuterRadius;                                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_AIBotGameplay_SetLeashOuterRadius) == 0x000004, "Wrong alignment on FortAthenaAISpawnerDataComponent_AIBotGameplay_SetLeashOuterRadius");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_AIBotGameplay_SetLeashOuterRadius) == 0x000004, "Wrong size on FortAthenaAISpawnerDataComponent_AIBotGameplay_SetLeashOuterRadius");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_AIBotGameplay_SetLeashOuterRadius, InLeashOuterRadius) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_AIBotGameplay_SetLeashOuterRadius::InLeashOuterRadius' has a wrong offset!");

// Function FortniteAI.FortAthenaAIEvaluator_DormantUntilPhase.HandleGamePhaseStepChanged
// 0x0018 (0x0018 - 0x0000)
struct FortAthenaAIEvaluator_DormantUntilPhase_HandleGamePhaseStepChanged final
{
public:
	TScriptInterface<class IFortSafeZoneInterface> SafeZoneInterface;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAthenaGamePhaseStep                          GamePhaseStep;                                     // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAthenaAIEvaluator_DormantUntilPhase_HandleGamePhaseStepChanged) == 0x000008, "Wrong alignment on FortAthenaAIEvaluator_DormantUntilPhase_HandleGamePhaseStepChanged");
static_assert(sizeof(FortAthenaAIEvaluator_DormantUntilPhase_HandleGamePhaseStepChanged) == 0x000018, "Wrong size on FortAthenaAIEvaluator_DormantUntilPhase_HandleGamePhaseStepChanged");
static_assert(offsetof(FortAthenaAIEvaluator_DormantUntilPhase_HandleGamePhaseStepChanged, SafeZoneInterface) == 0x000000, "Member 'FortAthenaAIEvaluator_DormantUntilPhase_HandleGamePhaseStepChanged::SafeZoneInterface' has a wrong offset!");
static_assert(offsetof(FortAthenaAIEvaluator_DormantUntilPhase_HandleGamePhaseStepChanged, GamePhaseStep) == 0x000010, "Member 'FortAthenaAIEvaluator_DormantUntilPhase_HandleGamePhaseStepChanged::GamePhaseStep' has a wrong offset!");

// Function FortniteAI.FortInfluenceMap.K2_AddInfluenceSource
// 0x0038 (0x0038 - 0x0000)
struct FortInfluenceMap_K2_AddInfluenceSource final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SourceName;                                        // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInfluenceMap_K2_AddInfluenceSource) == 0x000008, "Wrong alignment on FortInfluenceMap_K2_AddInfluenceSource");
static_assert(sizeof(FortInfluenceMap_K2_AddInfluenceSource) == 0x000038, "Wrong size on FortInfluenceMap_K2_AddInfluenceSource");
static_assert(offsetof(FortInfluenceMap_K2_AddInfluenceSource, WorldContext) == 0x000000, "Member 'FortInfluenceMap_K2_AddInfluenceSource::WorldContext' has a wrong offset!");
static_assert(offsetof(FortInfluenceMap_K2_AddInfluenceSource, Position) == 0x000008, "Member 'FortInfluenceMap_K2_AddInfluenceSource::Position' has a wrong offset!");
static_assert(offsetof(FortInfluenceMap_K2_AddInfluenceSource, SourceName) == 0x000020, "Member 'FortInfluenceMap_K2_AddInfluenceSource::SourceName' has a wrong offset!");
static_assert(offsetof(FortInfluenceMap_K2_AddInfluenceSource, Strength) == 0x000030, "Member 'FortInfluenceMap_K2_AddInfluenceSource::Strength' has a wrong offset!");

// Function FortniteAI.FortInfluenceMap.K2_GetInfluenceSourcePositions
// 0x0018 (0x0018 - 0x0000)
struct FortInfluenceMap_K2_GetInfluenceSourcePositions final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        InfluenceSourcePositions;                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInfluenceMap_K2_GetInfluenceSourcePositions) == 0x000008, "Wrong alignment on FortInfluenceMap_K2_GetInfluenceSourcePositions");
static_assert(sizeof(FortInfluenceMap_K2_GetInfluenceSourcePositions) == 0x000018, "Wrong size on FortInfluenceMap_K2_GetInfluenceSourcePositions");
static_assert(offsetof(FortInfluenceMap_K2_GetInfluenceSourcePositions, WorldContext) == 0x000000, "Member 'FortInfluenceMap_K2_GetInfluenceSourcePositions::WorldContext' has a wrong offset!");
static_assert(offsetof(FortInfluenceMap_K2_GetInfluenceSourcePositions, InfluenceSourcePositions) == 0x000008, "Member 'FortInfluenceMap_K2_GetInfluenceSourcePositions::InfluenceSourcePositions' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_SpawnParamsBase.GetAIControllerClass
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetAIControllerClass final
{
public:
	TSubclassOf<class AAIController>              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetAIControllerClass) == 0x000008, "Wrong alignment on FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetAIControllerClass");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetAIControllerClass) == 0x000008, "Wrong size on FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetAIControllerClass");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetAIControllerClass, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetAIControllerClass::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_SpawnParamsBase.GetInAirSpawnTraceEndHeight
// 0x0004 (0x0004 - 0x0000)
struct FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetInAirSpawnTraceEndHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetInAirSpawnTraceEndHeight) == 0x000004, "Wrong alignment on FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetInAirSpawnTraceEndHeight");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetInAirSpawnTraceEndHeight) == 0x000004, "Wrong size on FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetInAirSpawnTraceEndHeight");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetInAirSpawnTraceEndHeight, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetInAirSpawnTraceEndHeight::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_SpawnParamsBase.GetInAirSpawnTraceSphereRadius
// 0x0004 (0x0004 - 0x0000)
struct FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetInAirSpawnTraceSphereRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetInAirSpawnTraceSphereRadius) == 0x000004, "Wrong alignment on FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetInAirSpawnTraceSphereRadius");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetInAirSpawnTraceSphereRadius) == 0x000004, "Wrong size on FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetInAirSpawnTraceSphereRadius");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetInAirSpawnTraceSphereRadius, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetInAirSpawnTraceSphereRadius::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_SpawnParamsBase.GetInAirSpawnTraceStartHeight
// 0x0004 (0x0004 - 0x0000)
struct FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetInAirSpawnTraceStartHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetInAirSpawnTraceStartHeight) == 0x000004, "Wrong alignment on FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetInAirSpawnTraceStartHeight");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetInAirSpawnTraceStartHeight) == 0x000004, "Wrong size on FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetInAirSpawnTraceStartHeight");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetInAirSpawnTraceStartHeight, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetInAirSpawnTraceStartHeight::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_SpawnParamsBase.GetPawnClass
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetPawnClass final
{
public:
	TSubclassOf<class APawn>                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetPawnClass) == 0x000008, "Wrong alignment on FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetPawnClass");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetPawnClass) == 0x000008, "Wrong size on FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetPawnClass");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetPawnClass, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetPawnClass::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_SpawnParamsBase.GetPawnStatHandle
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetPawnStatHandle final
{
public:
	struct FDataTableRowHandle                    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetPawnStatHandle) == 0x000008, "Wrong alignment on FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetPawnStatHandle");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetPawnStatHandle) == 0x000010, "Wrong size on FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetPawnStatHandle");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetPawnStatHandle, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetPawnStatHandle::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_SpawnParamsBase.GetSpawnerDataSpawnedAsChildren
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetSpawnerDataSpawnedAsChildren final
{
public:
	TArray<TSubclassOf<class UFortAthenaAISpawnerData>> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetSpawnerDataSpawnedAsChildren) == 0x000008, "Wrong alignment on FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetSpawnerDataSpawnedAsChildren");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetSpawnerDataSpawnedAsChildren) == 0x000010, "Wrong size on FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetSpawnerDataSpawnedAsChildren");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetSpawnerDataSpawnedAsChildren, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetSpawnerDataSpawnedAsChildren::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_SpawnParamsBase.GetSpawnTracePadding
// 0x0004 (0x0004 - 0x0000)
struct FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetSpawnTracePadding final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetSpawnTracePadding) == 0x000004, "Wrong alignment on FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetSpawnTracePadding");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetSpawnTracePadding) == 0x000004, "Wrong size on FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetSpawnTracePadding");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetSpawnTracePadding, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_SpawnParamsBase_GetSpawnTracePadding::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_SpawnParamsBase.ShouldCheckForOverlaps
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaAISpawnerDataComponent_SpawnParamsBase_ShouldCheckForOverlaps final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_SpawnParamsBase_ShouldCheckForOverlaps) == 0x000001, "Wrong alignment on FortAthenaAISpawnerDataComponent_SpawnParamsBase_ShouldCheckForOverlaps");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_SpawnParamsBase_ShouldCheckForOverlaps) == 0x000001, "Wrong size on FortAthenaAISpawnerDataComponent_SpawnParamsBase_ShouldCheckForOverlaps");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_SpawnParamsBase_ShouldCheckForOverlaps, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_SpawnParamsBase_ShouldCheckForOverlaps::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_SpawnParamsBase.ShouldSpawnInAir
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaAISpawnerDataComponent_SpawnParamsBase_ShouldSpawnInAir final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_SpawnParamsBase_ShouldSpawnInAir) == 0x000001, "Wrong alignment on FortAthenaAISpawnerDataComponent_SpawnParamsBase_ShouldSpawnInAir");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_SpawnParamsBase_ShouldSpawnInAir) == 0x000001, "Wrong size on FortAthenaAISpawnerDataComponent_SpawnParamsBase_ShouldSpawnInAir");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_SpawnParamsBase_ShouldSpawnInAir, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_SpawnParamsBase_ShouldSpawnInAir::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAIRuntimeParameters_BehaviorTreeControl.DisableBehaviorTreeBranch
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaAIRuntimeParameters_BehaviorTreeControl_DisableBehaviorTreeBranch final
{
public:
	EBehaviorTreeBranches                         Behavior;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIRuntimeParameters_BehaviorTreeControl_DisableBehaviorTreeBranch) == 0x000001, "Wrong alignment on FortAthenaAIRuntimeParameters_BehaviorTreeControl_DisableBehaviorTreeBranch");
static_assert(sizeof(FortAthenaAIRuntimeParameters_BehaviorTreeControl_DisableBehaviorTreeBranch) == 0x000001, "Wrong size on FortAthenaAIRuntimeParameters_BehaviorTreeControl_DisableBehaviorTreeBranch");
static_assert(offsetof(FortAthenaAIRuntimeParameters_BehaviorTreeControl_DisableBehaviorTreeBranch, Behavior) == 0x000000, "Member 'FortAthenaAIRuntimeParameters_BehaviorTreeControl_DisableBehaviorTreeBranch::Behavior' has a wrong offset!");

// Function FortniteAI.FortAthenaAIRuntimeParameters_BehaviorTreeControl.EnableBehaviorTreeBranch
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaAIRuntimeParameters_BehaviorTreeControl_EnableBehaviorTreeBranch final
{
public:
	EBehaviorTreeBranches                         Behavior;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIRuntimeParameters_BehaviorTreeControl_EnableBehaviorTreeBranch) == 0x000001, "Wrong alignment on FortAthenaAIRuntimeParameters_BehaviorTreeControl_EnableBehaviorTreeBranch");
static_assert(sizeof(FortAthenaAIRuntimeParameters_BehaviorTreeControl_EnableBehaviorTreeBranch) == 0x000001, "Wrong size on FortAthenaAIRuntimeParameters_BehaviorTreeControl_EnableBehaviorTreeBranch");
static_assert(offsetof(FortAthenaAIRuntimeParameters_BehaviorTreeControl_EnableBehaviorTreeBranch, Behavior) == 0x000000, "Member 'FortAthenaAIRuntimeParameters_BehaviorTreeControl_EnableBehaviorTreeBranch::Behavior' has a wrong offset!");

// Function FortniteAI.FortAthenaAIRuntimeParameters_BehaviorTreeControl.IsBehaviorTreeBranchActive
// 0x0002 (0x0002 - 0x0000)
struct FortAthenaAIRuntimeParameters_BehaviorTreeControl_IsBehaviorTreeBranchActive final
{
public:
	EBehaviorTreeBranches                         Behavior;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIRuntimeParameters_BehaviorTreeControl_IsBehaviorTreeBranchActive) == 0x000001, "Wrong alignment on FortAthenaAIRuntimeParameters_BehaviorTreeControl_IsBehaviorTreeBranchActive");
static_assert(sizeof(FortAthenaAIRuntimeParameters_BehaviorTreeControl_IsBehaviorTreeBranchActive) == 0x000002, "Wrong size on FortAthenaAIRuntimeParameters_BehaviorTreeControl_IsBehaviorTreeBranchActive");
static_assert(offsetof(FortAthenaAIRuntimeParameters_BehaviorTreeControl_IsBehaviorTreeBranchActive, Behavior) == 0x000000, "Member 'FortAthenaAIRuntimeParameters_BehaviorTreeControl_IsBehaviorTreeBranchActive::Behavior' has a wrong offset!");
static_assert(offsetof(FortAthenaAIRuntimeParameters_BehaviorTreeControl_IsBehaviorTreeBranchActive, ReturnValue) == 0x000001, "Member 'FortAthenaAIRuntimeParameters_BehaviorTreeControl_IsBehaviorTreeBranchActive::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_AIBotConversation.SetOverridenConversationParticipantName
// 0x0018 (0x0018 - 0x0000)
struct FortAthenaAISpawnerDataComponent_AIBotConversation_SetOverridenConversationParticipantName final
{
public:
	class FText                                   SpeakerName;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_AIBotConversation_SetOverridenConversationParticipantName) == 0x000008, "Wrong alignment on FortAthenaAISpawnerDataComponent_AIBotConversation_SetOverridenConversationParticipantName");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_AIBotConversation_SetOverridenConversationParticipantName) == 0x000018, "Wrong size on FortAthenaAISpawnerDataComponent_AIBotConversation_SetOverridenConversationParticipantName");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_AIBotConversation_SetOverridenConversationParticipantName, SpeakerName) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_AIBotConversation_SetOverridenConversationParticipantName::SpeakerName' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_AIBotConversation.GetOverridenConversationParticipantName
// 0x0018 (0x0018 - 0x0000)
struct FortAthenaAISpawnerDataComponent_AIBotConversation_GetOverridenConversationParticipantName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_AIBotConversation_GetOverridenConversationParticipantName) == 0x000008, "Wrong alignment on FortAthenaAISpawnerDataComponent_AIBotConversation_GetOverridenConversationParticipantName");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_AIBotConversation_GetOverridenConversationParticipantName) == 0x000018, "Wrong size on FortAthenaAISpawnerDataComponent_AIBotConversation_GetOverridenConversationParticipantName");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_AIBotConversation_GetOverridenConversationParticipantName, ReturnValue) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_AIBotConversation_GetOverridenConversationParticipantName::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAIRuntimeParameters_AIConvert.SetCanBeConverted
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaAIRuntimeParameters_AIConvert_SetCanBeConverted final
{
public:
	bool                                          bInCanBeConverted;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIRuntimeParameters_AIConvert_SetCanBeConverted) == 0x000001, "Wrong alignment on FortAthenaAIRuntimeParameters_AIConvert_SetCanBeConverted");
static_assert(sizeof(FortAthenaAIRuntimeParameters_AIConvert_SetCanBeConverted) == 0x000001, "Wrong size on FortAthenaAIRuntimeParameters_AIConvert_SetCanBeConverted");
static_assert(offsetof(FortAthenaAIRuntimeParameters_AIConvert_SetCanBeConverted, bInCanBeConverted) == 0x000000, "Member 'FortAthenaAIRuntimeParameters_AIConvert_SetCanBeConverted::bInCanBeConverted' has a wrong offset!");

// Function FortniteAI.FortAthenaAIRuntimeParameters_AIConvert.SetCanBeConvertedFromDBNO
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaAIRuntimeParameters_AIConvert_SetCanBeConvertedFromDBNO final
{
public:
	bool                                          bInCanBeConvertedFromDBNO;                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIRuntimeParameters_AIConvert_SetCanBeConvertedFromDBNO) == 0x000001, "Wrong alignment on FortAthenaAIRuntimeParameters_AIConvert_SetCanBeConvertedFromDBNO");
static_assert(sizeof(FortAthenaAIRuntimeParameters_AIConvert_SetCanBeConvertedFromDBNO) == 0x000001, "Wrong size on FortAthenaAIRuntimeParameters_AIConvert_SetCanBeConvertedFromDBNO");
static_assert(offsetof(FortAthenaAIRuntimeParameters_AIConvert_SetCanBeConvertedFromDBNO, bInCanBeConvertedFromDBNO) == 0x000000, "Member 'FortAthenaAIRuntimeParameters_AIConvert_SetCanBeConvertedFromDBNO::bInCanBeConvertedFromDBNO' has a wrong offset!");

// Function FortniteAI.FortAthenaAIRuntimeParameters_AIConvert.SetForceKillWhenUnconverted
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaAIRuntimeParameters_AIConvert_SetForceKillWhenUnconverted final
{
public:
	bool                                          bInForceKillWhenUnconverted;                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIRuntimeParameters_AIConvert_SetForceKillWhenUnconverted) == 0x000001, "Wrong alignment on FortAthenaAIRuntimeParameters_AIConvert_SetForceKillWhenUnconverted");
static_assert(sizeof(FortAthenaAIRuntimeParameters_AIConvert_SetForceKillWhenUnconverted) == 0x000001, "Wrong size on FortAthenaAIRuntimeParameters_AIConvert_SetForceKillWhenUnconverted");
static_assert(offsetof(FortAthenaAIRuntimeParameters_AIConvert_SetForceKillWhenUnconverted, bInForceKillWhenUnconverted) == 0x000000, "Member 'FortAthenaAIRuntimeParameters_AIConvert_SetForceKillWhenUnconverted::bInForceKillWhenUnconverted' has a wrong offset!");

// Function FortniteAI.FortAthenaAIRuntimeParameters_AIConvert.GetCanBeConverted
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaAIRuntimeParameters_AIConvert_GetCanBeConverted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIRuntimeParameters_AIConvert_GetCanBeConverted) == 0x000001, "Wrong alignment on FortAthenaAIRuntimeParameters_AIConvert_GetCanBeConverted");
static_assert(sizeof(FortAthenaAIRuntimeParameters_AIConvert_GetCanBeConverted) == 0x000001, "Wrong size on FortAthenaAIRuntimeParameters_AIConvert_GetCanBeConverted");
static_assert(offsetof(FortAthenaAIRuntimeParameters_AIConvert_GetCanBeConverted, ReturnValue) == 0x000000, "Member 'FortAthenaAIRuntimeParameters_AIConvert_GetCanBeConverted::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAIRuntimeParameters_AIConvert.GetCanBeConvertedFromDBNO
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaAIRuntimeParameters_AIConvert_GetCanBeConvertedFromDBNO final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIRuntimeParameters_AIConvert_GetCanBeConvertedFromDBNO) == 0x000001, "Wrong alignment on FortAthenaAIRuntimeParameters_AIConvert_GetCanBeConvertedFromDBNO");
static_assert(sizeof(FortAthenaAIRuntimeParameters_AIConvert_GetCanBeConvertedFromDBNO) == 0x000001, "Wrong size on FortAthenaAIRuntimeParameters_AIConvert_GetCanBeConvertedFromDBNO");
static_assert(offsetof(FortAthenaAIRuntimeParameters_AIConvert_GetCanBeConvertedFromDBNO, ReturnValue) == 0x000000, "Member 'FortAthenaAIRuntimeParameters_AIConvert_GetCanBeConvertedFromDBNO::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAIRuntimeParameters_AIConvert.GetForceKillWhenUnconverted
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaAIRuntimeParameters_AIConvert_GetForceKillWhenUnconverted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAIRuntimeParameters_AIConvert_GetForceKillWhenUnconverted) == 0x000001, "Wrong alignment on FortAthenaAIRuntimeParameters_AIConvert_GetForceKillWhenUnconverted");
static_assert(sizeof(FortAthenaAIRuntimeParameters_AIConvert_GetForceKillWhenUnconverted) == 0x000001, "Wrong size on FortAthenaAIRuntimeParameters_AIConvert_GetForceKillWhenUnconverted");
static_assert(offsetof(FortAthenaAIRuntimeParameters_AIConvert_GetForceKillWhenUnconverted, ReturnValue) == 0x000000, "Member 'FortAthenaAIRuntimeParameters_AIConvert_GetForceKillWhenUnconverted::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAISpawnerDataComponent_AIBotInventory.SetInventoryItems
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaAISpawnerDataComponent_AIBotInventory_SetInventoryItems final
{
public:
	TArray<struct FItemAndCount>                  InItems;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAISpawnerDataComponent_AIBotInventory_SetInventoryItems) == 0x000008, "Wrong alignment on FortAthenaAISpawnerDataComponent_AIBotInventory_SetInventoryItems");
static_assert(sizeof(FortAthenaAISpawnerDataComponent_AIBotInventory_SetInventoryItems) == 0x000010, "Wrong size on FortAthenaAISpawnerDataComponent_AIBotInventory_SetInventoryItems");
static_assert(offsetof(FortAthenaAISpawnerDataComponent_AIBotInventory_SetInventoryItems, InItems) == 0x000000, "Member 'FortAthenaAISpawnerDataComponent_AIBotInventory_SetInventoryItems::InItems' has a wrong offset!");

// Function FortniteAI.FortAthenaAlertStateComponent.OnStealthMeterChanged
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaAlertStateComponent_OnStealthMeterChanged final
{
public:
	class AFortAthenaAIBotController*             BotController;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StealthMeterTarget_0;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StealthMeterTargetTime_0;                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAlertStateComponent_OnStealthMeterChanged) == 0x000008, "Wrong alignment on FortAthenaAlertStateComponent_OnStealthMeterChanged");
static_assert(sizeof(FortAthenaAlertStateComponent_OnStealthMeterChanged) == 0x000010, "Wrong size on FortAthenaAlertStateComponent_OnStealthMeterChanged");
static_assert(offsetof(FortAthenaAlertStateComponent_OnStealthMeterChanged, BotController) == 0x000000, "Member 'FortAthenaAlertStateComponent_OnStealthMeterChanged::BotController' has a wrong offset!");
static_assert(offsetof(FortAthenaAlertStateComponent_OnStealthMeterChanged, StealthMeterTarget_0) == 0x000008, "Member 'FortAthenaAlertStateComponent_OnStealthMeterChanged::StealthMeterTarget_0' has a wrong offset!");
static_assert(offsetof(FortAthenaAlertStateComponent_OnStealthMeterChanged, StealthMeterTargetTime_0) == 0x00000C, "Member 'FortAthenaAlertStateComponent_OnStealthMeterChanged::StealthMeterTargetTime_0' has a wrong offset!");

// Function FortniteAI.FortAthenaAlertStateComponent.SetStealthMeterTarget
// 0x0004 (0x0004 - 0x0000)
struct FortAthenaAlertStateComponent_SetStealthMeterTarget final
{
public:
	float                                         InStealthMeterTarget;                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAlertStateComponent_SetStealthMeterTarget) == 0x000004, "Wrong alignment on FortAthenaAlertStateComponent_SetStealthMeterTarget");
static_assert(sizeof(FortAthenaAlertStateComponent_SetStealthMeterTarget) == 0x000004, "Wrong size on FortAthenaAlertStateComponent_SetStealthMeterTarget");
static_assert(offsetof(FortAthenaAlertStateComponent_SetStealthMeterTarget, InStealthMeterTarget) == 0x000000, "Member 'FortAthenaAlertStateComponent_SetStealthMeterTarget::InStealthMeterTarget' has a wrong offset!");

// Function FortniteAI.FortAthenaAlertStateComponent.SetStealthMeterTargetTime
// 0x0004 (0x0004 - 0x0000)
struct FortAthenaAlertStateComponent_SetStealthMeterTargetTime final
{
public:
	float                                         InStealthMeterTargetTime;                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAlertStateComponent_SetStealthMeterTargetTime) == 0x000004, "Wrong alignment on FortAthenaAlertStateComponent_SetStealthMeterTargetTime");
static_assert(sizeof(FortAthenaAlertStateComponent_SetStealthMeterTargetTime) == 0x000004, "Wrong size on FortAthenaAlertStateComponent_SetStealthMeterTargetTime");
static_assert(offsetof(FortAthenaAlertStateComponent_SetStealthMeterTargetTime, InStealthMeterTargetTime) == 0x000000, "Member 'FortAthenaAlertStateComponent_SetStealthMeterTargetTime::InStealthMeterTargetTime' has a wrong offset!");

// Function FortniteAI.FortAthenaAlertStateComponent.GetStealthMeterTarget
// 0x0004 (0x0004 - 0x0000)
struct FortAthenaAlertStateComponent_GetStealthMeterTarget final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAlertStateComponent_GetStealthMeterTarget) == 0x000004, "Wrong alignment on FortAthenaAlertStateComponent_GetStealthMeterTarget");
static_assert(sizeof(FortAthenaAlertStateComponent_GetStealthMeterTarget) == 0x000004, "Wrong size on FortAthenaAlertStateComponent_GetStealthMeterTarget");
static_assert(offsetof(FortAthenaAlertStateComponent_GetStealthMeterTarget, ReturnValue) == 0x000000, "Member 'FortAthenaAlertStateComponent_GetStealthMeterTarget::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaAlertStateComponent.GetStealthMeterTargetTime
// 0x0004 (0x0004 - 0x0000)
struct FortAthenaAlertStateComponent_GetStealthMeterTargetTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAlertStateComponent_GetStealthMeterTargetTime) == 0x000004, "Wrong alignment on FortAthenaAlertStateComponent_GetStealthMeterTargetTime");
static_assert(sizeof(FortAthenaAlertStateComponent_GetStealthMeterTargetTime) == 0x000004, "Wrong size on FortAthenaAlertStateComponent_GetStealthMeterTargetTime");
static_assert(offsetof(FortAthenaAlertStateComponent_GetStealthMeterTargetTime, ReturnValue) == 0x000000, "Member 'FortAthenaAlertStateComponent_GetStealthMeterTargetTime::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaLeashComponent.GetLeashCenter
// 0x0018 (0x0018 - 0x0000)
struct FortAthenaLeashComponent_GetLeashCenter final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLeashComponent_GetLeashCenter) == 0x000008, "Wrong alignment on FortAthenaLeashComponent_GetLeashCenter");
static_assert(sizeof(FortAthenaLeashComponent_GetLeashCenter) == 0x000018, "Wrong size on FortAthenaLeashComponent_GetLeashCenter");
static_assert(offsetof(FortAthenaLeashComponent_GetLeashCenter, ReturnValue) == 0x000000, "Member 'FortAthenaLeashComponent_GetLeashCenter::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaLeashComponent.GetLeashRadius
// 0x0004 (0x0004 - 0x0000)
struct FortAthenaLeashComponent_GetLeashRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLeashComponent_GetLeashRadius) == 0x000004, "Wrong alignment on FortAthenaLeashComponent_GetLeashRadius");
static_assert(sizeof(FortAthenaLeashComponent_GetLeashRadius) == 0x000004, "Wrong size on FortAthenaLeashComponent_GetLeashRadius");
static_assert(offsetof(FortAthenaLeashComponent_GetLeashRadius, ReturnValue) == 0x000000, "Member 'FortAthenaLeashComponent_GetLeashRadius::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaLeashComponent.IsInsideLeash
// 0x0020 (0x0020 - 0x0000)
struct FortAthenaLeashComponent_IsInsideLeash final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAthenaLeashComponent_IsInsideLeash) == 0x000008, "Wrong alignment on FortAthenaLeashComponent_IsInsideLeash");
static_assert(sizeof(FortAthenaLeashComponent_IsInsideLeash) == 0x000020, "Wrong size on FortAthenaLeashComponent_IsInsideLeash");
static_assert(offsetof(FortAthenaLeashComponent_IsInsideLeash, Location) == 0x000000, "Member 'FortAthenaLeashComponent_IsInsideLeash::Location' has a wrong offset!");
static_assert(offsetof(FortAthenaLeashComponent_IsInsideLeash, ReturnValue) == 0x000018, "Member 'FortAthenaLeashComponent_IsInsideLeash::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaLocalGameplayBehavior.OnExecute
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaLocalGameplayBehavior_OnExecute final
{
public:
	class AActor*                                 Activator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaLocalGameplayBehavior_OnExecute) == 0x000008, "Wrong alignment on FortAthenaLocalGameplayBehavior_OnExecute");
static_assert(sizeof(FortAthenaLocalGameplayBehavior_OnExecute) == 0x000008, "Wrong size on FortAthenaLocalGameplayBehavior_OnExecute");
static_assert(offsetof(FortAthenaLocalGameplayBehavior_OnExecute, Activator) == 0x000000, "Member 'FortAthenaLocalGameplayBehavior_OnExecute::Activator' has a wrong offset!");

// Function FortniteAI.FortAthenaNPCLoopStateComponent.InitLoopState
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaNPCLoopStateComponent_InitLoopState final
{
public:
	class AFortPawn*                              PawnOwner;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaNPCLoopStateComponent_InitLoopState) == 0x000008, "Wrong alignment on FortAthenaNPCLoopStateComponent_InitLoopState");
static_assert(sizeof(FortAthenaNPCLoopStateComponent_InitLoopState) == 0x000008, "Wrong size on FortAthenaNPCLoopStateComponent_InitLoopState");
static_assert(offsetof(FortAthenaNPCLoopStateComponent_InitLoopState, PawnOwner) == 0x000000, "Member 'FortAthenaNPCLoopStateComponent_InitLoopState::PawnOwner' has a wrong offset!");

// Function FortniteAI.FortAthenaNPCLoopStateComponent.OnOwnerPawnDied
// 0x0060 (0x0060 - 0x0000)
struct FortAthenaNPCLoopStateComponent_OnOwnerPawnDied final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaNPCLoopStateComponent_OnOwnerPawnDied) == 0x000008, "Wrong alignment on FortAthenaNPCLoopStateComponent_OnOwnerPawnDied");
static_assert(sizeof(FortAthenaNPCLoopStateComponent_OnOwnerPawnDied) == 0x000060, "Wrong size on FortAthenaNPCLoopStateComponent_OnOwnerPawnDied");
static_assert(offsetof(FortAthenaNPCLoopStateComponent_OnOwnerPawnDied, DamagedActor) == 0x000000, "Member 'FortAthenaNPCLoopStateComponent_OnOwnerPawnDied::DamagedActor' has a wrong offset!");
static_assert(offsetof(FortAthenaNPCLoopStateComponent_OnOwnerPawnDied, Damage) == 0x000008, "Member 'FortAthenaNPCLoopStateComponent_OnOwnerPawnDied::Damage' has a wrong offset!");
static_assert(offsetof(FortAthenaNPCLoopStateComponent_OnOwnerPawnDied, InstigatedBy) == 0x000010, "Member 'FortAthenaNPCLoopStateComponent_OnOwnerPawnDied::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortAthenaNPCLoopStateComponent_OnOwnerPawnDied, DamageCauser) == 0x000018, "Member 'FortAthenaNPCLoopStateComponent_OnOwnerPawnDied::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortAthenaNPCLoopStateComponent_OnOwnerPawnDied, HitLocation) == 0x000020, "Member 'FortAthenaNPCLoopStateComponent_OnOwnerPawnDied::HitLocation' has a wrong offset!");
static_assert(offsetof(FortAthenaNPCLoopStateComponent_OnOwnerPawnDied, FHitComponent) == 0x000038, "Member 'FortAthenaNPCLoopStateComponent_OnOwnerPawnDied::FHitComponent' has a wrong offset!");
static_assert(offsetof(FortAthenaNPCLoopStateComponent_OnOwnerPawnDied, BoneName) == 0x000040, "Member 'FortAthenaNPCLoopStateComponent_OnOwnerPawnDied::BoneName' has a wrong offset!");
static_assert(offsetof(FortAthenaNPCLoopStateComponent_OnOwnerPawnDied, Momentum) == 0x000048, "Member 'FortAthenaNPCLoopStateComponent_OnOwnerPawnDied::Momentum' has a wrong offset!");

// Function FortniteAI.FortAthenaPatrolPath.OnCurrentPlaylistLoaded
// 0x0028 (0x0028 - 0x0000)
struct FortAthenaPatrolPath_OnCurrentPlaylistLoaded final
{
public:
	class FName                                   PlaylistName;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  PlaylistContextTags;                               // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaPatrolPath_OnCurrentPlaylistLoaded) == 0x000008, "Wrong alignment on FortAthenaPatrolPath_OnCurrentPlaylistLoaded");
static_assert(sizeof(FortAthenaPatrolPath_OnCurrentPlaylistLoaded) == 0x000028, "Wrong size on FortAthenaPatrolPath_OnCurrentPlaylistLoaded");
static_assert(offsetof(FortAthenaPatrolPath_OnCurrentPlaylistLoaded, PlaylistName) == 0x000000, "Member 'FortAthenaPatrolPath_OnCurrentPlaylistLoaded::PlaylistName' has a wrong offset!");
static_assert(offsetof(FortAthenaPatrolPath_OnCurrentPlaylistLoaded, PlaylistContextTags) == 0x000008, "Member 'FortAthenaPatrolPath_OnCurrentPlaylistLoaded::PlaylistContextTags' has a wrong offset!");

// Function FortniteAI.FortAthenaPatrolPath.SetPatrolPathEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaPatrolPath_SetPatrolPathEnabled final
{
public:
	bool                                          bIsEnabled;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaPatrolPath_SetPatrolPathEnabled) == 0x000001, "Wrong alignment on FortAthenaPatrolPath_SetPatrolPathEnabled");
static_assert(sizeof(FortAthenaPatrolPath_SetPatrolPathEnabled) == 0x000001, "Wrong size on FortAthenaPatrolPath_SetPatrolPathEnabled");
static_assert(offsetof(FortAthenaPatrolPath_SetPatrolPathEnabled, bIsEnabled) == 0x000000, "Member 'FortAthenaPatrolPath_SetPatrolPathEnabled::bIsEnabled' has a wrong offset!");

// Function FortniteAI.FortAthenaPatrolPath.CanBeUsed
// 0x0001 (0x0001 - 0x0000)
struct FortAthenaPatrolPath_CanBeUsed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaPatrolPath_CanBeUsed) == 0x000001, "Wrong alignment on FortAthenaPatrolPath_CanBeUsed");
static_assert(sizeof(FortAthenaPatrolPath_CanBeUsed) == 0x000001, "Wrong size on FortAthenaPatrolPath_CanBeUsed");
static_assert(offsetof(FortAthenaPatrolPath_CanBeUsed, ReturnValue) == 0x000000, "Member 'FortAthenaPatrolPath_CanBeUsed::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortAthenaPatrolPath.GetPatrolPoints
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaPatrolPath_GetPatrolPoints final
{
public:
	TArray<class AFortAthenaPatrolPoint*>         OutPatrolPoints;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaPatrolPath_GetPatrolPoints) == 0x000008, "Wrong alignment on FortAthenaPatrolPath_GetPatrolPoints");
static_assert(sizeof(FortAthenaPatrolPath_GetPatrolPoints) == 0x000010, "Wrong size on FortAthenaPatrolPath_GetPatrolPoints");
static_assert(offsetof(FortAthenaPatrolPath_GetPatrolPoints, OutPatrolPoints) == 0x000000, "Member 'FortAthenaPatrolPath_GetPatrolPoints::OutPatrolPoints' has a wrong offset!");

// Function FortniteAI.FortCollisionResponseSwapperComponent.HandleBeginOverlap
// 0x0100 (0x0100 - 0x0000)
struct FortCollisionResponseSwapperComponent_HandleBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollisionResponseSwapperComponent_HandleBeginOverlap) == 0x000008, "Wrong alignment on FortCollisionResponseSwapperComponent_HandleBeginOverlap");
static_assert(sizeof(FortCollisionResponseSwapperComponent_HandleBeginOverlap) == 0x000100, "Wrong size on FortCollisionResponseSwapperComponent_HandleBeginOverlap");
static_assert(offsetof(FortCollisionResponseSwapperComponent_HandleBeginOverlap, OverlappedComponent) == 0x000000, "Member 'FortCollisionResponseSwapperComponent_HandleBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(FortCollisionResponseSwapperComponent_HandleBeginOverlap, OtherActor) == 0x000008, "Member 'FortCollisionResponseSwapperComponent_HandleBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(FortCollisionResponseSwapperComponent_HandleBeginOverlap, OtherComp) == 0x000010, "Member 'FortCollisionResponseSwapperComponent_HandleBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(FortCollisionResponseSwapperComponent_HandleBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'FortCollisionResponseSwapperComponent_HandleBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(FortCollisionResponseSwapperComponent_HandleBeginOverlap, bFromSweep) == 0x00001C, "Member 'FortCollisionResponseSwapperComponent_HandleBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(FortCollisionResponseSwapperComponent_HandleBeginOverlap, SweepResult) == 0x000020, "Member 'FortCollisionResponseSwapperComponent_HandleBeginOverlap::SweepResult' has a wrong offset!");

// Function FortniteAI.FortCollisionResponseSwapperComponent.HandleEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct FortCollisionResponseSwapperComponent_HandleEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCollisionResponseSwapperComponent_HandleEndOverlap) == 0x000008, "Wrong alignment on FortCollisionResponseSwapperComponent_HandleEndOverlap");
static_assert(sizeof(FortCollisionResponseSwapperComponent_HandleEndOverlap) == 0x000020, "Wrong size on FortCollisionResponseSwapperComponent_HandleEndOverlap");
static_assert(offsetof(FortCollisionResponseSwapperComponent_HandleEndOverlap, OverlappedComponent) == 0x000000, "Member 'FortCollisionResponseSwapperComponent_HandleEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(FortCollisionResponseSwapperComponent_HandleEndOverlap, OtherActor) == 0x000008, "Member 'FortCollisionResponseSwapperComponent_HandleEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(FortCollisionResponseSwapperComponent_HandleEndOverlap, OtherComp) == 0x000010, "Member 'FortCollisionResponseSwapperComponent_HandleEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(FortCollisionResponseSwapperComponent_HandleEndOverlap, OtherBodyIndex) == 0x000018, "Member 'FortCollisionResponseSwapperComponent_HandleEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function FortniteAI.FortCollisionResponseSwapperComponent.RegisterCallbacksForOverlap
// 0x0010 (0x0010 - 0x0000)
struct FortCollisionResponseSwapperComponent_RegisterCallbacksForOverlap final
{
public:
	class UPrimitiveComponent*                    InCollisionPrimitiveComponent;                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    InOverlapPrimitiveComponent;                       // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollisionResponseSwapperComponent_RegisterCallbacksForOverlap) == 0x000008, "Wrong alignment on FortCollisionResponseSwapperComponent_RegisterCallbacksForOverlap");
static_assert(sizeof(FortCollisionResponseSwapperComponent_RegisterCallbacksForOverlap) == 0x000010, "Wrong size on FortCollisionResponseSwapperComponent_RegisterCallbacksForOverlap");
static_assert(offsetof(FortCollisionResponseSwapperComponent_RegisterCallbacksForOverlap, InCollisionPrimitiveComponent) == 0x000000, "Member 'FortCollisionResponseSwapperComponent_RegisterCallbacksForOverlap::InCollisionPrimitiveComponent' has a wrong offset!");
static_assert(offsetof(FortCollisionResponseSwapperComponent_RegisterCallbacksForOverlap, InOverlapPrimitiveComponent) == 0x000008, "Member 'FortCollisionResponseSwapperComponent_RegisterCallbacksForOverlap::InOverlapPrimitiveComponent' has a wrong offset!");

// Function FortniteAI.FortEQSPrevisActor.SetQueryTemplate
// 0x0008 (0x0008 - 0x0000)
struct FortEQSPrevisActor_SetQueryTemplate final
{
public:
	class UEnvQuery*                              InPrevisQueryTemplate;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEQSPrevisActor_SetQueryTemplate) == 0x000008, "Wrong alignment on FortEQSPrevisActor_SetQueryTemplate");
static_assert(sizeof(FortEQSPrevisActor_SetQueryTemplate) == 0x000008, "Wrong size on FortEQSPrevisActor_SetQueryTemplate");
static_assert(offsetof(FortEQSPrevisActor_SetQueryTemplate, InPrevisQueryTemplate) == 0x000000, "Member 'FortEQSPrevisActor_SetQueryTemplate::InPrevisQueryTemplate' has a wrong offset!");

// Function FortniteAI.FortPatrolWardInterface.GetAffectingDistance
// 0x0004 (0x0004 - 0x0000)
struct FortPatrolWardInterface_GetAffectingDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPatrolWardInterface_GetAffectingDistance) == 0x000004, "Wrong alignment on FortPatrolWardInterface_GetAffectingDistance");
static_assert(sizeof(FortPatrolWardInterface_GetAffectingDistance) == 0x000004, "Wrong size on FortPatrolWardInterface_GetAffectingDistance");
static_assert(offsetof(FortPatrolWardInterface_GetAffectingDistance, ReturnValue) == 0x000000, "Member 'FortPatrolWardInterface_GetAffectingDistance::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortPatrolWardInterface.GetAffectingType
// 0x0001 (0x0001 - 0x0000)
struct FortPatrolWardInterface_GetAffectingType final
{
public:
	EWardAffectType                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPatrolWardInterface_GetAffectingType) == 0x000001, "Wrong alignment on FortPatrolWardInterface_GetAffectingType");
static_assert(sizeof(FortPatrolWardInterface_GetAffectingType) == 0x000001, "Wrong size on FortPatrolWardInterface_GetAffectingType");
static_assert(offsetof(FortPatrolWardInterface_GetAffectingType, ReturnValue) == 0x000000, "Member 'FortPatrolWardInterface_GetAffectingType::ReturnValue' has a wrong offset!");

// Function FortniteAI.FortPawnComponent_AIFormation.OnUserDied
// 0x0060 (0x0060 - 0x0000)
struct FortPawnComponent_AIFormation_OnUserDied final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_AIFormation_OnUserDied) == 0x000008, "Wrong alignment on FortPawnComponent_AIFormation_OnUserDied");
static_assert(sizeof(FortPawnComponent_AIFormation_OnUserDied) == 0x000060, "Wrong size on FortPawnComponent_AIFormation_OnUserDied");
static_assert(offsetof(FortPawnComponent_AIFormation_OnUserDied, DamagedActor) == 0x000000, "Member 'FortPawnComponent_AIFormation_OnUserDied::DamagedActor' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_AIFormation_OnUserDied, Damage) == 0x000008, "Member 'FortPawnComponent_AIFormation_OnUserDied::Damage' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_AIFormation_OnUserDied, InstigatedBy) == 0x000010, "Member 'FortPawnComponent_AIFormation_OnUserDied::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_AIFormation_OnUserDied, DamageCauser) == 0x000018, "Member 'FortPawnComponent_AIFormation_OnUserDied::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_AIFormation_OnUserDied, HitLocation) == 0x000020, "Member 'FortPawnComponent_AIFormation_OnUserDied::HitLocation' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_AIFormation_OnUserDied, FHitComponent) == 0x000038, "Member 'FortPawnComponent_AIFormation_OnUserDied::FHitComponent' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_AIFormation_OnUserDied, BoneName) == 0x000040, "Member 'FortPawnComponent_AIFormation_OnUserDied::BoneName' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_AIFormation_OnUserDied, Momentum) == 0x000048, "Member 'FortPawnComponent_AIFormation_OnUserDied::Momentum' has a wrong offset!");

// Function FortniteAI.FortPawnComponent_AIGroup.OnGroupMemberDied
// 0x0060 (0x0060 - 0x0000)
struct FortPawnComponent_AIGroup_OnGroupMemberDied final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawnComponent_AIGroup_OnGroupMemberDied) == 0x000008, "Wrong alignment on FortPawnComponent_AIGroup_OnGroupMemberDied");
static_assert(sizeof(FortPawnComponent_AIGroup_OnGroupMemberDied) == 0x000060, "Wrong size on FortPawnComponent_AIGroup_OnGroupMemberDied");
static_assert(offsetof(FortPawnComponent_AIGroup_OnGroupMemberDied, DamagedActor) == 0x000000, "Member 'FortPawnComponent_AIGroup_OnGroupMemberDied::DamagedActor' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_AIGroup_OnGroupMemberDied, Damage) == 0x000008, "Member 'FortPawnComponent_AIGroup_OnGroupMemberDied::Damage' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_AIGroup_OnGroupMemberDied, InstigatedBy) == 0x000010, "Member 'FortPawnComponent_AIGroup_OnGroupMemberDied::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_AIGroup_OnGroupMemberDied, DamageCauser) == 0x000018, "Member 'FortPawnComponent_AIGroup_OnGroupMemberDied::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_AIGroup_OnGroupMemberDied, HitLocation) == 0x000020, "Member 'FortPawnComponent_AIGroup_OnGroupMemberDied::HitLocation' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_AIGroup_OnGroupMemberDied, FHitComponent) == 0x000038, "Member 'FortPawnComponent_AIGroup_OnGroupMemberDied::FHitComponent' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_AIGroup_OnGroupMemberDied, BoneName) == 0x000040, "Member 'FortPawnComponent_AIGroup_OnGroupMemberDied::BoneName' has a wrong offset!");
static_assert(offsetof(FortPawnComponent_AIGroup_OnGroupMemberDied, Momentum) == 0x000048, "Member 'FortPawnComponent_AIGroup_OnGroupMemberDied::Momentum' has a wrong offset!");

// Function FortniteAI.ThreatCloud.OnCloudDeactivated
// 0x0001 (0x0001 - 0x0000)
struct ThreatCloud_OnCloudDeactivated final
{
public:
	EFortThreatDeactivationType                   DeactivationType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreatCloud_OnCloudDeactivated) == 0x000001, "Wrong alignment on ThreatCloud_OnCloudDeactivated");
static_assert(sizeof(ThreatCloud_OnCloudDeactivated) == 0x000001, "Wrong size on ThreatCloud_OnCloudDeactivated");
static_assert(offsetof(ThreatCloud_OnCloudDeactivated, DeactivationType) == 0x000000, "Member 'ThreatCloud_OnCloudDeactivated::DeactivationType' has a wrong offset!");

// Function FortniteAI.ThreatCloud.OnCloudHiddenChange
// 0x0001 (0x0001 - 0x0000)
struct ThreatCloud_OnCloudHiddenChange final
{
public:
	bool                                          bCloudsAreHidden;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreatCloud_OnCloudHiddenChange) == 0x000001, "Wrong alignment on ThreatCloud_OnCloudHiddenChange");
static_assert(sizeof(ThreatCloud_OnCloudHiddenChange) == 0x000001, "Wrong size on ThreatCloud_OnCloudHiddenChange");
static_assert(offsetof(ThreatCloud_OnCloudHiddenChange, bCloudsAreHidden) == 0x000000, "Member 'ThreatCloud_OnCloudHiddenChange::bCloudsAreHidden' has a wrong offset!");

// Function FortniteAI.ThreatCloud.OnLightningStrike
// 0x0040 (0x0040 - 0x0000)
struct ThreatCloud_OnLightningStrike final
{
public:
	struct FVector                                StartLocation;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndLocation;                                       // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABuildingRift*                          Rift;                                              // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLightningStruckRift;                              // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThreatCloud_OnLightningStrike) == 0x000008, "Wrong alignment on ThreatCloud_OnLightningStrike");
static_assert(sizeof(ThreatCloud_OnLightningStrike) == 0x000040, "Wrong size on ThreatCloud_OnLightningStrike");
static_assert(offsetof(ThreatCloud_OnLightningStrike, StartLocation) == 0x000000, "Member 'ThreatCloud_OnLightningStrike::StartLocation' has a wrong offset!");
static_assert(offsetof(ThreatCloud_OnLightningStrike, EndLocation) == 0x000018, "Member 'ThreatCloud_OnLightningStrike::EndLocation' has a wrong offset!");
static_assert(offsetof(ThreatCloud_OnLightningStrike, Rift) == 0x000030, "Member 'ThreatCloud_OnLightningStrike::Rift' has a wrong offset!");
static_assert(offsetof(ThreatCloud_OnLightningStrike, bLightningStruckRift) == 0x000038, "Member 'ThreatCloud_OnLightningStrike::bLightningStruckRift' has a wrong offset!");

// Function FortniteAI.ThreatCloud.GetThreatVolume
// 0x0038 (0x0038 - 0x0000)
struct ThreatCloud_GetThreatVolume final
{
public:
	struct FBox                                   ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreatCloud_GetThreatVolume) == 0x000008, "Wrong alignment on ThreatCloud_GetThreatVolume");
static_assert(sizeof(ThreatCloud_GetThreatVolume) == 0x000038, "Wrong size on ThreatCloud_GetThreatVolume");
static_assert(offsetof(ThreatCloud_GetThreatVolume, ReturnValue) == 0x000000, "Member 'ThreatCloud_GetThreatVolume::ReturnValue' has a wrong offset!");

}

