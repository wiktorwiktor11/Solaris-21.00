#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SoundLibrary

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_0_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum SoundLibrary.ESoundLibraryNotifyTriggerType
// NumValues: 0x0004
enum class ESoundLibraryNotifyTriggerType : uint8
{
	Play                                     = 0,
	Stop                                     = 1,
	None                                     = 2,
	ESoundLibraryNotifyTriggerType_MAX       = 3,
};

// ScriptStruct SoundLibrary.SoundLibraryAnimContextSettings
// 0x0020 (0x0020 - 0x0000)
struct FSoundLibraryAnimContextSettings final
{
public:
	struct FFloatInterval                         AnimRateThreshold;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EventName;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttachToActor;                                    // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachName;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFadeOutOnEnd;                                     // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeTime;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NotifyTriggerChance;                               // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSoundLibraryAnimContextSettings) == 0x000004, "Wrong alignment on FSoundLibraryAnimContextSettings");
static_assert(sizeof(FSoundLibraryAnimContextSettings) == 0x000020, "Wrong size on FSoundLibraryAnimContextSettings");
static_assert(offsetof(FSoundLibraryAnimContextSettings, AnimRateThreshold) == 0x000000, "Member 'FSoundLibraryAnimContextSettings::AnimRateThreshold' has a wrong offset!");
static_assert(offsetof(FSoundLibraryAnimContextSettings, EventName) == 0x000008, "Member 'FSoundLibraryAnimContextSettings::EventName' has a wrong offset!");
static_assert(offsetof(FSoundLibraryAnimContextSettings, bAttachToActor) == 0x00000C, "Member 'FSoundLibraryAnimContextSettings::bAttachToActor' has a wrong offset!");
static_assert(offsetof(FSoundLibraryAnimContextSettings, AttachName) == 0x000010, "Member 'FSoundLibraryAnimContextSettings::AttachName' has a wrong offset!");
static_assert(offsetof(FSoundLibraryAnimContextSettings, bFadeOutOnEnd) == 0x000014, "Member 'FSoundLibraryAnimContextSettings::bFadeOutOnEnd' has a wrong offset!");
static_assert(offsetof(FSoundLibraryAnimContextSettings, FadeTime) == 0x000018, "Member 'FSoundLibraryAnimContextSettings::FadeTime' has a wrong offset!");
static_assert(offsetof(FSoundLibraryAnimContextSettings, NotifyTriggerChance) == 0x00001C, "Member 'FSoundLibraryAnimContextSettings::NotifyTriggerChance' has a wrong offset!");

// ScriptStruct SoundLibrary.SoundLibraryPlaySoundResult
// 0x0028 (0x0028 - 0x0000)
struct FSoundLibraryPlaySoundResult final
{
public:
	struct FGameplayTag                           EventName;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasBlocked;                                       // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x12];                                       // 0x0006(0x0012)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAudioComponent*>                AudioComponents;                                   // 0x0018(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSoundLibraryPlaySoundResult) == 0x000008, "Wrong alignment on FSoundLibraryPlaySoundResult");
static_assert(sizeof(FSoundLibraryPlaySoundResult) == 0x000028, "Wrong size on FSoundLibraryPlaySoundResult");
static_assert(offsetof(FSoundLibraryPlaySoundResult, EventName) == 0x000000, "Member 'FSoundLibraryPlaySoundResult::EventName' has a wrong offset!");
static_assert(offsetof(FSoundLibraryPlaySoundResult, bWasBlocked) == 0x000004, "Member 'FSoundLibraryPlaySoundResult::bWasBlocked' has a wrong offset!");
static_assert(offsetof(FSoundLibraryPlaySoundResult, bSuccess) == 0x000005, "Member 'FSoundLibraryPlaySoundResult::bSuccess' has a wrong offset!");
static_assert(offsetof(FSoundLibraryPlaySoundResult, AudioComponents) == 0x000018, "Member 'FSoundLibraryPlaySoundResult::AudioComponents' has a wrong offset!");

// ScriptStruct SoundLibrary.SoundLibrarySet
// 0x0050 (0x0050 - 0x0000)
struct FSoundLibrarySet final
{
public:
	TSet<class USoundLibrary*>                    LibrarySet;                                        // 0x0000(0x0050)(Edit, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSoundLibrarySet) == 0x000008, "Wrong alignment on FSoundLibrarySet");
static_assert(sizeof(FSoundLibrarySet) == 0x000050, "Wrong size on FSoundLibrarySet");
static_assert(offsetof(FSoundLibrarySet, LibrarySet) == 0x000000, "Member 'FSoundLibrarySet::LibrarySet' has a wrong offset!");

// ScriptStruct SoundLibrary.SimpleSoundLibraryContextSettings
// 0x0058 (0x0058 - 0x0000)
struct FSimpleSoundLibraryContextSettings final
{
public:
	struct FGameplayTag                           EventName;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttachedSound;                                    // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAttachedDestroyed;                        // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceComponentCreation;                           // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundConcurrency*                      ConcurrencySettings;                               // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachName;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        AttachToComponent;                                 // 0x0030(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachLocation                               LocationType;                                      // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSimpleSoundLibraryContextSettings) == 0x000008, "Wrong alignment on FSimpleSoundLibraryContextSettings");
static_assert(sizeof(FSimpleSoundLibraryContextSettings) == 0x000058, "Wrong size on FSimpleSoundLibraryContextSettings");
static_assert(offsetof(FSimpleSoundLibraryContextSettings, EventName) == 0x000000, "Member 'FSimpleSoundLibraryContextSettings::EventName' has a wrong offset!");
static_assert(offsetof(FSimpleSoundLibraryContextSettings, bAttachedSound) == 0x000004, "Member 'FSimpleSoundLibraryContextSettings::bAttachedSound' has a wrong offset!");
static_assert(offsetof(FSimpleSoundLibraryContextSettings, bStopWhenAttachedDestroyed) == 0x000005, "Member 'FSimpleSoundLibraryContextSettings::bStopWhenAttachedDestroyed' has a wrong offset!");
static_assert(offsetof(FSimpleSoundLibraryContextSettings, bAutoDestroy) == 0x000006, "Member 'FSimpleSoundLibraryContextSettings::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(FSimpleSoundLibraryContextSettings, bForceComponentCreation) == 0x000007, "Member 'FSimpleSoundLibraryContextSettings::bForceComponentCreation' has a wrong offset!");
static_assert(offsetof(FSimpleSoundLibraryContextSettings, VolumeMultiplier) == 0x000008, "Member 'FSimpleSoundLibraryContextSettings::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(FSimpleSoundLibraryContextSettings, PitchMultiplier) == 0x00000C, "Member 'FSimpleSoundLibraryContextSettings::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(FSimpleSoundLibraryContextSettings, StartTime) == 0x000010, "Member 'FSimpleSoundLibraryContextSettings::StartTime' has a wrong offset!");
static_assert(offsetof(FSimpleSoundLibraryContextSettings, ConcurrencySettings) == 0x000018, "Member 'FSimpleSoundLibraryContextSettings::ConcurrencySettings' has a wrong offset!");
static_assert(offsetof(FSimpleSoundLibraryContextSettings, AttenuationSettings) == 0x000020, "Member 'FSimpleSoundLibraryContextSettings::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(FSimpleSoundLibraryContextSettings, AttachName) == 0x000028, "Member 'FSimpleSoundLibraryContextSettings::AttachName' has a wrong offset!");
static_assert(offsetof(FSimpleSoundLibraryContextSettings, AttachToComponent) == 0x000030, "Member 'FSimpleSoundLibraryContextSettings::AttachToComponent' has a wrong offset!");
static_assert(offsetof(FSimpleSoundLibraryContextSettings, LocationType) == 0x000038, "Member 'FSimpleSoundLibraryContextSettings::LocationType' has a wrong offset!");
static_assert(offsetof(FSimpleSoundLibraryContextSettings, Location) == 0x000040, "Member 'FSimpleSoundLibraryContextSettings::Location' has a wrong offset!");

// ScriptStruct SoundLibrary.SoundLibraryActorData
// 0x0048 (0x0048 - 0x0000)
struct FSoundLibraryActorData final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USoundLibraryContext*>           SoundLibraryContexts;                              // 0x0030(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSoundLibraryActorData) == 0x000008, "Wrong alignment on FSoundLibraryActorData");
static_assert(sizeof(FSoundLibraryActorData) == 0x000048, "Wrong size on FSoundLibraryActorData");
static_assert(offsetof(FSoundLibraryActorData, SoundLibraryContexts) == 0x000030, "Member 'FSoundLibraryActorData::SoundLibraryContexts' has a wrong offset!");

}

