#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_QuartzMusicController

#include "Basic.hpp"


namespace SDK::Params
{

// Function BP_QuartzMusicController.BP_QuartzMusicController_C.PlayTrack
// 0x0010 (0x0010 - 0x0000)
struct BP_QuartzMusicController_C_PlayTrack final
{
public:
	class UQuartzMusicTrackComponent_C*           Track_Component;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuartzMusicController_C_PlayTrack) == 0x000008, "Wrong alignment on BP_QuartzMusicController_C_PlayTrack");
static_assert(sizeof(BP_QuartzMusicController_C_PlayTrack) == 0x000010, "Wrong size on BP_QuartzMusicController_C_PlayTrack");
static_assert(offsetof(BP_QuartzMusicController_C_PlayTrack, Track_Component) == 0x000000, "Member 'BP_QuartzMusicController_C_PlayTrack::Track_Component' has a wrong offset!");
static_assert(offsetof(BP_QuartzMusicController_C_PlayTrack, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000008, "Member 'BP_QuartzMusicController_C_PlayTrack::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function BP_QuartzMusicController.BP_QuartzMusicController_C.RequestTrackPlayback
// 0x0020 (0x0020 - 0x0000)
struct BP_QuartzMusicController_C_RequestTrackPlayback final
{
public:
	class UQuartzMusicTrackComponent_C*           Requesting_Track;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetTrackPriority_Priority;                // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetTrackPriority_Priority_1;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuartzMusicController_C_RequestTrackPlayback) == 0x000008, "Wrong alignment on BP_QuartzMusicController_C_RequestTrackPlayback");
static_assert(sizeof(BP_QuartzMusicController_C_RequestTrackPlayback) == 0x000020, "Wrong size on BP_QuartzMusicController_C_RequestTrackPlayback");
static_assert(offsetof(BP_QuartzMusicController_C_RequestTrackPlayback, Requesting_Track) == 0x000000, "Member 'BP_QuartzMusicController_C_RequestTrackPlayback::Requesting_Track' has a wrong offset!");
static_assert(offsetof(BP_QuartzMusicController_C_RequestTrackPlayback, Result) == 0x000008, "Member 'BP_QuartzMusicController_C_RequestTrackPlayback::Result' has a wrong offset!");
static_assert(offsetof(BP_QuartzMusicController_C_RequestTrackPlayback, CallFunc_GetTrackPriority_Priority) == 0x00000C, "Member 'BP_QuartzMusicController_C_RequestTrackPlayback::CallFunc_GetTrackPriority_Priority' has a wrong offset!");
static_assert(offsetof(BP_QuartzMusicController_C_RequestTrackPlayback, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_QuartzMusicController_C_RequestTrackPlayback::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QuartzMusicController_C_RequestTrackPlayback, CallFunc_GetTrackPriority_Priority_1) == 0x000014, "Member 'BP_QuartzMusicController_C_RequestTrackPlayback::CallFunc_GetTrackPriority_Priority_1' has a wrong offset!");
static_assert(offsetof(BP_QuartzMusicController_C_RequestTrackPlayback, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000018, "Member 'BP_QuartzMusicController_C_RequestTrackPlayback::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_QuartzMusicController.BP_QuartzMusicController_C.StopCurrentTrack
// 0x0001 (0x0001 - 0x0000)
struct BP_QuartzMusicController_C_StopCurrentTrack final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuartzMusicController_C_StopCurrentTrack) == 0x000001, "Wrong alignment on BP_QuartzMusicController_C_StopCurrentTrack");
static_assert(sizeof(BP_QuartzMusicController_C_StopCurrentTrack) == 0x000001, "Wrong size on BP_QuartzMusicController_C_StopCurrentTrack");
static_assert(offsetof(BP_QuartzMusicController_C_StopCurrentTrack, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_QuartzMusicController_C_StopCurrentTrack::CallFunc_IsValid_ReturnValue' has a wrong offset!");

}

