#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MoleUI

#include "Basic.hpp"

#include "MoleUI_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "MoleGameRuntime_structs.hpp"
#include "GameplayTags_0_structs.hpp"


namespace SDK::Params
{

// Function MoleUI.MoleEnemyAbilityItem.GetIndex
// 0x0004 (0x0004 - 0x0000)
struct MoleEnemyAbilityItem_GetIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleEnemyAbilityItem_GetIndex) == 0x000004, "Wrong alignment on MoleEnemyAbilityItem_GetIndex");
static_assert(sizeof(MoleEnemyAbilityItem_GetIndex) == 0x000004, "Wrong size on MoleEnemyAbilityItem_GetIndex");
static_assert(offsetof(MoleEnemyAbilityItem_GetIndex, ReturnValue) == 0x000000, "Member 'MoleEnemyAbilityItem_GetIndex::ReturnValue' has a wrong offset!");

// Function MoleUI.MoleAssignedTaskContainerWidget.OnActiveTasksChanged
// 0x0001 (0x0001 - 0x0000)
struct MoleAssignedTaskContainerWidget_OnActiveTasksChanged final
{
public:
	bool                                          bFrameDefer;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleAssignedTaskContainerWidget_OnActiveTasksChanged) == 0x000001, "Wrong alignment on MoleAssignedTaskContainerWidget_OnActiveTasksChanged");
static_assert(sizeof(MoleAssignedTaskContainerWidget_OnActiveTasksChanged) == 0x000001, "Wrong size on MoleAssignedTaskContainerWidget_OnActiveTasksChanged");
static_assert(offsetof(MoleAssignedTaskContainerWidget_OnActiveTasksChanged, bFrameDefer) == 0x000000, "Member 'MoleAssignedTaskContainerWidget_OnActiveTasksChanged::bFrameDefer' has a wrong offset!");

// Function MoleUI.MoleControllerBinding.OnBindingInfoSet
// 0x0020 (0x0020 - 0x0000)
struct MoleControllerBinding_OnBindingInfoSet final
{
public:
	class FText                                   BindingLabel;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsSaboteurBinding;                                // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoleControllerBinding_OnBindingInfoSet) == 0x000008, "Wrong alignment on MoleControllerBinding_OnBindingInfoSet");
static_assert(sizeof(MoleControllerBinding_OnBindingInfoSet) == 0x000020, "Wrong size on MoleControllerBinding_OnBindingInfoSet");
static_assert(offsetof(MoleControllerBinding_OnBindingInfoSet, BindingLabel) == 0x000000, "Member 'MoleControllerBinding_OnBindingInfoSet::BindingLabel' has a wrong offset!");
static_assert(offsetof(MoleControllerBinding_OnBindingInfoSet, bIsSaboteurBinding) == 0x000018, "Member 'MoleControllerBinding_OnBindingInfoSet::bIsSaboteurBinding' has a wrong offset!");

// Function MoleUI.MoleEnemyAbilityContainer.OnVisibilityChangeRequested
// 0x0001 (0x0001 - 0x0000)
struct MoleEnemyAbilityContainer_OnVisibilityChangeRequested final
{
public:
	bool                                          bNewVisibility;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleEnemyAbilityContainer_OnVisibilityChangeRequested) == 0x000001, "Wrong alignment on MoleEnemyAbilityContainer_OnVisibilityChangeRequested");
static_assert(sizeof(MoleEnemyAbilityContainer_OnVisibilityChangeRequested) == 0x000001, "Wrong size on MoleEnemyAbilityContainer_OnVisibilityChangeRequested");
static_assert(offsetof(MoleEnemyAbilityContainer_OnVisibilityChangeRequested, bNewVisibility) == 0x000000, "Member 'MoleEnemyAbilityContainer_OnVisibilityChangeRequested::bNewVisibility' has a wrong offset!");

// Function MoleUI.MoleEnemyAbilityEntry.OnAbilityDataReceived
// 0x0008 (0x0008 - 0x0000)
struct MoleEnemyAbilityEntry_OnAbilityDataReceived final
{
public:
	class UMoleEnemyAbilityItem*                  Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleEnemyAbilityEntry_OnAbilityDataReceived) == 0x000008, "Wrong alignment on MoleEnemyAbilityEntry_OnAbilityDataReceived");
static_assert(sizeof(MoleEnemyAbilityEntry_OnAbilityDataReceived) == 0x000008, "Wrong size on MoleEnemyAbilityEntry_OnAbilityDataReceived");
static_assert(offsetof(MoleEnemyAbilityEntry_OnAbilityDataReceived, Data) == 0x000000, "Member 'MoleEnemyAbilityEntry_OnAbilityDataReceived::Data' has a wrong offset!");

// Function MoleUI.MoleEnemyAbilityOverlay.OnAbilityDataReceived
// 0x0058 (0x0058 - 0x0000)
struct MoleEnemyAbilityOverlay_OnAbilityDataReceived final
{
public:
	struct FMoleAbilityUIData                     InAbilityUIData;                                   // 0x0000(0x0058)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleEnemyAbilityOverlay_OnAbilityDataReceived) == 0x000008, "Wrong alignment on MoleEnemyAbilityOverlay_OnAbilityDataReceived");
static_assert(sizeof(MoleEnemyAbilityOverlay_OnAbilityDataReceived) == 0x000058, "Wrong size on MoleEnemyAbilityOverlay_OnAbilityDataReceived");
static_assert(offsetof(MoleEnemyAbilityOverlay_OnAbilityDataReceived, InAbilityUIData) == 0x000000, "Member 'MoleEnemyAbilityOverlay_OnAbilityDataReceived::InAbilityUIData' has a wrong offset!");

// Function MoleUI.MoleEnemyAbilityOverlay.OnCooldownStarted
// 0x0004 (0x0004 - 0x0000)
struct MoleEnemyAbilityOverlay_OnCooldownStarted final
{
public:
	int32                                         TimeLeft;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleEnemyAbilityOverlay_OnCooldownStarted) == 0x000004, "Wrong alignment on MoleEnemyAbilityOverlay_OnCooldownStarted");
static_assert(sizeof(MoleEnemyAbilityOverlay_OnCooldownStarted) == 0x000004, "Wrong size on MoleEnemyAbilityOverlay_OnCooldownStarted");
static_assert(offsetof(MoleEnemyAbilityOverlay_OnCooldownStarted, TimeLeft) == 0x000000, "Member 'MoleEnemyAbilityOverlay_OnCooldownStarted::TimeLeft' has a wrong offset!");

// Function MoleUI.MoleEnemyAbilityOverlay.OnCooldownUpdated
// 0x0004 (0x0004 - 0x0000)
struct MoleEnemyAbilityOverlay_OnCooldownUpdated final
{
public:
	int32                                         TimeLeft;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleEnemyAbilityOverlay_OnCooldownUpdated) == 0x000004, "Wrong alignment on MoleEnemyAbilityOverlay_OnCooldownUpdated");
static_assert(sizeof(MoleEnemyAbilityOverlay_OnCooldownUpdated) == 0x000004, "Wrong size on MoleEnemyAbilityOverlay_OnCooldownUpdated");
static_assert(offsetof(MoleEnemyAbilityOverlay_OnCooldownUpdated, TimeLeft) == 0x000000, "Member 'MoleEnemyAbilityOverlay_OnCooldownUpdated::TimeLeft' has a wrong offset!");

// Function MoleUI.MoleEnemyAbilityWidgetComponent.AreSabotageShortcutsEnabled
// 0x0001 (0x0001 - 0x0000)
struct MoleEnemyAbilityWidgetComponent_AreSabotageShortcutsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleEnemyAbilityWidgetComponent_AreSabotageShortcutsEnabled) == 0x000001, "Wrong alignment on MoleEnemyAbilityWidgetComponent_AreSabotageShortcutsEnabled");
static_assert(sizeof(MoleEnemyAbilityWidgetComponent_AreSabotageShortcutsEnabled) == 0x000001, "Wrong size on MoleEnemyAbilityWidgetComponent_AreSabotageShortcutsEnabled");
static_assert(offsetof(MoleEnemyAbilityWidgetComponent_AreSabotageShortcutsEnabled, ReturnValue) == 0x000000, "Member 'MoleEnemyAbilityWidgetComponent_AreSabotageShortcutsEnabled::ReturnValue' has a wrong offset!");

// Function MoleUI.MoleLocationWidget.OnVisited
// 0x0020 (0x0020 - 0x0000)
struct MoleLocationWidget_OnVisited final
{
public:
	class FText                                   LocalizedLocationName;                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsNamedLocation;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoleLocationWidget_OnVisited) == 0x000008, "Wrong alignment on MoleLocationWidget_OnVisited");
static_assert(sizeof(MoleLocationWidget_OnVisited) == 0x000020, "Wrong size on MoleLocationWidget_OnVisited");
static_assert(offsetof(MoleLocationWidget_OnVisited, LocalizedLocationName) == 0x000000, "Member 'MoleLocationWidget_OnVisited::LocalizedLocationName' has a wrong offset!");
static_assert(offsetof(MoleLocationWidget_OnVisited, bIsNamedLocation) == 0x000018, "Member 'MoleLocationWidget_OnVisited::bIsNamedLocation' has a wrong offset!");

// Function MoleUI.MoleNameplate.SetupNameplateFor
// 0x0008 (0x0008 - 0x0000)
struct MoleNameplate_SetupNameplateFor final
{
public:
	class APlayerState*                           OwningPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleNameplate_SetupNameplateFor) == 0x000008, "Wrong alignment on MoleNameplate_SetupNameplateFor");
static_assert(sizeof(MoleNameplate_SetupNameplateFor) == 0x000008, "Wrong size on MoleNameplate_SetupNameplateFor");
static_assert(offsetof(MoleNameplate_SetupNameplateFor, OwningPlayer) == 0x000000, "Member 'MoleNameplate_SetupNameplateFor::OwningPlayer' has a wrong offset!");

// Function MoleUI.MolePostGameScreen.OnXPCalculated
// 0x0004 (0x0004 - 0x0000)
struct MolePostGameScreen_OnXPCalculated final
{
public:
	int32                                         XPValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MolePostGameScreen_OnXPCalculated) == 0x000004, "Wrong alignment on MolePostGameScreen_OnXPCalculated");
static_assert(sizeof(MolePostGameScreen_OnXPCalculated) == 0x000004, "Wrong size on MolePostGameScreen_OnXPCalculated");
static_assert(offsetof(MolePostGameScreen_OnXPCalculated, XPValue) == 0x000000, "Member 'MolePostGameScreen_OnXPCalculated::XPValue' has a wrong offset!");

// Function MoleUI.MoleQuickChatMapEntry.OnMapDataRetrieved
// 0x0038 (0x0038 - 0x0000)
struct MoleQuickChatMapEntry_OnMapDataRetrieved final
{
public:
	struct FMoleLocationData                      LocationData;                                      // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleQuickChatMapEntry_OnMapDataRetrieved) == 0x000008, "Wrong alignment on MoleQuickChatMapEntry_OnMapDataRetrieved");
static_assert(sizeof(MoleQuickChatMapEntry_OnMapDataRetrieved) == 0x000038, "Wrong size on MoleQuickChatMapEntry_OnMapDataRetrieved");
static_assert(offsetof(MoleQuickChatMapEntry_OnMapDataRetrieved, LocationData) == 0x000000, "Member 'MoleQuickChatMapEntry_OnMapDataRetrieved::LocationData' has a wrong offset!");

// Function MoleUI.MoleQuickChatActionSlot.OnIsAvailableChanged
// 0x0001 (0x0001 - 0x0000)
struct MoleQuickChatActionSlot_OnIsAvailableChanged final
{
public:
	bool                                          bIsAvailable;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleQuickChatActionSlot_OnIsAvailableChanged) == 0x000001, "Wrong alignment on MoleQuickChatActionSlot_OnIsAvailableChanged");
static_assert(sizeof(MoleQuickChatActionSlot_OnIsAvailableChanged) == 0x000001, "Wrong size on MoleQuickChatActionSlot_OnIsAvailableChanged");
static_assert(offsetof(MoleQuickChatActionSlot_OnIsAvailableChanged, bIsAvailable) == 0x000000, "Member 'MoleQuickChatActionSlot_OnIsAvailableChanged::bIsAvailable' has a wrong offset!");

// Function MoleUI.MoleQuickChatWidget.OnPreviewChanged
// 0x0018 (0x0018 - 0x0000)
struct MoleQuickChatWidget_OnPreviewChanged final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleQuickChatWidget_OnPreviewChanged) == 0x000008, "Wrong alignment on MoleQuickChatWidget_OnPreviewChanged");
static_assert(sizeof(MoleQuickChatWidget_OnPreviewChanged) == 0x000018, "Wrong size on MoleQuickChatWidget_OnPreviewChanged");
static_assert(offsetof(MoleQuickChatWidget_OnPreviewChanged, Message) == 0x000000, "Member 'MoleQuickChatWidget_OnPreviewChanged::Message' has a wrong offset!");

// Function MoleUI.MoleQuickChatWidget.AreAcceptAndBackInverted
// 0x0001 (0x0001 - 0x0000)
struct MoleQuickChatWidget_AreAcceptAndBackInverted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleQuickChatWidget_AreAcceptAndBackInverted) == 0x000001, "Wrong alignment on MoleQuickChatWidget_AreAcceptAndBackInverted");
static_assert(sizeof(MoleQuickChatWidget_AreAcceptAndBackInverted) == 0x000001, "Wrong size on MoleQuickChatWidget_AreAcceptAndBackInverted");
static_assert(offsetof(MoleQuickChatWidget_AreAcceptAndBackInverted, ReturnValue) == 0x000000, "Member 'MoleQuickChatWidget_AreAcceptAndBackInverted::ReturnValue' has a wrong offset!");

// Function MoleUI.MoleRoleColor.OnSetColor
// 0x0010 (0x0010 - 0x0000)
struct MoleRoleColor_OnSetColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleRoleColor_OnSetColor) == 0x000004, "Wrong alignment on MoleRoleColor_OnSetColor");
static_assert(sizeof(MoleRoleColor_OnSetColor) == 0x000010, "Wrong size on MoleRoleColor_OnSetColor");
static_assert(offsetof(MoleRoleColor_OnSetColor, Color) == 0x000000, "Member 'MoleRoleColor_OnSetColor::Color' has a wrong offset!");

// Function MoleUI.MoleRoleColor.SetColor
// 0x0010 (0x0010 - 0x0000)
struct MoleRoleColor_SetColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleRoleColor_SetColor) == 0x000004, "Wrong alignment on MoleRoleColor_SetColor");
static_assert(sizeof(MoleRoleColor_SetColor) == 0x000010, "Wrong size on MoleRoleColor_SetColor");
static_assert(offsetof(MoleRoleColor_SetColor, Color) == 0x000000, "Member 'MoleRoleColor_SetColor::Color' has a wrong offset!");

// Function MoleUI.MoleSlottedRadialMenu.OnCategorySelected
// 0x0050 (0x0050 - 0x0000)
struct MoleSlottedRadialMenu_OnCategorySelected final
{
public:
	const class UFortRadialSlot*                  SelectedSlot;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMoleQuickChatActionData>       Actions;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           CategoryColor;                                     // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              CategoryImage;                                     // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleSlottedRadialMenu_OnCategorySelected) == 0x000008, "Wrong alignment on MoleSlottedRadialMenu_OnCategorySelected");
static_assert(sizeof(MoleSlottedRadialMenu_OnCategorySelected) == 0x000050, "Wrong size on MoleSlottedRadialMenu_OnCategorySelected");
static_assert(offsetof(MoleSlottedRadialMenu_OnCategorySelected, SelectedSlot) == 0x000000, "Member 'MoleSlottedRadialMenu_OnCategorySelected::SelectedSlot' has a wrong offset!");
static_assert(offsetof(MoleSlottedRadialMenu_OnCategorySelected, Actions) == 0x000008, "Member 'MoleSlottedRadialMenu_OnCategorySelected::Actions' has a wrong offset!");
static_assert(offsetof(MoleSlottedRadialMenu_OnCategorySelected, CategoryColor) == 0x000018, "Member 'MoleSlottedRadialMenu_OnCategorySelected::CategoryColor' has a wrong offset!");
static_assert(offsetof(MoleSlottedRadialMenu_OnCategorySelected, CategoryImage) == 0x000028, "Member 'MoleSlottedRadialMenu_OnCategorySelected::CategoryImage' has a wrong offset!");

// Function MoleUI.MoleSlottedRadialMenu.OnRadialEntriesChanged
// 0x000C (0x000C - 0x0000)
struct MoleSlottedRadialMenu_OnRadialEntriesChanged final
{
public:
	bool                                          bIsActions;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumEntries;                                        // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Degrees;                                           // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleSlottedRadialMenu_OnRadialEntriesChanged) == 0x000004, "Wrong alignment on MoleSlottedRadialMenu_OnRadialEntriesChanged");
static_assert(sizeof(MoleSlottedRadialMenu_OnRadialEntriesChanged) == 0x00000C, "Wrong size on MoleSlottedRadialMenu_OnRadialEntriesChanged");
static_assert(offsetof(MoleSlottedRadialMenu_OnRadialEntriesChanged, bIsActions) == 0x000000, "Member 'MoleSlottedRadialMenu_OnRadialEntriesChanged::bIsActions' has a wrong offset!");
static_assert(offsetof(MoleSlottedRadialMenu_OnRadialEntriesChanged, NumEntries) == 0x000004, "Member 'MoleSlottedRadialMenu_OnRadialEntriesChanged::NumEntries' has a wrong offset!");
static_assert(offsetof(MoleSlottedRadialMenu_OnRadialEntriesChanged, Degrees) == 0x000008, "Member 'MoleSlottedRadialMenu_OnRadialEntriesChanged::Degrees' has a wrong offset!");

// Function MoleUI.MoleSlottedRadialMenu.OnRadialEntrySelected
// 0x0010 (0x0010 - 0x0000)
struct MoleSlottedRadialMenu_OnRadialEntrySelected final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            SelectedEntry;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleSlottedRadialMenu_OnRadialEntrySelected) == 0x000008, "Wrong alignment on MoleSlottedRadialMenu_OnRadialEntrySelected");
static_assert(sizeof(MoleSlottedRadialMenu_OnRadialEntrySelected) == 0x000010, "Wrong size on MoleSlottedRadialMenu_OnRadialEntrySelected");
static_assert(offsetof(MoleSlottedRadialMenu_OnRadialEntrySelected, Index_0) == 0x000000, "Member 'MoleSlottedRadialMenu_OnRadialEntrySelected::Index_0' has a wrong offset!");
static_assert(offsetof(MoleSlottedRadialMenu_OnRadialEntrySelected, SelectedEntry) == 0x000008, "Member 'MoleSlottedRadialMenu_OnRadialEntrySelected::SelectedEntry' has a wrong offset!");

// Function MoleUI.MoleSubobjectiveIndicatorWidget.OnScreenClampChanged
// 0x0001 (0x0001 - 0x0000)
struct MoleSubobjectiveIndicatorWidget_OnScreenClampChanged final
{
public:
	bool                                          bScreenClamped;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleSubobjectiveIndicatorWidget_OnScreenClampChanged) == 0x000001, "Wrong alignment on MoleSubobjectiveIndicatorWidget_OnScreenClampChanged");
static_assert(sizeof(MoleSubobjectiveIndicatorWidget_OnScreenClampChanged) == 0x000001, "Wrong size on MoleSubobjectiveIndicatorWidget_OnScreenClampChanged");
static_assert(offsetof(MoleSubobjectiveIndicatorWidget_OnScreenClampChanged, bScreenClamped) == 0x000000, "Member 'MoleSubobjectiveIndicatorWidget_OnScreenClampChanged::bScreenClamped' has a wrong offset!");

// Function MoleUI.MoleSubobjectiveIndicatorWidget.OnSetUsageMode
// 0x0001 (0x0001 - 0x0000)
struct MoleSubobjectiveIndicatorWidget_OnSetUsageMode final
{
public:
	bool                                          bUseGoalIndicatorMode;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleSubobjectiveIndicatorWidget_OnSetUsageMode) == 0x000001, "Wrong alignment on MoleSubobjectiveIndicatorWidget_OnSetUsageMode");
static_assert(sizeof(MoleSubobjectiveIndicatorWidget_OnSetUsageMode) == 0x000001, "Wrong size on MoleSubobjectiveIndicatorWidget_OnSetUsageMode");
static_assert(offsetof(MoleSubobjectiveIndicatorWidget_OnSetUsageMode, bUseGoalIndicatorMode) == 0x000000, "Member 'MoleSubobjectiveIndicatorWidget_OnSetUsageMode::bUseGoalIndicatorMode' has a wrong offset!");

// Function MoleUI.MoleTaskHUDWidget.OnRepresentedTaskChanged
// 0x0010 (0x0010 - 0x0000)
struct MoleTaskHUDWidget_OnRepresentedTaskChanged final
{
public:
	const class UMoleTaskDataAsset*               PreviousTaskAsset;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMoleActiveTaskStateHandle             PreviousHandle;                                    // 0x0008(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoleTaskHUDWidget_OnRepresentedTaskChanged) == 0x000008, "Wrong alignment on MoleTaskHUDWidget_OnRepresentedTaskChanged");
static_assert(sizeof(MoleTaskHUDWidget_OnRepresentedTaskChanged) == 0x000010, "Wrong size on MoleTaskHUDWidget_OnRepresentedTaskChanged");
static_assert(offsetof(MoleTaskHUDWidget_OnRepresentedTaskChanged, PreviousTaskAsset) == 0x000000, "Member 'MoleTaskHUDWidget_OnRepresentedTaskChanged::PreviousTaskAsset' has a wrong offset!");
static_assert(offsetof(MoleTaskHUDWidget_OnRepresentedTaskChanged, PreviousHandle) == 0x000008, "Member 'MoleTaskHUDWidget_OnRepresentedTaskChanged::PreviousHandle' has a wrong offset!");

// Function MoleUI.MoleTaskHUDWidget.SetAttemptShowActiveObjectives
// 0x0001 (0x0001 - 0x0000)
struct MoleTaskHUDWidget_SetAttemptShowActiveObjectives final
{
public:
	bool                                          bAttemptShow;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskHUDWidget_SetAttemptShowActiveObjectives) == 0x000001, "Wrong alignment on MoleTaskHUDWidget_SetAttemptShowActiveObjectives");
static_assert(sizeof(MoleTaskHUDWidget_SetAttemptShowActiveObjectives) == 0x000001, "Wrong size on MoleTaskHUDWidget_SetAttemptShowActiveObjectives");
static_assert(offsetof(MoleTaskHUDWidget_SetAttemptShowActiveObjectives, bAttemptShow) == 0x000000, "Member 'MoleTaskHUDWidget_SetAttemptShowActiveObjectives::bAttemptShow' has a wrong offset!");

// Function MoleUI.MoleTaskHUDWidget.SetTaskAsset
// 0x0008 (0x0008 - 0x0000)
struct MoleTaskHUDWidget_SetTaskAsset final
{
public:
	class UMoleTaskDataAsset*                     TaskAsset;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskHUDWidget_SetTaskAsset) == 0x000008, "Wrong alignment on MoleTaskHUDWidget_SetTaskAsset");
static_assert(sizeof(MoleTaskHUDWidget_SetTaskAsset) == 0x000008, "Wrong size on MoleTaskHUDWidget_SetTaskAsset");
static_assert(offsetof(MoleTaskHUDWidget_SetTaskAsset, TaskAsset) == 0x000000, "Member 'MoleTaskHUDWidget_SetTaskAsset::TaskAsset' has a wrong offset!");

// Function MoleUI.MoleTaskHUDWidget.SetTaskHandle
// 0x0004 (0x0004 - 0x0000)
struct MoleTaskHUDWidget_SetTaskHandle final
{
public:
	struct FMoleActiveTaskStateHandle             TaskHandle;                                        // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskHUDWidget_SetTaskHandle) == 0x000004, "Wrong alignment on MoleTaskHUDWidget_SetTaskHandle");
static_assert(sizeof(MoleTaskHUDWidget_SetTaskHandle) == 0x000004, "Wrong size on MoleTaskHUDWidget_SetTaskHandle");
static_assert(offsetof(MoleTaskHUDWidget_SetTaskHandle, TaskHandle) == 0x000000, "Member 'MoleTaskHUDWidget_SetTaskHandle::TaskHandle' has a wrong offset!");

// Function MoleUI.MoleTaskHUDWidget.GetTaskAsset
// 0x0008 (0x0008 - 0x0000)
struct MoleTaskHUDWidget_GetTaskAsset final
{
public:
	const class UMoleTaskDataAsset*               ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskHUDWidget_GetTaskAsset) == 0x000008, "Wrong alignment on MoleTaskHUDWidget_GetTaskAsset");
static_assert(sizeof(MoleTaskHUDWidget_GetTaskAsset) == 0x000008, "Wrong size on MoleTaskHUDWidget_GetTaskAsset");
static_assert(offsetof(MoleTaskHUDWidget_GetTaskAsset, ReturnValue) == 0x000000, "Member 'MoleTaskHUDWidget_GetTaskAsset::ReturnValue' has a wrong offset!");

// Function MoleUI.MoleTaskHUDWidget.GetTaskTitle
// 0x0018 (0x0018 - 0x0000)
struct MoleTaskHUDWidget_GetTaskTitle final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskHUDWidget_GetTaskTitle) == 0x000008, "Wrong alignment on MoleTaskHUDWidget_GetTaskTitle");
static_assert(sizeof(MoleTaskHUDWidget_GetTaskTitle) == 0x000018, "Wrong size on MoleTaskHUDWidget_GetTaskTitle");
static_assert(offsetof(MoleTaskHUDWidget_GetTaskTitle, ReturnValue) == 0x000000, "Member 'MoleTaskHUDWidget_GetTaskTitle::ReturnValue' has a wrong offset!");

// Function MoleUI.MoleTaskObjectiveHUDWidget.OnRepresentedObjectiveCurrentValueChanged
// 0x0004 (0x0004 - 0x0000)
struct MoleTaskObjectiveHUDWidget_OnRepresentedObjectiveCurrentValueChanged final
{
public:
	float                                         NewCurrentValue;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskObjectiveHUDWidget_OnRepresentedObjectiveCurrentValueChanged) == 0x000004, "Wrong alignment on MoleTaskObjectiveHUDWidget_OnRepresentedObjectiveCurrentValueChanged");
static_assert(sizeof(MoleTaskObjectiveHUDWidget_OnRepresentedObjectiveCurrentValueChanged) == 0x000004, "Wrong size on MoleTaskObjectiveHUDWidget_OnRepresentedObjectiveCurrentValueChanged");
static_assert(offsetof(MoleTaskObjectiveHUDWidget_OnRepresentedObjectiveCurrentValueChanged, NewCurrentValue) == 0x000000, "Member 'MoleTaskObjectiveHUDWidget_OnRepresentedObjectiveCurrentValueChanged::NewCurrentValue' has a wrong offset!");

// Function MoleUI.MoleTaskObjectiveHUDWidget.OnRepresentedObjectiveTargetValueChanged
// 0x0004 (0x0004 - 0x0000)
struct MoleTaskObjectiveHUDWidget_OnRepresentedObjectiveTargetValueChanged final
{
public:
	float                                         NewTargetValue;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskObjectiveHUDWidget_OnRepresentedObjectiveTargetValueChanged) == 0x000004, "Wrong alignment on MoleTaskObjectiveHUDWidget_OnRepresentedObjectiveTargetValueChanged");
static_assert(sizeof(MoleTaskObjectiveHUDWidget_OnRepresentedObjectiveTargetValueChanged) == 0x000004, "Wrong size on MoleTaskObjectiveHUDWidget_OnRepresentedObjectiveTargetValueChanged");
static_assert(offsetof(MoleTaskObjectiveHUDWidget_OnRepresentedObjectiveTargetValueChanged, NewTargetValue) == 0x000000, "Member 'MoleTaskObjectiveHUDWidget_OnRepresentedObjectiveTargetValueChanged::NewTargetValue' has a wrong offset!");

// Function MoleUI.MoleTaskObjectiveHUDWidget.GetTaskObjectiveInfo
// 0x0020 (0x0020 - 0x0000)
struct MoleTaskObjectiveHUDWidget_GetTaskObjectiveInfo final
{
public:
	struct FMoleTaskObjectiveUIInfo               ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTaskObjectiveHUDWidget_GetTaskObjectiveInfo) == 0x000008, "Wrong alignment on MoleTaskObjectiveHUDWidget_GetTaskObjectiveInfo");
static_assert(sizeof(MoleTaskObjectiveHUDWidget_GetTaskObjectiveInfo) == 0x000020, "Wrong size on MoleTaskObjectiveHUDWidget_GetTaskObjectiveInfo");
static_assert(offsetof(MoleTaskObjectiveHUDWidget_GetTaskObjectiveInfo, ReturnValue) == 0x000000, "Member 'MoleTaskObjectiveHUDWidget_GetTaskObjectiveInfo::ReturnValue' has a wrong offset!");

// Function MoleUI.MoleTimer.OnTimerStarted
// 0x0004 (0x0004 - 0x0000)
struct MoleTimer_OnTimerStarted final
{
public:
	int32                                         TimeLeft;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTimer_OnTimerStarted) == 0x000004, "Wrong alignment on MoleTimer_OnTimerStarted");
static_assert(sizeof(MoleTimer_OnTimerStarted) == 0x000004, "Wrong size on MoleTimer_OnTimerStarted");
static_assert(offsetof(MoleTimer_OnTimerStarted, TimeLeft) == 0x000000, "Member 'MoleTimer_OnTimerStarted::TimeLeft' has a wrong offset!");

// Function MoleUI.MoleTimer.OnTimerUpdated
// 0x0004 (0x0004 - 0x0000)
struct MoleTimer_OnTimerUpdated final
{
public:
	int32                                         TimeLeft;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTimer_OnTimerUpdated) == 0x000004, "Wrong alignment on MoleTimer_OnTimerUpdated");
static_assert(sizeof(MoleTimer_OnTimerUpdated) == 0x000004, "Wrong size on MoleTimer_OnTimerUpdated");
static_assert(offsetof(MoleTimer_OnTimerUpdated, TimeLeft) == 0x000000, "Member 'MoleTimer_OnTimerUpdated::TimeLeft' has a wrong offset!");

// Function MoleUI.MoleTimer.StartTimer
// 0x0004 (0x0004 - 0x0000)
struct MoleTimer_StartTimer final
{
public:
	float                                         InServerFinishTime;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleTimer_StartTimer) == 0x000004, "Wrong alignment on MoleTimer_StartTimer");
static_assert(sizeof(MoleTimer_StartTimer) == 0x000004, "Wrong size on MoleTimer_StartTimer");
static_assert(offsetof(MoleTimer_StartTimer, InServerFinishTime) == 0x000000, "Member 'MoleTimer_StartTimer::InServerFinishTime' has a wrong offset!");

// Function MoleUI.MoleUIDirector.GetMoleEnemyAbilityUIData
// 0x0070 (0x0070 - 0x0000)
struct MoleUIDirector_GetMoleEnemyAbilityUIData final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SabotageTag;                                       // 0x0008(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMoleAbilityUIData                     OutEnemyAbilityUIData;                             // 0x0010(0x0058)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoleUIDirector_GetMoleEnemyAbilityUIData) == 0x000008, "Wrong alignment on MoleUIDirector_GetMoleEnemyAbilityUIData");
static_assert(sizeof(MoleUIDirector_GetMoleEnemyAbilityUIData) == 0x000070, "Wrong size on MoleUIDirector_GetMoleEnemyAbilityUIData");
static_assert(offsetof(MoleUIDirector_GetMoleEnemyAbilityUIData, WorldContextObject) == 0x000000, "Member 'MoleUIDirector_GetMoleEnemyAbilityUIData::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MoleUIDirector_GetMoleEnemyAbilityUIData, SabotageTag) == 0x000008, "Member 'MoleUIDirector_GetMoleEnemyAbilityUIData::SabotageTag' has a wrong offset!");
static_assert(offsetof(MoleUIDirector_GetMoleEnemyAbilityUIData, OutEnemyAbilityUIData) == 0x000010, "Member 'MoleUIDirector_GetMoleEnemyAbilityUIData::OutEnemyAbilityUIData' has a wrong offset!");
static_assert(offsetof(MoleUIDirector_GetMoleEnemyAbilityUIData, ReturnValue) == 0x000068, "Member 'MoleUIDirector_GetMoleEnemyAbilityUIData::ReturnValue' has a wrong offset!");

// Function MoleUI.MoleUIDirector.GetMoleLocationData
// 0x0050 (0x0050 - 0x0000)
struct MoleUIDirector_GetMoleLocationData final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           LocationTag;                                       // 0x0008(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMoleLocationData                      OutLocationData;                                   // 0x0010(0x0038)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoleUIDirector_GetMoleLocationData) == 0x000008, "Wrong alignment on MoleUIDirector_GetMoleLocationData");
static_assert(sizeof(MoleUIDirector_GetMoleLocationData) == 0x000050, "Wrong size on MoleUIDirector_GetMoleLocationData");
static_assert(offsetof(MoleUIDirector_GetMoleLocationData, WorldContextObject) == 0x000000, "Member 'MoleUIDirector_GetMoleLocationData::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MoleUIDirector_GetMoleLocationData, LocationTag) == 0x000008, "Member 'MoleUIDirector_GetMoleLocationData::LocationTag' has a wrong offset!");
static_assert(offsetof(MoleUIDirector_GetMoleLocationData, OutLocationData) == 0x000010, "Member 'MoleUIDirector_GetMoleLocationData::OutLocationData' has a wrong offset!");
static_assert(offsetof(MoleUIDirector_GetMoleLocationData, ReturnValue) == 0x000048, "Member 'MoleUIDirector_GetMoleLocationData::ReturnValue' has a wrong offset!");

// Function MoleUI.MoleUIDirector.GetMolePlayerUIData
// 0x0028 (0x0028 - 0x0000)
struct MoleUIDirector_GetMolePlayerUIData final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutPlayerNUmber;                                   // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMolePlayerUIData                      OutPlayerUIData;                                   // 0x0010(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoleUIDirector_GetMolePlayerUIData) == 0x000008, "Wrong alignment on MoleUIDirector_GetMolePlayerUIData");
static_assert(sizeof(MoleUIDirector_GetMolePlayerUIData) == 0x000028, "Wrong size on MoleUIDirector_GetMolePlayerUIData");
static_assert(offsetof(MoleUIDirector_GetMolePlayerUIData, PlayerState) == 0x000000, "Member 'MoleUIDirector_GetMolePlayerUIData::PlayerState' has a wrong offset!");
static_assert(offsetof(MoleUIDirector_GetMolePlayerUIData, OutPlayerNUmber) == 0x000008, "Member 'MoleUIDirector_GetMolePlayerUIData::OutPlayerNUmber' has a wrong offset!");
static_assert(offsetof(MoleUIDirector_GetMolePlayerUIData, OutPlayerUIData) == 0x000010, "Member 'MoleUIDirector_GetMolePlayerUIData::OutPlayerUIData' has a wrong offset!");
static_assert(offsetof(MoleUIDirector_GetMolePlayerUIData, ReturnValue) == 0x000020, "Member 'MoleUIDirector_GetMolePlayerUIData::ReturnValue' has a wrong offset!");

// Function MoleUI.MoleVoteCastingInfoPanel.OnPanelVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct MoleVoteCastingInfoPanel_OnPanelVisibilityChanged final
{
public:
	bool                                          bShouldShowPanel;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleVoteCastingInfoPanel_OnPanelVisibilityChanged) == 0x000001, "Wrong alignment on MoleVoteCastingInfoPanel_OnPanelVisibilityChanged");
static_assert(sizeof(MoleVoteCastingInfoPanel_OnPanelVisibilityChanged) == 0x000001, "Wrong size on MoleVoteCastingInfoPanel_OnPanelVisibilityChanged");
static_assert(offsetof(MoleVoteCastingInfoPanel_OnPanelVisibilityChanged, bShouldShowPanel) == 0x000000, "Member 'MoleVoteCastingInfoPanel_OnPanelVisibilityChanged::bShouldShowPanel' has a wrong offset!");

// Function MoleUI.MoleVoteTally.OnVoteTallyStarted
// 0x0001 (0x0001 - 0x0000)
struct MoleVoteTally_OnVoteTallyStarted final
{
public:
	bool                                          bIsSkipTally;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleVoteTally_OnVoteTallyStarted) == 0x000001, "Wrong alignment on MoleVoteTally_OnVoteTallyStarted");
static_assert(sizeof(MoleVoteTally_OnVoteTallyStarted) == 0x000001, "Wrong size on MoleVoteTally_OnVoteTallyStarted");
static_assert(offsetof(MoleVoteTally_OnVoteTallyStarted, bIsSkipTally) == 0x000000, "Member 'MoleVoteTally_OnVoteTallyStarted::bIsSkipTally' has a wrong offset!");

// Function MoleUI.MoleVotingIndicator.OnIndicatorRevealed
// 0x0008 (0x0008 - 0x0000)
struct MoleVotingIndicator_OnIndicatorRevealed final
{
public:
	class APlayerState*                           AccuserPlayerState;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoleVotingIndicator_OnIndicatorRevealed) == 0x000008, "Wrong alignment on MoleVotingIndicator_OnIndicatorRevealed");
static_assert(sizeof(MoleVotingIndicator_OnIndicatorRevealed) == 0x000008, "Wrong size on MoleVotingIndicator_OnIndicatorRevealed");
static_assert(offsetof(MoleVotingIndicator_OnIndicatorRevealed, AccuserPlayerState) == 0x000000, "Member 'MoleVotingIndicator_OnIndicatorRevealed::AccuserPlayerState' has a wrong offset!");

}

