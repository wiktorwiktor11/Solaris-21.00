#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SwimmingAnimBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK::Params
{

// Function SwimmingAnimBP.SwimmingAnimBP_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct SwimmingAnimBP_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(SwimmingAnimBP_C_AnimGraph) == 0x000008, "Wrong alignment on SwimmingAnimBP_C_AnimGraph");
static_assert(sizeof(SwimmingAnimBP_C_AnimGraph) == 0x000010, "Wrong size on SwimmingAnimBP_C_AnimGraph");
static_assert(offsetof(SwimmingAnimBP_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'SwimmingAnimBP_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function SwimmingAnimBP.SwimmingAnimBP_C.ExecuteUbergraph_SwimmingAnimBP
// 0x0014 (0x0014 - 0x0000)
struct SwimmingAnimBP_C_ExecuteUbergraph_SwimmingAnimBP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRelevantAnimTime_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTime_ReturnValue_1;        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable; // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SwimmingAnimBP_C_ExecuteUbergraph_SwimmingAnimBP) == 0x000004, "Wrong alignment on SwimmingAnimBP_C_ExecuteUbergraph_SwimmingAnimBP");
static_assert(sizeof(SwimmingAnimBP_C_ExecuteUbergraph_SwimmingAnimBP) == 0x000014, "Wrong size on SwimmingAnimBP_C_ExecuteUbergraph_SwimmingAnimBP");
static_assert(offsetof(SwimmingAnimBP_C_ExecuteUbergraph_SwimmingAnimBP, EntryPoint) == 0x000000, "Member 'SwimmingAnimBP_C_ExecuteUbergraph_SwimmingAnimBP::EntryPoint' has a wrong offset!");
static_assert(offsetof(SwimmingAnimBP_C_ExecuteUbergraph_SwimmingAnimBP, CallFunc_GetRelevantAnimTime_ReturnValue) == 0x000004, "Member 'SwimmingAnimBP_C_ExecuteUbergraph_SwimmingAnimBP::CallFunc_GetRelevantAnimTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingAnimBP_C_ExecuteUbergraph_SwimmingAnimBP, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000008, "Member 'SwimmingAnimBP_C_ExecuteUbergraph_SwimmingAnimBP::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(SwimmingAnimBP_C_ExecuteUbergraph_SwimmingAnimBP, Temp_bool_Has_Been_Initd_Variable) == 0x000009, "Member 'SwimmingAnimBP_C_ExecuteUbergraph_SwimmingAnimBP::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(SwimmingAnimBP_C_ExecuteUbergraph_SwimmingAnimBP, CallFunc_GetRelevantAnimTime_ReturnValue_1) == 0x00000C, "Member 'SwimmingAnimBP_C_ExecuteUbergraph_SwimmingAnimBP::CallFunc_GetRelevantAnimTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(SwimmingAnimBP_C_ExecuteUbergraph_SwimmingAnimBP, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000010, "Member 'SwimmingAnimBP_C_ExecuteUbergraph_SwimmingAnimBP::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(SwimmingAnimBP_C_ExecuteUbergraph_SwimmingAnimBP, Temp_bool_IsClosed_Variable) == 0x000011, "Member 'SwimmingAnimBP_C_ExecuteUbergraph_SwimmingAnimBP::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(SwimmingAnimBP_C_ExecuteUbergraph_SwimmingAnimBP, Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable) == 0x000012, "Member 'SwimmingAnimBP_C_ExecuteUbergraph_SwimmingAnimBP::Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable' has a wrong offset!");

// Function SwimmingAnimBP.SwimmingAnimBP_C.SwimmingAdditiveLayer
// 0x0078 (0x0078 - 0x0000)
struct SwimmingAnimBP_C_SwimmingAdditiveLayer final
{
public:
	struct FPoseLink                              IdleAdditive_Cache;                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              MovementAdditiveLayerPose_Cache;                   // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              FullBody;                                          // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	float                                         PlayMeleeAttackAOLayer_0;                          // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DisableArmsHeadAdditiveCurveAlphaLayer_0;          // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DisableIKRootAdditiveCurveAlphaLayer_0;            // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LocomotionAdditiveAlphaLayer_0;                    // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MainInstanceAdditiveLayerAlpha_0;                  // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseLink                              UpperAndLowerBody_Cache;                           // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              SprintingPose_PostMask_Cache;                      // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              SwimmingAdditiveLayer_0;                           // 0x0068(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(SwimmingAnimBP_C_SwimmingAdditiveLayer) == 0x000008, "Wrong alignment on SwimmingAnimBP_C_SwimmingAdditiveLayer");
static_assert(sizeof(SwimmingAnimBP_C_SwimmingAdditiveLayer) == 0x000078, "Wrong size on SwimmingAnimBP_C_SwimmingAdditiveLayer");
static_assert(offsetof(SwimmingAnimBP_C_SwimmingAdditiveLayer, IdleAdditive_Cache) == 0x000000, "Member 'SwimmingAnimBP_C_SwimmingAdditiveLayer::IdleAdditive_Cache' has a wrong offset!");
static_assert(offsetof(SwimmingAnimBP_C_SwimmingAdditiveLayer, MovementAdditiveLayerPose_Cache) == 0x000010, "Member 'SwimmingAnimBP_C_SwimmingAdditiveLayer::MovementAdditiveLayerPose_Cache' has a wrong offset!");
static_assert(offsetof(SwimmingAnimBP_C_SwimmingAdditiveLayer, FullBody) == 0x000020, "Member 'SwimmingAnimBP_C_SwimmingAdditiveLayer::FullBody' has a wrong offset!");
static_assert(offsetof(SwimmingAnimBP_C_SwimmingAdditiveLayer, PlayMeleeAttackAOLayer_0) == 0x000030, "Member 'SwimmingAnimBP_C_SwimmingAdditiveLayer::PlayMeleeAttackAOLayer_0' has a wrong offset!");
static_assert(offsetof(SwimmingAnimBP_C_SwimmingAdditiveLayer, DisableArmsHeadAdditiveCurveAlphaLayer_0) == 0x000034, "Member 'SwimmingAnimBP_C_SwimmingAdditiveLayer::DisableArmsHeadAdditiveCurveAlphaLayer_0' has a wrong offset!");
static_assert(offsetof(SwimmingAnimBP_C_SwimmingAdditiveLayer, DisableIKRootAdditiveCurveAlphaLayer_0) == 0x000038, "Member 'SwimmingAnimBP_C_SwimmingAdditiveLayer::DisableIKRootAdditiveCurveAlphaLayer_0' has a wrong offset!");
static_assert(offsetof(SwimmingAnimBP_C_SwimmingAdditiveLayer, LocomotionAdditiveAlphaLayer_0) == 0x00003C, "Member 'SwimmingAnimBP_C_SwimmingAdditiveLayer::LocomotionAdditiveAlphaLayer_0' has a wrong offset!");
static_assert(offsetof(SwimmingAnimBP_C_SwimmingAdditiveLayer, MainInstanceAdditiveLayerAlpha_0) == 0x000040, "Member 'SwimmingAnimBP_C_SwimmingAdditiveLayer::MainInstanceAdditiveLayerAlpha_0' has a wrong offset!");
static_assert(offsetof(SwimmingAnimBP_C_SwimmingAdditiveLayer, UpperAndLowerBody_Cache) == 0x000048, "Member 'SwimmingAnimBP_C_SwimmingAdditiveLayer::UpperAndLowerBody_Cache' has a wrong offset!");
static_assert(offsetof(SwimmingAnimBP_C_SwimmingAdditiveLayer, SprintingPose_PostMask_Cache) == 0x000058, "Member 'SwimmingAnimBP_C_SwimmingAdditiveLayer::SprintingPose_PostMask_Cache' has a wrong offset!");
static_assert(offsetof(SwimmingAnimBP_C_SwimmingAdditiveLayer, SwimmingAdditiveLayer_0) == 0x000068, "Member 'SwimmingAnimBP_C_SwimmingAdditiveLayer::SwimmingAdditiveLayer_0' has a wrong offset!");

// Function SwimmingAnimBP.SwimmingAnimBP_C.SwimmingDiveJumpingLayer
// 0x0028 (0x0028 - 0x0000)
struct SwimmingAnimBP_C_SwimmingDiveJumpingLayer final
{
public:
	struct FPoseLink                              PassThroughSwimmingDiveJumping;                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	bool                                          IsHidingInPropLayer2_0;                            // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortPlayerAnimBodyType                       AnimBodyTypePassThrough_0;                         // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseLink                              SwimmingDiveJumpingLayer_0;                        // 0x0018(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(SwimmingAnimBP_C_SwimmingDiveJumpingLayer) == 0x000008, "Wrong alignment on SwimmingAnimBP_C_SwimmingDiveJumpingLayer");
static_assert(sizeof(SwimmingAnimBP_C_SwimmingDiveJumpingLayer) == 0x000028, "Wrong size on SwimmingAnimBP_C_SwimmingDiveJumpingLayer");
static_assert(offsetof(SwimmingAnimBP_C_SwimmingDiveJumpingLayer, PassThroughSwimmingDiveJumping) == 0x000000, "Member 'SwimmingAnimBP_C_SwimmingDiveJumpingLayer::PassThroughSwimmingDiveJumping' has a wrong offset!");
static_assert(offsetof(SwimmingAnimBP_C_SwimmingDiveJumpingLayer, IsHidingInPropLayer2_0) == 0x000010, "Member 'SwimmingAnimBP_C_SwimmingDiveJumpingLayer::IsHidingInPropLayer2_0' has a wrong offset!");
static_assert(offsetof(SwimmingAnimBP_C_SwimmingDiveJumpingLayer, AnimBodyTypePassThrough_0) == 0x000011, "Member 'SwimmingAnimBP_C_SwimmingDiveJumpingLayer::AnimBodyTypePassThrough_0' has a wrong offset!");
static_assert(offsetof(SwimmingAnimBP_C_SwimmingDiveJumpingLayer, SwimmingDiveJumpingLayer_0) == 0x000018, "Member 'SwimmingAnimBP_C_SwimmingDiveJumpingLayer::SwimmingDiveJumpingLayer_0' has a wrong offset!");

// Function SwimmingAnimBP.SwimmingAnimBP_C.SwimmingLowerBodyLayer
// 0x0040 (0x0040 - 0x0000)
struct SwimmingAnimBP_C_SwimmingLowerBodyLayer final
{
public:
	struct FPoseLink                              UpperBody_Cache;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              PreUpperBodySlot_Cache;                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              PassThroughSwimmingLowerBody;                      // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              SwimmingLowerBodyLayer_0;                          // 0x0030(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(SwimmingAnimBP_C_SwimmingLowerBodyLayer) == 0x000008, "Wrong alignment on SwimmingAnimBP_C_SwimmingLowerBodyLayer");
static_assert(sizeof(SwimmingAnimBP_C_SwimmingLowerBodyLayer) == 0x000040, "Wrong size on SwimmingAnimBP_C_SwimmingLowerBodyLayer");
static_assert(offsetof(SwimmingAnimBP_C_SwimmingLowerBodyLayer, UpperBody_Cache) == 0x000000, "Member 'SwimmingAnimBP_C_SwimmingLowerBodyLayer::UpperBody_Cache' has a wrong offset!");
static_assert(offsetof(SwimmingAnimBP_C_SwimmingLowerBodyLayer, PreUpperBodySlot_Cache) == 0x000010, "Member 'SwimmingAnimBP_C_SwimmingLowerBodyLayer::PreUpperBodySlot_Cache' has a wrong offset!");
static_assert(offsetof(SwimmingAnimBP_C_SwimmingLowerBodyLayer, PassThroughSwimmingLowerBody) == 0x000020, "Member 'SwimmingAnimBP_C_SwimmingLowerBodyLayer::PassThroughSwimmingLowerBody' has a wrong offset!");
static_assert(offsetof(SwimmingAnimBP_C_SwimmingLowerBodyLayer, SwimmingLowerBodyLayer_0) == 0x000030, "Member 'SwimmingAnimBP_C_SwimmingLowerBodyLayer::SwimmingLowerBodyLayer_0' has a wrong offset!");

// Function SwimmingAnimBP.SwimmingAnimBP_C.SwimmingMovementAdditiveLayerPose
// 0x0020 (0x0020 - 0x0000)
struct SwimmingAnimBP_C_SwimmingMovementAdditiveLayerPose final
{
public:
	struct FPoseLink                              PassThroughSwimmingMovementAdditive;               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              SwimmingMovementAdditiveLayerPose_0;               // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(SwimmingAnimBP_C_SwimmingMovementAdditiveLayerPose) == 0x000008, "Wrong alignment on SwimmingAnimBP_C_SwimmingMovementAdditiveLayerPose");
static_assert(sizeof(SwimmingAnimBP_C_SwimmingMovementAdditiveLayerPose) == 0x000020, "Wrong size on SwimmingAnimBP_C_SwimmingMovementAdditiveLayerPose");
static_assert(offsetof(SwimmingAnimBP_C_SwimmingMovementAdditiveLayerPose, PassThroughSwimmingMovementAdditive) == 0x000000, "Member 'SwimmingAnimBP_C_SwimmingMovementAdditiveLayerPose::PassThroughSwimmingMovementAdditive' has a wrong offset!");
static_assert(offsetof(SwimmingAnimBP_C_SwimmingMovementAdditiveLayerPose, SwimmingMovementAdditiveLayerPose_0) == 0x000010, "Member 'SwimmingAnimBP_C_SwimmingMovementAdditiveLayerPose::SwimmingMovementAdditiveLayerPose_0' has a wrong offset!");

// Function SwimmingAnimBP.SwimmingAnimBP_C.SwimmingUpperBodyPose
// 0x0020 (0x0020 - 0x0000)
struct SwimmingAnimBP_C_SwimmingUpperBodyPose final
{
public:
	struct FPoseLink                              PassThroughSwimmingUpperBodyPose;                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              SwimmingUpperBodyPose_0;                           // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(SwimmingAnimBP_C_SwimmingUpperBodyPose) == 0x000008, "Wrong alignment on SwimmingAnimBP_C_SwimmingUpperBodyPose");
static_assert(sizeof(SwimmingAnimBP_C_SwimmingUpperBodyPose) == 0x000020, "Wrong size on SwimmingAnimBP_C_SwimmingUpperBodyPose");
static_assert(offsetof(SwimmingAnimBP_C_SwimmingUpperBodyPose, PassThroughSwimmingUpperBodyPose) == 0x000000, "Member 'SwimmingAnimBP_C_SwimmingUpperBodyPose::PassThroughSwimmingUpperBodyPose' has a wrong offset!");
static_assert(offsetof(SwimmingAnimBP_C_SwimmingUpperBodyPose, SwimmingUpperBodyPose_0) == 0x000010, "Member 'SwimmingAnimBP_C_SwimmingUpperBodyPose::SwimmingUpperBodyPose_0' has a wrong offset!");

}

