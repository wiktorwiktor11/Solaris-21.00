#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DataAssetDirectory

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "DataAssetDirectory_structs.hpp"


namespace SDK
{

// Class DataAssetDirectory.DataAssetDirectoryManager
// 0x01A0 (0x01C8 - 0x0028)
class UDataAssetDirectoryManager final : public UObject
{
public:
	uint8                                         Pad_28[0x168];                                     // 0x0028(0x0168)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        PatchedAssets;                                     // 0x0190(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FDateTime                              LastUpdateCheck;                                   // 0x01A0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUpdateCheckPending;                               // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A9[0x3];                                      // 0x01A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        UpdateCheckLimitSeconds;                           // 0x01AC(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnabled;                                          // 0x01B0(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFailOnError;                                      // 0x01B1(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAnalyticsEnabled;                                 // 0x01B2(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B3[0x15];                                     // 0x01B3(0x0015)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DataAssetDirectoryManager">();
	}
	static class UDataAssetDirectoryManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDataAssetDirectoryManager>();
	}
};
static_assert(alignof(UDataAssetDirectoryManager) == 0x000008, "Wrong alignment on UDataAssetDirectoryManager");
static_assert(sizeof(UDataAssetDirectoryManager) == 0x0001C8, "Wrong size on UDataAssetDirectoryManager");
static_assert(offsetof(UDataAssetDirectoryManager, PatchedAssets) == 0x000190, "Member 'UDataAssetDirectoryManager::PatchedAssets' has a wrong offset!");
static_assert(offsetof(UDataAssetDirectoryManager, LastUpdateCheck) == 0x0001A0, "Member 'UDataAssetDirectoryManager::LastUpdateCheck' has a wrong offset!");
static_assert(offsetof(UDataAssetDirectoryManager, bUpdateCheckPending) == 0x0001A8, "Member 'UDataAssetDirectoryManager::bUpdateCheckPending' has a wrong offset!");
static_assert(offsetof(UDataAssetDirectoryManager, UpdateCheckLimitSeconds) == 0x0001AC, "Member 'UDataAssetDirectoryManager::UpdateCheckLimitSeconds' has a wrong offset!");
static_assert(offsetof(UDataAssetDirectoryManager, bEnabled) == 0x0001B0, "Member 'UDataAssetDirectoryManager::bEnabled' has a wrong offset!");
static_assert(offsetof(UDataAssetDirectoryManager, bFailOnError) == 0x0001B1, "Member 'UDataAssetDirectoryManager::bFailOnError' has a wrong offset!");
static_assert(offsetof(UDataAssetDirectoryManager, bAnalyticsEnabled) == 0x0001B2, "Member 'UDataAssetDirectoryManager::bAnalyticsEnabled' has a wrong offset!");

// Class DataAssetDirectory.DataAssetDirectoryPatchableAsset
// 0x0000 (0x0028 - 0x0028)
class IDataAssetDirectoryPatchableAsset final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DataAssetDirectoryPatchableAsset">();
	}
	static class IDataAssetDirectoryPatchableAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<IDataAssetDirectoryPatchableAsset>();
	}
};
static_assert(alignof(IDataAssetDirectoryPatchableAsset) == 0x000008, "Wrong alignment on IDataAssetDirectoryPatchableAsset");
static_assert(sizeof(IDataAssetDirectoryPatchableAsset) == 0x000028, "Wrong size on IDataAssetDirectoryPatchableAsset");

// Class DataAssetDirectory.DataAssetDirectoryPatcher
// 0x0000 (0x0028 - 0x0028)
class UDataAssetDirectoryPatcher final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DataAssetDirectoryPatcher">();
	}
	static class UDataAssetDirectoryPatcher* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDataAssetDirectoryPatcher>();
	}
};
static_assert(alignof(UDataAssetDirectoryPatcher) == 0x000008, "Wrong alignment on UDataAssetDirectoryPatcher");
static_assert(sizeof(UDataAssetDirectoryPatcher) == 0x000028, "Wrong size on UDataAssetDirectoryPatcher");

// Class DataAssetDirectory.DataAssetDirectorySimpleObject
// 0x0008 (0x0030 - 0x0028)
class UDataAssetDirectorySimpleObject final : public UObject
{
public:
	int32                                         IntProperty;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DataAssetDirectorySimpleObject">();
	}
	static class UDataAssetDirectorySimpleObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDataAssetDirectorySimpleObject>();
	}
};
static_assert(alignof(UDataAssetDirectorySimpleObject) == 0x000008, "Wrong alignment on UDataAssetDirectorySimpleObject");
static_assert(sizeof(UDataAssetDirectorySimpleObject) == 0x000030, "Wrong size on UDataAssetDirectorySimpleObject");
static_assert(offsetof(UDataAssetDirectorySimpleObject, IntProperty) == 0x000028, "Member 'UDataAssetDirectorySimpleObject::IntProperty' has a wrong offset!");

// Class DataAssetDirectory.DataAssetDirectoryTestPODAsset
// 0x0050 (0x0078 - 0x0028)
class UDataAssetDirectoryTestPODAsset final : public UObject
{
public:
	class FString                                 AssetName;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataAssetDirectoryTestEnum                   EnumProperty;                                      // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IntProperty;                                       // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatProperty;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BoolProperty;                                      // 0x0044(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StringProperty;                                    // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NameProperty;                                      // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TextProperty;                                      // 0x0060(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DataAssetDirectoryTestPODAsset">();
	}
	static class UDataAssetDirectoryTestPODAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDataAssetDirectoryTestPODAsset>();
	}
};
static_assert(alignof(UDataAssetDirectoryTestPODAsset) == 0x000008, "Wrong alignment on UDataAssetDirectoryTestPODAsset");
static_assert(sizeof(UDataAssetDirectoryTestPODAsset) == 0x000078, "Wrong size on UDataAssetDirectoryTestPODAsset");
static_assert(offsetof(UDataAssetDirectoryTestPODAsset, AssetName) == 0x000028, "Member 'UDataAssetDirectoryTestPODAsset::AssetName' has a wrong offset!");
static_assert(offsetof(UDataAssetDirectoryTestPODAsset, EnumProperty) == 0x000038, "Member 'UDataAssetDirectoryTestPODAsset::EnumProperty' has a wrong offset!");
static_assert(offsetof(UDataAssetDirectoryTestPODAsset, IntProperty) == 0x00003C, "Member 'UDataAssetDirectoryTestPODAsset::IntProperty' has a wrong offset!");
static_assert(offsetof(UDataAssetDirectoryTestPODAsset, FloatProperty) == 0x000040, "Member 'UDataAssetDirectoryTestPODAsset::FloatProperty' has a wrong offset!");
static_assert(offsetof(UDataAssetDirectoryTestPODAsset, BoolProperty) == 0x000044, "Member 'UDataAssetDirectoryTestPODAsset::BoolProperty' has a wrong offset!");
static_assert(offsetof(UDataAssetDirectoryTestPODAsset, StringProperty) == 0x000048, "Member 'UDataAssetDirectoryTestPODAsset::StringProperty' has a wrong offset!");
static_assert(offsetof(UDataAssetDirectoryTestPODAsset, NameProperty) == 0x000058, "Member 'UDataAssetDirectoryTestPODAsset::NameProperty' has a wrong offset!");
static_assert(offsetof(UDataAssetDirectoryTestPODAsset, TextProperty) == 0x000060, "Member 'UDataAssetDirectoryTestPODAsset::TextProperty' has a wrong offset!");

// Class DataAssetDirectory.DataAssetDirectoryTestStructAsset
// 0x0040 (0x0068 - 0x0028)
class UDataAssetDirectoryTestStructAsset final : public UObject
{
public:
	struct FDataAssetDirectoryTestPODStruct       TestStruct;                                        // 0x0028(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DataAssetDirectoryTestStructAsset">();
	}
	static class UDataAssetDirectoryTestStructAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDataAssetDirectoryTestStructAsset>();
	}
};
static_assert(alignof(UDataAssetDirectoryTestStructAsset) == 0x000008, "Wrong alignment on UDataAssetDirectoryTestStructAsset");
static_assert(sizeof(UDataAssetDirectoryTestStructAsset) == 0x000068, "Wrong size on UDataAssetDirectoryTestStructAsset");
static_assert(offsetof(UDataAssetDirectoryTestStructAsset, TestStruct) == 0x000028, "Member 'UDataAssetDirectoryTestStructAsset::TestStruct' has a wrong offset!");

// Class DataAssetDirectory.DataAssetDirectoryTestArrayAsset
// 0x0020 (0x0048 - 0x0028)
class UDataAssetDirectoryTestArrayAsset final : public UObject
{
public:
	TArray<int32>                                 IntArray;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FDataAssetDirectoryTestSimpleStruct> SimpleStructArray;                                 // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DataAssetDirectoryTestArrayAsset">();
	}
	static class UDataAssetDirectoryTestArrayAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDataAssetDirectoryTestArrayAsset>();
	}
};
static_assert(alignof(UDataAssetDirectoryTestArrayAsset) == 0x000008, "Wrong alignment on UDataAssetDirectoryTestArrayAsset");
static_assert(sizeof(UDataAssetDirectoryTestArrayAsset) == 0x000048, "Wrong size on UDataAssetDirectoryTestArrayAsset");
static_assert(offsetof(UDataAssetDirectoryTestArrayAsset, IntArray) == 0x000028, "Member 'UDataAssetDirectoryTestArrayAsset::IntArray' has a wrong offset!");
static_assert(offsetof(UDataAssetDirectoryTestArrayAsset, SimpleStructArray) == 0x000038, "Member 'UDataAssetDirectoryTestArrayAsset::SimpleStructArray' has a wrong offset!");

// Class DataAssetDirectory.DataAssetDirectoryTestObjectAsset
// 0x0008 (0x0030 - 0x0028)
class UDataAssetDirectoryTestObjectAsset final : public UObject
{
public:
	class UDataAssetDirectorySimpleObject*        SimpleObject;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DataAssetDirectoryTestObjectAsset">();
	}
	static class UDataAssetDirectoryTestObjectAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDataAssetDirectoryTestObjectAsset>();
	}
};
static_assert(alignof(UDataAssetDirectoryTestObjectAsset) == 0x000008, "Wrong alignment on UDataAssetDirectoryTestObjectAsset");
static_assert(sizeof(UDataAssetDirectoryTestObjectAsset) == 0x000030, "Wrong size on UDataAssetDirectoryTestObjectAsset");
static_assert(offsetof(UDataAssetDirectoryTestObjectAsset, SimpleObject) == 0x000028, "Member 'UDataAssetDirectoryTestObjectAsset::SimpleObject' has a wrong offset!");

// Class DataAssetDirectory.DataAssetDirectoryTestMapAsset
// 0x0140 (0x0168 - 0x0028)
class UDataAssetDirectoryTestMapAsset final : public UObject
{
public:
	TMap<class FString, int32>                    StringIntMap;                                      // 0x0028(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FString, int32>                    ShrinkStringIntMap;                                // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FString, int32>                    GrowStringIntMap;                                  // 0x00C8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<int32, struct FDataAssetDirectoryTestSimpleStruct> IntStructMap;                                      // 0x0118(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DataAssetDirectoryTestMapAsset">();
	}
	static class UDataAssetDirectoryTestMapAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDataAssetDirectoryTestMapAsset>();
	}
};
static_assert(alignof(UDataAssetDirectoryTestMapAsset) == 0x000008, "Wrong alignment on UDataAssetDirectoryTestMapAsset");
static_assert(sizeof(UDataAssetDirectoryTestMapAsset) == 0x000168, "Wrong size on UDataAssetDirectoryTestMapAsset");
static_assert(offsetof(UDataAssetDirectoryTestMapAsset, StringIntMap) == 0x000028, "Member 'UDataAssetDirectoryTestMapAsset::StringIntMap' has a wrong offset!");
static_assert(offsetof(UDataAssetDirectoryTestMapAsset, ShrinkStringIntMap) == 0x000078, "Member 'UDataAssetDirectoryTestMapAsset::ShrinkStringIntMap' has a wrong offset!");
static_assert(offsetof(UDataAssetDirectoryTestMapAsset, GrowStringIntMap) == 0x0000C8, "Member 'UDataAssetDirectoryTestMapAsset::GrowStringIntMap' has a wrong offset!");
static_assert(offsetof(UDataAssetDirectoryTestMapAsset, IntStructMap) == 0x000118, "Member 'UDataAssetDirectoryTestMapAsset::IntStructMap' has a wrong offset!");

}

