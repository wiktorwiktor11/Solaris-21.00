#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TankUI

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"


namespace SDK::Params
{

// Function TankUI.TankVehicleReticle.HandleOnDamageablePartHealthChanged
// 0x0058 (0x0058 - 0x0000)
struct TankVehicleReticle_HandleOnDamageablePartHealthChanged final
{
public:
	struct FVehicleDamageablePartConfig           PartConfig;                                        // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVehicleDamageablePart                 Part;                                              // 0x0040(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bNewlyDisabled;                                    // 0x0054(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewlyEnabled;                                     // 0x0055(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TankVehicleReticle_HandleOnDamageablePartHealthChanged) == 0x000008, "Wrong alignment on TankVehicleReticle_HandleOnDamageablePartHealthChanged");
static_assert(sizeof(TankVehicleReticle_HandleOnDamageablePartHealthChanged) == 0x000058, "Wrong size on TankVehicleReticle_HandleOnDamageablePartHealthChanged");
static_assert(offsetof(TankVehicleReticle_HandleOnDamageablePartHealthChanged, PartConfig) == 0x000000, "Member 'TankVehicleReticle_HandleOnDamageablePartHealthChanged::PartConfig' has a wrong offset!");
static_assert(offsetof(TankVehicleReticle_HandleOnDamageablePartHealthChanged, Part) == 0x000040, "Member 'TankVehicleReticle_HandleOnDamageablePartHealthChanged::Part' has a wrong offset!");
static_assert(offsetof(TankVehicleReticle_HandleOnDamageablePartHealthChanged, bNewlyDisabled) == 0x000054, "Member 'TankVehicleReticle_HandleOnDamageablePartHealthChanged::bNewlyDisabled' has a wrong offset!");
static_assert(offsetof(TankVehicleReticle_HandleOnDamageablePartHealthChanged, bNewlyEnabled) == 0x000055, "Member 'TankVehicleReticle_HandleOnDamageablePartHealthChanged::bNewlyEnabled' has a wrong offset!");

// Function TankUI.TankVehicleReticle.HandleOnEquipMountedWeapon
// 0x0008 (0x0008 - 0x0000)
struct TankVehicleReticle_HandleOnEquipMountedWeapon final
{
public:
	class AFortWeaponRanged*                      EquippedMountedWeapon;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TankVehicleReticle_HandleOnEquipMountedWeapon) == 0x000008, "Wrong alignment on TankVehicleReticle_HandleOnEquipMountedWeapon");
static_assert(sizeof(TankVehicleReticle_HandleOnEquipMountedWeapon) == 0x000008, "Wrong size on TankVehicleReticle_HandleOnEquipMountedWeapon");
static_assert(offsetof(TankVehicleReticle_HandleOnEquipMountedWeapon, EquippedMountedWeapon) == 0x000000, "Member 'TankVehicleReticle_HandleOnEquipMountedWeapon::EquippedMountedWeapon' has a wrong offset!");

// Function TankUI.TankVehicleReticle.OnCannonFired
// 0x0004 (0x0004 - 0x0000)
struct TankVehicleReticle_OnCannonFired final
{
public:
	float                                         RateTime;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TankVehicleReticle_OnCannonFired) == 0x000004, "Wrong alignment on TankVehicleReticle_OnCannonFired");
static_assert(sizeof(TankVehicleReticle_OnCannonFired) == 0x000004, "Wrong size on TankVehicleReticle_OnCannonFired");
static_assert(offsetof(TankVehicleReticle_OnCannonFired, RateTime) == 0x000000, "Member 'TankVehicleReticle_OnCannonFired::RateTime' has a wrong offset!");

// Function TankUI.TankVehicleReticle.OnTankDistanceUpdate
// 0x0008 (0x0008 - 0x0000)
struct TankVehicleReticle_OnTankDistanceUpdate final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistancePercent;                                   // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TankVehicleReticle_OnTankDistanceUpdate) == 0x000004, "Wrong alignment on TankVehicleReticle_OnTankDistanceUpdate");
static_assert(sizeof(TankVehicleReticle_OnTankDistanceUpdate) == 0x000008, "Wrong size on TankVehicleReticle_OnTankDistanceUpdate");
static_assert(offsetof(TankVehicleReticle_OnTankDistanceUpdate, Distance) == 0x000000, "Member 'TankVehicleReticle_OnTankDistanceUpdate::Distance' has a wrong offset!");
static_assert(offsetof(TankVehicleReticle_OnTankDistanceUpdate, DistancePercent) == 0x000004, "Member 'TankVehicleReticle_OnTankDistanceUpdate::DistancePercent' has a wrong offset!");

// Function TankUI.TankVehicleReticle.OnTankEngineHealthChanged
// 0x000C (0x000C - 0x0000)
struct TankVehicleReticle_OnTankEngineHealthChanged final
{
public:
	float                                         EngineHealth;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EngineHealthMax;                                   // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewlyDisabled;                                    // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewlyEnabled;                                     // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TankVehicleReticle_OnTankEngineHealthChanged) == 0x000004, "Wrong alignment on TankVehicleReticle_OnTankEngineHealthChanged");
static_assert(sizeof(TankVehicleReticle_OnTankEngineHealthChanged) == 0x00000C, "Wrong size on TankVehicleReticle_OnTankEngineHealthChanged");
static_assert(offsetof(TankVehicleReticle_OnTankEngineHealthChanged, EngineHealth) == 0x000000, "Member 'TankVehicleReticle_OnTankEngineHealthChanged::EngineHealth' has a wrong offset!");
static_assert(offsetof(TankVehicleReticle_OnTankEngineHealthChanged, EngineHealthMax) == 0x000004, "Member 'TankVehicleReticle_OnTankEngineHealthChanged::EngineHealthMax' has a wrong offset!");
static_assert(offsetof(TankVehicleReticle_OnTankEngineHealthChanged, bNewlyDisabled) == 0x000008, "Member 'TankVehicleReticle_OnTankEngineHealthChanged::bNewlyDisabled' has a wrong offset!");
static_assert(offsetof(TankVehicleReticle_OnTankEngineHealthChanged, bNewlyEnabled) == 0x000009, "Member 'TankVehicleReticle_OnTankEngineHealthChanged::bNewlyEnabled' has a wrong offset!");

// Function TankUI.TankVehicleReticle.OnTankHatchHealthChanged
// 0x000C (0x000C - 0x0000)
struct TankVehicleReticle_OnTankHatchHealthChanged final
{
public:
	float                                         HatchHealth;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HatchHealthMax;                                    // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewlyDisabled;                                    // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewlyEnabled;                                     // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TankVehicleReticle_OnTankHatchHealthChanged) == 0x000004, "Wrong alignment on TankVehicleReticle_OnTankHatchHealthChanged");
static_assert(sizeof(TankVehicleReticle_OnTankHatchHealthChanged) == 0x00000C, "Wrong size on TankVehicleReticle_OnTankHatchHealthChanged");
static_assert(offsetof(TankVehicleReticle_OnTankHatchHealthChanged, HatchHealth) == 0x000000, "Member 'TankVehicleReticle_OnTankHatchHealthChanged::HatchHealth' has a wrong offset!");
static_assert(offsetof(TankVehicleReticle_OnTankHatchHealthChanged, HatchHealthMax) == 0x000004, "Member 'TankVehicleReticle_OnTankHatchHealthChanged::HatchHealthMax' has a wrong offset!");
static_assert(offsetof(TankVehicleReticle_OnTankHatchHealthChanged, bNewlyDisabled) == 0x000008, "Member 'TankVehicleReticle_OnTankHatchHealthChanged::bNewlyDisabled' has a wrong offset!");
static_assert(offsetof(TankVehicleReticle_OnTankHatchHealthChanged, bNewlyEnabled) == 0x000009, "Member 'TankVehicleReticle_OnTankHatchHealthChanged::bNewlyEnabled' has a wrong offset!");

// Function TankUI.TankVehicleReticle.OnTankRotationValueChanged
// 0x0008 (0x0008 - 0x0000)
struct TankVehicleReticle_OnTankRotationValueChanged final
{
public:
	float                                         TankValue;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurretValue;                                       // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TankVehicleReticle_OnTankRotationValueChanged) == 0x000004, "Wrong alignment on TankVehicleReticle_OnTankRotationValueChanged");
static_assert(sizeof(TankVehicleReticle_OnTankRotationValueChanged) == 0x000008, "Wrong size on TankVehicleReticle_OnTankRotationValueChanged");
static_assert(offsetof(TankVehicleReticle_OnTankRotationValueChanged, TankValue) == 0x000000, "Member 'TankVehicleReticle_OnTankRotationValueChanged::TankValue' has a wrong offset!");
static_assert(offsetof(TankVehicleReticle_OnTankRotationValueChanged, TurretValue) == 0x000004, "Member 'TankVehicleReticle_OnTankRotationValueChanged::TurretValue' has a wrong offset!");

// Function TankUI.TankVehicleReticle.OnTankTurretAimPitchValueChanged
// 0x0008 (0x0008 - 0x0000)
struct TankVehicleReticle_OnTankTurretAimPitchValueChanged final
{
public:
	float                                         Pitch;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchPercent;                                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TankVehicleReticle_OnTankTurretAimPitchValueChanged) == 0x000004, "Wrong alignment on TankVehicleReticle_OnTankTurretAimPitchValueChanged");
static_assert(sizeof(TankVehicleReticle_OnTankTurretAimPitchValueChanged) == 0x000008, "Wrong size on TankVehicleReticle_OnTankTurretAimPitchValueChanged");
static_assert(offsetof(TankVehicleReticle_OnTankTurretAimPitchValueChanged, Pitch) == 0x000000, "Member 'TankVehicleReticle_OnTankTurretAimPitchValueChanged::Pitch' has a wrong offset!");
static_assert(offsetof(TankVehicleReticle_OnTankTurretAimPitchValueChanged, PitchPercent) == 0x000004, "Member 'TankVehicleReticle_OnTankTurretAimPitchValueChanged::PitchPercent' has a wrong offset!");

// Function TankUI.TankVehicleReticle.OnTankTurretAimYawValueChanged
// 0x0004 (0x0004 - 0x0000)
struct TankVehicleReticle_OnTankTurretAimYawValueChanged final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TankVehicleReticle_OnTankTurretAimYawValueChanged) == 0x000004, "Wrong alignment on TankVehicleReticle_OnTankTurretAimYawValueChanged");
static_assert(sizeof(TankVehicleReticle_OnTankTurretAimYawValueChanged) == 0x000004, "Wrong size on TankVehicleReticle_OnTankTurretAimYawValueChanged");
static_assert(offsetof(TankVehicleReticle_OnTankTurretAimYawValueChanged, Value) == 0x000000, "Member 'TankVehicleReticle_OnTankTurretAimYawValueChanged::Value' has a wrong offset!");

// Function TankUI.TankVehicleReticle.OnTreadEnabledChanged
// 0x0002 (0x0002 - 0x0000)
struct TankVehicleReticle_OnTreadEnabledChanged final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETreadSide                                    Side;                                              // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TankVehicleReticle_OnTreadEnabledChanged) == 0x000001, "Wrong alignment on TankVehicleReticle_OnTreadEnabledChanged");
static_assert(sizeof(TankVehicleReticle_OnTreadEnabledChanged) == 0x000002, "Wrong size on TankVehicleReticle_OnTreadEnabledChanged");
static_assert(offsetof(TankVehicleReticle_OnTreadEnabledChanged, bEnabled) == 0x000000, "Member 'TankVehicleReticle_OnTreadEnabledChanged::bEnabled' has a wrong offset!");
static_assert(offsetof(TankVehicleReticle_OnTreadEnabledChanged, Side) == 0x000001, "Member 'TankVehicleReticle_OnTreadEnabledChanged::Side' has a wrong offset!");

// Function TankUI.TankVehicleReticle.SetupVehicleFromBP
// 0x0008 (0x0008 - 0x0000)
struct TankVehicleReticle_SetupVehicleFromBP final
{
public:
	class AActor*                                 NewVehicle;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TankVehicleReticle_SetupVehicleFromBP) == 0x000008, "Wrong alignment on TankVehicleReticle_SetupVehicleFromBP");
static_assert(sizeof(TankVehicleReticle_SetupVehicleFromBP) == 0x000008, "Wrong size on TankVehicleReticle_SetupVehicleFromBP");
static_assert(offsetof(TankVehicleReticle_SetupVehicleFromBP, NewVehicle) == 0x000000, "Member 'TankVehicleReticle_SetupVehicleFromBP::NewVehicle' has a wrong offset!");

}

