#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CreatureBaseRidableComponent

#include "Basic.hpp"

#include "GameplayTags_0_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "RidingCodeRuntime_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass CreatureBaseRidableComponent.CreatureBaseRidableComponent_C
// 0x04C8 (0x0970 - 0x04A8)
#pragma pack(push, 0x1)
class alignas(0x10) UCreatureBaseRidableComponent_C : public UControllableRidableComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FGameplayTagContainer                  T_CreatureIsBeingRidden;                           // 0x04B0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_CreatureIsBeingRidden;                          // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_CreatureIsBeingRidden_Passive;                  // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDebugDisplay;                                     // 0x04E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4E1[0x3];                                      // 0x04E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DebugTickRate;                                     // 0x04E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DebugServerRiderLocation;                          // 0x04E8(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CapsuleRadiusOffset;                               // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CapsuleHalfHeightOffset;                           // 0x0504(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  T_RidingSpecialAbility;                            // 0x0508(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UAnimSequence*                          IdleAnim_Add;                                      // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          RunAnim_Add;                                       // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBlendSpace*                            TurnBS;                                            // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinSpeedToRun;                                     // 0x0540(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Run_RampIntoSpeed;                                 // 0x0544(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Run_RampIntoSpeed_ADS;                             // 0x0548(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Run_PlayRate;                                      // 0x054C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Run_PlayRate_ADS;                                  // 0x0550(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpringAlpha;                                       // 0x0554(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpringAlpha_ADS;                                   // 0x0558(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Idle_Alpha;                                        // 0x055C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Idle_Alpha_ADS;                                    // 0x0560(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Run_Alpha;                                         // 0x0564(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Run_Alpha_ADS;                                     // 0x0568(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Turn_Alpha;                                        // 0x056C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Turn_Alpha_ADS;                                    // 0x0570(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_574[0x4];                                      // 0x0574(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          Clamp_AnimPose_LastResort;                         // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Clamp_Foot_R_Adjust;                               // 0x0580(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               Clamp_Foot_L_Adjust;                               // 0x0598(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         CapsuleRadiusOffset_Emote;                         // 0x05B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CapsuleHalfHeightOffset_Emote;                     // 0x05B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Clamp_Location_Offset;                             // 0x05B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Clamp_Rotation_Offset;                             // 0x05D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Clamp_ScaleAdjust;                                 // 0x05E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   RidableSocketName;                                 // 0x0600(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RidableSocket_Alpha;                               // 0x0604(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSubclassOf<class UGameplayEffect>            GE_CooldownOverride;                               // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FGameplayTagContainer                  T_CreatureOverrideCooldown;                        // 0x0610(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<ECollisionChannel, ECollisionResponse>   OriginalCollisionResponseMap;                      // 0x0630(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSoundIndicatorIconPicker              RidingSoundIndicatorIconOverride;                  // 0x0680(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(float JumpPitchInterpSpeed)> AudioOnJump;                                       // 0x06A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              AudioOnJumpApex;                                   // 0x06B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	uint8                                         MovementMode;                                      // 0x06C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFalling;                                          // 0x06C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6CA[0x6];                                      // 0x06CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         RidingAbilityEnable_HF;                            // 0x06D0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         JumpAttach_GroundHeightMin;                        // 0x06F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         JumpAttach_GroundHeightBuffer;                     // 0x06FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseAltRidingMessage;                               // 0x0700(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_701[0x7];                                      // 0x0701(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Riding_Interaction_Text;                           // 0x0708(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         currentEnergyValue;                                // 0x0720(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_724[0x4];                                      // 0x0724(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerRiderComponent_C*                PlayerRiderComponentRef;                           // 0x0728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ANPC_Pawn_Wildlife_Parent_C*            NPCPawnWildlifeRef;                                // 0x0730(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         previousTimeTracked;                               // 0x0738(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         energyTrackingDeltaTime;                           // 0x073C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldHaveEnergy;                                  // 0x0740(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_741[0x3];                                      // 0x0741(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EnergyRateOfDecayStopped;                          // 0x0744(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          allowUpdateEnergyTrackingTick;                     // 0x0748(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          lastBeingRiddenState;                              // 0x0749(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74A[0x6];                                      // 0x074A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCurveTableRowHandle                   EnergyRateOfDecayMoving;                           // 0x0750(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FCurveTableRowHandle                   EnergyRateOfDecaySprinting;                        // 0x0760(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentEnergyRateOfRecharge;                       // 0x0770(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_774[0x4];                                      // 0x0774(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCurveTableRowHandle                   ExhaustedEnergyRateOfRecharge;                     // 0x0778(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         EnergyWarningThreshold;                            // 0x0788(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnergyCriticalThreshold;                           // 0x078C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          energyWarningActive;                               // 0x0790(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          energyCriticalActive;                              // 0x0791(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_792[0x2];                                      // 0x0792(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         minMovementSpeedTreshold;                          // 0x0794(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsJumping;                                         // 0x0798(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_799[0x7];                                      // 0x0799(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            GE_EnergyWarning;                                  // 0x07A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UGameplayEffect>            GE_EnergyCritical;                                 // 0x07A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UGameplayEffect>            GE_EnergyDepleted;                                 // 0x07B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FGameplayTagContainer                  T_EnergyWarning;                                   // 0x07B8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  T_EnergyCritical;                                  // 0x07D8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  T_EnergyDepleted;                                  // 0x07F8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  T_CannotRideBucket;                                // 0x0818(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 Gameplay_Effect;                                   // 0x0838(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SprintingAbilityTag;                               // 0x0840(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_844[0x4];                                      // 0x0844(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 GE_EatToRefuel;                                    // 0x0848(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateBrush                            IconBrush;                                         // 0x0850(0x00C0)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_Creature_Sprint;                                // 0x0910(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundLibrary*                          RidingFoleySoundLibrary;                           // 0x0918(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  TagsPreventSprinting;                              // 0x0920(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(class FText Name, const struct FSlateBrush& Icon)> RidableUIStart;                                    // 0x0940(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(float Energy, bool bIsResting)> RidableUIUpdateEnergy;                             // 0x0950(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FGameplayTag                           OutOfEnergySoundLibTag;                            // 0x0960(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SprintStartSoundLibTag;                            // 0x0964(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ApplyCollisionResponse(TArray<ECollisionChannel>& Channels, ECollisionResponse Response);
	void ApplyGEToSelf(TSubclassOf<class UGameplayEffect> GameplayEffectClass, bool* IsValidClass);
	void CheatSetStaminaPercent(const float StaminaPercent);
	void CommitEnergyCosts(bool RequireAllEnergy, float EnergyCost, bool* Success);
	void ConvertedDispatcher_Event_0(bool Converted, class AFortPawn* InstigatorPawn);
	void DetermineRateOfChange(float* rateOfChange);
	void EnergyTrackingStart();
	void EnergyTrackingStop();
	void ExecuteUbergraph_CreatureBaseRidableComponent(int32 EntryPoint);
	void GetRiderLocation(struct FVector* Location);
	void GetRidingInfoFromTarget(float* JumpAttachGroundHeightMin, float* JumpAttachGroundHeightBuffer, bool* UsesAltRidingMessage);
	void GetRunSpeed(float* RunSpeed);
	void GetSprintSpeed(float* SprintSpeed);
	void HandleAbilityHeld();
	void HandleAbilityStarted();
	void HandleAbilityStopped();
	void HandleCancelSprint(const bool bAbilityInputHeld, const bool bForceCancel);
	void HandleEnemyFoleySoundLibrary(class UActorComponent* Rider, bool bIsRiding);
	void HandleJumpStarted();
	void HandleRiderStartedRiding(class URiderComponent* Rider);
	void HandleRiderStoppedRiding(class URiderComponent* Rider);
	void IsSwimming(bool* IsSwimming_0);
	void KickRiderOffSelf();
	void NPCPawnInteractWithDispatcher_Event_0(class AActor* AIPawn, class AFortPlayerPawn* InteractingPlayerPawn);
	void OnEatToRefuel(float EnergyCost);
	void OnEnergyDepletedClient();
	void OnEnergyUpdate(float Energy, bool bWarningActive);
	void OnJumping(float JumpPitchInterpSpeed);
	void OnJumpingApex();
	void OnMovementModeChanged(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode);
	void OnPawnHealthChanged_Event_0();
	void OnPawnLanded_Event_0(const struct FHitResult& Hit);
	void OnRep_currentEnergyValue();
	void OnRep_IdleAnim_Add();
	void OnSprintStarted();
	void Propagate_Immunity_Fall_Damage();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void Removed_AD51144144164FD235EE5BA4F6E87456();
	void Removed_AE90D5474A90AF2F7D8D4D87856DAB44();
	void RemoveGEByTag(const struct FGameplayTagContainer& Tags);
	void RestoreCollisionResponses();
	void SetWildlifeHealth();
	void StopSprinting();
	void TestThreshold(bool isDecaying, float CurrentValue, float testTreshold, bool PreviousState, bool* crossedThreshold);
	void ToggleRiding(class AActor* PlayerPawn, class AActor* Target, bool ShouldRide, bool* bChangedRiding);
	void ToggleRidingAlternative();
	void UpdateAnimInputBool(class AFortPawn* FortPawn, bool IsBeingRidden_0);
	void UpdateDebug();
	void UpdateEnergy();
	void UpdateValue(float TargetValue, float rateOfChange, float DeltaTime, float* updatedValue, bool* EnergyDepleted);
	void UseEnergyAmountServer(float EnergyCost);

	bool CanRiderPlayEmote(const class URiderComponent* Rider) const;
	void GetRiderCapsuleSize(class URiderComponent* Rider, float* RiderCapsuleRadius, float* RiderCapsuleHH) const;
	void GetRidingCapsuleSize(const class URiderComponent* Rider, float OriginalRadius, float OriginalHalfHeight, float* OutRadius, float* OutHalfHeight) const;
	void GetRidingEmoteCapsuleSize(const class URiderComponent* Rider, float OriginalRadius, float OriginalHalfHeight, float* OutRadius, float* OutHalfHeight) const;
	bool IsSprinting() const;
	bool ShouldCameraFocusOnRidable(const class URiderComponent* Rider) const;
	bool ShouldSetAsViewTarget(const class URiderComponent* Rider) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CreatureBaseRidableComponent_C">();
	}
	static class UCreatureBaseRidableComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCreatureBaseRidableComponent_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(UCreatureBaseRidableComponent_C) == 0x000010, "Wrong alignment on UCreatureBaseRidableComponent_C");
static_assert(sizeof(UCreatureBaseRidableComponent_C) == 0x000970, "Wrong size on UCreatureBaseRidableComponent_C");
static_assert(offsetof(UCreatureBaseRidableComponent_C, UberGraphFrame) == 0x0004A8, "Member 'UCreatureBaseRidableComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, T_CreatureIsBeingRidden) == 0x0004B0, "Member 'UCreatureBaseRidableComponent_C::T_CreatureIsBeingRidden' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, GE_CreatureIsBeingRidden) == 0x0004D0, "Member 'UCreatureBaseRidableComponent_C::GE_CreatureIsBeingRidden' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, GE_CreatureIsBeingRidden_Passive) == 0x0004D8, "Member 'UCreatureBaseRidableComponent_C::GE_CreatureIsBeingRidden_Passive' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, bDebugDisplay) == 0x0004E0, "Member 'UCreatureBaseRidableComponent_C::bDebugDisplay' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, DebugTickRate) == 0x0004E4, "Member 'UCreatureBaseRidableComponent_C::DebugTickRate' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, DebugServerRiderLocation) == 0x0004E8, "Member 'UCreatureBaseRidableComponent_C::DebugServerRiderLocation' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, CapsuleRadiusOffset) == 0x000500, "Member 'UCreatureBaseRidableComponent_C::CapsuleRadiusOffset' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, CapsuleHalfHeightOffset) == 0x000504, "Member 'UCreatureBaseRidableComponent_C::CapsuleHalfHeightOffset' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, T_RidingSpecialAbility) == 0x000508, "Member 'UCreatureBaseRidableComponent_C::T_RidingSpecialAbility' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, IdleAnim_Add) == 0x000528, "Member 'UCreatureBaseRidableComponent_C::IdleAnim_Add' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, RunAnim_Add) == 0x000530, "Member 'UCreatureBaseRidableComponent_C::RunAnim_Add' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, TurnBS) == 0x000538, "Member 'UCreatureBaseRidableComponent_C::TurnBS' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, MinSpeedToRun) == 0x000540, "Member 'UCreatureBaseRidableComponent_C::MinSpeedToRun' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, Run_RampIntoSpeed) == 0x000544, "Member 'UCreatureBaseRidableComponent_C::Run_RampIntoSpeed' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, Run_RampIntoSpeed_ADS) == 0x000548, "Member 'UCreatureBaseRidableComponent_C::Run_RampIntoSpeed_ADS' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, Run_PlayRate) == 0x00054C, "Member 'UCreatureBaseRidableComponent_C::Run_PlayRate' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, Run_PlayRate_ADS) == 0x000550, "Member 'UCreatureBaseRidableComponent_C::Run_PlayRate_ADS' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, SpringAlpha) == 0x000554, "Member 'UCreatureBaseRidableComponent_C::SpringAlpha' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, SpringAlpha_ADS) == 0x000558, "Member 'UCreatureBaseRidableComponent_C::SpringAlpha_ADS' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, Idle_Alpha) == 0x00055C, "Member 'UCreatureBaseRidableComponent_C::Idle_Alpha' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, Idle_Alpha_ADS) == 0x000560, "Member 'UCreatureBaseRidableComponent_C::Idle_Alpha_ADS' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, Run_Alpha) == 0x000564, "Member 'UCreatureBaseRidableComponent_C::Run_Alpha' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, Run_Alpha_ADS) == 0x000568, "Member 'UCreatureBaseRidableComponent_C::Run_Alpha_ADS' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, Turn_Alpha) == 0x00056C, "Member 'UCreatureBaseRidableComponent_C::Turn_Alpha' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, Turn_Alpha_ADS) == 0x000570, "Member 'UCreatureBaseRidableComponent_C::Turn_Alpha_ADS' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, Clamp_AnimPose_LastResort) == 0x000578, "Member 'UCreatureBaseRidableComponent_C::Clamp_AnimPose_LastResort' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, Clamp_Foot_R_Adjust) == 0x000580, "Member 'UCreatureBaseRidableComponent_C::Clamp_Foot_R_Adjust' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, Clamp_Foot_L_Adjust) == 0x000598, "Member 'UCreatureBaseRidableComponent_C::Clamp_Foot_L_Adjust' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, CapsuleRadiusOffset_Emote) == 0x0005B0, "Member 'UCreatureBaseRidableComponent_C::CapsuleRadiusOffset_Emote' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, CapsuleHalfHeightOffset_Emote) == 0x0005B4, "Member 'UCreatureBaseRidableComponent_C::CapsuleHalfHeightOffset_Emote' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, Clamp_Location_Offset) == 0x0005B8, "Member 'UCreatureBaseRidableComponent_C::Clamp_Location_Offset' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, Clamp_Rotation_Offset) == 0x0005D0, "Member 'UCreatureBaseRidableComponent_C::Clamp_Rotation_Offset' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, Clamp_ScaleAdjust) == 0x0005E8, "Member 'UCreatureBaseRidableComponent_C::Clamp_ScaleAdjust' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, RidableSocketName) == 0x000600, "Member 'UCreatureBaseRidableComponent_C::RidableSocketName' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, RidableSocket_Alpha) == 0x000604, "Member 'UCreatureBaseRidableComponent_C::RidableSocket_Alpha' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, GE_CooldownOverride) == 0x000608, "Member 'UCreatureBaseRidableComponent_C::GE_CooldownOverride' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, T_CreatureOverrideCooldown) == 0x000610, "Member 'UCreatureBaseRidableComponent_C::T_CreatureOverrideCooldown' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, OriginalCollisionResponseMap) == 0x000630, "Member 'UCreatureBaseRidableComponent_C::OriginalCollisionResponseMap' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, RidingSoundIndicatorIconOverride) == 0x000680, "Member 'UCreatureBaseRidableComponent_C::RidingSoundIndicatorIconOverride' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, AudioOnJump) == 0x0006A8, "Member 'UCreatureBaseRidableComponent_C::AudioOnJump' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, AudioOnJumpApex) == 0x0006B8, "Member 'UCreatureBaseRidableComponent_C::AudioOnJumpApex' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, MovementMode) == 0x0006C8, "Member 'UCreatureBaseRidableComponent_C::MovementMode' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, bFalling) == 0x0006C9, "Member 'UCreatureBaseRidableComponent_C::bFalling' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, RidingAbilityEnable_HF) == 0x0006D0, "Member 'UCreatureBaseRidableComponent_C::RidingAbilityEnable_HF' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, JumpAttach_GroundHeightMin) == 0x0006F8, "Member 'UCreatureBaseRidableComponent_C::JumpAttach_GroundHeightMin' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, JumpAttach_GroundHeightBuffer) == 0x0006FC, "Member 'UCreatureBaseRidableComponent_C::JumpAttach_GroundHeightBuffer' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, UseAltRidingMessage) == 0x000700, "Member 'UCreatureBaseRidableComponent_C::UseAltRidingMessage' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, Riding_Interaction_Text) == 0x000708, "Member 'UCreatureBaseRidableComponent_C::Riding_Interaction_Text' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, currentEnergyValue) == 0x000720, "Member 'UCreatureBaseRidableComponent_C::currentEnergyValue' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, PlayerRiderComponentRef) == 0x000728, "Member 'UCreatureBaseRidableComponent_C::PlayerRiderComponentRef' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, NPCPawnWildlifeRef) == 0x000730, "Member 'UCreatureBaseRidableComponent_C::NPCPawnWildlifeRef' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, previousTimeTracked) == 0x000738, "Member 'UCreatureBaseRidableComponent_C::previousTimeTracked' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, energyTrackingDeltaTime) == 0x00073C, "Member 'UCreatureBaseRidableComponent_C::energyTrackingDeltaTime' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, ShouldHaveEnergy) == 0x000740, "Member 'UCreatureBaseRidableComponent_C::ShouldHaveEnergy' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, EnergyRateOfDecayStopped) == 0x000744, "Member 'UCreatureBaseRidableComponent_C::EnergyRateOfDecayStopped' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, allowUpdateEnergyTrackingTick) == 0x000748, "Member 'UCreatureBaseRidableComponent_C::allowUpdateEnergyTrackingTick' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, lastBeingRiddenState) == 0x000749, "Member 'UCreatureBaseRidableComponent_C::lastBeingRiddenState' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, EnergyRateOfDecayMoving) == 0x000750, "Member 'UCreatureBaseRidableComponent_C::EnergyRateOfDecayMoving' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, EnergyRateOfDecaySprinting) == 0x000760, "Member 'UCreatureBaseRidableComponent_C::EnergyRateOfDecaySprinting' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, CurrentEnergyRateOfRecharge) == 0x000770, "Member 'UCreatureBaseRidableComponent_C::CurrentEnergyRateOfRecharge' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, ExhaustedEnergyRateOfRecharge) == 0x000778, "Member 'UCreatureBaseRidableComponent_C::ExhaustedEnergyRateOfRecharge' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, EnergyWarningThreshold) == 0x000788, "Member 'UCreatureBaseRidableComponent_C::EnergyWarningThreshold' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, EnergyCriticalThreshold) == 0x00078C, "Member 'UCreatureBaseRidableComponent_C::EnergyCriticalThreshold' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, energyWarningActive) == 0x000790, "Member 'UCreatureBaseRidableComponent_C::energyWarningActive' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, energyCriticalActive) == 0x000791, "Member 'UCreatureBaseRidableComponent_C::energyCriticalActive' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, minMovementSpeedTreshold) == 0x000794, "Member 'UCreatureBaseRidableComponent_C::minMovementSpeedTreshold' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, IsJumping) == 0x000798, "Member 'UCreatureBaseRidableComponent_C::IsJumping' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, GE_EnergyWarning) == 0x0007A0, "Member 'UCreatureBaseRidableComponent_C::GE_EnergyWarning' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, GE_EnergyCritical) == 0x0007A8, "Member 'UCreatureBaseRidableComponent_C::GE_EnergyCritical' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, GE_EnergyDepleted) == 0x0007B0, "Member 'UCreatureBaseRidableComponent_C::GE_EnergyDepleted' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, T_EnergyWarning) == 0x0007B8, "Member 'UCreatureBaseRidableComponent_C::T_EnergyWarning' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, T_EnergyCritical) == 0x0007D8, "Member 'UCreatureBaseRidableComponent_C::T_EnergyCritical' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, T_EnergyDepleted) == 0x0007F8, "Member 'UCreatureBaseRidableComponent_C::T_EnergyDepleted' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, T_CannotRideBucket) == 0x000818, "Member 'UCreatureBaseRidableComponent_C::T_CannotRideBucket' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, Gameplay_Effect) == 0x000838, "Member 'UCreatureBaseRidableComponent_C::Gameplay_Effect' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, SprintingAbilityTag) == 0x000840, "Member 'UCreatureBaseRidableComponent_C::SprintingAbilityTag' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, GE_EatToRefuel) == 0x000848, "Member 'UCreatureBaseRidableComponent_C::GE_EatToRefuel' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, IconBrush) == 0x000850, "Member 'UCreatureBaseRidableComponent_C::IconBrush' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, GE_Creature_Sprint) == 0x000910, "Member 'UCreatureBaseRidableComponent_C::GE_Creature_Sprint' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, RidingFoleySoundLibrary) == 0x000918, "Member 'UCreatureBaseRidableComponent_C::RidingFoleySoundLibrary' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, TagsPreventSprinting) == 0x000920, "Member 'UCreatureBaseRidableComponent_C::TagsPreventSprinting' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, RidableUIStart) == 0x000940, "Member 'UCreatureBaseRidableComponent_C::RidableUIStart' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, RidableUIUpdateEnergy) == 0x000950, "Member 'UCreatureBaseRidableComponent_C::RidableUIUpdateEnergy' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, OutOfEnergySoundLibTag) == 0x000960, "Member 'UCreatureBaseRidableComponent_C::OutOfEnergySoundLibTag' has a wrong offset!");
static_assert(offsetof(UCreatureBaseRidableComponent_C, SprintStartSoundLibTag) == 0x000964, "Member 'UCreatureBaseRidableComponent_C::SprintStartSoundLibTag' has a wrong offset!");

}

