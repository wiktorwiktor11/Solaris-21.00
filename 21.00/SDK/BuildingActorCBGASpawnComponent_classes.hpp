#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BuildingActorCBGASpawnComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BuildingActorCBGASpawnComponent.BuildingActorCBGASpawnComponent_C
// 0x0170 (0x0210 - 0x00A0)
class UBuildingActorCBGASpawnComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FScalableFloat                         Row_GlobalEnabled;                                 // 0x00A8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_SubtypeEnabled;                                // 0x00D0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_DropChance;                                    // 0x00F8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_MaxSpawnQuantityPerTrigger;                    // 0x0120(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSoftClassPtr<class UClass>                   CBGA_SoftRef;                                      // 0x0148(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UClass*                                 CBGA_ClassRef;                                     // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	TArray<float>                                 ThesholdAmounts;                                   // 0x0178(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                RelativeSpawnOffset;                               // 0x0188(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpawnRotationMin;                                  // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpawnRotationMax;                                  // 0x01A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpawnXYForwardOffset;                              // 0x01A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldImpulse;                                     // 0x01AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1AD[0x3];                                      // 0x01AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayBeforeImpulse;                                // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B4[0x4];                                      // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ImpulseAmount;                                     // 0x01B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CollisionAfterImpulse;                             // 0x01D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D1[0x3];                                      // 0x01D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayBeforeCollisionAfterImpulse;                  // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CollisionOnSpawn;                                  // 0x01D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D9[0x7];                                      // 0x01D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABuildingActor*                         OwningBuildingActor;                               // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          RollSpawnOnDeath;                                  // 0x01E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E9[0x3];                                      // 0x01E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayBetweenSpawnAttempts;                         // 0x01EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          ShouldUseActorRotation;                            // 0x01F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               SpecifiedSpawnRotation;                            // 0x01F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void Damaged(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void Died(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void DynamicallySpawn(bool UsesThresholdChecks);
	void ExecuteUbergraph_BuildingActorCBGASpawnComponent(int32 EntryPoint);
	void OnLoaded_A81F30C841A9FB0CB871A296A47EB549(TSubclassOf<class UObject> Loaded);
	void OnReady_AA2D046F4776EA6FF0EAB28E9459A5EF(class AFortGameStateAthena* GameState, const class UFortPlaylist* Playlist, const struct FGameplayTagContainer& PlaylistContextTags);
	void ReceiveBeginPlay();
	void ThreshHoldCheck(bool* ValidDrop);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BuildingActorCBGASpawnComponent_C">();
	}
	static class UBuildingActorCBGASpawnComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBuildingActorCBGASpawnComponent_C>();
	}
};
static_assert(alignof(UBuildingActorCBGASpawnComponent_C) == 0x000008, "Wrong alignment on UBuildingActorCBGASpawnComponent_C");
static_assert(sizeof(UBuildingActorCBGASpawnComponent_C) == 0x000210, "Wrong size on UBuildingActorCBGASpawnComponent_C");
static_assert(offsetof(UBuildingActorCBGASpawnComponent_C, UberGraphFrame) == 0x0000A0, "Member 'UBuildingActorCBGASpawnComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBuildingActorCBGASpawnComponent_C, Row_GlobalEnabled) == 0x0000A8, "Member 'UBuildingActorCBGASpawnComponent_C::Row_GlobalEnabled' has a wrong offset!");
static_assert(offsetof(UBuildingActorCBGASpawnComponent_C, Row_SubtypeEnabled) == 0x0000D0, "Member 'UBuildingActorCBGASpawnComponent_C::Row_SubtypeEnabled' has a wrong offset!");
static_assert(offsetof(UBuildingActorCBGASpawnComponent_C, Row_DropChance) == 0x0000F8, "Member 'UBuildingActorCBGASpawnComponent_C::Row_DropChance' has a wrong offset!");
static_assert(offsetof(UBuildingActorCBGASpawnComponent_C, Row_MaxSpawnQuantityPerTrigger) == 0x000120, "Member 'UBuildingActorCBGASpawnComponent_C::Row_MaxSpawnQuantityPerTrigger' has a wrong offset!");
static_assert(offsetof(UBuildingActorCBGASpawnComponent_C, CBGA_SoftRef) == 0x000148, "Member 'UBuildingActorCBGASpawnComponent_C::CBGA_SoftRef' has a wrong offset!");
static_assert(offsetof(UBuildingActorCBGASpawnComponent_C, CBGA_ClassRef) == 0x000170, "Member 'UBuildingActorCBGASpawnComponent_C::CBGA_ClassRef' has a wrong offset!");
static_assert(offsetof(UBuildingActorCBGASpawnComponent_C, ThesholdAmounts) == 0x000178, "Member 'UBuildingActorCBGASpawnComponent_C::ThesholdAmounts' has a wrong offset!");
static_assert(offsetof(UBuildingActorCBGASpawnComponent_C, RelativeSpawnOffset) == 0x000188, "Member 'UBuildingActorCBGASpawnComponent_C::RelativeSpawnOffset' has a wrong offset!");
static_assert(offsetof(UBuildingActorCBGASpawnComponent_C, SpawnRotationMin) == 0x0001A0, "Member 'UBuildingActorCBGASpawnComponent_C::SpawnRotationMin' has a wrong offset!");
static_assert(offsetof(UBuildingActorCBGASpawnComponent_C, SpawnRotationMax) == 0x0001A4, "Member 'UBuildingActorCBGASpawnComponent_C::SpawnRotationMax' has a wrong offset!");
static_assert(offsetof(UBuildingActorCBGASpawnComponent_C, SpawnXYForwardOffset) == 0x0001A8, "Member 'UBuildingActorCBGASpawnComponent_C::SpawnXYForwardOffset' has a wrong offset!");
static_assert(offsetof(UBuildingActorCBGASpawnComponent_C, ShouldImpulse) == 0x0001AC, "Member 'UBuildingActorCBGASpawnComponent_C::ShouldImpulse' has a wrong offset!");
static_assert(offsetof(UBuildingActorCBGASpawnComponent_C, DelayBeforeImpulse) == 0x0001B0, "Member 'UBuildingActorCBGASpawnComponent_C::DelayBeforeImpulse' has a wrong offset!");
static_assert(offsetof(UBuildingActorCBGASpawnComponent_C, ImpulseAmount) == 0x0001B8, "Member 'UBuildingActorCBGASpawnComponent_C::ImpulseAmount' has a wrong offset!");
static_assert(offsetof(UBuildingActorCBGASpawnComponent_C, CollisionAfterImpulse) == 0x0001D0, "Member 'UBuildingActorCBGASpawnComponent_C::CollisionAfterImpulse' has a wrong offset!");
static_assert(offsetof(UBuildingActorCBGASpawnComponent_C, DelayBeforeCollisionAfterImpulse) == 0x0001D4, "Member 'UBuildingActorCBGASpawnComponent_C::DelayBeforeCollisionAfterImpulse' has a wrong offset!");
static_assert(offsetof(UBuildingActorCBGASpawnComponent_C, CollisionOnSpawn) == 0x0001D8, "Member 'UBuildingActorCBGASpawnComponent_C::CollisionOnSpawn' has a wrong offset!");
static_assert(offsetof(UBuildingActorCBGASpawnComponent_C, OwningBuildingActor) == 0x0001E0, "Member 'UBuildingActorCBGASpawnComponent_C::OwningBuildingActor' has a wrong offset!");
static_assert(offsetof(UBuildingActorCBGASpawnComponent_C, RollSpawnOnDeath) == 0x0001E8, "Member 'UBuildingActorCBGASpawnComponent_C::RollSpawnOnDeath' has a wrong offset!");
static_assert(offsetof(UBuildingActorCBGASpawnComponent_C, DelayBetweenSpawnAttempts) == 0x0001EC, "Member 'UBuildingActorCBGASpawnComponent_C::DelayBetweenSpawnAttempts' has a wrong offset!");
static_assert(offsetof(UBuildingActorCBGASpawnComponent_C, ShouldUseActorRotation) == 0x0001F0, "Member 'UBuildingActorCBGASpawnComponent_C::ShouldUseActorRotation' has a wrong offset!");
static_assert(offsetof(UBuildingActorCBGASpawnComponent_C, SpecifiedSpawnRotation) == 0x0001F8, "Member 'UBuildingActorCBGASpawnComponent_C::SpecifiedSpawnRotation' has a wrong offset!");

}

