#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SmartObjectsModule

#include "Basic.hpp"

#include "MassEntity_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_0_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "StructUtils_structs.hpp"


namespace SDK
{

// Enum SmartObjectsModule.ESmartObjectSlotState
// NumValues: 0x0006
enum class ESmartObjectSlotState : uint8
{
	Invalid                                  = 0,
	Free                                     = 1,
	Claimed                                  = 2,
	Occupied                                 = 3,
	Disabled                                 = 4,
	ESmartObjectSlotState_MAX                = 5,
};

// Enum SmartObjectsModule.ESmartObjectCollectionRegistrationResult
// NumValues: 0x0005
enum class ESmartObjectCollectionRegistrationResult : uint8
{
	Failed_InvalidCollection                 = 0,
	Failed_AlreadyRegistered                 = 1,
	Failed_NotFromPersistentLevel            = 2,
	Succeeded                                = 3,
	ESmartObjectCollectionRegistrationResult_MAX = 4,
};

// Enum SmartObjectsModule.ESmartObjectUnregistrationMode
// NumValues: 0x0003
enum class ESmartObjectUnregistrationMode : uint8
{
	KeepRuntimeInstanceActive                = 0,
	DestroyRuntimeInstance                   = 1,
	ESmartObjectUnregistrationMode_MAX       = 2,
};

// Enum SmartObjectsModule.ESmartObjectTagMergingPolicy
// NumValues: 0x0003
enum class ESmartObjectTagMergingPolicy : uint8
{
	Combine                                  = 0,
	Override                                 = 1,
	ESmartObjectTagMergingPolicy_MAX         = 2,
};

// Enum SmartObjectsModule.ESmartObjectTagFilteringPolicy
// NumValues: 0x0004
enum class ESmartObjectTagFilteringPolicy : uint8
{
	NoFilter                                 = 0,
	Combine                                  = 1,
	Override                                 = 2,
	ESmartObjectTagFilteringPolicy_MAX       = 3,
};

// ScriptStruct SmartObjectsModule.SmartObjectSlotDefinitionFragment
// 0x0010 (0x0010 - 0x0000)
struct FSmartObjectSlotDefinitionFragment final : public FMassSharedFragment
{
public:
	class USmartObjectDefinition*                 SmartObjectDefinition;                             // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSmartObjectSlotDefinitionFragment) == 0x000008, "Wrong alignment on FSmartObjectSlotDefinitionFragment");
static_assert(sizeof(FSmartObjectSlotDefinitionFragment) == 0x000010, "Wrong size on FSmartObjectSlotDefinitionFragment");
static_assert(offsetof(FSmartObjectSlotDefinitionFragment, SmartObjectDefinition) == 0x000000, "Member 'FSmartObjectSlotDefinitionFragment::SmartObjectDefinition' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectHandle
// 0x0004 (0x0004 - 0x0000)
struct FSmartObjectHandle final
{
public:
	uint32                                        ID;                                                // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FSmartObjectHandle) == 0x000004, "Wrong alignment on FSmartObjectHandle");
static_assert(sizeof(FSmartObjectHandle) == 0x000004, "Wrong size on FSmartObjectHandle");
static_assert(offsetof(FSmartObjectHandle, ID) == 0x000000, "Member 'FSmartObjectHandle::ID' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectCollectionEntry
// 0x00E0 (0x00E0 - 0x0000)
struct FSmartObjectCollectionEntry final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Edit, EditConst, Protected, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        Path;                                              // 0x0020(0x0018)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0040(0x0060)(IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FBox                                   Bounds;                                            // 0x00A0(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FSmartObjectHandle                     Handle;                                            // 0x00D8(0x0004)(Edit, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint32                                        DefinitionIdx;                                     // 0x00DC(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FSmartObjectCollectionEntry) == 0x000010, "Wrong alignment on FSmartObjectCollectionEntry");
static_assert(sizeof(FSmartObjectCollectionEntry) == 0x0000E0, "Wrong size on FSmartObjectCollectionEntry");
static_assert(offsetof(FSmartObjectCollectionEntry, Tags) == 0x000000, "Member 'FSmartObjectCollectionEntry::Tags' has a wrong offset!");
static_assert(offsetof(FSmartObjectCollectionEntry, Path) == 0x000020, "Member 'FSmartObjectCollectionEntry::Path' has a wrong offset!");
static_assert(offsetof(FSmartObjectCollectionEntry, Transform) == 0x000040, "Member 'FSmartObjectCollectionEntry::Transform' has a wrong offset!");
static_assert(offsetof(FSmartObjectCollectionEntry, Bounds) == 0x0000A0, "Member 'FSmartObjectCollectionEntry::Bounds' has a wrong offset!");
static_assert(offsetof(FSmartObjectCollectionEntry, Handle) == 0x0000D8, "Member 'FSmartObjectCollectionEntry::Handle' has a wrong offset!");
static_assert(offsetof(FSmartObjectCollectionEntry, DefinitionIdx) == 0x0000DC, "Member 'FSmartObjectCollectionEntry::DefinitionIdx' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectSpatialEntryData
// 0x0001 (0x0001 - 0x0000)
struct FSmartObjectSpatialEntryData
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSmartObjectSpatialEntryData) == 0x000001, "Wrong alignment on FSmartObjectSpatialEntryData");
static_assert(sizeof(FSmartObjectSpatialEntryData) == 0x000001, "Wrong size on FSmartObjectSpatialEntryData");

// ScriptStruct SmartObjectsModule.SmartObjectComponentInstanceData
// 0x0008 (0x0070 - 0x0068)
struct FSmartObjectComponentInstanceData final : public FActorComponentInstanceData
{
public:
	class USmartObjectDefinition*                 DefinitionAsset;                                   // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FSmartObjectComponentInstanceData) == 0x000008, "Wrong alignment on FSmartObjectComponentInstanceData");
static_assert(sizeof(FSmartObjectComponentInstanceData) == 0x000070, "Wrong size on FSmartObjectComponentInstanceData");
static_assert(offsetof(FSmartObjectComponentInstanceData, DefinitionAsset) == 0x000068, "Member 'FSmartObjectComponentInstanceData::DefinitionAsset' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectSlotDefinition
// 0x00B8 (0x00B8 - 0x0000)
struct FSmartObjectSlotDefinition final
{
public:
	struct FGameplayTagQuery                      UserTagFilter;                                     // 0x0000(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ActivityTags;                                      // 0x0048(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0068(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0080(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FInstancedStruct>               Data;                                              // 0x0098(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class USmartObjectBehaviorDefinition*> BehaviorDefinitions;                               // 0x00A8(0x0010)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSmartObjectSlotDefinition) == 0x000008, "Wrong alignment on FSmartObjectSlotDefinition");
static_assert(sizeof(FSmartObjectSlotDefinition) == 0x0000B8, "Wrong size on FSmartObjectSlotDefinition");
static_assert(offsetof(FSmartObjectSlotDefinition, UserTagFilter) == 0x000000, "Member 'FSmartObjectSlotDefinition::UserTagFilter' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotDefinition, ActivityTags) == 0x000048, "Member 'FSmartObjectSlotDefinition::ActivityTags' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotDefinition, Offset) == 0x000068, "Member 'FSmartObjectSlotDefinition::Offset' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotDefinition, Rotation) == 0x000080, "Member 'FSmartObjectSlotDefinition::Rotation' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotDefinition, Data) == 0x000098, "Member 'FSmartObjectSlotDefinition::Data' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotDefinition, BehaviorDefinitions) == 0x0000A8, "Member 'FSmartObjectSlotDefinition::BehaviorDefinitions' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectSlotIndex
// 0x0004 (0x0004 - 0x0000)
struct FSmartObjectSlotIndex final
{
public:
	int32                                         Index;                                             // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FSmartObjectSlotIndex) == 0x000004, "Wrong alignment on FSmartObjectSlotIndex");
static_assert(sizeof(FSmartObjectSlotIndex) == 0x000004, "Wrong size on FSmartObjectSlotIndex");
static_assert(offsetof(FSmartObjectSlotIndex, Index) == 0x000000, "Member 'FSmartObjectSlotIndex::Index' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectHashGridEntryData
// 0x000B (0x000C - 0x0001)
struct alignas(0x04) FSmartObjectHashGridEntryData final : public FSmartObjectSpatialEntryData
{
public:
	uint8                                         Pad_1[0xB];                                        // 0x0001(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSmartObjectHashGridEntryData) == 0x000004, "Wrong alignment on FSmartObjectHashGridEntryData");
static_assert(sizeof(FSmartObjectHashGridEntryData) == 0x00000C, "Wrong size on FSmartObjectHashGridEntryData");

// ScriptStruct SmartObjectsModule.SmartObjectOctreeEntryData
// 0x000F (0x0010 - 0x0001)
struct alignas(0x08) FSmartObjectOctreeEntryData final : public FSmartObjectSpatialEntryData
{
public:
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSmartObjectOctreeEntryData) == 0x000008, "Wrong alignment on FSmartObjectOctreeEntryData");
static_assert(sizeof(FSmartObjectOctreeEntryData) == 0x000010, "Wrong size on FSmartObjectOctreeEntryData");

// ScriptStruct SmartObjectsModule.SmartObjectSlotHandle
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FSmartObjectSlotHandle final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSmartObjectSlotHandle) == 0x000004, "Wrong alignment on FSmartObjectSlotHandle");
static_assert(sizeof(FSmartObjectSlotHandle) == 0x000008, "Wrong size on FSmartObjectSlotHandle");

// ScriptStruct SmartObjectsModule.SmartObjectUserHandle
// 0x0004 (0x0004 - 0x0000)
struct FSmartObjectUserHandle final
{
public:
	uint32                                        ID;                                                // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FSmartObjectUserHandle) == 0x000004, "Wrong alignment on FSmartObjectUserHandle");
static_assert(sizeof(FSmartObjectUserHandle) == 0x000004, "Wrong size on FSmartObjectUserHandle");
static_assert(offsetof(FSmartObjectUserHandle, ID) == 0x000000, "Member 'FSmartObjectUserHandle::ID' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectClaimHandle
// 0x0010 (0x0010 - 0x0000)
struct FSmartObjectClaimHandle final
{
public:
	struct FSmartObjectHandle                     SmartObjectHandle;                                 // 0x0000(0x0004)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSmartObjectSlotHandle                 SlotHandle;                                        // 0x0004(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSmartObjectUserHandle                 UserHandle;                                        // 0x000C(0x0004)(Transient, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSmartObjectClaimHandle) == 0x000004, "Wrong alignment on FSmartObjectClaimHandle");
static_assert(sizeof(FSmartObjectClaimHandle) == 0x000010, "Wrong size on FSmartObjectClaimHandle");
static_assert(offsetof(FSmartObjectClaimHandle, SmartObjectHandle) == 0x000000, "Member 'FSmartObjectClaimHandle::SmartObjectHandle' has a wrong offset!");
static_assert(offsetof(FSmartObjectClaimHandle, SlotHandle) == 0x000004, "Member 'FSmartObjectClaimHandle::SlotHandle' has a wrong offset!");
static_assert(offsetof(FSmartObjectClaimHandle, UserHandle) == 0x00000C, "Member 'FSmartObjectClaimHandle::UserHandle' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectSlotStateData
// 0x0000 (0x0000 - 0x0000)
#pragma pack(push, 0x1)
struct alignas(0x01) FSmartObjectSlotStateData : public FMassFragment
{
};
#pragma pack(pop)
static_assert(alignof(FSmartObjectSlotStateData) == 0x000001, "Wrong alignment on FSmartObjectSlotStateData");
static_assert(sizeof(FSmartObjectSlotStateData) == 0x000001, "Wrong size on FSmartObjectSlotStateData");

// ScriptStruct SmartObjectsModule.SmartObjectSlotTransform
// 0x0060 (0x0060 - 0x0000)
struct FSmartObjectSlotTransform final : public FSmartObjectSlotStateData
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FSmartObjectSlotTransform) == 0x000010, "Wrong alignment on FSmartObjectSlotTransform");
static_assert(sizeof(FSmartObjectSlotTransform) == 0x000060, "Wrong size on FSmartObjectSlotTransform");
static_assert(offsetof(FSmartObjectSlotTransform, Transform) == 0x000000, "Member 'FSmartObjectSlotTransform::Transform' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectSlotClaimState
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FSmartObjectSlotClaimState final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSmartObjectSlotClaimState) == 0x000008, "Wrong alignment on FSmartObjectSlotClaimState");
static_assert(sizeof(FSmartObjectSlotClaimState) == 0x000020, "Wrong size on FSmartObjectSlotClaimState");

// ScriptStruct SmartObjectsModule.SmartObjectRuntime
// 0x00D0 (0x00D0 - 0x0000)
struct alignas(0x10) FSmartObjectRuntime final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class USmartObjectDefinition*                 Definition;                                        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_18[0xA0];                                      // 0x0018(0x00A0)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInstancedStruct                       SpatialEntryData;                                  // 0x00B8(0x0010)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSmartObjectRuntime) == 0x000010, "Wrong alignment on FSmartObjectRuntime");
static_assert(sizeof(FSmartObjectRuntime) == 0x0000D0, "Wrong size on FSmartObjectRuntime");
static_assert(offsetof(FSmartObjectRuntime, Definition) == 0x000010, "Member 'FSmartObjectRuntime::Definition' has a wrong offset!");
static_assert(offsetof(FSmartObjectRuntime, SpatialEntryData) == 0x0000B8, "Member 'FSmartObjectRuntime::SpatialEntryData' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectSlotView
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FSmartObjectSlotView final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSmartObjectSlotView) == 0x000008, "Wrong alignment on FSmartObjectSlotView");
static_assert(sizeof(FSmartObjectSlotView) == 0x000020, "Wrong size on FSmartObjectSlotView");

// ScriptStruct SmartObjectsModule.SmartObjectRequestFilter
// 0x00B0 (0x00B0 - 0x0000)
struct alignas(0x10) FSmartObjectRequestFilter final
{
public:
	struct FGameplayTagContainer                  UserTags;                                          // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      ActivityRequirements;                              // 0x0020(0x0048)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSubclassOf<class USmartObjectBehaviorDefinition> BehaviorDefinitionClass;                           // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_70[0x40];                                      // 0x0070(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSmartObjectRequestFilter) == 0x000010, "Wrong alignment on FSmartObjectRequestFilter");
static_assert(sizeof(FSmartObjectRequestFilter) == 0x0000B0, "Wrong size on FSmartObjectRequestFilter");
static_assert(offsetof(FSmartObjectRequestFilter, UserTags) == 0x000000, "Member 'FSmartObjectRequestFilter::UserTags' has a wrong offset!");
static_assert(offsetof(FSmartObjectRequestFilter, ActivityRequirements) == 0x000020, "Member 'FSmartObjectRequestFilter::ActivityRequirements' has a wrong offset!");
static_assert(offsetof(FSmartObjectRequestFilter, BehaviorDefinitionClass) == 0x000068, "Member 'FSmartObjectRequestFilter::BehaviorDefinitionClass' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectRequest
// 0x00F0 (0x00F0 - 0x0000)
struct FSmartObjectRequest final
{
public:
	struct FBox                                   QueryBox;                                          // 0x0000(0x0038)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSmartObjectRequestFilter              Filter;                                            // 0x0040(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSmartObjectRequest) == 0x000010, "Wrong alignment on FSmartObjectRequest");
static_assert(sizeof(FSmartObjectRequest) == 0x0000F0, "Wrong size on FSmartObjectRequest");
static_assert(offsetof(FSmartObjectRequest, QueryBox) == 0x000000, "Member 'FSmartObjectRequest::QueryBox' has a wrong offset!");
static_assert(offsetof(FSmartObjectRequest, Filter) == 0x000040, "Member 'FSmartObjectRequest::Filter' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectRequestResult
// 0x000C (0x000C - 0x0000)
struct FSmartObjectRequestResult final
{
public:
	struct FSmartObjectHandle                     SmartObjectHandle;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSmartObjectSlotHandle                 SlotHandle;                                        // 0x0004(0x0008)(Edit, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSmartObjectRequestResult) == 0x000004, "Wrong alignment on FSmartObjectRequestResult");
static_assert(sizeof(FSmartObjectRequestResult) == 0x00000C, "Wrong size on FSmartObjectRequestResult");
static_assert(offsetof(FSmartObjectRequestResult, SmartObjectHandle) == 0x000000, "Member 'FSmartObjectRequestResult::SmartObjectHandle' has a wrong offset!");
static_assert(offsetof(FSmartObjectRequestResult, SlotHandle) == 0x000004, "Member 'FSmartObjectRequestResult::SlotHandle' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectSlotDefinitionData
// 0x0000 (0x0000 - 0x0000)
#pragma pack(push, 0x1)
struct alignas(0x01) FSmartObjectSlotDefinitionData
{
};
#pragma pack(pop)
static_assert(alignof(FSmartObjectSlotDefinitionData) == 0x000001, "Wrong alignment on FSmartObjectSlotDefinitionData");
static_assert(sizeof(FSmartObjectSlotDefinitionData) == 0x000001, "Wrong size on FSmartObjectSlotDefinitionData");

}

