#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RiderWidget

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function RiderWidget.RiderWidget_C.UpdateOvershieldBarVisibility
// 0x0001 (0x0001 - 0x0000)
struct RiderWidget_C_UpdateOvershieldBarVisibility final
{
public:
	bool                                          bNewVisible;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RiderWidget_C_UpdateOvershieldBarVisibility) == 0x000001, "Wrong alignment on RiderWidget_C_UpdateOvershieldBarVisibility");
static_assert(sizeof(RiderWidget_C_UpdateOvershieldBarVisibility) == 0x000001, "Wrong size on RiderWidget_C_UpdateOvershieldBarVisibility");
static_assert(offsetof(RiderWidget_C_UpdateOvershieldBarVisibility, bNewVisible) == 0x000000, "Member 'RiderWidget_C_UpdateOvershieldBarVisibility::bNewVisible' has a wrong offset!");

// Function RiderWidget.RiderWidget_C.UpdateHealthDelta
// 0x0020 (0x0020 - 0x0000)
struct RiderWidget_C_UpdateHealthDelta final
{
public:
	float                                         CallFunc_GetServerWorldTimeSeconds_ReturnValue;    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_GetScalarParameterValue_ReturnValue;   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpEaseInOut_ReturnValue;             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RiderWidget_C_UpdateHealthDelta) == 0x000008, "Wrong alignment on RiderWidget_C_UpdateHealthDelta");
static_assert(sizeof(RiderWidget_C_UpdateHealthDelta) == 0x000020, "Wrong size on RiderWidget_C_UpdateHealthDelta");
static_assert(offsetof(RiderWidget_C_UpdateHealthDelta, CallFunc_GetServerWorldTimeSeconds_ReturnValue) == 0x000000, "Member 'RiderWidget_C_UpdateHealthDelta::CallFunc_GetServerWorldTimeSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_UpdateHealthDelta, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000004, "Member 'RiderWidget_C_UpdateHealthDelta::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_UpdateHealthDelta, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000008, "Member 'RiderWidget_C_UpdateHealthDelta::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_UpdateHealthDelta, CallFunc_K2_GetScalarParameterValue_ReturnValue) == 0x000010, "Member 'RiderWidget_C_UpdateHealthDelta::CallFunc_K2_GetScalarParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_UpdateHealthDelta, CallFunc_FInterpEaseInOut_ReturnValue) == 0x000014, "Member 'RiderWidget_C_UpdateHealthDelta::CallFunc_FInterpEaseInOut_ReturnValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_UpdateHealthDelta, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000018, "Member 'RiderWidget_C_UpdateHealthDelta::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function RiderWidget.RiderWidget_C.UpdateHealth
// 0x0098 (0x0098 - 0x0000)
struct RiderWidget_C_UpdateHealth final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0008(0x0050)(HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0060(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0070(0x0018)()
	float                                         CallFunc_GetMaxHealth_ReturnValue;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_SetProgressBar_DeltaTimerHandle;          // 0x0090(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RiderWidget_C_UpdateHealth) == 0x000008, "Wrong alignment on RiderWidget_C_UpdateHealth");
static_assert(sizeof(RiderWidget_C_UpdateHealth) == 0x000098, "Wrong size on RiderWidget_C_UpdateHealth");
static_assert(offsetof(RiderWidget_C_UpdateHealth, Value) == 0x000000, "Member 'RiderWidget_C_UpdateHealth::Value' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_UpdateHealth, K2Node_MakeStruct_FormatArgumentData) == 0x000008, "Member 'RiderWidget_C_UpdateHealth::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_UpdateHealth, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'RiderWidget_C_UpdateHealth::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_UpdateHealth, K2Node_MakeArray_Array) == 0x000060, "Member 'RiderWidget_C_UpdateHealth::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_UpdateHealth, CallFunc_Format_ReturnValue) == 0x000070, "Member 'RiderWidget_C_UpdateHealth::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_UpdateHealth, CallFunc_GetMaxHealth_ReturnValue) == 0x000088, "Member 'RiderWidget_C_UpdateHealth::CallFunc_GetMaxHealth_ReturnValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_UpdateHealth, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00008C, "Member 'RiderWidget_C_UpdateHealth::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_UpdateHealth, CallFunc_SetProgressBar_DeltaTimerHandle) == 0x000090, "Member 'RiderWidget_C_UpdateHealth::CallFunc_SetProgressBar_DeltaTimerHandle' has a wrong offset!");

// Function RiderWidget.RiderWidget_C.UpdateEnergy
// 0x0010 (0x0010 - 0x0000)
struct RiderWidget_C_UpdateEnergy final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_SetProgressBar_DeltaTimerHandle;          // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RiderWidget_C_UpdateEnergy) == 0x000008, "Wrong alignment on RiderWidget_C_UpdateEnergy");
static_assert(sizeof(RiderWidget_C_UpdateEnergy) == 0x000010, "Wrong size on RiderWidget_C_UpdateEnergy");
static_assert(offsetof(RiderWidget_C_UpdateEnergy, Value) == 0x000000, "Member 'RiderWidget_C_UpdateEnergy::Value' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_UpdateEnergy, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000004, "Member 'RiderWidget_C_UpdateEnergy::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_UpdateEnergy, CallFunc_SetProgressBar_DeltaTimerHandle) == 0x000008, "Member 'RiderWidget_C_UpdateEnergy::CallFunc_SetProgressBar_DeltaTimerHandle' has a wrong offset!");

// Function RiderWidget.RiderWidget_C.TryPlayingLowState
// 0x0018 (0x0018 - 0x0000)
struct RiderWidget_C_TryPlayingLowState final
{
public:
	class UWidgetAnimation*                       InAnimation;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RiderWidget_C_TryPlayingLowState) == 0x000008, "Wrong alignment on RiderWidget_C_TryPlayingLowState");
static_assert(sizeof(RiderWidget_C_TryPlayingLowState) == 0x000018, "Wrong size on RiderWidget_C_TryPlayingLowState");
static_assert(offsetof(RiderWidget_C_TryPlayingLowState, InAnimation) == 0x000000, "Member 'RiderWidget_C_TryPlayingLowState::InAnimation' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_TryPlayingLowState, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'RiderWidget_C_TryPlayingLowState::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_TryPlayingLowState, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000010, "Member 'RiderWidget_C_TryPlayingLowState::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");

// Function RiderWidget.RiderWidget_C.SetProgressBar
// 0x0078 (0x0078 - 0x0000)
struct RiderWidget_C_SetProgressBar final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 TargetFillBar;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 DeltaBar_0;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PreviousValue;                                     // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Threshold;                                         // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 FunctionName;                                      // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FTimerHandle                           TimerHandle;                                       // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaDecayDelay;                                   // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           DeltaTimerHandle;                                  // 0x0040(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_Set_Delta_TimerHandleRef;                 // 0x0048(0x0008)(NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue;              // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RiderWidget_C_SetProgressBar) == 0x000008, "Wrong alignment on RiderWidget_C_SetProgressBar");
static_assert(sizeof(RiderWidget_C_SetProgressBar) == 0x000078, "Wrong size on RiderWidget_C_SetProgressBar");
static_assert(offsetof(RiderWidget_C_SetProgressBar, Value) == 0x000000, "Member 'RiderWidget_C_SetProgressBar::Value' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_SetProgressBar, TargetFillBar) == 0x000008, "Member 'RiderWidget_C_SetProgressBar::TargetFillBar' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_SetProgressBar, DeltaBar_0) == 0x000010, "Member 'RiderWidget_C_SetProgressBar::DeltaBar_0' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_SetProgressBar, PreviousValue) == 0x000018, "Member 'RiderWidget_C_SetProgressBar::PreviousValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_SetProgressBar, Threshold) == 0x00001C, "Member 'RiderWidget_C_SetProgressBar::Threshold' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_SetProgressBar, FunctionName) == 0x000020, "Member 'RiderWidget_C_SetProgressBar::FunctionName' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_SetProgressBar, TimerHandle) == 0x000030, "Member 'RiderWidget_C_SetProgressBar::TimerHandle' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_SetProgressBar, DeltaDecayDelay) == 0x000038, "Member 'RiderWidget_C_SetProgressBar::DeltaDecayDelay' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_SetProgressBar, DeltaTimerHandle) == 0x000040, "Member 'RiderWidget_C_SetProgressBar::DeltaTimerHandle' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_SetProgressBar, CallFunc_Set_Delta_TimerHandleRef) == 0x000048, "Member 'RiderWidget_C_SetProgressBar::CallFunc_Set_Delta_TimerHandleRef' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_SetProgressBar, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000050, "Member 'RiderWidget_C_SetProgressBar::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_SetProgressBar, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x000058, "Member 'RiderWidget_C_SetProgressBar::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_SetProgressBar, CallFunc_LinearColorLerp_ReturnValue) == 0x000060, "Member 'RiderWidget_C_SetProgressBar::CallFunc_LinearColorLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_SetProgressBar, CallFunc_Lerp_ReturnValue) == 0x000070, "Member 'RiderWidget_C_SetProgressBar::CallFunc_Lerp_ReturnValue' has a wrong offset!");

// Function RiderWidget.RiderWidget_C.SetHealthValue
// 0x0048 (0x0048 - 0x0000)
struct RiderWidget_C_SetHealthValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0008(0x0018)()
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_1;             // 0x0028(0x0018)()
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RiderWidget_C_SetHealthValue) == 0x000008, "Wrong alignment on RiderWidget_C_SetHealthValue");
static_assert(sizeof(RiderWidget_C_SetHealthValue) == 0x000048, "Wrong size on RiderWidget_C_SetHealthValue");
static_assert(offsetof(RiderWidget_C_SetHealthValue, Value) == 0x000000, "Member 'RiderWidget_C_SetHealthValue::Value' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_SetHealthValue, CallFunc_Conv_IntToText_ReturnValue) == 0x000008, "Member 'RiderWidget_C_SetHealthValue::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_SetHealthValue, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000020, "Member 'RiderWidget_C_SetHealthValue::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_SetHealthValue, CallFunc_Round_ReturnValue) == 0x000024, "Member 'RiderWidget_C_SetHealthValue::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_SetHealthValue, CallFunc_Conv_IntToText_ReturnValue_1) == 0x000028, "Member 'RiderWidget_C_SetHealthValue::CallFunc_Conv_IntToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_SetHealthValue, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000040, "Member 'RiderWidget_C_SetHealthValue::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_SetHealthValue, CallFunc_BooleanAND_ReturnValue) == 0x000041, "Member 'RiderWidget_C_SetHealthValue::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function RiderWidget.RiderWidget_C.Set Delta
// 0x0068 (0x0068 - 0x0000)
struct RiderWidget_C_Set_Delta final
{
public:
	class UImage*                                 Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentValue_0;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PreviousValue;                                     // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Threshold;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FunctionName;                                      // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FTimerHandle                           TimerHandle;                                       // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaDecayDelay;                                   // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimerHandleRef;                                    // 0x0038(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetServerWorldTimeSeconds_ReturnValue;    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0048(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue;       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue_1;                // 0x0058(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RiderWidget_C_Set_Delta) == 0x000008, "Wrong alignment on RiderWidget_C_Set_Delta");
static_assert(sizeof(RiderWidget_C_Set_Delta) == 0x000068, "Wrong size on RiderWidget_C_Set_Delta");
static_assert(offsetof(RiderWidget_C_Set_Delta, Target) == 0x000000, "Member 'RiderWidget_C_Set_Delta::Target' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_Set_Delta, CurrentValue_0) == 0x000008, "Member 'RiderWidget_C_Set_Delta::CurrentValue_0' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_Set_Delta, PreviousValue) == 0x00000C, "Member 'RiderWidget_C_Set_Delta::PreviousValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_Set_Delta, Threshold) == 0x000010, "Member 'RiderWidget_C_Set_Delta::Threshold' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_Set_Delta, FunctionName) == 0x000018, "Member 'RiderWidget_C_Set_Delta::FunctionName' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_Set_Delta, TimerHandle) == 0x000028, "Member 'RiderWidget_C_Set_Delta::TimerHandle' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_Set_Delta, DeltaDecayDelay) == 0x000030, "Member 'RiderWidget_C_Set_Delta::DeltaDecayDelay' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_Set_Delta, TimerHandleRef) == 0x000038, "Member 'RiderWidget_C_Set_Delta::TimerHandleRef' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_Set_Delta, CallFunc_GetServerWorldTimeSeconds_ReturnValue) == 0x000040, "Member 'RiderWidget_C_Set_Delta::CallFunc_GetServerWorldTimeSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_Set_Delta, CallFunc_K2_SetTimer_ReturnValue) == 0x000048, "Member 'RiderWidget_C_Set_Delta::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_Set_Delta, CallFunc_K2_IsTimerActiveHandle_ReturnValue) == 0x000050, "Member 'RiderWidget_C_Set_Delta::CallFunc_K2_IsTimerActiveHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_Set_Delta, CallFunc_K2_SetTimer_ReturnValue_1) == 0x000058, "Member 'RiderWidget_C_Set_Delta::CallFunc_K2_SetTimer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_Set_Delta, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000060, "Member 'RiderWidget_C_Set_Delta::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_Set_Delta, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000064, "Member 'RiderWidget_C_Set_Delta::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function RiderWidget.RiderWidget_C.RiderUINewStats_Event_0
// 0x00F0 (0x00F0 - 0x0000)
struct RiderWidget_C_RiderUINewStats_Event_0 final
{
public:
	class FText                                   Name_0;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Icon;                                              // 0x0020(0x00C0)(BlueprintVisible, BlueprintReadOnly, Parm)
	class AActor*                                 RidableActor;                                      // 0x00E0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RiderWidget_C_RiderUINewStats_Event_0) == 0x000010, "Wrong alignment on RiderWidget_C_RiderUINewStats_Event_0");
static_assert(sizeof(RiderWidget_C_RiderUINewStats_Event_0) == 0x0000F0, "Wrong size on RiderWidget_C_RiderUINewStats_Event_0");
static_assert(offsetof(RiderWidget_C_RiderUINewStats_Event_0, Name_0) == 0x000000, "Member 'RiderWidget_C_RiderUINewStats_Event_0::Name_0' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_RiderUINewStats_Event_0, Icon) == 0x000020, "Member 'RiderWidget_C_RiderUINewStats_Event_0::Icon' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_RiderUINewStats_Event_0, RidableActor) == 0x0000E0, "Member 'RiderWidget_C_RiderUINewStats_Event_0::RidableActor' has a wrong offset!");

// Function RiderWidget.RiderWidget_C.RiderUIHealthChanged
// 0x0004 (0x0004 - 0x0000)
struct RiderWidget_C_RiderUIHealthChanged final
{
public:
	float                                         Health;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RiderWidget_C_RiderUIHealthChanged) == 0x000004, "Wrong alignment on RiderWidget_C_RiderUIHealthChanged");
static_assert(sizeof(RiderWidget_C_RiderUIHealthChanged) == 0x000004, "Wrong size on RiderWidget_C_RiderUIHealthChanged");
static_assert(offsetof(RiderWidget_C_RiderUIHealthChanged, Health) == 0x000000, "Member 'RiderWidget_C_RiderUIHealthChanged::Health' has a wrong offset!");

// Function RiderWidget.RiderWidget_C.RiderUIEnergyChanged
// 0x0004 (0x0004 - 0x0000)
struct RiderWidget_C_RiderUIEnergyChanged final
{
public:
	float                                         Energy;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RiderWidget_C_RiderUIEnergyChanged) == 0x000004, "Wrong alignment on RiderWidget_C_RiderUIEnergyChanged");
static_assert(sizeof(RiderWidget_C_RiderUIEnergyChanged) == 0x000004, "Wrong size on RiderWidget_C_RiderUIEnergyChanged");
static_assert(offsetof(RiderWidget_C_RiderUIEnergyChanged, Energy) == 0x000000, "Member 'RiderWidget_C_RiderUIEnergyChanged::Energy' has a wrong offset!");

// Function RiderWidget.RiderWidget_C.RiderUIEnd_Event_0
// 0x0008 (0x0008 - 0x0000)
struct RiderWidget_C_RiderUIEnd_Event_0 final
{
public:
	class AActor*                                 RidableActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RiderWidget_C_RiderUIEnd_Event_0) == 0x000008, "Wrong alignment on RiderWidget_C_RiderUIEnd_Event_0");
static_assert(sizeof(RiderWidget_C_RiderUIEnd_Event_0) == 0x000008, "Wrong size on RiderWidget_C_RiderUIEnd_Event_0");
static_assert(offsetof(RiderWidget_C_RiderUIEnd_Event_0, RidableActor) == 0x000000, "Member 'RiderWidget_C_RiderUIEnd_Event_0::RidableActor' has a wrong offset!");

// Function RiderWidget.RiderWidget_C.OnOvershieldVisibilityChanged
// 0x0028 (0x0028 - 0x0000)
struct RiderWidget_C_OnOvershieldVisibilityChanged final
{
public:
	class UFortHUDContext*                        CallFunc_GetContext_ReturnValue;                   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerStateZone*                   CallFunc_GetPlayerStateZone_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldOvershieldBarBeVisible_ReturnValue; // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RiderWidget_C_OnOvershieldVisibilityChanged) == 0x000008, "Wrong alignment on RiderWidget_C_OnOvershieldVisibilityChanged");
static_assert(sizeof(RiderWidget_C_OnOvershieldVisibilityChanged) == 0x000028, "Wrong size on RiderWidget_C_OnOvershieldVisibilityChanged");
static_assert(offsetof(RiderWidget_C_OnOvershieldVisibilityChanged, CallFunc_GetContext_ReturnValue) == 0x000000, "Member 'RiderWidget_C_OnOvershieldVisibilityChanged::CallFunc_GetContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_OnOvershieldVisibilityChanged, CallFunc_GetPlayerStateZone_ReturnValue) == 0x000008, "Member 'RiderWidget_C_OnOvershieldVisibilityChanged::CallFunc_GetPlayerStateZone_ReturnValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_OnOvershieldVisibilityChanged, CallFunc_ShouldOvershieldBarBeVisible_ReturnValue) == 0x000010, "Member 'RiderWidget_C_OnOvershieldVisibilityChanged::CallFunc_ShouldOvershieldBarBeVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_OnOvershieldVisibilityChanged, CallFunc_SelectFloat_ReturnValue) == 0x000014, "Member 'RiderWidget_C_OnOvershieldVisibilityChanged::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_OnOvershieldVisibilityChanged, CallFunc_MakeVector2D_ReturnValue) == 0x000018, "Member 'RiderWidget_C_OnOvershieldVisibilityChanged::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function RiderWidget.RiderWidget_C.ExecuteUbergraph_RiderWidget
// 0x0220 (0x0220 - 0x0000)
struct RiderWidget_C_ExecuteUbergraph_RiderWidget final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetOwningPlayerPawn_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerRiderComponent_C*                CallFunc_GetComponentByClass_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_CustomEvent_Name;                           // 0x0028(0x0018)()
	struct FSlateBrush                            K2Node_CustomEvent_Icon;                           // 0x0040(0x00C0)()
	class AActor*                                 K2Node_CustomEvent_RidableActor_1;                 // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPawn*                              K2Node_DynamicCast_AsFort_Pawn;                    // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCreatureBaseRidableComponent_C*        CallFunc_GetComponentByClass_ReturnValue_1;        // 0x0118(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetMaxHealth_ReturnValue;                 // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetHealth_ReturnValue;                    // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FText Name, const struct FSlateBrush& Icon, class AActor* RidableActor)> K2Node_CreateDelegate_OutputDelegate;              // 0x012C(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x013C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13D[0x3];                                      // 0x013D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_RidableActor;                   // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14D[0x3];                                      // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AActor* RidableActor)>   K2Node_CreateDelegate_OutputDelegate_1;            // 0x0150(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x015C(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FText Name, const struct FSlateBrush& Icon, class AActor* RidableActor)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x0168(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AActor* RidableActor)>   K2Node_CreateDelegate_OutputDelegate_4;            // 0x0174(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetOwningPlayerPawn_ReturnValue_1;        // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerRiderComponent_C*                CallFunc_GetComponentByClass_ReturnValue_2;        // 0x0190(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Energy;                         // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(float Energy)>                 K2Node_CreateDelegate_OutputDelegate_5;            // 0x019C(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(float Energy)>                 K2Node_CreateDelegate_OutputDelegate_6;            // 0x01A8(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_health;                         // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(float Health)>                 K2Node_CreateDelegate_OutputDelegate_7;            // 0x01B8(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(float Health)>                 K2Node_CreateDelegate_OutputDelegate_8;            // 0x01C4(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFortHUDContext*                        CallFunc_GetContext_ReturnValue;                   // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bNewVisible;                    // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D9[0x7];                                      // 0x01D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerStateZone*                   CallFunc_GetPlayerStateZone_ReturnValue;           // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUsingTouch_ReturnValue;                 // 0x01E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EA[0x2];                                      // 0x01EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x01EC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1FC[0x4];                                      // 0x01FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHorizontalBoxSlot*                     CallFunc_SlotAsHorizontalBoxSlot_ReturnValue;      // 0x0200(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortHUDContext*                        CallFunc_GetContext_ReturnValue_1;                 // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool bNewVisible)>             K2Node_CreateDelegate_OutputDelegate_9;            // 0x0210(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RiderWidget_C_ExecuteUbergraph_RiderWidget) == 0x000010, "Wrong alignment on RiderWidget_C_ExecuteUbergraph_RiderWidget");
static_assert(sizeof(RiderWidget_C_ExecuteUbergraph_RiderWidget) == 0x000220, "Wrong size on RiderWidget_C_ExecuteUbergraph_RiderWidget");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, EntryPoint) == 0x000000, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::EntryPoint' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, CallFunc_GetOwningPlayerPawn_ReturnValue) == 0x000008, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::CallFunc_GetOwningPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, CallFunc_IsValid_ReturnValue_1) == 0x000011, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, CallFunc_GetComponentByClass_ReturnValue) == 0x000018, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, CallFunc_IsValid_ReturnValue_2) == 0x000020, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, K2Node_CustomEvent_Name) == 0x000028, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::K2Node_CustomEvent_Name' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, K2Node_CustomEvent_Icon) == 0x000040, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::K2Node_CustomEvent_Icon' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, K2Node_CustomEvent_RidableActor_1) == 0x000100, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::K2Node_CustomEvent_RidableActor_1' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, K2Node_DynamicCast_AsFort_Pawn) == 0x000108, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::K2Node_DynamicCast_AsFort_Pawn' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, K2Node_DynamicCast_bSuccess) == 0x000110, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, CallFunc_GetComponentByClass_ReturnValue_1) == 0x000118, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::CallFunc_GetComponentByClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, CallFunc_IsValid_ReturnValue_3) == 0x000120, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, CallFunc_GetMaxHealth_ReturnValue) == 0x000124, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::CallFunc_GetMaxHealth_ReturnValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, CallFunc_GetHealth_ReturnValue) == 0x000128, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::CallFunc_GetHealth_ReturnValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, K2Node_CreateDelegate_OutputDelegate) == 0x00012C, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000138, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00013C, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, K2Node_CustomEvent_RidableActor) == 0x000140, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::K2Node_CustomEvent_RidableActor' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, CallFunc_SelectFloat_ReturnValue) == 0x000148, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x00014C, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, K2Node_CreateDelegate_OutputDelegate_1) == 0x000150, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, K2Node_CreateDelegate_OutputDelegate_2) == 0x00015C, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, K2Node_CreateDelegate_OutputDelegate_3) == 0x000168, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, K2Node_CreateDelegate_OutputDelegate_4) == 0x000174, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, CallFunc_GetOwningPlayerPawn_ReturnValue_1) == 0x000180, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::CallFunc_GetOwningPlayerPawn_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, CallFunc_IsValid_ReturnValue_4) == 0x000188, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, CallFunc_GetComponentByClass_ReturnValue_2) == 0x000190, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::CallFunc_GetComponentByClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, K2Node_CustomEvent_Energy) == 0x000198, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::K2Node_CustomEvent_Energy' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, K2Node_CreateDelegate_OutputDelegate_5) == 0x00019C, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, K2Node_CreateDelegate_OutputDelegate_6) == 0x0001A8, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, K2Node_CustomEvent_health) == 0x0001B4, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::K2Node_CustomEvent_health' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, K2Node_CreateDelegate_OutputDelegate_7) == 0x0001B8, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::K2Node_CreateDelegate_OutputDelegate_7' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, K2Node_CreateDelegate_OutputDelegate_8) == 0x0001C4, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::K2Node_CreateDelegate_OutputDelegate_8' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, CallFunc_GetContext_ReturnValue) == 0x0001D0, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::CallFunc_GetContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, K2Node_CustomEvent_bNewVisible) == 0x0001D8, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::K2Node_CustomEvent_bNewVisible' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, CallFunc_GetPlayerStateZone_ReturnValue) == 0x0001E0, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::CallFunc_GetPlayerStateZone_ReturnValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, CallFunc_IsValid_ReturnValue_5) == 0x0001E8, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, CallFunc_IsUsingTouch_ReturnValue) == 0x0001E9, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::CallFunc_IsUsingTouch_ReturnValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, K2Node_MakeStruct_Margin) == 0x0001EC, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, CallFunc_SlotAsHorizontalBoxSlot_ReturnValue) == 0x000200, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::CallFunc_SlotAsHorizontalBoxSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, CallFunc_GetContext_ReturnValue_1) == 0x000208, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::CallFunc_GetContext_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ExecuteUbergraph_RiderWidget, K2Node_CreateDelegate_OutputDelegate_9) == 0x000210, "Member 'RiderWidget_C_ExecuteUbergraph_RiderWidget::K2Node_CreateDelegate_OutputDelegate_9' has a wrong offset!");

// Function RiderWidget.RiderWidget_C.EmptyEnergyDelta
// 0x0008 (0x0008 - 0x0000)
struct RiderWidget_C_EmptyEnergyDelta final
{
public:
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RiderWidget_C_EmptyEnergyDelta) == 0x000008, "Wrong alignment on RiderWidget_C_EmptyEnergyDelta");
static_assert(sizeof(RiderWidget_C_EmptyEnergyDelta) == 0x000008, "Wrong size on RiderWidget_C_EmptyEnergyDelta");
static_assert(offsetof(RiderWidget_C_EmptyEnergyDelta, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000000, "Member 'RiderWidget_C_EmptyEnergyDelta::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function RiderWidget.RiderWidget_C.ClearOldBindings
// 0x0034 (0x0034 - 0x0000)
struct RiderWidget_C_ClearOldBindings final
{
public:
	TDelegate<void(float Health)>                 K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(float Energy)>                 K2Node_CreateDelegate_OutputDelegate_1;            // 0x0010(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FText Name, const struct FSlateBrush& Icon, class AActor* RidableActor)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x001C(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AActor* RidableActor)>   K2Node_CreateDelegate_OutputDelegate_3;            // 0x0028(0x000C)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RiderWidget_C_ClearOldBindings) == 0x000004, "Wrong alignment on RiderWidget_C_ClearOldBindings");
static_assert(sizeof(RiderWidget_C_ClearOldBindings) == 0x000034, "Wrong size on RiderWidget_C_ClearOldBindings");
static_assert(offsetof(RiderWidget_C_ClearOldBindings, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'RiderWidget_C_ClearOldBindings::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ClearOldBindings, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'RiderWidget_C_ClearOldBindings::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ClearOldBindings, K2Node_CreateDelegate_OutputDelegate_1) == 0x000010, "Member 'RiderWidget_C_ClearOldBindings::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ClearOldBindings, K2Node_CreateDelegate_OutputDelegate_2) == 0x00001C, "Member 'RiderWidget_C_ClearOldBindings::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(RiderWidget_C_ClearOldBindings, K2Node_CreateDelegate_OutputDelegate_3) == 0x000028, "Member 'RiderWidget_C_ClearOldBindings::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");

}

