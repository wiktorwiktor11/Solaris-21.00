#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ButterCakeRuntime

#include "Basic.hpp"

#include "ControlRig_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum ButterCakeRuntime.EFortButterCakeFootPhase
// NumValues: 0x0010
enum class EFortButterCakeFootPhase : uint8
{
	RightPlantA                              = 0,
	RightPlantB                              = 1,
	RightPlantC                              = 2,
	LeftPlantA                               = 3,
	LeftPlantB                               = 4,
	LeftPlantC                               = 5,
	HostileRightPass                         = 6,
	HostileRightPlant                        = 7,
	HostileLeftPass                          = 8,
	HostileLeftPlant                         = 9,
	BothPlant                                = 10,
	BothPlantA                               = 11,
	BothPlantB                               = 12,
	BothPlantC                               = 13,
	BothPlantD                               = 14,
	EFortButterCakeFootPhase_MAX             = 15,
};

// ScriptStruct ButterCakeRuntime.RigUnit_ButterCakeBaseMutable
// 0x0000 (0x0080 - 0x0080)
struct FRigUnit_ButterCakeBaseMutable : public FRigUnitMutable
{
};
static_assert(alignof(FRigUnit_ButterCakeBaseMutable) == 0x000010, "Wrong alignment on FRigUnit_ButterCakeBaseMutable");
static_assert(sizeof(FRigUnit_ButterCakeBaseMutable) == 0x000080, "Wrong size on FRigUnit_ButterCakeBaseMutable");

// ScriptStruct ButterCakeRuntime.RigUnit_UpdateSomeGroundTraces
// 0x0000 (0x0080 - 0x0080)
struct FRigUnit_UpdateSomeGroundTraces final : public FRigUnit_ButterCakeBaseMutable
{
};
static_assert(alignof(FRigUnit_UpdateSomeGroundTraces) == 0x000010, "Wrong alignment on FRigUnit_UpdateSomeGroundTraces");
static_assert(sizeof(FRigUnit_UpdateSomeGroundTraces) == 0x000080, "Wrong size on FRigUnit_UpdateSomeGroundTraces");

// ScriptStruct ButterCakeRuntime.RigUnit_ButterCakeBase
// 0x0000 (0x0008 - 0x0008)
struct FRigUnit_ButterCakeBase : public FRigUnit
{
};
static_assert(alignof(FRigUnit_ButterCakeBase) == 0x000008, "Wrong alignment on FRigUnit_ButterCakeBase");
static_assert(sizeof(FRigUnit_ButterCakeBase) == 0x000008, "Wrong size on FRigUnit_ButterCakeBase");

// ScriptStruct ButterCakeRuntime.RigUnit_GetGroundHitAtIndex
// 0x0038 (0x0040 - 0x0008)
struct FRigUnit_GetGroundHitAtIndex final : public FRigUnit_ButterCakeBase
{
public:
	int32                                         Index;                                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_GetGroundHitAtIndex) == 0x000008, "Wrong alignment on FRigUnit_GetGroundHitAtIndex");
static_assert(sizeof(FRigUnit_GetGroundHitAtIndex) == 0x000040, "Wrong size on FRigUnit_GetGroundHitAtIndex");
static_assert(offsetof(FRigUnit_GetGroundHitAtIndex, Index) == 0x000008, "Member 'FRigUnit_GetGroundHitAtIndex::Index' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetGroundHitAtIndex, Location) == 0x000010, "Member 'FRigUnit_GetGroundHitAtIndex::Location' has a wrong offset!");
static_assert(offsetof(FRigUnit_GetGroundHitAtIndex, Normal) == 0x000028, "Member 'FRigUnit_GetGroundHitAtIndex::Normal' has a wrong offset!");

// ScriptStruct ButterCakeRuntime.RigUnit_BoneGroundTrace
// 0x0048 (0x0050 - 0x0008)
struct FRigUnit_BoneGroundTrace final : public FRigUnit_ButterCakeBase
{
public:
	struct FRigElementKey                         bone;                                              // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Above;                                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Below;                                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHit;                                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitNormal;                                         // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_BoneGroundTrace) == 0x000008, "Wrong alignment on FRigUnit_BoneGroundTrace");
static_assert(sizeof(FRigUnit_BoneGroundTrace) == 0x000050, "Wrong size on FRigUnit_BoneGroundTrace");
static_assert(offsetof(FRigUnit_BoneGroundTrace, bone) == 0x000008, "Member 'FRigUnit_BoneGroundTrace::bone' has a wrong offset!");
static_assert(offsetof(FRigUnit_BoneGroundTrace, Above) == 0x000010, "Member 'FRigUnit_BoneGroundTrace::Above' has a wrong offset!");
static_assert(offsetof(FRigUnit_BoneGroundTrace, Below) == 0x000014, "Member 'FRigUnit_BoneGroundTrace::Below' has a wrong offset!");
static_assert(offsetof(FRigUnit_BoneGroundTrace, bHit) == 0x000018, "Member 'FRigUnit_BoneGroundTrace::bHit' has a wrong offset!");
static_assert(offsetof(FRigUnit_BoneGroundTrace, HitLocation) == 0x000020, "Member 'FRigUnit_BoneGroundTrace::HitLocation' has a wrong offset!");
static_assert(offsetof(FRigUnit_BoneGroundTrace, HitNormal) == 0x000038, "Member 'FRigUnit_BoneGroundTrace::HitNormal' has a wrong offset!");

// ScriptStruct ButterCakeRuntime.RigUnit_UpdateAllGroundTraces
// 0x0000 (0x0080 - 0x0080)
struct FRigUnit_UpdateAllGroundTraces final : public FRigUnit_ButterCakeBaseMutable
{
};
static_assert(alignof(FRigUnit_UpdateAllGroundTraces) == 0x000010, "Wrong alignment on FRigUnit_UpdateAllGroundTraces");
static_assert(sizeof(FRigUnit_UpdateAllGroundTraces) == 0x000080, "Wrong size on FRigUnit_UpdateAllGroundTraces");

// ScriptStruct ButterCakeRuntime.RigUnit_MoveFeetToGround
// 0x0020 (0x00A0 - 0x0080)
struct FRigUnit_MoveFeetToGround final : public FRigUnit_ButterCakeBaseMutable
{
public:
	TArray<struct FTransform>                     FootEffectorTransformList;                         // 0x0080(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 FootEffectorStrengthAlphaList;                     // 0x0090(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_MoveFeetToGround) == 0x000010, "Wrong alignment on FRigUnit_MoveFeetToGround");
static_assert(sizeof(FRigUnit_MoveFeetToGround) == 0x0000A0, "Wrong size on FRigUnit_MoveFeetToGround");
static_assert(offsetof(FRigUnit_MoveFeetToGround, FootEffectorTransformList) == 0x000080, "Member 'FRigUnit_MoveFeetToGround::FootEffectorTransformList' has a wrong offset!");
static_assert(offsetof(FRigUnit_MoveFeetToGround, FootEffectorStrengthAlphaList) == 0x000090, "Member 'FRigUnit_MoveFeetToGround::FootEffectorStrengthAlphaList' has a wrong offset!");

// ScriptStruct ButterCakeRuntime.RigUnit_MoveTailOutOfGround
// 0x0070 (0x00F0 - 0x0080)
struct FRigUnit_MoveTailOutOfGround final : public FRigUnit_ButterCakeBaseMutable
{
public:
	bool                                          bShouldDoIK;                                       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0xF];                                       // 0x0081(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TailTipEffectorTransform;                          // 0x0090(0x0060)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_MoveTailOutOfGround) == 0x000010, "Wrong alignment on FRigUnit_MoveTailOutOfGround");
static_assert(sizeof(FRigUnit_MoveTailOutOfGround) == 0x0000F0, "Wrong size on FRigUnit_MoveTailOutOfGround");
static_assert(offsetof(FRigUnit_MoveTailOutOfGround, bShouldDoIK) == 0x000080, "Member 'FRigUnit_MoveTailOutOfGround::bShouldDoIK' has a wrong offset!");
static_assert(offsetof(FRigUnit_MoveTailOutOfGround, TailTipEffectorTransform) == 0x000090, "Member 'FRigUnit_MoveTailOutOfGround::TailTipEffectorTransform' has a wrong offset!");

// ScriptStruct ButterCakeRuntime.RigUnit_MoveChinOutOfGround
// 0x0070 (0x00F0 - 0x0080)
struct FRigUnit_MoveChinOutOfGround final : public FRigUnit_ButterCakeBaseMutable
{
public:
	bool                                          bShouldDoIK;                                       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0xF];                                       // 0x0081(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ChinEffectorTransform;                             // 0x0090(0x0060)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_MoveChinOutOfGround) == 0x000010, "Wrong alignment on FRigUnit_MoveChinOutOfGround");
static_assert(sizeof(FRigUnit_MoveChinOutOfGround) == 0x0000F0, "Wrong size on FRigUnit_MoveChinOutOfGround");
static_assert(offsetof(FRigUnit_MoveChinOutOfGround, bShouldDoIK) == 0x000080, "Member 'FRigUnit_MoveChinOutOfGround::bShouldDoIK' has a wrong offset!");
static_assert(offsetof(FRigUnit_MoveChinOutOfGround, ChinEffectorTransform) == 0x000090, "Member 'FRigUnit_MoveChinOutOfGround::ChinEffectorTransform' has a wrong offset!");

}

