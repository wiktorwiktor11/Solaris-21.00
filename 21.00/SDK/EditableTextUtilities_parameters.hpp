#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EditableTextUtilities

#include "Basic.hpp"


namespace SDK::Params
{

// Function EditableTextUtilities.EditableTextUtilities_C.CheckIfNeedsTrimming
// 0x0090 (0x0090 - 0x0000)
struct EditableTextUtilities_C_CheckIfNeedsTrimming final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	int32                                         Limit;                                             // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   TrimmedText;                                       // 0x0028(0x0018)(Parm, OutParm)
	bool                                          WasTrimmed;                                        // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Len_ReturnValue;                          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Left_ReturnValue;                         // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0078(0x0018)()
};
static_assert(alignof(EditableTextUtilities_C_CheckIfNeedsTrimming) == 0x000008, "Wrong alignment on EditableTextUtilities_C_CheckIfNeedsTrimming");
static_assert(sizeof(EditableTextUtilities_C_CheckIfNeedsTrimming) == 0x000090, "Wrong size on EditableTextUtilities_C_CheckIfNeedsTrimming");
static_assert(offsetof(EditableTextUtilities_C_CheckIfNeedsTrimming, Text) == 0x000000, "Member 'EditableTextUtilities_C_CheckIfNeedsTrimming::Text' has a wrong offset!");
static_assert(offsetof(EditableTextUtilities_C_CheckIfNeedsTrimming, Limit) == 0x000018, "Member 'EditableTextUtilities_C_CheckIfNeedsTrimming::Limit' has a wrong offset!");
static_assert(offsetof(EditableTextUtilities_C_CheckIfNeedsTrimming, __WorldContext) == 0x000020, "Member 'EditableTextUtilities_C_CheckIfNeedsTrimming::__WorldContext' has a wrong offset!");
static_assert(offsetof(EditableTextUtilities_C_CheckIfNeedsTrimming, TrimmedText) == 0x000028, "Member 'EditableTextUtilities_C_CheckIfNeedsTrimming::TrimmedText' has a wrong offset!");
static_assert(offsetof(EditableTextUtilities_C_CheckIfNeedsTrimming, WasTrimmed) == 0x000040, "Member 'EditableTextUtilities_C_CheckIfNeedsTrimming::WasTrimmed' has a wrong offset!");
static_assert(offsetof(EditableTextUtilities_C_CheckIfNeedsTrimming, CallFunc_Conv_TextToString_ReturnValue) == 0x000048, "Member 'EditableTextUtilities_C_CheckIfNeedsTrimming::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(EditableTextUtilities_C_CheckIfNeedsTrimming, CallFunc_Len_ReturnValue) == 0x000058, "Member 'EditableTextUtilities_C_CheckIfNeedsTrimming::CallFunc_Len_ReturnValue' has a wrong offset!");
static_assert(offsetof(EditableTextUtilities_C_CheckIfNeedsTrimming, CallFunc_Left_ReturnValue) == 0x000060, "Member 'EditableTextUtilities_C_CheckIfNeedsTrimming::CallFunc_Left_ReturnValue' has a wrong offset!");
static_assert(offsetof(EditableTextUtilities_C_CheckIfNeedsTrimming, CallFunc_Greater_IntInt_ReturnValue) == 0x000070, "Member 'EditableTextUtilities_C_CheckIfNeedsTrimming::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(EditableTextUtilities_C_CheckIfNeedsTrimming, CallFunc_Conv_StringToText_ReturnValue) == 0x000078, "Member 'EditableTextUtilities_C_CheckIfNeedsTrimming::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");

// Function EditableTextUtilities.EditableTextUtilities_C.LimitTextLength
// 0x00B0 (0x00B0 - 0x0000)
struct EditableTextUtilities_C_LimitTextLength final
{
public:
	class UWidget*                                EditableTextWidget;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Length;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WasTrimmed;                                        // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEditableText*                          K2Node_DynamicCast_AsEditable_Text;                // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEditableTextBox*                       K2Node_DynamicCast_AsText_Box;                     // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetText_ReturnValue;                      // 0x0040(0x0018)()
	class FText                                   CallFunc_GetText_ReturnValue_1;                    // 0x0058(0x0018)()
	class FText                                   CallFunc_CheckIfNeedsTrimming_TrimmedText;         // 0x0070(0x0018)()
	bool                                          CallFunc_CheckIfNeedsTrimming_WasTrimmed;          // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_CheckIfNeedsTrimming_TrimmedText_1;       // 0x0090(0x0018)()
	bool                                          CallFunc_CheckIfNeedsTrimming_WasTrimmed_1;        // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(EditableTextUtilities_C_LimitTextLength) == 0x000008, "Wrong alignment on EditableTextUtilities_C_LimitTextLength");
static_assert(sizeof(EditableTextUtilities_C_LimitTextLength) == 0x0000B0, "Wrong size on EditableTextUtilities_C_LimitTextLength");
static_assert(offsetof(EditableTextUtilities_C_LimitTextLength, EditableTextWidget) == 0x000000, "Member 'EditableTextUtilities_C_LimitTextLength::EditableTextWidget' has a wrong offset!");
static_assert(offsetof(EditableTextUtilities_C_LimitTextLength, Length) == 0x000008, "Member 'EditableTextUtilities_C_LimitTextLength::Length' has a wrong offset!");
static_assert(offsetof(EditableTextUtilities_C_LimitTextLength, __WorldContext) == 0x000010, "Member 'EditableTextUtilities_C_LimitTextLength::__WorldContext' has a wrong offset!");
static_assert(offsetof(EditableTextUtilities_C_LimitTextLength, WasTrimmed) == 0x000018, "Member 'EditableTextUtilities_C_LimitTextLength::WasTrimmed' has a wrong offset!");
static_assert(offsetof(EditableTextUtilities_C_LimitTextLength, K2Node_DynamicCast_AsEditable_Text) == 0x000020, "Member 'EditableTextUtilities_C_LimitTextLength::K2Node_DynamicCast_AsEditable_Text' has a wrong offset!");
static_assert(offsetof(EditableTextUtilities_C_LimitTextLength, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'EditableTextUtilities_C_LimitTextLength::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(EditableTextUtilities_C_LimitTextLength, K2Node_DynamicCast_AsText_Box) == 0x000030, "Member 'EditableTextUtilities_C_LimitTextLength::K2Node_DynamicCast_AsText_Box' has a wrong offset!");
static_assert(offsetof(EditableTextUtilities_C_LimitTextLength, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'EditableTextUtilities_C_LimitTextLength::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(EditableTextUtilities_C_LimitTextLength, CallFunc_GetText_ReturnValue) == 0x000040, "Member 'EditableTextUtilities_C_LimitTextLength::CallFunc_GetText_ReturnValue' has a wrong offset!");
static_assert(offsetof(EditableTextUtilities_C_LimitTextLength, CallFunc_GetText_ReturnValue_1) == 0x000058, "Member 'EditableTextUtilities_C_LimitTextLength::CallFunc_GetText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(EditableTextUtilities_C_LimitTextLength, CallFunc_CheckIfNeedsTrimming_TrimmedText) == 0x000070, "Member 'EditableTextUtilities_C_LimitTextLength::CallFunc_CheckIfNeedsTrimming_TrimmedText' has a wrong offset!");
static_assert(offsetof(EditableTextUtilities_C_LimitTextLength, CallFunc_CheckIfNeedsTrimming_WasTrimmed) == 0x000088, "Member 'EditableTextUtilities_C_LimitTextLength::CallFunc_CheckIfNeedsTrimming_WasTrimmed' has a wrong offset!");
static_assert(offsetof(EditableTextUtilities_C_LimitTextLength, CallFunc_CheckIfNeedsTrimming_TrimmedText_1) == 0x000090, "Member 'EditableTextUtilities_C_LimitTextLength::CallFunc_CheckIfNeedsTrimming_TrimmedText_1' has a wrong offset!");
static_assert(offsetof(EditableTextUtilities_C_LimitTextLength, CallFunc_CheckIfNeedsTrimming_WasTrimmed_1) == 0x0000A8, "Member 'EditableTextUtilities_C_LimitTextLength::CallFunc_CheckIfNeedsTrimming_WasTrimmed_1' has a wrong offset!");

}

