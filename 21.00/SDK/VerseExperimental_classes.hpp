#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VerseExperimental

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "VerseExperimental_structs.hpp"
#include "SolarisInterop_structs.hpp"


namespace SDK
{

// SolarisGeneratedClass VerseExperimental.$SolarisSignatureFunctionOuter
// 0x0000 (0x0028 - 0x0028)
class VerseExperimental::U_SolarisSignatureFunctionOuter final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarisGeneratedClass VerseExperimental.$SolarisSignatureFunctionOuter", true>();
	}
	static class VerseExperimental::U_SolarisSignatureFunctionOuter* GetDefaultObj()
	{
		return GetDefaultObjImpl<VerseExperimental::U_SolarisSignatureFunctionOuter>();
	}
};
static_assert(alignof(VerseExperimental::U_SolarisSignatureFunctionOuter) == 0x000008, "Wrong alignment on VerseExperimental::U_SolarisSignatureFunctionOuter");
static_assert(sizeof(VerseExperimental::U_SolarisSignatureFunctionOuter) == 0x000028, "Wrong size on VerseExperimental::U_SolarisSignatureFunctionOuter");

// SolarisGeneratedClass VerseExperimental.date_time_ticks
// 0x0048 (0x0070 - 0x0028)
class Udate_time_ticks final : public UObject
{
public:
	int64                                         __verse_0x8DE5F121_NanosecondsPerTick;             // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         __verse_0x358147B9_TicksPerDay;                    // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         __verse_0x5C0949D3_TicksPerHour;                   // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         __verse_0x59DFB831_TicksPerMicrosecond;            // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         __verse_0xD20E16AF_TicksPerMillisecond;            // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         __verse_0x4420B794_TicksPerMinute;                 // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         __verse_0x3E0178E0_TicksPerSecond;                 // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         __verse_0xA7911900_TicksPerWeek;                   // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         __verse_0xE371C089_TicksPerYear;                   // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void _InitCDO();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"date_time_ticks">();
	}
	static class Udate_time_ticks* GetDefaultObj()
	{
		return GetDefaultObjImpl<Udate_time_ticks>();
	}
};
static_assert(alignof(Udate_time_ticks) == 0x000008, "Wrong alignment on Udate_time_ticks");
static_assert(sizeof(Udate_time_ticks) == 0x000070, "Wrong size on Udate_time_ticks");
static_assert(offsetof(Udate_time_ticks, __verse_0x8DE5F121_NanosecondsPerTick) == 0x000028, "Member 'Udate_time_ticks::__verse_0x8DE5F121_NanosecondsPerTick' has a wrong offset!");
static_assert(offsetof(Udate_time_ticks, __verse_0x358147B9_TicksPerDay) == 0x000030, "Member 'Udate_time_ticks::__verse_0x358147B9_TicksPerDay' has a wrong offset!");
static_assert(offsetof(Udate_time_ticks, __verse_0x5C0949D3_TicksPerHour) == 0x000038, "Member 'Udate_time_ticks::__verse_0x5C0949D3_TicksPerHour' has a wrong offset!");
static_assert(offsetof(Udate_time_ticks, __verse_0x59DFB831_TicksPerMicrosecond) == 0x000040, "Member 'Udate_time_ticks::__verse_0x59DFB831_TicksPerMicrosecond' has a wrong offset!");
static_assert(offsetof(Udate_time_ticks, __verse_0xD20E16AF_TicksPerMillisecond) == 0x000048, "Member 'Udate_time_ticks::__verse_0xD20E16AF_TicksPerMillisecond' has a wrong offset!");
static_assert(offsetof(Udate_time_ticks, __verse_0x4420B794_TicksPerMinute) == 0x000050, "Member 'Udate_time_ticks::__verse_0x4420B794_TicksPerMinute' has a wrong offset!");
static_assert(offsetof(Udate_time_ticks, __verse_0x3E0178E0_TicksPerSecond) == 0x000058, "Member 'Udate_time_ticks::__verse_0x3E0178E0_TicksPerSecond' has a wrong offset!");
static_assert(offsetof(Udate_time_ticks, __verse_0xA7911900_TicksPerWeek) == 0x000060, "Member 'Udate_time_ticks::__verse_0xA7911900_TicksPerWeek' has a wrong offset!");
static_assert(offsetof(Udate_time_ticks, __verse_0xE371C089_TicksPerYear) == 0x000068, "Member 'Udate_time_ticks::__verse_0xE371C089_TicksPerYear' has a wrong offset!");

// SolarisGeneratedClass VerseExperimental.VerseExperimental
// 0x0000 (0x0028 - 0x0028)
class UVerseExperimental final : public UObject
{
public:
	static FOptionProperty_ _L_2fVerse_2eorg_2fVerseExperimental_N_RCreateDateTime_L_Nint_M_Nint_M_Nint_M_Nint_M_Nint_M_Nint_M_Nint_R(const struct Ftuple_Lint_Mint_Mint_Mint_Mint_Mint_Mint_R& __verse_0xB2CDDD72_Argument);
	static struct Ftime_span _L_2fVerse_2eorg_2fVerseExperimental_N_RCreateTimeSpan_L_Nint_M_Nint_M_Nint_M_Nint_M_Nint_R(const struct Ftuple_Lint_Mint_Mint_Mint_Mint_R& __verse_0xB2CDDD72_Argument);
	static FOptionProperty_ _L_2fVerse_2eorg_2fVerseExperimental_N_Rdate__time_L_Nint_M_Nint_M_Nint_M_Nint_M_Nint_M_Nint_M_Nint_R(const struct Ftuple_Lint_Mint_Mint_Mint_Mint_Mint_Mint_R& __verse_0xB2CDDD72_Argument);
	static struct Fdate_time _L_2fVerse_2eorg_2fVerseExperimental_N_RDateTimeMax(const struct VerseExperimental::Ftuple_L_R& __verse_0xB2CDDD72_Argument);
	static struct Fdate_time _L_2fVerse_2eorg_2fVerseExperimental_N_RDateTimeMin(const struct VerseExperimental::Ftuple_L_R& __verse_0xB2CDDD72_Argument);
	static int64 _L_2fVerse_2eorg_2fVerseExperimental_N_RDaysInMonth_L_Nint_M_Nint_R(const struct VerseExperimental::Ftuple_Lint_Mint_R& __verse_0xB2CDDD72_Argument);
	static int64 _L_2fVerse_2eorg_2fVerseExperimental_N_RDaysInYear_L_Nint_R(int64 __verse_0xB2CDDD72_Argument);
	static struct Fdate_parts _L_2fVerse_2eorg_2fVerseExperimental_N_RGetDate_L_Ndate__time_R(const struct Fdate_time& __verse_0xB2CDDD72_Argument);
	static int64 _L_2fVerse_2eorg_2fVerseExperimental_N_RGetDay_L_Ndate__time_R(const struct Fdate_time& __verse_0xB2CDDD72_Argument);
	static Eday_of_week _L_2fVerse_2eorg_2fVerseExperimental_N_RGetDayOfWeek_L_Ndate__time_R(const struct Fdate_time& __verse_0xB2CDDD72_Argument);
	static int64 _L_2fVerse_2eorg_2fVerseExperimental_N_RGetDays_L_Ntime__span_R(const struct Ftime_span& __verse_0xB2CDDD72_Argument);
	static int64 _L_2fVerse_2eorg_2fVerseExperimental_N_RGetHours_L_Ndate__time_R(const struct Fdate_time& __verse_0xB2CDDD72_Argument);
	static int64 _L_2fVerse_2eorg_2fVerseExperimental_N_RGetHours_L_Ntime__span_R(const struct Ftime_span& __verse_0xB2CDDD72_Argument);
	static int64 _L_2fVerse_2eorg_2fVerseExperimental_N_RGetMicroseconds_L_Ndate__time_R(const struct Fdate_time& __verse_0xB2CDDD72_Argument);
	static int64 _L_2fVerse_2eorg_2fVerseExperimental_N_RGetMicroseconds_L_Ntime__span_R(const struct Ftime_span& __verse_0xB2CDDD72_Argument);
	static int64 _L_2fVerse_2eorg_2fVerseExperimental_N_RGetMilliseconds_L_Ndate__time_R(const struct Fdate_time& __verse_0xB2CDDD72_Argument);
	static int64 _L_2fVerse_2eorg_2fVerseExperimental_N_RGetMilliseconds_L_Ntime__span_R(const struct Ftime_span& __verse_0xB2CDDD72_Argument);
	static int64 _L_2fVerse_2eorg_2fVerseExperimental_N_RGetMinutes_L_Ndate__time_R(const struct Fdate_time& __verse_0xB2CDDD72_Argument);
	static int64 _L_2fVerse_2eorg_2fVerseExperimental_N_RGetMinutes_L_Ntime__span_R(const struct Ftime_span& __verse_0xB2CDDD72_Argument);
	static int64 _L_2fVerse_2eorg_2fVerseExperimental_N_RGetMonth_L_Ndate__time_R(const struct Fdate_time& __verse_0xB2CDDD72_Argument);
	static Emonth_of_year _L_2fVerse_2eorg_2fVerseExperimental_N_RGetMonthOfYear_L_Ndate__time_R(const struct Fdate_time& __verse_0xB2CDDD72_Argument);
	static int64 _L_2fVerse_2eorg_2fVerseExperimental_N_RGetNanoseconds_L_Ndate__time_R(const struct Fdate_time& __verse_0xB2CDDD72_Argument);
	static int64 _L_2fVerse_2eorg_2fVerseExperimental_N_RGetNanoseconds_L_Ntime__span_R(const struct Ftime_span& __verse_0xB2CDDD72_Argument);
	static int64 _L_2fVerse_2eorg_2fVerseExperimental_N_RGetSeconds_L_Ndate__time_R(const struct Fdate_time& __verse_0xB2CDDD72_Argument);
	static int64 _L_2fVerse_2eorg_2fVerseExperimental_N_RGetSeconds_L_Ntime__span_R(const struct Ftime_span& __verse_0xB2CDDD72_Argument);
	static struct Ftime_of_day_parts _L_2fVerse_2eorg_2fVerseExperimental_N_RGetTimeOfDay_L_Ndate__time_R(const struct Fdate_time& __verse_0xB2CDDD72_Argument);
	static int64 _L_2fVerse_2eorg_2fVerseExperimental_N_RGetTotalDays_L_Ntime__span_R(const struct Ftime_span& __verse_0xB2CDDD72_Argument);
	static int64 _L_2fVerse_2eorg_2fVerseExperimental_N_RGetTotalHours_L_Ntime__span_R(const struct Ftime_span& __verse_0xB2CDDD72_Argument);
	static int64 _L_2fVerse_2eorg_2fVerseExperimental_N_RGetTotalMicroseconds_L_Ntime__span_R(const struct Ftime_span& __verse_0xB2CDDD72_Argument);
	static int64 _L_2fVerse_2eorg_2fVerseExperimental_N_RGetTotalMilliseconds_L_Ntime__span_R(const struct Ftime_span& __verse_0xB2CDDD72_Argument);
	static int64 _L_2fVerse_2eorg_2fVerseExperimental_N_RGetTotalMinutes_L_Ntime__span_R(const struct Ftime_span& __verse_0xB2CDDD72_Argument);
	static int64 _L_2fVerse_2eorg_2fVerseExperimental_N_RGetTotalSeconds_L_Ntime__span_R(const struct Ftime_span& __verse_0xB2CDDD72_Argument);
	static int64 _L_2fVerse_2eorg_2fVerseExperimental_N_RGetYear_L_Ndate__time_R(const struct Fdate_time& __verse_0xB2CDDD72_Argument);
	static FOptionProperty_ _L_2fVerse_2eorg_2fVerseExperimental_N_RGreater_L_Ndate__time_M_Ndate__time_R(const struct Ftuple_Ldate__time_Mdate__time_R& __verse_0xB2CDDD72_Argument);
	static FOptionProperty_ _L_2fVerse_2eorg_2fVerseExperimental_N_RGreater_L_Ntime__span_M_Ntime__span_R(const struct Ftuple_Ltime__span_Mtime__span_R& __verse_0xB2CDDD72_Argument);
	static FOptionProperty_ _L_2fVerse_2eorg_2fVerseExperimental_N_RGreaterEqual_L_Ndate__time_M_Ndate__time_R(const struct Ftuple_Ldate__time_Mdate__time_R& __verse_0xB2CDDD72_Argument);
	static FOptionProperty_ _L_2fVerse_2eorg_2fVerseExperimental_N_RGreaterEqual_L_Ntime__span_M_Ntime__span_R(const struct Ftuple_Ltime__span_Mtime__span_R& __verse_0xB2CDDD72_Argument);
	static FOptionProperty_ _L_2fVerse_2eorg_2fVerseExperimental_N_RLess_L_Ndate__time_M_Ndate__time_R(const struct Ftuple_Ldate__time_Mdate__time_R& __verse_0xB2CDDD72_Argument);
	static FOptionProperty_ _L_2fVerse_2eorg_2fVerseExperimental_N_RLess_L_Ntime__span_M_Ntime__span_R(const struct Ftuple_Ltime__span_Mtime__span_R& __verse_0xB2CDDD72_Argument);
	static FOptionProperty_ _L_2fVerse_2eorg_2fVerseExperimental_N_RLessEqual_L_Ndate__time_M_Ndate__time_R(const struct Ftuple_Ldate__time_Mdate__time_R& __verse_0xB2CDDD72_Argument);
	static FOptionProperty_ _L_2fVerse_2eorg_2fVerseExperimental_N_RLessEqual_L_Ntime__span_M_Ntime__span_R(const struct Ftuple_Ltime__span_Mtime__span_R& __verse_0xB2CDDD72_Argument);
	static struct Ftime_span _L_2fVerse_2eorg_2fVerseExperimental_N_Roperator_27_2a_27_L_Nfloat_M_Ntime__span_R(const struct Ftuple_Lfloat_Mtime__span_R& __verse_0xB2CDDD72_Argument);
	static struct Ftime_span _L_2fVerse_2eorg_2fVerseExperimental_N_Roperator_27_2a_27_L_Ntime__span_M_Nfloat_R(const struct Ftuple_Ltime__span_Mfloat_R& __verse_0xB2CDDD72_Argument);
	static struct Fdate_time _L_2fVerse_2eorg_2fVerseExperimental_N_Roperator_27_2b_27_L_Ndate__time_M_Ntime__span_R(const struct Ftuple_Ldate__time_Mtime__span_R& __verse_0xB2CDDD72_Argument);
	static struct Ftime_span _L_2fVerse_2eorg_2fVerseExperimental_N_Roperator_27_2b_27_L_Ntime__span_M_Ntime__span_R(const struct Ftuple_Ltime__span_Mtime__span_R& __verse_0xB2CDDD72_Argument);
	static struct Ftime_span _L_2fVerse_2eorg_2fVerseExperimental_N_Roperator_27_2d_27_L_Ndate__time_M_Ndate__time_R(const struct Ftuple_Ldate__time_Mdate__time_R& __verse_0xB2CDDD72_Argument);
	static struct Fdate_time _L_2fVerse_2eorg_2fVerseExperimental_N_Roperator_27_2d_27_L_Ndate__time_M_Ntime__span_R(const struct Ftuple_Ldate__time_Mtime__span_R& __verse_0xB2CDDD72_Argument);
	static struct Ftime_span _L_2fVerse_2eorg_2fVerseExperimental_N_Roperator_27_2d_27_L_Ntime__span_M_Ntime__span_R(const struct Ftuple_Ltime__span_Mtime__span_R& __verse_0xB2CDDD72_Argument);
	static struct Ftime_span _L_2fVerse_2eorg_2fVerseExperimental_N_Roperator_27_2d_27_L_Ntime__span_R(const struct Ftime_span& __verse_0xB2CDDD72_Argument);
	static struct Ftime_span _L_2fVerse_2eorg_2fVerseExperimental_N_Roperator_27_2f_27_L_Ntime__span_M_Nfloat_R(const struct Ftuple_Ltime__span_Mfloat_R& __verse_0xB2CDDD72_Argument);
	static struct Fdate_time _L_2fVerse_2eorg_2fVerseExperimental_N_RPerformNativeAdd_L_Ndate__time_M_Ntime__span_R(const struct Ftuple_Ldate__time_Mtime__span_R& __verse_0xB2CDDD72_Argument);
	static struct Ftime_span _L_2fVerse_2eorg_2fVerseExperimental_N_RPerformNativeAdd_L_Ntime__span_M_Ntime__span_R(const struct Ftuple_Ltime__span_Mtime__span_R& __verse_0xB2CDDD72_Argument);
	static struct Ftime_span _L_2fVerse_2eorg_2fVerseExperimental_N_RPerformNativeDivide_L_Ntime__span_M_Nfloat_R(const struct Ftuple_Ltime__span_Mfloat_R& __verse_0xB2CDDD72_Argument);
	static struct Ftime_span _L_2fVerse_2eorg_2fVerseExperimental_N_RPerformNativeMultiply_L_Ntime__span_M_Nfloat_R(const struct Ftuple_Ltime__span_Mfloat_R& __verse_0xB2CDDD72_Argument);
	static struct Ftime_span _L_2fVerse_2eorg_2fVerseExperimental_N_RPerformNativeNegate_L_Ntime__span_R(const struct Ftime_span& __verse_0xB2CDDD72_Argument);
	static struct Ftime_span _L_2fVerse_2eorg_2fVerseExperimental_N_RPerformNativeSubtract_L_Ndate__time_M_Ndate__time_R(const struct Ftuple_Ldate__time_Mdate__time_R& __verse_0xB2CDDD72_Argument);
	static struct Fdate_time _L_2fVerse_2eorg_2fVerseExperimental_N_RPerformNativeSubtract_L_Ndate__time_M_Ntime__span_R(const struct Ftuple_Ldate__time_Mtime__span_R& __verse_0xB2CDDD72_Argument);
	static struct Ftime_span _L_2fVerse_2eorg_2fVerseExperimental_N_RPerformNativeSubtract_L_Ntime__span_M_Ntime__span_R(const struct Ftuple_Ltime__span_Mtime__span_R& __verse_0xB2CDDD72_Argument);
	static struct Ftime_span _L_2fVerse_2eorg_2fVerseExperimental_N_Rtime__span_L_Nint_M_Nint_M_Nint_M_Nint_M_Nint_R(const struct Ftuple_Lint_Mint_Mint_Mint_Mint_R& __verse_0xB2CDDD72_Argument);
	static FVerseStringProperty_ _L_2fVerse_2eorg_2fVerseExperimental_N_RToString_L_Ndate__time_R(const struct Fdate_time& __verse_0xB2CDDD72_Argument);
	static FVerseStringProperty_ _L_2fVerse_2eorg_2fVerseExperimental_N_RToString_L_Ntime__span_R(const struct Ftime_span& __verse_0xB2CDDD72_Argument);
	static struct Fdate_time _L_2fVerse_2eorg_2fVerseExperimental_N_RUtcNow(const struct VerseExperimental::Ftuple_L_R& __verse_0xB2CDDD72_Argument);
	static FOptionProperty_ _L_2fVerse_2eorg_2fVerseExperimental_N_RValidate_L_Ndate__time_R(const struct Fdate_time& __verse_0xB2CDDD72_Argument);
	static uint8 _L_2fVerse_2eorg_2fVerseExperimental_N_RValidateDateTime_L_Nint_M_Nint_M_Nint_M_Nint_M_Nint_M_Nint_M_Nint_R(const struct Ftuple_Lint_Mint_Mint_Mint_Mint_Mint_Mint_R& __verse_0xB2CDDD72_Argument);
	static struct Fdate_parts date_parts_Factory();
	static struct Fdate_time date_time_Factory();
	static struct Ftime_of_day_parts time_of_day_parts_Factory();
	static struct Ftime_span time_span_Factory();

	void _InitCDO();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VerseExperimental">();
	}
	static class UVerseExperimental* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVerseExperimental>();
	}
};
static_assert(alignof(UVerseExperimental) == 0x000008, "Wrong alignment on UVerseExperimental");
static_assert(sizeof(UVerseExperimental) == 0x000028, "Wrong size on UVerseExperimental");

}

