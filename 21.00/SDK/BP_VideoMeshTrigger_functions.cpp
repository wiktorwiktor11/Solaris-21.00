#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VideoMeshTrigger

#include "Basic.hpp"

#include "BP_VideoMeshTrigger_classes.hpp"
#include "BP_VideoMeshTrigger_parameters.hpp"


namespace SDK
{

// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.RootStopVideo
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ScreenName_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    LeaveScreen_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           RegionData                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_VideoMeshTrigger_C::RootStopVideo(const class FString& ScreenName_0, bool LeaveScreen_0, const class FString& RegionData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VideoMeshTrigger_C", "RootStopVideo");

	Params::BP_VideoMeshTrigger_C_RootStopVideo Parms{};

	Parms.ScreenName_0 = std::move(ScreenName_0);
	Parms.LeaveScreen_0 = LeaveScreen_0;
	Parms.RegionData = std::move(RegionData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.RootStartWarming
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ScreenName_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Simple                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           CDNWeights_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           RegionData                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_VideoMeshTrigger_C::RootStartWarming(const class FString& ScreenName_0, bool Enable, bool Simple, const class FString& CDNWeights_0, const class FString& RegionData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VideoMeshTrigger_C", "RootStartWarming");

	Params::BP_VideoMeshTrigger_C_RootStartWarming Parms{};

	Parms.ScreenName_0 = std::move(ScreenName_0);
	Parms.Enable = Enable;
	Parms.Simple = Simple;
	Parms.CDNWeights_0 = std::move(CDNWeights_0);
	Parms.RegionData = std::move(RegionData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.RootStartPiP
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ScreenName_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           VideoUID_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    LIVE                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           RegionData                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_VideoMeshTrigger_C::RootStartPiP(const class FString& ScreenName_0, const class FString& VideoUID_0, bool Enable, bool LIVE, const class FString& RegionData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VideoMeshTrigger_C", "RootStartPiP");

	Params::BP_VideoMeshTrigger_C_RootStartPiP Parms{};

	Parms.ScreenName_0 = std::move(ScreenName_0);
	Parms.VideoUID_0 = std::move(VideoUID_0);
	Parms.Enable = Enable;
	Parms.LIVE = LIVE;
	Parms.RegionData = std::move(RegionData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.RootSetScreenPrio
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ScreenName_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           RegionData                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_VideoMeshTrigger_C::RootSetScreenPrio(const class FString& ScreenName_0, int32 Distance, const class FString& RegionData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VideoMeshTrigger_C", "RootSetScreenPrio");

	Params::BP_VideoMeshTrigger_C_RootSetScreenPrio Parms{};

	Parms.ScreenName_0 = std::move(ScreenName_0);
	Parms.Distance = Distance;
	Parms.RegionData = std::move(RegionData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.RootSetScreenMirror
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ScreenName_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           RegionData                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_VideoMeshTrigger_C::RootSetScreenMirror(const class FString& ScreenName_0, bool Enable, const class FString& RegionData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VideoMeshTrigger_C", "RootSetScreenMirror");

	Params::BP_VideoMeshTrigger_C_RootSetScreenMirror Parms{};

	Parms.ScreenName_0 = std::move(ScreenName_0);
	Parms.Enable = Enable;
	Parms.RegionData = std::move(RegionData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.RootSetMaxBW
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ScreenName_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   MaxBW                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           RegionData                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_VideoMeshTrigger_C::RootSetMaxBW(const class FString& ScreenName_0, int32 MaxBW, const class FString& RegionData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VideoMeshTrigger_C", "RootSetMaxBW");

	Params::BP_VideoMeshTrigger_C_RootSetMaxBW Parms{};

	Parms.ScreenName_0 = std::move(ScreenName_0);
	Parms.MaxBW = MaxBW;
	Parms.RegionData = std::move(RegionData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.RootSetCDNWeights
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ScreenName_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Weights                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    PIPToo                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Clear                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           RegionData                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_VideoMeshTrigger_C::RootSetCDNWeights(const class FString& ScreenName_0, const class FString& Weights, bool PIPToo, bool Clear, const class FString& RegionData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VideoMeshTrigger_C", "RootSetCDNWeights");

	Params::BP_VideoMeshTrigger_C_RootSetCDNWeights Parms{};

	Parms.ScreenName_0 = std::move(ScreenName_0);
	Parms.Weights = std::move(Weights);
	Parms.PIPToo = PIPToo;
	Parms.Clear = Clear;
	Parms.RegionData = std::move(RegionData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.RootSeekVideo
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ScreenName_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Exact                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           RegionData                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_VideoMeshTrigger_C::RootSeekVideo(const class FString& ScreenName_0, float Time, bool Exact, const class FString& RegionData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VideoMeshTrigger_C", "RootSeekVideo");

	Params::BP_VideoMeshTrigger_C_RootSeekVideo Parms{};

	Parms.ScreenName_0 = std::move(ScreenName_0);
	Parms.Time = Time;
	Parms.Exact = Exact;
	Parms.RegionData = std::move(RegionData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.RootPlayVideo
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ScreenName_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           VideoUID_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PIP                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    LIVE                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           RegionData                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_VideoMeshTrigger_C::RootPlayVideo(const class FString& ScreenName_0, const class FString& VideoUID_0, int32 PIP, bool LIVE, int32 Distance, const class FString& RegionData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VideoMeshTrigger_C", "RootPlayVideo");

	Params::BP_VideoMeshTrigger_C_RootPlayVideo Parms{};

	Parms.ScreenName_0 = std::move(ScreenName_0);
	Parms.VideoUID_0 = std::move(VideoUID_0);
	Parms.PIP = PIP;
	Parms.LIVE = LIVE;
	Parms.Distance = Distance;
	Parms.RegionData = std::move(RegionData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.RootForcePiP
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ScreenName_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int64                                   Counter                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           RegionData                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_VideoMeshTrigger_C::RootForcePiP(const class FString& ScreenName_0, int64 Counter, const class FString& RegionData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VideoMeshTrigger_C", "RootForcePiP");

	Params::BP_VideoMeshTrigger_C_RootForcePiP Parms{};

	Parms.ScreenName_0 = std::move(ScreenName_0);
	Parms.Counter = Counter;
	Parms.RegionData = std::move(RegionData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.RootEnableLoopVideo
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ScreenName_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           RegionData                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_VideoMeshTrigger_C::RootEnableLoopVideo(const class FString& ScreenName_0, const class FString& RegionData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VideoMeshTrigger_C", "RootEnableLoopVideo");

	Params::BP_VideoMeshTrigger_C_RootEnableLoopVideo Parms{};

	Parms.ScreenName_0 = std::move(ScreenName_0);
	Parms.RegionData = std::move(RegionData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.RootDisableLoopVideo
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ScreenName_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           RegionData                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_VideoMeshTrigger_C::RootDisableLoopVideo(const class FString& ScreenName_0, const class FString& RegionData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VideoMeshTrigger_C", "RootDisableLoopVideo");

	Params::BP_VideoMeshTrigger_C_RootDisableLoopVideo Parms{};

	Parms.ScreenName_0 = std::move(ScreenName_0);
	Parms.RegionData = std::move(RegionData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.RootClearAllData
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ScreeName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_VideoMeshTrigger_C::RootClearAllData(const class FString& ScreeName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VideoMeshTrigger_C", "RootClearAllData");

	Params::BP_VideoMeshTrigger_C_RootClearAllData Parms{};

	Parms.ScreeName = std::move(ScreeName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_VideoMeshTrigger_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VideoMeshTrigger_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.PrintIncomingData
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ScreenName_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           VideoUID_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_VideoMeshTrigger_C::PrintIncomingData(const class FString& ScreenName_0, const class FString& VideoUID_0, const class FString& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VideoMeshTrigger_C", "PrintIncomingData");

	Params::BP_VideoMeshTrigger_C_PrintIncomingData Parms{};

	Parms.ScreenName_0 = std::move(ScreenName_0);
	Parms.VideoUID_0 = std::move(VideoUID_0);
	Parms.Command = std::move(Command);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.PIPAlso Version
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Version                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    LIVE                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           VUID                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           RegionData                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_VideoMeshTrigger_C::PIPAlso_Version(int32 Version, bool LIVE, const class FString& VUID, bool Enable, const class FString& RegionData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VideoMeshTrigger_C", "PIPAlso Version");

	Params::BP_VideoMeshTrigger_C_PIPAlso_Version Parms{};

	Parms.Version = Version;
	Parms.LIVE = LIVE;
	Parms.VUID = std::move(VUID);
	Parms.Enable = Enable;
	Parms.RegionData = std::move(RegionData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.OnRep_StartWarmingUTCTime
// (BlueprintCallable, BlueprintEvent)

void ABP_VideoMeshTrigger_C::OnRep_StartWarmingUTCTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VideoMeshTrigger_C", "OnRep_StartWarmingUTCTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.OnRep_StartWarmingServerTimeSeconds
// (BlueprintCallable, BlueprintEvent)

void ABP_VideoMeshTrigger_C::OnRep_StartWarmingServerTimeSeconds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VideoMeshTrigger_C", "OnRep_StartWarmingServerTimeSeconds");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.OnRep_ScreenName
// (BlueprintCallable, BlueprintEvent)

void ABP_VideoMeshTrigger_C::OnRep_ScreenName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VideoMeshTrigger_C", "OnRep_ScreenName");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.OnRep_ScreenDistance
// (BlueprintCallable, BlueprintEvent)

void ABP_VideoMeshTrigger_C::OnRep_ScreenDistance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VideoMeshTrigger_C", "OnRep_ScreenDistance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.OnRep_Region_StartWarmingUTCTime
// (HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_VideoMeshTrigger_C::OnRep_Region_StartWarmingUTCTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VideoMeshTrigger_C", "OnRep_Region_StartWarmingUTCTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.OnRep_Region_StartWarmingServerTimeSeconds
// (HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_VideoMeshTrigger_C::OnRep_Region_StartWarmingServerTimeSeconds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VideoMeshTrigger_C", "OnRep_Region_StartWarmingServerTimeSeconds");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.OnRep_Region_ScreenDistance
// (BlueprintCallable, BlueprintEvent)

void ABP_VideoMeshTrigger_C::OnRep_Region_ScreenDistance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VideoMeshTrigger_C", "OnRep_Region_ScreenDistance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.OnRep_Region_PlayUTCTime
// (HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_VideoMeshTrigger_C::OnRep_Region_PlayUTCTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VideoMeshTrigger_C", "OnRep_Region_PlayUTCTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.OnRep_Region_PlayServerTimeSeconds
// (HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_VideoMeshTrigger_C::OnRep_Region_PlayServerTimeSeconds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VideoMeshTrigger_C", "OnRep_Region_PlayServerTimeSeconds");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.OnRep_Region_PiPPlayUTCTime
// (HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_VideoMeshTrigger_C::OnRep_Region_PiPPlayUTCTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VideoMeshTrigger_C", "OnRep_Region_PiPPlayUTCTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.OnRep_Region_PiPPlayerServerTimeSeconds
// (HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_VideoMeshTrigger_C::OnRep_Region_PiPPlayerServerTimeSeconds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VideoMeshTrigger_C", "OnRep_Region_PiPPlayerServerTimeSeconds");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.OnRep_Region_MaxBandwidth
// (BlueprintCallable, BlueprintEvent)

void ABP_VideoMeshTrigger_C::OnRep_Region_MaxBandwidth()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VideoMeshTrigger_C", "OnRep_Region_MaxBandwidth");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.OnRep_Region_LoopVideo
// (BlueprintCallable, BlueprintEvent)

void ABP_VideoMeshTrigger_C::OnRep_Region_LoopVideo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VideoMeshTrigger_C", "OnRep_Region_LoopVideo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.OnRep_PlayUTCTime
// (BlueprintCallable, BlueprintEvent)

void ABP_VideoMeshTrigger_C::OnRep_PlayUTCTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VideoMeshTrigger_C", "OnRep_PlayUTCTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.OnRep_PlayServerTimeSeconds
// (BlueprintCallable, BlueprintEvent)

void ABP_VideoMeshTrigger_C::OnRep_PlayServerTimeSeconds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VideoMeshTrigger_C", "OnRep_PlayServerTimeSeconds");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.OnRep_PiPPlayUTCTIme
// (BlueprintCallable, BlueprintEvent)

void ABP_VideoMeshTrigger_C::OnRep_PiPPlayUTCTIme()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VideoMeshTrigger_C", "OnRep_PiPPlayUTCTIme");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.OnRep_PiPPlayerServerTimeSeconds
// (BlueprintCallable, BlueprintEvent)

void ABP_VideoMeshTrigger_C::OnRep_PiPPlayerServerTimeSeconds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VideoMeshTrigger_C", "OnRep_PiPPlayerServerTimeSeconds");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.OnRep_MaxBandwidth
// (BlueprintCallable, BlueprintEvent)

void ABP_VideoMeshTrigger_C::OnRep_MaxBandwidth()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VideoMeshTrigger_C", "OnRep_MaxBandwidth");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.OnRep_LoopVideo
// (HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_VideoMeshTrigger_C::OnRep_LoopVideo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VideoMeshTrigger_C", "OnRep_LoopVideo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.ExecuteUbergraph_BP_VideoMeshTrigger
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_VideoMeshTrigger_C::ExecuteUbergraph_BP_VideoMeshTrigger(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VideoMeshTrigger_C", "ExecuteUbergraph_BP_VideoMeshTrigger");

	Params::BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.CheckScreen
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ScreenName_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    ThisScreen                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_VideoMeshTrigger_C::CheckScreen(const class FString& ScreenName_0, bool* ThisScreen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VideoMeshTrigger_C", "CheckScreen");

	Params::BP_VideoMeshTrigger_C_CheckScreen Parms{};

	Parms.ScreenName_0 = std::move(ScreenName_0);

	UObject::ProcessEvent(Func, &Parms);

	if (ThisScreen != nullptr)
		*ThisScreen = Parms.ThisScreen;
}

}

