#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RandomColor_Prop

#include "Basic.hpp"

#include "RandomColorProp_MaterialApply_Enum_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass RandomColor_Prop.RandomColor_Prop_C
// 0x0060 (0x0ED0 - 0x0E70)
class ARandomColor_Prop_C : public ABuildingProp
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0E70(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          RandomizeSwatchByPosition;                         // 0x0E78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E79[0x7];                                      // 0x0E79(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 SwatchDataAsset;                                   // 0x0E80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SwatchIndex;                                       // 0x0E88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SwatchTransitionDistance;                          // 0x0E8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RandomizeMeshByPosition;                           // 0x0E90(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E91[0x7];                                      // 0x0E91(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UStaticMesh>>     MeshList;                                          // 0x0E98(0x0010)(Edit, BlueprintVisible)
	int32                                         MeshIndex;                                         // 0x0EA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MeshTransitionDistance;                            // 0x0EAC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            CurrentStaticMeshLoaded;                           // 0x0EB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CurrentLoadedMeshComponent;                        // 0x0EB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERandomColorProp_MaterialApply_Enum           MeshMaterialOverride;                              // 0x0EC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC1[0x7];                                      // 0x0EC1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URandomColor_Prop_Palette_C*            currentPalette;                                    // 0x0EC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_RandomColor_Prop(int32 EntryPoint);
	void GetSwatchArray(TArray<class UBuildingTextureData*>* Color_Swatches, int32* Swatch_Count);
	void LoadMesh();
	void RandomMeshByPosition();
	void RandomSwatchByPosition();
	void ReceiveBeginPlay();
	void RunRandomization();
	bool ShouldRandomize();
	void UserConstructionScript();
	void Validate_Visuals_All();
	void ValidateMeshMaterials();
	void ValidateVisuals_Meshes();
	void ValidateVisuals_Swatches();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"RandomColor_Prop_C">();
	}
	static class ARandomColor_Prop_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARandomColor_Prop_C>();
	}
};
static_assert(alignof(ARandomColor_Prop_C) == 0x000008, "Wrong alignment on ARandomColor_Prop_C");
static_assert(sizeof(ARandomColor_Prop_C) == 0x000ED0, "Wrong size on ARandomColor_Prop_C");
static_assert(offsetof(ARandomColor_Prop_C, UberGraphFrame) == 0x000E70, "Member 'ARandomColor_Prop_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ARandomColor_Prop_C, RandomizeSwatchByPosition) == 0x000E78, "Member 'ARandomColor_Prop_C::RandomizeSwatchByPosition' has a wrong offset!");
static_assert(offsetof(ARandomColor_Prop_C, SwatchDataAsset) == 0x000E80, "Member 'ARandomColor_Prop_C::SwatchDataAsset' has a wrong offset!");
static_assert(offsetof(ARandomColor_Prop_C, SwatchIndex) == 0x000E88, "Member 'ARandomColor_Prop_C::SwatchIndex' has a wrong offset!");
static_assert(offsetof(ARandomColor_Prop_C, SwatchTransitionDistance) == 0x000E8C, "Member 'ARandomColor_Prop_C::SwatchTransitionDistance' has a wrong offset!");
static_assert(offsetof(ARandomColor_Prop_C, RandomizeMeshByPosition) == 0x000E90, "Member 'ARandomColor_Prop_C::RandomizeMeshByPosition' has a wrong offset!");
static_assert(offsetof(ARandomColor_Prop_C, MeshList) == 0x000E98, "Member 'ARandomColor_Prop_C::MeshList' has a wrong offset!");
static_assert(offsetof(ARandomColor_Prop_C, MeshIndex) == 0x000EA8, "Member 'ARandomColor_Prop_C::MeshIndex' has a wrong offset!");
static_assert(offsetof(ARandomColor_Prop_C, MeshTransitionDistance) == 0x000EAC, "Member 'ARandomColor_Prop_C::MeshTransitionDistance' has a wrong offset!");
static_assert(offsetof(ARandomColor_Prop_C, CurrentStaticMeshLoaded) == 0x000EB0, "Member 'ARandomColor_Prop_C::CurrentStaticMeshLoaded' has a wrong offset!");
static_assert(offsetof(ARandomColor_Prop_C, CurrentLoadedMeshComponent) == 0x000EB8, "Member 'ARandomColor_Prop_C::CurrentLoadedMeshComponent' has a wrong offset!");
static_assert(offsetof(ARandomColor_Prop_C, MeshMaterialOverride) == 0x000EC0, "Member 'ARandomColor_Prop_C::MeshMaterialOverride' has a wrong offset!");
static_assert(offsetof(ARandomColor_Prop_C, currentPalette) == 0x000EC8, "Member 'ARandomColor_Prop_C::currentPalette' has a wrong offset!");

}

