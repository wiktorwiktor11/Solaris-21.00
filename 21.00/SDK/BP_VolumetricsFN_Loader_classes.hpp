#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VolumetricsFN_Loader

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_VolumetricsFN_Loader.BP_VolumetricsFN_Loader_C
// 0x0050 (0x02C0 - 0x0270)
class ABP_VolumetricsFN_Loader_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0270(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UWorld>                  SequenceLevel;                                     // 0x0280(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class FName                                   LevelName;                                         // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AC[0x4];                                      // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelStreamingDynamic*                 LevelInstance;                                     // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         lastVolumetricQuality;                             // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_VolumetricsFN_Loader(int32 EntryPoint);
	void initVolumetricsFromCvar();
	void OnDataDrivenCVarDelegate_Event_0(const class FString& CVarName);
	void ReceiveBeginPlay();
	void ToggleStormMeshVisibility(bool Visibility);
	void ValidateVolumetricsFromQuality(int32 Quality);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_VolumetricsFN_Loader_C">();
	}
	static class ABP_VolumetricsFN_Loader_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_VolumetricsFN_Loader_C>();
	}
};
static_assert(alignof(ABP_VolumetricsFN_Loader_C) == 0x000008, "Wrong alignment on ABP_VolumetricsFN_Loader_C");
static_assert(sizeof(ABP_VolumetricsFN_Loader_C) == 0x0002C0, "Wrong size on ABP_VolumetricsFN_Loader_C");
static_assert(offsetof(ABP_VolumetricsFN_Loader_C, UberGraphFrame) == 0x000270, "Member 'ABP_VolumetricsFN_Loader_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricsFN_Loader_C, DefaultSceneRoot) == 0x000278, "Member 'ABP_VolumetricsFN_Loader_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricsFN_Loader_C, SequenceLevel) == 0x000280, "Member 'ABP_VolumetricsFN_Loader_C::SequenceLevel' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricsFN_Loader_C, LevelName) == 0x0002A8, "Member 'ABP_VolumetricsFN_Loader_C::LevelName' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricsFN_Loader_C, LevelInstance) == 0x0002B0, "Member 'ABP_VolumetricsFN_Loader_C::LevelInstance' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricsFN_Loader_C, lastVolumetricQuality) == 0x0002B8, "Member 'ABP_VolumetricsFN_Loader_C::lastVolumetricQuality' has a wrong offset!");

}

