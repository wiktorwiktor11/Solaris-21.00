#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PictureInPictureCore

#include "Basic.hpp"

#include "PictureInPictureDescriptors_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "PictureInPictureCore_structs.hpp"


namespace SDK::Params
{

// Function PictureInPictureCore.PictureInPictureSubsystem.EnableFullScreenPiPOption
// 0x0001 (0x0001 - 0x0000)
struct PictureInPictureSubsystem_EnableFullScreenPiPOption final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureSubsystem_EnableFullScreenPiPOption) == 0x000001, "Wrong alignment on PictureInPictureSubsystem_EnableFullScreenPiPOption");
static_assert(sizeof(PictureInPictureSubsystem_EnableFullScreenPiPOption) == 0x000001, "Wrong size on PictureInPictureSubsystem_EnableFullScreenPiPOption");
static_assert(offsetof(PictureInPictureSubsystem_EnableFullScreenPiPOption, bEnable) == 0x000000, "Member 'PictureInPictureSubsystem_EnableFullScreenPiPOption::bEnable' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureSubsystem.GetAutoEnableSetting
// 0x0001 (0x0001 - 0x0000)
struct PictureInPictureSubsystem_GetAutoEnableSetting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureSubsystem_GetAutoEnableSetting) == 0x000001, "Wrong alignment on PictureInPictureSubsystem_GetAutoEnableSetting");
static_assert(sizeof(PictureInPictureSubsystem_GetAutoEnableSetting) == 0x000001, "Wrong size on PictureInPictureSubsystem_GetAutoEnableSetting");
static_assert(offsetof(PictureInPictureSubsystem_GetAutoEnableSetting, ReturnValue) == 0x000000, "Member 'PictureInPictureSubsystem_GetAutoEnableSetting::ReturnValue' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureSubsystem.GetCurrentPartnerClient
// 0x0008 (0x0008 - 0x0000)
struct PictureInPictureSubsystem_GetCurrentPartnerClient final
{
public:
	class UPictureInPictureClient*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureSubsystem_GetCurrentPartnerClient) == 0x000008, "Wrong alignment on PictureInPictureSubsystem_GetCurrentPartnerClient");
static_assert(sizeof(PictureInPictureSubsystem_GetCurrentPartnerClient) == 0x000008, "Wrong size on PictureInPictureSubsystem_GetCurrentPartnerClient");
static_assert(offsetof(PictureInPictureSubsystem_GetCurrentPartnerClient, ReturnValue) == 0x000000, "Member 'PictureInPictureSubsystem_GetCurrentPartnerClient::ReturnValue' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureSubsystem.GetCurrentPartnerController
// 0x0008 (0x0008 - 0x0000)
struct PictureInPictureSubsystem_GetCurrentPartnerController final
{
public:
	class UPictureInPictureMediaController*       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureSubsystem_GetCurrentPartnerController) == 0x000008, "Wrong alignment on PictureInPictureSubsystem_GetCurrentPartnerController");
static_assert(sizeof(PictureInPictureSubsystem_GetCurrentPartnerController) == 0x000008, "Wrong size on PictureInPictureSubsystem_GetCurrentPartnerController");
static_assert(offsetof(PictureInPictureSubsystem_GetCurrentPartnerController, ReturnValue) == 0x000000, "Member 'PictureInPictureSubsystem_GetCurrentPartnerController::ReturnValue' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureSubsystem.GetCurrentPartnerControls
// 0x0008 (0x0008 - 0x0000)
struct PictureInPictureSubsystem_GetCurrentPartnerControls final
{
public:
	class UPictureInPicturePartnerControls*       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureSubsystem_GetCurrentPartnerControls) == 0x000008, "Wrong alignment on PictureInPictureSubsystem_GetCurrentPartnerControls");
static_assert(sizeof(PictureInPictureSubsystem_GetCurrentPartnerControls) == 0x000008, "Wrong size on PictureInPictureSubsystem_GetCurrentPartnerControls");
static_assert(offsetof(PictureInPictureSubsystem_GetCurrentPartnerControls, ReturnValue) == 0x000000, "Member 'PictureInPictureSubsystem_GetCurrentPartnerControls::ReturnValue' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureSubsystem.GetCurrentPartnerItem
// 0x0008 (0x0008 - 0x0000)
struct PictureInPictureSubsystem_GetCurrentPartnerItem final
{
public:
	class UPictureInPicturePartnerDataAsset*      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureSubsystem_GetCurrentPartnerItem) == 0x000008, "Wrong alignment on PictureInPictureSubsystem_GetCurrentPartnerItem");
static_assert(sizeof(PictureInPictureSubsystem_GetCurrentPartnerItem) == 0x000008, "Wrong size on PictureInPictureSubsystem_GetCurrentPartnerItem");
static_assert(offsetof(PictureInPictureSubsystem_GetCurrentPartnerItem, ReturnValue) == 0x000000, "Member 'PictureInPictureSubsystem_GetCurrentPartnerItem::ReturnValue' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureSubsystem.GetLastUsedPartner
// 0x0010 (0x0010 - 0x0000)
struct PictureInPictureSubsystem_GetLastUsedPartner final
{
public:
	class FString                                 OutPartnerName;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureSubsystem_GetLastUsedPartner) == 0x000008, "Wrong alignment on PictureInPictureSubsystem_GetLastUsedPartner");
static_assert(sizeof(PictureInPictureSubsystem_GetLastUsedPartner) == 0x000010, "Wrong size on PictureInPictureSubsystem_GetLastUsedPartner");
static_assert(offsetof(PictureInPictureSubsystem_GetLastUsedPartner, OutPartnerName) == 0x000000, "Member 'PictureInPictureSubsystem_GetLastUsedPartner::OutPartnerName' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureSubsystem.GetLastUsedSource
// 0x0010 (0x0010 - 0x0000)
struct PictureInPictureSubsystem_GetLastUsedSource final
{
public:
	class FString                                 OutPartnerSourceName;                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureSubsystem_GetLastUsedSource) == 0x000008, "Wrong alignment on PictureInPictureSubsystem_GetLastUsedSource");
static_assert(sizeof(PictureInPictureSubsystem_GetLastUsedSource) == 0x000010, "Wrong size on PictureInPictureSubsystem_GetLastUsedSource");
static_assert(offsetof(PictureInPictureSubsystem_GetLastUsedSource, OutPartnerSourceName) == 0x000000, "Member 'PictureInPictureSubsystem_GetLastUsedSource::OutPartnerSourceName' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureSubsystem.GetPartnerClient
// 0x0018 (0x0018 - 0x0000)
struct PictureInPictureSubsystem_GetPartnerClient final
{
public:
	class FString                                 PartnerName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPictureInPictureClient*                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureSubsystem_GetPartnerClient) == 0x000008, "Wrong alignment on PictureInPictureSubsystem_GetPartnerClient");
static_assert(sizeof(PictureInPictureSubsystem_GetPartnerClient) == 0x000018, "Wrong size on PictureInPictureSubsystem_GetPartnerClient");
static_assert(offsetof(PictureInPictureSubsystem_GetPartnerClient, PartnerName) == 0x000000, "Member 'PictureInPictureSubsystem_GetPartnerClient::PartnerName' has a wrong offset!");
static_assert(offsetof(PictureInPictureSubsystem_GetPartnerClient, ReturnValue) == 0x000010, "Member 'PictureInPictureSubsystem_GetPartnerClient::ReturnValue' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureSubsystem.GetPartnerController
// 0x0018 (0x0018 - 0x0000)
struct PictureInPictureSubsystem_GetPartnerController final
{
public:
	class FString                                 PartnerName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPictureInPictureMediaController*       ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureSubsystem_GetPartnerController) == 0x000008, "Wrong alignment on PictureInPictureSubsystem_GetPartnerController");
static_assert(sizeof(PictureInPictureSubsystem_GetPartnerController) == 0x000018, "Wrong size on PictureInPictureSubsystem_GetPartnerController");
static_assert(offsetof(PictureInPictureSubsystem_GetPartnerController, PartnerName) == 0x000000, "Member 'PictureInPictureSubsystem_GetPartnerController::PartnerName' has a wrong offset!");
static_assert(offsetof(PictureInPictureSubsystem_GetPartnerController, ReturnValue) == 0x000010, "Member 'PictureInPictureSubsystem_GetPartnerController::ReturnValue' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureSubsystem.GetPartnerControls
// 0x0018 (0x0018 - 0x0000)
struct PictureInPictureSubsystem_GetPartnerControls final
{
public:
	class FString                                 PartnerName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPictureInPicturePartnerControls*       ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureSubsystem_GetPartnerControls) == 0x000008, "Wrong alignment on PictureInPictureSubsystem_GetPartnerControls");
static_assert(sizeof(PictureInPictureSubsystem_GetPartnerControls) == 0x000018, "Wrong size on PictureInPictureSubsystem_GetPartnerControls");
static_assert(offsetof(PictureInPictureSubsystem_GetPartnerControls, PartnerName) == 0x000000, "Member 'PictureInPictureSubsystem_GetPartnerControls::PartnerName' has a wrong offset!");
static_assert(offsetof(PictureInPictureSubsystem_GetPartnerControls, ReturnValue) == 0x000010, "Member 'PictureInPictureSubsystem_GetPartnerControls::ReturnValue' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureSubsystem.GetPartnerItem
// 0x0018 (0x0018 - 0x0000)
struct PictureInPictureSubsystem_GetPartnerItem final
{
public:
	class FString                                 PartnerName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPictureInPicturePartnerDataAsset*      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureSubsystem_GetPartnerItem) == 0x000008, "Wrong alignment on PictureInPictureSubsystem_GetPartnerItem");
static_assert(sizeof(PictureInPictureSubsystem_GetPartnerItem) == 0x000018, "Wrong size on PictureInPictureSubsystem_GetPartnerItem");
static_assert(offsetof(PictureInPictureSubsystem_GetPartnerItem, PartnerName) == 0x000000, "Member 'PictureInPictureSubsystem_GetPartnerItem::PartnerName' has a wrong offset!");
static_assert(offsetof(PictureInPictureSubsystem_GetPartnerItem, ReturnValue) == 0x000010, "Member 'PictureInPictureSubsystem_GetPartnerItem::ReturnValue' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureSubsystem.GetPartnerItemList
// 0x0010 (0x0010 - 0x0000)
struct PictureInPictureSubsystem_GetPartnerItemList final
{
public:
	TArray<class UPictureInPicturePartnerDataAsset*> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureSubsystem_GetPartnerItemList) == 0x000008, "Wrong alignment on PictureInPictureSubsystem_GetPartnerItemList");
static_assert(sizeof(PictureInPictureSubsystem_GetPartnerItemList) == 0x000010, "Wrong size on PictureInPictureSubsystem_GetPartnerItemList");
static_assert(offsetof(PictureInPictureSubsystem_GetPartnerItemList, ReturnValue) == 0x000000, "Member 'PictureInPictureSubsystem_GetPartnerItemList::ReturnValue' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureSubsystem.HandleFNEventsSetCurrentMediaControllerEnabled
// 0x0001 (0x0001 - 0x0000)
struct PictureInPictureSubsystem_HandleFNEventsSetCurrentMediaControllerEnabled final
{
public:
	bool                                          InEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureSubsystem_HandleFNEventsSetCurrentMediaControllerEnabled) == 0x000001, "Wrong alignment on PictureInPictureSubsystem_HandleFNEventsSetCurrentMediaControllerEnabled");
static_assert(sizeof(PictureInPictureSubsystem_HandleFNEventsSetCurrentMediaControllerEnabled) == 0x000001, "Wrong size on PictureInPictureSubsystem_HandleFNEventsSetCurrentMediaControllerEnabled");
static_assert(offsetof(PictureInPictureSubsystem_HandleFNEventsSetCurrentMediaControllerEnabled, InEnabled) == 0x000000, "Member 'PictureInPictureSubsystem_HandleFNEventsSetCurrentMediaControllerEnabled::InEnabled' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureSubsystem.IsPartnerListUpdated
// 0x0001 (0x0001 - 0x0000)
struct PictureInPictureSubsystem_IsPartnerListUpdated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureSubsystem_IsPartnerListUpdated) == 0x000001, "Wrong alignment on PictureInPictureSubsystem_IsPartnerListUpdated");
static_assert(sizeof(PictureInPictureSubsystem_IsPartnerListUpdated) == 0x000001, "Wrong size on PictureInPictureSubsystem_IsPartnerListUpdated");
static_assert(offsetof(PictureInPictureSubsystem_IsPartnerListUpdated, ReturnValue) == 0x000000, "Member 'PictureInPictureSubsystem_IsPartnerListUpdated::ReturnValue' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureSubsystem.OnCMSEventInvalid
// 0x0008 (0x0008 - 0x0000)
struct PictureInPictureSubsystem_OnCMSEventInvalid final
{
public:
	const class UMediaCMSEvent*                   InvalidEvent;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureSubsystem_OnCMSEventInvalid) == 0x000008, "Wrong alignment on PictureInPictureSubsystem_OnCMSEventInvalid");
static_assert(sizeof(PictureInPictureSubsystem_OnCMSEventInvalid) == 0x000008, "Wrong size on PictureInPictureSubsystem_OnCMSEventInvalid");
static_assert(offsetof(PictureInPictureSubsystem_OnCMSEventInvalid, InvalidEvent) == 0x000000, "Member 'PictureInPictureSubsystem_OnCMSEventInvalid::InvalidEvent' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureSubsystem.OnCMSEventValid
// 0x0008 (0x0008 - 0x0000)
struct PictureInPictureSubsystem_OnCMSEventValid final
{
public:
	const class UMediaCMSEvent*                   ValidEvent;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureSubsystem_OnCMSEventValid) == 0x000008, "Wrong alignment on PictureInPictureSubsystem_OnCMSEventValid");
static_assert(sizeof(PictureInPictureSubsystem_OnCMSEventValid) == 0x000008, "Wrong size on PictureInPictureSubsystem_OnCMSEventValid");
static_assert(offsetof(PictureInPictureSubsystem_OnCMSEventValid, ValidEvent) == 0x000000, "Member 'PictureInPictureSubsystem_OnCMSEventValid::ValidEvent' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureSubsystem.OnCurrentPartnerSourceSelected
// 0x0128 (0x0128 - 0x0000)
struct PictureInPictureSubsystem_OnCurrentPartnerSourceSelected final
{
public:
	struct FPiPPartnerSource                      SelectedSource;                                    // 0x0000(0x0128)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureSubsystem_OnCurrentPartnerSourceSelected) == 0x000008, "Wrong alignment on PictureInPictureSubsystem_OnCurrentPartnerSourceSelected");
static_assert(sizeof(PictureInPictureSubsystem_OnCurrentPartnerSourceSelected) == 0x000128, "Wrong size on PictureInPictureSubsystem_OnCurrentPartnerSourceSelected");
static_assert(offsetof(PictureInPictureSubsystem_OnCurrentPartnerSourceSelected, SelectedSource) == 0x000000, "Member 'PictureInPictureSubsystem_OnCurrentPartnerSourceSelected::SelectedSource' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureSubsystem.StoreAutoEnableSetting
// 0x0001 (0x0001 - 0x0000)
struct PictureInPictureSubsystem_StoreAutoEnableSetting final
{
public:
	bool                                          InUserEnabled;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureSubsystem_StoreAutoEnableSetting) == 0x000001, "Wrong alignment on PictureInPictureSubsystem_StoreAutoEnableSetting");
static_assert(sizeof(PictureInPictureSubsystem_StoreAutoEnableSetting) == 0x000001, "Wrong size on PictureInPictureSubsystem_StoreAutoEnableSetting");
static_assert(offsetof(PictureInPictureSubsystem_StoreAutoEnableSetting, InUserEnabled) == 0x000000, "Member 'PictureInPictureSubsystem_StoreAutoEnableSetting::InUserEnabled' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureSubsystem.StoreLastUsedPartner
// 0x0010 (0x0010 - 0x0000)
struct PictureInPictureSubsystem_StoreLastUsedPartner final
{
public:
	class FString                                 InPartnerName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureSubsystem_StoreLastUsedPartner) == 0x000008, "Wrong alignment on PictureInPictureSubsystem_StoreLastUsedPartner");
static_assert(sizeof(PictureInPictureSubsystem_StoreLastUsedPartner) == 0x000010, "Wrong size on PictureInPictureSubsystem_StoreLastUsedPartner");
static_assert(offsetof(PictureInPictureSubsystem_StoreLastUsedPartner, InPartnerName) == 0x000000, "Member 'PictureInPictureSubsystem_StoreLastUsedPartner::InPartnerName' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureSubsystem.StoreLastUsedSource
// 0x0010 (0x0010 - 0x0000)
struct PictureInPictureSubsystem_StoreLastUsedSource final
{
public:
	class FString                                 InPartnerSourceName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureSubsystem_StoreLastUsedSource) == 0x000008, "Wrong alignment on PictureInPictureSubsystem_StoreLastUsedSource");
static_assert(sizeof(PictureInPictureSubsystem_StoreLastUsedSource) == 0x000010, "Wrong size on PictureInPictureSubsystem_StoreLastUsedSource");
static_assert(offsetof(PictureInPictureSubsystem_StoreLastUsedSource, InPartnerSourceName) == 0x000000, "Member 'PictureInPictureSubsystem_StoreLastUsedSource::InPartnerSourceName' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureSubsystem.UpdatePartnerItemList
// 0x0010 (0x0010 - 0x0000)
struct PictureInPictureSubsystem_UpdatePartnerItemList final
{
public:
	class UObject*                                InWorldContext;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PictureInPictureSubsystem_UpdatePartnerItemList) == 0x000008, "Wrong alignment on PictureInPictureSubsystem_UpdatePartnerItemList");
static_assert(sizeof(PictureInPictureSubsystem_UpdatePartnerItemList) == 0x000010, "Wrong size on PictureInPictureSubsystem_UpdatePartnerItemList");
static_assert(offsetof(PictureInPictureSubsystem_UpdatePartnerItemList, InWorldContext) == 0x000000, "Member 'PictureInPictureSubsystem_UpdatePartnerItemList::InWorldContext' has a wrong offset!");
static_assert(offsetof(PictureInPictureSubsystem_UpdatePartnerItemList, bForce) == 0x000008, "Member 'PictureInPictureSubsystem_UpdatePartnerItemList::bForce' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureMediaController.Exit
// 0x0001 (0x0001 - 0x0000)
struct PictureInPictureMediaController_Exit final
{
public:
	bool                                          bStop;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureMediaController_Exit) == 0x000001, "Wrong alignment on PictureInPictureMediaController_Exit");
static_assert(sizeof(PictureInPictureMediaController_Exit) == 0x000001, "Wrong size on PictureInPictureMediaController_Exit");
static_assert(offsetof(PictureInPictureMediaController_Exit, bStop) == 0x000000, "Member 'PictureInPictureMediaController_Exit::bStop' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureMediaController.GetActions
// 0x0010 (0x0010 - 0x0000)
struct PictureInPictureMediaController_GetActions final
{
public:
	TArray<class UPictureInPictureActionData*>    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureMediaController_GetActions) == 0x000008, "Wrong alignment on PictureInPictureMediaController_GetActions");
static_assert(sizeof(PictureInPictureMediaController_GetActions) == 0x000010, "Wrong size on PictureInPictureMediaController_GetActions");
static_assert(offsetof(PictureInPictureMediaController_GetActions, ReturnValue) == 0x000000, "Member 'PictureInPictureMediaController_GetActions::ReturnValue' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureMediaController.GetCurrentSource
// 0x0128 (0x0128 - 0x0000)
struct PictureInPictureMediaController_GetCurrentSource final
{
public:
	struct FPiPPartnerSource                      ReturnValue;                                       // 0x0000(0x0128)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureMediaController_GetCurrentSource) == 0x000008, "Wrong alignment on PictureInPictureMediaController_GetCurrentSource");
static_assert(sizeof(PictureInPictureMediaController_GetCurrentSource) == 0x000128, "Wrong size on PictureInPictureMediaController_GetCurrentSource");
static_assert(offsetof(PictureInPictureMediaController_GetCurrentSource, ReturnValue) == 0x000000, "Member 'PictureInPictureMediaController_GetCurrentSource::ReturnValue' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureMediaController.GetSources
// 0x0010 (0x0010 - 0x0000)
struct PictureInPictureMediaController_GetSources final
{
public:
	TArray<struct FPiPPartnerSource>              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureMediaController_GetSources) == 0x000008, "Wrong alignment on PictureInPictureMediaController_GetSources");
static_assert(sizeof(PictureInPictureMediaController_GetSources) == 0x000010, "Wrong size on PictureInPictureMediaController_GetSources");
static_assert(offsetof(PictureInPictureMediaController_GetSources, ReturnValue) == 0x000000, "Member 'PictureInPictureMediaController_GetSources::ReturnValue' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureMediaController.GetValidSources
// 0x0010 (0x0010 - 0x0000)
struct PictureInPictureMediaController_GetValidSources final
{
public:
	TArray<struct FPiPPartnerSource>              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureMediaController_GetValidSources) == 0x000008, "Wrong alignment on PictureInPictureMediaController_GetValidSources");
static_assert(sizeof(PictureInPictureMediaController_GetValidSources) == 0x000010, "Wrong size on PictureInPictureMediaController_GetValidSources");
static_assert(offsetof(PictureInPictureMediaController_GetValidSources, ReturnValue) == 0x000000, "Member 'PictureInPictureMediaController_GetValidSources::ReturnValue' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureMediaController.HandleSourceSelectedEvent
// 0x0010 (0x0010 - 0x0000)
struct PictureInPictureMediaController_HandleSourceSelectedEvent final
{
public:
	class FString                                 SelectedSource;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureMediaController_HandleSourceSelectedEvent) == 0x000008, "Wrong alignment on PictureInPictureMediaController_HandleSourceSelectedEvent");
static_assert(sizeof(PictureInPictureMediaController_HandleSourceSelectedEvent) == 0x000010, "Wrong size on PictureInPictureMediaController_HandleSourceSelectedEvent");
static_assert(offsetof(PictureInPictureMediaController_HandleSourceSelectedEvent, SelectedSource) == 0x000000, "Member 'PictureInPictureMediaController_HandleSourceSelectedEvent::SelectedSource' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureMediaController.IsMultiSourceSupported
// 0x0001 (0x0001 - 0x0000)
struct PictureInPictureMediaController_IsMultiSourceSupported final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureMediaController_IsMultiSourceSupported) == 0x000001, "Wrong alignment on PictureInPictureMediaController_IsMultiSourceSupported");
static_assert(sizeof(PictureInPictureMediaController_IsMultiSourceSupported) == 0x000001, "Wrong size on PictureInPictureMediaController_IsMultiSourceSupported");
static_assert(offsetof(PictureInPictureMediaController_IsMultiSourceSupported, ReturnValue) == 0x000000, "Member 'PictureInPictureMediaController_IsMultiSourceSupported::ReturnValue' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureMediaController.IsPaused
// 0x0001 (0x0001 - 0x0000)
struct PictureInPictureMediaController_IsPaused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureMediaController_IsPaused) == 0x000001, "Wrong alignment on PictureInPictureMediaController_IsPaused");
static_assert(sizeof(PictureInPictureMediaController_IsPaused) == 0x000001, "Wrong size on PictureInPictureMediaController_IsPaused");
static_assert(offsetof(PictureInPictureMediaController_IsPaused, ReturnValue) == 0x000000, "Member 'PictureInPictureMediaController_IsPaused::ReturnValue' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureMediaController.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct PictureInPictureMediaController_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureMediaController_IsPlaying) == 0x000001, "Wrong alignment on PictureInPictureMediaController_IsPlaying");
static_assert(sizeof(PictureInPictureMediaController_IsPlaying) == 0x000001, "Wrong size on PictureInPictureMediaController_IsPlaying");
static_assert(offsetof(PictureInPictureMediaController_IsPlaying, ReturnValue) == 0x000000, "Member 'PictureInPictureMediaController_IsPlaying::ReturnValue' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureMediaController.OnNextThumbnailReceived
// 0x0008 (0x0008 - 0x0000)
struct PictureInPictureMediaController_OnNextThumbnailReceived final
{
public:
	class UTexture2DDynamic*                      InTexture;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureMediaController_OnNextThumbnailReceived) == 0x000008, "Wrong alignment on PictureInPictureMediaController_OnNextThumbnailReceived");
static_assert(sizeof(PictureInPictureMediaController_OnNextThumbnailReceived) == 0x000008, "Wrong size on PictureInPictureMediaController_OnNextThumbnailReceived");
static_assert(offsetof(PictureInPictureMediaController_OnNextThumbnailReceived, InTexture) == 0x000000, "Member 'PictureInPictureMediaController_OnNextThumbnailReceived::InTexture' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureMediaController.OnPrevThumbnailReceived
// 0x0008 (0x0008 - 0x0000)
struct PictureInPictureMediaController_OnPrevThumbnailReceived final
{
public:
	class UTexture2DDynamic*                      InTexture;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureMediaController_OnPrevThumbnailReceived) == 0x000008, "Wrong alignment on PictureInPictureMediaController_OnPrevThumbnailReceived");
static_assert(sizeof(PictureInPictureMediaController_OnPrevThumbnailReceived) == 0x000008, "Wrong size on PictureInPictureMediaController_OnPrevThumbnailReceived");
static_assert(offsetof(PictureInPictureMediaController_OnPrevThumbnailReceived, InTexture) == 0x000000, "Member 'PictureInPictureMediaController_OnPrevThumbnailReceived::InTexture' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureMediaController.Play
// 0x0001 (0x0001 - 0x0000)
struct PictureInPictureMediaController_Play final
{
public:
	bool                                          bForcePlay;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureMediaController_Play) == 0x000001, "Wrong alignment on PictureInPictureMediaController_Play");
static_assert(sizeof(PictureInPictureMediaController_Play) == 0x000001, "Wrong size on PictureInPictureMediaController_Play");
static_assert(offsetof(PictureInPictureMediaController_Play, bForcePlay) == 0x000000, "Member 'PictureInPictureMediaController_Play::bForcePlay' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureMediaController.SetCurrentSource
// 0x0128 (0x0128 - 0x0000)
struct PictureInPictureMediaController_SetCurrentSource final
{
public:
	struct FPiPPartnerSource                      SelectedSource;                                    // 0x0000(0x0128)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureMediaController_SetCurrentSource) == 0x000008, "Wrong alignment on PictureInPictureMediaController_SetCurrentSource");
static_assert(sizeof(PictureInPictureMediaController_SetCurrentSource) == 0x000128, "Wrong size on PictureInPictureMediaController_SetCurrentSource");
static_assert(offsetof(PictureInPictureMediaController_SetCurrentSource, SelectedSource) == 0x000000, "Member 'PictureInPictureMediaController_SetCurrentSource::SelectedSource' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureMediaController.SetEnabled
// 0x0002 (0x0002 - 0x0000)
struct PictureInPictureMediaController_SetEnabled final
{
public:
	bool                                          bIsEnabled;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFromUser;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureMediaController_SetEnabled) == 0x000001, "Wrong alignment on PictureInPictureMediaController_SetEnabled");
static_assert(sizeof(PictureInPictureMediaController_SetEnabled) == 0x000002, "Wrong size on PictureInPictureMediaController_SetEnabled");
static_assert(offsetof(PictureInPictureMediaController_SetEnabled, bIsEnabled) == 0x000000, "Member 'PictureInPictureMediaController_SetEnabled::bIsEnabled' has a wrong offset!");
static_assert(offsetof(PictureInPictureMediaController_SetEnabled, bIsFromUser) == 0x000001, "Member 'PictureInPictureMediaController_SetEnabled::bIsFromUser' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureMediaController.GetDefaultPlayerAssetConfig
// 0x0088 (0x0088 - 0x0000)
struct PictureInPictureMediaController_GetDefaultPlayerAssetConfig final
{
public:
	struct FPIPVideoPlayerAssetConfig             ReturnValue;                                       // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureMediaController_GetDefaultPlayerAssetConfig) == 0x000008, "Wrong alignment on PictureInPictureMediaController_GetDefaultPlayerAssetConfig");
static_assert(sizeof(PictureInPictureMediaController_GetDefaultPlayerAssetConfig) == 0x000088, "Wrong size on PictureInPictureMediaController_GetDefaultPlayerAssetConfig");
static_assert(offsetof(PictureInPictureMediaController_GetDefaultPlayerAssetConfig, ReturnValue) == 0x000000, "Member 'PictureInPictureMediaController_GetDefaultPlayerAssetConfig::ReturnValue' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureMediaController.GetMediaPlayerWidget
// 0x0008 (0x0008 - 0x0000)
struct PictureInPictureMediaController_GetMediaPlayerWidget final
{
public:
	class UPictureInPicturePlayer*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureMediaController_GetMediaPlayerWidget) == 0x000008, "Wrong alignment on PictureInPictureMediaController_GetMediaPlayerWidget");
static_assert(sizeof(PictureInPictureMediaController_GetMediaPlayerWidget) == 0x000008, "Wrong size on PictureInPictureMediaController_GetMediaPlayerWidget");
static_assert(offsetof(PictureInPictureMediaController_GetMediaPlayerWidget, ReturnValue) == 0x000000, "Member 'PictureInPictureMediaController_GetMediaPlayerWidget::ReturnValue' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureMediaController.GetPlayerAssetConfig
// 0x0088 (0x0088 - 0x0000)
struct PictureInPictureMediaController_GetPlayerAssetConfig final
{
public:
	struct FPIPVideoPlayerAssetConfig             ReturnValue;                                       // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureMediaController_GetPlayerAssetConfig) == 0x000008, "Wrong alignment on PictureInPictureMediaController_GetPlayerAssetConfig");
static_assert(sizeof(PictureInPictureMediaController_GetPlayerAssetConfig) == 0x000088, "Wrong size on PictureInPictureMediaController_GetPlayerAssetConfig");
static_assert(offsetof(PictureInPictureMediaController_GetPlayerAssetConfig, ReturnValue) == 0x000000, "Member 'PictureInPictureMediaController_GetPlayerAssetConfig::ReturnValue' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureMediaController.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct PictureInPictureMediaController_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureMediaController_IsEnabled) == 0x000001, "Wrong alignment on PictureInPictureMediaController_IsEnabled");
static_assert(sizeof(PictureInPictureMediaController_IsEnabled) == 0x000001, "Wrong size on PictureInPictureMediaController_IsEnabled");
static_assert(offsetof(PictureInPictureMediaController_IsEnabled, ReturnValue) == 0x000000, "Member 'PictureInPictureMediaController_IsEnabled::ReturnValue' has a wrong offset!");

// Function PictureInPictureCore.PictureInPicturePlayer.HandleUCPAudioChanged
// 0x0008 (0x0008 - 0x0000)
struct PictureInPicturePlayer_HandleUCPAudioChanged final
{
public:
	class UFortClientSettingsRecord*              Settings;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPicturePlayer_HandleUCPAudioChanged) == 0x000008, "Wrong alignment on PictureInPicturePlayer_HandleUCPAudioChanged");
static_assert(sizeof(PictureInPicturePlayer_HandleUCPAudioChanged) == 0x000008, "Wrong size on PictureInPicturePlayer_HandleUCPAudioChanged");
static_assert(offsetof(PictureInPicturePlayer_HandleUCPAudioChanged, Settings) == 0x000000, "Member 'PictureInPicturePlayer_HandleUCPAudioChanged::Settings' has a wrong offset!");

// Function PictureInPictureCore.PictureInPicturePlayer.IsAssetConfigSet
// 0x0001 (0x0001 - 0x0000)
struct PictureInPicturePlayer_IsAssetConfigSet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPicturePlayer_IsAssetConfigSet) == 0x000001, "Wrong alignment on PictureInPicturePlayer_IsAssetConfigSet");
static_assert(sizeof(PictureInPicturePlayer_IsAssetConfigSet) == 0x000001, "Wrong size on PictureInPicturePlayer_IsAssetConfigSet");
static_assert(offsetof(PictureInPicturePlayer_IsAssetConfigSet, ReturnValue) == 0x000000, "Member 'PictureInPicturePlayer_IsAssetConfigSet::ReturnValue' has a wrong offset!");

// Function PictureInPictureCore.PictureInPicturePlayer.SetPlayerAssetConfig
// 0x0090 (0x0090 - 0x0000)
struct PictureInPicturePlayer_SetPlayerAssetConfig final
{
public:
	struct FPIPVideoPlayerAssetConfig             InAssetConfig;                                     // 0x0000(0x0088)(Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PictureInPicturePlayer_SetPlayerAssetConfig) == 0x000008, "Wrong alignment on PictureInPicturePlayer_SetPlayerAssetConfig");
static_assert(sizeof(PictureInPicturePlayer_SetPlayerAssetConfig) == 0x000090, "Wrong size on PictureInPicturePlayer_SetPlayerAssetConfig");
static_assert(offsetof(PictureInPicturePlayer_SetPlayerAssetConfig, InAssetConfig) == 0x000000, "Member 'PictureInPicturePlayer_SetPlayerAssetConfig::InAssetConfig' has a wrong offset!");
static_assert(offsetof(PictureInPicturePlayer_SetPlayerAssetConfig, ReturnValue) == 0x000088, "Member 'PictureInPicturePlayer_SetPlayerAssetConfig::ReturnValue' has a wrong offset!");

// Function PictureInPictureCore.PictureInPicturePlayer.StreamedVideoOnUrlFailure
// 0x0010 (0x0010 - 0x0000)
struct PictureInPicturePlayer_StreamedVideoOnUrlFailure final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPicturePlayer_StreamedVideoOnUrlFailure) == 0x000008, "Wrong alignment on PictureInPicturePlayer_StreamedVideoOnUrlFailure");
static_assert(sizeof(PictureInPicturePlayer_StreamedVideoOnUrlFailure) == 0x000010, "Wrong size on PictureInPicturePlayer_StreamedVideoOnUrlFailure");
static_assert(offsetof(PictureInPicturePlayer_StreamedVideoOnUrlFailure, URL) == 0x000000, "Member 'PictureInPicturePlayer_StreamedVideoOnUrlFailure::URL' has a wrong offset!");

// Function PictureInPictureCore.PictureInPicturePlayer.StreamedVideoOnUrlSuccess
// 0x0010 (0x0010 - 0x0000)
struct PictureInPicturePlayer_StreamedVideoOnUrlSuccess final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPicturePlayer_StreamedVideoOnUrlSuccess) == 0x000008, "Wrong alignment on PictureInPicturePlayer_StreamedVideoOnUrlSuccess");
static_assert(sizeof(PictureInPicturePlayer_StreamedVideoOnUrlSuccess) == 0x000010, "Wrong size on PictureInPicturePlayer_StreamedVideoOnUrlSuccess");
static_assert(offsetof(PictureInPicturePlayer_StreamedVideoOnUrlSuccess, URL) == 0x000000, "Member 'PictureInPicturePlayer_StreamedVideoOnUrlSuccess::URL' has a wrong offset!");

// Function PictureInPictureCore.PictureInPicturePlayer.UpdateStreamingPlayerSize
// 0x0010 (0x0010 - 0x0000)
struct PictureInPicturePlayer_UpdateStreamingPlayerSize final
{
public:
	struct FVector2D                              InVector;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPicturePlayer_UpdateStreamingPlayerSize) == 0x000008, "Wrong alignment on PictureInPicturePlayer_UpdateStreamingPlayerSize");
static_assert(sizeof(PictureInPicturePlayer_UpdateStreamingPlayerSize) == 0x000010, "Wrong size on PictureInPicturePlayer_UpdateStreamingPlayerSize");
static_assert(offsetof(PictureInPicturePlayer_UpdateStreamingPlayerSize, InVector) == 0x000000, "Member 'PictureInPicturePlayer_UpdateStreamingPlayerSize::InVector' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureClient.BeginLogin
// 0x0008 (0x0008 - 0x0000)
struct PictureInPictureClient_BeginLogin final
{
public:
	class UObject*                                InWorldContext;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureClient_BeginLogin) == 0x000008, "Wrong alignment on PictureInPictureClient_BeginLogin");
static_assert(sizeof(PictureInPictureClient_BeginLogin) == 0x000008, "Wrong size on PictureInPictureClient_BeginLogin");
static_assert(offsetof(PictureInPictureClient_BeginLogin, InWorldContext) == 0x000000, "Member 'PictureInPictureClient_BeginLogin::InWorldContext' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureClient.CheckLogin
// 0x0008 (0x0008 - 0x0000)
struct PictureInPictureClient_CheckLogin final
{
public:
	class UObject*                                InWorldContext;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureClient_CheckLogin) == 0x000008, "Wrong alignment on PictureInPictureClient_CheckLogin");
static_assert(sizeof(PictureInPictureClient_CheckLogin) == 0x000008, "Wrong size on PictureInPictureClient_CheckLogin");
static_assert(offsetof(PictureInPictureClient_CheckLogin, InWorldContext) == 0x000000, "Member 'PictureInPictureClient_CheckLogin::InWorldContext' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureClient.EndLogin
// 0x0008 (0x0008 - 0x0000)
struct PictureInPictureClient_EndLogin final
{
public:
	class UObject*                                InWorldContext;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureClient_EndLogin) == 0x000008, "Wrong alignment on PictureInPictureClient_EndLogin");
static_assert(sizeof(PictureInPictureClient_EndLogin) == 0x000008, "Wrong size on PictureInPictureClient_EndLogin");
static_assert(offsetof(PictureInPictureClient_EndLogin, InWorldContext) == 0x000000, "Member 'PictureInPictureClient_EndLogin::InWorldContext' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureClient.GetAvatarImage
// 0x0008 (0x0008 - 0x0000)
struct PictureInPictureClient_GetAvatarImage final
{
public:
	class UEpicCMSImage*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureClient_GetAvatarImage) == 0x000008, "Wrong alignment on PictureInPictureClient_GetAvatarImage");
static_assert(sizeof(PictureInPictureClient_GetAvatarImage) == 0x000008, "Wrong size on PictureInPictureClient_GetAvatarImage");
static_assert(offsetof(PictureInPictureClient_GetAvatarImage, ReturnValue) == 0x000000, "Member 'PictureInPictureClient_GetAvatarImage::ReturnValue' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureClient.GetLoginState
// 0x0001 (0x0001 - 0x0000)
struct PictureInPictureClient_GetLoginState final
{
public:
	EPictureInPictureAuthState                    ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureClient_GetLoginState) == 0x000001, "Wrong alignment on PictureInPictureClient_GetLoginState");
static_assert(sizeof(PictureInPictureClient_GetLoginState) == 0x000001, "Wrong size on PictureInPictureClient_GetLoginState");
static_assert(offsetof(PictureInPictureClient_GetLoginState, ReturnValue) == 0x000000, "Member 'PictureInPictureClient_GetLoginState::ReturnValue' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureClient.GetQRCodeTexture
// 0x0008 (0x0008 - 0x0000)
struct PictureInPictureClient_GetQRCodeTexture final
{
public:
	class UTexture2DDynamic*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureClient_GetQRCodeTexture) == 0x000008, "Wrong alignment on PictureInPictureClient_GetQRCodeTexture");
static_assert(sizeof(PictureInPictureClient_GetQRCodeTexture) == 0x000008, "Wrong size on PictureInPictureClient_GetQRCodeTexture");
static_assert(offsetof(PictureInPictureClient_GetQRCodeTexture, ReturnValue) == 0x000000, "Member 'PictureInPictureClient_GetQRCodeTexture::ReturnValue' has a wrong offset!");

// Function PictureInPictureCore.PictureInPictureClient.IsLoggedIn
// 0x0001 (0x0001 - 0x0000)
struct PictureInPictureClient_IsLoggedIn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PictureInPictureClient_IsLoggedIn) == 0x000001, "Wrong alignment on PictureInPictureClient_IsLoggedIn");
static_assert(sizeof(PictureInPictureClient_IsLoggedIn) == 0x000001, "Wrong size on PictureInPictureClient_IsLoggedIn");
static_assert(offsetof(PictureInPictureClient_IsLoggedIn, ReturnValue) == 0x000000, "Member 'PictureInPictureClient_IsLoggedIn::ReturnValue' has a wrong offset!");

}

