#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MotherGameplayRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "MotherGameplayRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GameplayTags_0_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// Class MotherGameplayRuntime.ReactorGradeGameplayCue_ChargeUp
// 0x0088 (0x09D0 - 0x0948)
class AReactorGradeGameplayCue_ChargeUp final : public AFortGameplayCueNotify_Loop
{
public:
	class AFortPawn*                              Pawn;                                              // 0x0948(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortWeaponFxComponent_ChargeAimLocation* CachedAimLocationComponent;                        // 0x0950(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                FoundEndPoint;                                     // 0x0958(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FScalableFloat                         MinHitDistance;                                    // 0x0970(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         HitObjectsLimit;                                   // 0x0998(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_9C0[0x4];                                      // 0x09C0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	ECollisionChannel                             TraceChannel;                                      // 0x09C4(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9C5[0xB];                                      // 0x09C5(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnEndPointUpdated(const struct FVector& FoundPoint);
	void UpdateAimEndPoint();

	const struct FVector GetFoundEndPoint() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ReactorGradeGameplayCue_ChargeUp">();
	}
	static class AReactorGradeGameplayCue_ChargeUp* GetDefaultObj()
	{
		return GetDefaultObjImpl<AReactorGradeGameplayCue_ChargeUp>();
	}
};
static_assert(alignof(AReactorGradeGameplayCue_ChargeUp) == 0x000008, "Wrong alignment on AReactorGradeGameplayCue_ChargeUp");
static_assert(sizeof(AReactorGradeGameplayCue_ChargeUp) == 0x0009D0, "Wrong size on AReactorGradeGameplayCue_ChargeUp");
static_assert(offsetof(AReactorGradeGameplayCue_ChargeUp, Pawn) == 0x000948, "Member 'AReactorGradeGameplayCue_ChargeUp::Pawn' has a wrong offset!");
static_assert(offsetof(AReactorGradeGameplayCue_ChargeUp, CachedAimLocationComponent) == 0x000950, "Member 'AReactorGradeGameplayCue_ChargeUp::CachedAimLocationComponent' has a wrong offset!");
static_assert(offsetof(AReactorGradeGameplayCue_ChargeUp, FoundEndPoint) == 0x000958, "Member 'AReactorGradeGameplayCue_ChargeUp::FoundEndPoint' has a wrong offset!");
static_assert(offsetof(AReactorGradeGameplayCue_ChargeUp, MinHitDistance) == 0x000970, "Member 'AReactorGradeGameplayCue_ChargeUp::MinHitDistance' has a wrong offset!");
static_assert(offsetof(AReactorGradeGameplayCue_ChargeUp, HitObjectsLimit) == 0x000998, "Member 'AReactorGradeGameplayCue_ChargeUp::HitObjectsLimit' has a wrong offset!");
static_assert(offsetof(AReactorGradeGameplayCue_ChargeUp, TraceChannel) == 0x0009C4, "Member 'AReactorGradeGameplayCue_ChargeUp::TraceChannel' has a wrong offset!");

// Class MotherGameplayRuntime.FortBaseAnimInstance_CageSaddle
// 0x0170 (0x0550 - 0x03E0)
class UFortBaseAnimInstance_CageSaddle final : public UFortBaseAnimInstance
{
public:
	class AFortSphericalVehicle*                  AsFortSphericalVehicle;                            // 0x03E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOnGround;                                       // 0x03E8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E9[0x3];                                      // 0x03E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RemappedPitch;                                     // 0x03EC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentRoll;                                       // 0x03F0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LockedRoll;                                        // 0x03F4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHeadShouldBend;                                   // 0x03F8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFootShouldBend;                                   // 0x03F9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3FA[0x6];                                      // 0x03FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BodyGroundOffset;                                  // 0x0400(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MinClampPitchInRange;                              // 0x0418(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MinClampPitchOutRange;                             // 0x0428(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MaxClampPitchInRange;                              // 0x0438(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MaxClampPitchOutRange;                             // 0x0448(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeadAlphaInterpSpeed;                              // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45C[0xF4];                                     // 0x045C(0x00F4)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBaseAnimInstance_CageSaddle">();
	}
	static class UFortBaseAnimInstance_CageSaddle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBaseAnimInstance_CageSaddle>();
	}
};
static_assert(alignof(UFortBaseAnimInstance_CageSaddle) == 0x000010, "Wrong alignment on UFortBaseAnimInstance_CageSaddle");
static_assert(sizeof(UFortBaseAnimInstance_CageSaddle) == 0x000550, "Wrong size on UFortBaseAnimInstance_CageSaddle");
static_assert(offsetof(UFortBaseAnimInstance_CageSaddle, AsFortSphericalVehicle) == 0x0003E0, "Member 'UFortBaseAnimInstance_CageSaddle::AsFortSphericalVehicle' has a wrong offset!");
static_assert(offsetof(UFortBaseAnimInstance_CageSaddle, bIsOnGround) == 0x0003E8, "Member 'UFortBaseAnimInstance_CageSaddle::bIsOnGround' has a wrong offset!");
static_assert(offsetof(UFortBaseAnimInstance_CageSaddle, RemappedPitch) == 0x0003EC, "Member 'UFortBaseAnimInstance_CageSaddle::RemappedPitch' has a wrong offset!");
static_assert(offsetof(UFortBaseAnimInstance_CageSaddle, CurrentRoll) == 0x0003F0, "Member 'UFortBaseAnimInstance_CageSaddle::CurrentRoll' has a wrong offset!");
static_assert(offsetof(UFortBaseAnimInstance_CageSaddle, LockedRoll) == 0x0003F4, "Member 'UFortBaseAnimInstance_CageSaddle::LockedRoll' has a wrong offset!");
static_assert(offsetof(UFortBaseAnimInstance_CageSaddle, bHeadShouldBend) == 0x0003F8, "Member 'UFortBaseAnimInstance_CageSaddle::bHeadShouldBend' has a wrong offset!");
static_assert(offsetof(UFortBaseAnimInstance_CageSaddle, bFootShouldBend) == 0x0003F9, "Member 'UFortBaseAnimInstance_CageSaddle::bFootShouldBend' has a wrong offset!");
static_assert(offsetof(UFortBaseAnimInstance_CageSaddle, BodyGroundOffset) == 0x000400, "Member 'UFortBaseAnimInstance_CageSaddle::BodyGroundOffset' has a wrong offset!");
static_assert(offsetof(UFortBaseAnimInstance_CageSaddle, MinClampPitchInRange) == 0x000418, "Member 'UFortBaseAnimInstance_CageSaddle::MinClampPitchInRange' has a wrong offset!");
static_assert(offsetof(UFortBaseAnimInstance_CageSaddle, MinClampPitchOutRange) == 0x000428, "Member 'UFortBaseAnimInstance_CageSaddle::MinClampPitchOutRange' has a wrong offset!");
static_assert(offsetof(UFortBaseAnimInstance_CageSaddle, MaxClampPitchInRange) == 0x000438, "Member 'UFortBaseAnimInstance_CageSaddle::MaxClampPitchInRange' has a wrong offset!");
static_assert(offsetof(UFortBaseAnimInstance_CageSaddle, MaxClampPitchOutRange) == 0x000448, "Member 'UFortBaseAnimInstance_CageSaddle::MaxClampPitchOutRange' has a wrong offset!");
static_assert(offsetof(UFortBaseAnimInstance_CageSaddle, HeadAlphaInterpSpeed) == 0x000458, "Member 'UFortBaseAnimInstance_CageSaddle::HeadAlphaInterpSpeed' has a wrong offset!");

// Class MotherGameplayRuntime.FortCabbageIglooVehicle
// 0x0000 (0x2430 - 0x2430)
class AFortCabbageIglooVehicle final : public AFortOctopusVehicle
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCabbageIglooVehicle">();
	}
	static class AFortCabbageIglooVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortCabbageIglooVehicle>();
	}
};
static_assert(alignof(AFortCabbageIglooVehicle) == 0x000010, "Wrong alignment on AFortCabbageIglooVehicle");
static_assert(sizeof(AFortCabbageIglooVehicle) == 0x002430, "Wrong size on AFortCabbageIglooVehicle");

// Class MotherGameplayRuntime.FortGameplayCueNotifyLoop_Goop
// 0x0040 (0x0988 - 0x0948)
class AFortGameplayCueNotifyLoop_Goop final : public AFortGameplayCueNotify_Loop
{
public:
	class FName                                   SpeedParamName;                                    // 0x0948(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   IsFallingParamName;                                // 0x094C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGoopAudioMapRangeClamped              SpeedMapRangeClamped;                              // 0x0950(0x0020)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         InterpSpeed;                                       // 0x0970(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_974[0x4];                                      // 0x0974(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        LoopingAudioComponent;                             // 0x0978(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_980[0x8];                                      // 0x0980(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGameplayCueNotifyLoop_Goop">();
	}
	static class AFortGameplayCueNotifyLoop_Goop* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortGameplayCueNotifyLoop_Goop>();
	}
};
static_assert(alignof(AFortGameplayCueNotifyLoop_Goop) == 0x000008, "Wrong alignment on AFortGameplayCueNotifyLoop_Goop");
static_assert(sizeof(AFortGameplayCueNotifyLoop_Goop) == 0x000988, "Wrong size on AFortGameplayCueNotifyLoop_Goop");
static_assert(offsetof(AFortGameplayCueNotifyLoop_Goop, SpeedParamName) == 0x000948, "Member 'AFortGameplayCueNotifyLoop_Goop::SpeedParamName' has a wrong offset!");
static_assert(offsetof(AFortGameplayCueNotifyLoop_Goop, IsFallingParamName) == 0x00094C, "Member 'AFortGameplayCueNotifyLoop_Goop::IsFallingParamName' has a wrong offset!");
static_assert(offsetof(AFortGameplayCueNotifyLoop_Goop, SpeedMapRangeClamped) == 0x000950, "Member 'AFortGameplayCueNotifyLoop_Goop::SpeedMapRangeClamped' has a wrong offset!");
static_assert(offsetof(AFortGameplayCueNotifyLoop_Goop, InterpSpeed) == 0x000970, "Member 'AFortGameplayCueNotifyLoop_Goop::InterpSpeed' has a wrong offset!");
static_assert(offsetof(AFortGameplayCueNotifyLoop_Goop, LoopingAudioComponent) == 0x000978, "Member 'AFortGameplayCueNotifyLoop_Goop::LoopingAudioComponent' has a wrong offset!");

// Class MotherGameplayRuntime.GravityGunTargetTrackingComponent
// 0x01C8 (0x0268 - 0x00A0)
class UGravityGunTargetTrackingComponent final : public UActorComponent
{
public:
	struct FScalableFloat                         AllowLargeObjects;                                 // 0x00A0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         AllowMultipleGrabbers;                             // 0x00C8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         AllowVehicles;                                     // 0x00F0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         AllowPickups;                                      // 0x0118(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         AllowProjectiles;                                  // 0x0140(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         AllowForay;                                        // 0x0168(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         AllowWhileInVehicle;                               // 0x0190(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FName                                   GrabbedByGravityGunTagName;                        // 0x01B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1BC[0x4];                                      // 0x01BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  InvalidTargetTags;                                 // 0x01C0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  TargetIsPlayerTag;                                 // 0x01E0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  TargetIsAlreadyGrabbedTag;                         // 0x0200(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  TargetIsOwnVehicleTag;                             // 0x0220(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(class AActor* NewTarget)> FoundTargetDelegate;                               // 0x0240(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              DeactivateReticleDelegate;                         // 0x0250(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_260[0x8];                                      // 0x0260(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FindTargetActor(class AActor* OwningPlayer, const struct FVector& TraceStart, const struct FVector& TraceEnd);
	bool FindTargetProjectile(class AActor* OwningPlayer, const struct FVector& TraceStart, const struct FVector& TraceEnd, float TargetingRadius);
	bool IsValidTarget(class AActor* OwningPlayer, class AActor* PotentialTarget, struct FGameplayTagContainer* ReasonForFailure);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GravityGunTargetTrackingComponent">();
	}
	static class UGravityGunTargetTrackingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGravityGunTargetTrackingComponent>();
	}
};
static_assert(alignof(UGravityGunTargetTrackingComponent) == 0x000008, "Wrong alignment on UGravityGunTargetTrackingComponent");
static_assert(sizeof(UGravityGunTargetTrackingComponent) == 0x000268, "Wrong size on UGravityGunTargetTrackingComponent");
static_assert(offsetof(UGravityGunTargetTrackingComponent, AllowLargeObjects) == 0x0000A0, "Member 'UGravityGunTargetTrackingComponent::AllowLargeObjects' has a wrong offset!");
static_assert(offsetof(UGravityGunTargetTrackingComponent, AllowMultipleGrabbers) == 0x0000C8, "Member 'UGravityGunTargetTrackingComponent::AllowMultipleGrabbers' has a wrong offset!");
static_assert(offsetof(UGravityGunTargetTrackingComponent, AllowVehicles) == 0x0000F0, "Member 'UGravityGunTargetTrackingComponent::AllowVehicles' has a wrong offset!");
static_assert(offsetof(UGravityGunTargetTrackingComponent, AllowPickups) == 0x000118, "Member 'UGravityGunTargetTrackingComponent::AllowPickups' has a wrong offset!");
static_assert(offsetof(UGravityGunTargetTrackingComponent, AllowProjectiles) == 0x000140, "Member 'UGravityGunTargetTrackingComponent::AllowProjectiles' has a wrong offset!");
static_assert(offsetof(UGravityGunTargetTrackingComponent, AllowForay) == 0x000168, "Member 'UGravityGunTargetTrackingComponent::AllowForay' has a wrong offset!");
static_assert(offsetof(UGravityGunTargetTrackingComponent, AllowWhileInVehicle) == 0x000190, "Member 'UGravityGunTargetTrackingComponent::AllowWhileInVehicle' has a wrong offset!");
static_assert(offsetof(UGravityGunTargetTrackingComponent, GrabbedByGravityGunTagName) == 0x0001B8, "Member 'UGravityGunTargetTrackingComponent::GrabbedByGravityGunTagName' has a wrong offset!");
static_assert(offsetof(UGravityGunTargetTrackingComponent, InvalidTargetTags) == 0x0001C0, "Member 'UGravityGunTargetTrackingComponent::InvalidTargetTags' has a wrong offset!");
static_assert(offsetof(UGravityGunTargetTrackingComponent, TargetIsPlayerTag) == 0x0001E0, "Member 'UGravityGunTargetTrackingComponent::TargetIsPlayerTag' has a wrong offset!");
static_assert(offsetof(UGravityGunTargetTrackingComponent, TargetIsAlreadyGrabbedTag) == 0x000200, "Member 'UGravityGunTargetTrackingComponent::TargetIsAlreadyGrabbedTag' has a wrong offset!");
static_assert(offsetof(UGravityGunTargetTrackingComponent, TargetIsOwnVehicleTag) == 0x000220, "Member 'UGravityGunTargetTrackingComponent::TargetIsOwnVehicleTag' has a wrong offset!");
static_assert(offsetof(UGravityGunTargetTrackingComponent, FoundTargetDelegate) == 0x000240, "Member 'UGravityGunTargetTrackingComponent::FoundTargetDelegate' has a wrong offset!");
static_assert(offsetof(UGravityGunTargetTrackingComponent, DeactivateReticleDelegate) == 0x000250, "Member 'UGravityGunTargetTrackingComponent::DeactivateReticleDelegate' has a wrong offset!");

// Class MotherGameplayRuntime.PropGunFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UPropGunFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void UpdatePropPreviewPosition(class USceneComponent* PropPreviewComponent, const float DeltaTime, const class AFortPawn* AttachPawn, const class FName AttachSocket, const class USkeletalMeshComponent* WeaponMesh, const struct FVector& DesiredRelativeTransform, const float MinimumZOffset, const struct FRotator& RelativeRotation, const struct FVector& CachedScale, const float InterpSpeed);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PropGunFunctionLibrary">();
	}
	static class UPropGunFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPropGunFunctionLibrary>();
	}
};
static_assert(alignof(UPropGunFunctionLibrary) == 0x000008, "Wrong alignment on UPropGunFunctionLibrary");
static_assert(sizeof(UPropGunFunctionLibrary) == 0x000028, "Wrong size on UPropGunFunctionLibrary");

}

