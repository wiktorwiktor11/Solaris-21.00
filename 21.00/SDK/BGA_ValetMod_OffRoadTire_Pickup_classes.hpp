#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BGA_ValetMod_OffRoadTire_Pickup

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "BGA_HeldObject_Parent_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BGA_ValetMod_OffRoadTire_Pickup.BGA_ValetMod_OffRoadTire_Pickup_C
// 0x04C0 (0x1050 - 0x0B90)
class ABGA_ValetMod_OffRoadTire_Pickup_C final : public ABGA_HeldObject_Parent_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BGA_ValetMod_OffRoadTire_Pickup_C;  // 0x0B90(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCapsuleComponent*                      JumpCollision;                                     // 0x0B98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_ValetMod_TireHitGround;                         // 0x0BA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x0BA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortItemEntryComponent*                FortItemEntry;                                     // 0x0BB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Tire;                                              // 0x0BB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0BC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerControllerAthena*            PlayerController;                                  // 0x0BC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldExplode;                                     // 0x0BD0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BD1[0x7];                                      // 0x0BD1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         ExplodeDamageGE;                                   // 0x0BD8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AFortPawn*                              ExplodeInstigator;                                 // 0x0BE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         TargetedActors;                                    // 0x0BF0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class UClass*                                 GE_Explode;                                        // 0x0C00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_Explode;                                        // 0x0C08(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C0C[0x4];                                      // 0x0C0C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectArray;                                       // 0x0C10(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SpawnedProjectileMinSpeed;                         // 0x0C20(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SpawnedProjectileMaxSpeed;                         // 0x0C48(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         ConeHalfAngleInDegrees;                            // 0x0C70(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 CurieBGAtoSpawn;                                   // 0x0C98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CurieFireballsToSpawn;                             // 0x0CA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         FireBallsToSpawn;                                  // 0x0CA8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UFortWorldItemDefinition*               WeaponItemDefinition;                              // 0x0CD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPickup*                            WeaponPickupToGrant;                               // 0x0CD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             LastHit;                                           // 0x0CE0(0x00E0)(Edit, BlueprintVisible, Net, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, ContainsInstancedReference)
	struct FTimerHandle                           FuseTimerHandle;                                   // 0x0DC0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         FuseMinDuration;                                   // 0x0DC8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         FuseMaxDuration;                                   // 0x0DF0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGuid                                  HeldItemGUID;                                      // 0x0E18(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IFortInventoryOwnerInterface> HeldItemInventoryInterface;                        // 0x0E28(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAttachedToWeapon;                                // 0x0E38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dropped;                                           // 0x0E39(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E3A[0x2];                                      // 0x0E3A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           GC_OnFire;                                         // 0x0E3C(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         ExplosionRadius;                                   // 0x0E40(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         VehicleDamage;                                     // 0x0E68(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AFortWeapon*                            WeaponAttachedTo;                                  // 0x0E90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_Refuel;                                         // 0x0E98(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9C[0x4];                                      // 0x0E9C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      SpawnCollisionCheck_ObjectTypes;                   // 0x0EA0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         Max_Spawn_Z;                                       // 0x0EB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpawnCollisionBlocked;                             // 0x0EB4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EB5[0x3];                                      // 0x0EB5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                VelocityAfterVehicleOverlap;                       // 0x0EB8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         HotfixVehicleImpulse;                              // 0x0ED0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         HotfixSpinThrust;                                  // 0x0EF8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_ExplodePlayerDamage;                            // 0x0F20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_ExplodeVehicleDamage;                           // 0x0F28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FuseLit;                                           // 0x0F30(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F31[0x3];                                      // 0x0F31(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinSpeedOfNoStickBounce;                           // 0x0F34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             FailedInteractSound;                               // 0x0F38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  Tag_FailedInteract_InventoryIsFull;                // 0x0F40(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AFortPawn*                              OverlapPawn;                                       // 0x0F60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BounceHeight;                                      // 0x0F68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         JumpHeight;                                        // 0x0F6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FinalBounceJumpHeight;                             // 0x0F70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F74[0x4];                                      // 0x0F74(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             TireSound;                                         // 0x0F78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Final_Bounce_X_Vector;                             // 0x0F80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NoCeilingBounceHeight;                             // 0x0F84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerController*                  OverlapController;                                 // 0x0F88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_PlayerLaunched;                                 // 0x0F90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   LaunchForceFeedback;                               // 0x0F98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VehicleImpulseVelocityMulti;                       // 0x0FA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpinThrust;                                        // 0x0FA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortAthenaVehicle*                     OverlapVehicle;                                    // 0x0FA8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               TireMID;                                           // 0x0FB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         ShouldImpulsePlayer;                               // 0x0FB8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          BBouncingProjectile;                               // 0x0FE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FE1[0x3];                                      // 0x0FE1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           GC_Bounce_Player;                                  // 0x0FE4(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                JumpCollisionLocation;                             // 0x0FE8(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Mod_Tag_to_Apply;                                  // 0x1000(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ModTagToApply;                                     // 0x1004(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Hit_Actor;                                         // 0x1008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFXSystemAsset*                         PickupFX;                                          // 0x1010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortWorldItemDefinition*               TireModWID;                                        // 0x1018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_BounceVehicle;                                  // 0x1020(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1024[0x4];                                     // 0x1024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectContextHandle           Context;                                           // 0x1028(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UFXSystemAsset*                         FX_WaterSpash;                                     // 0x1040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BlueprintOnInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted);
	bool BlueprintOnLocalInteract(class AFortPlayerPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted);
	void BndEvt__FortProjectileMovement_K2Node_ComponentBoundEvent_0_OnProjectileStopDelegate__DelegateSignature(const struct FHitResult& ImpactResult);
	void BndEvt__FortProjectileMovement_K2Node_ComponentBoundEvent_3_OnProjectileBounceDelegate__DelegateSignature(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
	void BndEvt__FortWaterInteraction_K2Node_ComponentBoundEvent_4_WaterInteractionOnEnterWater__DelegateSignature(class AFortWaterBodyActor* WaterBody, class UFortWaterInteractionComponent* WaterInteractionComponent, bool bIsFirstBody);
	void BndEvt__JumpCollision_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__JumpCollision_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void CalcVehicleImpulse(class AActor* Vehicle, float VelocityMultiplier, struct FVector* Vector);
	void CeilingCheck(bool* Success);
	void DebugJumpCapsule();
	void EventAttachedActorDestroyed(class AActor* DestroyedActor);
	void EventAttachedBADied(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void ExecuteUbergraph_BGA_ValetMod_OffRoadTire_Pickup(int32 EntryPoint);
	void HealthChanged();
	void HideAndDestroy();
	void LaunchVehicle();
	void MID_Play_Animation(float StartFrame, float EndFrame);
	void OnDamagePlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnDeathServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnRep_JumpCollisionLocation();
	void OnRep_LastHit();
	void OnRep_OverlapVehicle();
	void OnRep_ShouldExplode();
	void PlayerBounceCosmetics();
	void PlayJiggleTiresAnimation(float StartFrame, float EndFrame);
	void ReceiveBeginPlay();
	bool ShouldApplyMod(class AFortDagwoodVehicle* Vehicle);
	bool ShouldDie(float Damage, class AController* EventInstigator, class AActor* DamageCauser);
	void SpawnPickup();

	bool BlueprintCanInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted, const ETInteractionType InteractionType) const;
	class FText BlueprintGetInteractionString(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted) const;
	bool BlueprintGetInteractionTime(const class AFortPawn* InteractingPawn, float* OutInteractionTime, const EInteractionBeingAttempted InteractionBeingAttempted) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BGA_ValetMod_OffRoadTire_Pickup_C">();
	}
	static class ABGA_ValetMod_OffRoadTire_Pickup_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABGA_ValetMod_OffRoadTire_Pickup_C>();
	}
};
static_assert(alignof(ABGA_ValetMod_OffRoadTire_Pickup_C) == 0x000010, "Wrong alignment on ABGA_ValetMod_OffRoadTire_Pickup_C");
static_assert(sizeof(ABGA_ValetMod_OffRoadTire_Pickup_C) == 0x001050, "Wrong size on ABGA_ValetMod_OffRoadTire_Pickup_C");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, UberGraphFrame_BGA_ValetMod_OffRoadTire_Pickup_C) == 0x000B90, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::UberGraphFrame_BGA_ValetMod_OffRoadTire_Pickup_C' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, JumpCollision) == 0x000B98, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::JumpCollision' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, NS_ValetMod_TireHitGround) == 0x000BA0, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::NS_ValetMod_TireHitGround' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, Sphere) == 0x000BA8, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, FortItemEntry) == 0x000BB0, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::FortItemEntry' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, Tire) == 0x000BB8, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::Tire' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, PlayerPawn) == 0x000BC0, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::PlayerPawn' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, PlayerController) == 0x000BC8, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::PlayerController' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, ShouldExplode) == 0x000BD0, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::ShouldExplode' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, ExplodeDamageGE) == 0x000BD8, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::ExplodeDamageGE' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, ExplodeInstigator) == 0x000BE8, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::ExplodeInstigator' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, TargetedActors) == 0x000BF0, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::TargetedActors' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, GE_Explode) == 0x000C00, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::GE_Explode' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, GC_Explode) == 0x000C08, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::GC_Explode' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, ObjectArray) == 0x000C10, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::ObjectArray' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, SpawnedProjectileMinSpeed) == 0x000C20, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::SpawnedProjectileMinSpeed' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, SpawnedProjectileMaxSpeed) == 0x000C48, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::SpawnedProjectileMaxSpeed' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, ConeHalfAngleInDegrees) == 0x000C70, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::ConeHalfAngleInDegrees' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, CurieBGAtoSpawn) == 0x000C98, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::CurieBGAtoSpawn' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, CurieFireballsToSpawn) == 0x000CA0, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::CurieFireballsToSpawn' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, FireBallsToSpawn) == 0x000CA8, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::FireBallsToSpawn' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, WeaponItemDefinition) == 0x000CD0, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::WeaponItemDefinition' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, WeaponPickupToGrant) == 0x000CD8, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::WeaponPickupToGrant' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, LastHit) == 0x000CE0, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::LastHit' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, FuseTimerHandle) == 0x000DC0, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::FuseTimerHandle' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, FuseMinDuration) == 0x000DC8, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::FuseMinDuration' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, FuseMaxDuration) == 0x000DF0, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::FuseMaxDuration' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, HeldItemGUID) == 0x000E18, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::HeldItemGUID' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, HeldItemInventoryInterface) == 0x000E28, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::HeldItemInventoryInterface' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, IsAttachedToWeapon) == 0x000E38, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::IsAttachedToWeapon' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, Dropped) == 0x000E39, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::Dropped' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, GC_OnFire) == 0x000E3C, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::GC_OnFire' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, ExplosionRadius) == 0x000E40, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::ExplosionRadius' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, VehicleDamage) == 0x000E68, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::VehicleDamage' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, WeaponAttachedTo) == 0x000E90, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::WeaponAttachedTo' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, GC_Refuel) == 0x000E98, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::GC_Refuel' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, SpawnCollisionCheck_ObjectTypes) == 0x000EA0, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::SpawnCollisionCheck_ObjectTypes' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, Max_Spawn_Z) == 0x000EB0, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::Max_Spawn_Z' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, SpawnCollisionBlocked) == 0x000EB4, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::SpawnCollisionBlocked' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, VelocityAfterVehicleOverlap) == 0x000EB8, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::VelocityAfterVehicleOverlap' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, HotfixVehicleImpulse) == 0x000ED0, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::HotfixVehicleImpulse' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, HotfixSpinThrust) == 0x000EF8, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::HotfixSpinThrust' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, GE_ExplodePlayerDamage) == 0x000F20, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::GE_ExplodePlayerDamage' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, GE_ExplodeVehicleDamage) == 0x000F28, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::GE_ExplodeVehicleDamage' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, FuseLit) == 0x000F30, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::FuseLit' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, MinSpeedOfNoStickBounce) == 0x000F34, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::MinSpeedOfNoStickBounce' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, FailedInteractSound) == 0x000F38, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::FailedInteractSound' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, Tag_FailedInteract_InventoryIsFull) == 0x000F40, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::Tag_FailedInteract_InventoryIsFull' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, OverlapPawn) == 0x000F60, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::OverlapPawn' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, BounceHeight) == 0x000F68, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::BounceHeight' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, JumpHeight) == 0x000F6C, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::JumpHeight' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, FinalBounceJumpHeight) == 0x000F70, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::FinalBounceJumpHeight' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, TireSound) == 0x000F78, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::TireSound' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, Final_Bounce_X_Vector) == 0x000F80, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::Final_Bounce_X_Vector' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, NoCeilingBounceHeight) == 0x000F84, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::NoCeilingBounceHeight' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, OverlapController) == 0x000F88, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::OverlapController' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, GE_PlayerLaunched) == 0x000F90, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::GE_PlayerLaunched' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, LaunchForceFeedback) == 0x000F98, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::LaunchForceFeedback' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, VehicleImpulseVelocityMulti) == 0x000FA0, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::VehicleImpulseVelocityMulti' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, SpinThrust) == 0x000FA4, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::SpinThrust' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, OverlapVehicle) == 0x000FA8, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::OverlapVehicle' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, TireMID) == 0x000FB0, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::TireMID' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, ShouldImpulsePlayer) == 0x000FB8, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::ShouldImpulsePlayer' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, BBouncingProjectile) == 0x000FE0, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::BBouncingProjectile' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, GC_Bounce_Player) == 0x000FE4, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::GC_Bounce_Player' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, JumpCollisionLocation) == 0x000FE8, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::JumpCollisionLocation' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, Mod_Tag_to_Apply) == 0x001000, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::Mod_Tag_to_Apply' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, ModTagToApply) == 0x001004, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::ModTagToApply' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, Hit_Actor) == 0x001008, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::Hit_Actor' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, PickupFX) == 0x001010, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::PickupFX' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, TireModWID) == 0x001018, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::TireModWID' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, GC_BounceVehicle) == 0x001020, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::GC_BounceVehicle' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, Context) == 0x001028, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::Context' has a wrong offset!");
static_assert(offsetof(ABGA_ValetMod_OffRoadTire_Pickup_C, FX_WaterSpash) == 0x001040, "Member 'ABGA_ValetMod_OffRoadTire_Pickup_C::FX_WaterSpash' has a wrong offset!");

}

