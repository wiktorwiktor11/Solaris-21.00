#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SpecialEventGameplayUI

#include "Basic.hpp"

#include "SpecialEventGameplayUI_classes.hpp"
#include "SpecialEventGameplayUI_parameters.hpp"


namespace SDK
{

// Function SpecialEventGameplayUI.FortGameplayCinematicWidget.OnCinematicFinished
// (Final, Native, Protected, BlueprintCallable)

void UFortGameplayCinematicWidget::OnCinematicFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGameplayCinematicWidget", "OnCinematicFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayUI.FortGameplayCinematicWidget.OnStartCinematic
// (Event, Protected, BlueprintEvent)

void UFortGameplayCinematicWidget::OnStartCinematic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGameplayCinematicWidget", "OnStartCinematic");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SpecialEventGameplayUI.FortGameplayIntroPanelWidget.OnIntroFinished
// (Final, Native, Protected, BlueprintCallable)

void UFortGameplayIntroPanelWidget::OnIntroFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGameplayIntroPanelWidget", "OnIntroFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayUI.FortGameplayIntroPanelWidget.OnStartIntro
// (Event, Protected, BlueprintEvent)

void UFortGameplayIntroPanelWidget::OnStartIntro()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGameplayIntroPanelWidget", "OnStartIntro");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SpecialEventGameplayUI.FortGameplayIntroPanelWidget.OnWaitingForMinTime
// (Event, Protected, BlueprintEvent)

void UFortGameplayIntroPanelWidget::OnWaitingForMinTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGameplayIntroPanelWidget", "OnWaitingForMinTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SpecialEventGameplayUI.FortGameplayIntroPanelWidget.OnWaitingForPawn
// (Event, Protected, BlueprintEvent)

void UFortGameplayIntroPanelWidget::OnWaitingForPawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGameplayIntroPanelWidget", "OnWaitingForPawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SpecialEventGameplayUI.FortGameplayIntroPanelWidget.OnWaitingForReadyForGameplay
// (Event, Protected, BlueprintEvent)

void UFortGameplayIntroPanelWidget::OnWaitingForReadyForGameplay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGameplayIntroPanelWidget", "OnWaitingForReadyForGameplay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SpecialEventGameplayUI.SpecialEventCursorWidget.BP_OnCursorModeChanged
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class USpecialEventCursorPawnComponent* InCursorPawnComponent                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     NewCursorModeTag                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     OldCursorModeTag                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpecialEventCursorWidget::BP_OnCursorModeChanged(class USpecialEventCursorPawnComponent* InCursorPawnComponent, const struct FGameplayTag& NewCursorModeTag, const struct FGameplayTag& OldCursorModeTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpecialEventCursorWidget", "BP_OnCursorModeChanged");

	Params::SpecialEventCursorWidget_BP_OnCursorModeChanged Parms{};

	Parms.InCursorPawnComponent = InCursorPawnComponent;
	Parms.NewCursorModeTag = std::move(NewCursorModeTag);
	Parms.OldCursorModeTag = std::move(OldCursorModeTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SpecialEventGameplayUI.SpecialEventCursorWidget.BP_OnDesiredVisibilityChanged
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class USpecialEventCursorPawnComponent* InCursorPawnComponent                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     CursorModeTag                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShouldBeVisible                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpecialEventCursorWidget::BP_OnDesiredVisibilityChanged(class USpecialEventCursorPawnComponent* InCursorPawnComponent, const struct FGameplayTag& CursorModeTag, const bool bShouldBeVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpecialEventCursorWidget", "BP_OnDesiredVisibilityChanged");

	Params::SpecialEventCursorWidget_BP_OnDesiredVisibilityChanged Parms{};

	Parms.InCursorPawnComponent = InCursorPawnComponent;
	Parms.CursorModeTag = std::move(CursorModeTag);
	Parms.bShouldBeVisible = bShouldBeVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SpecialEventGameplayUI.SpecialEventCursorWidget.OnCursorModeChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// class USpecialEventCursorPawnComponent* InCursorPawnComponent                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     NewCursorModeTag                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     OldCursorModeTag                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpecialEventCursorWidget::OnCursorModeChanged(class USpecialEventCursorPawnComponent* InCursorPawnComponent, const struct FGameplayTag& NewCursorModeTag, const struct FGameplayTag& OldCursorModeTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpecialEventCursorWidget", "OnCursorModeChanged");

	Params::SpecialEventCursorWidget_OnCursorModeChanged Parms{};

	Parms.InCursorPawnComponent = InCursorPawnComponent;
	Parms.NewCursorModeTag = std::move(NewCursorModeTag);
	Parms.OldCursorModeTag = std::move(OldCursorModeTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayUI.SpecialEventCursorWidget.OnDesiredVisibilityChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// class USpecialEventCursorPawnComponent* InCursorPawnComponent                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     CursorModeTag                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShouldBeVisible                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpecialEventCursorWidget::OnDesiredVisibilityChanged(class USpecialEventCursorPawnComponent* InCursorPawnComponent, const struct FGameplayTag& CursorModeTag, const bool bShouldBeVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpecialEventCursorWidget", "OnDesiredVisibilityChanged");

	Params::SpecialEventCursorWidget_OnDesiredVisibilityChanged Parms{};

	Parms.InCursorPawnComponent = InCursorPawnComponent;
	Parms.CursorModeTag = std::move(CursorModeTag);
	Parms.bShouldBeVisible = bShouldBeVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayUI.SpecialEventCursorWidget.OnViewportLocationChanged
// (Native, Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// class USpecialEventCursorPawnComponent* InCursorPawnComponent                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        NormalizedLocation                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ViewportLocation                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpecialEventCursorWidget::OnViewportLocationChanged(class USpecialEventCursorPawnComponent* InCursorPawnComponent, const struct FVector2D& NormalizedLocation, const struct FVector2D& ViewportLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpecialEventCursorWidget", "OnViewportLocationChanged");

	Params::SpecialEventCursorWidget_OnViewportLocationChanged Parms{};

	Parms.InCursorPawnComponent = InCursorPawnComponent;
	Parms.NormalizedLocation = std::move(NormalizedLocation);
	Parms.ViewportLocation = std::move(ViewportLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SpecialEventGameplayUI.SpecialEventCursorWidget.GetCursorModeTags
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTagContainer            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayTagContainer USpecialEventCursorWidget::GetCursorModeTags() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpecialEventCursorWidget", "GetCursorModeTags");

	Params::SpecialEventCursorWidget_GetCursorModeTags Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SpecialEventGameplayUI.SpecialEventUILibrary.HideFrontEndStateWidget
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewlyHidden                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpecialEventUILibrary::HideFrontEndStateWidget(const class UObject* WorldContextObject, bool bNewlyHidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SpecialEventUILibrary", "HideFrontEndStateWidget");

	Params::SpecialEventUILibrary_HideFrontEndStateWidget Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.bNewlyHidden = bNewlyHidden;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

