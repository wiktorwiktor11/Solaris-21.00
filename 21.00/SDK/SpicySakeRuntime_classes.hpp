#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SpicySakeRuntime

#include "Basic.hpp"

#include "FortniteGame_classes.hpp"
#include "FortniteAI_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class SpicySakeRuntime.FortSpicySakeComponent_Telemetry
// 0x0000 (0x00F8 - 0x00F8)
class UFortSpicySakeComponent_Telemetry final : public UFortAIComponent_Telemetry
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSpicySakeComponent_Telemetry">();
	}
	static class UFortSpicySakeComponent_Telemetry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSpicySakeComponent_Telemetry>();
	}
};
static_assert(alignof(UFortSpicySakeComponent_Telemetry) == 0x000008, "Wrong alignment on UFortSpicySakeComponent_Telemetry");
static_assert(sizeof(UFortSpicySakeComponent_Telemetry) == 0x0000F8, "Wrong size on UFortSpicySakeComponent_Telemetry");

// Class SpicySakeRuntime.FortSpicySakeGameplayCueNotifyLoop_Alive
// 0x0040 (0x0988 - 0x0948)
class AFortSpicySakeGameplayCueNotifyLoop_Alive final : public AFortGameplayCueNotify_Loop
{
public:
	class UFXSystemComponent*                     WaterFX_Native;                                    // 0x0948(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFXSystemComponent*                     LandFX_Native;                                     // 0x0950(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortLayeredAudioComponent*             FortLayerAudio_Native;                             // 0x0958(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AFortAIPawn*                            TargetAIPawn_Native;                               // 0x0960(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bComputeWaterDepth;                                // 0x0968(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_969[0x3];                                      // 0x0969(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TetheredVolumeMultiplier;                          // 0x096C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SoundSurfaceTypeCount;                             // 0x0970(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         VelocityClampingMinimum;                           // 0x0974(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         VelocityClampingMaximum;                           // 0x0978(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_97C[0xC];                                      // 0x097C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSpicySakeGameplayCueNotifyLoop_Alive">();
	}
	static class AFortSpicySakeGameplayCueNotifyLoop_Alive* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortSpicySakeGameplayCueNotifyLoop_Alive>();
	}
};
static_assert(alignof(AFortSpicySakeGameplayCueNotifyLoop_Alive) == 0x000008, "Wrong alignment on AFortSpicySakeGameplayCueNotifyLoop_Alive");
static_assert(sizeof(AFortSpicySakeGameplayCueNotifyLoop_Alive) == 0x000988, "Wrong size on AFortSpicySakeGameplayCueNotifyLoop_Alive");
static_assert(offsetof(AFortSpicySakeGameplayCueNotifyLoop_Alive, WaterFX_Native) == 0x000948, "Member 'AFortSpicySakeGameplayCueNotifyLoop_Alive::WaterFX_Native' has a wrong offset!");
static_assert(offsetof(AFortSpicySakeGameplayCueNotifyLoop_Alive, LandFX_Native) == 0x000950, "Member 'AFortSpicySakeGameplayCueNotifyLoop_Alive::LandFX_Native' has a wrong offset!");
static_assert(offsetof(AFortSpicySakeGameplayCueNotifyLoop_Alive, FortLayerAudio_Native) == 0x000958, "Member 'AFortSpicySakeGameplayCueNotifyLoop_Alive::FortLayerAudio_Native' has a wrong offset!");
static_assert(offsetof(AFortSpicySakeGameplayCueNotifyLoop_Alive, TargetAIPawn_Native) == 0x000960, "Member 'AFortSpicySakeGameplayCueNotifyLoop_Alive::TargetAIPawn_Native' has a wrong offset!");
static_assert(offsetof(AFortSpicySakeGameplayCueNotifyLoop_Alive, bComputeWaterDepth) == 0x000968, "Member 'AFortSpicySakeGameplayCueNotifyLoop_Alive::bComputeWaterDepth' has a wrong offset!");
static_assert(offsetof(AFortSpicySakeGameplayCueNotifyLoop_Alive, TetheredVolumeMultiplier) == 0x00096C, "Member 'AFortSpicySakeGameplayCueNotifyLoop_Alive::TetheredVolumeMultiplier' has a wrong offset!");
static_assert(offsetof(AFortSpicySakeGameplayCueNotifyLoop_Alive, SoundSurfaceTypeCount) == 0x000970, "Member 'AFortSpicySakeGameplayCueNotifyLoop_Alive::SoundSurfaceTypeCount' has a wrong offset!");
static_assert(offsetof(AFortSpicySakeGameplayCueNotifyLoop_Alive, VelocityClampingMinimum) == 0x000974, "Member 'AFortSpicySakeGameplayCueNotifyLoop_Alive::VelocityClampingMinimum' has a wrong offset!");
static_assert(offsetof(AFortSpicySakeGameplayCueNotifyLoop_Alive, VelocityClampingMaximum) == 0x000978, "Member 'AFortSpicySakeGameplayCueNotifyLoop_Alive::VelocityClampingMaximum' has a wrong offset!");

// Class SpicySakeRuntime.FortSpicySakeOccupantAnimInstanceLayer
// 0x0020 (0x0410 - 0x03F0)
class UFortSpicySakeOccupantAnimInstanceLayer final : public UFortBaseLayerAnimInstance
{
public:
	float                                         GroundIdleThreshold;                               // 0x03E8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundIdleLowThreshold;                            // 0x03EC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalVelocityYawAngleTurnResetThreshold;           // 0x03F0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalVelocityYawAngleTurnTransitionThreshold;      // 0x03F4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalVelocityYawAngle;                             // 0x03F8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PawnSpeed2D;                                       // 0x03FC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PawnVelocityZ;                                     // 0x0400(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsFemale : 1;                                     // 0x0404(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsOnGround : 1;                                   // 0x0404(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsOnWater : 1;                                    // 0x0404(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bLandingPredicted : 1;                             // 0x0404(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bTransition_NewFallAditive_NewFallLandAdditive : 1; // 0x0404(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bTransitionNewJumpLoopAdditiveToNewFallAdditive : 1; // 0x0404(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShouldApplyIdleAdditive : 1;                      // 0x0404(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsTargeting : 1;                                  // 0x0404(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsPlayerCloseToShark : 1;                         // 0x0405(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBoosting : 1;                                   // 0x0405(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCanTurnLeft : 1;                                  // 0x0405(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCanTurnRight : 1;                                 // 0x0405(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bTransition_RideLoop_TurnLeft : 1;                 // 0x0405(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bTransition_RideLoop_TurnRight : 1;                // 0x0405(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsReloading : 1;                                  // 0x0405(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsPlayingMeleeAnim : 1;                           // 0x0405(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsPlayingEmote : 1;                               // 0x0406(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShouldPlayOnGroundIdle : 1;                       // 0x0406(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShouldPlayOnGroundIdleLow : 1;                    // 0x0406(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsJumping : 1;                                    // 0x0406(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCanUseTargettingStateMachine : 1;                 // 0x0406(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bTransition_SharRideLoop_To_JumpUp : 1;            // 0x0406(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_407[0x9];                                      // 0x0407(0x0009)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSpicySakeOccupantAnimInstanceLayer">();
	}
	static class UFortSpicySakeOccupantAnimInstanceLayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSpicySakeOccupantAnimInstanceLayer>();
	}
};
static_assert(alignof(UFortSpicySakeOccupantAnimInstanceLayer) == 0x000010, "Wrong alignment on UFortSpicySakeOccupantAnimInstanceLayer");
static_assert(sizeof(UFortSpicySakeOccupantAnimInstanceLayer) == 0x000410, "Wrong size on UFortSpicySakeOccupantAnimInstanceLayer");
static_assert(offsetof(UFortSpicySakeOccupantAnimInstanceLayer, GroundIdleThreshold) == 0x0003E8, "Member 'UFortSpicySakeOccupantAnimInstanceLayer::GroundIdleThreshold' has a wrong offset!");
static_assert(offsetof(UFortSpicySakeOccupantAnimInstanceLayer, GroundIdleLowThreshold) == 0x0003EC, "Member 'UFortSpicySakeOccupantAnimInstanceLayer::GroundIdleLowThreshold' has a wrong offset!");
static_assert(offsetof(UFortSpicySakeOccupantAnimInstanceLayer, LocalVelocityYawAngleTurnResetThreshold) == 0x0003F0, "Member 'UFortSpicySakeOccupantAnimInstanceLayer::LocalVelocityYawAngleTurnResetThreshold' has a wrong offset!");
static_assert(offsetof(UFortSpicySakeOccupantAnimInstanceLayer, LocalVelocityYawAngleTurnTransitionThreshold) == 0x0003F4, "Member 'UFortSpicySakeOccupantAnimInstanceLayer::LocalVelocityYawAngleTurnTransitionThreshold' has a wrong offset!");
static_assert(offsetof(UFortSpicySakeOccupantAnimInstanceLayer, LocalVelocityYawAngle) == 0x0003F8, "Member 'UFortSpicySakeOccupantAnimInstanceLayer::LocalVelocityYawAngle' has a wrong offset!");
static_assert(offsetof(UFortSpicySakeOccupantAnimInstanceLayer, PawnSpeed2D) == 0x0003FC, "Member 'UFortSpicySakeOccupantAnimInstanceLayer::PawnSpeed2D' has a wrong offset!");
static_assert(offsetof(UFortSpicySakeOccupantAnimInstanceLayer, PawnVelocityZ) == 0x000400, "Member 'UFortSpicySakeOccupantAnimInstanceLayer::PawnVelocityZ' has a wrong offset!");

// Class SpicySakeRuntime.FortSpicySakeVehicleAnimInstance
// 0x0040 (0x0420 - 0x03E0)
class UFortSpicySakeVehicleAnimInstance final : public UFortBaseAnimInstance
{
public:
	struct FRotator                               OnGroundSlopeRotOffset;                            // 0x03E0(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         LocalVelocityYawAngle;                             // 0x03F8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardSpeed;                                      // 0x03FC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpSpeed;                                           // 0x0400(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmoothJumpPitch;                                   // 0x0404(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmoothJumpPitchDeltaRate;                          // 0x0408(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentBoostRateScale;                             // 0x040C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsJumping : 1;                                    // 0x0410(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsSurfaceSwimming : 1;                            // 0x0410(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsOnGround : 1;                                   // 0x0410(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsFalling : 1;                                    // 0x0410(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsCharging : 1;                                   // 0x0410(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOnGroundNotMoving : 1;                            // 0x0410(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bLanded : 1;                                       // 0x0410(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBoosting : 1;                                   // 0x0410(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bStartBoosting : 1;                                // 0x0411(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bTransition_Idle_To_Boost : 1;                     // 0x0411(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bTransition_Boost_To_Idle : 1;                     // 0x0411(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_412[0xE];                                      // 0x0412(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSpicySakeVehicleAnimInstance">();
	}
	static class UFortSpicySakeVehicleAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSpicySakeVehicleAnimInstance>();
	}
};
static_assert(alignof(UFortSpicySakeVehicleAnimInstance) == 0x000010, "Wrong alignment on UFortSpicySakeVehicleAnimInstance");
static_assert(sizeof(UFortSpicySakeVehicleAnimInstance) == 0x000420, "Wrong size on UFortSpicySakeVehicleAnimInstance");
static_assert(offsetof(UFortSpicySakeVehicleAnimInstance, OnGroundSlopeRotOffset) == 0x0003E0, "Member 'UFortSpicySakeVehicleAnimInstance::OnGroundSlopeRotOffset' has a wrong offset!");
static_assert(offsetof(UFortSpicySakeVehicleAnimInstance, LocalVelocityYawAngle) == 0x0003F8, "Member 'UFortSpicySakeVehicleAnimInstance::LocalVelocityYawAngle' has a wrong offset!");
static_assert(offsetof(UFortSpicySakeVehicleAnimInstance, ForwardSpeed) == 0x0003FC, "Member 'UFortSpicySakeVehicleAnimInstance::ForwardSpeed' has a wrong offset!");
static_assert(offsetof(UFortSpicySakeVehicleAnimInstance, UpSpeed) == 0x000400, "Member 'UFortSpicySakeVehicleAnimInstance::UpSpeed' has a wrong offset!");
static_assert(offsetof(UFortSpicySakeVehicleAnimInstance, SmoothJumpPitch) == 0x000404, "Member 'UFortSpicySakeVehicleAnimInstance::SmoothJumpPitch' has a wrong offset!");
static_assert(offsetof(UFortSpicySakeVehicleAnimInstance, SmoothJumpPitchDeltaRate) == 0x000408, "Member 'UFortSpicySakeVehicleAnimInstance::SmoothJumpPitchDeltaRate' has a wrong offset!");
static_assert(offsetof(UFortSpicySakeVehicleAnimInstance, CurrentBoostRateScale) == 0x00040C, "Member 'UFortSpicySakeVehicleAnimInstance::CurrentBoostRateScale' has a wrong offset!");

}

