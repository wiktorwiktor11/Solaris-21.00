#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RidingGeneric_Interafce

#include "Basic.hpp"

#include "RidingGeneric_Interafce_classes.hpp"
#include "RidingGeneric_Interafce_parameters.hpp"


namespace SDK
{

// Function RidingGeneric_Interafce.RidingGeneric_Interafce_C.GetRidingInfoFromTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   JumpAttachGroundHeightMin                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   JumpAttachGroundHeightBuffer                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UsesAltRidingMessage                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IRidingGeneric_Interafce_C::GetRidingInfoFromTarget(float* JumpAttachGroundHeightMin, float* JumpAttachGroundHeightBuffer, bool* UsesAltRidingMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RidingGeneric_Interafce_C", "GetRidingInfoFromTarget");

	Params::RidingGeneric_Interafce_C_GetRidingInfoFromTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (JumpAttachGroundHeightMin != nullptr)
		*JumpAttachGroundHeightMin = Parms.JumpAttachGroundHeightMin;

	if (JumpAttachGroundHeightBuffer != nullptr)
		*JumpAttachGroundHeightBuffer = Parms.JumpAttachGroundHeightBuffer;

	if (UsesAltRidingMessage != nullptr)
		*UsesAltRidingMessage = Parms.UsesAltRidingMessage;
}


// Function RidingGeneric_Interafce.RidingGeneric_Interafce_C.ToggleRidingAlternative
// (Public, BlueprintCallable, BlueprintEvent)

void IRidingGeneric_Interafce_C::ToggleRidingAlternative()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RidingGeneric_Interafce_C", "ToggleRidingAlternative");

	UObject::ProcessEvent(Func, nullptr);
}

}

