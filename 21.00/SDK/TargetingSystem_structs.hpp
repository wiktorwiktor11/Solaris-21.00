#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TargetingSystem

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum TargetingSystem.ETargetingAOEShape
// NumValues: 0x0006
enum class ETargetingAOEShape : uint8
{
	Box                                      = 0,
	Cylinder                                 = 1,
	Sphere                                   = 2,
	Capsule                                  = 3,
	SourceComponent                          = 4,
	ETargetingAOEShape_MAX                   = 5,
};

// Enum TargetingSystem.ETargetingTraceType
// NumValues: 0x0003
enum class ETargetingTraceType : uint8
{
	Line                                     = 0,
	Sweep                                    = 1,
	ETargetingTraceType_MAX                  = 2,
};

// ScriptStruct TargetingSystem.TargetingDefaultResultData
// 0x00E8 (0x00E8 - 0x0000)
struct FTargetingDefaultResultData final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x00E0)(IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0[0x8];                                       // 0x00E0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTargetingDefaultResultData) == 0x000008, "Wrong alignment on FTargetingDefaultResultData");
static_assert(sizeof(FTargetingDefaultResultData) == 0x0000E8, "Wrong size on FTargetingDefaultResultData");
static_assert(offsetof(FTargetingDefaultResultData, HitResult) == 0x000000, "Member 'FTargetingDefaultResultData::HitResult' has a wrong offset!");

// ScriptStruct TargetingSystem.TargetingRequestHandle
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FTargetingRequestHandle final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTargetingRequestHandle) == 0x000004, "Wrong alignment on FTargetingRequestHandle");
static_assert(sizeof(FTargetingRequestHandle) == 0x000004, "Wrong size on FTargetingRequestHandle");

// ScriptStruct TargetingSystem.TargetingTaskSet
// 0x0010 (0x0010 - 0x0000)
struct FTargetingTaskSet final
{
public:
	TArray<class UTargetingTask*>                 Tasks;                                             // 0x0000(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTargetingTaskSet) == 0x000008, "Wrong alignment on FTargetingTaskSet");
static_assert(sizeof(FTargetingTaskSet) == 0x000010, "Wrong size on FTargetingTaskSet");
static_assert(offsetof(FTargetingTaskSet, Tasks) == 0x000000, "Member 'FTargetingTaskSet::Tasks' has a wrong offset!");

// ScriptStruct TargetingSystem.TargetingDefaultResultsSet
// 0x0010 (0x0010 - 0x0000)
struct FTargetingDefaultResultsSet final
{
public:
	TArray<struct FTargetingDefaultResultData>    TargetResults;                                     // 0x0000(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTargetingDefaultResultsSet) == 0x000008, "Wrong alignment on FTargetingDefaultResultsSet");
static_assert(sizeof(FTargetingDefaultResultsSet) == 0x000010, "Wrong size on FTargetingDefaultResultsSet");
static_assert(offsetof(FTargetingDefaultResultsSet, TargetResults) == 0x000000, "Member 'FTargetingDefaultResultsSet::TargetResults' has a wrong offset!");

// ScriptStruct TargetingSystem.TargetingSourceContext
// 0x0038 (0x0038 - 0x0000)
struct FTargetingSourceContext final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InstigatorActor;                                   // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SourceLocation;                                    // 0x0010(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SourceSocketName;                                  // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                SourceObject;                                      // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTargetingSourceContext) == 0x000008, "Wrong alignment on FTargetingSourceContext");
static_assert(sizeof(FTargetingSourceContext) == 0x000038, "Wrong size on FTargetingSourceContext");
static_assert(offsetof(FTargetingSourceContext, SourceActor) == 0x000000, "Member 'FTargetingSourceContext::SourceActor' has a wrong offset!");
static_assert(offsetof(FTargetingSourceContext, InstigatorActor) == 0x000008, "Member 'FTargetingSourceContext::InstigatorActor' has a wrong offset!");
static_assert(offsetof(FTargetingSourceContext, SourceLocation) == 0x000010, "Member 'FTargetingSourceContext::SourceLocation' has a wrong offset!");
static_assert(offsetof(FTargetingSourceContext, SourceSocketName) == 0x000028, "Member 'FTargetingSourceContext::SourceSocketName' has a wrong offset!");
static_assert(offsetof(FTargetingSourceContext, SourceObject) == 0x000030, "Member 'FTargetingSourceContext::SourceObject' has a wrong offset!");

// ScriptStruct TargetingSystem.TargetingRequestData
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FTargetingRequestData final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FTargetingRequestHandle& TargetingRequestHandle)> TargetingRequestDynamicDelegate;                   // 0x0018(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTargetingRequestData) == 0x000008, "Wrong alignment on FTargetingRequestData");
static_assert(sizeof(FTargetingRequestData) == 0x000028, "Wrong size on FTargetingRequestData");
static_assert(offsetof(FTargetingRequestData, TargetingRequestDynamicDelegate) == 0x000018, "Member 'FTargetingRequestData::TargetingRequestDynamicDelegate' has a wrong offset!");

// ScriptStruct TargetingSystem.TargetingAsyncTaskData
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FTargetingAsyncTaskData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTargetingAsyncTaskData) == 0x000004, "Wrong alignment on FTargetingAsyncTaskData");
static_assert(sizeof(FTargetingAsyncTaskData) == 0x000008, "Wrong size on FTargetingAsyncTaskData");

// ScriptStruct TargetingSystem.TargetingImmediateTaskData
// 0x0001 (0x0001 - 0x0000)
struct FTargetingImmediateTaskData final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTargetingImmediateTaskData) == 0x000001, "Wrong alignment on FTargetingImmediateTaskData");
static_assert(sizeof(FTargetingImmediateTaskData) == 0x000001, "Wrong size on FTargetingImmediateTaskData");

// ScriptStruct TargetingSystem.TargetingDebugData
// 0x0001 (0x0001 - 0x0000)
struct FTargetingDebugData final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTargetingDebugData) == 0x000001, "Wrong alignment on FTargetingDebugData");
static_assert(sizeof(FTargetingDebugData) == 0x000001, "Wrong size on FTargetingDebugData");

}

